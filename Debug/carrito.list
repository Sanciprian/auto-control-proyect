
carrito.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d328  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005cc  0800d438  0800d438  0001d438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da04  0800da04  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800da04  0800da04  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800da04  0800da04  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0800da04  0800da04  0001da04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da14  0800da14  0001da14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800da18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001550  200001e4  0800dbfc  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001734  0800dbfc  00021734  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cf91  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006072  00000000  00000000  0004d19e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001868  00000000  00000000  00053210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001698  00000000  00000000  00054a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002175b  00000000  00000000  00056110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021196  00000000  00000000  0007786b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b4a4  00000000  00000000  00098a01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00133ea5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007168  00000000  00000000  00133ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d420 	.word	0x0800d420

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800d420 	.word	0x0800d420

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_frsub>:
 8000aac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ab0:	e002      	b.n	8000ab8 <__addsf3>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_fsub>:
 8000ab4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ab8 <__addsf3>:
 8000ab8:	0042      	lsls	r2, r0, #1
 8000aba:	bf1f      	itttt	ne
 8000abc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ac0:	ea92 0f03 	teqne	r2, r3
 8000ac4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ac8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000acc:	d06a      	beq.n	8000ba4 <__addsf3+0xec>
 8000ace:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ad2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ad6:	bfc1      	itttt	gt
 8000ad8:	18d2      	addgt	r2, r2, r3
 8000ada:	4041      	eorgt	r1, r0
 8000adc:	4048      	eorgt	r0, r1
 8000ade:	4041      	eorgt	r1, r0
 8000ae0:	bfb8      	it	lt
 8000ae2:	425b      	neglt	r3, r3
 8000ae4:	2b19      	cmp	r3, #25
 8000ae6:	bf88      	it	hi
 8000ae8:	4770      	bxhi	lr
 8000aea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b06:	bf18      	it	ne
 8000b08:	4249      	negne	r1, r1
 8000b0a:	ea92 0f03 	teq	r2, r3
 8000b0e:	d03f      	beq.n	8000b90 <__addsf3+0xd8>
 8000b10:	f1a2 0201 	sub.w	r2, r2, #1
 8000b14:	fa41 fc03 	asr.w	ip, r1, r3
 8000b18:	eb10 000c 	adds.w	r0, r0, ip
 8000b1c:	f1c3 0320 	rsb	r3, r3, #32
 8000b20:	fa01 f103 	lsl.w	r1, r1, r3
 8000b24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b28:	d502      	bpl.n	8000b30 <__addsf3+0x78>
 8000b2a:	4249      	negs	r1, r1
 8000b2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b34:	d313      	bcc.n	8000b5e <__addsf3+0xa6>
 8000b36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b3a:	d306      	bcc.n	8000b4a <__addsf3+0x92>
 8000b3c:	0840      	lsrs	r0, r0, #1
 8000b3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b42:	f102 0201 	add.w	r2, r2, #1
 8000b46:	2afe      	cmp	r2, #254	; 0xfe
 8000b48:	d251      	bcs.n	8000bee <__addsf3+0x136>
 8000b4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b52:	bf08      	it	eq
 8000b54:	f020 0001 	biceq.w	r0, r0, #1
 8000b58:	ea40 0003 	orr.w	r0, r0, r3
 8000b5c:	4770      	bx	lr
 8000b5e:	0049      	lsls	r1, r1, #1
 8000b60:	eb40 0000 	adc.w	r0, r0, r0
 8000b64:	3a01      	subs	r2, #1
 8000b66:	bf28      	it	cs
 8000b68:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b6c:	d2ed      	bcs.n	8000b4a <__addsf3+0x92>
 8000b6e:	fab0 fc80 	clz	ip, r0
 8000b72:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b76:	ebb2 020c 	subs.w	r2, r2, ip
 8000b7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b7e:	bfaa      	itet	ge
 8000b80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b84:	4252      	neglt	r2, r2
 8000b86:	4318      	orrge	r0, r3
 8000b88:	bfbc      	itt	lt
 8000b8a:	40d0      	lsrlt	r0, r2
 8000b8c:	4318      	orrlt	r0, r3
 8000b8e:	4770      	bx	lr
 8000b90:	f092 0f00 	teq	r2, #0
 8000b94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b98:	bf06      	itte	eq
 8000b9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b9e:	3201      	addeq	r2, #1
 8000ba0:	3b01      	subne	r3, #1
 8000ba2:	e7b5      	b.n	8000b10 <__addsf3+0x58>
 8000ba4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ba8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bac:	bf18      	it	ne
 8000bae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb2:	d021      	beq.n	8000bf8 <__addsf3+0x140>
 8000bb4:	ea92 0f03 	teq	r2, r3
 8000bb8:	d004      	beq.n	8000bc4 <__addsf3+0x10c>
 8000bba:	f092 0f00 	teq	r2, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	4608      	moveq	r0, r1
 8000bc2:	4770      	bx	lr
 8000bc4:	ea90 0f01 	teq	r0, r1
 8000bc8:	bf1c      	itt	ne
 8000bca:	2000      	movne	r0, #0
 8000bcc:	4770      	bxne	lr
 8000bce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bd2:	d104      	bne.n	8000bde <__addsf3+0x126>
 8000bd4:	0040      	lsls	r0, r0, #1
 8000bd6:	bf28      	it	cs
 8000bd8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bdc:	4770      	bx	lr
 8000bde:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000be2:	bf3c      	itt	cc
 8000be4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000be8:	4770      	bxcc	lr
 8000bea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf6:	4770      	bx	lr
 8000bf8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bfc:	bf16      	itet	ne
 8000bfe:	4608      	movne	r0, r1
 8000c00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c04:	4601      	movne	r1, r0
 8000c06:	0242      	lsls	r2, r0, #9
 8000c08:	bf06      	itte	eq
 8000c0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c0e:	ea90 0f01 	teqeq	r0, r1
 8000c12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_ui2f>:
 8000c18:	f04f 0300 	mov.w	r3, #0
 8000c1c:	e004      	b.n	8000c28 <__aeabi_i2f+0x8>
 8000c1e:	bf00      	nop

08000c20 <__aeabi_i2f>:
 8000c20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c24:	bf48      	it	mi
 8000c26:	4240      	negmi	r0, r0
 8000c28:	ea5f 0c00 	movs.w	ip, r0
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c34:	4601      	mov	r1, r0
 8000c36:	f04f 0000 	mov.w	r0, #0
 8000c3a:	e01c      	b.n	8000c76 <__aeabi_l2f+0x2a>

08000c3c <__aeabi_ul2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e00a      	b.n	8000c60 <__aeabi_l2f+0x14>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_l2f>:
 8000c4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c50:	bf08      	it	eq
 8000c52:	4770      	bxeq	lr
 8000c54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c58:	d502      	bpl.n	8000c60 <__aeabi_l2f+0x14>
 8000c5a:	4240      	negs	r0, r0
 8000c5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c60:	ea5f 0c01 	movs.w	ip, r1
 8000c64:	bf02      	ittt	eq
 8000c66:	4684      	moveq	ip, r0
 8000c68:	4601      	moveq	r1, r0
 8000c6a:	2000      	moveq	r0, #0
 8000c6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c70:	bf08      	it	eq
 8000c72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c7a:	fabc f28c 	clz	r2, ip
 8000c7e:	3a08      	subs	r2, #8
 8000c80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c84:	db10      	blt.n	8000ca8 <__aeabi_l2f+0x5c>
 8000c86:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c90:	f1c2 0220 	rsb	r2, r2, #32
 8000c94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c98:	fa20 f202 	lsr.w	r2, r0, r2
 8000c9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ca0:	bf08      	it	eq
 8000ca2:	f020 0001 	biceq.w	r0, r0, #1
 8000ca6:	4770      	bx	lr
 8000ca8:	f102 0220 	add.w	r2, r2, #32
 8000cac:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb0:	f1c2 0220 	rsb	r2, r2, #32
 8000cb4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cb8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cbc:	eb43 0002 	adc.w	r0, r3, r2
 8000cc0:	bf08      	it	eq
 8000cc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_fmul>:
 8000cc8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ccc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd0:	bf1e      	ittt	ne
 8000cd2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cd6:	ea92 0f0c 	teqne	r2, ip
 8000cda:	ea93 0f0c 	teqne	r3, ip
 8000cde:	d06f      	beq.n	8000dc0 <__aeabi_fmul+0xf8>
 8000ce0:	441a      	add	r2, r3
 8000ce2:	ea80 0c01 	eor.w	ip, r0, r1
 8000ce6:	0240      	lsls	r0, r0, #9
 8000ce8:	bf18      	it	ne
 8000cea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cee:	d01e      	beq.n	8000d2e <__aeabi_fmul+0x66>
 8000cf0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cf4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cf8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cfc:	fba0 3101 	umull	r3, r1, r0, r1
 8000d00:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d04:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d08:	bf3e      	ittt	cc
 8000d0a:	0049      	lslcc	r1, r1, #1
 8000d0c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d10:	005b      	lslcc	r3, r3, #1
 8000d12:	ea40 0001 	orr.w	r0, r0, r1
 8000d16:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d1a:	2afd      	cmp	r2, #253	; 0xfd
 8000d1c:	d81d      	bhi.n	8000d5a <__aeabi_fmul+0x92>
 8000d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d26:	bf08      	it	eq
 8000d28:	f020 0001 	biceq.w	r0, r0, #1
 8000d2c:	4770      	bx	lr
 8000d2e:	f090 0f00 	teq	r0, #0
 8000d32:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d36:	bf08      	it	eq
 8000d38:	0249      	lsleq	r1, r1, #9
 8000d3a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d3e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d42:	3a7f      	subs	r2, #127	; 0x7f
 8000d44:	bfc2      	ittt	gt
 8000d46:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d4a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d4e:	4770      	bxgt	lr
 8000d50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d54:	f04f 0300 	mov.w	r3, #0
 8000d58:	3a01      	subs	r2, #1
 8000d5a:	dc5d      	bgt.n	8000e18 <__aeabi_fmul+0x150>
 8000d5c:	f112 0f19 	cmn.w	r2, #25
 8000d60:	bfdc      	itt	le
 8000d62:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d66:	4770      	bxle	lr
 8000d68:	f1c2 0200 	rsb	r2, r2, #0
 8000d6c:	0041      	lsls	r1, r0, #1
 8000d6e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d72:	f1c2 0220 	rsb	r2, r2, #32
 8000d76:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d7e:	f140 0000 	adc.w	r0, r0, #0
 8000d82:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d86:	bf08      	it	eq
 8000d88:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d8c:	4770      	bx	lr
 8000d8e:	f092 0f00 	teq	r2, #0
 8000d92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d96:	bf02      	ittt	eq
 8000d98:	0040      	lsleq	r0, r0, #1
 8000d9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d9e:	3a01      	subeq	r2, #1
 8000da0:	d0f9      	beq.n	8000d96 <__aeabi_fmul+0xce>
 8000da2:	ea40 000c 	orr.w	r0, r0, ip
 8000da6:	f093 0f00 	teq	r3, #0
 8000daa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dae:	bf02      	ittt	eq
 8000db0:	0049      	lsleq	r1, r1, #1
 8000db2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000db6:	3b01      	subeq	r3, #1
 8000db8:	d0f9      	beq.n	8000dae <__aeabi_fmul+0xe6>
 8000dba:	ea41 010c 	orr.w	r1, r1, ip
 8000dbe:	e78f      	b.n	8000ce0 <__aeabi_fmul+0x18>
 8000dc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dc4:	ea92 0f0c 	teq	r2, ip
 8000dc8:	bf18      	it	ne
 8000dca:	ea93 0f0c 	teqne	r3, ip
 8000dce:	d00a      	beq.n	8000de6 <__aeabi_fmul+0x11e>
 8000dd0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dd4:	bf18      	it	ne
 8000dd6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dda:	d1d8      	bne.n	8000d8e <__aeabi_fmul+0xc6>
 8000ddc:	ea80 0001 	eor.w	r0, r0, r1
 8000de0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000de4:	4770      	bx	lr
 8000de6:	f090 0f00 	teq	r0, #0
 8000dea:	bf17      	itett	ne
 8000dec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000df0:	4608      	moveq	r0, r1
 8000df2:	f091 0f00 	teqne	r1, #0
 8000df6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dfa:	d014      	beq.n	8000e26 <__aeabi_fmul+0x15e>
 8000dfc:	ea92 0f0c 	teq	r2, ip
 8000e00:	d101      	bne.n	8000e06 <__aeabi_fmul+0x13e>
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	d10f      	bne.n	8000e26 <__aeabi_fmul+0x15e>
 8000e06:	ea93 0f0c 	teq	r3, ip
 8000e0a:	d103      	bne.n	8000e14 <__aeabi_fmul+0x14c>
 8000e0c:	024b      	lsls	r3, r1, #9
 8000e0e:	bf18      	it	ne
 8000e10:	4608      	movne	r0, r1
 8000e12:	d108      	bne.n	8000e26 <__aeabi_fmul+0x15e>
 8000e14:	ea80 0001 	eor.w	r0, r0, r1
 8000e18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	4770      	bx	lr
 8000e26:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e2a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e2e:	4770      	bx	lr

08000e30 <__aeabi_fdiv>:
 8000e30:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e38:	bf1e      	ittt	ne
 8000e3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e3e:	ea92 0f0c 	teqne	r2, ip
 8000e42:	ea93 0f0c 	teqne	r3, ip
 8000e46:	d069      	beq.n	8000f1c <__aeabi_fdiv+0xec>
 8000e48:	eba2 0203 	sub.w	r2, r2, r3
 8000e4c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e50:	0249      	lsls	r1, r1, #9
 8000e52:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e56:	d037      	beq.n	8000ec8 <__aeabi_fdiv+0x98>
 8000e58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e5c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e60:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e64:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	bf38      	it	cc
 8000e6c:	005b      	lslcc	r3, r3, #1
 8000e6e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e72:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e76:	428b      	cmp	r3, r1
 8000e78:	bf24      	itt	cs
 8000e7a:	1a5b      	subcs	r3, r3, r1
 8000e7c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e80:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e84:	bf24      	itt	cs
 8000e86:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e8a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e8e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e92:	bf24      	itt	cs
 8000e94:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e9c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ea6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eaa:	011b      	lsls	r3, r3, #4
 8000eac:	bf18      	it	ne
 8000eae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eb2:	d1e0      	bne.n	8000e76 <__aeabi_fdiv+0x46>
 8000eb4:	2afd      	cmp	r2, #253	; 0xfd
 8000eb6:	f63f af50 	bhi.w	8000d5a <__aeabi_fmul+0x92>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ec0:	bf08      	it	eq
 8000ec2:	f020 0001 	biceq.w	r0, r0, #1
 8000ec6:	4770      	bx	lr
 8000ec8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ecc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed0:	327f      	adds	r2, #127	; 0x7f
 8000ed2:	bfc2      	ittt	gt
 8000ed4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ed8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000edc:	4770      	bxgt	lr
 8000ede:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee2:	f04f 0300 	mov.w	r3, #0
 8000ee6:	3a01      	subs	r2, #1
 8000ee8:	e737      	b.n	8000d5a <__aeabi_fmul+0x92>
 8000eea:	f092 0f00 	teq	r2, #0
 8000eee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ef2:	bf02      	ittt	eq
 8000ef4:	0040      	lsleq	r0, r0, #1
 8000ef6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000efa:	3a01      	subeq	r2, #1
 8000efc:	d0f9      	beq.n	8000ef2 <__aeabi_fdiv+0xc2>
 8000efe:	ea40 000c 	orr.w	r0, r0, ip
 8000f02:	f093 0f00 	teq	r3, #0
 8000f06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f0a:	bf02      	ittt	eq
 8000f0c:	0049      	lsleq	r1, r1, #1
 8000f0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f12:	3b01      	subeq	r3, #1
 8000f14:	d0f9      	beq.n	8000f0a <__aeabi_fdiv+0xda>
 8000f16:	ea41 010c 	orr.w	r1, r1, ip
 8000f1a:	e795      	b.n	8000e48 <__aeabi_fdiv+0x18>
 8000f1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f20:	ea92 0f0c 	teq	r2, ip
 8000f24:	d108      	bne.n	8000f38 <__aeabi_fdiv+0x108>
 8000f26:	0242      	lsls	r2, r0, #9
 8000f28:	f47f af7d 	bne.w	8000e26 <__aeabi_fmul+0x15e>
 8000f2c:	ea93 0f0c 	teq	r3, ip
 8000f30:	f47f af70 	bne.w	8000e14 <__aeabi_fmul+0x14c>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e776      	b.n	8000e26 <__aeabi_fmul+0x15e>
 8000f38:	ea93 0f0c 	teq	r3, ip
 8000f3c:	d104      	bne.n	8000f48 <__aeabi_fdiv+0x118>
 8000f3e:	024b      	lsls	r3, r1, #9
 8000f40:	f43f af4c 	beq.w	8000ddc <__aeabi_fmul+0x114>
 8000f44:	4608      	mov	r0, r1
 8000f46:	e76e      	b.n	8000e26 <__aeabi_fmul+0x15e>
 8000f48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f4c:	bf18      	it	ne
 8000f4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f52:	d1ca      	bne.n	8000eea <__aeabi_fdiv+0xba>
 8000f54:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f58:	f47f af5c 	bne.w	8000e14 <__aeabi_fmul+0x14c>
 8000f5c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f60:	f47f af3c 	bne.w	8000ddc <__aeabi_fmul+0x114>
 8000f64:	e75f      	b.n	8000e26 <__aeabi_fmul+0x15e>
 8000f66:	bf00      	nop

08000f68 <__gesf2>:
 8000f68:	f04f 3cff 	mov.w	ip, #4294967295
 8000f6c:	e006      	b.n	8000f7c <__cmpsf2+0x4>
 8000f6e:	bf00      	nop

08000f70 <__lesf2>:
 8000f70:	f04f 0c01 	mov.w	ip, #1
 8000f74:	e002      	b.n	8000f7c <__cmpsf2+0x4>
 8000f76:	bf00      	nop

08000f78 <__cmpsf2>:
 8000f78:	f04f 0c01 	mov.w	ip, #1
 8000f7c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f8c:	bf18      	it	ne
 8000f8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f92:	d011      	beq.n	8000fb8 <__cmpsf2+0x40>
 8000f94:	b001      	add	sp, #4
 8000f96:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f9a:	bf18      	it	ne
 8000f9c:	ea90 0f01 	teqne	r0, r1
 8000fa0:	bf58      	it	pl
 8000fa2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fa6:	bf88      	it	hi
 8000fa8:	17c8      	asrhi	r0, r1, #31
 8000faa:	bf38      	it	cc
 8000fac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fb0:	bf18      	it	ne
 8000fb2:	f040 0001 	orrne.w	r0, r0, #1
 8000fb6:	4770      	bx	lr
 8000fb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fbc:	d102      	bne.n	8000fc4 <__cmpsf2+0x4c>
 8000fbe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fc2:	d105      	bne.n	8000fd0 <__cmpsf2+0x58>
 8000fc4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fc8:	d1e4      	bne.n	8000f94 <__cmpsf2+0x1c>
 8000fca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fce:	d0e1      	beq.n	8000f94 <__cmpsf2+0x1c>
 8000fd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <__aeabi_cfrcmple>:
 8000fd8:	4684      	mov	ip, r0
 8000fda:	4608      	mov	r0, r1
 8000fdc:	4661      	mov	r1, ip
 8000fde:	e7ff      	b.n	8000fe0 <__aeabi_cfcmpeq>

08000fe0 <__aeabi_cfcmpeq>:
 8000fe0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fe2:	f7ff ffc9 	bl	8000f78 <__cmpsf2>
 8000fe6:	2800      	cmp	r0, #0
 8000fe8:	bf48      	it	mi
 8000fea:	f110 0f00 	cmnmi.w	r0, #0
 8000fee:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ff0 <__aeabi_fcmpeq>:
 8000ff0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff4:	f7ff fff4 	bl	8000fe0 <__aeabi_cfcmpeq>
 8000ff8:	bf0c      	ite	eq
 8000ffa:	2001      	moveq	r0, #1
 8000ffc:	2000      	movne	r0, #0
 8000ffe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001002:	bf00      	nop

08001004 <__aeabi_fcmplt>:
 8001004:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001008:	f7ff ffea 	bl	8000fe0 <__aeabi_cfcmpeq>
 800100c:	bf34      	ite	cc
 800100e:	2001      	movcc	r0, #1
 8001010:	2000      	movcs	r0, #0
 8001012:	f85d fb08 	ldr.w	pc, [sp], #8
 8001016:	bf00      	nop

08001018 <__aeabi_fcmple>:
 8001018:	f84d ed08 	str.w	lr, [sp, #-8]!
 800101c:	f7ff ffe0 	bl	8000fe0 <__aeabi_cfcmpeq>
 8001020:	bf94      	ite	ls
 8001022:	2001      	movls	r0, #1
 8001024:	2000      	movhi	r0, #0
 8001026:	f85d fb08 	ldr.w	pc, [sp], #8
 800102a:	bf00      	nop

0800102c <__aeabi_fcmpge>:
 800102c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001030:	f7ff ffd2 	bl	8000fd8 <__aeabi_cfrcmple>
 8001034:	bf94      	ite	ls
 8001036:	2001      	movls	r0, #1
 8001038:	2000      	movhi	r0, #0
 800103a:	f85d fb08 	ldr.w	pc, [sp], #8
 800103e:	bf00      	nop

08001040 <__aeabi_fcmpgt>:
 8001040:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001044:	f7ff ffc8 	bl	8000fd8 <__aeabi_cfrcmple>
 8001048:	bf34      	ite	cc
 800104a:	2001      	movcc	r0, #1
 800104c:	2000      	movcs	r0, #0
 800104e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001052:	bf00      	nop

08001054 <__aeabi_f2iz>:
 8001054:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001058:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800105c:	d30f      	bcc.n	800107e <__aeabi_f2iz+0x2a>
 800105e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001062:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001066:	d90d      	bls.n	8001084 <__aeabi_f2iz+0x30>
 8001068:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800106c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001070:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001074:	fa23 f002 	lsr.w	r0, r3, r2
 8001078:	bf18      	it	ne
 800107a:	4240      	negne	r0, r0
 800107c:	4770      	bx	lr
 800107e:	f04f 0000 	mov.w	r0, #0
 8001082:	4770      	bx	lr
 8001084:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001088:	d101      	bne.n	800108e <__aeabi_f2iz+0x3a>
 800108a:	0242      	lsls	r2, r0, #9
 800108c:	d105      	bne.n	800109a <__aeabi_f2iz+0x46>
 800108e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001092:	bf08      	it	eq
 8001094:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001098:	4770      	bx	lr
 800109a:	f04f 0000 	mov.w	r0, #0
 800109e:	4770      	bx	lr

080010a0 <__aeabi_f2uiz>:
 80010a0:	0042      	lsls	r2, r0, #1
 80010a2:	d20e      	bcs.n	80010c2 <__aeabi_f2uiz+0x22>
 80010a4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010a8:	d30b      	bcc.n	80010c2 <__aeabi_f2uiz+0x22>
 80010aa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ae:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010b2:	d409      	bmi.n	80010c8 <__aeabi_f2uiz+0x28>
 80010b4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010bc:	fa23 f002 	lsr.w	r0, r3, r2
 80010c0:	4770      	bx	lr
 80010c2:	f04f 0000 	mov.w	r0, #0
 80010c6:	4770      	bx	lr
 80010c8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010cc:	d101      	bne.n	80010d2 <__aeabi_f2uiz+0x32>
 80010ce:	0242      	lsls	r2, r0, #9
 80010d0:	d102      	bne.n	80010d8 <__aeabi_f2uiz+0x38>
 80010d2:	f04f 30ff 	mov.w	r0, #4294967295
 80010d6:	4770      	bx	lr
 80010d8:	f04f 0000 	mov.w	r0, #0
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <SelectPage>:
 * 			 PAGE_1]
 *
 * 	 @retval None
 */
void SelectPage(uint8_t page)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af04      	add	r7, sp, #16
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]

	if (HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, PAGE_ID_ADDR, 1, &page, 1, 100) != HAL_OK)
 80010ea:	2364      	movs	r3, #100	; 0x64
 80010ec:	9302      	str	r3, [sp, #8]
 80010ee:	2301      	movs	r3, #1
 80010f0:	9301      	str	r3, [sp, #4]
 80010f2:	1dfb      	adds	r3, r7, #7
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2301      	movs	r3, #1
 80010f8:	2207      	movs	r2, #7
 80010fa:	2150      	movs	r1, #80	; 0x50
 80010fc:	4807      	ldr	r0, [pc, #28]	; (800111c <SelectPage+0x3c>)
 80010fe:	f002 ff9f 	bl	8004040 <HAL_I2C_Mem_Write>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d002      	beq.n	800110e <SelectPage+0x2e>
	{
		printf("Register page replacement could not be set\n");
 8001108:	4805      	ldr	r0, [pc, #20]	; (8001120 <SelectPage+0x40>)
 800110a:	f00b f98b 	bl	800c424 <puts>
	}
	HAL_Delay(50);
 800110e:	2032      	movs	r0, #50	; 0x32
 8001110:	f002 fa6e 	bl	80035f0 <HAL_Delay>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000530 	.word	0x20000530
 8001120:	0800d498 	.word	0x0800d498

08001124 <ReadData>:
 *			 SENSOR_QUATERNION]
 *
 *   @retval Structure containing the values ​​of the read data
 */
void ReadData(BNO055_Sensors_t *sensorData, BNO055_Sensor_Type sensors)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af04      	add	r7, sp, #16
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	70fb      	strb	r3, [r7, #3]

	uint8_t buffer[8];

	if (sensors & SENSOR_GRAVITY)
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	2b00      	cmp	r3, #0
 8001138:	d05c      	beq.n	80011f4 <ReadData+0xd0>
	{

		HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_GRAVITY, 1, buffer, 6, HAL_MAX_DELAY);
 800113a:	f04f 33ff 	mov.w	r3, #4294967295
 800113e:	9302      	str	r3, [sp, #8]
 8001140:	2306      	movs	r3, #6
 8001142:	9301      	str	r3, [sp, #4]
 8001144:	f107 0308 	add.w	r3, r7, #8
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	2301      	movs	r3, #1
 800114c:	222e      	movs	r2, #46	; 0x2e
 800114e:	2150      	movs	r1, #80	; 0x50
 8001150:	48b9      	ldr	r0, [pc, #740]	; (8001438 <ReadData+0x314>)
 8001152:	f003 f86f 	bl	8004234 <HAL_I2C_Mem_Read>
		sensorData->Gravity.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0])) / 100.0);
 8001156:	7a7b      	ldrb	r3, [r7, #9]
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	b21a      	sxth	r2, r3
 800115c:	7a3b      	ldrb	r3, [r7, #8]
 800115e:	b21b      	sxth	r3, r3
 8001160:	4313      	orrs	r3, r2
 8001162:	b21b      	sxth	r3, r3
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff f94d 	bl	8000404 <__aeabi_i2d>
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	4bb3      	ldr	r3, [pc, #716]	; (800143c <ReadData+0x318>)
 8001170:	f7ff fadc 	bl	800072c <__aeabi_ddiv>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	f7ff fc46 	bl	8000a0c <__aeabi_d2f>
 8001180:	4602      	mov	r2, r0
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	63da      	str	r2, [r3, #60]	; 0x3c
		sensorData->Gravity.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2])) / 100.0);
 8001186:	7afb      	ldrb	r3, [r7, #11]
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	b21a      	sxth	r2, r3
 800118c:	7abb      	ldrb	r3, [r7, #10]
 800118e:	b21b      	sxth	r3, r3
 8001190:	4313      	orrs	r3, r2
 8001192:	b21b      	sxth	r3, r3
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff f935 	bl	8000404 <__aeabi_i2d>
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	4ba7      	ldr	r3, [pc, #668]	; (800143c <ReadData+0x318>)
 80011a0:	f7ff fac4 	bl	800072c <__aeabi_ddiv>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f7ff fc2e 	bl	8000a0c <__aeabi_d2f>
 80011b0:	4602      	mov	r2, r0
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	641a      	str	r2, [r3, #64]	; 0x40
		sensorData->Gravity.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4])) / 100.0);
 80011b6:	7b7b      	ldrb	r3, [r7, #13]
 80011b8:	021b      	lsls	r3, r3, #8
 80011ba:	b21a      	sxth	r2, r3
 80011bc:	7b3b      	ldrb	r3, [r7, #12]
 80011be:	b21b      	sxth	r3, r3
 80011c0:	4313      	orrs	r3, r2
 80011c2:	b21b      	sxth	r3, r3
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f91d 	bl	8000404 <__aeabi_i2d>
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	4b9b      	ldr	r3, [pc, #620]	; (800143c <ReadData+0x318>)
 80011d0:	f7ff faac 	bl	800072c <__aeabi_ddiv>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	f7ff fc16 	bl	8000a0c <__aeabi_d2f>
 80011e0:	4602      	mov	r2, r0
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	645a      	str	r2, [r3, #68]	; 0x44
		memset(buffer, 0, sizeof(buffer));
 80011e6:	f107 0308 	add.w	r3, r7, #8
 80011ea:	2208      	movs	r2, #8
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f00b f8a2 	bl	800c338 <memset>
	}

	if (sensors & SENSOR_QUATERNION)
 80011f4:	78fb      	ldrb	r3, [r7, #3]
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d064      	beq.n	80012c8 <ReadData+0x1a4>
	{

		HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_QUATERNION, 1, buffer, 8, HAL_MAX_DELAY);
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001202:	9302      	str	r3, [sp, #8]
 8001204:	2308      	movs	r3, #8
 8001206:	9301      	str	r3, [sp, #4]
 8001208:	f107 0308 	add.w	r3, r7, #8
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	2301      	movs	r3, #1
 8001210:	2220      	movs	r2, #32
 8001212:	2150      	movs	r1, #80	; 0x50
 8001214:	4888      	ldr	r0, [pc, #544]	; (8001438 <ReadData+0x314>)
 8001216:	f003 f80d 	bl	8004234 <HAL_I2C_Mem_Read>
		sensorData->Quaternion.W = (float)(((int16_t)((buffer[1] << 8) | buffer[0])) / (1 << 14));
 800121a:	7a7b      	ldrb	r3, [r7, #9]
 800121c:	021b      	lsls	r3, r3, #8
 800121e:	b21a      	sxth	r2, r3
 8001220:	7a3b      	ldrb	r3, [r7, #8]
 8001222:	b21b      	sxth	r3, r3
 8001224:	4313      	orrs	r3, r2
 8001226:	b21b      	sxth	r3, r3
 8001228:	2b00      	cmp	r3, #0
 800122a:	da02      	bge.n	8001232 <ReadData+0x10e>
 800122c:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001230:	333f      	adds	r3, #63	; 0x3f
 8001232:	139b      	asrs	r3, r3, #14
 8001234:	b21b      	sxth	r3, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fcf2 	bl	8000c20 <__aeabi_i2f>
 800123c:	4602      	mov	r2, r0
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	649a      	str	r2, [r3, #72]	; 0x48
		sensorData->Quaternion.X = (float)(((int16_t)((buffer[3] << 8) | buffer[2])) / (1 << 14));
 8001242:	7afb      	ldrb	r3, [r7, #11]
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	b21a      	sxth	r2, r3
 8001248:	7abb      	ldrb	r3, [r7, #10]
 800124a:	b21b      	sxth	r3, r3
 800124c:	4313      	orrs	r3, r2
 800124e:	b21b      	sxth	r3, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	da02      	bge.n	800125a <ReadData+0x136>
 8001254:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001258:	333f      	adds	r3, #63	; 0x3f
 800125a:	139b      	asrs	r3, r3, #14
 800125c:	b21b      	sxth	r3, r3
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fcde 	bl	8000c20 <__aeabi_i2f>
 8001264:	4602      	mov	r2, r0
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	64da      	str	r2, [r3, #76]	; 0x4c
		sensorData->Quaternion.Y = (float)(((int16_t)((buffer[5] << 8) | buffer[4])) / (1 << 14));
 800126a:	7b7b      	ldrb	r3, [r7, #13]
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	b21a      	sxth	r2, r3
 8001270:	7b3b      	ldrb	r3, [r7, #12]
 8001272:	b21b      	sxth	r3, r3
 8001274:	4313      	orrs	r3, r2
 8001276:	b21b      	sxth	r3, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	da02      	bge.n	8001282 <ReadData+0x15e>
 800127c:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001280:	333f      	adds	r3, #63	; 0x3f
 8001282:	139b      	asrs	r3, r3, #14
 8001284:	b21b      	sxth	r3, r3
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fcca 	bl	8000c20 <__aeabi_i2f>
 800128c:	4602      	mov	r2, r0
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	651a      	str	r2, [r3, #80]	; 0x50
		sensorData->Quaternion.Z = (float)(((int16_t)((buffer[7] << 8) | buffer[6])) / (1 << 14));
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	021b      	lsls	r3, r3, #8
 8001296:	b21a      	sxth	r2, r3
 8001298:	7bbb      	ldrb	r3, [r7, #14]
 800129a:	b21b      	sxth	r3, r3
 800129c:	4313      	orrs	r3, r2
 800129e:	b21b      	sxth	r3, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	da02      	bge.n	80012aa <ReadData+0x186>
 80012a4:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80012a8:	333f      	adds	r3, #63	; 0x3f
 80012aa:	139b      	asrs	r3, r3, #14
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fcb6 	bl	8000c20 <__aeabi_i2f>
 80012b4:	4602      	mov	r2, r0
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	655a      	str	r2, [r3, #84]	; 0x54
		memset(buffer, 0, sizeof(buffer));
 80012ba:	f107 0308 	add.w	r3, r7, #8
 80012be:	2208      	movs	r2, #8
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f00b f838 	bl	800c338 <memset>
	}

	if (sensors & SENSOR_LINACC)
 80012c8:	78fb      	ldrb	r3, [r7, #3]
 80012ca:	f003 0304 	and.w	r3, r3, #4
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d05c      	beq.n	800138c <ReadData+0x268>
	{

		HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_LINACC, 1, buffer, 6, HAL_MAX_DELAY);
 80012d2:	f04f 33ff 	mov.w	r3, #4294967295
 80012d6:	9302      	str	r3, [sp, #8]
 80012d8:	2306      	movs	r3, #6
 80012da:	9301      	str	r3, [sp, #4]
 80012dc:	f107 0308 	add.w	r3, r7, #8
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	2301      	movs	r3, #1
 80012e4:	2228      	movs	r2, #40	; 0x28
 80012e6:	2150      	movs	r1, #80	; 0x50
 80012e8:	4853      	ldr	r0, [pc, #332]	; (8001438 <ReadData+0x314>)
 80012ea:	f002 ffa3 	bl	8004234 <HAL_I2C_Mem_Read>
		sensorData->LineerAcc.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0])) / 100.0);
 80012ee:	7a7b      	ldrb	r3, [r7, #9]
 80012f0:	021b      	lsls	r3, r3, #8
 80012f2:	b21a      	sxth	r2, r3
 80012f4:	7a3b      	ldrb	r3, [r7, #8]
 80012f6:	b21b      	sxth	r3, r3
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f881 	bl	8000404 <__aeabi_i2d>
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	4b4d      	ldr	r3, [pc, #308]	; (800143c <ReadData+0x318>)
 8001308:	f7ff fa10 	bl	800072c <__aeabi_ddiv>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4610      	mov	r0, r2
 8001312:	4619      	mov	r1, r3
 8001314:	f7ff fb7a 	bl	8000a0c <__aeabi_d2f>
 8001318:	4602      	mov	r2, r0
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	631a      	str	r2, [r3, #48]	; 0x30
		sensorData->LineerAcc.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2])) / 100.0);
 800131e:	7afb      	ldrb	r3, [r7, #11]
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	b21a      	sxth	r2, r3
 8001324:	7abb      	ldrb	r3, [r7, #10]
 8001326:	b21b      	sxth	r3, r3
 8001328:	4313      	orrs	r3, r2
 800132a:	b21b      	sxth	r3, r3
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f869 	bl	8000404 <__aeabi_i2d>
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	4b41      	ldr	r3, [pc, #260]	; (800143c <ReadData+0x318>)
 8001338:	f7ff f9f8 	bl	800072c <__aeabi_ddiv>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4610      	mov	r0, r2
 8001342:	4619      	mov	r1, r3
 8001344:	f7ff fb62 	bl	8000a0c <__aeabi_d2f>
 8001348:	4602      	mov	r2, r0
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	635a      	str	r2, [r3, #52]	; 0x34
		sensorData->LineerAcc.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4])) / 100.0);
 800134e:	7b7b      	ldrb	r3, [r7, #13]
 8001350:	021b      	lsls	r3, r3, #8
 8001352:	b21a      	sxth	r2, r3
 8001354:	7b3b      	ldrb	r3, [r7, #12]
 8001356:	b21b      	sxth	r3, r3
 8001358:	4313      	orrs	r3, r2
 800135a:	b21b      	sxth	r3, r3
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f851 	bl	8000404 <__aeabi_i2d>
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	4b35      	ldr	r3, [pc, #212]	; (800143c <ReadData+0x318>)
 8001368:	f7ff f9e0 	bl	800072c <__aeabi_ddiv>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4610      	mov	r0, r2
 8001372:	4619      	mov	r1, r3
 8001374:	f7ff fb4a 	bl	8000a0c <__aeabi_d2f>
 8001378:	4602      	mov	r2, r0
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	639a      	str	r2, [r3, #56]	; 0x38
		memset(buffer, 0, sizeof(buffer));
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	2208      	movs	r2, #8
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f00a ffd6 	bl	800c338 <memset>
	}

	if (sensors & SENSOR_GYRO)
 800138c:	78fb      	ldrb	r3, [r7, #3]
 800138e:	f003 0308 	and.w	r3, r3, #8
 8001392:	2b00      	cmp	r3, #0
 8001394:	d063      	beq.n	800145e <ReadData+0x33a>
	{

		HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_GYRO, 1, buffer, 6, HAL_MAX_DELAY);
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
 800139a:	9302      	str	r3, [sp, #8]
 800139c:	2306      	movs	r3, #6
 800139e:	9301      	str	r3, [sp, #4]
 80013a0:	f107 0308 	add.w	r3, r7, #8
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2301      	movs	r3, #1
 80013a8:	2214      	movs	r2, #20
 80013aa:	2150      	movs	r1, #80	; 0x50
 80013ac:	4822      	ldr	r0, [pc, #136]	; (8001438 <ReadData+0x314>)
 80013ae:	f002 ff41 	bl	8004234 <HAL_I2C_Mem_Read>
		sensorData->Gyro.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0])) / 16.0);
 80013b2:	7a7b      	ldrb	r3, [r7, #9]
 80013b4:	021b      	lsls	r3, r3, #8
 80013b6:	b21a      	sxth	r2, r3
 80013b8:	7a3b      	ldrb	r3, [r7, #8]
 80013ba:	b21b      	sxth	r3, r3
 80013bc:	4313      	orrs	r3, r2
 80013be:	b21b      	sxth	r3, r3
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f81f 	bl	8000404 <__aeabi_i2d>
 80013c6:	f04f 0200 	mov.w	r2, #0
 80013ca:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <ReadData+0x31c>)
 80013cc:	f7ff f9ae 	bl	800072c <__aeabi_ddiv>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	4610      	mov	r0, r2
 80013d6:	4619      	mov	r1, r3
 80013d8:	f7ff fb18 	bl	8000a0c <__aeabi_d2f>
 80013dc:	4602      	mov	r2, r0
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	60da      	str	r2, [r3, #12]
		sensorData->Gyro.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2])) / 16.0);
 80013e2:	7afb      	ldrb	r3, [r7, #11]
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	7abb      	ldrb	r3, [r7, #10]
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	4313      	orrs	r3, r2
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff f807 	bl	8000404 <__aeabi_i2d>
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <ReadData+0x31c>)
 80013fc:	f7ff f996 	bl	800072c <__aeabi_ddiv>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4610      	mov	r0, r2
 8001406:	4619      	mov	r1, r3
 8001408:	f7ff fb00 	bl	8000a0c <__aeabi_d2f>
 800140c:	4602      	mov	r2, r0
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	611a      	str	r2, [r3, #16]
		sensorData->Gyro.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4])) / 16.0);
 8001412:	7b7b      	ldrb	r3, [r7, #13]
 8001414:	021b      	lsls	r3, r3, #8
 8001416:	b21a      	sxth	r2, r3
 8001418:	7b3b      	ldrb	r3, [r7, #12]
 800141a:	b21b      	sxth	r3, r3
 800141c:	4313      	orrs	r3, r2
 800141e:	b21b      	sxth	r3, r3
 8001420:	4618      	mov	r0, r3
 8001422:	f7fe ffef 	bl	8000404 <__aeabi_i2d>
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	4b05      	ldr	r3, [pc, #20]	; (8001440 <ReadData+0x31c>)
 800142c:	f7ff f97e 	bl	800072c <__aeabi_ddiv>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4610      	mov	r0, r2
 8001436:	e005      	b.n	8001444 <ReadData+0x320>
 8001438:	20000530 	.word	0x20000530
 800143c:	40590000 	.word	0x40590000
 8001440:	40300000 	.word	0x40300000
 8001444:	4619      	mov	r1, r3
 8001446:	f7ff fae1 	bl	8000a0c <__aeabi_d2f>
 800144a:	4602      	mov	r2, r0
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	615a      	str	r2, [r3, #20]
		memset(buffer, 0, sizeof(buffer));
 8001450:	f107 0308 	add.w	r3, r7, #8
 8001454:	2208      	movs	r2, #8
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f00a ff6d 	bl	800c338 <memset>
	}
	if (sensors & SENSOR_ACCEL)
 800145e:	78fb      	ldrb	r3, [r7, #3]
 8001460:	f003 0310 	and.w	r3, r3, #16
 8001464:	2b00      	cmp	r3, #0
 8001466:	d05c      	beq.n	8001522 <ReadData+0x3fe>
	{

		HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_ACCEL, 1, buffer, 6, HAL_MAX_DELAY);
 8001468:	f04f 33ff 	mov.w	r3, #4294967295
 800146c:	9302      	str	r3, [sp, #8]
 800146e:	2306      	movs	r3, #6
 8001470:	9301      	str	r3, [sp, #4]
 8001472:	f107 0308 	add.w	r3, r7, #8
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	2301      	movs	r3, #1
 800147a:	2208      	movs	r2, #8
 800147c:	2150      	movs	r1, #80	; 0x50
 800147e:	488d      	ldr	r0, [pc, #564]	; (80016b4 <ReadData+0x590>)
 8001480:	f002 fed8 	bl	8004234 <HAL_I2C_Mem_Read>
		sensorData->Accel.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0])) / 100.0);
 8001484:	7a7b      	ldrb	r3, [r7, #9]
 8001486:	021b      	lsls	r3, r3, #8
 8001488:	b21a      	sxth	r2, r3
 800148a:	7a3b      	ldrb	r3, [r7, #8]
 800148c:	b21b      	sxth	r3, r3
 800148e:	4313      	orrs	r3, r2
 8001490:	b21b      	sxth	r3, r3
 8001492:	4618      	mov	r0, r3
 8001494:	f7fe ffb6 	bl	8000404 <__aeabi_i2d>
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	4b86      	ldr	r3, [pc, #536]	; (80016b8 <ReadData+0x594>)
 800149e:	f7ff f945 	bl	800072c <__aeabi_ddiv>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4610      	mov	r0, r2
 80014a8:	4619      	mov	r1, r3
 80014aa:	f7ff faaf 	bl	8000a0c <__aeabi_d2f>
 80014ae:	4602      	mov	r2, r0
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	601a      	str	r2, [r3, #0]
		sensorData->Accel.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2])) / 100.0);
 80014b4:	7afb      	ldrb	r3, [r7, #11]
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	b21a      	sxth	r2, r3
 80014ba:	7abb      	ldrb	r3, [r7, #10]
 80014bc:	b21b      	sxth	r3, r3
 80014be:	4313      	orrs	r3, r2
 80014c0:	b21b      	sxth	r3, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7fe ff9e 	bl	8000404 <__aeabi_i2d>
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	4b7a      	ldr	r3, [pc, #488]	; (80016b8 <ReadData+0x594>)
 80014ce:	f7ff f92d 	bl	800072c <__aeabi_ddiv>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	f7ff fa97 	bl	8000a0c <__aeabi_d2f>
 80014de:	4602      	mov	r2, r0
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	605a      	str	r2, [r3, #4]
		sensorData->Accel.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4])) / 100.0);
 80014e4:	7b7b      	ldrb	r3, [r7, #13]
 80014e6:	021b      	lsls	r3, r3, #8
 80014e8:	b21a      	sxth	r2, r3
 80014ea:	7b3b      	ldrb	r3, [r7, #12]
 80014ec:	b21b      	sxth	r3, r3
 80014ee:	4313      	orrs	r3, r2
 80014f0:	b21b      	sxth	r3, r3
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7fe ff86 	bl	8000404 <__aeabi_i2d>
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	4b6e      	ldr	r3, [pc, #440]	; (80016b8 <ReadData+0x594>)
 80014fe:	f7ff f915 	bl	800072c <__aeabi_ddiv>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	f7ff fa7f 	bl	8000a0c <__aeabi_d2f>
 800150e:	4602      	mov	r2, r0
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	609a      	str	r2, [r3, #8]
		memset(buffer, 0, sizeof(buffer));
 8001514:	f107 0308 	add.w	r3, r7, #8
 8001518:	2208      	movs	r2, #8
 800151a:	2100      	movs	r1, #0
 800151c:	4618      	mov	r0, r3
 800151e:	f00a ff0b 	bl	800c338 <memset>
	}
	if (sensors & SENSOR_MAG)
 8001522:	78fb      	ldrb	r3, [r7, #3]
 8001524:	f003 0320 	and.w	r3, r3, #32
 8001528:	2b00      	cmp	r3, #0
 800152a:	d05c      	beq.n	80015e6 <ReadData+0x4c2>
	{

		HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_MAG, 1, buffer, 6, HAL_MAX_DELAY);
 800152c:	f04f 33ff 	mov.w	r3, #4294967295
 8001530:	9302      	str	r3, [sp, #8]
 8001532:	2306      	movs	r3, #6
 8001534:	9301      	str	r3, [sp, #4]
 8001536:	f107 0308 	add.w	r3, r7, #8
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	2301      	movs	r3, #1
 800153e:	220e      	movs	r2, #14
 8001540:	2150      	movs	r1, #80	; 0x50
 8001542:	485c      	ldr	r0, [pc, #368]	; (80016b4 <ReadData+0x590>)
 8001544:	f002 fe76 	bl	8004234 <HAL_I2C_Mem_Read>
		sensorData->Magneto.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0])) / 16.0);
 8001548:	7a7b      	ldrb	r3, [r7, #9]
 800154a:	021b      	lsls	r3, r3, #8
 800154c:	b21a      	sxth	r2, r3
 800154e:	7a3b      	ldrb	r3, [r7, #8]
 8001550:	b21b      	sxth	r3, r3
 8001552:	4313      	orrs	r3, r2
 8001554:	b21b      	sxth	r3, r3
 8001556:	4618      	mov	r0, r3
 8001558:	f7fe ff54 	bl	8000404 <__aeabi_i2d>
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	4b56      	ldr	r3, [pc, #344]	; (80016bc <ReadData+0x598>)
 8001562:	f7ff f8e3 	bl	800072c <__aeabi_ddiv>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f7ff fa4d 	bl	8000a0c <__aeabi_d2f>
 8001572:	4602      	mov	r2, r0
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	619a      	str	r2, [r3, #24]
		sensorData->Magneto.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2])) / 16.0);
 8001578:	7afb      	ldrb	r3, [r7, #11]
 800157a:	021b      	lsls	r3, r3, #8
 800157c:	b21a      	sxth	r2, r3
 800157e:	7abb      	ldrb	r3, [r7, #10]
 8001580:	b21b      	sxth	r3, r3
 8001582:	4313      	orrs	r3, r2
 8001584:	b21b      	sxth	r3, r3
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe ff3c 	bl	8000404 <__aeabi_i2d>
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	4b4a      	ldr	r3, [pc, #296]	; (80016bc <ReadData+0x598>)
 8001592:	f7ff f8cb 	bl	800072c <__aeabi_ddiv>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4610      	mov	r0, r2
 800159c:	4619      	mov	r1, r3
 800159e:	f7ff fa35 	bl	8000a0c <__aeabi_d2f>
 80015a2:	4602      	mov	r2, r0
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	61da      	str	r2, [r3, #28]
		sensorData->Magneto.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4])) / 16.0);
 80015a8:	7b7b      	ldrb	r3, [r7, #13]
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	b21a      	sxth	r2, r3
 80015ae:	7b3b      	ldrb	r3, [r7, #12]
 80015b0:	b21b      	sxth	r3, r3
 80015b2:	4313      	orrs	r3, r2
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ff24 	bl	8000404 <__aeabi_i2d>
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	4b3e      	ldr	r3, [pc, #248]	; (80016bc <ReadData+0x598>)
 80015c2:	f7ff f8b3 	bl	800072c <__aeabi_ddiv>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	f7ff fa1d 	bl	8000a0c <__aeabi_d2f>
 80015d2:	4602      	mov	r2, r0
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	621a      	str	r2, [r3, #32]
		memset(buffer, 0, sizeof(buffer));
 80015d8:	f107 0308 	add.w	r3, r7, #8
 80015dc:	2208      	movs	r2, #8
 80015de:	2100      	movs	r1, #0
 80015e0:	4618      	mov	r0, r3
 80015e2:	f00a fea9 	bl	800c338 <memset>
	}
	if (sensors & SENSOR_EULER)
 80015e6:	78fb      	ldrb	r3, [r7, #3]
 80015e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d05c      	beq.n	80016aa <ReadData+0x586>
	{

		HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_EULER, 1, buffer, 6, HAL_MAX_DELAY);
 80015f0:	f04f 33ff 	mov.w	r3, #4294967295
 80015f4:	9302      	str	r3, [sp, #8]
 80015f6:	2306      	movs	r3, #6
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	f107 0308 	add.w	r3, r7, #8
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	2301      	movs	r3, #1
 8001602:	221a      	movs	r2, #26
 8001604:	2150      	movs	r1, #80	; 0x50
 8001606:	482b      	ldr	r0, [pc, #172]	; (80016b4 <ReadData+0x590>)
 8001608:	f002 fe14 	bl	8004234 <HAL_I2C_Mem_Read>
		sensorData->Euler.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0])) / 16.0);
 800160c:	7a7b      	ldrb	r3, [r7, #9]
 800160e:	021b      	lsls	r3, r3, #8
 8001610:	b21a      	sxth	r2, r3
 8001612:	7a3b      	ldrb	r3, [r7, #8]
 8001614:	b21b      	sxth	r3, r3
 8001616:	4313      	orrs	r3, r2
 8001618:	b21b      	sxth	r3, r3
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe fef2 	bl	8000404 <__aeabi_i2d>
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	4b25      	ldr	r3, [pc, #148]	; (80016bc <ReadData+0x598>)
 8001626:	f7ff f881 	bl	800072c <__aeabi_ddiv>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	f7ff f9eb 	bl	8000a0c <__aeabi_d2f>
 8001636:	4602      	mov	r2, r0
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	625a      	str	r2, [r3, #36]	; 0x24
		sensorData->Euler.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2])) / 16.0);
 800163c:	7afb      	ldrb	r3, [r7, #11]
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	b21a      	sxth	r2, r3
 8001642:	7abb      	ldrb	r3, [r7, #10]
 8001644:	b21b      	sxth	r3, r3
 8001646:	4313      	orrs	r3, r2
 8001648:	b21b      	sxth	r3, r3
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe feda 	bl	8000404 <__aeabi_i2d>
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	4b19      	ldr	r3, [pc, #100]	; (80016bc <ReadData+0x598>)
 8001656:	f7ff f869 	bl	800072c <__aeabi_ddiv>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4610      	mov	r0, r2
 8001660:	4619      	mov	r1, r3
 8001662:	f7ff f9d3 	bl	8000a0c <__aeabi_d2f>
 8001666:	4602      	mov	r2, r0
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	629a      	str	r2, [r3, #40]	; 0x28
		sensorData->Euler.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4])) / 16.0);
 800166c:	7b7b      	ldrb	r3, [r7, #13]
 800166e:	021b      	lsls	r3, r3, #8
 8001670:	b21a      	sxth	r2, r3
 8001672:	7b3b      	ldrb	r3, [r7, #12]
 8001674:	b21b      	sxth	r3, r3
 8001676:	4313      	orrs	r3, r2
 8001678:	b21b      	sxth	r3, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe fec2 	bl	8000404 <__aeabi_i2d>
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	4b0d      	ldr	r3, [pc, #52]	; (80016bc <ReadData+0x598>)
 8001686:	f7ff f851 	bl	800072c <__aeabi_ddiv>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4610      	mov	r0, r2
 8001690:	4619      	mov	r1, r3
 8001692:	f7ff f9bb 	bl	8000a0c <__aeabi_d2f>
 8001696:	4602      	mov	r2, r0
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	62da      	str	r2, [r3, #44]	; 0x2c
		memset(buffer, 0, sizeof(buffer));
 800169c:	f107 0308 	add.w	r3, r7, #8
 80016a0:	2208      	movs	r2, #8
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f00a fe47 	bl	800c338 <memset>
	}
}
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000530 	.word	0x20000530
 80016b8:	40590000 	.word	0x40590000
 80016bc:	40300000 	.word	0x40300000

080016c0 <Set_Operation_Mode>:
 *            NDOF]
 *
 *  @retval None
 */
void Set_Operation_Mode(Op_Modes_t Mode)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af04      	add	r7, sp, #16
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]

	SelectPage(PAGE_0);
 80016ca:	2000      	movs	r0, #0
 80016cc:	f7ff fd08 	bl	80010e0 <SelectPage>
	if (HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, OPR_MODE_ADDR, 1, &Mode, 1, 100) != HAL_OK)
 80016d0:	2364      	movs	r3, #100	; 0x64
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	2301      	movs	r3, #1
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	1dfb      	adds	r3, r7, #7
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	2301      	movs	r3, #1
 80016de:	223d      	movs	r2, #61	; 0x3d
 80016e0:	2150      	movs	r1, #80	; 0x50
 80016e2:	480d      	ldr	r0, [pc, #52]	; (8001718 <Set_Operation_Mode+0x58>)
 80016e4:	f002 fcac 	bl	8004040 <HAL_I2C_Mem_Write>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <Set_Operation_Mode+0x36>
	{
		printf("Operation mode could not be set!\n");
 80016ee:	480b      	ldr	r0, [pc, #44]	; (800171c <Set_Operation_Mode+0x5c>)
 80016f0:	f00a fe98 	bl	800c424 <puts>
 80016f4:	e002      	b.n	80016fc <Set_Operation_Mode+0x3c>
	}
	else
		printf("Operation mode switching succeeded.\n");
 80016f6:	480a      	ldr	r0, [pc, #40]	; (8001720 <Set_Operation_Mode+0x60>)
 80016f8:	f00a fe94 	bl	800c424 <puts>

	if (Mode == CONFIG_MODE)
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d103      	bne.n	800170a <Set_Operation_Mode+0x4a>
		HAL_Delay(19);
 8001702:	2013      	movs	r0, #19
 8001704:	f001 ff74 	bl	80035f0 <HAL_Delay>

	else
		HAL_Delay(9);
}
 8001708:	e002      	b.n	8001710 <Set_Operation_Mode+0x50>
		HAL_Delay(9);
 800170a:	2009      	movs	r0, #9
 800170c:	f001 ff70 	bl	80035f0 <HAL_Delay>
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000530 	.word	0x20000530
 800171c:	0800d4e0 	.word	0x0800d4e0
 8001720:	0800d504 	.word	0x0800d504

08001724 <SetPowerMODE>:
 *            BNO055_SUSPEND_MODE]
 *
 *  @retval None
 */
void SetPowerMODE(uint8_t BNO055_)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af04      	add	r7, sp, #16
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]

	if (HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, PWR_MODE_ADDR, 1, &BNO055_, 1, 100) != HAL_OK)
 800172e:	2364      	movs	r3, #100	; 0x64
 8001730:	9302      	str	r3, [sp, #8]
 8001732:	2301      	movs	r3, #1
 8001734:	9301      	str	r3, [sp, #4]
 8001736:	1dfb      	adds	r3, r7, #7
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	2301      	movs	r3, #1
 800173c:	223e      	movs	r2, #62	; 0x3e
 800173e:	2150      	movs	r1, #80	; 0x50
 8001740:	4809      	ldr	r0, [pc, #36]	; (8001768 <SetPowerMODE+0x44>)
 8001742:	f002 fc7d 	bl	8004040 <HAL_I2C_Mem_Write>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <SetPowerMODE+0x30>
	{
		printf("Power mode could not be set!\n");
 800174c:	4807      	ldr	r0, [pc, #28]	; (800176c <SetPowerMODE+0x48>)
 800174e:	f00a fe69 	bl	800c424 <puts>
 8001752:	e002      	b.n	800175a <SetPowerMODE+0x36>
	}
	else
	{
		printf("Power mode switching succeeded.\n");
 8001754:	4806      	ldr	r0, [pc, #24]	; (8001770 <SetPowerMODE+0x4c>)
 8001756:	f00a fe65 	bl	800c424 <puts>
	}
	HAL_Delay(50);
 800175a:	2032      	movs	r0, #50	; 0x32
 800175c:	f001 ff48 	bl	80035f0 <HAL_Delay>
}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000530 	.word	0x20000530
 800176c:	0800d528 	.word	0x0800d528
 8001770:	0800d548 	.word	0x0800d548

08001774 <Clock_Source>:
 *            CLOCK_INTERNAL]
 *
 *  @retval None
 */
void Clock_Source(uint8_t source)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af04      	add	r7, sp, #16
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]

	// 7th bit: External Crystal=1; Internal Crystal=0
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, SYS_TRIGGER_ADDR, 1, &source, sizeof(source), 100);
 800177e:	2364      	movs	r3, #100	; 0x64
 8001780:	9302      	str	r3, [sp, #8]
 8001782:	2301      	movs	r3, #1
 8001784:	9301      	str	r3, [sp, #4]
 8001786:	1dfb      	adds	r3, r7, #7
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	2301      	movs	r3, #1
 800178c:	223f      	movs	r2, #63	; 0x3f
 800178e:	2150      	movs	r1, #80	; 0x50
 8001790:	4803      	ldr	r0, [pc, #12]	; (80017a0 <Clock_Source+0x2c>)
 8001792:	f002 fc55 	bl	8004040 <HAL_I2C_Mem_Write>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000530 	.word	0x20000530

080017a4 <BNO055_Axis>:
 *         	Default Parameters:[DEFAULT_AXIS_REMAP(0x24), DEFAULT_AXIS_SIGN(0x00)]
 *
 *  @retval None
 */
void BNO055_Axis(uint8_t remap, uint8_t sign)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af04      	add	r7, sp, #16
 80017aa:	4603      	mov	r3, r0
 80017ac:	460a      	mov	r2, r1
 80017ae:	71fb      	strb	r3, [r7, #7]
 80017b0:	4613      	mov	r3, r2
 80017b2:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, AXIS_MAP_CONFIG_ADDR, 1, &remap, 1, 100);
 80017b4:	2364      	movs	r3, #100	; 0x64
 80017b6:	9302      	str	r3, [sp, #8]
 80017b8:	2301      	movs	r3, #1
 80017ba:	9301      	str	r3, [sp, #4]
 80017bc:	1dfb      	adds	r3, r7, #7
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2301      	movs	r3, #1
 80017c2:	2241      	movs	r2, #65	; 0x41
 80017c4:	2150      	movs	r1, #80	; 0x50
 80017c6:	480c      	ldr	r0, [pc, #48]	; (80017f8 <BNO055_Axis+0x54>)
 80017c8:	f002 fc3a 	bl	8004040 <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 80017cc:	2014      	movs	r0, #20
 80017ce:	f001 ff0f 	bl	80035f0 <HAL_Delay>
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, AXIS_MAP_SIGN_ADDR, 1, &sign, 1, 100);
 80017d2:	2364      	movs	r3, #100	; 0x64
 80017d4:	9302      	str	r3, [sp, #8]
 80017d6:	2301      	movs	r3, #1
 80017d8:	9301      	str	r3, [sp, #4]
 80017da:	1dbb      	adds	r3, r7, #6
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	2301      	movs	r3, #1
 80017e0:	2242      	movs	r2, #66	; 0x42
 80017e2:	2150      	movs	r1, #80	; 0x50
 80017e4:	4804      	ldr	r0, [pc, #16]	; (80017f8 <BNO055_Axis+0x54>)
 80017e6:	f002 fc2b 	bl	8004040 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80017ea:	2064      	movs	r0, #100	; 0x64
 80017ec:	f001 ff00 	bl	80035f0 <HAL_Delay>
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20000530 	.word	0x20000530

080017fc <SET_Accel_Range>:
 *            Range_16G]
 *
 *  @retval None
 */
void SET_Accel_Range(uint8_t range)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af04      	add	r7, sp, #16
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, ACC_CONFIG_ADDR, 1, &range, 1, 100);
 8001806:	2364      	movs	r3, #100	; 0x64
 8001808:	9302      	str	r3, [sp, #8]
 800180a:	2301      	movs	r3, #1
 800180c:	9301      	str	r3, [sp, #4]
 800180e:	1dfb      	adds	r3, r7, #7
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	2301      	movs	r3, #1
 8001814:	2208      	movs	r2, #8
 8001816:	2150      	movs	r1, #80	; 0x50
 8001818:	4804      	ldr	r0, [pc, #16]	; (800182c <SET_Accel_Range+0x30>)
 800181a:	f002 fc11 	bl	8004040 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800181e:	2064      	movs	r0, #100	; 0x64
 8001820:	f001 fee6 	bl	80035f0 <HAL_Delay>
}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000530 	.word	0x20000530

08001830 <BNO055_Init>:
 *         the configuration information for the BNO055 device.
 *
 * @retval None
 */
void BNO055_Init(BNO055_Init_t Init)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af04      	add	r7, sp, #16
 8001836:	463b      	mov	r3, r7
 8001838:	e883 0003 	stmia.w	r3, {r0, r1}

	// Set operation mode to config_mode for initialize all register
	Set_Operation_Mode(CONFIG_MODE);
 800183c:	2000      	movs	r0, #0
 800183e:	f7ff ff3f 	bl	80016c0 <Set_Operation_Mode>
	HAL_Delay(50);
 8001842:	2032      	movs	r0, #50	; 0x32
 8001844:	f001 fed4 	bl	80035f0 <HAL_Delay>
	/*
	 * Set register page number to 1
	 * Configure Accelerometer range
	 */
	SelectPage(PAGE_1);
 8001848:	2001      	movs	r0, #1
 800184a:	f7ff fc49 	bl	80010e0 <SelectPage>
	SET_Accel_Range(Init.ACC_Range);
 800184e:	79bb      	ldrb	r3, [r7, #6]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ffd3 	bl	80017fc <SET_Accel_Range>
	HAL_Delay(50);
 8001856:	2032      	movs	r0, #50	; 0x32
 8001858:	f001 feca 	bl	80035f0 <HAL_Delay>

	// Set register page number to 0
	SelectPage(PAGE_0);
 800185c:	2000      	movs	r0, #0
 800185e:	f7ff fc3f 	bl	80010e0 <SelectPage>
	HAL_Delay(50);
 8001862:	2032      	movs	r0, #50	; 0x32
 8001864:	f001 fec4 	bl	80035f0 <HAL_Delay>

	// Read clock status. If status=0 then it is free to configure the clock source
	uint8_t status;
	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, SYS_CLK_STATUS_ADDR, 1, &status, 1, 100);
 8001868:	2364      	movs	r3, #100	; 0x64
 800186a:	9302      	str	r3, [sp, #8]
 800186c:	2301      	movs	r3, #1
 800186e:	9301      	str	r3, [sp, #4]
 8001870:	f107 030f 	add.w	r3, r7, #15
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	2301      	movs	r3, #1
 8001878:	2238      	movs	r2, #56	; 0x38
 800187a:	2150      	movs	r1, #80	; 0x50
 800187c:	481e      	ldr	r0, [pc, #120]	; (80018f8 <BNO055_Init+0xc8>)
 800187e:	f002 fcd9 	bl	8004234 <HAL_I2C_Mem_Read>
	HAL_Delay(50);
 8001882:	2032      	movs	r0, #50	; 0x32
 8001884:	f001 feb4 	bl	80035f0 <HAL_Delay>
	// Checking if the status bit is 0
	if (status == 0)
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d106      	bne.n	800189c <BNO055_Init+0x6c>
	{
		// Changing clock source
		Clock_Source(Init.Clock_Source);
 800188e:	797b      	ldrb	r3, [r7, #5]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ff6f 	bl	8001774 <Clock_Source>
		HAL_Delay(100);
 8001896:	2064      	movs	r0, #100	; 0x64
 8001898:	f001 feaa 	bl	80035f0 <HAL_Delay>
	}

	// Configure axis remapping and signing
	BNO055_Axis(Init.Axis, Init.Axis_sign);
 800189c:	787b      	ldrb	r3, [r7, #1]
 800189e:	78ba      	ldrb	r2, [r7, #2]
 80018a0:	4611      	mov	r1, r2
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff ff7e 	bl	80017a4 <BNO055_Axis>
	HAL_Delay(100);
 80018a8:	2064      	movs	r0, #100	; 0x64
 80018aa:	f001 fea1 	bl	80035f0 <HAL_Delay>

	// Configure data output format and the measurement unit
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, UNIT_SEL_ADDR, 1, &Init.Unit_Sel, sizeof(Init.Unit_Sel), 100);
 80018ae:	2364      	movs	r3, #100	; 0x64
 80018b0:	9302      	str	r3, [sp, #8]
 80018b2:	2301      	movs	r3, #1
 80018b4:	9301      	str	r3, [sp, #4]
 80018b6:	463b      	mov	r3, r7
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	2301      	movs	r3, #1
 80018bc:	223b      	movs	r2, #59	; 0x3b
 80018be:	2150      	movs	r1, #80	; 0x50
 80018c0:	480d      	ldr	r0, [pc, #52]	; (80018f8 <BNO055_Init+0xc8>)
 80018c2:	f002 fbbd 	bl	8004040 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80018c6:	2064      	movs	r0, #100	; 0x64
 80018c8:	f001 fe92 	bl	80035f0 <HAL_Delay>

	// Set power mode
	SetPowerMODE(Init.Mode);
 80018cc:	78fb      	ldrb	r3, [r7, #3]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff ff28 	bl	8001724 <SetPowerMODE>
	HAL_Delay(100);
 80018d4:	2064      	movs	r0, #100	; 0x64
 80018d6:	f001 fe8b 	bl	80035f0 <HAL_Delay>

	// Set operation mode
	Set_Operation_Mode(Init.OP_Modes);
 80018da:	793b      	ldrb	r3, [r7, #4]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff feef 	bl	80016c0 <Set_Operation_Mode>
	HAL_Delay(100);
 80018e2:	2064      	movs	r0, #100	; 0x64
 80018e4:	f001 fe84 	bl	80035f0 <HAL_Delay>

	printf("BNO055 Initialization process is done!\n");
 80018e8:	4804      	ldr	r0, [pc, #16]	; (80018fc <BNO055_Init+0xcc>)
 80018ea:	f00a fd9b 	bl	800c424 <puts>
}
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000530 	.word	0x20000530
 80018fc:	0800d568 	.word	0x0800d568

08001900 <_ZN13BNOController4initEv>:
#include "BNOController.h"

void BNOController::init()
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af02      	add	r7, sp, #8
 8001906:	6078      	str	r0, [r7, #4]
    BNO055_Init_t config;
    config.Unit_Sel = UNIT_ORI_ANDROID | UNIT_EUL_DEG | UNIT_GYRO_DPS | UNIT_ACC_MS2 | UNIT_TEMP_CELCIUS;
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	723b      	strb	r3, [r7, #8]
    config.Axis = DEFAULT_AXIS_REMAP;
 800190c:	2324      	movs	r3, #36	; 0x24
 800190e:	727b      	strb	r3, [r7, #9]
    config.Axis_sign = DEFAULT_AXIS_SIGN;
 8001910:	2300      	movs	r3, #0
 8001912:	72bb      	strb	r3, [r7, #10]
    config.Clock_Source = CLOCK_EXTERNAL;
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	737b      	strb	r3, [r7, #13]
    config.Mode = BNO055_NORMAL_MODE;
 8001918:	2300      	movs	r3, #0
 800191a:	72fb      	strb	r3, [r7, #11]
    config.ACC_Range = Range_4G;
 800191c:	2301      	movs	r3, #1
 800191e:	73bb      	strb	r3, [r7, #14]
    config.OP_Modes = NDOF;
 8001920:	230c      	movs	r3, #12
 8001922:	733b      	strb	r3, [r7, #12]

    BNO055_Init(config);
 8001924:	f107 0308 	add.w	r3, r7, #8
 8001928:	e893 0003 	ldmia.w	r3, {r0, r1}
 800192c:	f7ff ff80 	bl	8001830 <BNO055_Init>

    yawPID.set(Constants::kBNOKP, Constants::kBNOKI, Constants::kBNOKD, Constants::kBNOMinAngular, Constants::KBNOMaxAngular);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8001936:	4b08      	ldr	r3, [pc, #32]	; (8001958 <_ZN13BNOController4initEv+0x58>)
 8001938:	9301      	str	r3, [sp, #4]
 800193a:	4b08      	ldr	r3, [pc, #32]	; (800195c <_ZN13BNOController4initEv+0x5c>)
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800194a:	f000 fd11 	bl	8002370 <_ZN3PID3setEfffff>
}
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	437a0000 	.word	0x437a0000
 800195c:	c37a0000 	.word	0xc37a0000

08001960 <_ZN13BNOController6getYawEv>:

float BNOController::getYaw()
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
    ReadData(&data, SENSOR_EULER);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2140      	movs	r1, #64	; 0x40
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fbd9 	bl	8001124 <ReadData>
    return data.Euler.X; // X es Heading (Yaw) según datasheet
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <_ZN13BNOController16updateYawControlEm>:

    return yawRate; // En grados por segundo
}

void BNOController::updateYawControl(uint32_t now)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
    float dt = (now - lastYaw) / 1000.0f;
 800198a:	6838      	ldr	r0, [r7, #0]
 800198c:	f7ff f944 	bl	8000c18 <__aeabi_ui2f>
 8001990:	4602      	mov	r2, r0
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001996:	4619      	mov	r1, r3
 8001998:	4610      	mov	r0, r2
 800199a:	f7ff f88b 	bl	8000ab4 <__aeabi_fsub>
 800199e:	4603      	mov	r3, r0
 80019a0:	4934      	ldr	r1, [pc, #208]	; (8001a74 <_ZN13BNOController16updateYawControlEm+0xf4>)
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fa44 	bl	8000e30 <__aeabi_fdiv>
 80019a8:	4603      	mov	r3, r0
 80019aa:	613b      	str	r3, [r7, #16]
    if (dt <= 0.0f)
 80019ac:	f04f 0100 	mov.w	r1, #0
 80019b0:	6938      	ldr	r0, [r7, #16]
 80019b2:	f7ff fb31 	bl	8001018 <__aeabi_fcmple>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d156      	bne.n	8001a6a <_ZN13BNOController16updateYawControlEm+0xea>
        return;

    float current_yaw = getYaw();
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ffcf 	bl	8001960 <_ZN13BNOController6getYawEv>
 80019c2:	60f8      	str	r0, [r7, #12]

    // Calculamos el error angular mínimo (con wrap-around)
    float error = targetYaw - current_yaw;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019c8:	68f9      	ldr	r1, [r7, #12]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff f872 	bl	8000ab4 <__aeabi_fsub>
 80019d0:	4603      	mov	r3, r0
 80019d2:	617b      	str	r3, [r7, #20]
    if (error > 180.0f)
 80019d4:	4928      	ldr	r1, [pc, #160]	; (8001a78 <_ZN13BNOController16updateYawControlEm+0xf8>)
 80019d6:	6978      	ldr	r0, [r7, #20]
 80019d8:	f7ff fb32 	bl	8001040 <__aeabi_fcmpgt>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d005      	beq.n	80019ee <_ZN13BNOController16updateYawControlEm+0x6e>
    {
        error -= 360.0f;
 80019e2:	4926      	ldr	r1, [pc, #152]	; (8001a7c <_ZN13BNOController16updateYawControlEm+0xfc>)
 80019e4:	6978      	ldr	r0, [r7, #20]
 80019e6:	f7ff f865 	bl	8000ab4 <__aeabi_fsub>
 80019ea:	4603      	mov	r3, r0
 80019ec:	617b      	str	r3, [r7, #20]
    }

    if (error < -180.0f)
 80019ee:	4924      	ldr	r1, [pc, #144]	; (8001a80 <_ZN13BNOController16updateYawControlEm+0x100>)
 80019f0:	6978      	ldr	r0, [r7, #20]
 80019f2:	f7ff fb07 	bl	8001004 <__aeabi_fcmplt>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d005      	beq.n	8001a08 <_ZN13BNOController16updateYawControlEm+0x88>
    {
        error += 360.0f;
 80019fc:	491f      	ldr	r1, [pc, #124]	; (8001a7c <_ZN13BNOController16updateYawControlEm+0xfc>)
 80019fe:	6978      	ldr	r0, [r7, #20]
 8001a00:	f7ff f85a 	bl	8000ab8 <__addsf3>
 8001a04:	4603      	mov	r3, r0
 8001a06:	617b      	str	r3, [r7, #20]
    }

    // PID devuelve velocidad angular en °/s
    float output_deg_per_sec = yawPID.calculate(0.0f, -error, dt); // Medimos cómo alejados estamos de 0
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	f04f 0100 	mov.w	r1, #0
 8001a1a:	f000 fcc4 	bl	80023a6 <_ZN3PID9calculateEfff>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	60bb      	str	r3, [r7, #8]

    // Limitamos el valor de salida
    output_deg_per_sec = std::min(std::max(output_deg_per_sec, Constants::kBNOMinAngular), Constants::KBNOMaxAngular);
 8001a22:	f107 0308 	add.w	r3, r7, #8
 8001a26:	4917      	ldr	r1, [pc, #92]	; (8001a84 <_ZN13BNOController16updateYawControlEm+0x104>)
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f000 f83a 	bl	8001aa2 <_ZSt3maxIfERKT_S2_S2_>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4915      	ldr	r1, [pc, #84]	; (8001a88 <_ZN13BNOController16updateYawControlEm+0x108>)
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 f84c 	bl	8001ad0 <_ZSt3minIfERKT_S2_S2_>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	60bb      	str	r3, [r7, #8]
    if (fabs(error) < Constants::kAngleTolerance)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a44:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fadb 	bl	8001004 <__aeabi_fcmplt>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d002      	beq.n	8001a5a <_ZN13BNOController16updateYawControlEm+0xda>
    {
        output_deg_per_sec = 0;
 8001a54:	f04f 0300 	mov.w	r3, #0
 8001a58:	60bb      	str	r3, [r7, #8]
    }
    lastTime = now;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    speed = output_deg_per_sec;
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	67da      	str	r2, [r3, #124]	; 0x7c
 8001a68:	e000      	b.n	8001a6c <_ZN13BNOController16updateYawControlEm+0xec>
        return;
 8001a6a:	bf00      	nop
}
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	447a0000 	.word	0x447a0000
 8001a78:	43340000 	.word	0x43340000
 8001a7c:	43b40000 	.word	0x43b40000
 8001a80:	c3340000 	.word	0xc3340000
 8001a84:	0800d8f4 	.word	0x0800d8f4
 8001a88:	0800d8f0 	.word	0x0800d8f0

08001a8c <_ZN13BNOController8getSpeedEv>:

float BNOController::getSpeed()
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
    return speed;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr

08001aa2 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4610      	mov	r0, r2
 8001ab8:	f7ff faa4 	bl	8001004 <__aeabi_fcmplt>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	e000      	b.n	8001ac8 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8001ac6:	687b      	ldr	r3, [r7, #4]
    }
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	f7ff fa8d 	bl	8001004 <__aeabi_fcmplt>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	e000      	b.n	8001af6 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8001af4:	687b      	ldr	r3, [r7, #4]
    }
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr
	...

08001b18 <_ZN3PIDC1Ev>:
    float integral = 0;
    float kP = 0, kI = 0, kD = 0;
    float out_min = 0, out_max = 100;

public:
    PID() = default;
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	60da      	str	r2, [r3, #12]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	611a      	str	r2, [r3, #16]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	615a      	str	r2, [r3, #20]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a04      	ldr	r2, [pc, #16]	; (8001b64 <_ZN3PIDC1Ev+0x4c>)
 8001b54:	619a      	str	r2, [r3, #24]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	42c80000 	.word	0x42c80000

08001b68 <_ZN5MotorC1Ev>:
 *      Author: Sanci
 */

#include "Motor.h"

Motor::Motor()
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af02      	add	r7, sp, #8
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	331c      	adds	r3, #28
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ffcf 	bl	8001b18 <_ZN3PIDC1Ev>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	641a      	str	r2, [r3, #64]	; 0x40
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	649a      	str	r2, [r3, #72]	; 0x48
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	651a      	str	r2, [r3, #80]	; 0x50
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	655a      	str	r2, [r3, #84]	; 0x54
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	659a      	str	r2, [r3, #88]	; 0x58
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	661a      	str	r2, [r3, #96]	; 0x60
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	665a      	str	r2, [r3, #100]	; 0x64
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	669a      	str	r2, [r3, #104]	; 0x68
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	66da      	str	r2, [r3, #108]	; 0x6c
{
    pidController.set(Constants::kMotorKP, Constants::kMotorKI, Constants::kMotorKD,
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f103 001c 	add.w	r0, r3, #28
 8001bd2:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <_ZN5MotorC1Ev+0x8c>)
 8001bd4:	9301      	str	r3, [sp, #4]
 8001bd6:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <_ZN5MotorC1Ev+0x90>)
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001be6:	f000 fbc3 	bl	8002370 <_ZN3PID3setEfffff>
                      Constants::kMinPWM, Constants::kMaxPWM);
}
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	437f0000 	.word	0x437f0000
 8001bf8:	43190000 	.word	0x43190000

08001bfc <_ZN5Motor4initE3PinS0_tmP17TIM_HandleTypeDef>:
void Motor::init(Pin _pinA, Pin _pinB, uint16_t _encoder, uint32_t _pwm_channel, TIM_HandleTypeDef *_htim)
{
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	b480      	push	{r7}
 8001c00:	b085      	sub	sp, #20
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	60f8      	str	r0, [r7, #12]
 8001c06:	1d38      	adds	r0, r7, #4
 8001c08:	e880 0006 	stmia.w	r0, {r1, r2}
 8001c0c:	61fb      	str	r3, [r7, #28]
    this->pinA = _pinA;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	3308      	adds	r3, #8
 8001c12:	1d3a      	adds	r2, r7, #4
 8001c14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c18:	e883 0003 	stmia.w	r3, {r0, r1}
    this->pinB = _pinB;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	3310      	adds	r3, #16
 8001c20:	f107 021c 	add.w	r2, r7, #28
 8001c24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c28:	e883 0003 	stmia.w	r3, {r0, r1}
    this->encoder = _encoder;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001c30:	831a      	strh	r2, [r3, #24]
    this->pwm_channel = _pwm_channel;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c36:	63da      	str	r2, [r3, #60]	; 0x3c
    this->htim = _htim;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c3c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001c3e:	bf00      	nop
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	b002      	add	sp, #8
 8001c48:	4770      	bx	lr
 8001c4a:	0000      	movs	r0, r0
 8001c4c:	0000      	movs	r0, r0
	...

08001c50 <_ZN5Motor12update_motorEm>:
    // Enviar PWM
    HAL_TIM_PWM_Start(htim, pwm_channel);
    __HAL_TIM_SET_COMPARE(htim, pwm_channel, duty);
}
void Motor::update_motor(uint32_t current_time)
{
 8001c50:	b590      	push	{r4, r7, lr}
 8001c52:	b087      	sub	sp, #28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
    float dt = (current_time - last_time_ms) / 1000.0f;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe ffd8 	bl	8000c18 <__aeabi_ui2f>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4991      	ldr	r1, [pc, #580]	; (8001eb0 <_ZN5Motor12update_motorEm+0x260>)
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff f8df 	bl	8000e30 <__aeabi_fdiv>
 8001c72:	4603      	mov	r3, r0
 8001c74:	617b      	str	r3, [r7, #20]
    if (dt <= 0.0f)
 8001c76:	f04f 0100 	mov.w	r1, #0
 8001c7a:	6978      	ldr	r0, [r7, #20]
 8001c7c:	f7ff f9cc 	bl	8001018 <__aeabi_fcmple>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f040 810b 	bne.w	8001e9e <_ZN5Motor12update_motorEm+0x24e>
        return;

    delta_ticks = ticks - last_ticks;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe ffc0 	bl	8000c18 <__aeabi_ui2f>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	651a      	str	r2, [r3, #80]	; 0x50
    distance_cm += delta_ticks * Constants::kCMPerTick;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ca6:	4983      	ldr	r1, [pc, #524]	; (8001eb4 <_ZN5Motor12update_motorEm+0x264>)
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff f80d 	bl	8000cc8 <__aeabi_fmul>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	f7fe ff00 	bl	8000ab8 <__addsf3>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	461a      	mov	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	655a      	str	r2, [r3, #84]	; 0x54
    actual_speed_cm_s = (delta_ticks * Constants::kCMPerTick) / dt;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cc4:	497b      	ldr	r1, [pc, #492]	; (8001eb4 <_ZN5Motor12update_motorEm+0x264>)
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fffe 	bl	8000cc8 <__aeabi_fmul>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	6979      	ldr	r1, [r7, #20]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff f8ad 	bl	8000e30 <__aeabi_fdiv>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	461a      	mov	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	65da      	str	r2, [r3, #92]	; 0x5c

    // Convert cm/s to PWM equivalent
    float max_cm_s = (Constants::kMotorsRPM * 3.14159f * Constants::kWheelDiameter) / 60.0f;
 8001cde:	4b76      	ldr	r3, [pc, #472]	; (8001eb8 <_ZN5Motor12update_motorEm+0x268>)
 8001ce0:	613b      	str	r3, [r7, #16]
    float scaled_target_pwm = (target_speed_cm_s / max_cm_s) * Constants::kMaxPWM;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce6:	6939      	ldr	r1, [r7, #16]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff f8a1 	bl	8000e30 <__aeabi_fdiv>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	4972      	ldr	r1, [pc, #456]	; (8001ebc <_ZN5Motor12update_motorEm+0x26c>)
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7fe ffe8 	bl	8000cc8 <__aeabi_fmul>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	60fb      	str	r3, [r7, #12]
    float scaled_actual_pwm = (actual_speed_cm_s / max_cm_s) * Constants::kMaxPWM;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d00:	6939      	ldr	r1, [r7, #16]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff f894 	bl	8000e30 <__aeabi_fdiv>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	496c      	ldr	r1, [pc, #432]	; (8001ebc <_ZN5Motor12update_motorEm+0x26c>)
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe ffdb 	bl	8000cc8 <__aeabi_fmul>
 8001d12:	4603      	mov	r3, r0
 8001d14:	60bb      	str	r3, [r7, #8]

    output = pidController.calculate(scaled_target_pwm, scaled_actual_pwm, dt);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f103 001c 	add.w	r0, r3, #28
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	68f9      	ldr	r1, [r7, #12]
 8001d22:	f000 fb40 	bl	80023a6 <_ZN3PID9calculateEfff>
 8001d26:	4602      	mov	r2, r0
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (std::abs(target_speed_cm_s - actual_speed_cm_s) > 0.3)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d34:	4619      	mov	r1, r3
 8001d36:	4610      	mov	r0, r2
 8001d38:	f7fe febc 	bl	8000ab4 <__aeabi_fsub>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fedd 	bl	8001afe <_ZSt3absf>
 8001d44:	4603      	mov	r3, r0
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fb6e 	bl	8000428 <__aeabi_f2d>
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	461c      	mov	r4, r3
 8001d50:	a355      	add	r3, pc, #340	; (adr r3, 8001ea8 <_ZN5Motor12update_motorEm+0x258>)
 8001d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d56:	f7fe fe4f 	bl	80009f8 <__aeabi_dcmpgt>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <_ZN5Motor12update_motorEm+0x114>
 8001d60:	2300      	movs	r3, #0
 8001d62:	461c      	mov	r4, r3
 8001d64:	b2e3      	uxtb	r3, r4
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00e      	beq.n	8001d88 <_ZN5Motor12update_motorEm+0x138>
    {
        pwm_out = std::min(std::max(output, Constants::kMinPWM), Constants::kMaxPWM);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	336c      	adds	r3, #108	; 0x6c
 8001d6e:	4954      	ldr	r1, [pc, #336]	; (8001ec0 <_ZN5Motor12update_motorEm+0x270>)
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fe96 	bl	8001aa2 <_ZSt3maxIfERKT_S2_S2_>
 8001d76:	4603      	mov	r3, r0
 8001d78:	4952      	ldr	r1, [pc, #328]	; (8001ec4 <_ZN5Motor12update_motorEm+0x274>)
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fea8 	bl	8001ad0 <_ZSt3minIfERKT_S2_S2_>
 8001d80:	4603      	mov	r3, r0
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (target_speed_cm_s < 6 && target_speed_cm_s > -6)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8c:	494e      	ldr	r1, [pc, #312]	; (8001ec8 <_ZN5Motor12update_motorEm+0x278>)
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff f938 	bl	8001004 <__aeabi_fcmplt>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00c      	beq.n	8001db4 <_ZN5Motor12update_motorEm+0x164>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9e:	494b      	ldr	r1, [pc, #300]	; (8001ecc <_ZN5Motor12update_motorEm+0x27c>)
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff f94d 	bl	8001040 <__aeabi_fcmpgt>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <_ZN5Motor12update_motorEm+0x164>
    {
        pwm_out = 0;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	669a      	str	r2, [r3, #104]	; 0x68
    }

    if (target_speed_cm_s < -6)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db8:	4944      	ldr	r1, [pc, #272]	; (8001ecc <_ZN5Motor12update_motorEm+0x27c>)
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff f922 	bl	8001004 <__aeabi_fcmplt>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d010      	beq.n	8001de8 <_ZN5Motor12update_motorEm+0x198>
    {
        // Direccion hacia atras
        HAL_GPIO_WritePin(pinA.port, pinA.pin, GPIO_PIN_RESET);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6898      	ldr	r0, [r3, #8]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	899b      	ldrh	r3, [r3, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f001 fec3 	bl	8003b5c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(pinB.port, pinB.pin, GPIO_PIN_SET);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6918      	ldr	r0, [r3, #16]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	8a9b      	ldrh	r3, [r3, #20]
 8001dde:	2201      	movs	r2, #1
 8001de0:	4619      	mov	r1, r3
 8001de2:	f001 febb 	bl	8003b5c <HAL_GPIO_WritePin>
 8001de6:	e00f      	b.n	8001e08 <_ZN5Motor12update_motorEm+0x1b8>
    }
    else
    {
        // Dirección hacia adelante
        HAL_GPIO_WritePin(pinA.port, pinA.pin, GPIO_PIN_SET);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6898      	ldr	r0, [r3, #8]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	899b      	ldrh	r3, [r3, #12]
 8001df0:	2201      	movs	r2, #1
 8001df2:	4619      	mov	r1, r3
 8001df4:	f001 feb2 	bl	8003b5c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(pinB.port, pinB.pin, GPIO_PIN_RESET);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6918      	ldr	r0, [r3, #16]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	8a9b      	ldrh	r3, [r3, #20]
 8001e00:	2200      	movs	r2, #0
 8001e02:	4619      	mov	r1, r3
 8001e04:	f001 feaa 	bl	8003b5c <HAL_GPIO_WritePin>
    }
    __HAL_TIM_SET_COMPARE(htim, pwm_channel, (uint16_t)pwm_out);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10b      	bne.n	8001e28 <_ZN5Motor12update_motorEm+0x1d8>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff f943 	bl	80010a0 <__aeabi_f2uiz>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	635a      	str	r2, [r3, #52]	; 0x34
 8001e26:	e02a      	b.n	8001e7e <_ZN5Motor12update_motorEm+0x22e>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d10b      	bne.n	8001e48 <_ZN5Motor12update_motorEm+0x1f8>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff f933 	bl	80010a0 <__aeabi_f2uiz>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	639a      	str	r2, [r3, #56]	; 0x38
 8001e46:	e01a      	b.n	8001e7e <_ZN5Motor12update_motorEm+0x22e>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d10b      	bne.n	8001e68 <_ZN5Motor12update_motorEm+0x218>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff f923 	bl	80010a0 <__aeabi_f2uiz>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e66:	e00a      	b.n	8001e7e <_ZN5Motor12update_motorEm+0x22e>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff f917 	bl	80010a0 <__aeabi_f2uiz>
 8001e72:	4603      	mov	r3, r0
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_TIM_PWM_Start(htim, pwm_channel);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e86:	4619      	mov	r1, r3
 8001e88:	4610      	mov	r0, r2
 8001e8a:	f005 faf3 	bl	8007474 <HAL_TIM_PWM_Start>
    last_ticks = ticks;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	64da      	str	r2, [r3, #76]	; 0x4c
    last_time_ms = current_time;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	641a      	str	r2, [r3, #64]	; 0x40
 8001e9c:	e000      	b.n	8001ea0 <_ZN5Motor12update_motorEm+0x250>
        return;
 8001e9e:	bf00      	nop
}
 8001ea0:	371c      	adds	r7, #28
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd90      	pop	{r4, r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	33333333 	.word	0x33333333
 8001eac:	3fd33333 	.word	0x3fd33333
 8001eb0:	447a0000 	.word	0x447a0000
 8001eb4:	3d14a20d 	.word	0x3d14a20d
 8001eb8:	4218e406 	.word	0x4218e406
 8001ebc:	437f0000 	.word	0x437f0000
 8001ec0:	0800d8fc 	.word	0x0800d8fc
 8001ec4:	0800d8f8 	.word	0x0800d8f8
 8001ec8:	40c00000 	.word	0x40c00000
 8001ecc:	c0c00000 	.word	0xc0c00000

08001ed0 <_ZN5Motor10stop_motorEv>:
void Motor::stop_motor()
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
    // Active brake: both inputs HIGH
    HAL_GPIO_WritePin(pinA.port, pinA.pin, GPIO_PIN_SET);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6898      	ldr	r0, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	899b      	ldrh	r3, [r3, #12]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	f001 fe3a 	bl	8003b5c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pinB.port, pinB.pin, GPIO_PIN_SET);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6918      	ldr	r0, [r3, #16]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	8a9b      	ldrh	r3, [r3, #20]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f001 fe32 	bl	8003b5c <HAL_GPIO_WritePin>

    // Stop PWM signal
    __HAL_TIM_SET_COMPARE(htim, pwm_channel, 0);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d105      	bne.n	8001f0c <_ZN5Motor10stop_motorEv+0x3c>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2200      	movs	r2, #0
 8001f08:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001f0a:	e018      	b.n	8001f3e <_ZN5Motor10stop_motorEv+0x6e>
    __HAL_TIM_SET_COMPARE(htim, pwm_channel, 0);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f10:	2b04      	cmp	r3, #4
 8001f12:	d105      	bne.n	8001f20 <_ZN5Motor10stop_motorEv+0x50>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001f1e:	e00e      	b.n	8001f3e <_ZN5Motor10stop_motorEv+0x6e>
    __HAL_TIM_SET_COMPARE(htim, pwm_channel, 0);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f24:	2b08      	cmp	r3, #8
 8001f26:	d105      	bne.n	8001f34 <_ZN5Motor10stop_motorEv+0x64>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001f32:	e004      	b.n	8001f3e <_ZN5Motor10stop_motorEv+0x6e>
    __HAL_TIM_SET_COMPARE(htim, pwm_channel, 0);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <_ZN5Motor9setTargetEf>:

void Motor::setTarget(float _target_speed_cm_s)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	6039      	str	r1, [r7, #0]
    target_speed_cm_s = _target_speed_cm_s;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr

08001f60 <_ZN5Motor11getDistanceEv>:

float Motor::getDistance()
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
    return distance_cm;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr

08001f76 <_ZN5Motor8addTicksEv>:

void Motor::addTicks()
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
    ticks++;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f82:	1c5a      	adds	r2, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	649a      	str	r2, [r3, #72]	; 0x48
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr

08001f92 <_ZN5Motor8getSpeedEv>:
{
    return pwm_out;
}

float Motor::getSpeed()
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
    return actual_speed_cm_s;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr

08001fa8 <_ZN5Motor9getTargetEv>:
{
    return (int)output;
}

float Motor::getTarget()
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
    return target_speed_cm_s;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr

08001fbe <_ZN13BNOControllerC1Ev>:
#include "PID.h"
#include "Constants.h"

// #include "BNO055_STM32.h"

class BNOController
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3358      	adds	r3, #88	; 0x58
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff fda4 	bl	8001b18 <_ZN3PIDC1Ev>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	675a      	str	r2, [r3, #116]	; 0x74
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	679a      	str	r2, [r3, #120]	; 0x78
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	67da      	str	r2, [r3, #124]	; 0x7c
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <_Z12movementInitv>:

#include "Movement.h"
#include <cmath>

void movementInit()
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af04      	add	r7, sp, #16
    // Motores (Checar que los canales sean los correctos)
    frontLeftMotor.init(
 8002002:	4b1f      	ldr	r3, [pc, #124]	; (8002080 <_Z12movementInitv+0x84>)
 8002004:	491f      	ldr	r1, [pc, #124]	; (8002084 <_Z12movementInitv+0x88>)
 8002006:	4a20      	ldr	r2, [pc, #128]	; (8002088 <_Z12movementInitv+0x8c>)
 8002008:	9203      	str	r2, [sp, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	9202      	str	r2, [sp, #8]
 800200e:	2202      	movs	r2, #2
 8002010:	9201      	str	r2, [sp, #4]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	9200      	str	r2, [sp, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	c906      	ldmia	r1, {r1, r2}
 800201a:	481c      	ldr	r0, [pc, #112]	; (800208c <_Z12movementInitv+0x90>)
 800201c:	f7ff fdee 	bl	8001bfc <_ZN5Motor4initE3PinS0_tmP17TIM_HandleTypeDef>
        Constants::kFrontLeftA,
        Constants::kFrontLeftB,
        Constants::kFrontLeftEncoder,
        TIM_CHANNEL_1,
        &htim3);
    frontRightMotor.init(
 8002020:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <_Z12movementInitv+0x94>)
 8002022:	491c      	ldr	r1, [pc, #112]	; (8002094 <_Z12movementInitv+0x98>)
 8002024:	4a1c      	ldr	r2, [pc, #112]	; (8002098 <_Z12movementInitv+0x9c>)
 8002026:	9203      	str	r2, [sp, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	9202      	str	r2, [sp, #8]
 800202c:	2201      	movs	r2, #1
 800202e:	9201      	str	r2, [sp, #4]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	9200      	str	r2, [sp, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	c906      	ldmia	r1, {r1, r2}
 8002038:	4818      	ldr	r0, [pc, #96]	; (800209c <_Z12movementInitv+0xa0>)
 800203a:	f7ff fddf 	bl	8001bfc <_ZN5Motor4initE3PinS0_tmP17TIM_HandleTypeDef>
        Constants::kFrontRightB,
        Constants::kFrontRightEncoder,
        TIM_CHANNEL_1,
        &htim1);

    backRightMotor.init(
 800203e:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <_Z12movementInitv+0xa4>)
 8002040:	4918      	ldr	r1, [pc, #96]	; (80020a4 <_Z12movementInitv+0xa8>)
 8002042:	4a11      	ldr	r2, [pc, #68]	; (8002088 <_Z12movementInitv+0x8c>)
 8002044:	9203      	str	r2, [sp, #12]
 8002046:	220c      	movs	r2, #12
 8002048:	9202      	str	r2, [sp, #8]
 800204a:	2208      	movs	r2, #8
 800204c:	9201      	str	r2, [sp, #4]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	9200      	str	r2, [sp, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	c906      	ldmia	r1, {r1, r2}
 8002056:	4814      	ldr	r0, [pc, #80]	; (80020a8 <_Z12movementInitv+0xac>)
 8002058:	f7ff fdd0 	bl	8001bfc <_ZN5Motor4initE3PinS0_tmP17TIM_HandleTypeDef>
        Constants::kBackRightB,
        Constants::kBackRightEncoder,
        TIM_CHANNEL_4,
        &htim3);

    backLeftMotor.init(
 800205c:	4b13      	ldr	r3, [pc, #76]	; (80020ac <_Z12movementInitv+0xb0>)
 800205e:	4914      	ldr	r1, [pc, #80]	; (80020b0 <_Z12movementInitv+0xb4>)
 8002060:	4a09      	ldr	r2, [pc, #36]	; (8002088 <_Z12movementInitv+0x8c>)
 8002062:	9203      	str	r2, [sp, #12]
 8002064:	2204      	movs	r2, #4
 8002066:	9202      	str	r2, [sp, #8]
 8002068:	2204      	movs	r2, #4
 800206a:	9201      	str	r2, [sp, #4]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	9200      	str	r2, [sp, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	c906      	ldmia	r1, {r1, r2}
 8002074:	480f      	ldr	r0, [pc, #60]	; (80020b4 <_Z12movementInitv+0xb8>)
 8002076:	f7ff fdc1 	bl	8001bfc <_ZN5Motor4initE3PinS0_tmP17TIM_HandleTypeDef>
        Constants::kBackLeftA,
        Constants::kBackLeftB,
        Constants::kBackLeftEncoder,
        TIM_CHANNEL_2,
        &htim3);
}
 800207a:	bf00      	nop
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	0800d908 	.word	0x0800d908
 8002084:	0800d900 	.word	0x0800d900
 8002088:	20000248 	.word	0x20000248
 800208c:	20000290 	.word	0x20000290
 8002090:	0800d918 	.word	0x0800d918
 8002094:	0800d910 	.word	0x0800d910
 8002098:	20000200 	.word	0x20000200
 800209c:	20000300 	.word	0x20000300
 80020a0:	0800d938 	.word	0x0800d938
 80020a4:	0800d930 	.word	0x0800d930
 80020a8:	200003e0 	.word	0x200003e0
 80020ac:	0800d928 	.word	0x0800d928
 80020b0:	0800d920 	.word	0x0800d920
 80020b4:	20000370 	.word	0x20000370

080020b8 <_Z8setSpeedi>:
void distance() {}
void setSpeed(int speed)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
    frontLeftMotor.setTarget(speed);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7fe fdad 	bl	8000c20 <__aeabi_i2f>
 80020c6:	4603      	mov	r3, r0
 80020c8:	4619      	mov	r1, r3
 80020ca:	480f      	ldr	r0, [pc, #60]	; (8002108 <_Z8setSpeedi+0x50>)
 80020cc:	f7ff ff3b 	bl	8001f46 <_ZN5Motor9setTargetEf>
    frontRightMotor.setTarget(speed);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7fe fda5 	bl	8000c20 <__aeabi_i2f>
 80020d6:	4603      	mov	r3, r0
 80020d8:	4619      	mov	r1, r3
 80020da:	480c      	ldr	r0, [pc, #48]	; (800210c <_Z8setSpeedi+0x54>)
 80020dc:	f7ff ff33 	bl	8001f46 <_ZN5Motor9setTargetEf>
    backLeftMotor.setTarget(speed);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7fe fd9d 	bl	8000c20 <__aeabi_i2f>
 80020e6:	4603      	mov	r3, r0
 80020e8:	4619      	mov	r1, r3
 80020ea:	4809      	ldr	r0, [pc, #36]	; (8002110 <_Z8setSpeedi+0x58>)
 80020ec:	f7ff ff2b 	bl	8001f46 <_ZN5Motor9setTargetEf>
    backRightMotor.setTarget(speed);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7fe fd95 	bl	8000c20 <__aeabi_i2f>
 80020f6:	4603      	mov	r3, r0
 80020f8:	4619      	mov	r1, r3
 80020fa:	4806      	ldr	r0, [pc, #24]	; (8002114 <_Z8setSpeedi+0x5c>)
 80020fc:	f7ff ff23 	bl	8001f46 <_ZN5Motor9setTargetEf>
}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000290 	.word	0x20000290
 800210c:	20000300 	.word	0x20000300
 8002110:	20000370 	.word	0x20000370
 8002114:	200003e0 	.word	0x200003e0

08002118 <_Z4stopv>:
void stop()
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
    frontLeftMotor.stop_motor();
 800211c:	4806      	ldr	r0, [pc, #24]	; (8002138 <_Z4stopv+0x20>)
 800211e:	f7ff fed7 	bl	8001ed0 <_ZN5Motor10stop_motorEv>
    frontRightMotor.stop_motor();
 8002122:	4806      	ldr	r0, [pc, #24]	; (800213c <_Z4stopv+0x24>)
 8002124:	f7ff fed4 	bl	8001ed0 <_ZN5Motor10stop_motorEv>
    backLeftMotor.stop_motor();
 8002128:	4805      	ldr	r0, [pc, #20]	; (8002140 <_Z4stopv+0x28>)
 800212a:	f7ff fed1 	bl	8001ed0 <_ZN5Motor10stop_motorEv>
    backRightMotor.stop_motor();
 800212e:	4805      	ldr	r0, [pc, #20]	; (8002144 <_Z4stopv+0x2c>)
 8002130:	f7ff fece 	bl	8001ed0 <_ZN5Motor10stop_motorEv>
}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20000290 	.word	0x20000290
 800213c:	20000300 	.word	0x20000300
 8002140:	20000370 	.word	0x20000370
 8002144:	200003e0 	.word	0x200003e0

08002148 <_Z14updateMovementm>:
void updateMovement(uint32_t current_time)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]

    // Paso 3: Actualizar los motores físicamente
    frontLeftMotor.update_motor(current_time);
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	4809      	ldr	r0, [pc, #36]	; (8002178 <_Z14updateMovementm+0x30>)
 8002154:	f7ff fd7c 	bl	8001c50 <_ZN5Motor12update_motorEm>
    frontRightMotor.update_motor(current_time);
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	4808      	ldr	r0, [pc, #32]	; (800217c <_Z14updateMovementm+0x34>)
 800215c:	f7ff fd78 	bl	8001c50 <_ZN5Motor12update_motorEm>
    backLeftMotor.update_motor(current_time);
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	4807      	ldr	r0, [pc, #28]	; (8002180 <_Z14updateMovementm+0x38>)
 8002164:	f7ff fd74 	bl	8001c50 <_ZN5Motor12update_motorEm>
    backRightMotor.update_motor(current_time);
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	4806      	ldr	r0, [pc, #24]	; (8002184 <_Z14updateMovementm+0x3c>)
 800216c:	f7ff fd70 	bl	8001c50 <_ZN5Motor12update_motorEm>
}
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20000290 	.word	0x20000290
 800217c:	20000300 	.word	0x20000300
 8002180:	20000370 	.word	0x20000370
 8002184:	200003e0 	.word	0x200003e0

08002188 <_Z18setKinematicSpeedsfm>:

// Kinematics
void setKinematicSpeeds(float _linear_x_cm_s, uint32_t current_time)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
    // Paso 1: Calcular salida del PID del BNO como velocidad angular deseada
    bno.updateYawControl(current_time);
 8002192:	6839      	ldr	r1, [r7, #0]
 8002194:	482e      	ldr	r0, [pc, #184]	; (8002250 <_Z18setKinematicSpeedsfm+0xc8>)
 8002196:	f7ff fbf3 	bl	8001980 <_ZN13BNOController16updateYawControlEm>
    float angular_z_deg_s = bno.getSpeed(); // °/s
 800219a:	482d      	ldr	r0, [pc, #180]	; (8002250 <_Z18setKinematicSpeedsfm+0xc8>)
 800219c:	f7ff fc76 	bl	8001a8c <_ZN13BNOController8getSpeedEv>
 80021a0:	61f8      	str	r0, [r7, #28]
    float linear_x_cm_s = _linear_x_cm_s;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	61bb      	str	r3, [r7, #24]
    float omega_rad_s = angular_z_deg_s * M_PI / 180.0f;
 80021a6:	69f8      	ldr	r0, [r7, #28]
 80021a8:	f7fe f93e 	bl	8000428 <__aeabi_f2d>
 80021ac:	a326      	add	r3, pc, #152	; (adr r3, 8002248 <_Z18setKinematicSpeedsfm+0xc0>)
 80021ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b2:	f7fe f991 	bl	80004d8 <__aeabi_dmul>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	4610      	mov	r0, r2
 80021bc:	4619      	mov	r1, r3
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	4b24      	ldr	r3, [pc, #144]	; (8002254 <_Z18setKinematicSpeedsfm+0xcc>)
 80021c4:	f7fe fab2 	bl	800072c <__aeabi_ddiv>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4610      	mov	r0, r2
 80021ce:	4619      	mov	r1, r3
 80021d0:	f7fe fc1c 	bl	8000a0c <__aeabi_d2f>
 80021d4:	4603      	mov	r3, r0
 80021d6:	617b      	str	r3, [r7, #20]
    float L = Constants::kWheelTrack; // track width en cm
 80021d8:	4b1f      	ldr	r3, [pc, #124]	; (8002258 <_Z18setKinematicSpeedsfm+0xd0>)
 80021da:	613b      	str	r3, [r7, #16]

    float left_speed = linear_x_cm_s - (omega_rad_s * L / 2.0f);
 80021dc:	6939      	ldr	r1, [r7, #16]
 80021de:	6978      	ldr	r0, [r7, #20]
 80021e0:	f7fe fd72 	bl	8000cc8 <__aeabi_fmul>
 80021e4:	4603      	mov	r3, r0
 80021e6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe fe20 	bl	8000e30 <__aeabi_fdiv>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4619      	mov	r1, r3
 80021f4:	69b8      	ldr	r0, [r7, #24]
 80021f6:	f7fe fc5d 	bl	8000ab4 <__aeabi_fsub>
 80021fa:	4603      	mov	r3, r0
 80021fc:	60fb      	str	r3, [r7, #12]
    float right_speed = linear_x_cm_s + (omega_rad_s * L / 2.0f);
 80021fe:	6939      	ldr	r1, [r7, #16]
 8002200:	6978      	ldr	r0, [r7, #20]
 8002202:	f7fe fd61 	bl	8000cc8 <__aeabi_fmul>
 8002206:	4603      	mov	r3, r0
 8002208:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe fe0f 	bl	8000e30 <__aeabi_fdiv>
 8002212:	4603      	mov	r3, r0
 8002214:	4619      	mov	r1, r3
 8002216:	69b8      	ldr	r0, [r7, #24]
 8002218:	f7fe fc4e 	bl	8000ab8 <__addsf3>
 800221c:	4603      	mov	r3, r0
 800221e:	60bb      	str	r3, [r7, #8]

    frontLeftMotor.setTarget(left_speed);
 8002220:	68f9      	ldr	r1, [r7, #12]
 8002222:	480e      	ldr	r0, [pc, #56]	; (800225c <_Z18setKinematicSpeedsfm+0xd4>)
 8002224:	f7ff fe8f 	bl	8001f46 <_ZN5Motor9setTargetEf>
    backLeftMotor.setTarget(left_speed);
 8002228:	68f9      	ldr	r1, [r7, #12]
 800222a:	480d      	ldr	r0, [pc, #52]	; (8002260 <_Z18setKinematicSpeedsfm+0xd8>)
 800222c:	f7ff fe8b 	bl	8001f46 <_ZN5Motor9setTargetEf>
    frontRightMotor.setTarget(right_speed);
 8002230:	68b9      	ldr	r1, [r7, #8]
 8002232:	480c      	ldr	r0, [pc, #48]	; (8002264 <_Z18setKinematicSpeedsfm+0xdc>)
 8002234:	f7ff fe87 	bl	8001f46 <_ZN5Motor9setTargetEf>
    backRightMotor.setTarget(right_speed);
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	480b      	ldr	r0, [pc, #44]	; (8002268 <_Z18setKinematicSpeedsfm+0xe0>)
 800223c:	f7ff fe83 	bl	8001f46 <_ZN5Motor9setTargetEf>
 8002240:	bf00      	nop
 8002242:	3720      	adds	r7, #32
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	54442d18 	.word	0x54442d18
 800224c:	400921fb 	.word	0x400921fb
 8002250:	20000450 	.word	0x20000450
 8002254:	40668000 	.word	0x40668000
 8002258:	41500000 	.word	0x41500000
 800225c:	20000290 	.word	0x20000290
 8002260:	20000370 	.word	0x20000370
 8002264:	20000300 	.word	0x20000300
 8002268:	200003e0 	.word	0x200003e0

0800226c <_Z41__static_initialization_and_destruction_0ii>:
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d159      	bne.n	8002330 <_Z41__static_initialization_and_destruction_0ii+0xc4>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002282:	4293      	cmp	r3, r2
 8002284:	d154      	bne.n	8002330 <_Z41__static_initialization_and_destruction_0ii+0xc4>
void stop();
void updateMovement(uint32_t current_time);
void setKinematicSpeeds(float _linear_x_cm_s, uint32_t current_time);

// Motors
inline Motor frontLeftMotor;
 8002286:	4b2c      	ldr	r3, [pc, #176]	; (8002338 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	3301      	adds	r3, #1
 800228c:	4a2a      	ldr	r2, [pc, #168]	; (8002338 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800228e:	6013      	str	r3, [r2, #0]
 8002290:	4b29      	ldr	r3, [pc, #164]	; (8002338 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b01      	cmp	r3, #1
 8002296:	bf0c      	ite	eq
 8002298:	2301      	moveq	r3, #1
 800229a:	2300      	movne	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d002      	beq.n	80022a8 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80022a2:	4826      	ldr	r0, [pc, #152]	; (800233c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80022a4:	f7ff fc60 	bl	8001b68 <_ZN5MotorC1Ev>
inline Motor frontRightMotor;
 80022a8:	4b25      	ldr	r3, [pc, #148]	; (8002340 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	3301      	adds	r3, #1
 80022ae:	4a24      	ldr	r2, [pc, #144]	; (8002340 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	4b23      	ldr	r3, [pc, #140]	; (8002340 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	bf0c      	ite	eq
 80022ba:	2301      	moveq	r3, #1
 80022bc:	2300      	movne	r3, #0
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d002      	beq.n	80022ca <_Z41__static_initialization_and_destruction_0ii+0x5e>
 80022c4:	481f      	ldr	r0, [pc, #124]	; (8002344 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 80022c6:	f7ff fc4f 	bl	8001b68 <_ZN5MotorC1Ev>
inline Motor backLeftMotor;
 80022ca:	4b1f      	ldr	r3, [pc, #124]	; (8002348 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	3301      	adds	r3, #1
 80022d0:	4a1d      	ldr	r2, [pc, #116]	; (8002348 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	4b1c      	ldr	r3, [pc, #112]	; (8002348 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	bf0c      	ite	eq
 80022dc:	2301      	moveq	r3, #1
 80022de:	2300      	movne	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <_Z41__static_initialization_and_destruction_0ii+0x80>
 80022e6:	4819      	ldr	r0, [pc, #100]	; (800234c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 80022e8:	f7ff fc3e 	bl	8001b68 <_ZN5MotorC1Ev>
inline Motor backRightMotor;
 80022ec:	4b18      	ldr	r3, [pc, #96]	; (8002350 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	3301      	adds	r3, #1
 80022f2:	4a17      	ldr	r2, [pc, #92]	; (8002350 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	4b16      	ldr	r3, [pc, #88]	; (8002350 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	bf0c      	ite	eq
 80022fe:	2301      	moveq	r3, #1
 8002300:	2300      	movne	r3, #0
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	d002      	beq.n	800230e <_Z41__static_initialization_and_destruction_0ii+0xa2>
 8002308:	4812      	ldr	r0, [pc, #72]	; (8002354 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 800230a:	f7ff fc2d 	bl	8001b68 <_ZN5MotorC1Ev>
inline BNOController bno;
 800230e:	4b12      	ldr	r3, [pc, #72]	; (8002358 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	3301      	adds	r3, #1
 8002314:	4a10      	ldr	r2, [pc, #64]	; (8002358 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b01      	cmp	r3, #1
 800231e:	bf0c      	ite	eq
 8002320:	2301      	moveq	r3, #1
 8002322:	2300      	movne	r3, #0
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <_Z41__static_initialization_and_destruction_0ii+0xc4>
 800232a:	480c      	ldr	r0, [pc, #48]	; (800235c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 800232c:	f7ff fe47 	bl	8001fbe <_ZN13BNOControllerC1Ev>
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	200004d4 	.word	0x200004d4
 800233c:	20000290 	.word	0x20000290
 8002340:	200004d8 	.word	0x200004d8
 8002344:	20000300 	.word	0x20000300
 8002348:	200004dc 	.word	0x200004dc
 800234c:	20000370 	.word	0x20000370
 8002350:	200004e0 	.word	0x200004e0
 8002354:	200003e0 	.word	0x200003e0
 8002358:	200004e4 	.word	0x200004e4
 800235c:	20000450 	.word	0x20000450

08002360 <_GLOBAL__sub_I__Z12movementInitv>:
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
 8002364:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002368:	2001      	movs	r0, #1
 800236a:	f7ff ff7f 	bl	800226c <_Z41__static_initialization_and_destruction_0ii>
 800236e:	bd80      	pop	{r7, pc}

08002370 <_ZN3PID3setEfffff>:
#include "PID.h"

void PID::set(float kp, float ki, float kd, float outMin, float outMax)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
 800237c:	603b      	str	r3, [r7, #0]
    kP = kp;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	609a      	str	r2, [r3, #8]
    kI = ki;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	60da      	str	r2, [r3, #12]
    kD = kd;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	611a      	str	r2, [r3, #16]
    out_min = outMin;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	615a      	str	r2, [r3, #20]
    out_max = outMax;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	69fa      	ldr	r2, [r7, #28]
 800239a:	619a      	str	r2, [r3, #24]
}
 800239c:	bf00      	nop
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr

080023a6 <_ZN3PID9calculateEfff>:

float PID::calculate(float setpoint, float input, float dt)
{
 80023a6:	b590      	push	{r4, r7, lr}
 80023a8:	b089      	sub	sp, #36	; 0x24
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	60f8      	str	r0, [r7, #12]
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	607a      	str	r2, [r7, #4]
 80023b2:	603b      	str	r3, [r7, #0]
    float error = setpoint - input;
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	68b8      	ldr	r0, [r7, #8]
 80023b8:	f7fe fb7c 	bl	8000ab4 <__aeabi_fsub>
 80023bc:	4603      	mov	r3, r0
 80023be:	61bb      	str	r3, [r7, #24]
    integral += error * dt;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	685c      	ldr	r4, [r3, #4]
 80023c4:	6839      	ldr	r1, [r7, #0]
 80023c6:	69b8      	ldr	r0, [r7, #24]
 80023c8:	f7fe fc7e 	bl	8000cc8 <__aeabi_fmul>
 80023cc:	4603      	mov	r3, r0
 80023ce:	4619      	mov	r1, r3
 80023d0:	4620      	mov	r0, r4
 80023d2:	f7fe fb71 	bl	8000ab8 <__addsf3>
 80023d6:	4603      	mov	r3, r0
 80023d8:	461a      	mov	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	605a      	str	r2, [r3, #4]
    float derivative = (error - last_error) / dt;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4619      	mov	r1, r3
 80023e4:	69b8      	ldr	r0, [r7, #24]
 80023e6:	f7fe fb65 	bl	8000ab4 <__aeabi_fsub>
 80023ea:	4603      	mov	r3, r0
 80023ec:	6839      	ldr	r1, [r7, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe fd1e 	bl	8000e30 <__aeabi_fdiv>
 80023f4:	4603      	mov	r3, r0
 80023f6:	617b      	str	r3, [r7, #20]
    float output = kP * error + kI * integral + kD * derivative;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	69b9      	ldr	r1, [r7, #24]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe fc62 	bl	8000cc8 <__aeabi_fmul>
 8002404:	4603      	mov	r3, r0
 8002406:	461c      	mov	r4, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	4619      	mov	r1, r3
 8002412:	4610      	mov	r0, r2
 8002414:	f7fe fc58 	bl	8000cc8 <__aeabi_fmul>
 8002418:	4603      	mov	r3, r0
 800241a:	4619      	mov	r1, r3
 800241c:	4620      	mov	r0, r4
 800241e:	f7fe fb4b 	bl	8000ab8 <__addsf3>
 8002422:	4603      	mov	r3, r0
 8002424:	461c      	mov	r4, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	6979      	ldr	r1, [r7, #20]
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe fc4b 	bl	8000cc8 <__aeabi_fmul>
 8002432:	4603      	mov	r3, r0
 8002434:	4619      	mov	r1, r3
 8002436:	4620      	mov	r0, r4
 8002438:	f7fe fb3e 	bl	8000ab8 <__addsf3>
 800243c:	4603      	mov	r3, r0
 800243e:	61fb      	str	r3, [r7, #28]

    if (output > out_max)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	4619      	mov	r1, r3
 8002446:	69f8      	ldr	r0, [r7, #28]
 8002448:	f7fe fdfa 	bl	8001040 <__aeabi_fcmpgt>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d002      	beq.n	8002458 <_ZN3PID9calculateEfff+0xb2>
        output = out_max;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	61fb      	str	r3, [r7, #28]
    if (output < out_min)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	4619      	mov	r1, r3
 800245e:	69f8      	ldr	r0, [r7, #28]
 8002460:	f7fe fdd0 	bl	8001004 <__aeabi_fcmplt>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <_ZN3PID9calculateEfff+0xca>
        output = out_min;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	61fb      	str	r3, [r7, #28]

    last_error = error;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	601a      	str	r2, [r3, #0]
    return output;
 8002476:	69fb      	ldr	r3, [r7, #28]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3724      	adds	r7, #36	; 0x24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd90      	pop	{r4, r7, pc}

08002480 <_Z7BT_SendPKc>:
#include "bluetooth_uart.h"

void BT_Send(const char *msg)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7fd fe61 	bl	8000150 <strlen>
 800248e:	4603      	mov	r3, r0
 8002490:	b29a      	uxth	r2, r3
 8002492:	f04f 33ff 	mov.w	r3, #4294967295
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4803      	ldr	r0, [pc, #12]	; (80024a8 <_Z7BT_SendPKc+0x28>)
 800249a:	f005 fc68 	bl	8007d6e <HAL_UART_Transmit>
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	200004e8 	.word	0x200004e8

080024ac <_Z15sendMotorSpeedsv>:

void sendMotorSpeeds()
{
 80024ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ae:	b093      	sub	sp, #76	; 0x4c
 80024b0:	af02      	add	r7, sp, #8
    char buffer[64];
    sprintf(buffer,
            "FL:%d FR:%d BL:%d BR:%d\r\n",
            (int)frontLeftMotor.getTarget(),
 80024b2:	4818      	ldr	r0, [pc, #96]	; (8002514 <_Z15sendMotorSpeedsv+0x68>)
 80024b4:	f7ff fd78 	bl	8001fa8 <_ZN5Motor9getTargetEv>
 80024b8:	4603      	mov	r3, r0
    sprintf(buffer,
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fe fdca 	bl	8001054 <__aeabi_f2iz>
 80024c0:	4605      	mov	r5, r0
            (int)frontRightMotor.getTarget(),
 80024c2:	4815      	ldr	r0, [pc, #84]	; (8002518 <_Z15sendMotorSpeedsv+0x6c>)
 80024c4:	f7ff fd70 	bl	8001fa8 <_ZN5Motor9getTargetEv>
 80024c8:	4603      	mov	r3, r0
    sprintf(buffer,
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7fe fdc2 	bl	8001054 <__aeabi_f2iz>
 80024d0:	4606      	mov	r6, r0
            (int)backLeftMotor.getTarget(),
 80024d2:	4812      	ldr	r0, [pc, #72]	; (800251c <_Z15sendMotorSpeedsv+0x70>)
 80024d4:	f7ff fd68 	bl	8001fa8 <_ZN5Motor9getTargetEv>
 80024d8:	4603      	mov	r3, r0
    sprintf(buffer,
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe fdba 	bl	8001054 <__aeabi_f2iz>
 80024e0:	4604      	mov	r4, r0
            (int)backRightMotor.getTarget());
 80024e2:	480f      	ldr	r0, [pc, #60]	; (8002520 <_Z15sendMotorSpeedsv+0x74>)
 80024e4:	f7ff fd60 	bl	8001fa8 <_ZN5Motor9getTargetEv>
 80024e8:	4603      	mov	r3, r0
    sprintf(buffer,
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe fdb2 	bl	8001054 <__aeabi_f2iz>
 80024f0:	4603      	mov	r3, r0
 80024f2:	4638      	mov	r0, r7
 80024f4:	9301      	str	r3, [sp, #4]
 80024f6:	9400      	str	r4, [sp, #0]
 80024f8:	4633      	mov	r3, r6
 80024fa:	462a      	mov	r2, r5
 80024fc:	4909      	ldr	r1, [pc, #36]	; (8002524 <_Z15sendMotorSpeedsv+0x78>)
 80024fe:	f009 ffcd 	bl	800c49c <siprintf>

    BT_Send(buffer);
 8002502:	463b      	mov	r3, r7
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff ffbb 	bl	8002480 <_Z7BT_SendPKc>
}
 800250a:	bf00      	nop
 800250c:	3744      	adds	r7, #68	; 0x44
 800250e:	46bd      	mov	sp, r7
 8002510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002512:	bf00      	nop
 8002514:	20000290 	.word	0x20000290
 8002518:	20000300 	.word	0x20000300
 800251c:	20000370 	.word	0x20000370
 8002520:	200003e0 	.word	0x200003e0
 8002524:	0800d868 	.word	0x0800d868

08002528 <_Z7sendYawf>:

void sendYaw(float yaw)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08a      	sub	sp, #40	; 0x28
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
    char buffer[32];
    snprintf(buffer, sizeof(buffer), "Yaw: %d\r\n", (int)yaw);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7fe fd8f 	bl	8001054 <__aeabi_f2iz>
 8002536:	4603      	mov	r3, r0
 8002538:	f107 0008 	add.w	r0, r7, #8
 800253c:	4a06      	ldr	r2, [pc, #24]	; (8002558 <_Z7sendYawf+0x30>)
 800253e:	2120      	movs	r1, #32
 8002540:	f009 ff78 	bl	800c434 <sniprintf>
    BT_Send(buffer);
 8002544:	f107 0308 	add.w	r3, r7, #8
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff ff99 	bl	8002480 <_Z7BT_SendPKc>
 800254e:	bf00      	nop
 8002550:	3728      	adds	r7, #40	; 0x28
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	0800d884 	.word	0x0800d884

0800255c <_Z41__static_initialization_and_destruction_0ii>:
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d159      	bne.n	8002620 <_Z41__static_initialization_and_destruction_0ii+0xc4>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002572:	4293      	cmp	r3, r2
 8002574:	d154      	bne.n	8002620 <_Z41__static_initialization_and_destruction_0ii+0xc4>
inline Motor frontLeftMotor;
 8002576:	4b2c      	ldr	r3, [pc, #176]	; (8002628 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	3301      	adds	r3, #1
 800257c:	4a2a      	ldr	r2, [pc, #168]	; (8002628 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	4b29      	ldr	r3, [pc, #164]	; (8002628 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b01      	cmp	r3, #1
 8002586:	bf0c      	ite	eq
 8002588:	2301      	moveq	r3, #1
 800258a:	2300      	movne	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d002      	beq.n	8002598 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8002592:	4826      	ldr	r0, [pc, #152]	; (800262c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8002594:	f7ff fae8 	bl	8001b68 <_ZN5MotorC1Ev>
inline Motor frontRightMotor;
 8002598:	4b25      	ldr	r3, [pc, #148]	; (8002630 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	3301      	adds	r3, #1
 800259e:	4a24      	ldr	r2, [pc, #144]	; (8002630 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	4b23      	ldr	r3, [pc, #140]	; (8002630 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	bf0c      	ite	eq
 80025aa:	2301      	moveq	r3, #1
 80025ac:	2300      	movne	r3, #0
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d002      	beq.n	80025ba <_Z41__static_initialization_and_destruction_0ii+0x5e>
 80025b4:	481f      	ldr	r0, [pc, #124]	; (8002634 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 80025b6:	f7ff fad7 	bl	8001b68 <_ZN5MotorC1Ev>
inline Motor backLeftMotor;
 80025ba:	4b1f      	ldr	r3, [pc, #124]	; (8002638 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	3301      	adds	r3, #1
 80025c0:	4a1d      	ldr	r2, [pc, #116]	; (8002638 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	4b1c      	ldr	r3, [pc, #112]	; (8002638 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	bf0c      	ite	eq
 80025cc:	2301      	moveq	r3, #1
 80025ce:	2300      	movne	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <_Z41__static_initialization_and_destruction_0ii+0x80>
 80025d6:	4819      	ldr	r0, [pc, #100]	; (800263c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 80025d8:	f7ff fac6 	bl	8001b68 <_ZN5MotorC1Ev>
inline Motor backRightMotor;
 80025dc:	4b18      	ldr	r3, [pc, #96]	; (8002640 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	3301      	adds	r3, #1
 80025e2:	4a17      	ldr	r2, [pc, #92]	; (8002640 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	4b16      	ldr	r3, [pc, #88]	; (8002640 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	bf0c      	ite	eq
 80025ee:	2301      	moveq	r3, #1
 80025f0:	2300      	movne	r3, #0
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d002      	beq.n	80025fe <_Z41__static_initialization_and_destruction_0ii+0xa2>
 80025f8:	4812      	ldr	r0, [pc, #72]	; (8002644 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 80025fa:	f7ff fab5 	bl	8001b68 <_ZN5MotorC1Ev>
inline BNOController bno;
 80025fe:	4b12      	ldr	r3, [pc, #72]	; (8002648 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	3301      	adds	r3, #1
 8002604:	4a10      	ldr	r2, [pc, #64]	; (8002648 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8002606:	6013      	str	r3, [r2, #0]
 8002608:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b01      	cmp	r3, #1
 800260e:	bf0c      	ite	eq
 8002610:	2301      	moveq	r3, #1
 8002612:	2300      	movne	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d002      	beq.n	8002620 <_Z41__static_initialization_and_destruction_0ii+0xc4>
 800261a:	480c      	ldr	r0, [pc, #48]	; (800264c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 800261c:	f7ff fccf 	bl	8001fbe <_ZN13BNOControllerC1Ev>
 8002620:	bf00      	nop
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	200004d4 	.word	0x200004d4
 800262c:	20000290 	.word	0x20000290
 8002630:	200004d8 	.word	0x200004d8
 8002634:	20000300 	.word	0x20000300
 8002638:	200004dc 	.word	0x200004dc
 800263c:	20000370 	.word	0x20000370
 8002640:	200004e0 	.word	0x200004e0
 8002644:	200003e0 	.word	0x200003e0
 8002648:	200004e4 	.word	0x200004e4
 800264c:	20000450 	.word	0x20000450

08002650 <_GLOBAL__sub_I__Z7BT_SendPKc>:
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
 8002654:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002658:	2001      	movs	r0, #1
 800265a:	f7ff ff7f 	bl	800255c <_Z41__static_initialization_and_destruction_0ii>
 800265e:	bd80      	pop	{r7, pc}

08002660 <lcd_begin>:
#include "lcd.h"

void lcd_begin()
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
	uint8_t data;
	HAL_Delay(50);
 8002666:	2032      	movs	r0, #50	; 0x32
 8002668:	f000 ffc2 	bl	80035f0 <HAL_Delay>
	data = 0b00111100;
 800266c:	233c      	movs	r3, #60	; 0x3c
 800266e:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(5, data); // Wait 4ms
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	4619      	mov	r1, r3
 8002674:	2005      	movs	r0, #5
 8002676:	f000 f851 	bl	800271c <send_lcd_command>

	data = 0b00111100;
 800267a:	233c      	movs	r3, #60	; 0x3c
 800267c:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // Wait 100us
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	4619      	mov	r1, r3
 8002682:	2001      	movs	r0, #1
 8002684:	f000 f84a 	bl	800271c <send_lcd_command>

	data = 0b00111100;
 8002688:	233c      	movs	r3, #60	; 0x3c
 800268a:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // Wait 100us
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	4619      	mov	r1, r3
 8002690:	2001      	movs	r0, #1
 8002692:	f000 f843 	bl	800271c <send_lcd_command>

	data = 0b00101100;
 8002696:	232c      	movs	r3, #44	; 0x2c
 8002698:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // Wait 100us
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	4619      	mov	r1, r3
 800269e:	2001      	movs	r0, #1
 80026a0:	f000 f83c 	bl	800271c <send_lcd_command>

	data = 0b00101100;
 80026a4:	232c      	movs	r3, #44	; 0x2c
 80026a6:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // Wait 100us
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	4619      	mov	r1, r3
 80026ac:	2001      	movs	r0, #1
 80026ae:	f000 f835 	bl	800271c <send_lcd_command>

	data = 0b10001100;
 80026b2:	238c      	movs	r3, #140	; 0x8c
 80026b4:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // NF
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	4619      	mov	r1, r3
 80026ba:	2001      	movs	r0, #1
 80026bc:	f000 f82e 	bl	800271c <send_lcd_command>

	data = 0x0C;
 80026c0:	230c      	movs	r3, #12
 80026c2:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data);
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	4619      	mov	r1, r3
 80026c8:	2001      	movs	r0, #1
 80026ca:	f000 f827 	bl	800271c <send_lcd_command>
	//-----------------------------------------------------------
	data = (0xC0) | (1 << 2);
 80026ce:	23c4      	movs	r3, #196	; 0xc4
 80026d0:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(5, data); // 6b
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	4619      	mov	r1, r3
 80026d6:	2005      	movs	r0, #5
 80026d8:	f000 f820 	bl	800271c <send_lcd_command>

	data = (0x00) | (1 << 2);
 80026dc:	2304      	movs	r3, #4
 80026de:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // 7a
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	4619      	mov	r1, r3
 80026e4:	2001      	movs	r0, #1
 80026e6:	f000 f819 	bl	800271c <send_lcd_command>

	data = (0x10) | (1 << 2);
 80026ea:	2314      	movs	r3, #20
 80026ec:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // 7b
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	4619      	mov	r1, r3
 80026f2:	2001      	movs	r0, #1
 80026f4:	f000 f812 	bl	800271c <send_lcd_command>

	data = (0x00) | (1 << 2);
 80026f8:	2304      	movs	r3, #4
 80026fa:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // 8a
 80026fc:	79fb      	ldrb	r3, [r7, #7]
 80026fe:	4619      	mov	r1, r3
 8002700:	2001      	movs	r0, #1
 8002702:	f000 f80b 	bl	800271c <send_lcd_command>

	data = (0x60) | (1 << 2);
 8002706:	2364      	movs	r3, #100	; 0x64
 8002708:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(5, data); // 8b
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	4619      	mov	r1, r3
 800270e:	2005      	movs	r0, #5
 8002710:	f000 f804 	bl	800271c <send_lcd_command>
}
 8002714:	bf00      	nop
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <send_lcd_command>:

void send_lcd_command(uint8_t delay, uint8_t info)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af02      	add	r7, sp, #8
 8002722:	4603      	mov	r3, r0
 8002724:	460a      	mov	r2, r1
 8002726:	71fb      	strb	r3, [r7, #7]
 8002728:	4613      	mov	r3, r2
 800272a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, 0x27 << 1, &info, 1, 1000);
 800272c:	1dba      	adds	r2, r7, #6
 800272e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	2301      	movs	r3, #1
 8002736:	214e      	movs	r1, #78	; 0x4e
 8002738:	480d      	ldr	r0, [pc, #52]	; (8002770 <send_lcd_command+0x54>)
 800273a:	f001 fb83 	bl	8003e44 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800273e:	2001      	movs	r0, #1
 8002740:	f000 ff56 	bl	80035f0 <HAL_Delay>
	info = info & ~(1 << 2);
 8002744:	79bb      	ldrb	r3, [r7, #6]
 8002746:	f023 0304 	bic.w	r3, r3, #4
 800274a:	b2db      	uxtb	r3, r3
 800274c:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, 0x27 << 1, &info, 1, 1000);
 800274e:	1dba      	adds	r2, r7, #6
 8002750:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	2301      	movs	r3, #1
 8002758:	214e      	movs	r1, #78	; 0x4e
 800275a:	4805      	ldr	r0, [pc, #20]	; (8002770 <send_lcd_command+0x54>)
 800275c:	f001 fb72 	bl	8003e44 <HAL_I2C_Master_Transmit>
	HAL_Delay(delay); // Wait 100us
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	4618      	mov	r0, r3
 8002764:	f000 ff44 	bl	80035f0 <HAL_Delay>
}
 8002768:	bf00      	nop
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	20000530 	.word	0x20000530

08002774 <send_msg>:

void send_msg(char *text)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
	uint8_t data;

	while (*text)
 800277c:	e01e      	b.n	80027bc <send_msg+0x48>
	{
		data = (*text & 0xF0) | 0x0D | 0x08;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	b25b      	sxtb	r3, r3
 8002784:	f023 030f 	bic.w	r3, r3, #15
 8002788:	b25b      	sxtb	r3, r3
 800278a:	f043 030d 	orr.w	r3, r3, #13
 800278e:	b25b      	sxtb	r3, r3
 8002790:	73fb      	strb	r3, [r7, #15]
		send_lcd_command(1, data);
 8002792:	7bfb      	ldrb	r3, [r7, #15]
 8002794:	4619      	mov	r1, r3
 8002796:	2001      	movs	r0, #1
 8002798:	f7ff ffc0 	bl	800271c <send_lcd_command>
		data = ((*text << 4) & 0xF0) | 0x0D | 0x08;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	b25b      	sxtb	r3, r3
 80027a4:	f043 030d 	orr.w	r3, r3, #13
 80027a8:	b25b      	sxtb	r3, r3
 80027aa:	73fb      	strb	r3, [r7, #15]
		send_lcd_command(1, data);
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	4619      	mov	r1, r3
 80027b0:	2001      	movs	r0, #1
 80027b2:	f7ff ffb3 	bl	800271c <send_lcd_command>
		text++;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3301      	adds	r3, #1
 80027ba:	607b      	str	r3, [r7, #4]
	while (*text)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1dc      	bne.n	800277e <send_msg+0xa>
	}
}
 80027c4:	bf00      	nop
 80027c6:	bf00      	nop
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
	...

080027d0 <lcd_clean>:

void lcd_clean()
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af02      	add	r7, sp, #8
	uint8_t data = (0x08) | (1 << 2);
 80027d6:	230c      	movs	r3, #12
 80027d8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, 0x27 << 1, &data, 1, 1000);
 80027da:	1dfa      	adds	r2, r7, #7
 80027dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	2301      	movs	r3, #1
 80027e4:	214e      	movs	r1, #78	; 0x4e
 80027e6:	4809      	ldr	r0, [pc, #36]	; (800280c <lcd_clean+0x3c>)
 80027e8:	f001 fb2c 	bl	8003e44 <HAL_I2C_Master_Transmit>
	send_lcd_command(5, data);
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	4619      	mov	r1, r3
 80027f0:	2005      	movs	r0, #5
 80027f2:	f7ff ff93 	bl	800271c <send_lcd_command>
	data = (0x18) | (1 << 2) | 0x08;
 80027f6:	231c      	movs	r3, #28
 80027f8:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(5, data);
 80027fa:	79fb      	ldrb	r3, [r7, #7]
 80027fc:	4619      	mov	r1, r3
 80027fe:	2005      	movs	r0, #5
 8002800:	f7ff ff8c 	bl	800271c <send_lcd_command>
}
 8002804:	bf00      	nop
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	20000530 	.word	0x20000530

08002810 <HAL_GPIO_EXTI_Callback>:
static void MX_TIM3_Init(void);
static void MX_USART1_UART_Init(void);

/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800281a:	88fb      	ldrh	r3, [r7, #6]
 800281c:	3b01      	subs	r3, #1
 800281e:	2b07      	cmp	r3, #7
 8002820:	d822      	bhi.n	8002868 <HAL_GPIO_EXTI_Callback+0x58>
 8002822:	a201      	add	r2, pc, #4	; (adr r2, 8002828 <HAL_GPIO_EXTI_Callback+0x18>)
 8002824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002828:	08002851 	.word	0x08002851
 800282c:	08002849 	.word	0x08002849
 8002830:	08002869 	.word	0x08002869
 8002834:	08002859 	.word	0x08002859
 8002838:	08002869 	.word	0x08002869
 800283c:	08002869 	.word	0x08002869
 8002840:	08002869 	.word	0x08002869
 8002844:	08002861 	.word	0x08002861
  {
  case Constants::kFrontLeftEncoder:
    frontLeftMotor.addTicks();
 8002848:	4809      	ldr	r0, [pc, #36]	; (8002870 <HAL_GPIO_EXTI_Callback+0x60>)
 800284a:	f7ff fb94 	bl	8001f76 <_ZN5Motor8addTicksEv>
    break;
 800284e:	e00b      	b.n	8002868 <HAL_GPIO_EXTI_Callback+0x58>
  case Constants::kFrontRightEncoder:
    frontRightMotor.addTicks();
 8002850:	4808      	ldr	r0, [pc, #32]	; (8002874 <HAL_GPIO_EXTI_Callback+0x64>)
 8002852:	f7ff fb90 	bl	8001f76 <_ZN5Motor8addTicksEv>
    break;
 8002856:	e007      	b.n	8002868 <HAL_GPIO_EXTI_Callback+0x58>
  case Constants::kBackLeftEncoder:
    backLeftMotor.addTicks();
 8002858:	4807      	ldr	r0, [pc, #28]	; (8002878 <HAL_GPIO_EXTI_Callback+0x68>)
 800285a:	f7ff fb8c 	bl	8001f76 <_ZN5Motor8addTicksEv>
    break;
 800285e:	e003      	b.n	8002868 <HAL_GPIO_EXTI_Callback+0x58>
  case Constants::kBackRightEncoder:
    backRightMotor.addTicks();
 8002860:	4806      	ldr	r0, [pc, #24]	; (800287c <HAL_GPIO_EXTI_Callback+0x6c>)
 8002862:	f7ff fb88 	bl	8001f76 <_ZN5Motor8addTicksEv>
    break;
 8002866:	bf00      	nop
  }
}
 8002868:	bf00      	nop
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20000290 	.word	0x20000290
 8002874:	20000300 	.word	0x20000300
 8002878:	20000370 	.word	0x20000370
 800287c:	200003e0 	.word	0x200003e0

08002880 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002880:	b590      	push	{r4, r7, lr}
 8002882:	b091      	sub	sp, #68	; 0x44
 8002884:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002886:	f000 fe51 	bl	800352c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800288a:	f000 f8cd 	bl	8002a28 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800288e:	f000 fab5 	bl	8002dfc <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 8002892:	f000 f933 	bl	8002afc <_ZL12MX_I2C1_Initv>
  MX_USB_DEVICE_Init();
 8002896:	f009 f8af 	bl	800b9f8 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 800289a:	f000 f963 	bl	8002b64 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 800289e:	f000 f9f7 	bl	8002c90 <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 80028a2:	f000 fa7d 	bl	8002da0 <_ZL19MX_USART1_UART_Initv>

  /* USER CODE BEGIN 2 */
  MX_GPIO_Init();
 80028a6:	f000 faa9 	bl	8002dfc <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 80028aa:	f000 f927 	bl	8002afc <_ZL12MX_I2C1_Initv>
  MX_USB_DEVICE_Init();
 80028ae:	f009 f8a3 	bl	800b9f8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_Init();
 80028b2:	f000 fe3b 	bl	800352c <HAL_Init>
  SystemClock_Config();
 80028b6:	f000 f8b7 	bl	8002a28 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 80028ba:	f000 fa9f 	bl	8002dfc <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 80028be:	f000 f951 	bl	8002b64 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 80028c2:	f000 f9e5 	bl	8002c90 <_ZL12MX_TIM3_Initv>

  lcd_begin();
 80028c6:	f7ff fecb 	bl	8002660 <lcd_begin>
  bno.init();
 80028ca:	484e      	ldr	r0, [pc, #312]	; (8002a04 <main+0x184>)
 80028cc:	f7ff f818 	bl	8001900 <_ZN13BNOController4initEv>
  send_msg("Equipo4");
 80028d0:	484d      	ldr	r0, [pc, #308]	; (8002a08 <main+0x188>)
 80028d2:	f7ff ff4f 	bl	8002774 <send_msg>

  movementInit();
 80028d6:	f7ff fb91 	bl	8001ffc <_Z12movementInitv>

  /// SPEED
  setSpeed(speed);
 80028da:	4b4c      	ldr	r3, [pc, #304]	; (8002a0c <main+0x18c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff fbea 	bl	80020b8 <_Z8setSpeedi>
  uint32_t last_average_time = 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	63bb      	str	r3, [r7, #56]	; 0x38
  float total_distance = 0;
 80028e8:	f04f 0300 	mov.w	r3, #0
 80028ec:	637b      	str	r3, [r7, #52]	; 0x34
  float last_time_print = HAL_GetTick();
 80028ee:	f000 fe75 	bl	80035dc <HAL_GetTick>
 80028f2:	4603      	mov	r3, r0
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fe f98f 	bl	8000c18 <__aeabi_ui2f>
 80028fa:	4603      	mov	r3, r0
 80028fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    uint32_t now = HAL_GetTick();
 80028fe:	f000 fe6d 	bl	80035dc <HAL_GetTick>
 8002902:	6338      	str	r0, [r7, #48]	; 0x30
    updateMovement(now);
 8002904:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002906:	f7ff fc1f 	bl	8002148 <_Z14updateMovementm>

    int distancia_entera = (int)((backLeftMotor.getDistance() + backRightMotor.getDistance() + frontLeftMotor.getDistance() + frontRightMotor.getDistance()) / 4);
 800290a:	4841      	ldr	r0, [pc, #260]	; (8002a10 <main+0x190>)
 800290c:	f7ff fb28 	bl	8001f60 <_ZN5Motor11getDistanceEv>
 8002910:	4604      	mov	r4, r0
 8002912:	4840      	ldr	r0, [pc, #256]	; (8002a14 <main+0x194>)
 8002914:	f7ff fb24 	bl	8001f60 <_ZN5Motor11getDistanceEv>
 8002918:	4603      	mov	r3, r0
 800291a:	4619      	mov	r1, r3
 800291c:	4620      	mov	r0, r4
 800291e:	f7fe f8cb 	bl	8000ab8 <__addsf3>
 8002922:	4603      	mov	r3, r0
 8002924:	461c      	mov	r4, r3
 8002926:	483c      	ldr	r0, [pc, #240]	; (8002a18 <main+0x198>)
 8002928:	f7ff fb1a 	bl	8001f60 <_ZN5Motor11getDistanceEv>
 800292c:	4603      	mov	r3, r0
 800292e:	4619      	mov	r1, r3
 8002930:	4620      	mov	r0, r4
 8002932:	f7fe f8c1 	bl	8000ab8 <__addsf3>
 8002936:	4603      	mov	r3, r0
 8002938:	461c      	mov	r4, r3
 800293a:	4838      	ldr	r0, [pc, #224]	; (8002a1c <main+0x19c>)
 800293c:	f7ff fb10 	bl	8001f60 <_ZN5Motor11getDistanceEv>
 8002940:	4603      	mov	r3, r0
 8002942:	4619      	mov	r1, r3
 8002944:	4620      	mov	r0, r4
 8002946:	f7fe f8b7 	bl	8000ab8 <__addsf3>
 800294a:	4603      	mov	r3, r0
 800294c:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002950:	4618      	mov	r0, r3
 8002952:	f7fe fa6d 	bl	8000e30 <__aeabi_fdiv>
 8002956:	4603      	mov	r3, r0
 8002958:	4618      	mov	r0, r3
 800295a:	f7fe fb7b 	bl	8001054 <__aeabi_f2iz>
 800295e:	4603      	mov	r3, r0
 8002960:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (now - last_time_print > Constants::kTimeDelay * 10)
 8002962:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002964:	f7fe f958 	bl	8000c18 <__aeabi_ui2f>
 8002968:	4603      	mov	r3, r0
 800296a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800296c:	4618      	mov	r0, r3
 800296e:	f7fe f8a1 	bl	8000ab4 <__aeabi_fsub>
 8002972:	4603      	mov	r3, r0
 8002974:	492a      	ldr	r1, [pc, #168]	; (8002a20 <main+0x1a0>)
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe fb62 	bl	8001040 <__aeabi_fcmpgt>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d02a      	beq.n	80029d8 <main+0x158>
    {
      char buffer[32];
      sprintf(buffer, "Vel %d Dis  %d", (int)frontLeftMotor.getSpeed(), distancia_entera);
 8002982:	4825      	ldr	r0, [pc, #148]	; (8002a18 <main+0x198>)
 8002984:	f7ff fb05 	bl	8001f92 <_ZN5Motor8getSpeedEv>
 8002988:	4603      	mov	r3, r0
 800298a:	4618      	mov	r0, r3
 800298c:	f7fe fb62 	bl	8001054 <__aeabi_f2iz>
 8002990:	4602      	mov	r2, r0
 8002992:	1d38      	adds	r0, r7, #4
 8002994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002996:	4923      	ldr	r1, [pc, #140]	; (8002a24 <main+0x1a4>)
 8002998:	f009 fd80 	bl	800c49c <siprintf>
      lcd_clean();
 800299c:	f7ff ff18 	bl	80027d0 <lcd_clean>
      send_msg(buffer);
 80029a0:	1d3b      	adds	r3, r7, #4
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fee6 	bl	8002774 <send_msg>
      last_time_print = now;
 80029a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029aa:	f7fe f935 	bl	8000c18 <__aeabi_ui2f>
 80029ae:	4603      	mov	r3, r0
 80029b0:	63fb      	str	r3, [r7, #60]	; 0x3c
      sendMotorSpeeds();
 80029b2:	f7ff fd7b 	bl	80024ac <_Z15sendMotorSpeedsv>
      float yaw = bno.getSpeed();
 80029b6:	4813      	ldr	r0, [pc, #76]	; (8002a04 <main+0x184>)
 80029b8:	f7ff f868 	bl	8001a8c <_ZN13BNOController8getSpeedEv>
 80029bc:	62b8      	str	r0, [r7, #40]	; 0x28
      sendYaw(yaw);
 80029be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029c0:	f7ff fdb2 	bl	8002528 <_Z7sendYawf>
      setKinematicSpeeds(speed, now);
 80029c4:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <main+0x18c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fe f929 	bl	8000c20 <__aeabi_i2f>
 80029ce:	4603      	mov	r3, r0
 80029d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff fbd8 	bl	8002188 <_Z18setKinematicSpeedsfm>
    }
    HAL_Delay(Constants::kTimeDelay);
 80029d8:	200a      	movs	r0, #10
 80029da:	f000 fe09 	bl	80035f0 <HAL_Delay>
    while (distancia_entera > 1500)
 80029de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80029e4:	4293      	cmp	r3, r2
 80029e6:	dd8a      	ble.n	80028fe <main+0x7e>
    {
      float yaw = bno.getYaw();
 80029e8:	4806      	ldr	r0, [pc, #24]	; (8002a04 <main+0x184>)
 80029ea:	f7fe ffb9 	bl	8001960 <_ZN13BNOController6getYawEv>
 80029ee:	6278      	str	r0, [r7, #36]	; 0x24
      sendYaw(yaw);
 80029f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029f2:	f7ff fd99 	bl	8002528 <_Z7sendYawf>
      stop();
 80029f6:	f7ff fb8f 	bl	8002118 <_Z4stopv>
      HAL_Delay(Constants::kTimeDelay);
 80029fa:	200a      	movs	r0, #10
 80029fc:	f000 fdf8 	bl	80035f0 <HAL_Delay>
    while (distancia_entera > 1500)
 8002a00:	e7ed      	b.n	80029de <main+0x15e>
 8002a02:	bf00      	nop
 8002a04:	20000450 	.word	0x20000450
 8002a08:	0800d890 	.word	0x0800d890
 8002a0c:	20000000 	.word	0x20000000
 8002a10:	20000370 	.word	0x20000370
 8002a14:	200003e0 	.word	0x200003e0
 8002a18:	20000290 	.word	0x20000290
 8002a1c:	20000300 	.word	0x20000300
 8002a20:	42c80000 	.word	0x42c80000
 8002a24:	0800d898 	.word	0x0800d898

08002a28 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b094      	sub	sp, #80	; 0x50
 8002a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a32:	2228      	movs	r2, #40	; 0x28
 8002a34:	2100      	movs	r1, #0
 8002a36:	4618      	mov	r0, r3
 8002a38:	f009 fc7e 	bl	800c338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a3c:	f107 0314 	add.w	r3, r7, #20
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a4c:	1d3b      	adds	r3, r7, #4
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	605a      	str	r2, [r3, #4]
 8002a54:	609a      	str	r2, [r3, #8]
 8002a56:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002a62:	2300      	movs	r3, #0
 8002a64:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a66:	2301      	movs	r3, #1
 8002a68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002a74:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002a78:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f003 ffe4 	bl	8006a4c <HAL_RCC_OscConfig>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	bf14      	ite	ne
 8002a8a:	2301      	movne	r3, #1
 8002a8c:	2300      	moveq	r3, #0
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8002a94:	f000 fa4c 	bl	8002f30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a98:	230f      	movs	r3, #15
 8002a9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002aa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aa8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002aae:	f107 0314 	add.w	r3, r7, #20
 8002ab2:	2102      	movs	r1, #2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f004 fa49 	bl	8006f4c <HAL_RCC_ClockConfig>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	bf14      	ite	ne
 8002ac0:	2301      	movne	r3, #1
 8002ac2:	2300      	moveq	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8002aca:	f000 fa31 	bl	8002f30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002ace:	2310      	movs	r3, #16
 8002ad0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ad6:	1d3b      	adds	r3, r7, #4
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f004 fbc5 	bl	8007268 <HAL_RCCEx_PeriphCLKConfig>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	bf14      	ite	ne
 8002ae4:	2301      	movne	r3, #1
 8002ae6:	2300      	moveq	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 8002aee:	f000 fa1f 	bl	8002f30 <Error_Handler>
  }
}
 8002af2:	bf00      	nop
 8002af4:	3750      	adds	r7, #80	; 0x50
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <_ZL12MX_I2C1_Initv>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b00:	4b15      	ldr	r3, [pc, #84]	; (8002b58 <_ZL12MX_I2C1_Initv+0x5c>)
 8002b02:	4a16      	ldr	r2, [pc, #88]	; (8002b5c <_ZL12MX_I2C1_Initv+0x60>)
 8002b04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002b06:	4b14      	ldr	r3, [pc, #80]	; (8002b58 <_ZL12MX_I2C1_Initv+0x5c>)
 8002b08:	4a15      	ldr	r2, [pc, #84]	; (8002b60 <_ZL12MX_I2C1_Initv+0x64>)
 8002b0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b0c:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <_ZL12MX_I2C1_Initv+0x5c>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002b12:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <_ZL12MX_I2C1_Initv+0x5c>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b18:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <_ZL12MX_I2C1_Initv+0x5c>)
 8002b1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b20:	4b0d      	ldr	r3, [pc, #52]	; (8002b58 <_ZL12MX_I2C1_Initv+0x5c>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002b26:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <_ZL12MX_I2C1_Initv+0x5c>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b2c:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <_ZL12MX_I2C1_Initv+0x5c>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b32:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <_ZL12MX_I2C1_Initv+0x5c>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b38:	4807      	ldr	r0, [pc, #28]	; (8002b58 <_ZL12MX_I2C1_Initv+0x5c>)
 8002b3a:	f001 f83f 	bl	8003bbc <HAL_I2C_Init>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	bf14      	ite	ne
 8002b44:	2301      	movne	r3, #1
 8002b46:	2300      	moveq	r3, #0
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8002b4e:	f000 f9ef 	bl	8002f30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8002b52:	bf00      	nop
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	20000530 	.word	0x20000530
 8002b5c:	40005400 	.word	0x40005400
 8002b60:	000186a0 	.word	0x000186a0

08002b64 <_ZL12MX_TIM1_Initv>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b092      	sub	sp, #72	; 0x48
 8002b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	611a      	str	r2, [r3, #16]
 8002b84:	615a      	str	r2, [r3, #20]
 8002b86:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b88:	1d3b      	adds	r3, r7, #4
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f009 fbd2 	bl	800c338 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b94:	4b3c      	ldr	r3, [pc, #240]	; (8002c88 <_ZL12MX_TIM1_Initv+0x124>)
 8002b96:	4a3d      	ldr	r2, [pc, #244]	; (8002c8c <_ZL12MX_TIM1_Initv+0x128>)
 8002b98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 13;
 8002b9a:	4b3b      	ldr	r3, [pc, #236]	; (8002c88 <_ZL12MX_TIM1_Initv+0x124>)
 8002b9c:	220d      	movs	r2, #13
 8002b9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ba0:	4b39      	ldr	r3, [pc, #228]	; (8002c88 <_ZL12MX_TIM1_Initv+0x124>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8002ba6:	4b38      	ldr	r3, [pc, #224]	; (8002c88 <_ZL12MX_TIM1_Initv+0x124>)
 8002ba8:	22ff      	movs	r2, #255	; 0xff
 8002baa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bac:	4b36      	ldr	r3, [pc, #216]	; (8002c88 <_ZL12MX_TIM1_Initv+0x124>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002bb2:	4b35      	ldr	r3, [pc, #212]	; (8002c88 <_ZL12MX_TIM1_Initv+0x124>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bb8:	4b33      	ldr	r3, [pc, #204]	; (8002c88 <_ZL12MX_TIM1_Initv+0x124>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002bbe:	4832      	ldr	r0, [pc, #200]	; (8002c88 <_ZL12MX_TIM1_Initv+0x124>)
 8002bc0:	f004 fc08 	bl	80073d4 <HAL_TIM_PWM_Init>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	bf14      	ite	ne
 8002bca:	2301      	movne	r3, #1
 8002bcc:	2300      	moveq	r3, #0
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <_ZL12MX_TIM1_Initv+0x74>
  {
    Error_Handler();
 8002bd4:	f000 f9ac 	bl	8002f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002be0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002be4:	4619      	mov	r1, r3
 8002be6:	4828      	ldr	r0, [pc, #160]	; (8002c88 <_ZL12MX_TIM1_Initv+0x124>)
 8002be8:	f004 ffc2 	bl	8007b70 <HAL_TIMEx_MasterConfigSynchronization>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	bf14      	ite	ne
 8002bf2:	2301      	movne	r3, #1
 8002bf4:	2300      	moveq	r3, #0
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <_ZL12MX_TIM1_Initv+0x9c>
  {
    Error_Handler();
 8002bfc:	f000 f998 	bl	8002f30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c00:	2360      	movs	r3, #96	; 0x60
 8002c02:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c10:	2300      	movs	r3, #0
 8002c12:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c14:	2300      	movs	r3, #0
 8002c16:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c20:	2200      	movs	r2, #0
 8002c22:	4619      	mov	r1, r3
 8002c24:	4818      	ldr	r0, [pc, #96]	; (8002c88 <_ZL12MX_TIM1_Initv+0x124>)
 8002c26:	f004 fcc7 	bl	80075b8 <HAL_TIM_PWM_ConfigChannel>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	bf14      	ite	ne
 8002c30:	2301      	movne	r3, #1
 8002c32:	2300      	moveq	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <_ZL12MX_TIM1_Initv+0xda>
  {
    Error_Handler();
 8002c3a:	f000 f979 	bl	8002f30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c42:	2300      	movs	r3, #0
 8002c44:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c56:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c5c:	1d3b      	adds	r3, r7, #4
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4809      	ldr	r0, [pc, #36]	; (8002c88 <_ZL12MX_TIM1_Initv+0x124>)
 8002c62:	f004 ffe3 	bl	8007c2c <HAL_TIMEx_ConfigBreakDeadTime>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	bf14      	ite	ne
 8002c6c:	2301      	movne	r3, #1
 8002c6e:	2300      	moveq	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <_ZL12MX_TIM1_Initv+0x116>
  {
    Error_Handler();
 8002c76:	f000 f95b 	bl	8002f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002c7a:	4803      	ldr	r0, [pc, #12]	; (8002c88 <_ZL12MX_TIM1_Initv+0x124>)
 8002c7c:	f000 fa82 	bl	8003184 <HAL_TIM_MspPostInit>
}
 8002c80:	bf00      	nop
 8002c82:	3748      	adds	r7, #72	; 0x48
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	20000200 	.word	0x20000200
 8002c8c:	40012c00 	.word	0x40012c00

08002c90 <_ZL12MX_TIM3_Initv>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08a      	sub	sp, #40	; 0x28
 8002c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c96:	f107 0320 	add.w	r3, r7, #32
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ca0:	1d3b      	adds	r3, r7, #4
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	605a      	str	r2, [r3, #4]
 8002ca8:	609a      	str	r2, [r3, #8]
 8002caa:	60da      	str	r2, [r3, #12]
 8002cac:	611a      	str	r2, [r3, #16]
 8002cae:	615a      	str	r2, [r3, #20]
 8002cb0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002cb2:	4b39      	ldr	r3, [pc, #228]	; (8002d98 <_ZL12MX_TIM3_Initv+0x108>)
 8002cb4:	4a39      	ldr	r2, [pc, #228]	; (8002d9c <_ZL12MX_TIM3_Initv+0x10c>)
 8002cb6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 13;
 8002cb8:	4b37      	ldr	r3, [pc, #220]	; (8002d98 <_ZL12MX_TIM3_Initv+0x108>)
 8002cba:	220d      	movs	r2, #13
 8002cbc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cbe:	4b36      	ldr	r3, [pc, #216]	; (8002d98 <_ZL12MX_TIM3_Initv+0x108>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8002cc4:	4b34      	ldr	r3, [pc, #208]	; (8002d98 <_ZL12MX_TIM3_Initv+0x108>)
 8002cc6:	22ff      	movs	r2, #255	; 0xff
 8002cc8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cca:	4b33      	ldr	r3, [pc, #204]	; (8002d98 <_ZL12MX_TIM3_Initv+0x108>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cd0:	4b31      	ldr	r3, [pc, #196]	; (8002d98 <_ZL12MX_TIM3_Initv+0x108>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002cd6:	4830      	ldr	r0, [pc, #192]	; (8002d98 <_ZL12MX_TIM3_Initv+0x108>)
 8002cd8:	f004 fb7c 	bl	80073d4 <HAL_TIM_PWM_Init>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	bf14      	ite	ne
 8002ce2:	2301      	movne	r3, #1
 8002ce4:	2300      	moveq	r3, #0
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <_ZL12MX_TIM3_Initv+0x60>
  {
    Error_Handler();
 8002cec:	f000 f920 	bl	8002f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002cf8:	f107 0320 	add.w	r3, r7, #32
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4826      	ldr	r0, [pc, #152]	; (8002d98 <_ZL12MX_TIM3_Initv+0x108>)
 8002d00:	f004 ff36 	bl	8007b70 <HAL_TIMEx_MasterConfigSynchronization>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	bf14      	ite	ne
 8002d0a:	2301      	movne	r3, #1
 8002d0c:	2300      	moveq	r3, #0
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <_ZL12MX_TIM3_Initv+0x88>
  {
    Error_Handler();
 8002d14:	f000 f90c 	bl	8002f30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d18:	2360      	movs	r3, #96	; 0x60
 8002d1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d20:	2300      	movs	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d28:	1d3b      	adds	r3, r7, #4
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	481a      	ldr	r0, [pc, #104]	; (8002d98 <_ZL12MX_TIM3_Initv+0x108>)
 8002d30:	f004 fc42 	bl	80075b8 <HAL_TIM_PWM_ConfigChannel>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	bf14      	ite	ne
 8002d3a:	2301      	movne	r3, #1
 8002d3c:	2300      	moveq	r3, #0
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <_ZL12MX_TIM3_Initv+0xb8>
  {
    Error_Handler();
 8002d44:	f000 f8f4 	bl	8002f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d48:	1d3b      	adds	r3, r7, #4
 8002d4a:	2204      	movs	r2, #4
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4812      	ldr	r0, [pc, #72]	; (8002d98 <_ZL12MX_TIM3_Initv+0x108>)
 8002d50:	f004 fc32 	bl	80075b8 <HAL_TIM_PWM_ConfigChannel>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	bf14      	ite	ne
 8002d5a:	2301      	movne	r3, #1
 8002d5c:	2300      	moveq	r3, #0
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8002d64:	f000 f8e4 	bl	8002f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d68:	1d3b      	adds	r3, r7, #4
 8002d6a:	220c      	movs	r2, #12
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	480a      	ldr	r0, [pc, #40]	; (8002d98 <_ZL12MX_TIM3_Initv+0x108>)
 8002d70:	f004 fc22 	bl	80075b8 <HAL_TIM_PWM_ConfigChannel>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	bf14      	ite	ne
 8002d7a:	2301      	movne	r3, #1
 8002d7c:	2300      	moveq	r3, #0
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <_ZL12MX_TIM3_Initv+0xf8>
  {
    Error_Handler();
 8002d84:	f000 f8d4 	bl	8002f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002d88:	4803      	ldr	r0, [pc, #12]	; (8002d98 <_ZL12MX_TIM3_Initv+0x108>)
 8002d8a:	f000 f9fb 	bl	8003184 <HAL_TIM_MspPostInit>
}
 8002d8e:	bf00      	nop
 8002d90:	3728      	adds	r7, #40	; 0x28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20000248 	.word	0x20000248
 8002d9c:	40000400 	.word	0x40000400

08002da0 <_ZL19MX_USART1_UART_Initv>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002da4:	4b13      	ldr	r3, [pc, #76]	; (8002df4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002da6:	4a14      	ldr	r2, [pc, #80]	; (8002df8 <_ZL19MX_USART1_UART_Initv+0x58>)
 8002da8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002daa:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002dac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002db0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002db2:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002db8:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002dbe:	4b0d      	ldr	r3, [pc, #52]	; (8002df4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002dc6:	220c      	movs	r2, #12
 8002dc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dca:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dd0:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002dd6:	4807      	ldr	r0, [pc, #28]	; (8002df4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002dd8:	f004 ff79 	bl	8007cce <HAL_UART_Init>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	bf14      	ite	ne
 8002de2:	2301      	movne	r3, #1
 8002de4:	2300      	moveq	r3, #0
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8002dec:	f000 f8a0 	bl	8002f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8002df0:	bf00      	nop
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	200004e8 	.word	0x200004e8
 8002df8:	40013800 	.word	0x40013800

08002dfc <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b088      	sub	sp, #32
 8002e00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e02:	f107 0310 	add.w	r3, r7, #16
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	605a      	str	r2, [r3, #4]
 8002e0c:	609a      	str	r2, [r3, #8]
 8002e0e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e10:	4b43      	ldr	r3, [pc, #268]	; (8002f20 <_ZL12MX_GPIO_Initv+0x124>)
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	4a42      	ldr	r2, [pc, #264]	; (8002f20 <_ZL12MX_GPIO_Initv+0x124>)
 8002e16:	f043 0310 	orr.w	r3, r3, #16
 8002e1a:	6193      	str	r3, [r2, #24]
 8002e1c:	4b40      	ldr	r3, [pc, #256]	; (8002f20 <_ZL12MX_GPIO_Initv+0x124>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f003 0310 	and.w	r3, r3, #16
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e28:	4b3d      	ldr	r3, [pc, #244]	; (8002f20 <_ZL12MX_GPIO_Initv+0x124>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	4a3c      	ldr	r2, [pc, #240]	; (8002f20 <_ZL12MX_GPIO_Initv+0x124>)
 8002e2e:	f043 0320 	orr.w	r3, r3, #32
 8002e32:	6193      	str	r3, [r2, #24]
 8002e34:	4b3a      	ldr	r3, [pc, #232]	; (8002f20 <_ZL12MX_GPIO_Initv+0x124>)
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	f003 0320 	and.w	r3, r3, #32
 8002e3c:	60bb      	str	r3, [r7, #8]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e40:	4b37      	ldr	r3, [pc, #220]	; (8002f20 <_ZL12MX_GPIO_Initv+0x124>)
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	4a36      	ldr	r2, [pc, #216]	; (8002f20 <_ZL12MX_GPIO_Initv+0x124>)
 8002e46:	f043 0304 	orr.w	r3, r3, #4
 8002e4a:	6193      	str	r3, [r2, #24]
 8002e4c:	4b34      	ldr	r3, [pc, #208]	; (8002f20 <_ZL12MX_GPIO_Initv+0x124>)
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	607b      	str	r3, [r7, #4]
 8002e56:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e58:	4b31      	ldr	r3, [pc, #196]	; (8002f20 <_ZL12MX_GPIO_Initv+0x124>)
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	4a30      	ldr	r2, [pc, #192]	; (8002f20 <_ZL12MX_GPIO_Initv+0x124>)
 8002e5e:	f043 0308 	orr.w	r3, r3, #8
 8002e62:	6193      	str	r3, [r2, #24]
 8002e64:	4b2e      	ldr	r3, [pc, #184]	; (8002f20 <_ZL12MX_GPIO_Initv+0x124>)
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	603b      	str	r3, [r7, #0]
 8002e6e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8002e70:	2200      	movs	r2, #0
 8002e72:	2130      	movs	r1, #48	; 0x30
 8002e74:	482b      	ldr	r0, [pc, #172]	; (8002f24 <_ZL12MX_GPIO_Initv+0x128>)
 8002e76:	f000 fe71 	bl	8003b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f64e 4101 	movw	r1, #60417	; 0xec01
 8002e80:	4829      	ldr	r0, [pc, #164]	; (8002f28 <_ZL12MX_GPIO_Initv+0x12c>)
 8002e82:	f000 fe6b 	bl	8003b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 PA4*/
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4;
 8002e86:	231f      	movs	r3, #31
 8002e88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e8a:	4b28      	ldr	r3, [pc, #160]	; (8002f2c <_ZL12MX_GPIO_Initv+0x130>)
 8002e8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e92:	f107 0310 	add.w	r3, r7, #16
 8002e96:	4619      	mov	r1, r3
 8002e98:	4822      	ldr	r0, [pc, #136]	; (8002f24 <_ZL12MX_GPIO_Initv+0x128>)
 8002e9a:	f000 fcdb 	bl	8003854 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8002e9e:	2330      	movs	r3, #48	; 0x30
 8002ea0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eae:	f107 0310 	add.w	r3, r7, #16
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	481b      	ldr	r0, [pc, #108]	; (8002f24 <_ZL12MX_GPIO_Initv+0x128>)
 8002eb6:	f000 fccd 	bl	8003854 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB11 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8002eba:	f64f 4301 	movw	r3, #64513	; 0xfc01
 8002ebe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ecc:	f107 0310 	add.w	r3, r7, #16
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4815      	ldr	r0, [pc, #84]	; (8002f28 <_ZL12MX_GPIO_Initv+0x12c>)
 8002ed4:	f000 fcbe 	bl	8003854 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2100      	movs	r1, #0
 8002edc:	2006      	movs	r0, #6
 8002ede:	f000 fc82 	bl	80037e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002ee2:	2006      	movs	r0, #6
 8002ee4:	f000 fc9b 	bl	800381e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002ee8:	2200      	movs	r2, #0
 8002eea:	2100      	movs	r1, #0
 8002eec:	2007      	movs	r0, #7
 8002eee:	f000 fc7a 	bl	80037e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002ef2:	2007      	movs	r0, #7
 8002ef4:	f000 fc93 	bl	800381e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2100      	movs	r1, #0
 8002efc:	2008      	movs	r0, #8
 8002efe:	f000 fc72 	bl	80037e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002f02:	2008      	movs	r0, #8
 8002f04:	f000 fc8b 	bl	800381e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	2009      	movs	r0, #9
 8002f0e:	f000 fc6a 	bl	80037e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002f12:	2009      	movs	r0, #9
 8002f14:	f000 fc83 	bl	800381e <HAL_NVIC_EnableIRQ>
}
 8002f18:	bf00      	nop
 8002f1a:	3720      	adds	r7, #32
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40010800 	.word	0x40010800
 8002f28:	40010c00 	.word	0x40010c00
 8002f2c:	10110000 	.word	0x10110000

08002f30 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f34:	b672      	cpsid	i
}
 8002f36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f38:	e7fe      	b.n	8002f38 <Error_Handler+0x8>
	...

08002f3c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d159      	bne.n	8003000 <_Z41__static_initialization_and_destruction_0ii+0xc4>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d154      	bne.n	8003000 <_Z41__static_initialization_and_destruction_0ii+0xc4>
inline Motor frontLeftMotor;
 8002f56:	4b2c      	ldr	r3, [pc, #176]	; (8003008 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	4a2a      	ldr	r2, [pc, #168]	; (8003008 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8002f5e:	6013      	str	r3, [r2, #0]
 8002f60:	4b29      	ldr	r3, [pc, #164]	; (8003008 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	bf0c      	ite	eq
 8002f68:	2301      	moveq	r3, #1
 8002f6a:	2300      	movne	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d002      	beq.n	8002f78 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8002f72:	4826      	ldr	r0, [pc, #152]	; (800300c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8002f74:	f7fe fdf8 	bl	8001b68 <_ZN5MotorC1Ev>
inline Motor frontRightMotor;
 8002f78:	4b25      	ldr	r3, [pc, #148]	; (8003010 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	4a24      	ldr	r2, [pc, #144]	; (8003010 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	4b23      	ldr	r3, [pc, #140]	; (8003010 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	bf0c      	ite	eq
 8002f8a:	2301      	moveq	r3, #1
 8002f8c:	2300      	movne	r3, #0
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8002f94:	481f      	ldr	r0, [pc, #124]	; (8003014 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8002f96:	f7fe fde7 	bl	8001b68 <_ZN5MotorC1Ev>
inline Motor backLeftMotor;
 8002f9a:	4b1f      	ldr	r3, [pc, #124]	; (8003018 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	4a1d      	ldr	r2, [pc, #116]	; (8003018 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8002fa2:	6013      	str	r3, [r2, #0]
 8002fa4:	4b1c      	ldr	r3, [pc, #112]	; (8003018 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	bf0c      	ite	eq
 8002fac:	2301      	moveq	r3, #1
 8002fae:	2300      	movne	r3, #0
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d002      	beq.n	8002fbc <_Z41__static_initialization_and_destruction_0ii+0x80>
 8002fb6:	4819      	ldr	r0, [pc, #100]	; (800301c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8002fb8:	f7fe fdd6 	bl	8001b68 <_ZN5MotorC1Ev>
inline Motor backRightMotor;
 8002fbc:	4b18      	ldr	r3, [pc, #96]	; (8003020 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	4a17      	ldr	r2, [pc, #92]	; (8003020 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8002fc4:	6013      	str	r3, [r2, #0]
 8002fc6:	4b16      	ldr	r3, [pc, #88]	; (8003020 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	bf0c      	ite	eq
 8002fce:	2301      	moveq	r3, #1
 8002fd0:	2300      	movne	r3, #0
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <_Z41__static_initialization_and_destruction_0ii+0xa2>
 8002fd8:	4812      	ldr	r0, [pc, #72]	; (8003024 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8002fda:	f7fe fdc5 	bl	8001b68 <_ZN5MotorC1Ev>
inline BNOController bno;
 8002fde:	4b12      	ldr	r3, [pc, #72]	; (8003028 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	4a10      	ldr	r2, [pc, #64]	; (8003028 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	4b0f      	ldr	r3, [pc, #60]	; (8003028 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	bf0c      	ite	eq
 8002ff0:	2301      	moveq	r3, #1
 8002ff2:	2300      	movne	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d002      	beq.n	8003000 <_Z41__static_initialization_and_destruction_0ii+0xc4>
 8002ffa:	480c      	ldr	r0, [pc, #48]	; (800302c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8002ffc:	f7fe ffdf 	bl	8001fbe <_ZN13BNOControllerC1Ev>
 8003000:	bf00      	nop
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	200004d4 	.word	0x200004d4
 800300c:	20000290 	.word	0x20000290
 8003010:	200004d8 	.word	0x200004d8
 8003014:	20000300 	.word	0x20000300
 8003018:	200004dc 	.word	0x200004dc
 800301c:	20000370 	.word	0x20000370
 8003020:	200004e0 	.word	0x200004e0
 8003024:	200003e0 	.word	0x200003e0
 8003028:	200004e4 	.word	0x200004e4
 800302c:	20000450 	.word	0x20000450

08003030 <_GLOBAL__sub_I_hi2c1>:
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
 8003034:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003038:	2001      	movs	r0, #1
 800303a:	f7ff ff7f 	bl	8002f3c <_Z41__static_initialization_and_destruction_0ii>
 800303e:	bd80      	pop	{r7, pc}

08003040 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003046:	4b15      	ldr	r3, [pc, #84]	; (800309c <HAL_MspInit+0x5c>)
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	4a14      	ldr	r2, [pc, #80]	; (800309c <HAL_MspInit+0x5c>)
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	6193      	str	r3, [r2, #24]
 8003052:	4b12      	ldr	r3, [pc, #72]	; (800309c <HAL_MspInit+0x5c>)
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	60bb      	str	r3, [r7, #8]
 800305c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800305e:	4b0f      	ldr	r3, [pc, #60]	; (800309c <HAL_MspInit+0x5c>)
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	4a0e      	ldr	r2, [pc, #56]	; (800309c <HAL_MspInit+0x5c>)
 8003064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003068:	61d3      	str	r3, [r2, #28]
 800306a:	4b0c      	ldr	r3, [pc, #48]	; (800309c <HAL_MspInit+0x5c>)
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003072:	607b      	str	r3, [r7, #4]
 8003074:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003076:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <HAL_MspInit+0x60>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	4a04      	ldr	r2, [pc, #16]	; (80030a0 <HAL_MspInit+0x60>)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003092:	bf00      	nop
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr
 800309c:	40021000 	.word	0x40021000
 80030a0:	40010000 	.word	0x40010000

080030a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ac:	f107 0310 	add.w	r3, r7, #16
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	605a      	str	r2, [r3, #4]
 80030b6:	609a      	str	r2, [r3, #8]
 80030b8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a15      	ldr	r2, [pc, #84]	; (8003114 <HAL_I2C_MspInit+0x70>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d123      	bne.n	800310c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030c4:	4b14      	ldr	r3, [pc, #80]	; (8003118 <HAL_I2C_MspInit+0x74>)
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	4a13      	ldr	r2, [pc, #76]	; (8003118 <HAL_I2C_MspInit+0x74>)
 80030ca:	f043 0308 	orr.w	r3, r3, #8
 80030ce:	6193      	str	r3, [r2, #24]
 80030d0:	4b11      	ldr	r3, [pc, #68]	; (8003118 <HAL_I2C_MspInit+0x74>)
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030dc:	23c0      	movs	r3, #192	; 0xc0
 80030de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030e0:	2312      	movs	r3, #18
 80030e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030e4:	2303      	movs	r3, #3
 80030e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030e8:	f107 0310 	add.w	r3, r7, #16
 80030ec:	4619      	mov	r1, r3
 80030ee:	480b      	ldr	r0, [pc, #44]	; (800311c <HAL_I2C_MspInit+0x78>)
 80030f0:	f000 fbb0 	bl	8003854 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80030f4:	4b08      	ldr	r3, [pc, #32]	; (8003118 <HAL_I2C_MspInit+0x74>)
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	4a07      	ldr	r2, [pc, #28]	; (8003118 <HAL_I2C_MspInit+0x74>)
 80030fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030fe:	61d3      	str	r3, [r2, #28]
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <HAL_I2C_MspInit+0x74>)
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003108:	60bb      	str	r3, [r7, #8]
 800310a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800310c:	bf00      	nop
 800310e:	3720      	adds	r7, #32
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40005400 	.word	0x40005400
 8003118:	40021000 	.word	0x40021000
 800311c:	40010c00 	.word	0x40010c00

08003120 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a12      	ldr	r2, [pc, #72]	; (8003178 <HAL_TIM_PWM_MspInit+0x58>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d10c      	bne.n	800314c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003132:	4b12      	ldr	r3, [pc, #72]	; (800317c <HAL_TIM_PWM_MspInit+0x5c>)
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	4a11      	ldr	r2, [pc, #68]	; (800317c <HAL_TIM_PWM_MspInit+0x5c>)
 8003138:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800313c:	6193      	str	r3, [r2, #24]
 800313e:	4b0f      	ldr	r3, [pc, #60]	; (800317c <HAL_TIM_PWM_MspInit+0x5c>)
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800314a:	e010      	b.n	800316e <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a0b      	ldr	r2, [pc, #44]	; (8003180 <HAL_TIM_PWM_MspInit+0x60>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d10b      	bne.n	800316e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003156:	4b09      	ldr	r3, [pc, #36]	; (800317c <HAL_TIM_PWM_MspInit+0x5c>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	4a08      	ldr	r2, [pc, #32]	; (800317c <HAL_TIM_PWM_MspInit+0x5c>)
 800315c:	f043 0302 	orr.w	r3, r3, #2
 8003160:	61d3      	str	r3, [r2, #28]
 8003162:	4b06      	ldr	r3, [pc, #24]	; (800317c <HAL_TIM_PWM_MspInit+0x5c>)
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	60bb      	str	r3, [r7, #8]
 800316c:	68bb      	ldr	r3, [r7, #8]
}
 800316e:	bf00      	nop
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr
 8003178:	40012c00 	.word	0x40012c00
 800317c:	40021000 	.word	0x40021000
 8003180:	40000400 	.word	0x40000400

08003184 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b08a      	sub	sp, #40	; 0x28
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800318c:	f107 0318 	add.w	r3, r7, #24
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	605a      	str	r2, [r3, #4]
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a2b      	ldr	r2, [pc, #172]	; (800324c <HAL_TIM_MspPostInit+0xc8>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d119      	bne.n	80031d8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a4:	4b2a      	ldr	r3, [pc, #168]	; (8003250 <HAL_TIM_MspPostInit+0xcc>)
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	4a29      	ldr	r2, [pc, #164]	; (8003250 <HAL_TIM_MspPostInit+0xcc>)
 80031aa:	f043 0304 	orr.w	r3, r3, #4
 80031ae:	6193      	str	r3, [r2, #24]
 80031b0:	4b27      	ldr	r3, [pc, #156]	; (8003250 <HAL_TIM_MspPostInit+0xcc>)
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80031bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c2:	2302      	movs	r3, #2
 80031c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c6:	2302      	movs	r3, #2
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ca:	f107 0318 	add.w	r3, r7, #24
 80031ce:	4619      	mov	r1, r3
 80031d0:	4820      	ldr	r0, [pc, #128]	; (8003254 <HAL_TIM_MspPostInit+0xd0>)
 80031d2:	f000 fb3f 	bl	8003854 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80031d6:	e034      	b.n	8003242 <HAL_TIM_MspPostInit+0xbe>
  else if(htim->Instance==TIM3)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a1e      	ldr	r2, [pc, #120]	; (8003258 <HAL_TIM_MspPostInit+0xd4>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d12f      	bne.n	8003242 <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e2:	4b1b      	ldr	r3, [pc, #108]	; (8003250 <HAL_TIM_MspPostInit+0xcc>)
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	4a1a      	ldr	r2, [pc, #104]	; (8003250 <HAL_TIM_MspPostInit+0xcc>)
 80031e8:	f043 0304 	orr.w	r3, r3, #4
 80031ec:	6193      	str	r3, [r2, #24]
 80031ee:	4b18      	ldr	r3, [pc, #96]	; (8003250 <HAL_TIM_MspPostInit+0xcc>)
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	613b      	str	r3, [r7, #16]
 80031f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031fa:	4b15      	ldr	r3, [pc, #84]	; (8003250 <HAL_TIM_MspPostInit+0xcc>)
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	4a14      	ldr	r2, [pc, #80]	; (8003250 <HAL_TIM_MspPostInit+0xcc>)
 8003200:	f043 0308 	orr.w	r3, r3, #8
 8003204:	6193      	str	r3, [r2, #24]
 8003206:	4b12      	ldr	r3, [pc, #72]	; (8003250 <HAL_TIM_MspPostInit+0xcc>)
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003212:	23c0      	movs	r3, #192	; 0xc0
 8003214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003216:	2302      	movs	r3, #2
 8003218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800321a:	2302      	movs	r3, #2
 800321c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800321e:	f107 0318 	add.w	r3, r7, #24
 8003222:	4619      	mov	r1, r3
 8003224:	480b      	ldr	r0, [pc, #44]	; (8003254 <HAL_TIM_MspPostInit+0xd0>)
 8003226:	f000 fb15 	bl	8003854 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800322a:	2302      	movs	r3, #2
 800322c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800322e:	2302      	movs	r3, #2
 8003230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003232:	2302      	movs	r3, #2
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003236:	f107 0318 	add.w	r3, r7, #24
 800323a:	4619      	mov	r1, r3
 800323c:	4807      	ldr	r0, [pc, #28]	; (800325c <HAL_TIM_MspPostInit+0xd8>)
 800323e:	f000 fb09 	bl	8003854 <HAL_GPIO_Init>
}
 8003242:	bf00      	nop
 8003244:	3728      	adds	r7, #40	; 0x28
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40012c00 	.word	0x40012c00
 8003250:	40021000 	.word	0x40021000
 8003254:	40010800 	.word	0x40010800
 8003258:	40000400 	.word	0x40000400
 800325c:	40010c00 	.word	0x40010c00

08003260 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003268:	f107 0310 	add.w	r3, r7, #16
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	605a      	str	r2, [r3, #4]
 8003272:	609a      	str	r2, [r3, #8]
 8003274:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a1c      	ldr	r2, [pc, #112]	; (80032ec <HAL_UART_MspInit+0x8c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d131      	bne.n	80032e4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003280:	4b1b      	ldr	r3, [pc, #108]	; (80032f0 <HAL_UART_MspInit+0x90>)
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	4a1a      	ldr	r2, [pc, #104]	; (80032f0 <HAL_UART_MspInit+0x90>)
 8003286:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800328a:	6193      	str	r3, [r2, #24]
 800328c:	4b18      	ldr	r3, [pc, #96]	; (80032f0 <HAL_UART_MspInit+0x90>)
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003298:	4b15      	ldr	r3, [pc, #84]	; (80032f0 <HAL_UART_MspInit+0x90>)
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	4a14      	ldr	r2, [pc, #80]	; (80032f0 <HAL_UART_MspInit+0x90>)
 800329e:	f043 0304 	orr.w	r3, r3, #4
 80032a2:	6193      	str	r3, [r2, #24]
 80032a4:	4b12      	ldr	r3, [pc, #72]	; (80032f0 <HAL_UART_MspInit+0x90>)
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	60bb      	str	r3, [r7, #8]
 80032ae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80032b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b6:	2302      	movs	r3, #2
 80032b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032ba:	2303      	movs	r3, #3
 80032bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032be:	f107 0310 	add.w	r3, r7, #16
 80032c2:	4619      	mov	r1, r3
 80032c4:	480b      	ldr	r0, [pc, #44]	; (80032f4 <HAL_UART_MspInit+0x94>)
 80032c6:	f000 fac5 	bl	8003854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80032ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032d8:	f107 0310 	add.w	r3, r7, #16
 80032dc:	4619      	mov	r1, r3
 80032de:	4805      	ldr	r0, [pc, #20]	; (80032f4 <HAL_UART_MspInit+0x94>)
 80032e0:	f000 fab8 	bl	8003854 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80032e4:	bf00      	nop
 80032e6:	3720      	adds	r7, #32
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40013800 	.word	0x40013800
 80032f0:	40021000 	.word	0x40021000
 80032f4:	40010800 	.word	0x40010800

080032f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032fc:	e7fe      	b.n	80032fc <NMI_Handler+0x4>

080032fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032fe:	b480      	push	{r7}
 8003300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003302:	e7fe      	b.n	8003302 <HardFault_Handler+0x4>

08003304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003308:	e7fe      	b.n	8003308 <MemManage_Handler+0x4>

0800330a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800330a:	b480      	push	{r7}
 800330c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800330e:	e7fe      	b.n	800330e <BusFault_Handler+0x4>

08003310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003314:	e7fe      	b.n	8003314 <UsageFault_Handler+0x4>

08003316 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003316:	b480      	push	{r7}
 8003318:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800331a:	bf00      	nop
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr

08003322 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003322:	b480      	push	{r7}
 8003324:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003326:	bf00      	nop
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr

0800332e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800332e:	b480      	push	{r7}
 8003330:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003332:	bf00      	nop
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr

0800333a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800333e:	f000 f93b 	bl	80035b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}

08003346 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800334a:	2001      	movs	r0, #1
 800334c:	f000 fc1e 	bl	8003b8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003350:	bf00      	nop
 8003352:	bd80      	pop	{r7, pc}

08003354 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003358:	2002      	movs	r0, #2
 800335a:	f000 fc17 	bl	8003b8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800335e:	bf00      	nop
 8003360:	bd80      	pop	{r7, pc}

08003362 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003366:	2004      	movs	r0, #4
 8003368:	f000 fc10 	bl	8003b8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800336c:	bf00      	nop
 800336e:	bd80      	pop	{r7, pc}

08003370 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003374:	2008      	movs	r0, #8
 8003376:	f000 fc09 	bl	8003b8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003384:	4802      	ldr	r0, [pc, #8]	; (8003390 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003386:	f001 ff1a 	bl	80051be <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800338a:	bf00      	nop
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	2000144c 	.word	0x2000144c

08003394 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033a0:	2300      	movs	r3, #0
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	e00a      	b.n	80033bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80033a6:	f3af 8000 	nop.w
 80033aa:	4601      	mov	r1, r0
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	1c5a      	adds	r2, r3, #1
 80033b0:	60ba      	str	r2, [r7, #8]
 80033b2:	b2ca      	uxtb	r2, r1
 80033b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	3301      	adds	r3, #1
 80033ba:	617b      	str	r3, [r7, #20]
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	dbf0      	blt.n	80033a6 <_read+0x12>
	}

return len;
 80033c4:	687b      	ldr	r3, [r7, #4]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b086      	sub	sp, #24
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033da:	2300      	movs	r3, #0
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	e009      	b.n	80033f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	1c5a      	adds	r2, r3, #1
 80033e4:	60ba      	str	r2, [r7, #8]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	3301      	adds	r3, #1
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	dbf1      	blt.n	80033e0 <_write+0x12>
	}
	return len;
 80033fc:	687b      	ldr	r3, [r7, #4]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <_close>:

int _close(int file)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
	return -1;
 800340e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003412:	4618      	mov	r0, r3
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr

0800341c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800342c:	605a      	str	r2, [r3, #4]
	return 0;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	bc80      	pop	{r7}
 8003438:	4770      	bx	lr

0800343a <_isatty>:

int _isatty(int file)
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
	return 1;
 8003442:	2301      	movs	r3, #1
}
 8003444:	4618      	mov	r0, r3
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	bc80      	pop	{r7}
 800344c:	4770      	bx	lr

0800344e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800344e:	b480      	push	{r7}
 8003450:	b085      	sub	sp, #20
 8003452:	af00      	add	r7, sp, #0
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	607a      	str	r2, [r7, #4]
	return 0;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	bc80      	pop	{r7}
 8003464:	4770      	bx	lr
	...

08003468 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003470:	4a14      	ldr	r2, [pc, #80]	; (80034c4 <_sbrk+0x5c>)
 8003472:	4b15      	ldr	r3, [pc, #84]	; (80034c8 <_sbrk+0x60>)
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800347c:	4b13      	ldr	r3, [pc, #76]	; (80034cc <_sbrk+0x64>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d102      	bne.n	800348a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003484:	4b11      	ldr	r3, [pc, #68]	; (80034cc <_sbrk+0x64>)
 8003486:	4a12      	ldr	r2, [pc, #72]	; (80034d0 <_sbrk+0x68>)
 8003488:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800348a:	4b10      	ldr	r3, [pc, #64]	; (80034cc <_sbrk+0x64>)
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4413      	add	r3, r2
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	429a      	cmp	r2, r3
 8003496:	d207      	bcs.n	80034a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003498:	f008 ff24 	bl	800c2e4 <__errno>
 800349c:	4603      	mov	r3, r0
 800349e:	220c      	movs	r2, #12
 80034a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034a2:	f04f 33ff 	mov.w	r3, #4294967295
 80034a6:	e009      	b.n	80034bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034a8:	4b08      	ldr	r3, [pc, #32]	; (80034cc <_sbrk+0x64>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034ae:	4b07      	ldr	r3, [pc, #28]	; (80034cc <_sbrk+0x64>)
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4413      	add	r3, r2
 80034b6:	4a05      	ldr	r2, [pc, #20]	; (80034cc <_sbrk+0x64>)
 80034b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034ba:	68fb      	ldr	r3, [r7, #12]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	20005000 	.word	0x20005000
 80034c8:	00000400 	.word	0x00000400
 80034cc:	20000584 	.word	0x20000584
 80034d0:	20001738 	.word	0x20001738

080034d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034d8:	bf00      	nop
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr

080034e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80034e0:	f7ff fff8 	bl	80034d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034e4:	480b      	ldr	r0, [pc, #44]	; (8003514 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80034e6:	490c      	ldr	r1, [pc, #48]	; (8003518 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80034e8:	4a0c      	ldr	r2, [pc, #48]	; (800351c <LoopFillZerobss+0x16>)
  movs r3, #0
 80034ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034ec:	e002      	b.n	80034f4 <LoopCopyDataInit>

080034ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034f2:	3304      	adds	r3, #4

080034f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034f8:	d3f9      	bcc.n	80034ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034fa:	4a09      	ldr	r2, [pc, #36]	; (8003520 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80034fc:	4c09      	ldr	r4, [pc, #36]	; (8003524 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80034fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003500:	e001      	b.n	8003506 <LoopFillZerobss>

08003502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003504:	3204      	adds	r2, #4

08003506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003508:	d3fb      	bcc.n	8003502 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800350a:	f008 fef1 	bl	800c2f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800350e:	f7ff f9b7 	bl	8002880 <main>
  bx lr
 8003512:	4770      	bx	lr
  ldr r0, =_sdata
 8003514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003518:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800351c:	0800da18 	.word	0x0800da18
  ldr r2, =_sbss
 8003520:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003524:	20001734 	.word	0x20001734

08003528 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003528:	e7fe      	b.n	8003528 <ADC1_2_IRQHandler>
	...

0800352c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003530:	4b08      	ldr	r3, [pc, #32]	; (8003554 <HAL_Init+0x28>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a07      	ldr	r2, [pc, #28]	; (8003554 <HAL_Init+0x28>)
 8003536:	f043 0310 	orr.w	r3, r3, #16
 800353a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800353c:	2003      	movs	r0, #3
 800353e:	f000 f947 	bl	80037d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003542:	200f      	movs	r0, #15
 8003544:	f000 f808 	bl	8003558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003548:	f7ff fd7a 	bl	8003040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40022000 	.word	0x40022000

08003558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003560:	4b12      	ldr	r3, [pc, #72]	; (80035ac <HAL_InitTick+0x54>)
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	4b12      	ldr	r3, [pc, #72]	; (80035b0 <HAL_InitTick+0x58>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	4619      	mov	r1, r3
 800356a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800356e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003572:	fbb2 f3f3 	udiv	r3, r2, r3
 8003576:	4618      	mov	r0, r3
 8003578:	f000 f95f 	bl	800383a <HAL_SYSTICK_Config>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e00e      	b.n	80035a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b0f      	cmp	r3, #15
 800358a:	d80a      	bhi.n	80035a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800358c:	2200      	movs	r2, #0
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	f04f 30ff 	mov.w	r0, #4294967295
 8003594:	f000 f927 	bl	80037e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003598:	4a06      	ldr	r2, [pc, #24]	; (80035b4 <HAL_InitTick+0x5c>)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	e000      	b.n	80035a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	20000004 	.word	0x20000004
 80035b0:	2000000c 	.word	0x2000000c
 80035b4:	20000008 	.word	0x20000008

080035b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035bc:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <HAL_IncTick+0x1c>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	461a      	mov	r2, r3
 80035c2:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <HAL_IncTick+0x20>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4413      	add	r3, r2
 80035c8:	4a03      	ldr	r2, [pc, #12]	; (80035d8 <HAL_IncTick+0x20>)
 80035ca:	6013      	str	r3, [r2, #0]
}
 80035cc:	bf00      	nop
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr
 80035d4:	2000000c 	.word	0x2000000c
 80035d8:	200007b4 	.word	0x200007b4

080035dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  return uwTick;
 80035e0:	4b02      	ldr	r3, [pc, #8]	; (80035ec <HAL_GetTick+0x10>)
 80035e2:	681b      	ldr	r3, [r3, #0]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bc80      	pop	{r7}
 80035ea:	4770      	bx	lr
 80035ec:	200007b4 	.word	0x200007b4

080035f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035f8:	f7ff fff0 	bl	80035dc <HAL_GetTick>
 80035fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003608:	d005      	beq.n	8003616 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800360a:	4b0a      	ldr	r3, [pc, #40]	; (8003634 <HAL_Delay+0x44>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	461a      	mov	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4413      	add	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003616:	bf00      	nop
 8003618:	f7ff ffe0 	bl	80035dc <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	429a      	cmp	r2, r3
 8003626:	d8f7      	bhi.n	8003618 <HAL_Delay+0x28>
  {
  }
}
 8003628:	bf00      	nop
 800362a:	bf00      	nop
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	2000000c 	.word	0x2000000c

08003638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003648:	4b0c      	ldr	r3, [pc, #48]	; (800367c <__NVIC_SetPriorityGrouping+0x44>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003654:	4013      	ands	r3, r2
 8003656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003660:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800366a:	4a04      	ldr	r2, [pc, #16]	; (800367c <__NVIC_SetPriorityGrouping+0x44>)
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	60d3      	str	r3, [r2, #12]
}
 8003670:	bf00      	nop
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	bc80      	pop	{r7}
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	e000ed00 	.word	0xe000ed00

08003680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003684:	4b04      	ldr	r3, [pc, #16]	; (8003698 <__NVIC_GetPriorityGrouping+0x18>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	0a1b      	lsrs	r3, r3, #8
 800368a:	f003 0307 	and.w	r3, r3, #7
}
 800368e:	4618      	mov	r0, r3
 8003690:	46bd      	mov	sp, r7
 8003692:	bc80      	pop	{r7}
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	e000ed00 	.word	0xe000ed00

0800369c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	db0b      	blt.n	80036c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ae:	79fb      	ldrb	r3, [r7, #7]
 80036b0:	f003 021f 	and.w	r2, r3, #31
 80036b4:	4906      	ldr	r1, [pc, #24]	; (80036d0 <__NVIC_EnableIRQ+0x34>)
 80036b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ba:	095b      	lsrs	r3, r3, #5
 80036bc:	2001      	movs	r0, #1
 80036be:	fa00 f202 	lsl.w	r2, r0, r2
 80036c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bc80      	pop	{r7}
 80036ce:	4770      	bx	lr
 80036d0:	e000e100 	.word	0xe000e100

080036d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	4603      	mov	r3, r0
 80036dc:	6039      	str	r1, [r7, #0]
 80036de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	db0a      	blt.n	80036fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	b2da      	uxtb	r2, r3
 80036ec:	490c      	ldr	r1, [pc, #48]	; (8003720 <__NVIC_SetPriority+0x4c>)
 80036ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f2:	0112      	lsls	r2, r2, #4
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	440b      	add	r3, r1
 80036f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036fc:	e00a      	b.n	8003714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	b2da      	uxtb	r2, r3
 8003702:	4908      	ldr	r1, [pc, #32]	; (8003724 <__NVIC_SetPriority+0x50>)
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	3b04      	subs	r3, #4
 800370c:	0112      	lsls	r2, r2, #4
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	440b      	add	r3, r1
 8003712:	761a      	strb	r2, [r3, #24]
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	bc80      	pop	{r7}
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	e000e100 	.word	0xe000e100
 8003724:	e000ed00 	.word	0xe000ed00

08003728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003728:	b480      	push	{r7}
 800372a:	b089      	sub	sp, #36	; 0x24
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f1c3 0307 	rsb	r3, r3, #7
 8003742:	2b04      	cmp	r3, #4
 8003744:	bf28      	it	cs
 8003746:	2304      	movcs	r3, #4
 8003748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	3304      	adds	r3, #4
 800374e:	2b06      	cmp	r3, #6
 8003750:	d902      	bls.n	8003758 <NVIC_EncodePriority+0x30>
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	3b03      	subs	r3, #3
 8003756:	e000      	b.n	800375a <NVIC_EncodePriority+0x32>
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800375c:	f04f 32ff 	mov.w	r2, #4294967295
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	43da      	mvns	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	401a      	ands	r2, r3
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003770:	f04f 31ff 	mov.w	r1, #4294967295
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	fa01 f303 	lsl.w	r3, r1, r3
 800377a:	43d9      	mvns	r1, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003780:	4313      	orrs	r3, r2
         );
}
 8003782:	4618      	mov	r0, r3
 8003784:	3724      	adds	r7, #36	; 0x24
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr

0800378c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3b01      	subs	r3, #1
 8003798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800379c:	d301      	bcc.n	80037a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800379e:	2301      	movs	r3, #1
 80037a0:	e00f      	b.n	80037c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037a2:	4a0a      	ldr	r2, [pc, #40]	; (80037cc <SysTick_Config+0x40>)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037aa:	210f      	movs	r1, #15
 80037ac:	f04f 30ff 	mov.w	r0, #4294967295
 80037b0:	f7ff ff90 	bl	80036d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037b4:	4b05      	ldr	r3, [pc, #20]	; (80037cc <SysTick_Config+0x40>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ba:	4b04      	ldr	r3, [pc, #16]	; (80037cc <SysTick_Config+0x40>)
 80037bc:	2207      	movs	r2, #7
 80037be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	e000e010 	.word	0xe000e010

080037d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff ff2d 	bl	8003638 <__NVIC_SetPriorityGrouping>
}
 80037de:	bf00      	nop
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b086      	sub	sp, #24
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	4603      	mov	r3, r0
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	607a      	str	r2, [r7, #4]
 80037f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037f8:	f7ff ff42 	bl	8003680 <__NVIC_GetPriorityGrouping>
 80037fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	68b9      	ldr	r1, [r7, #8]
 8003802:	6978      	ldr	r0, [r7, #20]
 8003804:	f7ff ff90 	bl	8003728 <NVIC_EncodePriority>
 8003808:	4602      	mov	r2, r0
 800380a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800380e:	4611      	mov	r1, r2
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff ff5f 	bl	80036d4 <__NVIC_SetPriority>
}
 8003816:	bf00      	nop
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b082      	sub	sp, #8
 8003822:	af00      	add	r7, sp, #0
 8003824:	4603      	mov	r3, r0
 8003826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff ff35 	bl	800369c <__NVIC_EnableIRQ>
}
 8003832:	bf00      	nop
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b082      	sub	sp, #8
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7ff ffa2 	bl	800378c <SysTick_Config>
 8003848:	4603      	mov	r3, r0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
	...

08003854 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003854:	b480      	push	{r7}
 8003856:	b08b      	sub	sp, #44	; 0x2c
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800385e:	2300      	movs	r3, #0
 8003860:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003862:	2300      	movs	r3, #0
 8003864:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003866:	e169      	b.n	8003b3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003868:	2201      	movs	r2, #1
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	69fa      	ldr	r2, [r7, #28]
 8003878:	4013      	ands	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	429a      	cmp	r2, r3
 8003882:	f040 8158 	bne.w	8003b36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	4a9a      	ldr	r2, [pc, #616]	; (8003af4 <HAL_GPIO_Init+0x2a0>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d05e      	beq.n	800394e <HAL_GPIO_Init+0xfa>
 8003890:	4a98      	ldr	r2, [pc, #608]	; (8003af4 <HAL_GPIO_Init+0x2a0>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d875      	bhi.n	8003982 <HAL_GPIO_Init+0x12e>
 8003896:	4a98      	ldr	r2, [pc, #608]	; (8003af8 <HAL_GPIO_Init+0x2a4>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d058      	beq.n	800394e <HAL_GPIO_Init+0xfa>
 800389c:	4a96      	ldr	r2, [pc, #600]	; (8003af8 <HAL_GPIO_Init+0x2a4>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d86f      	bhi.n	8003982 <HAL_GPIO_Init+0x12e>
 80038a2:	4a96      	ldr	r2, [pc, #600]	; (8003afc <HAL_GPIO_Init+0x2a8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d052      	beq.n	800394e <HAL_GPIO_Init+0xfa>
 80038a8:	4a94      	ldr	r2, [pc, #592]	; (8003afc <HAL_GPIO_Init+0x2a8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d869      	bhi.n	8003982 <HAL_GPIO_Init+0x12e>
 80038ae:	4a94      	ldr	r2, [pc, #592]	; (8003b00 <HAL_GPIO_Init+0x2ac>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d04c      	beq.n	800394e <HAL_GPIO_Init+0xfa>
 80038b4:	4a92      	ldr	r2, [pc, #584]	; (8003b00 <HAL_GPIO_Init+0x2ac>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d863      	bhi.n	8003982 <HAL_GPIO_Init+0x12e>
 80038ba:	4a92      	ldr	r2, [pc, #584]	; (8003b04 <HAL_GPIO_Init+0x2b0>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d046      	beq.n	800394e <HAL_GPIO_Init+0xfa>
 80038c0:	4a90      	ldr	r2, [pc, #576]	; (8003b04 <HAL_GPIO_Init+0x2b0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d85d      	bhi.n	8003982 <HAL_GPIO_Init+0x12e>
 80038c6:	2b12      	cmp	r3, #18
 80038c8:	d82a      	bhi.n	8003920 <HAL_GPIO_Init+0xcc>
 80038ca:	2b12      	cmp	r3, #18
 80038cc:	d859      	bhi.n	8003982 <HAL_GPIO_Init+0x12e>
 80038ce:	a201      	add	r2, pc, #4	; (adr r2, 80038d4 <HAL_GPIO_Init+0x80>)
 80038d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d4:	0800394f 	.word	0x0800394f
 80038d8:	08003929 	.word	0x08003929
 80038dc:	0800393b 	.word	0x0800393b
 80038e0:	0800397d 	.word	0x0800397d
 80038e4:	08003983 	.word	0x08003983
 80038e8:	08003983 	.word	0x08003983
 80038ec:	08003983 	.word	0x08003983
 80038f0:	08003983 	.word	0x08003983
 80038f4:	08003983 	.word	0x08003983
 80038f8:	08003983 	.word	0x08003983
 80038fc:	08003983 	.word	0x08003983
 8003900:	08003983 	.word	0x08003983
 8003904:	08003983 	.word	0x08003983
 8003908:	08003983 	.word	0x08003983
 800390c:	08003983 	.word	0x08003983
 8003910:	08003983 	.word	0x08003983
 8003914:	08003983 	.word	0x08003983
 8003918:	08003931 	.word	0x08003931
 800391c:	08003945 	.word	0x08003945
 8003920:	4a79      	ldr	r2, [pc, #484]	; (8003b08 <HAL_GPIO_Init+0x2b4>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d013      	beq.n	800394e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003926:	e02c      	b.n	8003982 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	623b      	str	r3, [r7, #32]
          break;
 800392e:	e029      	b.n	8003984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	3304      	adds	r3, #4
 8003936:	623b      	str	r3, [r7, #32]
          break;
 8003938:	e024      	b.n	8003984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	3308      	adds	r3, #8
 8003940:	623b      	str	r3, [r7, #32]
          break;
 8003942:	e01f      	b.n	8003984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	330c      	adds	r3, #12
 800394a:	623b      	str	r3, [r7, #32]
          break;
 800394c:	e01a      	b.n	8003984 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d102      	bne.n	800395c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003956:	2304      	movs	r3, #4
 8003958:	623b      	str	r3, [r7, #32]
          break;
 800395a:	e013      	b.n	8003984 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d105      	bne.n	8003970 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003964:	2308      	movs	r3, #8
 8003966:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	69fa      	ldr	r2, [r7, #28]
 800396c:	611a      	str	r2, [r3, #16]
          break;
 800396e:	e009      	b.n	8003984 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003970:	2308      	movs	r3, #8
 8003972:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	69fa      	ldr	r2, [r7, #28]
 8003978:	615a      	str	r2, [r3, #20]
          break;
 800397a:	e003      	b.n	8003984 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800397c:	2300      	movs	r3, #0
 800397e:	623b      	str	r3, [r7, #32]
          break;
 8003980:	e000      	b.n	8003984 <HAL_GPIO_Init+0x130>
          break;
 8003982:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	2bff      	cmp	r3, #255	; 0xff
 8003988:	d801      	bhi.n	800398e <HAL_GPIO_Init+0x13a>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	e001      	b.n	8003992 <HAL_GPIO_Init+0x13e>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	3304      	adds	r3, #4
 8003992:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	2bff      	cmp	r3, #255	; 0xff
 8003998:	d802      	bhi.n	80039a0 <HAL_GPIO_Init+0x14c>
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	e002      	b.n	80039a6 <HAL_GPIO_Init+0x152>
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	3b08      	subs	r3, #8
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	210f      	movs	r1, #15
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	fa01 f303 	lsl.w	r3, r1, r3
 80039b4:	43db      	mvns	r3, r3
 80039b6:	401a      	ands	r2, r3
 80039b8:	6a39      	ldr	r1, [r7, #32]
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	fa01 f303 	lsl.w	r3, r1, r3
 80039c0:	431a      	orrs	r2, r3
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 80b1 	beq.w	8003b36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80039d4:	4b4d      	ldr	r3, [pc, #308]	; (8003b0c <HAL_GPIO_Init+0x2b8>)
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	4a4c      	ldr	r2, [pc, #304]	; (8003b0c <HAL_GPIO_Init+0x2b8>)
 80039da:	f043 0301 	orr.w	r3, r3, #1
 80039de:	6193      	str	r3, [r2, #24]
 80039e0:	4b4a      	ldr	r3, [pc, #296]	; (8003b0c <HAL_GPIO_Init+0x2b8>)
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	60bb      	str	r3, [r7, #8]
 80039ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80039ec:	4a48      	ldr	r2, [pc, #288]	; (8003b10 <HAL_GPIO_Init+0x2bc>)
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	089b      	lsrs	r3, r3, #2
 80039f2:	3302      	adds	r3, #2
 80039f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	f003 0303 	and.w	r3, r3, #3
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	220f      	movs	r2, #15
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a40      	ldr	r2, [pc, #256]	; (8003b14 <HAL_GPIO_Init+0x2c0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d013      	beq.n	8003a40 <HAL_GPIO_Init+0x1ec>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a3f      	ldr	r2, [pc, #252]	; (8003b18 <HAL_GPIO_Init+0x2c4>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d00d      	beq.n	8003a3c <HAL_GPIO_Init+0x1e8>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a3e      	ldr	r2, [pc, #248]	; (8003b1c <HAL_GPIO_Init+0x2c8>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d007      	beq.n	8003a38 <HAL_GPIO_Init+0x1e4>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a3d      	ldr	r2, [pc, #244]	; (8003b20 <HAL_GPIO_Init+0x2cc>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d101      	bne.n	8003a34 <HAL_GPIO_Init+0x1e0>
 8003a30:	2303      	movs	r3, #3
 8003a32:	e006      	b.n	8003a42 <HAL_GPIO_Init+0x1ee>
 8003a34:	2304      	movs	r3, #4
 8003a36:	e004      	b.n	8003a42 <HAL_GPIO_Init+0x1ee>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e002      	b.n	8003a42 <HAL_GPIO_Init+0x1ee>
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e000      	b.n	8003a42 <HAL_GPIO_Init+0x1ee>
 8003a40:	2300      	movs	r3, #0
 8003a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a44:	f002 0203 	and.w	r2, r2, #3
 8003a48:	0092      	lsls	r2, r2, #2
 8003a4a:	4093      	lsls	r3, r2
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003a52:	492f      	ldr	r1, [pc, #188]	; (8003b10 <HAL_GPIO_Init+0x2bc>)
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	089b      	lsrs	r3, r3, #2
 8003a58:	3302      	adds	r3, #2
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d006      	beq.n	8003a7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003a6c:	4b2d      	ldr	r3, [pc, #180]	; (8003b24 <HAL_GPIO_Init+0x2d0>)
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	492c      	ldr	r1, [pc, #176]	; (8003b24 <HAL_GPIO_Init+0x2d0>)
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	608b      	str	r3, [r1, #8]
 8003a78:	e006      	b.n	8003a88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003a7a:	4b2a      	ldr	r3, [pc, #168]	; (8003b24 <HAL_GPIO_Init+0x2d0>)
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	43db      	mvns	r3, r3
 8003a82:	4928      	ldr	r1, [pc, #160]	; (8003b24 <HAL_GPIO_Init+0x2d0>)
 8003a84:	4013      	ands	r3, r2
 8003a86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d006      	beq.n	8003aa2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a94:	4b23      	ldr	r3, [pc, #140]	; (8003b24 <HAL_GPIO_Init+0x2d0>)
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	4922      	ldr	r1, [pc, #136]	; (8003b24 <HAL_GPIO_Init+0x2d0>)
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	60cb      	str	r3, [r1, #12]
 8003aa0:	e006      	b.n	8003ab0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003aa2:	4b20      	ldr	r3, [pc, #128]	; (8003b24 <HAL_GPIO_Init+0x2d0>)
 8003aa4:	68da      	ldr	r2, [r3, #12]
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	43db      	mvns	r3, r3
 8003aaa:	491e      	ldr	r1, [pc, #120]	; (8003b24 <HAL_GPIO_Init+0x2d0>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d006      	beq.n	8003aca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003abc:	4b19      	ldr	r3, [pc, #100]	; (8003b24 <HAL_GPIO_Init+0x2d0>)
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	4918      	ldr	r1, [pc, #96]	; (8003b24 <HAL_GPIO_Init+0x2d0>)
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	604b      	str	r3, [r1, #4]
 8003ac8:	e006      	b.n	8003ad8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003aca:	4b16      	ldr	r3, [pc, #88]	; (8003b24 <HAL_GPIO_Init+0x2d0>)
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	4914      	ldr	r1, [pc, #80]	; (8003b24 <HAL_GPIO_Init+0x2d0>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d021      	beq.n	8003b28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ae4:	4b0f      	ldr	r3, [pc, #60]	; (8003b24 <HAL_GPIO_Init+0x2d0>)
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	490e      	ldr	r1, [pc, #56]	; (8003b24 <HAL_GPIO_Init+0x2d0>)
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	600b      	str	r3, [r1, #0]
 8003af0:	e021      	b.n	8003b36 <HAL_GPIO_Init+0x2e2>
 8003af2:	bf00      	nop
 8003af4:	10320000 	.word	0x10320000
 8003af8:	10310000 	.word	0x10310000
 8003afc:	10220000 	.word	0x10220000
 8003b00:	10210000 	.word	0x10210000
 8003b04:	10120000 	.word	0x10120000
 8003b08:	10110000 	.word	0x10110000
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	40010000 	.word	0x40010000
 8003b14:	40010800 	.word	0x40010800
 8003b18:	40010c00 	.word	0x40010c00
 8003b1c:	40011000 	.word	0x40011000
 8003b20:	40011400 	.word	0x40011400
 8003b24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003b28:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <HAL_GPIO_Init+0x304>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	43db      	mvns	r3, r3
 8003b30:	4909      	ldr	r1, [pc, #36]	; (8003b58 <HAL_GPIO_Init+0x304>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	3301      	adds	r3, #1
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	fa22 f303 	lsr.w	r3, r2, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f47f ae8e 	bne.w	8003868 <HAL_GPIO_Init+0x14>
  }
}
 8003b4c:	bf00      	nop
 8003b4e:	bf00      	nop
 8003b50:	372c      	adds	r7, #44	; 0x2c
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr
 8003b58:	40010400 	.word	0x40010400

08003b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	807b      	strh	r3, [r7, #2]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b6c:	787b      	ldrb	r3, [r7, #1]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b72:	887a      	ldrh	r2, [r7, #2]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003b78:	e003      	b.n	8003b82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b7a:	887b      	ldrh	r3, [r7, #2]
 8003b7c:	041a      	lsls	r2, r3, #16
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	611a      	str	r2, [r3, #16]
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bc80      	pop	{r7}
 8003b8a:	4770      	bx	lr

08003b8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	4603      	mov	r3, r0
 8003b94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b96:	4b08      	ldr	r3, [pc, #32]	; (8003bb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b98:	695a      	ldr	r2, [r3, #20]
 8003b9a:	88fb      	ldrh	r3, [r7, #6]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d006      	beq.n	8003bb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ba2:	4a05      	ldr	r2, [pc, #20]	; (8003bb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ba4:	88fb      	ldrh	r3, [r7, #6]
 8003ba6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ba8:	88fb      	ldrh	r3, [r7, #6]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fe fe30 	bl	8002810 <HAL_GPIO_EXTI_Callback>
  }
}
 8003bb0:	bf00      	nop
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40010400 	.word	0x40010400

08003bbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e12b      	b.n	8003e26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d106      	bne.n	8003be8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7ff fa5e 	bl	80030a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2224      	movs	r2, #36	; 0x24
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0201 	bic.w	r2, r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c20:	f003 fadc 	bl	80071dc <HAL_RCC_GetPCLK1Freq>
 8003c24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	4a81      	ldr	r2, [pc, #516]	; (8003e30 <HAL_I2C_Init+0x274>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d807      	bhi.n	8003c40 <HAL_I2C_Init+0x84>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4a80      	ldr	r2, [pc, #512]	; (8003e34 <HAL_I2C_Init+0x278>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	bf94      	ite	ls
 8003c38:	2301      	movls	r3, #1
 8003c3a:	2300      	movhi	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	e006      	b.n	8003c4e <HAL_I2C_Init+0x92>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4a7d      	ldr	r2, [pc, #500]	; (8003e38 <HAL_I2C_Init+0x27c>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	bf94      	ite	ls
 8003c48:	2301      	movls	r3, #1
 8003c4a:	2300      	movhi	r3, #0
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e0e7      	b.n	8003e26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4a78      	ldr	r2, [pc, #480]	; (8003e3c <HAL_I2C_Init+0x280>)
 8003c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5e:	0c9b      	lsrs	r3, r3, #18
 8003c60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	4a6a      	ldr	r2, [pc, #424]	; (8003e30 <HAL_I2C_Init+0x274>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d802      	bhi.n	8003c90 <HAL_I2C_Init+0xd4>
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	e009      	b.n	8003ca4 <HAL_I2C_Init+0xe8>
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c96:	fb02 f303 	mul.w	r3, r2, r3
 8003c9a:	4a69      	ldr	r2, [pc, #420]	; (8003e40 <HAL_I2C_Init+0x284>)
 8003c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca0:	099b      	lsrs	r3, r3, #6
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6812      	ldr	r2, [r2, #0]
 8003ca8:	430b      	orrs	r3, r1
 8003caa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003cb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	495c      	ldr	r1, [pc, #368]	; (8003e30 <HAL_I2C_Init+0x274>)
 8003cc0:	428b      	cmp	r3, r1
 8003cc2:	d819      	bhi.n	8003cf8 <HAL_I2C_Init+0x13c>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	1e59      	subs	r1, r3, #1
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cd2:	1c59      	adds	r1, r3, #1
 8003cd4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003cd8:	400b      	ands	r3, r1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <HAL_I2C_Init+0x138>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	1e59      	subs	r1, r3, #1
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cec:	3301      	adds	r3, #1
 8003cee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf2:	e051      	b.n	8003d98 <HAL_I2C_Init+0x1dc>
 8003cf4:	2304      	movs	r3, #4
 8003cf6:	e04f      	b.n	8003d98 <HAL_I2C_Init+0x1dc>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d111      	bne.n	8003d24 <HAL_I2C_Init+0x168>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	1e58      	subs	r0, r3, #1
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6859      	ldr	r1, [r3, #4]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	440b      	add	r3, r1
 8003d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d12:	3301      	adds	r3, #1
 8003d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	bf0c      	ite	eq
 8003d1c:	2301      	moveq	r3, #1
 8003d1e:	2300      	movne	r3, #0
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	e012      	b.n	8003d4a <HAL_I2C_Init+0x18e>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	1e58      	subs	r0, r3, #1
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6859      	ldr	r1, [r3, #4]
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	440b      	add	r3, r1
 8003d32:	0099      	lsls	r1, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	bf0c      	ite	eq
 8003d44:	2301      	moveq	r3, #1
 8003d46:	2300      	movne	r3, #0
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <HAL_I2C_Init+0x196>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e022      	b.n	8003d98 <HAL_I2C_Init+0x1dc>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10e      	bne.n	8003d78 <HAL_I2C_Init+0x1bc>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	1e58      	subs	r0, r3, #1
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6859      	ldr	r1, [r3, #4]
 8003d62:	460b      	mov	r3, r1
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	440b      	add	r3, r1
 8003d68:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d76:	e00f      	b.n	8003d98 <HAL_I2C_Init+0x1dc>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	1e58      	subs	r0, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6859      	ldr	r1, [r3, #4]
 8003d80:	460b      	mov	r3, r1
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	0099      	lsls	r1, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d8e:	3301      	adds	r3, #1
 8003d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d98:	6879      	ldr	r1, [r7, #4]
 8003d9a:	6809      	ldr	r1, [r1, #0]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69da      	ldr	r2, [r3, #28]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003dc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6911      	ldr	r1, [r2, #16]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	68d2      	ldr	r2, [r2, #12]
 8003dd2:	4311      	orrs	r1, r2
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6812      	ldr	r2, [r2, #0]
 8003dd8:	430b      	orrs	r3, r1
 8003dda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695a      	ldr	r2, [r3, #20]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0201 	orr.w	r2, r2, #1
 8003e06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	000186a0 	.word	0x000186a0
 8003e34:	001e847f 	.word	0x001e847f
 8003e38:	003d08ff 	.word	0x003d08ff
 8003e3c:	431bde83 	.word	0x431bde83
 8003e40:	10624dd3 	.word	0x10624dd3

08003e44 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b088      	sub	sp, #32
 8003e48:	af02      	add	r7, sp, #8
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	607a      	str	r2, [r7, #4]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	460b      	mov	r3, r1
 8003e52:	817b      	strh	r3, [r7, #10]
 8003e54:	4613      	mov	r3, r2
 8003e56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e58:	f7ff fbc0 	bl	80035dc <HAL_GetTick>
 8003e5c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b20      	cmp	r3, #32
 8003e68:	f040 80e0 	bne.w	800402c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	2319      	movs	r3, #25
 8003e72:	2201      	movs	r2, #1
 8003e74:	4970      	ldr	r1, [pc, #448]	; (8004038 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 fe50 	bl	8004b1c <I2C_WaitOnFlagUntilTimeout>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e82:	2302      	movs	r3, #2
 8003e84:	e0d3      	b.n	800402e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d101      	bne.n	8003e94 <HAL_I2C_Master_Transmit+0x50>
 8003e90:	2302      	movs	r3, #2
 8003e92:	e0cc      	b.n	800402e <HAL_I2C_Master_Transmit+0x1ea>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d007      	beq.n	8003eba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f042 0201 	orr.w	r2, r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ec8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2221      	movs	r2, #33	; 0x21
 8003ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2210      	movs	r2, #16
 8003ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	893a      	ldrh	r2, [r7, #8]
 8003eea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4a50      	ldr	r2, [pc, #320]	; (800403c <HAL_I2C_Master_Transmit+0x1f8>)
 8003efa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003efc:	8979      	ldrh	r1, [r7, #10]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	6a3a      	ldr	r2, [r7, #32]
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 fc0a 	bl	800471c <I2C_MasterRequestWrite>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e08d      	b.n	800402e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f12:	2300      	movs	r3, #0
 8003f14:	613b      	str	r3, [r7, #16]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	613b      	str	r3, [r7, #16]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	613b      	str	r3, [r7, #16]
 8003f26:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f28:	e066      	b.n	8003ff8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	6a39      	ldr	r1, [r7, #32]
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 ff0e 	bl	8004d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00d      	beq.n	8003f56 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d107      	bne.n	8003f52 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e06b      	b.n	800402e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	781a      	ldrb	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	1c5a      	adds	r2, r3, #1
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	d11b      	bne.n	8003fcc <HAL_I2C_Master_Transmit+0x188>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d017      	beq.n	8003fcc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	781a      	ldrb	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	6a39      	ldr	r1, [r7, #32]
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 ff05 	bl	8004de0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00d      	beq.n	8003ff8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	2b04      	cmp	r3, #4
 8003fe2:	d107      	bne.n	8003ff4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e01a      	b.n	800402e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d194      	bne.n	8003f2a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800400e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2220      	movs	r2, #32
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004028:	2300      	movs	r3, #0
 800402a:	e000      	b.n	800402e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800402c:	2302      	movs	r3, #2
  }
}
 800402e:	4618      	mov	r0, r3
 8004030:	3718      	adds	r7, #24
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	00100002 	.word	0x00100002
 800403c:	ffff0000 	.word	0xffff0000

08004040 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af02      	add	r7, sp, #8
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	4608      	mov	r0, r1
 800404a:	4611      	mov	r1, r2
 800404c:	461a      	mov	r2, r3
 800404e:	4603      	mov	r3, r0
 8004050:	817b      	strh	r3, [r7, #10]
 8004052:	460b      	mov	r3, r1
 8004054:	813b      	strh	r3, [r7, #8]
 8004056:	4613      	mov	r3, r2
 8004058:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800405a:	f7ff fabf 	bl	80035dc <HAL_GetTick>
 800405e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b20      	cmp	r3, #32
 800406a:	f040 80d9 	bne.w	8004220 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	2319      	movs	r3, #25
 8004074:	2201      	movs	r2, #1
 8004076:	496d      	ldr	r1, [pc, #436]	; (800422c <HAL_I2C_Mem_Write+0x1ec>)
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 fd4f 	bl	8004b1c <I2C_WaitOnFlagUntilTimeout>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004084:	2302      	movs	r3, #2
 8004086:	e0cc      	b.n	8004222 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800408e:	2b01      	cmp	r3, #1
 8004090:	d101      	bne.n	8004096 <HAL_I2C_Mem_Write+0x56>
 8004092:	2302      	movs	r3, #2
 8004094:	e0c5      	b.n	8004222 <HAL_I2C_Mem_Write+0x1e2>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d007      	beq.n	80040bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0201 	orr.w	r2, r2, #1
 80040ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2221      	movs	r2, #33	; 0x21
 80040d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2240      	movs	r2, #64	; 0x40
 80040d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6a3a      	ldr	r2, [r7, #32]
 80040e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4a4d      	ldr	r2, [pc, #308]	; (8004230 <HAL_I2C_Mem_Write+0x1f0>)
 80040fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040fe:	88f8      	ldrh	r0, [r7, #6]
 8004100:	893a      	ldrh	r2, [r7, #8]
 8004102:	8979      	ldrh	r1, [r7, #10]
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	9301      	str	r3, [sp, #4]
 8004108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	4603      	mov	r3, r0
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 fb86 	bl	8004820 <I2C_RequestMemoryWrite>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d052      	beq.n	80041c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e081      	b.n	8004222 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 fe14 	bl	8004d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00d      	beq.n	800414a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	2b04      	cmp	r3, #4
 8004134:	d107      	bne.n	8004146 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004144:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e06b      	b.n	8004222 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	781a      	ldrb	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	1c5a      	adds	r2, r3, #1
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004170:	b29b      	uxth	r3, r3
 8004172:	3b01      	subs	r3, #1
 8004174:	b29a      	uxth	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b04      	cmp	r3, #4
 8004186:	d11b      	bne.n	80041c0 <HAL_I2C_Mem_Write+0x180>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418c:	2b00      	cmp	r3, #0
 800418e:	d017      	beq.n	80041c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	781a      	ldrb	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1aa      	bne.n	800411e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 fe07 	bl	8004de0 <I2C_WaitOnBTFFlagUntilTimeout>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00d      	beq.n	80041f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041dc:	2b04      	cmp	r3, #4
 80041de:	d107      	bne.n	80041f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e016      	b.n	8004222 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004202:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2220      	movs	r2, #32
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800421c:	2300      	movs	r3, #0
 800421e:	e000      	b.n	8004222 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004220:	2302      	movs	r3, #2
  }
}
 8004222:	4618      	mov	r0, r3
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	00100002 	.word	0x00100002
 8004230:	ffff0000 	.word	0xffff0000

08004234 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b08c      	sub	sp, #48	; 0x30
 8004238:	af02      	add	r7, sp, #8
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	4608      	mov	r0, r1
 800423e:	4611      	mov	r1, r2
 8004240:	461a      	mov	r2, r3
 8004242:	4603      	mov	r3, r0
 8004244:	817b      	strh	r3, [r7, #10]
 8004246:	460b      	mov	r3, r1
 8004248:	813b      	strh	r3, [r7, #8]
 800424a:	4613      	mov	r3, r2
 800424c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800424e:	2300      	movs	r3, #0
 8004250:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004252:	f7ff f9c3 	bl	80035dc <HAL_GetTick>
 8004256:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b20      	cmp	r3, #32
 8004262:	f040 8250 	bne.w	8004706 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	2319      	movs	r3, #25
 800426c:	2201      	movs	r2, #1
 800426e:	4982      	ldr	r1, [pc, #520]	; (8004478 <HAL_I2C_Mem_Read+0x244>)
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 fc53 	bl	8004b1c <I2C_WaitOnFlagUntilTimeout>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800427c:	2302      	movs	r3, #2
 800427e:	e243      	b.n	8004708 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004286:	2b01      	cmp	r3, #1
 8004288:	d101      	bne.n	800428e <HAL_I2C_Mem_Read+0x5a>
 800428a:	2302      	movs	r3, #2
 800428c:	e23c      	b.n	8004708 <HAL_I2C_Mem_Read+0x4d4>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d007      	beq.n	80042b4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 0201 	orr.w	r2, r2, #1
 80042b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2222      	movs	r2, #34	; 0x22
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2240      	movs	r2, #64	; 0x40
 80042d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80042e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4a62      	ldr	r2, [pc, #392]	; (800447c <HAL_I2C_Mem_Read+0x248>)
 80042f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042f6:	88f8      	ldrh	r0, [r7, #6]
 80042f8:	893a      	ldrh	r2, [r7, #8]
 80042fa:	8979      	ldrh	r1, [r7, #10]
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	9301      	str	r3, [sp, #4]
 8004300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	4603      	mov	r3, r0
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 fb20 	bl	800494c <I2C_RequestMemoryRead>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e1f8      	b.n	8004708 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800431a:	2b00      	cmp	r3, #0
 800431c:	d113      	bne.n	8004346 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800431e:	2300      	movs	r3, #0
 8004320:	61fb      	str	r3, [r7, #28]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	61fb      	str	r3, [r7, #28]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	61fb      	str	r3, [r7, #28]
 8004332:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	e1cc      	b.n	80046e0 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800434a:	2b01      	cmp	r3, #1
 800434c:	d11e      	bne.n	800438c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800435c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800435e:	b672      	cpsid	i
}
 8004360:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004362:	2300      	movs	r3, #0
 8004364:	61bb      	str	r3, [r7, #24]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	61bb      	str	r3, [r7, #24]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	61bb      	str	r3, [r7, #24]
 8004376:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004386:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004388:	b662      	cpsie	i
}
 800438a:	e035      	b.n	80043f8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004390:	2b02      	cmp	r3, #2
 8004392:	d11e      	bne.n	80043d2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80043a4:	b672      	cpsid	i
}
 80043a6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80043ce:	b662      	cpsie	i
}
 80043d0:	e012      	b.n	80043f8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043e0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043e2:	2300      	movs	r3, #0
 80043e4:	613b      	str	r3, [r7, #16]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	613b      	str	r3, [r7, #16]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	613b      	str	r3, [r7, #16]
 80043f6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80043f8:	e172      	b.n	80046e0 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043fe:	2b03      	cmp	r3, #3
 8004400:	f200 811f 	bhi.w	8004642 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004408:	2b01      	cmp	r3, #1
 800440a:	d123      	bne.n	8004454 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800440c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800440e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 fd2d 	bl	8004e70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e173      	b.n	8004708 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	691a      	ldr	r2, [r3, #16]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	1c5a      	adds	r2, r3, #1
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800443c:	3b01      	subs	r3, #1
 800443e:	b29a      	uxth	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004448:	b29b      	uxth	r3, r3
 800444a:	3b01      	subs	r3, #1
 800444c:	b29a      	uxth	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004452:	e145      	b.n	80046e0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004458:	2b02      	cmp	r3, #2
 800445a:	d152      	bne.n	8004502 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004462:	2200      	movs	r2, #0
 8004464:	4906      	ldr	r1, [pc, #24]	; (8004480 <HAL_I2C_Mem_Read+0x24c>)
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f000 fb58 	bl	8004b1c <I2C_WaitOnFlagUntilTimeout>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d008      	beq.n	8004484 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e148      	b.n	8004708 <HAL_I2C_Mem_Read+0x4d4>
 8004476:	bf00      	nop
 8004478:	00100002 	.word	0x00100002
 800447c:	ffff0000 	.word	0xffff0000
 8004480:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004484:	b672      	cpsid	i
}
 8004486:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004496:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691a      	ldr	r2, [r3, #16]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	1c5a      	adds	r2, r3, #1
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80044ca:	b662      	cpsie	i
}
 80044cc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	691a      	ldr	r2, [r3, #16]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	1c5a      	adds	r2, r3, #1
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ea:	3b01      	subs	r3, #1
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004500:	e0ee      	b.n	80046e0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004508:	2200      	movs	r2, #0
 800450a:	4981      	ldr	r1, [pc, #516]	; (8004710 <HAL_I2C_Mem_Read+0x4dc>)
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 fb05 	bl	8004b1c <I2C_WaitOnFlagUntilTimeout>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e0f5      	b.n	8004708 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800452a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800452c:	b672      	cpsid	i
}
 800452e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691a      	ldr	r2, [r3, #16]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800454c:	3b01      	subs	r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004558:	b29b      	uxth	r3, r3
 800455a:	3b01      	subs	r3, #1
 800455c:	b29a      	uxth	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004562:	4b6c      	ldr	r3, [pc, #432]	; (8004714 <HAL_I2C_Mem_Read+0x4e0>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	08db      	lsrs	r3, r3, #3
 8004568:	4a6b      	ldr	r2, [pc, #428]	; (8004718 <HAL_I2C_Mem_Read+0x4e4>)
 800456a:	fba2 2303 	umull	r2, r3, r2, r3
 800456e:	0a1a      	lsrs	r2, r3, #8
 8004570:	4613      	mov	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	00da      	lsls	r2, r3, #3
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	3b01      	subs	r3, #1
 8004580:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d118      	bne.n	80045ba <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2220      	movs	r2, #32
 8004592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	f043 0220 	orr.w	r2, r3, #32
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80045aa:	b662      	cpsie	i
}
 80045ac:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e0a6      	b.n	8004708 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b04      	cmp	r3, #4
 80045c6:	d1d9      	bne.n	800457c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	691a      	ldr	r2, [r3, #16]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004600:	b29b      	uxth	r3, r3
 8004602:	3b01      	subs	r3, #1
 8004604:	b29a      	uxth	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800460a:	b662      	cpsie	i
}
 800460c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	b2d2      	uxtb	r2, r2
 800461a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800462a:	3b01      	subs	r3, #1
 800462c:	b29a      	uxth	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004636:	b29b      	uxth	r3, r3
 8004638:	3b01      	subs	r3, #1
 800463a:	b29a      	uxth	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004640:	e04e      	b.n	80046e0 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004644:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 fc12 	bl	8004e70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e058      	b.n	8004708 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691a      	ldr	r2, [r3, #16]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	b2d2      	uxtb	r2, r2
 8004662:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004672:	3b01      	subs	r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	f003 0304 	and.w	r3, r3, #4
 8004692:	2b04      	cmp	r3, #4
 8004694:	d124      	bne.n	80046e0 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800469a:	2b03      	cmp	r3, #3
 800469c:	d107      	bne.n	80046ae <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046ac:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	691a      	ldr	r2, [r3, #16]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	b2d2      	uxtb	r2, r2
 80046ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f47f ae88 	bne.w	80043fa <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	e000      	b.n	8004708 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8004706:	2302      	movs	r3, #2
  }
}
 8004708:	4618      	mov	r0, r3
 800470a:	3728      	adds	r7, #40	; 0x28
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	00010004 	.word	0x00010004
 8004714:	20000004 	.word	0x20000004
 8004718:	14f8b589 	.word	0x14f8b589

0800471c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b088      	sub	sp, #32
 8004720:	af02      	add	r7, sp, #8
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	607a      	str	r2, [r7, #4]
 8004726:	603b      	str	r3, [r7, #0]
 8004728:	460b      	mov	r3, r1
 800472a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004730:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	2b08      	cmp	r3, #8
 8004736:	d006      	beq.n	8004746 <I2C_MasterRequestWrite+0x2a>
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d003      	beq.n	8004746 <I2C_MasterRequestWrite+0x2a>
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004744:	d108      	bne.n	8004758 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	e00b      	b.n	8004770 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475c:	2b12      	cmp	r3, #18
 800475e:	d107      	bne.n	8004770 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800476e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 f9cd 	bl	8004b1c <I2C_WaitOnFlagUntilTimeout>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00d      	beq.n	80047a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004796:	d103      	bne.n	80047a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800479e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e035      	b.n	8004810 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047ac:	d108      	bne.n	80047c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047ae:	897b      	ldrh	r3, [r7, #10]
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	461a      	mov	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047bc:	611a      	str	r2, [r3, #16]
 80047be:	e01b      	b.n	80047f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80047c0:	897b      	ldrh	r3, [r7, #10]
 80047c2:	11db      	asrs	r3, r3, #7
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	f003 0306 	and.w	r3, r3, #6
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	f063 030f 	orn	r3, r3, #15
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	490e      	ldr	r1, [pc, #56]	; (8004818 <I2C_MasterRequestWrite+0xfc>)
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 fa16 	bl	8004c10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e010      	b.n	8004810 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80047ee:	897b      	ldrh	r3, [r7, #10]
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	4907      	ldr	r1, [pc, #28]	; (800481c <I2C_MasterRequestWrite+0x100>)
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 fa06 	bl	8004c10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e000      	b.n	8004810 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3718      	adds	r7, #24
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	00010008 	.word	0x00010008
 800481c:	00010002 	.word	0x00010002

08004820 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b088      	sub	sp, #32
 8004824:	af02      	add	r7, sp, #8
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	4608      	mov	r0, r1
 800482a:	4611      	mov	r1, r2
 800482c:	461a      	mov	r2, r3
 800482e:	4603      	mov	r3, r0
 8004830:	817b      	strh	r3, [r7, #10]
 8004832:	460b      	mov	r3, r1
 8004834:	813b      	strh	r3, [r7, #8]
 8004836:	4613      	mov	r3, r2
 8004838:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004848:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	2200      	movs	r2, #0
 8004852:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f000 f960 	bl	8004b1c <I2C_WaitOnFlagUntilTimeout>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00d      	beq.n	800487e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004870:	d103      	bne.n	800487a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004878:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e05f      	b.n	800493e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800487e:	897b      	ldrh	r3, [r7, #10]
 8004880:	b2db      	uxtb	r3, r3
 8004882:	461a      	mov	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800488c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	6a3a      	ldr	r2, [r7, #32]
 8004892:	492d      	ldr	r1, [pc, #180]	; (8004948 <I2C_RequestMemoryWrite+0x128>)
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f000 f9bb 	bl	8004c10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d001      	beq.n	80048a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e04c      	b.n	800493e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048a4:	2300      	movs	r3, #0
 80048a6:	617b      	str	r3, [r7, #20]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	617b      	str	r3, [r7, #20]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	617b      	str	r3, [r7, #20]
 80048b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048bc:	6a39      	ldr	r1, [r7, #32]
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 fa46 	bl	8004d50 <I2C_WaitOnTXEFlagUntilTimeout>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00d      	beq.n	80048e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d107      	bne.n	80048e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e02b      	b.n	800493e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048e6:	88fb      	ldrh	r3, [r7, #6]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d105      	bne.n	80048f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048ec:	893b      	ldrh	r3, [r7, #8]
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	611a      	str	r2, [r3, #16]
 80048f6:	e021      	b.n	800493c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80048f8:	893b      	ldrh	r3, [r7, #8]
 80048fa:	0a1b      	lsrs	r3, r3, #8
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004908:	6a39      	ldr	r1, [r7, #32]
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 fa20 	bl	8004d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00d      	beq.n	8004932 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	2b04      	cmp	r3, #4
 800491c:	d107      	bne.n	800492e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800492c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e005      	b.n	800493e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004932:	893b      	ldrh	r3, [r7, #8]
 8004934:	b2da      	uxtb	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	00010002 	.word	0x00010002

0800494c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b088      	sub	sp, #32
 8004950:	af02      	add	r7, sp, #8
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	4608      	mov	r0, r1
 8004956:	4611      	mov	r1, r2
 8004958:	461a      	mov	r2, r3
 800495a:	4603      	mov	r3, r0
 800495c:	817b      	strh	r3, [r7, #10]
 800495e:	460b      	mov	r3, r1
 8004960:	813b      	strh	r3, [r7, #8]
 8004962:	4613      	mov	r3, r2
 8004964:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004974:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004984:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	2200      	movs	r2, #0
 800498e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 f8c2 	bl	8004b1c <I2C_WaitOnFlagUntilTimeout>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00d      	beq.n	80049ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ac:	d103      	bne.n	80049b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e0aa      	b.n	8004b10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049ba:	897b      	ldrh	r3, [r7, #10]
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	461a      	mov	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	6a3a      	ldr	r2, [r7, #32]
 80049ce:	4952      	ldr	r1, [pc, #328]	; (8004b18 <I2C_RequestMemoryRead+0x1cc>)
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f000 f91d 	bl	8004c10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e097      	b.n	8004b10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049e0:	2300      	movs	r3, #0
 80049e2:	617b      	str	r3, [r7, #20]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	617b      	str	r3, [r7, #20]
 80049f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f8:	6a39      	ldr	r1, [r7, #32]
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 f9a8 	bl	8004d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00d      	beq.n	8004a22 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	d107      	bne.n	8004a1e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e076      	b.n	8004b10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a22:	88fb      	ldrh	r3, [r7, #6]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d105      	bne.n	8004a34 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a28:	893b      	ldrh	r3, [r7, #8]
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	611a      	str	r2, [r3, #16]
 8004a32:	e021      	b.n	8004a78 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a34:	893b      	ldrh	r3, [r7, #8]
 8004a36:	0a1b      	lsrs	r3, r3, #8
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a44:	6a39      	ldr	r1, [r7, #32]
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f000 f982 	bl	8004d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00d      	beq.n	8004a6e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d107      	bne.n	8004a6a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e050      	b.n	8004b10 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a6e:	893b      	ldrh	r3, [r7, #8]
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a7a:	6a39      	ldr	r1, [r7, #32]
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 f967 	bl	8004d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00d      	beq.n	8004aa4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	d107      	bne.n	8004aa0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a9e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e035      	b.n	8004b10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ab2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 f82b 	bl	8004b1c <I2C_WaitOnFlagUntilTimeout>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00d      	beq.n	8004ae8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ada:	d103      	bne.n	8004ae4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ae2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e013      	b.n	8004b10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ae8:	897b      	ldrh	r3, [r7, #10]
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	f043 0301 	orr.w	r3, r3, #1
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	6a3a      	ldr	r2, [r7, #32]
 8004afc:	4906      	ldr	r1, [pc, #24]	; (8004b18 <I2C_RequestMemoryRead+0x1cc>)
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f000 f886 	bl	8004c10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e000      	b.n	8004b10 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	00010002 	.word	0x00010002

08004b1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	603b      	str	r3, [r7, #0]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b2c:	e048      	b.n	8004bc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b34:	d044      	beq.n	8004bc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b36:	f7fe fd51 	bl	80035dc <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d302      	bcc.n	8004b4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d139      	bne.n	8004bc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	0c1b      	lsrs	r3, r3, #16
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d10d      	bne.n	8004b72 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	43da      	mvns	r2, r3
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	4013      	ands	r3, r2
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	bf0c      	ite	eq
 8004b68:	2301      	moveq	r3, #1
 8004b6a:	2300      	movne	r3, #0
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	461a      	mov	r2, r3
 8004b70:	e00c      	b.n	8004b8c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	43da      	mvns	r2, r3
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	bf0c      	ite	eq
 8004b84:	2301      	moveq	r3, #1
 8004b86:	2300      	movne	r3, #0
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	79fb      	ldrb	r3, [r7, #7]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d116      	bne.n	8004bc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bac:	f043 0220 	orr.w	r2, r3, #32
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e023      	b.n	8004c08 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	0c1b      	lsrs	r3, r3, #16
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d10d      	bne.n	8004be6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	43da      	mvns	r2, r3
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	bf0c      	ite	eq
 8004bdc:	2301      	moveq	r3, #1
 8004bde:	2300      	movne	r3, #0
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	461a      	mov	r2, r3
 8004be4:	e00c      	b.n	8004c00 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	43da      	mvns	r2, r3
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	bf0c      	ite	eq
 8004bf8:	2301      	moveq	r3, #1
 8004bfa:	2300      	movne	r3, #0
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	461a      	mov	r2, r3
 8004c00:	79fb      	ldrb	r3, [r7, #7]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d093      	beq.n	8004b2e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
 8004c1c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c1e:	e071      	b.n	8004d04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c2e:	d123      	bne.n	8004c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c3e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c64:	f043 0204 	orr.w	r2, r3, #4
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e067      	b.n	8004d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7e:	d041      	beq.n	8004d04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c80:	f7fe fcac 	bl	80035dc <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d302      	bcc.n	8004c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d136      	bne.n	8004d04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	0c1b      	lsrs	r3, r3, #16
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d10c      	bne.n	8004cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	43da      	mvns	r2, r3
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	4013      	ands	r3, r2
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	bf14      	ite	ne
 8004cb2:	2301      	movne	r3, #1
 8004cb4:	2300      	moveq	r3, #0
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	e00b      	b.n	8004cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	43da      	mvns	r2, r3
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	bf14      	ite	ne
 8004ccc:	2301      	movne	r3, #1
 8004cce:	2300      	moveq	r3, #0
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d016      	beq.n	8004d04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf0:	f043 0220 	orr.w	r2, r3, #32
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e021      	b.n	8004d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	0c1b      	lsrs	r3, r3, #16
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d10c      	bne.n	8004d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	43da      	mvns	r2, r3
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	4013      	ands	r3, r2
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	bf14      	ite	ne
 8004d20:	2301      	movne	r3, #1
 8004d22:	2300      	moveq	r3, #0
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	e00b      	b.n	8004d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	43da      	mvns	r2, r3
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	4013      	ands	r3, r2
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	bf14      	ite	ne
 8004d3a:	2301      	movne	r3, #1
 8004d3c:	2300      	moveq	r3, #0
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f47f af6d 	bne.w	8004c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d5c:	e034      	b.n	8004dc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 f8e3 	bl	8004f2a <I2C_IsAcknowledgeFailed>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e034      	b.n	8004dd8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d74:	d028      	beq.n	8004dc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d76:	f7fe fc31 	bl	80035dc <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d302      	bcc.n	8004d8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d11d      	bne.n	8004dc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d96:	2b80      	cmp	r3, #128	; 0x80
 8004d98:	d016      	beq.n	8004dc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2220      	movs	r2, #32
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db4:	f043 0220 	orr.w	r2, r3, #32
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e007      	b.n	8004dd8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd2:	2b80      	cmp	r3, #128	; 0x80
 8004dd4:	d1c3      	bne.n	8004d5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004dec:	e034      	b.n	8004e58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f000 f89b 	bl	8004f2a <I2C_IsAcknowledgeFailed>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e034      	b.n	8004e68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e04:	d028      	beq.n	8004e58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e06:	f7fe fbe9 	bl	80035dc <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d302      	bcc.n	8004e1c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d11d      	bne.n	8004e58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	f003 0304 	and.w	r3, r3, #4
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	d016      	beq.n	8004e58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2220      	movs	r2, #32
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e44:	f043 0220 	orr.w	r2, r3, #32
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e007      	b.n	8004e68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	f003 0304 	and.w	r3, r3, #4
 8004e62:	2b04      	cmp	r3, #4
 8004e64:	d1c3      	bne.n	8004dee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e7c:	e049      	b.n	8004f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	f003 0310 	and.w	r3, r3, #16
 8004e88:	2b10      	cmp	r3, #16
 8004e8a:	d119      	bne.n	8004ec0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f06f 0210 	mvn.w	r2, #16
 8004e94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e030      	b.n	8004f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec0:	f7fe fb8c 	bl	80035dc <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d302      	bcc.n	8004ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d11d      	bne.n	8004f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee0:	2b40      	cmp	r3, #64	; 0x40
 8004ee2:	d016      	beq.n	8004f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2220      	movs	r2, #32
 8004eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	f043 0220 	orr.w	r2, r3, #32
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e007      	b.n	8004f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1c:	2b40      	cmp	r3, #64	; 0x40
 8004f1e:	d1ae      	bne.n	8004e7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	b083      	sub	sp, #12
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f40:	d11b      	bne.n	8004f7a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f4a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2220      	movs	r2, #32
 8004f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	f043 0204 	orr.w	r2, r3, #4
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e000      	b.n	8004f7c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bc80      	pop	{r7}
 8004f84:	4770      	bx	lr

08004f86 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b084      	sub	sp, #16
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e0e8      	b.n	800516a <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d106      	bne.n	8004fb2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f006 feef 	bl	800bd90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2203      	movs	r2, #3
 8004fb6:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f003 f8ca 	bl	800815e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6818      	ldr	r0, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fd4:	f003 f8a0 	bl	8008118 <USB_CoreInit>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d005      	beq.n	8004fea <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2202      	movs	r2, #2
 8004fe2:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e0bf      	b.n	800516a <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2100      	movs	r1, #0
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f003 f8ce 	bl	8008192 <USB_SetCurrentMode>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d005      	beq.n	8005008 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e0b0      	b.n	800516a <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005008:	2300      	movs	r3, #0
 800500a:	73fb      	strb	r3, [r7, #15]
 800500c:	e03e      	b.n	800508c <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800500e:	7bfa      	ldrb	r2, [r7, #15]
 8005010:	6879      	ldr	r1, [r7, #4]
 8005012:	4613      	mov	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	00db      	lsls	r3, r3, #3
 800501a:	440b      	add	r3, r1
 800501c:	3311      	adds	r3, #17
 800501e:	2201      	movs	r2, #1
 8005020:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005022:	7bfa      	ldrb	r2, [r7, #15]
 8005024:	6879      	ldr	r1, [r7, #4]
 8005026:	4613      	mov	r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4413      	add	r3, r2
 800502c:	00db      	lsls	r3, r3, #3
 800502e:	440b      	add	r3, r1
 8005030:	3310      	adds	r3, #16
 8005032:	7bfa      	ldrb	r2, [r7, #15]
 8005034:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005036:	7bfa      	ldrb	r2, [r7, #15]
 8005038:	6879      	ldr	r1, [r7, #4]
 800503a:	4613      	mov	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	440b      	add	r3, r1
 8005044:	3313      	adds	r3, #19
 8005046:	2200      	movs	r2, #0
 8005048:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800504a:	7bfa      	ldrb	r2, [r7, #15]
 800504c:	6879      	ldr	r1, [r7, #4]
 800504e:	4613      	mov	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	00db      	lsls	r3, r3, #3
 8005056:	440b      	add	r3, r1
 8005058:	3320      	adds	r3, #32
 800505a:	2200      	movs	r2, #0
 800505c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800505e:	7bfa      	ldrb	r2, [r7, #15]
 8005060:	6879      	ldr	r1, [r7, #4]
 8005062:	4613      	mov	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4413      	add	r3, r2
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	440b      	add	r3, r1
 800506c:	3324      	adds	r3, #36	; 0x24
 800506e:	2200      	movs	r2, #0
 8005070:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005072:	7bfb      	ldrb	r3, [r7, #15]
 8005074:	6879      	ldr	r1, [r7, #4]
 8005076:	1c5a      	adds	r2, r3, #1
 8005078:	4613      	mov	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	440b      	add	r3, r1
 8005082:	2200      	movs	r2, #0
 8005084:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005086:	7bfb      	ldrb	r3, [r7, #15]
 8005088:	3301      	adds	r3, #1
 800508a:	73fb      	strb	r3, [r7, #15]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	791b      	ldrb	r3, [r3, #4]
 8005090:	7bfa      	ldrb	r2, [r7, #15]
 8005092:	429a      	cmp	r2, r3
 8005094:	d3bb      	bcc.n	800500e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005096:	2300      	movs	r3, #0
 8005098:	73fb      	strb	r3, [r7, #15]
 800509a:	e044      	b.n	8005126 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800509c:	7bfa      	ldrb	r2, [r7, #15]
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	4613      	mov	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	00db      	lsls	r3, r3, #3
 80050a8:	440b      	add	r3, r1
 80050aa:	f203 1351 	addw	r3, r3, #337	; 0x151
 80050ae:	2200      	movs	r2, #0
 80050b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80050b2:	7bfa      	ldrb	r2, [r7, #15]
 80050b4:	6879      	ldr	r1, [r7, #4]
 80050b6:	4613      	mov	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	440b      	add	r3, r1
 80050c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80050c4:	7bfa      	ldrb	r2, [r7, #15]
 80050c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80050c8:	7bfa      	ldrb	r2, [r7, #15]
 80050ca:	6879      	ldr	r1, [r7, #4]
 80050cc:	4613      	mov	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	440b      	add	r3, r1
 80050d6:	f203 1353 	addw	r3, r3, #339	; 0x153
 80050da:	2200      	movs	r2, #0
 80050dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80050de:	7bfa      	ldrb	r2, [r7, #15]
 80050e0:	6879      	ldr	r1, [r7, #4]
 80050e2:	4613      	mov	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	440b      	add	r3, r1
 80050ec:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80050f0:	2200      	movs	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80050f4:	7bfa      	ldrb	r2, [r7, #15]
 80050f6:	6879      	ldr	r1, [r7, #4]
 80050f8:	4613      	mov	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	440b      	add	r3, r1
 8005102:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005106:	2200      	movs	r2, #0
 8005108:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800510a:	7bfa      	ldrb	r2, [r7, #15]
 800510c:	6879      	ldr	r1, [r7, #4]
 800510e:	4613      	mov	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	00db      	lsls	r3, r3, #3
 8005116:	440b      	add	r3, r1
 8005118:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800511c:	2200      	movs	r2, #0
 800511e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005120:	7bfb      	ldrb	r3, [r7, #15]
 8005122:	3301      	adds	r3, #1
 8005124:	73fb      	strb	r3, [r7, #15]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	791b      	ldrb	r3, [r3, #4]
 800512a:	7bfa      	ldrb	r2, [r7, #15]
 800512c:	429a      	cmp	r2, r3
 800512e:	d3b5      	bcc.n	800509c <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6818      	ldr	r0, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3304      	adds	r3, #4
 8005138:	cb0e      	ldmia	r3, {r1, r2, r3}
 800513a:	f003 f836 	bl	80081aa <USB_DevInit>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d005      	beq.n	8005150 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e00c      	b.n	800516a <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f005 f850 	bl	800a208 <USB_DevDisconnect>

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b082      	sub	sp, #8
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8005180:	2b01      	cmp	r3, #1
 8005182:	d101      	bne.n	8005188 <HAL_PCD_Start+0x16>
 8005184:	2302      	movs	r3, #2
 8005186:	e016      	b.n	80051b6 <HAL_PCD_Start+0x44>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4618      	mov	r0, r3
 8005196:	f002 ffcc 	bl	8008132 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800519a:	2101      	movs	r1, #1
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f007 f86a 	bl	800c276 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f005 f824 	bl	800a1f4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b088      	sub	sp, #32
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f005 f826 	bl	800a21c <USB_ReadInterrupts>
 80051d0:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d003      	beq.n	80051e4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 fb1c 	bl	800581a <PCD_EP_ISR_Handler>

    return;
 80051e2:	e11b      	b.n	800541c <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d013      	beq.n	8005216 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005200:	b292      	uxth	r2, r2
 8005202:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f006 fe3d 	bl	800be86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800520c:	2100      	movs	r1, #0
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f907 	bl	8005422 <HAL_PCD_SetAddress>

    return;
 8005214:	e102      	b.n	800541c <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00c      	beq.n	800523a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005228:	b29a      	uxth	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005232:	b292      	uxth	r2, r2
 8005234:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005238:	e0f0      	b.n	800541c <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00c      	beq.n	800525e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800524c:	b29a      	uxth	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005256:	b292      	uxth	r2, r2
 8005258:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800525c:	e0de      	b.n	800541c <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d027      	beq.n	80052b8 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005270:	b29a      	uxth	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 0204 	bic.w	r2, r2, #4
 800527a:	b292      	uxth	r2, r2
 800527c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005288:	b29a      	uxth	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 0208 	bic.w	r2, r2, #8
 8005292:	b292      	uxth	r2, r2
 8005294:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f006 fe2d 	bl	800bef8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052b0:	b292      	uxth	r2, r2
 80052b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80052b6:	e0b1      	b.n	800541c <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 8085 	beq.w	80053ce <HAL_PCD_IRQHandler+0x210>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80052c4:	2300      	movs	r3, #0
 80052c6:	77fb      	strb	r3, [r7, #31]
 80052c8:	e011      	b.n	80052ee <HAL_PCD_IRQHandler+0x130>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	461a      	mov	r2, r3
 80052d0:	7ffb      	ldrb	r3, [r7, #31]
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	441a      	add	r2, r3
 80052d6:	7ffb      	ldrb	r3, [r7, #31]
 80052d8:	8812      	ldrh	r2, [r2, #0]
 80052da:	b292      	uxth	r2, r2
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	f107 0120 	add.w	r1, r7, #32
 80052e2:	440b      	add	r3, r1
 80052e4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80052e8:	7ffb      	ldrb	r3, [r7, #31]
 80052ea:	3301      	adds	r3, #1
 80052ec:	77fb      	strb	r3, [r7, #31]
 80052ee:	7ffb      	ldrb	r3, [r7, #31]
 80052f0:	2b07      	cmp	r3, #7
 80052f2:	d9ea      	bls.n	80052ca <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0201 	orr.w	r2, r2, #1
 8005306:	b292      	uxth	r2, r2
 8005308:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005314:	b29a      	uxth	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 0201 	bic.w	r2, r2, #1
 800531e:	b292      	uxth	r2, r2
 8005320:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8005324:	bf00      	nop
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800532e:	b29b      	uxth	r3, r3
 8005330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005334:	2b00      	cmp	r3, #0
 8005336:	d0f6      	beq.n	8005326 <HAL_PCD_IRQHandler+0x168>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005340:	b29a      	uxth	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800534a:	b292      	uxth	r2, r2
 800534c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005350:	2300      	movs	r3, #0
 8005352:	77fb      	strb	r3, [r7, #31]
 8005354:	e010      	b.n	8005378 <HAL_PCD_IRQHandler+0x1ba>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8005356:	7ffb      	ldrb	r3, [r7, #31]
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6812      	ldr	r2, [r2, #0]
 800535c:	4611      	mov	r1, r2
 800535e:	7ffa      	ldrb	r2, [r7, #31]
 8005360:	0092      	lsls	r2, r2, #2
 8005362:	440a      	add	r2, r1
 8005364:	005b      	lsls	r3, r3, #1
 8005366:	f107 0120 	add.w	r1, r7, #32
 800536a:	440b      	add	r3, r1
 800536c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005370:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8005372:	7ffb      	ldrb	r3, [r7, #31]
 8005374:	3301      	adds	r3, #1
 8005376:	77fb      	strb	r3, [r7, #31]
 8005378:	7ffb      	ldrb	r3, [r7, #31]
 800537a:	2b07      	cmp	r3, #7
 800537c:	d9eb      	bls.n	8005356 <HAL_PCD_IRQHandler+0x198>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005386:	b29a      	uxth	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f042 0208 	orr.w	r2, r2, #8
 8005390:	b292      	uxth	r2, r2
 8005392:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800539e:	b29a      	uxth	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053a8:	b292      	uxth	r2, r2
 80053aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f042 0204 	orr.w	r2, r2, #4
 80053c0:	b292      	uxth	r2, r2
 80053c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f006 fd7c 	bl	800bec4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80053cc:	e026      	b.n	800541c <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00f      	beq.n	80053f8 <HAL_PCD_IRQHandler+0x23a>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80053ea:	b292      	uxth	r2, r2
 80053ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f006 fd3a 	bl	800be6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80053f6:	e011      	b.n	800541c <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00c      	beq.n	800541c <HAL_PCD_IRQHandler+0x25e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800540a:	b29a      	uxth	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005414:	b292      	uxth	r2, r2
 8005416:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800541a:	bf00      	nop
  }
}
 800541c:	3720      	adds	r7, #32
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b082      	sub	sp, #8
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
 800542a:	460b      	mov	r3, r1
 800542c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <HAL_PCD_SetAddress+0x1a>
 8005438:	2302      	movs	r3, #2
 800543a:	e012      	b.n	8005462 <HAL_PCD_SetAddress+0x40>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	78fa      	ldrb	r2, [r7, #3]
 8005448:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	78fa      	ldrb	r2, [r7, #3]
 8005450:	4611      	mov	r1, r2
 8005452:	4618      	mov	r0, r3
 8005454:	f004 febb 	bl	800a1ce <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b084      	sub	sp, #16
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
 8005472:	4608      	mov	r0, r1
 8005474:	4611      	mov	r1, r2
 8005476:	461a      	mov	r2, r3
 8005478:	4603      	mov	r3, r0
 800547a:	70fb      	strb	r3, [r7, #3]
 800547c:	460b      	mov	r3, r1
 800547e:	803b      	strh	r3, [r7, #0]
 8005480:	4613      	mov	r3, r2
 8005482:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005488:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800548c:	2b00      	cmp	r3, #0
 800548e:	da0e      	bge.n	80054ae <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005490:	78fb      	ldrb	r3, [r7, #3]
 8005492:	f003 0207 	and.w	r2, r3, #7
 8005496:	4613      	mov	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4413      	add	r3, r2
 800549c:	00db      	lsls	r3, r3, #3
 800549e:	3310      	adds	r3, #16
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	4413      	add	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2201      	movs	r2, #1
 80054aa:	705a      	strb	r2, [r3, #1]
 80054ac:	e00e      	b.n	80054cc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054ae:	78fb      	ldrb	r3, [r7, #3]
 80054b0:	f003 0207 	and.w	r2, r3, #7
 80054b4:	4613      	mov	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	4413      	add	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80054cc:	78fb      	ldrb	r3, [r7, #3]
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80054d8:	883a      	ldrh	r2, [r7, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	78ba      	ldrb	r2, [r7, #2]
 80054e2:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80054e4:	78bb      	ldrb	r3, [r7, #2]
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d102      	bne.n	80054f0 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d101      	bne.n	80054fe <HAL_PCD_EP_Open+0x94>
 80054fa:	2302      	movs	r3, #2
 80054fc:	e00e      	b.n	800551c <HAL_PCD_EP_Open+0xb2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68f9      	ldr	r1, [r7, #12]
 800550c:	4618      	mov	r0, r3
 800550e:	f002 fe69 	bl	80081e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800551a:	7afb      	ldrb	r3, [r7, #11]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	460b      	mov	r3, r1
 800552e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005530:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005534:	2b00      	cmp	r3, #0
 8005536:	da0e      	bge.n	8005556 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005538:	78fb      	ldrb	r3, [r7, #3]
 800553a:	f003 0207 	and.w	r2, r3, #7
 800553e:	4613      	mov	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	00db      	lsls	r3, r3, #3
 8005546:	3310      	adds	r3, #16
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	4413      	add	r3, r2
 800554c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2201      	movs	r2, #1
 8005552:	705a      	strb	r2, [r3, #1]
 8005554:	e00e      	b.n	8005574 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005556:	78fb      	ldrb	r3, [r7, #3]
 8005558:	f003 0207 	and.w	r2, r3, #7
 800555c:	4613      	mov	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	4413      	add	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005574:	78fb      	ldrb	r3, [r7, #3]
 8005576:	f003 0307 	and.w	r3, r3, #7
 800557a:	b2da      	uxtb	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8005586:	2b01      	cmp	r3, #1
 8005588:	d101      	bne.n	800558e <HAL_PCD_EP_Close+0x6a>
 800558a:	2302      	movs	r3, #2
 800558c:	e00e      	b.n	80055ac <HAL_PCD_EP_Close+0x88>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68f9      	ldr	r1, [r7, #12]
 800559c:	4618      	mov	r0, r3
 800559e:	f003 f9e1 	bl	8008964 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3710      	adds	r7, #16
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	607a      	str	r2, [r7, #4]
 80055be:	603b      	str	r3, [r7, #0]
 80055c0:	460b      	mov	r3, r1
 80055c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055c4:	7afb      	ldrb	r3, [r7, #11]
 80055c6:	f003 0207 	and.w	r2, r3, #7
 80055ca:	4613      	mov	r3, r2
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4413      	add	r3, r2
 80055d0:	00db      	lsls	r3, r3, #3
 80055d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	4413      	add	r3, r2
 80055da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	2200      	movs	r2, #0
 80055ec:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	2200      	movs	r2, #0
 80055f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055f4:	7afb      	ldrb	r3, [r7, #11]
 80055f6:	f003 0307 	and.w	r3, r3, #7
 80055fa:	b2da      	uxtb	r2, r3
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6979      	ldr	r1, [r7, #20]
 8005606:	4618      	mov	r0, r3
 8005608:	f003 fb98 	bl	8008d3c <USB_EPStartXfer>

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3718      	adds	r7, #24
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005616:	b480      	push	{r7}
 8005618:	b083      	sub	sp, #12
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
 800561e:	460b      	mov	r3, r1
 8005620:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005622:	78fb      	ldrb	r3, [r7, #3]
 8005624:	f003 0207 	and.w	r2, r3, #7
 8005628:	6879      	ldr	r1, [r7, #4]
 800562a:	4613      	mov	r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4413      	add	r3, r2
 8005630:	00db      	lsls	r3, r3, #3
 8005632:	440b      	add	r3, r1
 8005634:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8005638:	681b      	ldr	r3, [r3, #0]
}
 800563a:	4618      	mov	r0, r3
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	bc80      	pop	{r7}
 8005642:	4770      	bx	lr

08005644 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	607a      	str	r2, [r7, #4]
 800564e:	603b      	str	r3, [r7, #0]
 8005650:	460b      	mov	r3, r1
 8005652:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005654:	7afb      	ldrb	r3, [r7, #11]
 8005656:	f003 0207 	and.w	r2, r3, #7
 800565a:	4613      	mov	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4413      	add	r3, r2
 8005660:	00db      	lsls	r3, r3, #3
 8005662:	3310      	adds	r3, #16
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4413      	add	r3, r2
 8005668:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	683a      	ldr	r2, [r7, #0]
 8005674:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	683a      	ldr	r2, [r7, #0]
 8005682:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	2200      	movs	r2, #0
 8005688:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2201      	movs	r2, #1
 800568e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005690:	7afb      	ldrb	r3, [r7, #11]
 8005692:	f003 0307 	and.w	r3, r3, #7
 8005696:	b2da      	uxtb	r2, r3
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6979      	ldr	r1, [r7, #20]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f003 fb4a 	bl	8008d3c <USB_EPStartXfer>

  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b084      	sub	sp, #16
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
 80056ba:	460b      	mov	r3, r1
 80056bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80056be:	78fb      	ldrb	r3, [r7, #3]
 80056c0:	f003 0307 	and.w	r3, r3, #7
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	7912      	ldrb	r2, [r2, #4]
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d901      	bls.n	80056d0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e04c      	b.n	800576a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80056d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	da0e      	bge.n	80056f6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056d8:	78fb      	ldrb	r3, [r7, #3]
 80056da:	f003 0207 	and.w	r2, r3, #7
 80056de:	4613      	mov	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	4413      	add	r3, r2
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	3310      	adds	r3, #16
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	4413      	add	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2201      	movs	r2, #1
 80056f2:	705a      	strb	r2, [r3, #1]
 80056f4:	e00c      	b.n	8005710 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80056f6:	78fa      	ldrb	r2, [r7, #3]
 80056f8:	4613      	mov	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	00db      	lsls	r3, r3, #3
 8005700:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	4413      	add	r3, r2
 8005708:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2201      	movs	r2, #1
 8005714:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005716:	78fb      	ldrb	r3, [r7, #3]
 8005718:	f003 0307 	and.w	r3, r3, #7
 800571c:	b2da      	uxtb	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8005728:	2b01      	cmp	r3, #1
 800572a:	d101      	bne.n	8005730 <HAL_PCD_EP_SetStall+0x7e>
 800572c:	2302      	movs	r3, #2
 800572e:	e01c      	b.n	800576a <HAL_PCD_EP_SetStall+0xb8>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68f9      	ldr	r1, [r7, #12]
 800573e:	4618      	mov	r0, r3
 8005740:	f004 fc48 	bl	8009fd4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005744:	78fb      	ldrb	r3, [r7, #3]
 8005746:	f003 0307 	and.w	r3, r3, #7
 800574a:	2b00      	cmp	r3, #0
 800574c:	d108      	bne.n	8005760 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8005758:	4619      	mov	r1, r3
 800575a:	4610      	mov	r0, r2
 800575c:	f004 fd6d 	bl	800a23a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b084      	sub	sp, #16
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	460b      	mov	r3, r1
 800577c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800577e:	78fb      	ldrb	r3, [r7, #3]
 8005780:	f003 030f 	and.w	r3, r3, #15
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	7912      	ldrb	r2, [r2, #4]
 8005788:	4293      	cmp	r3, r2
 800578a:	d901      	bls.n	8005790 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e040      	b.n	8005812 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005790:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005794:	2b00      	cmp	r3, #0
 8005796:	da0e      	bge.n	80057b6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005798:	78fb      	ldrb	r3, [r7, #3]
 800579a:	f003 0207 	and.w	r2, r3, #7
 800579e:	4613      	mov	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	00db      	lsls	r3, r3, #3
 80057a6:	3310      	adds	r3, #16
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	4413      	add	r3, r2
 80057ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2201      	movs	r2, #1
 80057b2:	705a      	strb	r2, [r3, #1]
 80057b4:	e00e      	b.n	80057d4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057b6:	78fb      	ldrb	r3, [r7, #3]
 80057b8:	f003 0207 	and.w	r2, r3, #7
 80057bc:	4613      	mov	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	4413      	add	r3, r2
 80057cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057da:	78fb      	ldrb	r3, [r7, #3]
 80057dc:	f003 0307 	and.w	r3, r3, #7
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d101      	bne.n	80057f4 <HAL_PCD_EP_ClrStall+0x82>
 80057f0:	2302      	movs	r3, #2
 80057f2:	e00e      	b.n	8005812 <HAL_PCD_EP_ClrStall+0xa0>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68f9      	ldr	r1, [r7, #12]
 8005802:	4618      	mov	r0, r3
 8005804:	f004 fc36 	bl	800a074 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b096      	sub	sp, #88	; 0x58
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005822:	e3bc      	b.n	8005f9e <PCD_EP_ISR_Handler+0x784>
  {
    wIstr = hpcd->Instance->ISTR;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800582c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005830:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005834:	b2db      	uxtb	r3, r3
 8005836:	f003 030f 	and.w	r3, r3, #15
 800583a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800583e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005842:	2b00      	cmp	r3, #0
 8005844:	f040 8176 	bne.w	8005b34 <PCD_EP_ISR_Handler+0x31a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005848:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800584c:	f003 0310 	and.w	r3, r3, #16
 8005850:	2b00      	cmp	r3, #0
 8005852:	d14f      	bne.n	80058f4 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	b29b      	uxth	r3, r3
 800585c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005864:	81fb      	strh	r3, [r7, #14]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	89fb      	ldrh	r3, [r7, #14]
 800586c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005870:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005874:	b29b      	uxth	r3, r3
 8005876:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	3310      	adds	r3, #16
 800587c:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005886:	b29b      	uxth	r3, r3
 8005888:	461a      	mov	r2, r3
 800588a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	00db      	lsls	r3, r3, #3
 8005890:	4413      	add	r3, r2
 8005892:	3302      	adds	r3, #2
 8005894:	005b      	lsls	r3, r3, #1
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	6812      	ldr	r2, [r2, #0]
 800589a:	4413      	add	r3, r2
 800589c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058a0:	881b      	ldrh	r3, [r3, #0]
 80058a2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80058a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058a8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80058aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058ac:	695a      	ldr	r2, [r3, #20]
 80058ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	441a      	add	r2, r3
 80058b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058b6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80058b8:	2100      	movs	r1, #0
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f006 fabb 	bl	800be36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	7b5b      	ldrb	r3, [r3, #13]
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f000 8369 	beq.w	8005f9e <PCD_EP_ISR_Handler+0x784>
 80058cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f040 8364 	bne.w	8005f9e <PCD_EP_ISR_Handler+0x784>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	7b5b      	ldrb	r3, [r3, #13]
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	b292      	uxth	r2, r2
 80058e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	735a      	strb	r2, [r3, #13]
 80058f2:	e354      	b.n	8005f9e <PCD_EP_ISR_Handler+0x784>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80058fa:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005906:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800590a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800590e:	2b00      	cmp	r3, #0
 8005910:	d034      	beq.n	800597c <PCD_EP_ISR_Handler+0x162>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800591a:	b29b      	uxth	r3, r3
 800591c:	461a      	mov	r2, r3
 800591e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	4413      	add	r3, r2
 8005926:	3306      	adds	r3, #6
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	6812      	ldr	r2, [r2, #0]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800593a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800593c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6818      	ldr	r0, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8005948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800594a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800594c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800594e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005950:	b29b      	uxth	r3, r3
 8005952:	f004 fcc2 	bl	800a2da <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	881b      	ldrh	r3, [r3, #0]
 800595c:	b29a      	uxth	r2, r3
 800595e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005962:	4013      	ands	r3, r2
 8005964:	823b      	strh	r3, [r7, #16]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	8a3a      	ldrh	r2, [r7, #16]
 800596c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005970:	b292      	uxth	r2, r2
 8005972:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f006 fa31 	bl	800bddc <HAL_PCD_SetupStageCallback>
 800597a:	e310      	b.n	8005f9e <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800597c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8005980:	2b00      	cmp	r3, #0
 8005982:	f280 830c 	bge.w	8005f9e <PCD_EP_ISR_Handler+0x784>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	881b      	ldrh	r3, [r3, #0]
 800598c:	b29a      	uxth	r2, r3
 800598e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005992:	4013      	ands	r3, r2
 8005994:	83fb      	strh	r3, [r7, #30]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	8bfa      	ldrh	r2, [r7, #30]
 800599c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80059a0:	b292      	uxth	r2, r2
 80059a2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	461a      	mov	r2, r3
 80059b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	00db      	lsls	r3, r3, #3
 80059b6:	4413      	add	r3, r2
 80059b8:	3306      	adds	r3, #6
 80059ba:	005b      	lsls	r3, r3, #1
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6812      	ldr	r2, [r2, #0]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80059cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059ce:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80059d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059d2:	69db      	ldr	r3, [r3, #28]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d019      	beq.n	8005a0c <PCD_EP_ISR_Handler+0x1f2>
 80059d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d015      	beq.n	8005a0c <PCD_EP_ISR_Handler+0x1f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6818      	ldr	r0, [r3, #0]
 80059e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059e6:	6959      	ldr	r1, [r3, #20]
 80059e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059ea:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80059ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059ee:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	f004 fc72 	bl	800a2da <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80059f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059f8:	695a      	ldr	r2, [r3, #20]
 80059fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	441a      	add	r2, r3
 8005a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a02:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005a04:	2100      	movs	r1, #0
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f006 f9fa 	bl	800be00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	881b      	ldrh	r3, [r3, #0]
 8005a12:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005a16:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005a1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f040 82bd 	bne.w	8005f9e <PCD_EP_ISR_Handler+0x784>
 8005a24:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005a28:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005a2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a30:	f000 82b5 	beq.w	8005f9e <PCD_EP_ISR_Handler+0x784>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	61bb      	str	r3, [r7, #24]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	461a      	mov	r2, r3
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	4413      	add	r3, r2
 8005a4a:	61bb      	str	r3, [r7, #24]
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a52:	617b      	str	r3, [r7, #20]
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	881b      	ldrh	r3, [r3, #0]
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	801a      	strh	r2, [r3, #0]
 8005a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	2b3e      	cmp	r3, #62	; 0x3e
 8005a6a:	d91d      	bls.n	8005aa8 <PCD_EP_ISR_Handler+0x28e>
 8005a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	095b      	lsrs	r3, r3, #5
 8005a72:	647b      	str	r3, [r7, #68]	; 0x44
 8005a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	f003 031f 	and.w	r3, r3, #31
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d102      	bne.n	8005a86 <PCD_EP_ISR_Handler+0x26c>
 8005a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a82:	3b01      	subs	r3, #1
 8005a84:	647b      	str	r3, [r7, #68]	; 0x44
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	029b      	lsls	r3, r3, #10
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	4313      	orrs	r3, r2
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	801a      	strh	r2, [r3, #0]
 8005aa6:	e026      	b.n	8005af6 <PCD_EP_ISR_Handler+0x2dc>
 8005aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10a      	bne.n	8005ac6 <PCD_EP_ISR_Handler+0x2ac>
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	881b      	ldrh	r3, [r3, #0]
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	801a      	strh	r2, [r3, #0]
 8005ac4:	e017      	b.n	8005af6 <PCD_EP_ISR_Handler+0x2dc>
 8005ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	085b      	lsrs	r3, r3, #1
 8005acc:	647b      	str	r3, [r7, #68]	; 0x44
 8005ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d002      	beq.n	8005ae0 <PCD_EP_ISR_Handler+0x2c6>
 8005ada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005adc:	3301      	adds	r3, #1
 8005ade:	647b      	str	r3, [r7, #68]	; 0x44
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	881b      	ldrh	r3, [r3, #0]
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	029b      	lsls	r3, r3, #10
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	4313      	orrs	r3, r2
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b06:	827b      	strh	r3, [r7, #18]
 8005b08:	8a7b      	ldrh	r3, [r7, #18]
 8005b0a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b0e:	827b      	strh	r3, [r7, #18]
 8005b10:	8a7b      	ldrh	r3, [r7, #18]
 8005b12:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b16:	827b      	strh	r3, [r7, #18]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	8a7b      	ldrh	r3, [r7, #18]
 8005b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	8013      	strh	r3, [r2, #0]
 8005b32:	e234      	b.n	8005f9e <PCD_EP_ISR_Handler+0x784>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	461a      	mov	r2, r3
 8005b3a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005b48:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f280 80fc 	bge.w	8005d4a <PCD_EP_ISR_Handler+0x530>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	461a      	mov	r2, r3
 8005b58:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4413      	add	r3, r2
 8005b60:	881b      	ldrh	r3, [r3, #0]
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005b68:	4013      	ands	r3, r2
 8005b6a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	461a      	mov	r2, r3
 8005b74:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005b80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b84:	b292      	uxth	r2, r2
 8005b86:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005b88:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ba0:	7b1b      	ldrb	r3, [r3, #12]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d125      	bne.n	8005bf2 <PCD_EP_ISR_Handler+0x3d8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	00db      	lsls	r3, r3, #3
 8005bb8:	4413      	add	r3, r2
 8005bba:	3306      	adds	r3, #6
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	6812      	ldr	r2, [r2, #0]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bce:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8005bd2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f000 8092 	beq.w	8005d00 <PCD_EP_ISR_Handler+0x4e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6818      	ldr	r0, [r3, #0]
 8005be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005be2:	6959      	ldr	r1, [r3, #20]
 8005be4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005be6:	88da      	ldrh	r2, [r3, #6]
 8005be8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005bec:	f004 fb75 	bl	800a2da <USB_ReadPMA>
 8005bf0:	e086      	b.n	8005d00 <PCD_EP_ISR_Handler+0x4e6>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bf4:	78db      	ldrb	r3, [r3, #3]
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d10a      	bne.n	8005c10 <PCD_EP_ISR_Handler+0x3f6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005bfa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005bfe:	461a      	mov	r2, r3
 8005c00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f9d9 	bl	8005fba <HAL_PCD_EP_DB_Receive>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8005c0e:	e077      	b.n	8005d00 <PCD_EP_ISR_Handler+0x4e6>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	461a      	mov	r2, r3
 8005c16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	881b      	ldrh	r3, [r3, #0]
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	461a      	mov	r2, r3
 8005c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	441a      	add	r2, r3
 8005c3c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005c40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	461a      	mov	r2, r3
 8005c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	881b      	ldrh	r3, [r3, #0]
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d024      	beq.n	8005cb8 <PCD_EP_ISR_Handler+0x49e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	461a      	mov	r2, r3
 8005c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	4413      	add	r3, r2
 8005c82:	3302      	adds	r3, #2
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	6812      	ldr	r2, [r2, #0]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c96:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8005c9a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d02e      	beq.n	8005d00 <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6818      	ldr	r0, [r3, #0]
 8005ca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ca8:	6959      	ldr	r1, [r3, #20]
 8005caa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cac:	891a      	ldrh	r2, [r3, #8]
 8005cae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005cb2:	f004 fb12 	bl	800a2da <USB_ReadPMA>
 8005cb6:	e023      	b.n	8005d00 <PCD_EP_ISR_Handler+0x4e6>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	00db      	lsls	r3, r3, #3
 8005cca:	4413      	add	r3, r2
 8005ccc:	3306      	adds	r3, #6
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	6812      	ldr	r2, [r2, #0]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cda:	881b      	ldrh	r3, [r3, #0]
 8005cdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ce0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8005ce4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d009      	beq.n	8005d00 <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6818      	ldr	r0, [r3, #0]
 8005cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cf2:	6959      	ldr	r1, [r3, #20]
 8005cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cf6:	895a      	ldrh	r2, [r3, #10]
 8005cf8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005cfc:	f004 faed 	bl	800a2da <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d02:	69da      	ldr	r2, [r3, #28]
 8005d04:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005d08:	441a      	add	r2, r3
 8005d0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d0c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005d0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d10:	695a      	ldr	r2, [r3, #20]
 8005d12:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005d16:	441a      	add	r2, r3
 8005d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d1a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d005      	beq.n	8005d30 <PCD_EP_ISR_Handler+0x516>
 8005d24:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8005d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d206      	bcs.n	8005d3e <PCD_EP_ISR_Handler+0x524>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	4619      	mov	r1, r3
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f006 f862 	bl	800be00 <HAL_PCD_DataOutStageCallback>
 8005d3c:	e005      	b.n	8005d4a <PCD_EP_ISR_Handler+0x530>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d44:	4618      	mov	r0, r3
 8005d46:	f002 fff9 	bl	8008d3c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005d4a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f000 8123 	beq.w	8005f9e <PCD_EP_ISR_Handler+0x784>
      {
        ep = &hpcd->IN_ep[epindex];
 8005d58:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	00db      	lsls	r3, r3, #3
 8005d64:	3310      	adds	r3, #16
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	4413      	add	r3, r2
 8005d6a:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	461a      	mov	r2, r3
 8005d72:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d86:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	461a      	mov	r2, r3
 8005d90:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	441a      	add	r2, r3
 8005d98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005d9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005da0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005da8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005daa:	78db      	ldrb	r3, [r3, #3]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	f040 80a2 	bne.w	8005ef6 <PCD_EP_ISR_Handler+0x6dc>
        {
          ep->xfer_len = 0U;
 8005db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005db4:	2200      	movs	r2, #0
 8005db6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dba:	7b1b      	ldrb	r3, [r3, #12]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f000 8093 	beq.w	8005ee8 <PCD_EP_ISR_Handler+0x6ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005dc2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d046      	beq.n	8005e5c <PCD_EP_ISR_Handler+0x642>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dd0:	785b      	ldrb	r3, [r3, #1]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d126      	bne.n	8005e24 <PCD_EP_ISR_Handler+0x60a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	627b      	str	r3, [r7, #36]	; 0x24
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	461a      	mov	r2, r3
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	4413      	add	r3, r2
 8005dec:	627b      	str	r3, [r7, #36]	; 0x24
 8005dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	011a      	lsls	r2, r3, #4
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	4413      	add	r3, r2
 8005df8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dfc:	623b      	str	r3, [r7, #32]
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	801a      	strh	r2, [r3, #0]
 8005e0e:	6a3b      	ldr	r3, [r7, #32]
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	6a3b      	ldr	r3, [r7, #32]
 8005e20:	801a      	strh	r2, [r3, #0]
 8005e22:	e061      	b.n	8005ee8 <PCD_EP_ISR_Handler+0x6ce>
 8005e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e26:	785b      	ldrb	r3, [r3, #1]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d15d      	bne.n	8005ee8 <PCD_EP_ISR_Handler+0x6ce>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e40:	4413      	add	r3, r2
 8005e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	011a      	lsls	r2, r3, #4
 8005e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e52:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e56:	2200      	movs	r2, #0
 8005e58:	801a      	strh	r2, [r3, #0]
 8005e5a:	e045      	b.n	8005ee8 <PCD_EP_ISR_Handler+0x6ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e64:	785b      	ldrb	r3, [r3, #1]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d126      	bne.n	8005eb8 <PCD_EP_ISR_Handler+0x69e>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	637b      	str	r3, [r7, #52]	; 0x34
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e7e:	4413      	add	r3, r2
 8005e80:	637b      	str	r3, [r7, #52]	; 0x34
 8005e82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	011a      	lsls	r2, r3, #4
 8005e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e90:	633b      	str	r3, [r7, #48]	; 0x30
 8005e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e94:	881b      	ldrh	r3, [r3, #0]
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea0:	801a      	strh	r2, [r3, #0]
 8005ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb4:	801a      	strh	r2, [r3, #0]
 8005eb6:	e017      	b.n	8005ee8 <PCD_EP_ISR_Handler+0x6ce>
 8005eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eba:	785b      	ldrb	r3, [r3, #1]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d113      	bne.n	8005ee8 <PCD_EP_ISR_Handler+0x6ce>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	461a      	mov	r2, r3
 8005ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ece:	4413      	add	r3, r2
 8005ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ed2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	011a      	lsls	r2, r3, #4
 8005ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eda:	4413      	add	r3, r2
 8005edc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ee0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005ee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	4619      	mov	r1, r3
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f005 ffa1 	bl	800be36 <HAL_PCD_DataInStageCallback>
 8005ef4:	e053      	b.n	8005f9e <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005ef6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d146      	bne.n	8005f90 <PCD_EP_ISR_Handler+0x776>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	00db      	lsls	r3, r3, #3
 8005f14:	4413      	add	r3, r2
 8005f16:	3302      	adds	r3, #2
 8005f18:	005b      	lsls	r3, r3, #1
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	6812      	ldr	r2, [r2, #0]
 8005f1e:	4413      	add	r3, r2
 8005f20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f2a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8005f2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f30:	699a      	ldr	r2, [r3, #24]
 8005f32:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d907      	bls.n	8005f4a <PCD_EP_ISR_Handler+0x730>
            {
              ep->xfer_len -= TxPctSize;
 8005f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f3c:	699a      	ldr	r2, [r3, #24]
 8005f3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005f42:	1ad2      	subs	r2, r2, r3
 8005f44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f46:	619a      	str	r2, [r3, #24]
 8005f48:	e002      	b.n	8005f50 <PCD_EP_ISR_Handler+0x736>
            }
            else
            {
              ep->xfer_len = 0U;
 8005f4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005f50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d106      	bne.n	8005f66 <PCD_EP_ISR_Handler+0x74c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f005 ff69 	bl	800be36 <HAL_PCD_DataInStageCallback>
 8005f64:	e01b      	b.n	8005f9e <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005f66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f68:	695a      	ldr	r2, [r3, #20]
 8005f6a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005f6e:	441a      	add	r2, r3
 8005f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f72:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005f74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f76:	69da      	ldr	r2, [r3, #28]
 8005f78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005f7c:	441a      	add	r2, r3
 8005f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f80:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f002 fed7 	bl	8008d3c <USB_EPStartXfer>
 8005f8e:	e006      	b.n	8005f9e <PCD_EP_ISR_Handler+0x784>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005f90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005f94:	461a      	mov	r2, r3
 8005f96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 f91b 	bl	80061d4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	b21b      	sxth	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f6ff ac3a 	blt.w	8005824 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3758      	adds	r7, #88	; 0x58
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b088      	sub	sp, #32
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	60f8      	str	r0, [r7, #12]
 8005fc2:	60b9      	str	r1, [r7, #8]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005fc8:	88fb      	ldrh	r3, [r7, #6]
 8005fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d07e      	beq.n	80060d0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	461a      	mov	r2, r3
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	00db      	lsls	r3, r3, #3
 8005fe4:	4413      	add	r3, r2
 8005fe6:	3302      	adds	r3, #2
 8005fe8:	005b      	lsls	r3, r3, #1
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	6812      	ldr	r2, [r2, #0]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ff4:	881b      	ldrh	r3, [r3, #0]
 8005ff6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ffa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	699a      	ldr	r2, [r3, #24]
 8006000:	8b7b      	ldrh	r3, [r7, #26]
 8006002:	429a      	cmp	r2, r3
 8006004:	d306      	bcc.n	8006014 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	699a      	ldr	r2, [r3, #24]
 800600a:	8b7b      	ldrh	r3, [r7, #26]
 800600c:	1ad2      	subs	r2, r2, r3
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	619a      	str	r2, [r3, #24]
 8006012:	e002      	b.n	800601a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	2200      	movs	r2, #0
 8006018:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d123      	bne.n	800606a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	461a      	mov	r2, r3
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4413      	add	r3, r2
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	b29b      	uxth	r3, r3
 8006034:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603c:	833b      	strh	r3, [r7, #24]
 800603e:	8b3b      	ldrh	r3, [r7, #24]
 8006040:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006044:	833b      	strh	r3, [r7, #24]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	461a      	mov	r2, r3
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	441a      	add	r2, r3
 8006054:	8b3b      	ldrh	r3, [r7, #24]
 8006056:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800605a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800605e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006066:	b29b      	uxth	r3, r3
 8006068:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800606a:	88fb      	ldrh	r3, [r7, #6]
 800606c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006070:	2b00      	cmp	r3, #0
 8006072:	d01f      	beq.n	80060b4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	461a      	mov	r2, r3
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	881b      	ldrh	r3, [r3, #0]
 8006084:	b29b      	uxth	r3, r3
 8006086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800608a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800608e:	82fb      	strh	r3, [r7, #22]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	461a      	mov	r2, r3
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	441a      	add	r2, r3
 800609e:	8afb      	ldrh	r3, [r7, #22]
 80060a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80060b4:	8b7b      	ldrh	r3, [r7, #26]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f000 8087 	beq.w	80061ca <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6818      	ldr	r0, [r3, #0]
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	6959      	ldr	r1, [r3, #20]
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	891a      	ldrh	r2, [r3, #8]
 80060c8:	8b7b      	ldrh	r3, [r7, #26]
 80060ca:	f004 f906 	bl	800a2da <USB_ReadPMA>
 80060ce:	e07c      	b.n	80061ca <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060d8:	b29b      	uxth	r3, r3
 80060da:	461a      	mov	r2, r3
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	00db      	lsls	r3, r3, #3
 80060e2:	4413      	add	r3, r2
 80060e4:	3306      	adds	r3, #6
 80060e6:	005b      	lsls	r3, r3, #1
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	6812      	ldr	r2, [r2, #0]
 80060ec:	4413      	add	r3, r2
 80060ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060f2:	881b      	ldrh	r3, [r3, #0]
 80060f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060f8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	699a      	ldr	r2, [r3, #24]
 80060fe:	8b7b      	ldrh	r3, [r7, #26]
 8006100:	429a      	cmp	r2, r3
 8006102:	d306      	bcc.n	8006112 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	699a      	ldr	r2, [r3, #24]
 8006108:	8b7b      	ldrh	r3, [r7, #26]
 800610a:	1ad2      	subs	r2, r2, r3
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	619a      	str	r2, [r3, #24]
 8006110:	e002      	b.n	8006118 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	2200      	movs	r2, #0
 8006116:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d123      	bne.n	8006168 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	461a      	mov	r2, r3
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4413      	add	r3, r2
 800612e:	881b      	ldrh	r3, [r3, #0]
 8006130:	b29b      	uxth	r3, r3
 8006132:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613a:	83fb      	strh	r3, [r7, #30]
 800613c:	8bfb      	ldrh	r3, [r7, #30]
 800613e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006142:	83fb      	strh	r3, [r7, #30]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	461a      	mov	r2, r3
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	441a      	add	r2, r3
 8006152:	8bfb      	ldrh	r3, [r7, #30]
 8006154:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006158:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800615c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006164:	b29b      	uxth	r3, r3
 8006166:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006168:	88fb      	ldrh	r3, [r7, #6]
 800616a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800616e:	2b00      	cmp	r3, #0
 8006170:	d11f      	bne.n	80061b2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	461a      	mov	r2, r3
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	b29b      	uxth	r3, r3
 8006184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800618c:	83bb      	strh	r3, [r7, #28]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	461a      	mov	r2, r3
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	441a      	add	r2, r3
 800619c:	8bbb      	ldrh	r3, [r7, #28]
 800619e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80061b2:	8b7b      	ldrh	r3, [r7, #26]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d008      	beq.n	80061ca <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6818      	ldr	r0, [r3, #0]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	6959      	ldr	r1, [r3, #20]
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	895a      	ldrh	r2, [r3, #10]
 80061c4:	8b7b      	ldrh	r3, [r7, #26]
 80061c6:	f004 f888 	bl	800a2da <USB_ReadPMA>
    }
  }

  return count;
 80061ca:	8b7b      	ldrh	r3, [r7, #26]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3720      	adds	r7, #32
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b0a4      	sub	sp, #144	; 0x90
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	4613      	mov	r3, r2
 80061e0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80061e2:	88fb      	ldrh	r3, [r7, #6]
 80061e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	f000 81dd 	beq.w	80065a8 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	461a      	mov	r2, r3
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	00db      	lsls	r3, r3, #3
 8006200:	4413      	add	r3, r2
 8006202:	3302      	adds	r3, #2
 8006204:	005b      	lsls	r3, r3, #1
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	6812      	ldr	r2, [r2, #0]
 800620a:	4413      	add	r3, r2
 800620c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006216:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	699a      	ldr	r2, [r3, #24]
 800621e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006222:	429a      	cmp	r2, r3
 8006224:	d907      	bls.n	8006236 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	699a      	ldr	r2, [r3, #24]
 800622a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800622e:	1ad2      	subs	r2, r2, r3
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	619a      	str	r2, [r3, #24]
 8006234:	e002      	b.n	800623c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	2200      	movs	r2, #0
 800623a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	2b00      	cmp	r3, #0
 8006242:	f040 80b9 	bne.w	80063b8 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	785b      	ldrb	r3, [r3, #1]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d126      	bne.n	800629c <HAL_PCD_EP_DB_Transmit+0xc8>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800625c:	b29b      	uxth	r3, r3
 800625e:	461a      	mov	r2, r3
 8006260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006262:	4413      	add	r3, r2
 8006264:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	011a      	lsls	r2, r3, #4
 800626c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626e:	4413      	add	r3, r2
 8006270:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006274:	62bb      	str	r3, [r7, #40]	; 0x28
 8006276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006278:	881b      	ldrh	r3, [r3, #0]
 800627a:	b29b      	uxth	r3, r3
 800627c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006280:	b29a      	uxth	r2, r3
 8006282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006284:	801a      	strh	r2, [r3, #0]
 8006286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006288:	881b      	ldrh	r3, [r3, #0]
 800628a:	b29b      	uxth	r3, r3
 800628c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006290:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006294:	b29a      	uxth	r2, r3
 8006296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006298:	801a      	strh	r2, [r3, #0]
 800629a:	e01a      	b.n	80062d2 <HAL_PCD_EP_DB_Transmit+0xfe>
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	785b      	ldrb	r3, [r3, #1]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d116      	bne.n	80062d2 <HAL_PCD_EP_DB_Transmit+0xfe>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	637b      	str	r3, [r7, #52]	; 0x34
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	461a      	mov	r2, r3
 80062b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b8:	4413      	add	r3, r2
 80062ba:	637b      	str	r3, [r7, #52]	; 0x34
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	011a      	lsls	r2, r3, #4
 80062c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c4:	4413      	add	r3, r2
 80062c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062ca:	633b      	str	r3, [r7, #48]	; 0x30
 80062cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ce:	2200      	movs	r2, #0
 80062d0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	627b      	str	r3, [r7, #36]	; 0x24
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	785b      	ldrb	r3, [r3, #1]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d126      	bne.n	800632e <HAL_PCD_EP_DB_Transmit+0x15a>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	61fb      	str	r3, [r7, #28]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	461a      	mov	r2, r3
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	4413      	add	r3, r2
 80062f6:	61fb      	str	r3, [r7, #28]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	011a      	lsls	r2, r3, #4
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	4413      	add	r3, r2
 8006302:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006306:	61bb      	str	r3, [r7, #24]
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	881b      	ldrh	r3, [r3, #0]
 800630c:	b29b      	uxth	r3, r3
 800630e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006312:	b29a      	uxth	r2, r3
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	801a      	strh	r2, [r3, #0]
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	881b      	ldrh	r3, [r3, #0]
 800631c:	b29b      	uxth	r3, r3
 800631e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006326:	b29a      	uxth	r2, r3
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	801a      	strh	r2, [r3, #0]
 800632c:	e017      	b.n	800635e <HAL_PCD_EP_DB_Transmit+0x18a>
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	785b      	ldrb	r3, [r3, #1]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d113      	bne.n	800635e <HAL_PCD_EP_DB_Transmit+0x18a>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800633e:	b29b      	uxth	r3, r3
 8006340:	461a      	mov	r2, r3
 8006342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006344:	4413      	add	r3, r2
 8006346:	627b      	str	r3, [r7, #36]	; 0x24
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	011a      	lsls	r2, r3, #4
 800634e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006350:	4413      	add	r3, r2
 8006352:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006356:	623b      	str	r3, [r7, #32]
 8006358:	6a3b      	ldr	r3, [r7, #32]
 800635a:	2200      	movs	r2, #0
 800635c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	4619      	mov	r1, r3
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f005 fd66 	bl	800be36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800636a:	88fb      	ldrh	r3, [r7, #6]
 800636c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006370:	2b00      	cmp	r3, #0
 8006372:	f000 82fc 	beq.w	800696e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	461a      	mov	r2, r3
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4413      	add	r3, r2
 8006384:	881b      	ldrh	r3, [r3, #0]
 8006386:	b29b      	uxth	r3, r3
 8006388:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800638c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006390:	82fb      	strh	r3, [r7, #22]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	461a      	mov	r2, r3
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	441a      	add	r2, r3
 80063a0:	8afb      	ldrh	r3, [r7, #22]
 80063a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	8013      	strh	r3, [r2, #0]
 80063b6:	e2da      	b.n	800696e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80063b8:	88fb      	ldrh	r3, [r7, #6]
 80063ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d021      	beq.n	8006406 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	461a      	mov	r2, r3
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4413      	add	r3, r2
 80063d0:	881b      	ldrh	r3, [r3, #0]
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063dc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	461a      	mov	r2, r3
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	441a      	add	r2, r3
 80063ee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80063f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006402:	b29b      	uxth	r3, r3
 8006404:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800640c:	2b01      	cmp	r3, #1
 800640e:	f040 82ae 	bne.w	800696e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	695a      	ldr	r2, [r3, #20]
 8006416:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800641a:	441a      	add	r2, r3
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	69da      	ldr	r2, [r3, #28]
 8006424:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006428:	441a      	add	r2, r3
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	6a1a      	ldr	r2, [r3, #32]
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	429a      	cmp	r2, r3
 8006438:	d30b      	bcc.n	8006452 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	6a1a      	ldr	r2, [r3, #32]
 8006446:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800644a:	1ad2      	subs	r2, r2, r3
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	621a      	str	r2, [r3, #32]
 8006450:	e017      	b.n	8006482 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d108      	bne.n	800646c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800645a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800645e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800646a:	e00a      	b.n	8006482 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	2200      	movs	r2, #0
 8006480:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	785b      	ldrb	r3, [r3, #1]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d165      	bne.n	8006556 <HAL_PCD_EP_DB_Transmit+0x382>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006498:	b29b      	uxth	r3, r3
 800649a:	461a      	mov	r2, r3
 800649c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800649e:	4413      	add	r3, r2
 80064a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	011a      	lsls	r2, r3, #4
 80064a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064aa:	4413      	add	r3, r2
 80064ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80064b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b4:	881b      	ldrh	r3, [r3, #0]
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064bc:	b29a      	uxth	r2, r3
 80064be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c0:	801a      	strh	r2, [r3, #0]
 80064c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064c6:	2b3e      	cmp	r3, #62	; 0x3e
 80064c8:	d91d      	bls.n	8006506 <HAL_PCD_EP_DB_Transmit+0x332>
 80064ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064ce:	095b      	lsrs	r3, r3, #5
 80064d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80064d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064d6:	f003 031f 	and.w	r3, r3, #31
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d102      	bne.n	80064e4 <HAL_PCD_EP_DB_Transmit+0x310>
 80064de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064e0:	3b01      	subs	r3, #1
 80064e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80064e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e6:	881b      	ldrh	r3, [r3, #0]
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	029b      	lsls	r3, r3, #10
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	4313      	orrs	r3, r2
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064fe:	b29a      	uxth	r2, r3
 8006500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006502:	801a      	strh	r2, [r3, #0]
 8006504:	e044      	b.n	8006590 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006506:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10a      	bne.n	8006524 <HAL_PCD_EP_DB_Transmit+0x350>
 800650e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	b29b      	uxth	r3, r3
 8006514:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006518:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800651c:	b29a      	uxth	r2, r3
 800651e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006520:	801a      	strh	r2, [r3, #0]
 8006522:	e035      	b.n	8006590 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006524:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006528:	085b      	lsrs	r3, r3, #1
 800652a:	64bb      	str	r3, [r7, #72]	; 0x48
 800652c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <HAL_PCD_EP_DB_Transmit+0x36a>
 8006538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800653a:	3301      	adds	r3, #1
 800653c:	64bb      	str	r3, [r7, #72]	; 0x48
 800653e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006540:	881b      	ldrh	r3, [r3, #0]
 8006542:	b29a      	uxth	r2, r3
 8006544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006546:	b29b      	uxth	r3, r3
 8006548:	029b      	lsls	r3, r3, #10
 800654a:	b29b      	uxth	r3, r3
 800654c:	4313      	orrs	r3, r2
 800654e:	b29a      	uxth	r2, r3
 8006550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006552:	801a      	strh	r2, [r3, #0]
 8006554:	e01c      	b.n	8006590 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	785b      	ldrb	r3, [r3, #1]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d118      	bne.n	8006590 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	647b      	str	r3, [r7, #68]	; 0x44
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800656c:	b29b      	uxth	r3, r3
 800656e:	461a      	mov	r2, r3
 8006570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006572:	4413      	add	r3, r2
 8006574:	647b      	str	r3, [r7, #68]	; 0x44
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	011a      	lsls	r2, r3, #4
 800657c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800657e:	4413      	add	r3, r2
 8006580:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006584:	643b      	str	r3, [r7, #64]	; 0x40
 8006586:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800658a:	b29a      	uxth	r2, r3
 800658c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800658e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6818      	ldr	r0, [r3, #0]
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	6959      	ldr	r1, [r3, #20]
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	891a      	ldrh	r2, [r3, #8]
 800659c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	f003 fe55 	bl	800a250 <USB_WritePMA>
 80065a6:	e1e2      	b.n	800696e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	461a      	mov	r2, r3
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	00db      	lsls	r3, r3, #3
 80065ba:	4413      	add	r3, r2
 80065bc:	3306      	adds	r3, #6
 80065be:	005b      	lsls	r3, r3, #1
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	6812      	ldr	r2, [r2, #0]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065d0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	699a      	ldr	r2, [r3, #24]
 80065d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80065dc:	429a      	cmp	r2, r3
 80065de:	d307      	bcc.n	80065f0 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	699a      	ldr	r2, [r3, #24]
 80065e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80065e8:	1ad2      	subs	r2, r2, r3
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	619a      	str	r2, [r3, #24]
 80065ee:	e002      	b.n	80065f6 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	2200      	movs	r2, #0
 80065f4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f040 80c0 	bne.w	8006780 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	785b      	ldrb	r3, [r3, #1]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d126      	bne.n	8006656 <HAL_PCD_EP_DB_Transmit+0x482>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006616:	b29b      	uxth	r3, r3
 8006618:	461a      	mov	r2, r3
 800661a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800661c:	4413      	add	r3, r2
 800661e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	011a      	lsls	r2, r3, #4
 8006626:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006628:	4413      	add	r3, r2
 800662a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800662e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006630:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006632:	881b      	ldrh	r3, [r3, #0]
 8006634:	b29b      	uxth	r3, r3
 8006636:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800663a:	b29a      	uxth	r2, r3
 800663c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800663e:	801a      	strh	r2, [r3, #0]
 8006640:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006642:	881b      	ldrh	r3, [r3, #0]
 8006644:	b29b      	uxth	r3, r3
 8006646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800664a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800664e:	b29a      	uxth	r2, r3
 8006650:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006652:	801a      	strh	r2, [r3, #0]
 8006654:	e01a      	b.n	800668c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	785b      	ldrb	r3, [r3, #1]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d116      	bne.n	800668c <HAL_PCD_EP_DB_Transmit+0x4b8>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	667b      	str	r3, [r7, #100]	; 0x64
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800666c:	b29b      	uxth	r3, r3
 800666e:	461a      	mov	r2, r3
 8006670:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006672:	4413      	add	r3, r2
 8006674:	667b      	str	r3, [r7, #100]	; 0x64
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	011a      	lsls	r2, r3, #4
 800667c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800667e:	4413      	add	r3, r2
 8006680:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006684:	663b      	str	r3, [r7, #96]	; 0x60
 8006686:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006688:	2200      	movs	r2, #0
 800668a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	677b      	str	r3, [r7, #116]	; 0x74
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	785b      	ldrb	r3, [r3, #1]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d12b      	bne.n	80066f2 <HAL_PCD_EP_DB_Transmit+0x51e>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	461a      	mov	r2, r3
 80066ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ae:	4413      	add	r3, r2
 80066b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	011a      	lsls	r2, r3, #4
 80066b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ba:	4413      	add	r3, r2
 80066bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80066c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80066c8:	881b      	ldrh	r3, [r3, #0]
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80066d6:	801a      	strh	r2, [r3, #0]
 80066d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80066dc:	881b      	ldrh	r3, [r3, #0]
 80066de:	b29b      	uxth	r3, r3
 80066e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80066ee:	801a      	strh	r2, [r3, #0]
 80066f0:	e017      	b.n	8006722 <HAL_PCD_EP_DB_Transmit+0x54e>
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	785b      	ldrb	r3, [r3, #1]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d113      	bne.n	8006722 <HAL_PCD_EP_DB_Transmit+0x54e>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006702:	b29b      	uxth	r3, r3
 8006704:	461a      	mov	r2, r3
 8006706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006708:	4413      	add	r3, r2
 800670a:	677b      	str	r3, [r7, #116]	; 0x74
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	011a      	lsls	r2, r3, #4
 8006712:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006714:	4413      	add	r3, r2
 8006716:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800671a:	673b      	str	r3, [r7, #112]	; 0x70
 800671c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800671e:	2200      	movs	r2, #0
 8006720:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	4619      	mov	r1, r3
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f005 fb84 	bl	800be36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800672e:	88fb      	ldrh	r3, [r7, #6]
 8006730:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006734:	2b00      	cmp	r3, #0
 8006736:	f040 811a 	bne.w	800696e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	461a      	mov	r2, r3
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	4413      	add	r3, r2
 8006748:	881b      	ldrh	r3, [r3, #0]
 800674a:	b29b      	uxth	r3, r3
 800674c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006754:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	461a      	mov	r2, r3
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	441a      	add	r2, r3
 8006766:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800676a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800676e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006772:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800677a:	b29b      	uxth	r3, r3
 800677c:	8013      	strh	r3, [r2, #0]
 800677e:	e0f6      	b.n	800696e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006780:	88fb      	ldrh	r3, [r7, #6]
 8006782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d121      	bne.n	80067ce <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	461a      	mov	r2, r3
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4413      	add	r3, r2
 8006798:	881b      	ldrh	r3, [r3, #0]
 800679a:	b29b      	uxth	r3, r3
 800679c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	461a      	mov	r2, r3
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	441a      	add	r2, r3
 80067b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80067ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	f040 80ca 	bne.w	800696e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	695a      	ldr	r2, [r3, #20]
 80067de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80067e2:	441a      	add	r2, r3
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	69da      	ldr	r2, [r3, #28]
 80067ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80067f0:	441a      	add	r2, r3
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	6a1a      	ldr	r2, [r3, #32]
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d30b      	bcc.n	800681a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	6a1a      	ldr	r2, [r3, #32]
 800680e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006812:	1ad2      	subs	r2, r2, r3
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	621a      	str	r2, [r3, #32]
 8006818:	e017      	b.n	800684a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d108      	bne.n	8006834 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8006822:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006826:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006832:	e00a      	b.n	800684a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	6a1b      	ldr	r3, [r3, #32]
 8006838:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	2200      	movs	r2, #0
 8006840:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	657b      	str	r3, [r7, #84]	; 0x54
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	785b      	ldrb	r3, [r3, #1]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d165      	bne.n	8006924 <HAL_PCD_EP_DB_Transmit+0x750>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006866:	b29b      	uxth	r3, r3
 8006868:	461a      	mov	r2, r3
 800686a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800686c:	4413      	add	r3, r2
 800686e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	011a      	lsls	r2, r3, #4
 8006876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006878:	4413      	add	r3, r2
 800687a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800687e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006880:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006882:	881b      	ldrh	r3, [r3, #0]
 8006884:	b29b      	uxth	r3, r3
 8006886:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800688a:	b29a      	uxth	r2, r3
 800688c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800688e:	801a      	strh	r2, [r3, #0]
 8006890:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006894:	2b3e      	cmp	r3, #62	; 0x3e
 8006896:	d91d      	bls.n	80068d4 <HAL_PCD_EP_DB_Transmit+0x700>
 8006898:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800689c:	095b      	lsrs	r3, r3, #5
 800689e:	66bb      	str	r3, [r7, #104]	; 0x68
 80068a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068a4:	f003 031f 	and.w	r3, r3, #31
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d102      	bne.n	80068b2 <HAL_PCD_EP_DB_Transmit+0x6de>
 80068ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068ae:	3b01      	subs	r3, #1
 80068b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80068b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068b4:	881b      	ldrh	r3, [r3, #0]
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	029b      	lsls	r3, r3, #10
 80068be:	b29b      	uxth	r3, r3
 80068c0:	4313      	orrs	r3, r2
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068d0:	801a      	strh	r2, [r3, #0]
 80068d2:	e041      	b.n	8006958 <HAL_PCD_EP_DB_Transmit+0x784>
 80068d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10a      	bne.n	80068f2 <HAL_PCD_EP_DB_Transmit+0x71e>
 80068dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068ee:	801a      	strh	r2, [r3, #0]
 80068f0:	e032      	b.n	8006958 <HAL_PCD_EP_DB_Transmit+0x784>
 80068f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068f6:	085b      	lsrs	r3, r3, #1
 80068f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80068fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	2b00      	cmp	r3, #0
 8006904:	d002      	beq.n	800690c <HAL_PCD_EP_DB_Transmit+0x738>
 8006906:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006908:	3301      	adds	r3, #1
 800690a:	66bb      	str	r3, [r7, #104]	; 0x68
 800690c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	b29a      	uxth	r2, r3
 8006912:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006914:	b29b      	uxth	r3, r3
 8006916:	029b      	lsls	r3, r3, #10
 8006918:	b29b      	uxth	r3, r3
 800691a:	4313      	orrs	r3, r2
 800691c:	b29a      	uxth	r2, r3
 800691e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006920:	801a      	strh	r2, [r3, #0]
 8006922:	e019      	b.n	8006958 <HAL_PCD_EP_DB_Transmit+0x784>
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	785b      	ldrb	r3, [r3, #1]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d115      	bne.n	8006958 <HAL_PCD_EP_DB_Transmit+0x784>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006934:	b29b      	uxth	r3, r3
 8006936:	461a      	mov	r2, r3
 8006938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800693a:	4413      	add	r3, r2
 800693c:	657b      	str	r3, [r7, #84]	; 0x54
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	011a      	lsls	r2, r3, #4
 8006944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006946:	4413      	add	r3, r2
 8006948:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800694c:	653b      	str	r3, [r7, #80]	; 0x50
 800694e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006952:	b29a      	uxth	r2, r3
 8006954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006956:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6818      	ldr	r0, [r3, #0]
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	6959      	ldr	r1, [r3, #20]
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	895a      	ldrh	r2, [r3, #10]
 8006964:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006968:	b29b      	uxth	r3, r3
 800696a:	f003 fc71 	bl	800a250 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	461a      	mov	r2, r3
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	881b      	ldrh	r3, [r3, #0]
 800697e:	b29b      	uxth	r3, r3
 8006980:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006988:	82bb      	strh	r3, [r7, #20]
 800698a:	8abb      	ldrh	r3, [r7, #20]
 800698c:	f083 0310 	eor.w	r3, r3, #16
 8006990:	82bb      	strh	r3, [r7, #20]
 8006992:	8abb      	ldrh	r3, [r7, #20]
 8006994:	f083 0320 	eor.w	r3, r3, #32
 8006998:	82bb      	strh	r3, [r7, #20]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	461a      	mov	r2, r3
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	441a      	add	r2, r3
 80069a8:	8abb      	ldrh	r3, [r7, #20]
 80069aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3790      	adds	r7, #144	; 0x90
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	607b      	str	r3, [r7, #4]
 80069d2:	460b      	mov	r3, r1
 80069d4:	817b      	strh	r3, [r7, #10]
 80069d6:	4613      	mov	r3, r2
 80069d8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80069da:	897b      	ldrh	r3, [r7, #10]
 80069dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00b      	beq.n	80069fe <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069e6:	897b      	ldrh	r3, [r7, #10]
 80069e8:	f003 0207 	and.w	r2, r3, #7
 80069ec:	4613      	mov	r3, r2
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4413      	add	r3, r2
 80069f2:	00db      	lsls	r3, r3, #3
 80069f4:	3310      	adds	r3, #16
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	4413      	add	r3, r2
 80069fa:	617b      	str	r3, [r7, #20]
 80069fc:	e009      	b.n	8006a12 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80069fe:	897a      	ldrh	r2, [r7, #10]
 8006a00:	4613      	mov	r3, r2
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	4413      	add	r3, r2
 8006a06:	00db      	lsls	r3, r3, #3
 8006a08:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	4413      	add	r3, r2
 8006a10:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006a12:	893b      	ldrh	r3, [r7, #8]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d107      	bne.n	8006a28 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	80da      	strh	r2, [r3, #6]
 8006a26:	e00b      	b.n	8006a40 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	0c1b      	lsrs	r3, r3, #16
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	371c      	adds	r7, #28
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bc80      	pop	{r7}
 8006a4a:	4770      	bx	lr

08006a4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b086      	sub	sp, #24
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d101      	bne.n	8006a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e26c      	b.n	8006f38 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0301 	and.w	r3, r3, #1
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f000 8087 	beq.w	8006b7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a6c:	4b92      	ldr	r3, [pc, #584]	; (8006cb8 <HAL_RCC_OscConfig+0x26c>)
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	f003 030c 	and.w	r3, r3, #12
 8006a74:	2b04      	cmp	r3, #4
 8006a76:	d00c      	beq.n	8006a92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006a78:	4b8f      	ldr	r3, [pc, #572]	; (8006cb8 <HAL_RCC_OscConfig+0x26c>)
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	f003 030c 	and.w	r3, r3, #12
 8006a80:	2b08      	cmp	r3, #8
 8006a82:	d112      	bne.n	8006aaa <HAL_RCC_OscConfig+0x5e>
 8006a84:	4b8c      	ldr	r3, [pc, #560]	; (8006cb8 <HAL_RCC_OscConfig+0x26c>)
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a90:	d10b      	bne.n	8006aaa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a92:	4b89      	ldr	r3, [pc, #548]	; (8006cb8 <HAL_RCC_OscConfig+0x26c>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d06c      	beq.n	8006b78 <HAL_RCC_OscConfig+0x12c>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d168      	bne.n	8006b78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e246      	b.n	8006f38 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ab2:	d106      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x76>
 8006ab4:	4b80      	ldr	r3, [pc, #512]	; (8006cb8 <HAL_RCC_OscConfig+0x26c>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a7f      	ldr	r2, [pc, #508]	; (8006cb8 <HAL_RCC_OscConfig+0x26c>)
 8006aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006abe:	6013      	str	r3, [r2, #0]
 8006ac0:	e02e      	b.n	8006b20 <HAL_RCC_OscConfig+0xd4>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10c      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x98>
 8006aca:	4b7b      	ldr	r3, [pc, #492]	; (8006cb8 <HAL_RCC_OscConfig+0x26c>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a7a      	ldr	r2, [pc, #488]	; (8006cb8 <HAL_RCC_OscConfig+0x26c>)
 8006ad0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ad4:	6013      	str	r3, [r2, #0]
 8006ad6:	4b78      	ldr	r3, [pc, #480]	; (8006cb8 <HAL_RCC_OscConfig+0x26c>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a77      	ldr	r2, [pc, #476]	; (8006cb8 <HAL_RCC_OscConfig+0x26c>)
 8006adc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ae0:	6013      	str	r3, [r2, #0]
 8006ae2:	e01d      	b.n	8006b20 <HAL_RCC_OscConfig+0xd4>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006aec:	d10c      	bne.n	8006b08 <HAL_RCC_OscConfig+0xbc>
 8006aee:	4b72      	ldr	r3, [pc, #456]	; (8006cb8 <HAL_RCC_OscConfig+0x26c>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a71      	ldr	r2, [pc, #452]	; (8006cb8 <HAL_RCC_OscConfig+0x26c>)
 8006af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006af8:	6013      	str	r3, [r2, #0]
 8006afa:	4b6f      	ldr	r3, [pc, #444]	; (8006cb8 <HAL_RCC_OscConfig+0x26c>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a6e      	ldr	r2, [pc, #440]	; (8006cb8 <HAL_RCC_OscConfig+0x26c>)
 8006b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b04:	6013      	str	r3, [r2, #0]
 8006b06:	e00b      	b.n	8006b20 <HAL_RCC_OscConfig+0xd4>
 8006b08:	4b6b      	ldr	r3, [pc, #428]	; (8006cb8 <HAL_RCC_OscConfig+0x26c>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a6a      	ldr	r2, [pc, #424]	; (8006cb8 <HAL_RCC_OscConfig+0x26c>)
 8006b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b12:	6013      	str	r3, [r2, #0]
 8006b14:	4b68      	ldr	r3, [pc, #416]	; (8006cb8 <HAL_RCC_OscConfig+0x26c>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a67      	ldr	r2, [pc, #412]	; (8006cb8 <HAL_RCC_OscConfig+0x26c>)
 8006b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d013      	beq.n	8006b50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b28:	f7fc fd58 	bl	80035dc <HAL_GetTick>
 8006b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b2e:	e008      	b.n	8006b42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b30:	f7fc fd54 	bl	80035dc <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	2b64      	cmp	r3, #100	; 0x64
 8006b3c:	d901      	bls.n	8006b42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e1fa      	b.n	8006f38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b42:	4b5d      	ldr	r3, [pc, #372]	; (8006cb8 <HAL_RCC_OscConfig+0x26c>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d0f0      	beq.n	8006b30 <HAL_RCC_OscConfig+0xe4>
 8006b4e:	e014      	b.n	8006b7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b50:	f7fc fd44 	bl	80035dc <HAL_GetTick>
 8006b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b56:	e008      	b.n	8006b6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b58:	f7fc fd40 	bl	80035dc <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	2b64      	cmp	r3, #100	; 0x64
 8006b64:	d901      	bls.n	8006b6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e1e6      	b.n	8006f38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b6a:	4b53      	ldr	r3, [pc, #332]	; (8006cb8 <HAL_RCC_OscConfig+0x26c>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1f0      	bne.n	8006b58 <HAL_RCC_OscConfig+0x10c>
 8006b76:	e000      	b.n	8006b7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0302 	and.w	r3, r3, #2
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d063      	beq.n	8006c4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006b86:	4b4c      	ldr	r3, [pc, #304]	; (8006cb8 <HAL_RCC_OscConfig+0x26c>)
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	f003 030c 	and.w	r3, r3, #12
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00b      	beq.n	8006baa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006b92:	4b49      	ldr	r3, [pc, #292]	; (8006cb8 <HAL_RCC_OscConfig+0x26c>)
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f003 030c 	and.w	r3, r3, #12
 8006b9a:	2b08      	cmp	r3, #8
 8006b9c:	d11c      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x18c>
 8006b9e:	4b46      	ldr	r3, [pc, #280]	; (8006cb8 <HAL_RCC_OscConfig+0x26c>)
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d116      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006baa:	4b43      	ldr	r3, [pc, #268]	; (8006cb8 <HAL_RCC_OscConfig+0x26c>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d005      	beq.n	8006bc2 <HAL_RCC_OscConfig+0x176>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d001      	beq.n	8006bc2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e1ba      	b.n	8006f38 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bc2:	4b3d      	ldr	r3, [pc, #244]	; (8006cb8 <HAL_RCC_OscConfig+0x26c>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	00db      	lsls	r3, r3, #3
 8006bd0:	4939      	ldr	r1, [pc, #228]	; (8006cb8 <HAL_RCC_OscConfig+0x26c>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bd6:	e03a      	b.n	8006c4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d020      	beq.n	8006c22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006be0:	4b36      	ldr	r3, [pc, #216]	; (8006cbc <HAL_RCC_OscConfig+0x270>)
 8006be2:	2201      	movs	r2, #1
 8006be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006be6:	f7fc fcf9 	bl	80035dc <HAL_GetTick>
 8006bea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bec:	e008      	b.n	8006c00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bee:	f7fc fcf5 	bl	80035dc <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d901      	bls.n	8006c00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e19b      	b.n	8006f38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c00:	4b2d      	ldr	r3, [pc, #180]	; (8006cb8 <HAL_RCC_OscConfig+0x26c>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0302 	and.w	r3, r3, #2
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d0f0      	beq.n	8006bee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c0c:	4b2a      	ldr	r3, [pc, #168]	; (8006cb8 <HAL_RCC_OscConfig+0x26c>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	695b      	ldr	r3, [r3, #20]
 8006c18:	00db      	lsls	r3, r3, #3
 8006c1a:	4927      	ldr	r1, [pc, #156]	; (8006cb8 <HAL_RCC_OscConfig+0x26c>)
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	600b      	str	r3, [r1, #0]
 8006c20:	e015      	b.n	8006c4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c22:	4b26      	ldr	r3, [pc, #152]	; (8006cbc <HAL_RCC_OscConfig+0x270>)
 8006c24:	2200      	movs	r2, #0
 8006c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c28:	f7fc fcd8 	bl	80035dc <HAL_GetTick>
 8006c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c2e:	e008      	b.n	8006c42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c30:	f7fc fcd4 	bl	80035dc <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d901      	bls.n	8006c42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e17a      	b.n	8006f38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c42:	4b1d      	ldr	r3, [pc, #116]	; (8006cb8 <HAL_RCC_OscConfig+0x26c>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0302 	and.w	r3, r3, #2
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1f0      	bne.n	8006c30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0308 	and.w	r3, r3, #8
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d03a      	beq.n	8006cd0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d019      	beq.n	8006c96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c62:	4b17      	ldr	r3, [pc, #92]	; (8006cc0 <HAL_RCC_OscConfig+0x274>)
 8006c64:	2201      	movs	r2, #1
 8006c66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c68:	f7fc fcb8 	bl	80035dc <HAL_GetTick>
 8006c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c6e:	e008      	b.n	8006c82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c70:	f7fc fcb4 	bl	80035dc <HAL_GetTick>
 8006c74:	4602      	mov	r2, r0
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d901      	bls.n	8006c82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e15a      	b.n	8006f38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c82:	4b0d      	ldr	r3, [pc, #52]	; (8006cb8 <HAL_RCC_OscConfig+0x26c>)
 8006c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c86:	f003 0302 	and.w	r3, r3, #2
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d0f0      	beq.n	8006c70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006c8e:	2001      	movs	r0, #1
 8006c90:	f000 facc 	bl	800722c <RCC_Delay>
 8006c94:	e01c      	b.n	8006cd0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c96:	4b0a      	ldr	r3, [pc, #40]	; (8006cc0 <HAL_RCC_OscConfig+0x274>)
 8006c98:	2200      	movs	r2, #0
 8006c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c9c:	f7fc fc9e 	bl	80035dc <HAL_GetTick>
 8006ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ca2:	e00f      	b.n	8006cc4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ca4:	f7fc fc9a 	bl	80035dc <HAL_GetTick>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	d908      	bls.n	8006cc4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	e140      	b.n	8006f38 <HAL_RCC_OscConfig+0x4ec>
 8006cb6:	bf00      	nop
 8006cb8:	40021000 	.word	0x40021000
 8006cbc:	42420000 	.word	0x42420000
 8006cc0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cc4:	4b9e      	ldr	r3, [pc, #632]	; (8006f40 <HAL_RCC_OscConfig+0x4f4>)
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc8:	f003 0302 	and.w	r3, r3, #2
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1e9      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0304 	and.w	r3, r3, #4
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f000 80a6 	beq.w	8006e2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ce2:	4b97      	ldr	r3, [pc, #604]	; (8006f40 <HAL_RCC_OscConfig+0x4f4>)
 8006ce4:	69db      	ldr	r3, [r3, #28]
 8006ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d10d      	bne.n	8006d0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cee:	4b94      	ldr	r3, [pc, #592]	; (8006f40 <HAL_RCC_OscConfig+0x4f4>)
 8006cf0:	69db      	ldr	r3, [r3, #28]
 8006cf2:	4a93      	ldr	r2, [pc, #588]	; (8006f40 <HAL_RCC_OscConfig+0x4f4>)
 8006cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cf8:	61d3      	str	r3, [r2, #28]
 8006cfa:	4b91      	ldr	r3, [pc, #580]	; (8006f40 <HAL_RCC_OscConfig+0x4f4>)
 8006cfc:	69db      	ldr	r3, [r3, #28]
 8006cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d02:	60bb      	str	r3, [r7, #8]
 8006d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d06:	2301      	movs	r3, #1
 8006d08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d0a:	4b8e      	ldr	r3, [pc, #568]	; (8006f44 <HAL_RCC_OscConfig+0x4f8>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d118      	bne.n	8006d48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d16:	4b8b      	ldr	r3, [pc, #556]	; (8006f44 <HAL_RCC_OscConfig+0x4f8>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a8a      	ldr	r2, [pc, #552]	; (8006f44 <HAL_RCC_OscConfig+0x4f8>)
 8006d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d22:	f7fc fc5b 	bl	80035dc <HAL_GetTick>
 8006d26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d28:	e008      	b.n	8006d3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d2a:	f7fc fc57 	bl	80035dc <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	2b64      	cmp	r3, #100	; 0x64
 8006d36:	d901      	bls.n	8006d3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e0fd      	b.n	8006f38 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d3c:	4b81      	ldr	r3, [pc, #516]	; (8006f44 <HAL_RCC_OscConfig+0x4f8>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d0f0      	beq.n	8006d2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d106      	bne.n	8006d5e <HAL_RCC_OscConfig+0x312>
 8006d50:	4b7b      	ldr	r3, [pc, #492]	; (8006f40 <HAL_RCC_OscConfig+0x4f4>)
 8006d52:	6a1b      	ldr	r3, [r3, #32]
 8006d54:	4a7a      	ldr	r2, [pc, #488]	; (8006f40 <HAL_RCC_OscConfig+0x4f4>)
 8006d56:	f043 0301 	orr.w	r3, r3, #1
 8006d5a:	6213      	str	r3, [r2, #32]
 8006d5c:	e02d      	b.n	8006dba <HAL_RCC_OscConfig+0x36e>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10c      	bne.n	8006d80 <HAL_RCC_OscConfig+0x334>
 8006d66:	4b76      	ldr	r3, [pc, #472]	; (8006f40 <HAL_RCC_OscConfig+0x4f4>)
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	4a75      	ldr	r2, [pc, #468]	; (8006f40 <HAL_RCC_OscConfig+0x4f4>)
 8006d6c:	f023 0301 	bic.w	r3, r3, #1
 8006d70:	6213      	str	r3, [r2, #32]
 8006d72:	4b73      	ldr	r3, [pc, #460]	; (8006f40 <HAL_RCC_OscConfig+0x4f4>)
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	4a72      	ldr	r2, [pc, #456]	; (8006f40 <HAL_RCC_OscConfig+0x4f4>)
 8006d78:	f023 0304 	bic.w	r3, r3, #4
 8006d7c:	6213      	str	r3, [r2, #32]
 8006d7e:	e01c      	b.n	8006dba <HAL_RCC_OscConfig+0x36e>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	2b05      	cmp	r3, #5
 8006d86:	d10c      	bne.n	8006da2 <HAL_RCC_OscConfig+0x356>
 8006d88:	4b6d      	ldr	r3, [pc, #436]	; (8006f40 <HAL_RCC_OscConfig+0x4f4>)
 8006d8a:	6a1b      	ldr	r3, [r3, #32]
 8006d8c:	4a6c      	ldr	r2, [pc, #432]	; (8006f40 <HAL_RCC_OscConfig+0x4f4>)
 8006d8e:	f043 0304 	orr.w	r3, r3, #4
 8006d92:	6213      	str	r3, [r2, #32]
 8006d94:	4b6a      	ldr	r3, [pc, #424]	; (8006f40 <HAL_RCC_OscConfig+0x4f4>)
 8006d96:	6a1b      	ldr	r3, [r3, #32]
 8006d98:	4a69      	ldr	r2, [pc, #420]	; (8006f40 <HAL_RCC_OscConfig+0x4f4>)
 8006d9a:	f043 0301 	orr.w	r3, r3, #1
 8006d9e:	6213      	str	r3, [r2, #32]
 8006da0:	e00b      	b.n	8006dba <HAL_RCC_OscConfig+0x36e>
 8006da2:	4b67      	ldr	r3, [pc, #412]	; (8006f40 <HAL_RCC_OscConfig+0x4f4>)
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	4a66      	ldr	r2, [pc, #408]	; (8006f40 <HAL_RCC_OscConfig+0x4f4>)
 8006da8:	f023 0301 	bic.w	r3, r3, #1
 8006dac:	6213      	str	r3, [r2, #32]
 8006dae:	4b64      	ldr	r3, [pc, #400]	; (8006f40 <HAL_RCC_OscConfig+0x4f4>)
 8006db0:	6a1b      	ldr	r3, [r3, #32]
 8006db2:	4a63      	ldr	r2, [pc, #396]	; (8006f40 <HAL_RCC_OscConfig+0x4f4>)
 8006db4:	f023 0304 	bic.w	r3, r3, #4
 8006db8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d015      	beq.n	8006dee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dc2:	f7fc fc0b 	bl	80035dc <HAL_GetTick>
 8006dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dc8:	e00a      	b.n	8006de0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dca:	f7fc fc07 	bl	80035dc <HAL_GetTick>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d901      	bls.n	8006de0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e0ab      	b.n	8006f38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006de0:	4b57      	ldr	r3, [pc, #348]	; (8006f40 <HAL_RCC_OscConfig+0x4f4>)
 8006de2:	6a1b      	ldr	r3, [r3, #32]
 8006de4:	f003 0302 	and.w	r3, r3, #2
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d0ee      	beq.n	8006dca <HAL_RCC_OscConfig+0x37e>
 8006dec:	e014      	b.n	8006e18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dee:	f7fc fbf5 	bl	80035dc <HAL_GetTick>
 8006df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006df4:	e00a      	b.n	8006e0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006df6:	f7fc fbf1 	bl	80035dc <HAL_GetTick>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d901      	bls.n	8006e0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e095      	b.n	8006f38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e0c:	4b4c      	ldr	r3, [pc, #304]	; (8006f40 <HAL_RCC_OscConfig+0x4f4>)
 8006e0e:	6a1b      	ldr	r3, [r3, #32]
 8006e10:	f003 0302 	and.w	r3, r3, #2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1ee      	bne.n	8006df6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006e18:	7dfb      	ldrb	r3, [r7, #23]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d105      	bne.n	8006e2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e1e:	4b48      	ldr	r3, [pc, #288]	; (8006f40 <HAL_RCC_OscConfig+0x4f4>)
 8006e20:	69db      	ldr	r3, [r3, #28]
 8006e22:	4a47      	ldr	r2, [pc, #284]	; (8006f40 <HAL_RCC_OscConfig+0x4f4>)
 8006e24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	69db      	ldr	r3, [r3, #28]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f000 8081 	beq.w	8006f36 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e34:	4b42      	ldr	r3, [pc, #264]	; (8006f40 <HAL_RCC_OscConfig+0x4f4>)
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f003 030c 	and.w	r3, r3, #12
 8006e3c:	2b08      	cmp	r3, #8
 8006e3e:	d061      	beq.n	8006f04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	69db      	ldr	r3, [r3, #28]
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d146      	bne.n	8006ed6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e48:	4b3f      	ldr	r3, [pc, #252]	; (8006f48 <HAL_RCC_OscConfig+0x4fc>)
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e4e:	f7fc fbc5 	bl	80035dc <HAL_GetTick>
 8006e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e54:	e008      	b.n	8006e68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e56:	f7fc fbc1 	bl	80035dc <HAL_GetTick>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d901      	bls.n	8006e68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	e067      	b.n	8006f38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e68:	4b35      	ldr	r3, [pc, #212]	; (8006f40 <HAL_RCC_OscConfig+0x4f4>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1f0      	bne.n	8006e56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a1b      	ldr	r3, [r3, #32]
 8006e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e7c:	d108      	bne.n	8006e90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006e7e:	4b30      	ldr	r3, [pc, #192]	; (8006f40 <HAL_RCC_OscConfig+0x4f4>)
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	492d      	ldr	r1, [pc, #180]	; (8006f40 <HAL_RCC_OscConfig+0x4f4>)
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e90:	4b2b      	ldr	r3, [pc, #172]	; (8006f40 <HAL_RCC_OscConfig+0x4f4>)
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a19      	ldr	r1, [r3, #32]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea0:	430b      	orrs	r3, r1
 8006ea2:	4927      	ldr	r1, [pc, #156]	; (8006f40 <HAL_RCC_OscConfig+0x4f4>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ea8:	4b27      	ldr	r3, [pc, #156]	; (8006f48 <HAL_RCC_OscConfig+0x4fc>)
 8006eaa:	2201      	movs	r2, #1
 8006eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eae:	f7fc fb95 	bl	80035dc <HAL_GetTick>
 8006eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006eb4:	e008      	b.n	8006ec8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006eb6:	f7fc fb91 	bl	80035dc <HAL_GetTick>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d901      	bls.n	8006ec8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e037      	b.n	8006f38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006ec8:	4b1d      	ldr	r3, [pc, #116]	; (8006f40 <HAL_RCC_OscConfig+0x4f4>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d0f0      	beq.n	8006eb6 <HAL_RCC_OscConfig+0x46a>
 8006ed4:	e02f      	b.n	8006f36 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ed6:	4b1c      	ldr	r3, [pc, #112]	; (8006f48 <HAL_RCC_OscConfig+0x4fc>)
 8006ed8:	2200      	movs	r2, #0
 8006eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006edc:	f7fc fb7e 	bl	80035dc <HAL_GetTick>
 8006ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ee2:	e008      	b.n	8006ef6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ee4:	f7fc fb7a 	bl	80035dc <HAL_GetTick>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d901      	bls.n	8006ef6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e020      	b.n	8006f38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ef6:	4b12      	ldr	r3, [pc, #72]	; (8006f40 <HAL_RCC_OscConfig+0x4f4>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1f0      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x498>
 8006f02:	e018      	b.n	8006f36 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	69db      	ldr	r3, [r3, #28]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d101      	bne.n	8006f10 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e013      	b.n	8006f38 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006f10:	4b0b      	ldr	r3, [pc, #44]	; (8006f40 <HAL_RCC_OscConfig+0x4f4>)
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6a1b      	ldr	r3, [r3, #32]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d106      	bne.n	8006f32 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d001      	beq.n	8006f36 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e000      	b.n	8006f38 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3718      	adds	r7, #24
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	40021000 	.word	0x40021000
 8006f44:	40007000 	.word	0x40007000
 8006f48:	42420060 	.word	0x42420060

08006f4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d101      	bne.n	8006f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e0d0      	b.n	8007102 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f60:	4b6a      	ldr	r3, [pc, #424]	; (800710c <HAL_RCC_ClockConfig+0x1c0>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0307 	and.w	r3, r3, #7
 8006f68:	683a      	ldr	r2, [r7, #0]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d910      	bls.n	8006f90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f6e:	4b67      	ldr	r3, [pc, #412]	; (800710c <HAL_RCC_ClockConfig+0x1c0>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f023 0207 	bic.w	r2, r3, #7
 8006f76:	4965      	ldr	r1, [pc, #404]	; (800710c <HAL_RCC_ClockConfig+0x1c0>)
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f7e:	4b63      	ldr	r3, [pc, #396]	; (800710c <HAL_RCC_ClockConfig+0x1c0>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0307 	and.w	r3, r3, #7
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d001      	beq.n	8006f90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e0b8      	b.n	8007102 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0302 	and.w	r3, r3, #2
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d020      	beq.n	8006fde <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0304 	and.w	r3, r3, #4
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d005      	beq.n	8006fb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fa8:	4b59      	ldr	r3, [pc, #356]	; (8007110 <HAL_RCC_ClockConfig+0x1c4>)
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	4a58      	ldr	r2, [pc, #352]	; (8007110 <HAL_RCC_ClockConfig+0x1c4>)
 8006fae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006fb2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 0308 	and.w	r3, r3, #8
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d005      	beq.n	8006fcc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fc0:	4b53      	ldr	r3, [pc, #332]	; (8007110 <HAL_RCC_ClockConfig+0x1c4>)
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	4a52      	ldr	r2, [pc, #328]	; (8007110 <HAL_RCC_ClockConfig+0x1c4>)
 8006fc6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006fca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fcc:	4b50      	ldr	r3, [pc, #320]	; (8007110 <HAL_RCC_ClockConfig+0x1c4>)
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	494d      	ldr	r1, [pc, #308]	; (8007110 <HAL_RCC_ClockConfig+0x1c4>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d040      	beq.n	800706c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d107      	bne.n	8007002 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ff2:	4b47      	ldr	r3, [pc, #284]	; (8007110 <HAL_RCC_ClockConfig+0x1c4>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d115      	bne.n	800702a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e07f      	b.n	8007102 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	2b02      	cmp	r3, #2
 8007008:	d107      	bne.n	800701a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800700a:	4b41      	ldr	r3, [pc, #260]	; (8007110 <HAL_RCC_ClockConfig+0x1c4>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d109      	bne.n	800702a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e073      	b.n	8007102 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800701a:	4b3d      	ldr	r3, [pc, #244]	; (8007110 <HAL_RCC_ClockConfig+0x1c4>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0302 	and.w	r3, r3, #2
 8007022:	2b00      	cmp	r3, #0
 8007024:	d101      	bne.n	800702a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e06b      	b.n	8007102 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800702a:	4b39      	ldr	r3, [pc, #228]	; (8007110 <HAL_RCC_ClockConfig+0x1c4>)
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	f023 0203 	bic.w	r2, r3, #3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	4936      	ldr	r1, [pc, #216]	; (8007110 <HAL_RCC_ClockConfig+0x1c4>)
 8007038:	4313      	orrs	r3, r2
 800703a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800703c:	f7fc face 	bl	80035dc <HAL_GetTick>
 8007040:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007042:	e00a      	b.n	800705a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007044:	f7fc faca 	bl	80035dc <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007052:	4293      	cmp	r3, r2
 8007054:	d901      	bls.n	800705a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e053      	b.n	8007102 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800705a:	4b2d      	ldr	r3, [pc, #180]	; (8007110 <HAL_RCC_ClockConfig+0x1c4>)
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f003 020c 	and.w	r2, r3, #12
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	429a      	cmp	r2, r3
 800706a:	d1eb      	bne.n	8007044 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800706c:	4b27      	ldr	r3, [pc, #156]	; (800710c <HAL_RCC_ClockConfig+0x1c0>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0307 	and.w	r3, r3, #7
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	429a      	cmp	r2, r3
 8007078:	d210      	bcs.n	800709c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800707a:	4b24      	ldr	r3, [pc, #144]	; (800710c <HAL_RCC_ClockConfig+0x1c0>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f023 0207 	bic.w	r2, r3, #7
 8007082:	4922      	ldr	r1, [pc, #136]	; (800710c <HAL_RCC_ClockConfig+0x1c0>)
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	4313      	orrs	r3, r2
 8007088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800708a:	4b20      	ldr	r3, [pc, #128]	; (800710c <HAL_RCC_ClockConfig+0x1c0>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0307 	and.w	r3, r3, #7
 8007092:	683a      	ldr	r2, [r7, #0]
 8007094:	429a      	cmp	r2, r3
 8007096:	d001      	beq.n	800709c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e032      	b.n	8007102 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0304 	and.w	r3, r3, #4
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d008      	beq.n	80070ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070a8:	4b19      	ldr	r3, [pc, #100]	; (8007110 <HAL_RCC_ClockConfig+0x1c4>)
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	4916      	ldr	r1, [pc, #88]	; (8007110 <HAL_RCC_ClockConfig+0x1c4>)
 80070b6:	4313      	orrs	r3, r2
 80070b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0308 	and.w	r3, r3, #8
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d009      	beq.n	80070da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80070c6:	4b12      	ldr	r3, [pc, #72]	; (8007110 <HAL_RCC_ClockConfig+0x1c4>)
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	00db      	lsls	r3, r3, #3
 80070d4:	490e      	ldr	r1, [pc, #56]	; (8007110 <HAL_RCC_ClockConfig+0x1c4>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80070da:	f000 f821 	bl	8007120 <HAL_RCC_GetSysClockFreq>
 80070de:	4602      	mov	r2, r0
 80070e0:	4b0b      	ldr	r3, [pc, #44]	; (8007110 <HAL_RCC_ClockConfig+0x1c4>)
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	091b      	lsrs	r3, r3, #4
 80070e6:	f003 030f 	and.w	r3, r3, #15
 80070ea:	490a      	ldr	r1, [pc, #40]	; (8007114 <HAL_RCC_ClockConfig+0x1c8>)
 80070ec:	5ccb      	ldrb	r3, [r1, r3]
 80070ee:	fa22 f303 	lsr.w	r3, r2, r3
 80070f2:	4a09      	ldr	r2, [pc, #36]	; (8007118 <HAL_RCC_ClockConfig+0x1cc>)
 80070f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80070f6:	4b09      	ldr	r3, [pc, #36]	; (800711c <HAL_RCC_ClockConfig+0x1d0>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fc fa2c 	bl	8003558 <HAL_InitTick>

  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	40022000 	.word	0x40022000
 8007110:	40021000 	.word	0x40021000
 8007114:	0800d940 	.word	0x0800d940
 8007118:	20000004 	.word	0x20000004
 800711c:	20000008 	.word	0x20000008

08007120 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007120:	b480      	push	{r7}
 8007122:	b087      	sub	sp, #28
 8007124:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007126:	2300      	movs	r3, #0
 8007128:	60fb      	str	r3, [r7, #12]
 800712a:	2300      	movs	r3, #0
 800712c:	60bb      	str	r3, [r7, #8]
 800712e:	2300      	movs	r3, #0
 8007130:	617b      	str	r3, [r7, #20]
 8007132:	2300      	movs	r3, #0
 8007134:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007136:	2300      	movs	r3, #0
 8007138:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800713a:	4b1e      	ldr	r3, [pc, #120]	; (80071b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f003 030c 	and.w	r3, r3, #12
 8007146:	2b04      	cmp	r3, #4
 8007148:	d002      	beq.n	8007150 <HAL_RCC_GetSysClockFreq+0x30>
 800714a:	2b08      	cmp	r3, #8
 800714c:	d003      	beq.n	8007156 <HAL_RCC_GetSysClockFreq+0x36>
 800714e:	e027      	b.n	80071a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007150:	4b19      	ldr	r3, [pc, #100]	; (80071b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8007152:	613b      	str	r3, [r7, #16]
      break;
 8007154:	e027      	b.n	80071a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	0c9b      	lsrs	r3, r3, #18
 800715a:	f003 030f 	and.w	r3, r3, #15
 800715e:	4a17      	ldr	r2, [pc, #92]	; (80071bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8007160:	5cd3      	ldrb	r3, [r2, r3]
 8007162:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d010      	beq.n	8007190 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800716e:	4b11      	ldr	r3, [pc, #68]	; (80071b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	0c5b      	lsrs	r3, r3, #17
 8007174:	f003 0301 	and.w	r3, r3, #1
 8007178:	4a11      	ldr	r2, [pc, #68]	; (80071c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800717a:	5cd3      	ldrb	r3, [r2, r3]
 800717c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a0d      	ldr	r2, [pc, #52]	; (80071b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8007182:	fb02 f203 	mul.w	r2, r2, r3
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	fbb2 f3f3 	udiv	r3, r2, r3
 800718c:	617b      	str	r3, [r7, #20]
 800718e:	e004      	b.n	800719a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a0c      	ldr	r2, [pc, #48]	; (80071c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007194:	fb02 f303 	mul.w	r3, r2, r3
 8007198:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	613b      	str	r3, [r7, #16]
      break;
 800719e:	e002      	b.n	80071a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80071a0:	4b05      	ldr	r3, [pc, #20]	; (80071b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80071a2:	613b      	str	r3, [r7, #16]
      break;
 80071a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80071a6:	693b      	ldr	r3, [r7, #16]
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	371c      	adds	r7, #28
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bc80      	pop	{r7}
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	40021000 	.word	0x40021000
 80071b8:	007a1200 	.word	0x007a1200
 80071bc:	0800d958 	.word	0x0800d958
 80071c0:	0800d968 	.word	0x0800d968
 80071c4:	003d0900 	.word	0x003d0900

080071c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071c8:	b480      	push	{r7}
 80071ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071cc:	4b02      	ldr	r3, [pc, #8]	; (80071d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80071ce:	681b      	ldr	r3, [r3, #0]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bc80      	pop	{r7}
 80071d6:	4770      	bx	lr
 80071d8:	20000004 	.word	0x20000004

080071dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80071e0:	f7ff fff2 	bl	80071c8 <HAL_RCC_GetHCLKFreq>
 80071e4:	4602      	mov	r2, r0
 80071e6:	4b05      	ldr	r3, [pc, #20]	; (80071fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	0a1b      	lsrs	r3, r3, #8
 80071ec:	f003 0307 	and.w	r3, r3, #7
 80071f0:	4903      	ldr	r1, [pc, #12]	; (8007200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071f2:	5ccb      	ldrb	r3, [r1, r3]
 80071f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	40021000 	.word	0x40021000
 8007200:	0800d950 	.word	0x0800d950

08007204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007208:	f7ff ffde 	bl	80071c8 <HAL_RCC_GetHCLKFreq>
 800720c:	4602      	mov	r2, r0
 800720e:	4b05      	ldr	r3, [pc, #20]	; (8007224 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	0adb      	lsrs	r3, r3, #11
 8007214:	f003 0307 	and.w	r3, r3, #7
 8007218:	4903      	ldr	r1, [pc, #12]	; (8007228 <HAL_RCC_GetPCLK2Freq+0x24>)
 800721a:	5ccb      	ldrb	r3, [r1, r3]
 800721c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007220:	4618      	mov	r0, r3
 8007222:	bd80      	pop	{r7, pc}
 8007224:	40021000 	.word	0x40021000
 8007228:	0800d950 	.word	0x0800d950

0800722c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800722c:	b480      	push	{r7}
 800722e:	b085      	sub	sp, #20
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007234:	4b0a      	ldr	r3, [pc, #40]	; (8007260 <RCC_Delay+0x34>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a0a      	ldr	r2, [pc, #40]	; (8007264 <RCC_Delay+0x38>)
 800723a:	fba2 2303 	umull	r2, r3, r2, r3
 800723e:	0a5b      	lsrs	r3, r3, #9
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	fb02 f303 	mul.w	r3, r2, r3
 8007246:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007248:	bf00      	nop
  }
  while (Delay --);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	1e5a      	subs	r2, r3, #1
 800724e:	60fa      	str	r2, [r7, #12]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1f9      	bne.n	8007248 <RCC_Delay+0x1c>
}
 8007254:	bf00      	nop
 8007256:	bf00      	nop
 8007258:	3714      	adds	r7, #20
 800725a:	46bd      	mov	sp, r7
 800725c:	bc80      	pop	{r7}
 800725e:	4770      	bx	lr
 8007260:	20000004 	.word	0x20000004
 8007264:	10624dd3 	.word	0x10624dd3

08007268 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007270:	2300      	movs	r3, #0
 8007272:	613b      	str	r3, [r7, #16]
 8007274:	2300      	movs	r3, #0
 8007276:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	2b00      	cmp	r3, #0
 8007282:	d07d      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007284:	2300      	movs	r3, #0
 8007286:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007288:	4b4f      	ldr	r3, [pc, #316]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10d      	bne.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007294:	4b4c      	ldr	r3, [pc, #304]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007296:	69db      	ldr	r3, [r3, #28]
 8007298:	4a4b      	ldr	r2, [pc, #300]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800729a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800729e:	61d3      	str	r3, [r2, #28]
 80072a0:	4b49      	ldr	r3, [pc, #292]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072a2:	69db      	ldr	r3, [r3, #28]
 80072a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072a8:	60bb      	str	r3, [r7, #8]
 80072aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072ac:	2301      	movs	r3, #1
 80072ae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072b0:	4b46      	ldr	r3, [pc, #280]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d118      	bne.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80072bc:	4b43      	ldr	r3, [pc, #268]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a42      	ldr	r2, [pc, #264]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072c8:	f7fc f988 	bl	80035dc <HAL_GetTick>
 80072cc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072ce:	e008      	b.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072d0:	f7fc f984 	bl	80035dc <HAL_GetTick>
 80072d4:	4602      	mov	r2, r0
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	2b64      	cmp	r3, #100	; 0x64
 80072dc:	d901      	bls.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80072de:	2303      	movs	r3, #3
 80072e0:	e06d      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072e2:	4b3a      	ldr	r3, [pc, #232]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d0f0      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80072ee:	4b36      	ldr	r3, [pc, #216]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072f6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d02e      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	429a      	cmp	r2, r3
 800730a:	d027      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800730c:	4b2e      	ldr	r3, [pc, #184]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800730e:	6a1b      	ldr	r3, [r3, #32]
 8007310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007314:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007316:	4b2e      	ldr	r3, [pc, #184]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007318:	2201      	movs	r2, #1
 800731a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800731c:	4b2c      	ldr	r3, [pc, #176]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800731e:	2200      	movs	r2, #0
 8007320:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007322:	4a29      	ldr	r2, [pc, #164]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f003 0301 	and.w	r3, r3, #1
 800732e:	2b00      	cmp	r3, #0
 8007330:	d014      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007332:	f7fc f953 	bl	80035dc <HAL_GetTick>
 8007336:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007338:	e00a      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800733a:	f7fc f94f 	bl	80035dc <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	f241 3288 	movw	r2, #5000	; 0x1388
 8007348:	4293      	cmp	r3, r2
 800734a:	d901      	bls.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800734c:	2303      	movs	r3, #3
 800734e:	e036      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007350:	4b1d      	ldr	r3, [pc, #116]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007352:	6a1b      	ldr	r3, [r3, #32]
 8007354:	f003 0302 	and.w	r3, r3, #2
 8007358:	2b00      	cmp	r3, #0
 800735a:	d0ee      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800735c:	4b1a      	ldr	r3, [pc, #104]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800735e:	6a1b      	ldr	r3, [r3, #32]
 8007360:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	4917      	ldr	r1, [pc, #92]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800736a:	4313      	orrs	r3, r2
 800736c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800736e:	7dfb      	ldrb	r3, [r7, #23]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d105      	bne.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007374:	4b14      	ldr	r3, [pc, #80]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007376:	69db      	ldr	r3, [r3, #28]
 8007378:	4a13      	ldr	r2, [pc, #76]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800737a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800737e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0302 	and.w	r3, r3, #2
 8007388:	2b00      	cmp	r3, #0
 800738a:	d008      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800738c:	4b0e      	ldr	r3, [pc, #56]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	490b      	ldr	r1, [pc, #44]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800739a:	4313      	orrs	r3, r2
 800739c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0310 	and.w	r3, r3, #16
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d008      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80073aa:	4b07      	ldr	r3, [pc, #28]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	4904      	ldr	r1, [pc, #16]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073b8:	4313      	orrs	r3, r2
 80073ba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3718      	adds	r7, #24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	40021000 	.word	0x40021000
 80073cc:	40007000 	.word	0x40007000
 80073d0:	42420440 	.word	0x42420440

080073d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d101      	bne.n	80073e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e041      	b.n	800746a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d106      	bne.n	8007400 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f7fb fe90 	bl	8003120 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2202      	movs	r2, #2
 8007404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	3304      	adds	r3, #4
 8007410:	4619      	mov	r1, r3
 8007412:	4610      	mov	r0, r2
 8007414:	f000 f992 	bl	800773c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
	...

08007474 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d109      	bne.n	8007498 <HAL_TIM_PWM_Start+0x24>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800748a:	b2db      	uxtb	r3, r3
 800748c:	2b01      	cmp	r3, #1
 800748e:	bf14      	ite	ne
 8007490:	2301      	movne	r3, #1
 8007492:	2300      	moveq	r3, #0
 8007494:	b2db      	uxtb	r3, r3
 8007496:	e022      	b.n	80074de <HAL_TIM_PWM_Start+0x6a>
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	2b04      	cmp	r3, #4
 800749c:	d109      	bne.n	80074b2 <HAL_TIM_PWM_Start+0x3e>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	bf14      	ite	ne
 80074aa:	2301      	movne	r3, #1
 80074ac:	2300      	moveq	r3, #0
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	e015      	b.n	80074de <HAL_TIM_PWM_Start+0x6a>
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2b08      	cmp	r3, #8
 80074b6:	d109      	bne.n	80074cc <HAL_TIM_PWM_Start+0x58>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	bf14      	ite	ne
 80074c4:	2301      	movne	r3, #1
 80074c6:	2300      	moveq	r3, #0
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	e008      	b.n	80074de <HAL_TIM_PWM_Start+0x6a>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	bf14      	ite	ne
 80074d8:	2301      	movne	r3, #1
 80074da:	2300      	moveq	r3, #0
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d001      	beq.n	80074e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e05e      	b.n	80075a4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d104      	bne.n	80074f6 <HAL_TIM_PWM_Start+0x82>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2202      	movs	r2, #2
 80074f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074f4:	e013      	b.n	800751e <HAL_TIM_PWM_Start+0xaa>
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	2b04      	cmp	r3, #4
 80074fa:	d104      	bne.n	8007506 <HAL_TIM_PWM_Start+0x92>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2202      	movs	r2, #2
 8007500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007504:	e00b      	b.n	800751e <HAL_TIM_PWM_Start+0xaa>
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	2b08      	cmp	r3, #8
 800750a:	d104      	bne.n	8007516 <HAL_TIM_PWM_Start+0xa2>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2202      	movs	r2, #2
 8007510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007514:	e003      	b.n	800751e <HAL_TIM_PWM_Start+0xaa>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2202      	movs	r2, #2
 800751a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2201      	movs	r2, #1
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	4618      	mov	r0, r3
 8007528:	f000 fafe 	bl	8007b28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a1e      	ldr	r2, [pc, #120]	; (80075ac <HAL_TIM_PWM_Start+0x138>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d107      	bne.n	8007546 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007544:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a18      	ldr	r2, [pc, #96]	; (80075ac <HAL_TIM_PWM_Start+0x138>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d00e      	beq.n	800756e <HAL_TIM_PWM_Start+0xfa>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007558:	d009      	beq.n	800756e <HAL_TIM_PWM_Start+0xfa>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a14      	ldr	r2, [pc, #80]	; (80075b0 <HAL_TIM_PWM_Start+0x13c>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d004      	beq.n	800756e <HAL_TIM_PWM_Start+0xfa>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a12      	ldr	r2, [pc, #72]	; (80075b4 <HAL_TIM_PWM_Start+0x140>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d111      	bne.n	8007592 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	f003 0307 	and.w	r3, r3, #7
 8007578:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2b06      	cmp	r3, #6
 800757e:	d010      	beq.n	80075a2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f042 0201 	orr.w	r2, r2, #1
 800758e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007590:	e007      	b.n	80075a2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f042 0201 	orr.w	r2, r2, #1
 80075a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	40012c00 	.word	0x40012c00
 80075b0:	40000400 	.word	0x40000400
 80075b4:	40000800 	.word	0x40000800

080075b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b086      	sub	sp, #24
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075c4:	2300      	movs	r3, #0
 80075c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d101      	bne.n	80075d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80075d2:	2302      	movs	r3, #2
 80075d4:	e0ae      	b.n	8007734 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2b0c      	cmp	r3, #12
 80075e2:	f200 809f 	bhi.w	8007724 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80075e6:	a201      	add	r2, pc, #4	; (adr r2, 80075ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80075e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ec:	08007621 	.word	0x08007621
 80075f0:	08007725 	.word	0x08007725
 80075f4:	08007725 	.word	0x08007725
 80075f8:	08007725 	.word	0x08007725
 80075fc:	08007661 	.word	0x08007661
 8007600:	08007725 	.word	0x08007725
 8007604:	08007725 	.word	0x08007725
 8007608:	08007725 	.word	0x08007725
 800760c:	080076a3 	.word	0x080076a3
 8007610:	08007725 	.word	0x08007725
 8007614:	08007725 	.word	0x08007725
 8007618:	08007725 	.word	0x08007725
 800761c:	080076e3 	.word	0x080076e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68b9      	ldr	r1, [r7, #8]
 8007626:	4618      	mov	r0, r3
 8007628:	f000 f8f6 	bl	8007818 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	699a      	ldr	r2, [r3, #24]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f042 0208 	orr.w	r2, r2, #8
 800763a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	699a      	ldr	r2, [r3, #24]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f022 0204 	bic.w	r2, r2, #4
 800764a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	6999      	ldr	r1, [r3, #24]
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	691a      	ldr	r2, [r3, #16]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	430a      	orrs	r2, r1
 800765c:	619a      	str	r2, [r3, #24]
      break;
 800765e:	e064      	b.n	800772a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68b9      	ldr	r1, [r7, #8]
 8007666:	4618      	mov	r0, r3
 8007668:	f000 f93c 	bl	80078e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	699a      	ldr	r2, [r3, #24]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800767a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	699a      	ldr	r2, [r3, #24]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800768a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	6999      	ldr	r1, [r3, #24]
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	021a      	lsls	r2, r3, #8
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	430a      	orrs	r2, r1
 800769e:	619a      	str	r2, [r3, #24]
      break;
 80076a0:	e043      	b.n	800772a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68b9      	ldr	r1, [r7, #8]
 80076a8:	4618      	mov	r0, r3
 80076aa:	f000 f985 	bl	80079b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	69da      	ldr	r2, [r3, #28]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f042 0208 	orr.w	r2, r2, #8
 80076bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	69da      	ldr	r2, [r3, #28]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f022 0204 	bic.w	r2, r2, #4
 80076cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	69d9      	ldr	r1, [r3, #28]
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	691a      	ldr	r2, [r3, #16]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	430a      	orrs	r2, r1
 80076de:	61da      	str	r2, [r3, #28]
      break;
 80076e0:	e023      	b.n	800772a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68b9      	ldr	r1, [r7, #8]
 80076e8:	4618      	mov	r0, r3
 80076ea:	f000 f9cf 	bl	8007a8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	69da      	ldr	r2, [r3, #28]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	69da      	ldr	r2, [r3, #28]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800770c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	69d9      	ldr	r1, [r3, #28]
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	691b      	ldr	r3, [r3, #16]
 8007718:	021a      	lsls	r2, r3, #8
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	430a      	orrs	r2, r1
 8007720:	61da      	str	r2, [r3, #28]
      break;
 8007722:	e002      	b.n	800772a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	75fb      	strb	r3, [r7, #23]
      break;
 8007728:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007732:	7dfb      	ldrb	r3, [r7, #23]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3718      	adds	r7, #24
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4a2f      	ldr	r2, [pc, #188]	; (800780c <TIM_Base_SetConfig+0xd0>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d00b      	beq.n	800776c <TIM_Base_SetConfig+0x30>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800775a:	d007      	beq.n	800776c <TIM_Base_SetConfig+0x30>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a2c      	ldr	r2, [pc, #176]	; (8007810 <TIM_Base_SetConfig+0xd4>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d003      	beq.n	800776c <TIM_Base_SetConfig+0x30>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a2b      	ldr	r2, [pc, #172]	; (8007814 <TIM_Base_SetConfig+0xd8>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d108      	bne.n	800777e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007772:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	4313      	orrs	r3, r2
 800777c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a22      	ldr	r2, [pc, #136]	; (800780c <TIM_Base_SetConfig+0xd0>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d00b      	beq.n	800779e <TIM_Base_SetConfig+0x62>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800778c:	d007      	beq.n	800779e <TIM_Base_SetConfig+0x62>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a1f      	ldr	r2, [pc, #124]	; (8007810 <TIM_Base_SetConfig+0xd4>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d003      	beq.n	800779e <TIM_Base_SetConfig+0x62>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a1e      	ldr	r2, [pc, #120]	; (8007814 <TIM_Base_SetConfig+0xd8>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d108      	bne.n	80077b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	689a      	ldr	r2, [r3, #8]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a0d      	ldr	r2, [pc, #52]	; (800780c <TIM_Base_SetConfig+0xd0>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d103      	bne.n	80077e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	691a      	ldr	r2, [r3, #16]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d005      	beq.n	8007802 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	f023 0201 	bic.w	r2, r3, #1
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	611a      	str	r2, [r3, #16]
  }
}
 8007802:	bf00      	nop
 8007804:	3714      	adds	r7, #20
 8007806:	46bd      	mov	sp, r7
 8007808:	bc80      	pop	{r7}
 800780a:	4770      	bx	lr
 800780c:	40012c00 	.word	0x40012c00
 8007810:	40000400 	.word	0x40000400
 8007814:	40000800 	.word	0x40000800

08007818 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007818:	b480      	push	{r7}
 800781a:	b087      	sub	sp, #28
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a1b      	ldr	r3, [r3, #32]
 8007826:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a1b      	ldr	r3, [r3, #32]
 800782c:	f023 0201 	bic.w	r2, r3, #1
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f023 0303 	bic.w	r3, r3, #3
 800784e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	4313      	orrs	r3, r2
 8007858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	f023 0302 	bic.w	r3, r3, #2
 8007860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	697a      	ldr	r2, [r7, #20]
 8007868:	4313      	orrs	r3, r2
 800786a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a1c      	ldr	r2, [pc, #112]	; (80078e0 <TIM_OC1_SetConfig+0xc8>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d10c      	bne.n	800788e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	f023 0308 	bic.w	r3, r3, #8
 800787a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	697a      	ldr	r2, [r7, #20]
 8007882:	4313      	orrs	r3, r2
 8007884:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	f023 0304 	bic.w	r3, r3, #4
 800788c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a13      	ldr	r2, [pc, #76]	; (80078e0 <TIM_OC1_SetConfig+0xc8>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d111      	bne.n	80078ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800789c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	693a      	ldr	r2, [r7, #16]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	693a      	ldr	r2, [r7, #16]
 80078be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	685a      	ldr	r2, [r3, #4]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	697a      	ldr	r2, [r7, #20]
 80078d2:	621a      	str	r2, [r3, #32]
}
 80078d4:	bf00      	nop
 80078d6:	371c      	adds	r7, #28
 80078d8:	46bd      	mov	sp, r7
 80078da:	bc80      	pop	{r7}
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	40012c00 	.word	0x40012c00

080078e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b087      	sub	sp, #28
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a1b      	ldr	r3, [r3, #32]
 80078f8:	f023 0210 	bic.w	r2, r3, #16
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800791a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	021b      	lsls	r3, r3, #8
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	4313      	orrs	r3, r2
 8007926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	f023 0320 	bic.w	r3, r3, #32
 800792e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	011b      	lsls	r3, r3, #4
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	4313      	orrs	r3, r2
 800793a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a1d      	ldr	r2, [pc, #116]	; (80079b4 <TIM_OC2_SetConfig+0xd0>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d10d      	bne.n	8007960 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800794a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	011b      	lsls	r3, r3, #4
 8007952:	697a      	ldr	r2, [r7, #20]
 8007954:	4313      	orrs	r3, r2
 8007956:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800795e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a14      	ldr	r2, [pc, #80]	; (80079b4 <TIM_OC2_SetConfig+0xd0>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d113      	bne.n	8007990 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800796e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007976:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	695b      	ldr	r3, [r3, #20]
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	693a      	ldr	r2, [r7, #16]
 8007980:	4313      	orrs	r3, r2
 8007982:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	693a      	ldr	r2, [r7, #16]
 800798c:	4313      	orrs	r3, r2
 800798e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	693a      	ldr	r2, [r7, #16]
 8007994:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	685a      	ldr	r2, [r3, #4]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	697a      	ldr	r2, [r7, #20]
 80079a8:	621a      	str	r2, [r3, #32]
}
 80079aa:	bf00      	nop
 80079ac:	371c      	adds	r7, #28
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bc80      	pop	{r7}
 80079b2:	4770      	bx	lr
 80079b4:	40012c00 	.word	0x40012c00

080079b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b087      	sub	sp, #28
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a1b      	ldr	r3, [r3, #32]
 80079cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	69db      	ldr	r3, [r3, #28]
 80079de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f023 0303 	bic.w	r3, r3, #3
 80079ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	021b      	lsls	r3, r3, #8
 8007a08:	697a      	ldr	r2, [r7, #20]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a1d      	ldr	r2, [pc, #116]	; (8007a88 <TIM_OC3_SetConfig+0xd0>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d10d      	bne.n	8007a32 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	021b      	lsls	r3, r3, #8
 8007a24:	697a      	ldr	r2, [r7, #20]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a14      	ldr	r2, [pc, #80]	; (8007a88 <TIM_OC3_SetConfig+0xd0>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d113      	bne.n	8007a62 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	011b      	lsls	r3, r3, #4
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	011b      	lsls	r3, r3, #4
 8007a5c:	693a      	ldr	r2, [r7, #16]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	685a      	ldr	r2, [r3, #4]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	621a      	str	r2, [r3, #32]
}
 8007a7c:	bf00      	nop
 8007a7e:	371c      	adds	r7, #28
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bc80      	pop	{r7}
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop
 8007a88:	40012c00 	.word	0x40012c00

08007a8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a1b      	ldr	r3, [r3, #32]
 8007aa0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	69db      	ldr	r3, [r3, #28]
 8007ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ac2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	021b      	lsls	r3, r3, #8
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ad6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	031b      	lsls	r3, r3, #12
 8007ade:	693a      	ldr	r2, [r7, #16]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a0f      	ldr	r2, [pc, #60]	; (8007b24 <TIM_OC4_SetConfig+0x98>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d109      	bne.n	8007b00 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007af2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	695b      	ldr	r3, [r3, #20]
 8007af8:	019b      	lsls	r3, r3, #6
 8007afa:	697a      	ldr	r2, [r7, #20]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	621a      	str	r2, [r3, #32]
}
 8007b1a:	bf00      	nop
 8007b1c:	371c      	adds	r7, #28
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bc80      	pop	{r7}
 8007b22:	4770      	bx	lr
 8007b24:	40012c00 	.word	0x40012c00

08007b28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b087      	sub	sp, #28
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	f003 031f 	and.w	r3, r3, #31
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6a1a      	ldr	r2, [r3, #32]
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	43db      	mvns	r3, r3
 8007b4a:	401a      	ands	r2, r3
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6a1a      	ldr	r2, [r3, #32]
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	f003 031f 	and.w	r3, r3, #31
 8007b5a:	6879      	ldr	r1, [r7, #4]
 8007b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b60:	431a      	orrs	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	621a      	str	r2, [r3, #32]
}
 8007b66:	bf00      	nop
 8007b68:	371c      	adds	r7, #28
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bc80      	pop	{r7}
 8007b6e:	4770      	bx	lr

08007b70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d101      	bne.n	8007b88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b84:	2302      	movs	r3, #2
 8007b86:	e046      	b.n	8007c16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2202      	movs	r2, #2
 8007b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a16      	ldr	r2, [pc, #88]	; (8007c20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d00e      	beq.n	8007bea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bd4:	d009      	beq.n	8007bea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a12      	ldr	r2, [pc, #72]	; (8007c24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d004      	beq.n	8007bea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a10      	ldr	r2, [pc, #64]	; (8007c28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d10c      	bne.n	8007c04 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	68ba      	ldr	r2, [r7, #8]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68ba      	ldr	r2, [r7, #8]
 8007c02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3714      	adds	r7, #20
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bc80      	pop	{r7}
 8007c1e:	4770      	bx	lr
 8007c20:	40012c00 	.word	0x40012c00
 8007c24:	40000400 	.word	0x40000400
 8007c28:	40000800 	.word	0x40000800

08007c2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c36:	2300      	movs	r3, #0
 8007c38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d101      	bne.n	8007c48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c44:	2302      	movs	r3, #2
 8007c46:	e03d      	b.n	8007cc4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	695b      	ldr	r3, [r3, #20]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	69db      	ldr	r3, [r3, #28]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bc80      	pop	{r7}
 8007ccc:	4770      	bx	lr

08007cce <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b082      	sub	sp, #8
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d101      	bne.n	8007ce0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e042      	b.n	8007d66 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d106      	bne.n	8007cfa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f7fb fab3 	bl	8003260 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2224      	movs	r2, #36	; 0x24
 8007cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68da      	ldr	r2, [r3, #12]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d10:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f972 	bl	8007ffc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	691a      	ldr	r2, [r3, #16]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d26:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	695a      	ldr	r2, [r3, #20]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d36:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68da      	ldr	r2, [r3, #12]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d46:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2220      	movs	r2, #32
 8007d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2220      	movs	r2, #32
 8007d5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b08a      	sub	sp, #40	; 0x28
 8007d72:	af02      	add	r7, sp, #8
 8007d74:	60f8      	str	r0, [r7, #12]
 8007d76:	60b9      	str	r1, [r7, #8]
 8007d78:	603b      	str	r3, [r7, #0]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	2b20      	cmp	r3, #32
 8007d8c:	d175      	bne.n	8007e7a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d002      	beq.n	8007d9a <HAL_UART_Transmit+0x2c>
 8007d94:	88fb      	ldrh	r3, [r7, #6]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d101      	bne.n	8007d9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e06e      	b.n	8007e7c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2200      	movs	r2, #0
 8007da2:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2221      	movs	r2, #33	; 0x21
 8007da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007dac:	f7fb fc16 	bl	80035dc <HAL_GetTick>
 8007db0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	88fa      	ldrh	r2, [r7, #6]
 8007db6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	88fa      	ldrh	r2, [r7, #6]
 8007dbc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dc6:	d108      	bne.n	8007dda <HAL_UART_Transmit+0x6c>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	691b      	ldr	r3, [r3, #16]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d104      	bne.n	8007dda <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	61bb      	str	r3, [r7, #24]
 8007dd8:	e003      	b.n	8007de2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007dde:	2300      	movs	r3, #0
 8007de0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007de2:	e02e      	b.n	8007e42 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	9300      	str	r3, [sp, #0]
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	2200      	movs	r2, #0
 8007dec:	2180      	movs	r1, #128	; 0x80
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f000 f848 	bl	8007e84 <UART_WaitOnFlagUntilTimeout>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d005      	beq.n	8007e06 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2220      	movs	r2, #32
 8007dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8007e02:	2303      	movs	r3, #3
 8007e04:	e03a      	b.n	8007e7c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10b      	bne.n	8007e24 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	881b      	ldrh	r3, [r3, #0]
 8007e10:	461a      	mov	r2, r3
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e1a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	3302      	adds	r3, #2
 8007e20:	61bb      	str	r3, [r7, #24]
 8007e22:	e007      	b.n	8007e34 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	781a      	ldrb	r2, [r3, #0]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	3301      	adds	r3, #1
 8007e32:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1cb      	bne.n	8007de4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	2200      	movs	r2, #0
 8007e54:	2140      	movs	r1, #64	; 0x40
 8007e56:	68f8      	ldr	r0, [r7, #12]
 8007e58:	f000 f814 	bl	8007e84 <UART_WaitOnFlagUntilTimeout>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d005      	beq.n	8007e6e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2220      	movs	r2, #32
 8007e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	e006      	b.n	8007e7c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2220      	movs	r2, #32
 8007e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007e76:	2300      	movs	r3, #0
 8007e78:	e000      	b.n	8007e7c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007e7a:	2302      	movs	r3, #2
  }
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3720      	adds	r7, #32
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b086      	sub	sp, #24
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	603b      	str	r3, [r7, #0]
 8007e90:	4613      	mov	r3, r2
 8007e92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e94:	e03b      	b.n	8007f0e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e96:	6a3b      	ldr	r3, [r7, #32]
 8007e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e9c:	d037      	beq.n	8007f0e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e9e:	f7fb fb9d 	bl	80035dc <HAL_GetTick>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	1ad3      	subs	r3, r2, r3
 8007ea8:	6a3a      	ldr	r2, [r7, #32]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d302      	bcc.n	8007eb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007eae:	6a3b      	ldr	r3, [r7, #32]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d101      	bne.n	8007eb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e03a      	b.n	8007f2e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	f003 0304 	and.w	r3, r3, #4
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d023      	beq.n	8007f0e <UART_WaitOnFlagUntilTimeout+0x8a>
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	2b80      	cmp	r3, #128	; 0x80
 8007eca:	d020      	beq.n	8007f0e <UART_WaitOnFlagUntilTimeout+0x8a>
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	2b40      	cmp	r3, #64	; 0x40
 8007ed0:	d01d      	beq.n	8007f0e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 0308 	and.w	r3, r3, #8
 8007edc:	2b08      	cmp	r3, #8
 8007ede:	d116      	bne.n	8007f0e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	617b      	str	r3, [r7, #20]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	617b      	str	r3, [r7, #20]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	617b      	str	r3, [r7, #20]
 8007ef4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f000 f81d 	bl	8007f36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2208      	movs	r2, #8
 8007f00:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e00f      	b.n	8007f2e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	4013      	ands	r3, r2
 8007f18:	68ba      	ldr	r2, [r7, #8]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	bf0c      	ite	eq
 8007f1e:	2301      	moveq	r3, #1
 8007f20:	2300      	movne	r3, #0
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	461a      	mov	r2, r3
 8007f26:	79fb      	ldrb	r3, [r7, #7]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d0b4      	beq.n	8007e96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3718      	adds	r7, #24
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f36:	b480      	push	{r7}
 8007f38:	b095      	sub	sp, #84	; 0x54
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	330c      	adds	r3, #12
 8007f44:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f48:	e853 3f00 	ldrex	r3, [r3]
 8007f4c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	330c      	adds	r3, #12
 8007f5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f5e:	643a      	str	r2, [r7, #64]	; 0x40
 8007f60:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f66:	e841 2300 	strex	r3, r2, [r1]
 8007f6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1e5      	bne.n	8007f3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	3314      	adds	r3, #20
 8007f78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7a:	6a3b      	ldr	r3, [r7, #32]
 8007f7c:	e853 3f00 	ldrex	r3, [r3]
 8007f80:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	f023 0301 	bic.w	r3, r3, #1
 8007f88:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	3314      	adds	r3, #20
 8007f90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f9a:	e841 2300 	strex	r3, r2, [r1]
 8007f9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1e5      	bne.n	8007f72 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d119      	bne.n	8007fe2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	330c      	adds	r3, #12
 8007fb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	e853 3f00 	ldrex	r3, [r3]
 8007fbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	f023 0310 	bic.w	r3, r3, #16
 8007fc4:	647b      	str	r3, [r7, #68]	; 0x44
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	330c      	adds	r3, #12
 8007fcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fce:	61ba      	str	r2, [r7, #24]
 8007fd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd2:	6979      	ldr	r1, [r7, #20]
 8007fd4:	69ba      	ldr	r2, [r7, #24]
 8007fd6:	e841 2300 	strex	r3, r2, [r1]
 8007fda:	613b      	str	r3, [r7, #16]
   return(result);
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d1e5      	bne.n	8007fae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2220      	movs	r2, #32
 8007fe6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007ff0:	bf00      	nop
 8007ff2:	3754      	adds	r7, #84	; 0x54
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bc80      	pop	{r7}
 8007ff8:	4770      	bx	lr
	...

08007ffc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	68da      	ldr	r2, [r3, #12]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	430a      	orrs	r2, r1
 8008018:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	689a      	ldr	r2, [r3, #8]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	431a      	orrs	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	695b      	ldr	r3, [r3, #20]
 8008028:	4313      	orrs	r3, r2
 800802a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008036:	f023 030c 	bic.w	r3, r3, #12
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	6812      	ldr	r2, [r2, #0]
 800803e:	68b9      	ldr	r1, [r7, #8]
 8008040:	430b      	orrs	r3, r1
 8008042:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	695b      	ldr	r3, [r3, #20]
 800804a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	699a      	ldr	r2, [r3, #24]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	430a      	orrs	r2, r1
 8008058:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a2c      	ldr	r2, [pc, #176]	; (8008110 <UART_SetConfig+0x114>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d103      	bne.n	800806c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008064:	f7ff f8ce 	bl	8007204 <HAL_RCC_GetPCLK2Freq>
 8008068:	60f8      	str	r0, [r7, #12]
 800806a:	e002      	b.n	8008072 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800806c:	f7ff f8b6 	bl	80071dc <HAL_RCC_GetPCLK1Freq>
 8008070:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	4613      	mov	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4413      	add	r3, r2
 800807a:	009a      	lsls	r2, r3, #2
 800807c:	441a      	add	r2, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	fbb2 f3f3 	udiv	r3, r2, r3
 8008088:	4a22      	ldr	r2, [pc, #136]	; (8008114 <UART_SetConfig+0x118>)
 800808a:	fba2 2303 	umull	r2, r3, r2, r3
 800808e:	095b      	lsrs	r3, r3, #5
 8008090:	0119      	lsls	r1, r3, #4
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	4613      	mov	r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4413      	add	r3, r2
 800809a:	009a      	lsls	r2, r3, #2
 800809c:	441a      	add	r2, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80080a8:	4b1a      	ldr	r3, [pc, #104]	; (8008114 <UART_SetConfig+0x118>)
 80080aa:	fba3 0302 	umull	r0, r3, r3, r2
 80080ae:	095b      	lsrs	r3, r3, #5
 80080b0:	2064      	movs	r0, #100	; 0x64
 80080b2:	fb00 f303 	mul.w	r3, r0, r3
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	011b      	lsls	r3, r3, #4
 80080ba:	3332      	adds	r3, #50	; 0x32
 80080bc:	4a15      	ldr	r2, [pc, #84]	; (8008114 <UART_SetConfig+0x118>)
 80080be:	fba2 2303 	umull	r2, r3, r2, r3
 80080c2:	095b      	lsrs	r3, r3, #5
 80080c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080c8:	4419      	add	r1, r3
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	4613      	mov	r3, r2
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	4413      	add	r3, r2
 80080d2:	009a      	lsls	r2, r3, #2
 80080d4:	441a      	add	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80080e0:	4b0c      	ldr	r3, [pc, #48]	; (8008114 <UART_SetConfig+0x118>)
 80080e2:	fba3 0302 	umull	r0, r3, r3, r2
 80080e6:	095b      	lsrs	r3, r3, #5
 80080e8:	2064      	movs	r0, #100	; 0x64
 80080ea:	fb00 f303 	mul.w	r3, r0, r3
 80080ee:	1ad3      	subs	r3, r2, r3
 80080f0:	011b      	lsls	r3, r3, #4
 80080f2:	3332      	adds	r3, #50	; 0x32
 80080f4:	4a07      	ldr	r2, [pc, #28]	; (8008114 <UART_SetConfig+0x118>)
 80080f6:	fba2 2303 	umull	r2, r3, r2, r3
 80080fa:	095b      	lsrs	r3, r3, #5
 80080fc:	f003 020f 	and.w	r2, r3, #15
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	440a      	add	r2, r1
 8008106:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008108:	bf00      	nop
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	40013800 	.word	0x40013800
 8008114:	51eb851f 	.word	0x51eb851f

08008118 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	4638      	mov	r0, r7
 8008122:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	3714      	adds	r7, #20
 800812c:	46bd      	mov	sp, r7
 800812e:	bc80      	pop	{r7}
 8008130:	4770      	bx	lr

08008132 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008132:	b480      	push	{r7}
 8008134:	b085      	sub	sp, #20
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008142:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008146:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	b29a      	uxth	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	3714      	adds	r7, #20
 8008158:	46bd      	mov	sp, r7
 800815a:	bc80      	pop	{r7}
 800815c:	4770      	bx	lr

0800815e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800815e:	b480      	push	{r7}
 8008160:	b085      	sub	sp, #20
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008166:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800816a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008172:	b29a      	uxth	r2, r3
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	b29b      	uxth	r3, r3
 8008178:	43db      	mvns	r3, r3
 800817a:	b29b      	uxth	r3, r3
 800817c:	4013      	ands	r3, r2
 800817e:	b29a      	uxth	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008186:	2300      	movs	r3, #0
}
 8008188:	4618      	mov	r0, r3
 800818a:	3714      	adds	r7, #20
 800818c:	46bd      	mov	sp, r7
 800818e:	bc80      	pop	{r7}
 8008190:	4770      	bx	lr

08008192 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8008192:	b480      	push	{r7}
 8008194:	b083      	sub	sp, #12
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
 800819a:	460b      	mov	r3, r1
 800819c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bc80      	pop	{r7}
 80081a8:	4770      	bx	lr

080081aa <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b085      	sub	sp, #20
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	60f8      	str	r0, [r7, #12]
 80081b2:	4638      	mov	r0, r7
 80081b4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3714      	adds	r7, #20
 80081de:	46bd      	mov	sp, r7
 80081e0:	bc80      	pop	{r7}
 80081e2:	4770      	bx	lr

080081e4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b09d      	sub	sp, #116	; 0x74
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80081ee:	2300      	movs	r3, #0
 80081f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	4413      	add	r3, r2
 80081fe:	881b      	ldrh	r3, [r3, #0]
 8008200:	b29b      	uxth	r3, r3
 8008202:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800820a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	78db      	ldrb	r3, [r3, #3]
 8008212:	2b03      	cmp	r3, #3
 8008214:	d81f      	bhi.n	8008256 <USB_ActivateEndpoint+0x72>
 8008216:	a201      	add	r2, pc, #4	; (adr r2, 800821c <USB_ActivateEndpoint+0x38>)
 8008218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821c:	0800822d 	.word	0x0800822d
 8008220:	08008249 	.word	0x08008249
 8008224:	0800825f 	.word	0x0800825f
 8008228:	0800823b 	.word	0x0800823b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800822c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008230:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008234:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008238:	e012      	b.n	8008260 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800823a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800823e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008242:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008246:	e00b      	b.n	8008260 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008248:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800824c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008250:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008254:	e004      	b.n	8008260 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800825c:	e000      	b.n	8008260 <USB_ActivateEndpoint+0x7c>
      break;
 800825e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	441a      	add	r2, r3
 800826a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800826e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008272:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800827a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800827e:	b29b      	uxth	r3, r3
 8008280:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	4413      	add	r3, r2
 800828c:	881b      	ldrh	r3, [r3, #0]
 800828e:	b29b      	uxth	r3, r3
 8008290:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008298:	b29a      	uxth	r2, r3
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	b29b      	uxth	r3, r3
 80082a0:	4313      	orrs	r3, r2
 80082a2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	441a      	add	r2, r3
 80082b0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80082b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	7b1b      	ldrb	r3, [r3, #12]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f040 8178 	bne.w	80085c2 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	785b      	ldrb	r3, [r3, #1]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f000 8084 	beq.w	80083e4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	61bb      	str	r3, [r7, #24]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	461a      	mov	r2, r3
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	4413      	add	r3, r2
 80082ee:	61bb      	str	r3, [r7, #24]
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	011a      	lsls	r2, r3, #4
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	4413      	add	r3, r2
 80082fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082fe:	617b      	str	r3, [r7, #20]
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	88db      	ldrh	r3, [r3, #6]
 8008304:	085b      	lsrs	r3, r3, #1
 8008306:	b29b      	uxth	r3, r3
 8008308:	005b      	lsls	r3, r3, #1
 800830a:	b29a      	uxth	r2, r3
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	4413      	add	r3, r2
 800831a:	881b      	ldrh	r3, [r3, #0]
 800831c:	827b      	strh	r3, [r7, #18]
 800831e:	8a7b      	ldrh	r3, [r7, #18]
 8008320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008324:	2b00      	cmp	r3, #0
 8008326:	d01b      	beq.n	8008360 <USB_ActivateEndpoint+0x17c>
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	4413      	add	r3, r2
 8008332:	881b      	ldrh	r3, [r3, #0]
 8008334:	b29b      	uxth	r3, r3
 8008336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800833a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800833e:	823b      	strh	r3, [r7, #16]
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	441a      	add	r2, r3
 800834a:	8a3b      	ldrh	r3, [r7, #16]
 800834c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008350:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008354:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008358:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800835c:	b29b      	uxth	r3, r3
 800835e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	78db      	ldrb	r3, [r3, #3]
 8008364:	2b01      	cmp	r3, #1
 8008366:	d020      	beq.n	80083aa <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	4413      	add	r3, r2
 8008372:	881b      	ldrh	r3, [r3, #0]
 8008374:	b29b      	uxth	r3, r3
 8008376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800837a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800837e:	81bb      	strh	r3, [r7, #12]
 8008380:	89bb      	ldrh	r3, [r7, #12]
 8008382:	f083 0320 	eor.w	r3, r3, #32
 8008386:	81bb      	strh	r3, [r7, #12]
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	441a      	add	r2, r3
 8008392:	89bb      	ldrh	r3, [r7, #12]
 8008394:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008398:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800839c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	8013      	strh	r3, [r2, #0]
 80083a8:	e2d5      	b.n	8008956 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	4413      	add	r3, r2
 80083b4:	881b      	ldrh	r3, [r3, #0]
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083c0:	81fb      	strh	r3, [r7, #14]
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	441a      	add	r2, r3
 80083cc:	89fb      	ldrh	r3, [r7, #14]
 80083ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083de:	b29b      	uxth	r3, r3
 80083e0:	8013      	strh	r3, [r2, #0]
 80083e2:	e2b8      	b.n	8008956 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	633b      	str	r3, [r7, #48]	; 0x30
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	461a      	mov	r2, r3
 80083f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f4:	4413      	add	r3, r2
 80083f6:	633b      	str	r3, [r7, #48]	; 0x30
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	011a      	lsls	r2, r3, #4
 80083fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008400:	4413      	add	r3, r2
 8008402:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008406:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	88db      	ldrh	r3, [r3, #6]
 800840c:	085b      	lsrs	r3, r3, #1
 800840e:	b29b      	uxth	r3, r3
 8008410:	005b      	lsls	r3, r3, #1
 8008412:	b29a      	uxth	r2, r3
 8008414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008416:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	62bb      	str	r3, [r7, #40]	; 0x28
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008422:	b29b      	uxth	r3, r3
 8008424:	461a      	mov	r2, r3
 8008426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008428:	4413      	add	r3, r2
 800842a:	62bb      	str	r3, [r7, #40]	; 0x28
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	011a      	lsls	r2, r3, #4
 8008432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008434:	4413      	add	r3, r2
 8008436:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800843a:	627b      	str	r3, [r7, #36]	; 0x24
 800843c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843e:	881b      	ldrh	r3, [r3, #0]
 8008440:	b29b      	uxth	r3, r3
 8008442:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008446:	b29a      	uxth	r2, r3
 8008448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844a:	801a      	strh	r2, [r3, #0]
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	2b3e      	cmp	r3, #62	; 0x3e
 8008452:	d91d      	bls.n	8008490 <USB_ActivateEndpoint+0x2ac>
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	095b      	lsrs	r3, r3, #5
 800845a:	66bb      	str	r3, [r7, #104]	; 0x68
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	f003 031f 	and.w	r3, r3, #31
 8008464:	2b00      	cmp	r3, #0
 8008466:	d102      	bne.n	800846e <USB_ActivateEndpoint+0x28a>
 8008468:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800846a:	3b01      	subs	r3, #1
 800846c:	66bb      	str	r3, [r7, #104]	; 0x68
 800846e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008470:	881b      	ldrh	r3, [r3, #0]
 8008472:	b29a      	uxth	r2, r3
 8008474:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008476:	b29b      	uxth	r3, r3
 8008478:	029b      	lsls	r3, r3, #10
 800847a:	b29b      	uxth	r3, r3
 800847c:	4313      	orrs	r3, r2
 800847e:	b29b      	uxth	r3, r3
 8008480:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008484:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008488:	b29a      	uxth	r2, r3
 800848a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848c:	801a      	strh	r2, [r3, #0]
 800848e:	e026      	b.n	80084de <USB_ActivateEndpoint+0x2fa>
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d10a      	bne.n	80084ae <USB_ActivateEndpoint+0x2ca>
 8008498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849a:	881b      	ldrh	r3, [r3, #0]
 800849c:	b29b      	uxth	r3, r3
 800849e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084a6:	b29a      	uxth	r2, r3
 80084a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084aa:	801a      	strh	r2, [r3, #0]
 80084ac:	e017      	b.n	80084de <USB_ActivateEndpoint+0x2fa>
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	085b      	lsrs	r3, r3, #1
 80084b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d002      	beq.n	80084c8 <USB_ActivateEndpoint+0x2e4>
 80084c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084c4:	3301      	adds	r3, #1
 80084c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80084c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ca:	881b      	ldrh	r3, [r3, #0]
 80084cc:	b29a      	uxth	r2, r3
 80084ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	029b      	lsls	r3, r3, #10
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	4313      	orrs	r3, r2
 80084d8:	b29a      	uxth	r2, r3
 80084da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084dc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	4413      	add	r3, r2
 80084e8:	881b      	ldrh	r3, [r3, #0]
 80084ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80084ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80084ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d01b      	beq.n	800852e <USB_ActivateEndpoint+0x34a>
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	4413      	add	r3, r2
 8008500:	881b      	ldrh	r3, [r3, #0]
 8008502:	b29b      	uxth	r3, r3
 8008504:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800850c:	843b      	strh	r3, [r7, #32]
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	441a      	add	r2, r3
 8008518:	8c3b      	ldrh	r3, [r7, #32]
 800851a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800851e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008522:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800852a:	b29b      	uxth	r3, r3
 800852c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d124      	bne.n	8008580 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	4413      	add	r3, r2
 8008540:	881b      	ldrh	r3, [r3, #0]
 8008542:	b29b      	uxth	r3, r3
 8008544:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800854c:	83bb      	strh	r3, [r7, #28]
 800854e:	8bbb      	ldrh	r3, [r7, #28]
 8008550:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008554:	83bb      	strh	r3, [r7, #28]
 8008556:	8bbb      	ldrh	r3, [r7, #28]
 8008558:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800855c:	83bb      	strh	r3, [r7, #28]
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	441a      	add	r2, r3
 8008568:	8bbb      	ldrh	r3, [r7, #28]
 800856a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800856e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800857a:	b29b      	uxth	r3, r3
 800857c:	8013      	strh	r3, [r2, #0]
 800857e:	e1ea      	b.n	8008956 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4413      	add	r3, r2
 800858a:	881b      	ldrh	r3, [r3, #0]
 800858c:	b29b      	uxth	r3, r3
 800858e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008596:	83fb      	strh	r3, [r7, #30]
 8008598:	8bfb      	ldrh	r3, [r7, #30]
 800859a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800859e:	83fb      	strh	r3, [r7, #30]
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	441a      	add	r2, r3
 80085aa:	8bfb      	ldrh	r3, [r7, #30]
 80085ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085bc:	b29b      	uxth	r3, r3
 80085be:	8013      	strh	r3, [r2, #0]
 80085c0:	e1c9      	b.n	8008956 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	78db      	ldrb	r3, [r3, #3]
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	d11e      	bne.n	8008608 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	4413      	add	r3, r2
 80085d4:	881b      	ldrh	r3, [r3, #0]
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085e0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	441a      	add	r2, r3
 80085ee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80085f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085fa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80085fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008602:	b29b      	uxth	r3, r3
 8008604:	8013      	strh	r3, [r2, #0]
 8008606:	e01d      	b.n	8008644 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	4413      	add	r3, r2
 8008612:	881b      	ldrh	r3, [r3, #0]
 8008614:	b29b      	uxth	r3, r3
 8008616:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800861a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800861e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	441a      	add	r2, r3
 800862c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008630:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008634:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008638:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800863c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008640:	b29b      	uxth	r3, r3
 8008642:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800864e:	b29b      	uxth	r3, r3
 8008650:	461a      	mov	r2, r3
 8008652:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008654:	4413      	add	r3, r2
 8008656:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	011a      	lsls	r2, r3, #4
 800865e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008660:	4413      	add	r3, r2
 8008662:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008666:	65bb      	str	r3, [r7, #88]	; 0x58
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	891b      	ldrh	r3, [r3, #8]
 800866c:	085b      	lsrs	r3, r3, #1
 800866e:	b29b      	uxth	r3, r3
 8008670:	005b      	lsls	r3, r3, #1
 8008672:	b29a      	uxth	r2, r3
 8008674:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008676:	801a      	strh	r2, [r3, #0]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	657b      	str	r3, [r7, #84]	; 0x54
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008682:	b29b      	uxth	r3, r3
 8008684:	461a      	mov	r2, r3
 8008686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008688:	4413      	add	r3, r2
 800868a:	657b      	str	r3, [r7, #84]	; 0x54
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	011a      	lsls	r2, r3, #4
 8008692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008694:	4413      	add	r3, r2
 8008696:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800869a:	653b      	str	r3, [r7, #80]	; 0x50
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	895b      	ldrh	r3, [r3, #10]
 80086a0:	085b      	lsrs	r3, r3, #1
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	005b      	lsls	r3, r3, #1
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086aa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	785b      	ldrb	r3, [r3, #1]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f040 8093 	bne.w	80087dc <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	4413      	add	r3, r2
 80086c0:	881b      	ldrh	r3, [r3, #0]
 80086c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80086c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80086ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d01b      	beq.n	800870a <USB_ActivateEndpoint+0x526>
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	4413      	add	r3, r2
 80086dc:	881b      	ldrh	r3, [r3, #0]
 80086de:	b29b      	uxth	r3, r3
 80086e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	441a      	add	r2, r3
 80086f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80086f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008706:	b29b      	uxth	r3, r3
 8008708:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4413      	add	r3, r2
 8008714:	881b      	ldrh	r3, [r3, #0]
 8008716:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008718:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800871a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800871e:	2b00      	cmp	r3, #0
 8008720:	d01b      	beq.n	800875a <USB_ActivateEndpoint+0x576>
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	4413      	add	r3, r2
 800872c:	881b      	ldrh	r3, [r3, #0]
 800872e:	b29b      	uxth	r3, r3
 8008730:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008738:	877b      	strh	r3, [r7, #58]	; 0x3a
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	441a      	add	r2, r3
 8008744:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008746:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800874a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800874e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008752:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008756:	b29b      	uxth	r3, r3
 8008758:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	4413      	add	r3, r2
 8008764:	881b      	ldrh	r3, [r3, #0]
 8008766:	b29b      	uxth	r3, r3
 8008768:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800876c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008770:	873b      	strh	r3, [r7, #56]	; 0x38
 8008772:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008774:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008778:	873b      	strh	r3, [r7, #56]	; 0x38
 800877a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800877c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008780:	873b      	strh	r3, [r7, #56]	; 0x38
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	441a      	add	r2, r3
 800878c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800878e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008792:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800879a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800879e:	b29b      	uxth	r3, r3
 80087a0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	4413      	add	r3, r2
 80087ac:	881b      	ldrh	r3, [r3, #0]
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087b8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	441a      	add	r2, r3
 80087c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80087c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	8013      	strh	r3, [r2, #0]
 80087da:	e0bc      	b.n	8008956 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	4413      	add	r3, r2
 80087e6:	881b      	ldrh	r3, [r3, #0]
 80087e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80087ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80087f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d01d      	beq.n	8008834 <USB_ActivateEndpoint+0x650>
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	4413      	add	r3, r2
 8008802:	881b      	ldrh	r3, [r3, #0]
 8008804:	b29b      	uxth	r3, r3
 8008806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800880a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800880e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	441a      	add	r2, r3
 800881c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008820:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008824:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008828:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800882c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008830:	b29b      	uxth	r3, r3
 8008832:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	4413      	add	r3, r2
 800883e:	881b      	ldrh	r3, [r3, #0]
 8008840:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008844:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800884c:	2b00      	cmp	r3, #0
 800884e:	d01d      	beq.n	800888c <USB_ActivateEndpoint+0x6a8>
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	4413      	add	r3, r2
 800885a:	881b      	ldrh	r3, [r3, #0]
 800885c:	b29b      	uxth	r3, r3
 800885e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008866:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	441a      	add	r2, r3
 8008874:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008878:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800887c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008884:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008888:	b29b      	uxth	r3, r3
 800888a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	78db      	ldrb	r3, [r3, #3]
 8008890:	2b01      	cmp	r3, #1
 8008892:	d024      	beq.n	80088de <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	4413      	add	r3, r2
 800889e:	881b      	ldrh	r3, [r3, #0]
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088aa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80088ae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80088b2:	f083 0320 	eor.w	r3, r3, #32
 80088b6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	441a      	add	r2, r3
 80088c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80088c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088d8:	b29b      	uxth	r3, r3
 80088da:	8013      	strh	r3, [r2, #0]
 80088dc:	e01d      	b.n	800891a <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	4413      	add	r3, r2
 80088e8:	881b      	ldrh	r3, [r3, #0]
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088f4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	441a      	add	r2, r3
 8008902:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008906:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800890a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800890e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008916:	b29b      	uxth	r3, r3
 8008918:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	4413      	add	r3, r2
 8008924:	881b      	ldrh	r3, [r3, #0]
 8008926:	b29b      	uxth	r3, r3
 8008928:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800892c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008930:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	441a      	add	r2, r3
 800893e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800894a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800894e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008952:	b29b      	uxth	r3, r3
 8008954:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008956:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800895a:	4618      	mov	r0, r3
 800895c:	3774      	adds	r7, #116	; 0x74
 800895e:	46bd      	mov	sp, r7
 8008960:	bc80      	pop	{r7}
 8008962:	4770      	bx	lr

08008964 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008964:	b480      	push	{r7}
 8008966:	b08d      	sub	sp, #52	; 0x34
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	7b1b      	ldrb	r3, [r3, #12]
 8008972:	2b00      	cmp	r3, #0
 8008974:	f040 808e 	bne.w	8008a94 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	785b      	ldrb	r3, [r3, #1]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d044      	beq.n	8008a0a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	4413      	add	r3, r2
 800898a:	881b      	ldrh	r3, [r3, #0]
 800898c:	81bb      	strh	r3, [r7, #12]
 800898e:	89bb      	ldrh	r3, [r7, #12]
 8008990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008994:	2b00      	cmp	r3, #0
 8008996:	d01b      	beq.n	80089d0 <USB_DeactivateEndpoint+0x6c>
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4413      	add	r3, r2
 80089a2:	881b      	ldrh	r3, [r3, #0]
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ae:	817b      	strh	r3, [r7, #10]
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	441a      	add	r2, r3
 80089ba:	897b      	ldrh	r3, [r7, #10]
 80089bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	4413      	add	r3, r2
 80089da:	881b      	ldrh	r3, [r3, #0]
 80089dc:	b29b      	uxth	r3, r3
 80089de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089e6:	813b      	strh	r3, [r7, #8]
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	441a      	add	r2, r3
 80089f2:	893b      	ldrh	r3, [r7, #8]
 80089f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	8013      	strh	r3, [r2, #0]
 8008a08:	e192      	b.n	8008d30 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	4413      	add	r3, r2
 8008a14:	881b      	ldrh	r3, [r3, #0]
 8008a16:	827b      	strh	r3, [r7, #18]
 8008a18:	8a7b      	ldrh	r3, [r7, #18]
 8008a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d01b      	beq.n	8008a5a <USB_DeactivateEndpoint+0xf6>
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	4413      	add	r3, r2
 8008a2c:	881b      	ldrh	r3, [r3, #0]
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a38:	823b      	strh	r3, [r7, #16]
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	441a      	add	r2, r3
 8008a44:	8a3b      	ldrh	r3, [r7, #16]
 8008a46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	4413      	add	r3, r2
 8008a64:	881b      	ldrh	r3, [r3, #0]
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a70:	81fb      	strh	r3, [r7, #14]
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	441a      	add	r2, r3
 8008a7c:	89fb      	ldrh	r3, [r7, #14]
 8008a7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	8013      	strh	r3, [r2, #0]
 8008a92:	e14d      	b.n	8008d30 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	785b      	ldrb	r3, [r3, #1]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f040 80a5 	bne.w	8008be8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	4413      	add	r3, r2
 8008aa8:	881b      	ldrh	r3, [r3, #0]
 8008aaa:	843b      	strh	r3, [r7, #32]
 8008aac:	8c3b      	ldrh	r3, [r7, #32]
 8008aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d01b      	beq.n	8008aee <USB_DeactivateEndpoint+0x18a>
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	4413      	add	r3, r2
 8008ac0:	881b      	ldrh	r3, [r3, #0]
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008acc:	83fb      	strh	r3, [r7, #30]
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	441a      	add	r2, r3
 8008ad8:	8bfb      	ldrh	r3, [r7, #30]
 8008ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ae2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	4413      	add	r3, r2
 8008af8:	881b      	ldrh	r3, [r3, #0]
 8008afa:	83bb      	strh	r3, [r7, #28]
 8008afc:	8bbb      	ldrh	r3, [r7, #28]
 8008afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d01b      	beq.n	8008b3e <USB_DeactivateEndpoint+0x1da>
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	4413      	add	r3, r2
 8008b10:	881b      	ldrh	r3, [r3, #0]
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b1c:	837b      	strh	r3, [r7, #26]
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	441a      	add	r2, r3
 8008b28:	8b7b      	ldrh	r3, [r7, #26]
 8008b2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	4413      	add	r3, r2
 8008b48:	881b      	ldrh	r3, [r3, #0]
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b54:	833b      	strh	r3, [r7, #24]
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	441a      	add	r2, r3
 8008b60:	8b3b      	ldrh	r3, [r7, #24]
 8008b62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b6e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	4413      	add	r3, r2
 8008b80:	881b      	ldrh	r3, [r3, #0]
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b8c:	82fb      	strh	r3, [r7, #22]
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	441a      	add	r2, r3
 8008b98:	8afb      	ldrh	r3, [r7, #22]
 8008b9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	4413      	add	r3, r2
 8008bb8:	881b      	ldrh	r3, [r3, #0]
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bc4:	82bb      	strh	r3, [r7, #20]
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	441a      	add	r2, r3
 8008bd0:	8abb      	ldrh	r3, [r7, #20]
 8008bd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	8013      	strh	r3, [r2, #0]
 8008be6:	e0a3      	b.n	8008d30 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	4413      	add	r3, r2
 8008bf2:	881b      	ldrh	r3, [r3, #0]
 8008bf4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008bf6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d01b      	beq.n	8008c38 <USB_DeactivateEndpoint+0x2d4>
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	4413      	add	r3, r2
 8008c0a:	881b      	ldrh	r3, [r3, #0]
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c16:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	441a      	add	r2, r3
 8008c22:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008c24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	4413      	add	r3, r2
 8008c42:	881b      	ldrh	r3, [r3, #0]
 8008c44:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008c46:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d01b      	beq.n	8008c88 <USB_DeactivateEndpoint+0x324>
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	4413      	add	r3, r2
 8008c5a:	881b      	ldrh	r3, [r3, #0]
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c66:	853b      	strh	r3, [r7, #40]	; 0x28
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	441a      	add	r2, r3
 8008c72:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008c74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	4413      	add	r3, r2
 8008c92:	881b      	ldrh	r3, [r3, #0]
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c9e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	441a      	add	r2, r3
 8008caa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008cac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	4413      	add	r3, r2
 8008cca:	881b      	ldrh	r3, [r3, #0]
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cd6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	441a      	add	r2, r3
 8008ce2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ce4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ce8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	4413      	add	r3, r2
 8008d02:	881b      	ldrh	r3, [r3, #0]
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d0e:	847b      	strh	r3, [r7, #34]	; 0x22
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	441a      	add	r2, r3
 8008d1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008d1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3734      	adds	r7, #52	; 0x34
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bc80      	pop	{r7}
 8008d3a:	4770      	bx	lr

08008d3c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b0c2      	sub	sp, #264	; 0x108
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	1d3b      	adds	r3, r7, #4
 8008d44:	6018      	str	r0, [r3, #0]
 8008d46:	463b      	mov	r3, r7
 8008d48:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008d4a:	463b      	mov	r3, r7
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	785b      	ldrb	r3, [r3, #1]
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	f040 8545 	bne.w	80097e0 <USB_EPStartXfer+0xaa4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008d56:	463b      	mov	r3, r7
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	699a      	ldr	r2, [r3, #24]
 8008d5c:	463b      	mov	r3, r7
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d905      	bls.n	8008d72 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8008d66:	463b      	mov	r3, r7
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008d70:	e004      	b.n	8008d7c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008d72:	463b      	mov	r3, r7
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	699b      	ldr	r3, [r3, #24]
 8008d78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008d7c:	463b      	mov	r3, r7
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	7b1b      	ldrb	r3, [r3, #12]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d128      	bne.n	8008dd8 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008d86:	463b      	mov	r3, r7
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	6959      	ldr	r1, [r3, #20]
 8008d8c:	463b      	mov	r3, r7
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	88da      	ldrh	r2, [r3, #6]
 8008d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	1d38      	adds	r0, r7, #4
 8008d9a:	6800      	ldr	r0, [r0, #0]
 8008d9c:	f001 fa58 	bl	800a250 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008da0:	1d3b      	adds	r3, r7, #4
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	613b      	str	r3, [r7, #16]
 8008da6:	1d3b      	adds	r3, r7, #4
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	461a      	mov	r2, r3
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	4413      	add	r3, r2
 8008db6:	613b      	str	r3, [r7, #16]
 8008db8:	463b      	mov	r3, r7
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	011a      	lsls	r2, r3, #4
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008dc8:	60fb      	str	r3, [r7, #12]
 8008dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dce:	b29a      	uxth	r2, r3
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	801a      	strh	r2, [r3, #0]
 8008dd4:	f000 bcdb 	b.w	800978e <USB_EPStartXfer+0xa52>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008dd8:	463b      	mov	r3, r7
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	78db      	ldrb	r3, [r3, #3]
 8008dde:	2b02      	cmp	r3, #2
 8008de0:	f040 836f 	bne.w	80094c2 <USB_EPStartXfer+0x786>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008de4:	463b      	mov	r3, r7
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	6a1a      	ldr	r2, [r3, #32]
 8008dea:	463b      	mov	r3, r7
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	f240 8313 	bls.w	800941c <USB_EPStartXfer+0x6e0>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008df6:	1d3b      	adds	r3, r7, #4
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	463b      	mov	r3, r7
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	4413      	add	r3, r2
 8008e04:	881b      	ldrh	r3, [r3, #0]
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e10:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008e14:	1d3b      	adds	r3, r7, #4
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	463b      	mov	r3, r7
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	441a      	add	r2, r3
 8008e22:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008e26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e2e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008e3a:	463b      	mov	r3, r7
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	6a1a      	ldr	r2, [r3, #32]
 8008e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e44:	1ad2      	subs	r2, r2, r3
 8008e46:	463b      	mov	r3, r7
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008e4c:	1d3b      	adds	r3, r7, #4
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	463b      	mov	r3, r7
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	4413      	add	r3, r2
 8008e5a:	881b      	ldrh	r3, [r3, #0]
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	f000 816d 	beq.w	8009142 <USB_EPStartXfer+0x406>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008e68:	1d3b      	adds	r3, r7, #4
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	633b      	str	r3, [r7, #48]	; 0x30
 8008e6e:	463b      	mov	r3, r7
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	785b      	ldrb	r3, [r3, #1]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d16e      	bne.n	8008f56 <USB_EPStartXfer+0x21a>
 8008e78:	1d3b      	adds	r3, r7, #4
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e7e:	1d3b      	adds	r3, r7, #4
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	461a      	mov	r2, r3
 8008e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8c:	4413      	add	r3, r2
 8008e8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e90:	463b      	mov	r3, r7
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	011a      	lsls	r2, r3, #4
 8008e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea4:	881b      	ldrh	r3, [r3, #0]
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008eac:	b29a      	uxth	r2, r3
 8008eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb0:	801a      	strh	r2, [r3, #0]
 8008eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008eb6:	2b3e      	cmp	r3, #62	; 0x3e
 8008eb8:	d921      	bls.n	8008efe <USB_EPStartXfer+0x1c2>
 8008eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ebe:	095b      	lsrs	r3, r3, #5
 8008ec0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ec8:	f003 031f 	and.w	r3, r3, #31
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d104      	bne.n	8008eda <USB_EPStartXfer+0x19e>
 8008ed0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008ed4:	3b01      	subs	r3, #1
 8008ed6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008edc:	881b      	ldrh	r3, [r3, #0]
 8008ede:	b29a      	uxth	r2, r3
 8008ee0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	029b      	lsls	r3, r3, #10
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	4313      	orrs	r3, r2
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efa:	801a      	strh	r2, [r3, #0]
 8008efc:	e047      	b.n	8008f8e <USB_EPStartXfer+0x252>
 8008efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d10a      	bne.n	8008f1c <USB_EPStartXfer+0x1e0>
 8008f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f08:	881b      	ldrh	r3, [r3, #0]
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f18:	801a      	strh	r2, [r3, #0]
 8008f1a:	e038      	b.n	8008f8e <USB_EPStartXfer+0x252>
 8008f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f20:	085b      	lsrs	r3, r3, #1
 8008f22:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f2a:	f003 0301 	and.w	r3, r3, #1
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d004      	beq.n	8008f3c <USB_EPStartXfer+0x200>
 8008f32:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008f36:	3301      	adds	r3, #1
 8008f38:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3e:	881b      	ldrh	r3, [r3, #0]
 8008f40:	b29a      	uxth	r2, r3
 8008f42:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	029b      	lsls	r3, r3, #10
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f52:	801a      	strh	r2, [r3, #0]
 8008f54:	e01b      	b.n	8008f8e <USB_EPStartXfer+0x252>
 8008f56:	463b      	mov	r3, r7
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	785b      	ldrb	r3, [r3, #1]
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d116      	bne.n	8008f8e <USB_EPStartXfer+0x252>
 8008f60:	1d3b      	adds	r3, r7, #4
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6e:	4413      	add	r3, r2
 8008f70:	633b      	str	r3, [r7, #48]	; 0x30
 8008f72:	463b      	mov	r3, r7
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	011a      	lsls	r2, r3, #4
 8008f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008f82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f88:	b29a      	uxth	r2, r3
 8008f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008f8e:	463b      	mov	r3, r7
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	895b      	ldrh	r3, [r3, #10]
 8008f94:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f98:	463b      	mov	r3, r7
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	6959      	ldr	r1, [r3, #20]
 8008f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008fa8:	1d38      	adds	r0, r7, #4
 8008faa:	6800      	ldr	r0, [r0, #0]
 8008fac:	f001 f950 	bl	800a250 <USB_WritePMA>
            ep->xfer_buff += len;
 8008fb0:	463b      	mov	r3, r7
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	695a      	ldr	r2, [r3, #20]
 8008fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fba:	441a      	add	r2, r3
 8008fbc:	463b      	mov	r3, r7
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008fc2:	463b      	mov	r3, r7
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	6a1a      	ldr	r2, [r3, #32]
 8008fc8:	463b      	mov	r3, r7
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d909      	bls.n	8008fe6 <USB_EPStartXfer+0x2aa>
            {
              ep->xfer_len_db -= len;
 8008fd2:	463b      	mov	r3, r7
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	6a1a      	ldr	r2, [r3, #32]
 8008fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fdc:	1ad2      	subs	r2, r2, r3
 8008fde:	463b      	mov	r3, r7
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	621a      	str	r2, [r3, #32]
 8008fe4:	e008      	b.n	8008ff8 <USB_EPStartXfer+0x2bc>
            }
            else
            {
              len = ep->xfer_len_db;
 8008fe6:	463b      	mov	r3, r7
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	6a1b      	ldr	r3, [r3, #32]
 8008fec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008ff0:	463b      	mov	r3, r7
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008ff8:	463b      	mov	r3, r7
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	785b      	ldrb	r3, [r3, #1]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d16e      	bne.n	80090e0 <USB_EPStartXfer+0x3a4>
 8009002:	1d3b      	adds	r3, r7, #4
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	61bb      	str	r3, [r7, #24]
 8009008:	1d3b      	adds	r3, r7, #4
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009010:	b29b      	uxth	r3, r3
 8009012:	461a      	mov	r2, r3
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	4413      	add	r3, r2
 8009018:	61bb      	str	r3, [r7, #24]
 800901a:	463b      	mov	r3, r7
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	011a      	lsls	r2, r3, #4
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	4413      	add	r3, r2
 8009026:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800902a:	617b      	str	r3, [r7, #20]
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	881b      	ldrh	r3, [r3, #0]
 8009030:	b29b      	uxth	r3, r3
 8009032:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009036:	b29a      	uxth	r2, r3
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	801a      	strh	r2, [r3, #0]
 800903c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009040:	2b3e      	cmp	r3, #62	; 0x3e
 8009042:	d921      	bls.n	8009088 <USB_EPStartXfer+0x34c>
 8009044:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009048:	095b      	lsrs	r3, r3, #5
 800904a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800904e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009052:	f003 031f 	and.w	r3, r3, #31
 8009056:	2b00      	cmp	r3, #0
 8009058:	d104      	bne.n	8009064 <USB_EPStartXfer+0x328>
 800905a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800905e:	3b01      	subs	r3, #1
 8009060:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	881b      	ldrh	r3, [r3, #0]
 8009068:	b29a      	uxth	r2, r3
 800906a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800906e:	b29b      	uxth	r3, r3
 8009070:	029b      	lsls	r3, r3, #10
 8009072:	b29b      	uxth	r3, r3
 8009074:	4313      	orrs	r3, r2
 8009076:	b29b      	uxth	r3, r3
 8009078:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800907c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009080:	b29a      	uxth	r2, r3
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	801a      	strh	r2, [r3, #0]
 8009086:	e04a      	b.n	800911e <USB_EPStartXfer+0x3e2>
 8009088:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800908c:	2b00      	cmp	r3, #0
 800908e:	d10a      	bne.n	80090a6 <USB_EPStartXfer+0x36a>
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	881b      	ldrh	r3, [r3, #0]
 8009094:	b29b      	uxth	r3, r3
 8009096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800909a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800909e:	b29a      	uxth	r2, r3
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	801a      	strh	r2, [r3, #0]
 80090a4:	e03b      	b.n	800911e <USB_EPStartXfer+0x3e2>
 80090a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090aa:	085b      	lsrs	r3, r3, #1
 80090ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80090b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090b4:	f003 0301 	and.w	r3, r3, #1
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d004      	beq.n	80090c6 <USB_EPStartXfer+0x38a>
 80090bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090c0:	3301      	adds	r3, #1
 80090c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	881b      	ldrh	r3, [r3, #0]
 80090ca:	b29a      	uxth	r2, r3
 80090cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	029b      	lsls	r3, r3, #10
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	4313      	orrs	r3, r2
 80090d8:	b29a      	uxth	r2, r3
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	801a      	strh	r2, [r3, #0]
 80090de:	e01e      	b.n	800911e <USB_EPStartXfer+0x3e2>
 80090e0:	463b      	mov	r3, r7
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	785b      	ldrb	r3, [r3, #1]
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d119      	bne.n	800911e <USB_EPStartXfer+0x3e2>
 80090ea:	1d3b      	adds	r3, r7, #4
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	623b      	str	r3, [r7, #32]
 80090f0:	1d3b      	adds	r3, r7, #4
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	461a      	mov	r2, r3
 80090fc:	6a3b      	ldr	r3, [r7, #32]
 80090fe:	4413      	add	r3, r2
 8009100:	623b      	str	r3, [r7, #32]
 8009102:	463b      	mov	r3, r7
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	011a      	lsls	r2, r3, #4
 800910a:	6a3b      	ldr	r3, [r7, #32]
 800910c:	4413      	add	r3, r2
 800910e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009112:	61fb      	str	r3, [r7, #28]
 8009114:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009118:	b29a      	uxth	r2, r3
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800911e:	463b      	mov	r3, r7
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	891b      	ldrh	r3, [r3, #8]
 8009124:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009128:	463b      	mov	r3, r7
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	6959      	ldr	r1, [r3, #20]
 800912e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009132:	b29b      	uxth	r3, r3
 8009134:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009138:	1d38      	adds	r0, r7, #4
 800913a:	6800      	ldr	r0, [r0, #0]
 800913c:	f001 f888 	bl	800a250 <USB_WritePMA>
 8009140:	e325      	b.n	800978e <USB_EPStartXfer+0xa52>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009142:	463b      	mov	r3, r7
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	785b      	ldrb	r3, [r3, #1]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d16e      	bne.n	800922a <USB_EPStartXfer+0x4ee>
 800914c:	1d3b      	adds	r3, r7, #4
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	64bb      	str	r3, [r7, #72]	; 0x48
 8009152:	1d3b      	adds	r3, r7, #4
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800915a:	b29b      	uxth	r3, r3
 800915c:	461a      	mov	r2, r3
 800915e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009160:	4413      	add	r3, r2
 8009162:	64bb      	str	r3, [r7, #72]	; 0x48
 8009164:	463b      	mov	r3, r7
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	011a      	lsls	r2, r3, #4
 800916c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800916e:	4413      	add	r3, r2
 8009170:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009174:	647b      	str	r3, [r7, #68]	; 0x44
 8009176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009178:	881b      	ldrh	r3, [r3, #0]
 800917a:	b29b      	uxth	r3, r3
 800917c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009180:	b29a      	uxth	r2, r3
 8009182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009184:	801a      	strh	r2, [r3, #0]
 8009186:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800918a:	2b3e      	cmp	r3, #62	; 0x3e
 800918c:	d921      	bls.n	80091d2 <USB_EPStartXfer+0x496>
 800918e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009192:	095b      	lsrs	r3, r3, #5
 8009194:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009198:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800919c:	f003 031f 	and.w	r3, r3, #31
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d104      	bne.n	80091ae <USB_EPStartXfer+0x472>
 80091a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80091a8:	3b01      	subs	r3, #1
 80091aa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80091ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091b0:	881b      	ldrh	r3, [r3, #0]
 80091b2:	b29a      	uxth	r2, r3
 80091b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	029b      	lsls	r3, r3, #10
 80091bc:	b29b      	uxth	r3, r3
 80091be:	4313      	orrs	r3, r2
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091ca:	b29a      	uxth	r2, r3
 80091cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091ce:	801a      	strh	r2, [r3, #0]
 80091d0:	e04a      	b.n	8009268 <USB_EPStartXfer+0x52c>
 80091d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d10a      	bne.n	80091f0 <USB_EPStartXfer+0x4b4>
 80091da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091dc:	881b      	ldrh	r3, [r3, #0]
 80091de:	b29b      	uxth	r3, r3
 80091e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091e8:	b29a      	uxth	r2, r3
 80091ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091ec:	801a      	strh	r2, [r3, #0]
 80091ee:	e03b      	b.n	8009268 <USB_EPStartXfer+0x52c>
 80091f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091f4:	085b      	lsrs	r3, r3, #1
 80091f6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80091fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091fe:	f003 0301 	and.w	r3, r3, #1
 8009202:	2b00      	cmp	r3, #0
 8009204:	d004      	beq.n	8009210 <USB_EPStartXfer+0x4d4>
 8009206:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800920a:	3301      	adds	r3, #1
 800920c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009212:	881b      	ldrh	r3, [r3, #0]
 8009214:	b29a      	uxth	r2, r3
 8009216:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800921a:	b29b      	uxth	r3, r3
 800921c:	029b      	lsls	r3, r3, #10
 800921e:	b29b      	uxth	r3, r3
 8009220:	4313      	orrs	r3, r2
 8009222:	b29a      	uxth	r2, r3
 8009224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009226:	801a      	strh	r2, [r3, #0]
 8009228:	e01e      	b.n	8009268 <USB_EPStartXfer+0x52c>
 800922a:	463b      	mov	r3, r7
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	785b      	ldrb	r3, [r3, #1]
 8009230:	2b01      	cmp	r3, #1
 8009232:	d119      	bne.n	8009268 <USB_EPStartXfer+0x52c>
 8009234:	1d3b      	adds	r3, r7, #4
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	653b      	str	r3, [r7, #80]	; 0x50
 800923a:	1d3b      	adds	r3, r7, #4
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009242:	b29b      	uxth	r3, r3
 8009244:	461a      	mov	r2, r3
 8009246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009248:	4413      	add	r3, r2
 800924a:	653b      	str	r3, [r7, #80]	; 0x50
 800924c:	463b      	mov	r3, r7
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	011a      	lsls	r2, r3, #4
 8009254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009256:	4413      	add	r3, r2
 8009258:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800925c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800925e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009262:	b29a      	uxth	r2, r3
 8009264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009266:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009268:	463b      	mov	r3, r7
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	891b      	ldrh	r3, [r3, #8]
 800926e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009272:	463b      	mov	r3, r7
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	6959      	ldr	r1, [r3, #20]
 8009278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800927c:	b29b      	uxth	r3, r3
 800927e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009282:	1d38      	adds	r0, r7, #4
 8009284:	6800      	ldr	r0, [r0, #0]
 8009286:	f000 ffe3 	bl	800a250 <USB_WritePMA>
            ep->xfer_buff += len;
 800928a:	463b      	mov	r3, r7
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	695a      	ldr	r2, [r3, #20]
 8009290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009294:	441a      	add	r2, r3
 8009296:	463b      	mov	r3, r7
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800929c:	463b      	mov	r3, r7
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	6a1a      	ldr	r2, [r3, #32]
 80092a2:	463b      	mov	r3, r7
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	691b      	ldr	r3, [r3, #16]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d909      	bls.n	80092c0 <USB_EPStartXfer+0x584>
            {
              ep->xfer_len_db -= len;
 80092ac:	463b      	mov	r3, r7
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	6a1a      	ldr	r2, [r3, #32]
 80092b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092b6:	1ad2      	subs	r2, r2, r3
 80092b8:	463b      	mov	r3, r7
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	621a      	str	r2, [r3, #32]
 80092be:	e008      	b.n	80092d2 <USB_EPStartXfer+0x596>
            }
            else
            {
              len = ep->xfer_len_db;
 80092c0:	463b      	mov	r3, r7
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	6a1b      	ldr	r3, [r3, #32]
 80092c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80092ca:	463b      	mov	r3, r7
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	2200      	movs	r2, #0
 80092d0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80092d2:	1d3b      	adds	r3, r7, #4
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	643b      	str	r3, [r7, #64]	; 0x40
 80092d8:	463b      	mov	r3, r7
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	785b      	ldrb	r3, [r3, #1]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d16e      	bne.n	80093c0 <USB_EPStartXfer+0x684>
 80092e2:	1d3b      	adds	r3, r7, #4
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80092e8:	1d3b      	adds	r3, r7, #4
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	461a      	mov	r2, r3
 80092f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f6:	4413      	add	r3, r2
 80092f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80092fa:	463b      	mov	r3, r7
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	011a      	lsls	r2, r3, #4
 8009302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009304:	4413      	add	r3, r2
 8009306:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800930a:	637b      	str	r3, [r7, #52]	; 0x34
 800930c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800930e:	881b      	ldrh	r3, [r3, #0]
 8009310:	b29b      	uxth	r3, r3
 8009312:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009316:	b29a      	uxth	r2, r3
 8009318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800931a:	801a      	strh	r2, [r3, #0]
 800931c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009320:	2b3e      	cmp	r3, #62	; 0x3e
 8009322:	d921      	bls.n	8009368 <USB_EPStartXfer+0x62c>
 8009324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009328:	095b      	lsrs	r3, r3, #5
 800932a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800932e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009332:	f003 031f 	and.w	r3, r3, #31
 8009336:	2b00      	cmp	r3, #0
 8009338:	d104      	bne.n	8009344 <USB_EPStartXfer+0x608>
 800933a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800933e:	3b01      	subs	r3, #1
 8009340:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009346:	881b      	ldrh	r3, [r3, #0]
 8009348:	b29a      	uxth	r2, r3
 800934a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800934e:	b29b      	uxth	r3, r3
 8009350:	029b      	lsls	r3, r3, #10
 8009352:	b29b      	uxth	r3, r3
 8009354:	4313      	orrs	r3, r2
 8009356:	b29b      	uxth	r3, r3
 8009358:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800935c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009360:	b29a      	uxth	r2, r3
 8009362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009364:	801a      	strh	r2, [r3, #0]
 8009366:	e047      	b.n	80093f8 <USB_EPStartXfer+0x6bc>
 8009368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800936c:	2b00      	cmp	r3, #0
 800936e:	d10a      	bne.n	8009386 <USB_EPStartXfer+0x64a>
 8009370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009372:	881b      	ldrh	r3, [r3, #0]
 8009374:	b29b      	uxth	r3, r3
 8009376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800937a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800937e:	b29a      	uxth	r2, r3
 8009380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009382:	801a      	strh	r2, [r3, #0]
 8009384:	e038      	b.n	80093f8 <USB_EPStartXfer+0x6bc>
 8009386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800938a:	085b      	lsrs	r3, r3, #1
 800938c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009394:	f003 0301 	and.w	r3, r3, #1
 8009398:	2b00      	cmp	r3, #0
 800939a:	d004      	beq.n	80093a6 <USB_EPStartXfer+0x66a>
 800939c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093a0:	3301      	adds	r3, #1
 80093a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80093a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093a8:	881b      	ldrh	r3, [r3, #0]
 80093aa:	b29a      	uxth	r2, r3
 80093ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	029b      	lsls	r3, r3, #10
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	4313      	orrs	r3, r2
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093bc:	801a      	strh	r2, [r3, #0]
 80093be:	e01b      	b.n	80093f8 <USB_EPStartXfer+0x6bc>
 80093c0:	463b      	mov	r3, r7
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	785b      	ldrb	r3, [r3, #1]
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d116      	bne.n	80093f8 <USB_EPStartXfer+0x6bc>
 80093ca:	1d3b      	adds	r3, r7, #4
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	461a      	mov	r2, r3
 80093d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093d8:	4413      	add	r3, r2
 80093da:	643b      	str	r3, [r7, #64]	; 0x40
 80093dc:	463b      	mov	r3, r7
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	011a      	lsls	r2, r3, #4
 80093e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093e6:	4413      	add	r3, r2
 80093e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80093ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093f2:	b29a      	uxth	r2, r3
 80093f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80093f8:	463b      	mov	r3, r7
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	895b      	ldrh	r3, [r3, #10]
 80093fe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009402:	463b      	mov	r3, r7
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	6959      	ldr	r1, [r3, #20]
 8009408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800940c:	b29b      	uxth	r3, r3
 800940e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009412:	1d38      	adds	r0, r7, #4
 8009414:	6800      	ldr	r0, [r0, #0]
 8009416:	f000 ff1b 	bl	800a250 <USB_WritePMA>
 800941a:	e1b8      	b.n	800978e <USB_EPStartXfer+0xa52>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800941c:	463b      	mov	r3, r7
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	6a1b      	ldr	r3, [r3, #32]
 8009422:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009426:	1d3b      	adds	r3, r7, #4
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	463b      	mov	r3, r7
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	4413      	add	r3, r2
 8009434:	881b      	ldrh	r3, [r3, #0]
 8009436:	b29b      	uxth	r3, r3
 8009438:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800943c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009440:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009444:	1d3b      	adds	r3, r7, #4
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	463b      	mov	r3, r7
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	441a      	add	r2, r3
 8009452:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009456:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800945a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800945e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009466:	b29b      	uxth	r3, r3
 8009468:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800946a:	1d3b      	adds	r3, r7, #4
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009470:	1d3b      	adds	r3, r7, #4
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009478:	b29b      	uxth	r3, r3
 800947a:	461a      	mov	r2, r3
 800947c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800947e:	4413      	add	r3, r2
 8009480:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009482:	463b      	mov	r3, r7
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	011a      	lsls	r2, r3, #4
 800948a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800948c:	4413      	add	r3, r2
 800948e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009492:	65bb      	str	r3, [r7, #88]	; 0x58
 8009494:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009498:	b29a      	uxth	r2, r3
 800949a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800949c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800949e:	463b      	mov	r3, r7
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	891b      	ldrh	r3, [r3, #8]
 80094a4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80094a8:	463b      	mov	r3, r7
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	6959      	ldr	r1, [r3, #20]
 80094ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80094b8:	1d38      	adds	r0, r7, #4
 80094ba:	6800      	ldr	r0, [r0, #0]
 80094bc:	f000 fec8 	bl	800a250 <USB_WritePMA>
 80094c0:	e165      	b.n	800978e <USB_EPStartXfer+0xa52>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80094c2:	463b      	mov	r3, r7
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	6a1a      	ldr	r2, [r3, #32]
 80094c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094cc:	1ad2      	subs	r2, r2, r3
 80094ce:	463b      	mov	r3, r7
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80094d4:	1d3b      	adds	r3, r7, #4
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	463b      	mov	r3, r7
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	4413      	add	r3, r2
 80094e2:	881b      	ldrh	r3, [r3, #0]
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	f000 80a5 	beq.w	800963a <USB_EPStartXfer+0x8fe>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80094f0:	1d3b      	adds	r3, r7, #4
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	673b      	str	r3, [r7, #112]	; 0x70
 80094f6:	463b      	mov	r3, r7
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	785b      	ldrb	r3, [r3, #1]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d16e      	bne.n	80095de <USB_EPStartXfer+0x8a2>
 8009500:	1d3b      	adds	r3, r7, #4
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	66bb      	str	r3, [r7, #104]	; 0x68
 8009506:	1d3b      	adds	r3, r7, #4
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800950e:	b29b      	uxth	r3, r3
 8009510:	461a      	mov	r2, r3
 8009512:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009514:	4413      	add	r3, r2
 8009516:	66bb      	str	r3, [r7, #104]	; 0x68
 8009518:	463b      	mov	r3, r7
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	011a      	lsls	r2, r3, #4
 8009520:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009522:	4413      	add	r3, r2
 8009524:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009528:	667b      	str	r3, [r7, #100]	; 0x64
 800952a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800952c:	881b      	ldrh	r3, [r3, #0]
 800952e:	b29b      	uxth	r3, r3
 8009530:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009534:	b29a      	uxth	r2, r3
 8009536:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009538:	801a      	strh	r2, [r3, #0]
 800953a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800953e:	2b3e      	cmp	r3, #62	; 0x3e
 8009540:	d921      	bls.n	8009586 <USB_EPStartXfer+0x84a>
 8009542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009546:	095b      	lsrs	r3, r3, #5
 8009548:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800954c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009550:	f003 031f 	and.w	r3, r3, #31
 8009554:	2b00      	cmp	r3, #0
 8009556:	d104      	bne.n	8009562 <USB_EPStartXfer+0x826>
 8009558:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800955c:	3b01      	subs	r3, #1
 800955e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009562:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009564:	881b      	ldrh	r3, [r3, #0]
 8009566:	b29a      	uxth	r2, r3
 8009568:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800956c:	b29b      	uxth	r3, r3
 800956e:	029b      	lsls	r3, r3, #10
 8009570:	b29b      	uxth	r3, r3
 8009572:	4313      	orrs	r3, r2
 8009574:	b29b      	uxth	r3, r3
 8009576:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800957a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800957e:	b29a      	uxth	r2, r3
 8009580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009582:	801a      	strh	r2, [r3, #0]
 8009584:	e047      	b.n	8009616 <USB_EPStartXfer+0x8da>
 8009586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800958a:	2b00      	cmp	r3, #0
 800958c:	d10a      	bne.n	80095a4 <USB_EPStartXfer+0x868>
 800958e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009590:	881b      	ldrh	r3, [r3, #0]
 8009592:	b29b      	uxth	r3, r3
 8009594:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009598:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800959c:	b29a      	uxth	r2, r3
 800959e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095a0:	801a      	strh	r2, [r3, #0]
 80095a2:	e038      	b.n	8009616 <USB_EPStartXfer+0x8da>
 80095a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095a8:	085b      	lsrs	r3, r3, #1
 80095aa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80095ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095b2:	f003 0301 	and.w	r3, r3, #1
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d004      	beq.n	80095c4 <USB_EPStartXfer+0x888>
 80095ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80095be:	3301      	adds	r3, #1
 80095c0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80095c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095c6:	881b      	ldrh	r3, [r3, #0]
 80095c8:	b29a      	uxth	r2, r3
 80095ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	029b      	lsls	r3, r3, #10
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	4313      	orrs	r3, r2
 80095d6:	b29a      	uxth	r2, r3
 80095d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095da:	801a      	strh	r2, [r3, #0]
 80095dc:	e01b      	b.n	8009616 <USB_EPStartXfer+0x8da>
 80095de:	463b      	mov	r3, r7
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	785b      	ldrb	r3, [r3, #1]
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d116      	bne.n	8009616 <USB_EPStartXfer+0x8da>
 80095e8:	1d3b      	adds	r3, r7, #4
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	461a      	mov	r2, r3
 80095f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80095f6:	4413      	add	r3, r2
 80095f8:	673b      	str	r3, [r7, #112]	; 0x70
 80095fa:	463b      	mov	r3, r7
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	011a      	lsls	r2, r3, #4
 8009602:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009604:	4413      	add	r3, r2
 8009606:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800960a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800960c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009610:	b29a      	uxth	r2, r3
 8009612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009614:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009616:	463b      	mov	r3, r7
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	895b      	ldrh	r3, [r3, #10]
 800961c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009620:	463b      	mov	r3, r7
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	6959      	ldr	r1, [r3, #20]
 8009626:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800962a:	b29b      	uxth	r3, r3
 800962c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009630:	1d38      	adds	r0, r7, #4
 8009632:	6800      	ldr	r0, [r0, #0]
 8009634:	f000 fe0c 	bl	800a250 <USB_WritePMA>
 8009638:	e0a9      	b.n	800978e <USB_EPStartXfer+0xa52>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800963a:	463b      	mov	r3, r7
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	785b      	ldrb	r3, [r3, #1]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d16e      	bne.n	8009722 <USB_EPStartXfer+0x9e6>
 8009644:	1d3b      	adds	r3, r7, #4
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	67fb      	str	r3, [r7, #124]	; 0x7c
 800964a:	1d3b      	adds	r3, r7, #4
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009652:	b29b      	uxth	r3, r3
 8009654:	461a      	mov	r2, r3
 8009656:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009658:	4413      	add	r3, r2
 800965a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800965c:	463b      	mov	r3, r7
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	011a      	lsls	r2, r3, #4
 8009664:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009666:	4413      	add	r3, r2
 8009668:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800966c:	67bb      	str	r3, [r7, #120]	; 0x78
 800966e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009670:	881b      	ldrh	r3, [r3, #0]
 8009672:	b29b      	uxth	r3, r3
 8009674:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009678:	b29a      	uxth	r2, r3
 800967a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800967c:	801a      	strh	r2, [r3, #0]
 800967e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009682:	2b3e      	cmp	r3, #62	; 0x3e
 8009684:	d921      	bls.n	80096ca <USB_EPStartXfer+0x98e>
 8009686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800968a:	095b      	lsrs	r3, r3, #5
 800968c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009694:	f003 031f 	and.w	r3, r3, #31
 8009698:	2b00      	cmp	r3, #0
 800969a:	d104      	bne.n	80096a6 <USB_EPStartXfer+0x96a>
 800969c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80096a0:	3b01      	subs	r3, #1
 80096a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80096a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096a8:	881b      	ldrh	r3, [r3, #0]
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	029b      	lsls	r3, r3, #10
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	4313      	orrs	r3, r2
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096c2:	b29a      	uxth	r2, r3
 80096c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096c6:	801a      	strh	r2, [r3, #0]
 80096c8:	e050      	b.n	800976c <USB_EPStartXfer+0xa30>
 80096ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d10a      	bne.n	80096e8 <USB_EPStartXfer+0x9ac>
 80096d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096d4:	881b      	ldrh	r3, [r3, #0]
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096e0:	b29a      	uxth	r2, r3
 80096e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096e4:	801a      	strh	r2, [r3, #0]
 80096e6:	e041      	b.n	800976c <USB_EPStartXfer+0xa30>
 80096e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096ec:	085b      	lsrs	r3, r3, #1
 80096ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80096f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096f6:	f003 0301 	and.w	r3, r3, #1
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d004      	beq.n	8009708 <USB_EPStartXfer+0x9cc>
 80096fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009702:	3301      	adds	r3, #1
 8009704:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009708:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800970a:	881b      	ldrh	r3, [r3, #0]
 800970c:	b29a      	uxth	r2, r3
 800970e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009712:	b29b      	uxth	r3, r3
 8009714:	029b      	lsls	r3, r3, #10
 8009716:	b29b      	uxth	r3, r3
 8009718:	4313      	orrs	r3, r2
 800971a:	b29a      	uxth	r2, r3
 800971c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800971e:	801a      	strh	r2, [r3, #0]
 8009720:	e024      	b.n	800976c <USB_EPStartXfer+0xa30>
 8009722:	463b      	mov	r3, r7
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	785b      	ldrb	r3, [r3, #1]
 8009728:	2b01      	cmp	r3, #1
 800972a:	d11f      	bne.n	800976c <USB_EPStartXfer+0xa30>
 800972c:	1d3b      	adds	r3, r7, #4
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009734:	1d3b      	adds	r3, r7, #4
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800973c:	b29b      	uxth	r3, r3
 800973e:	461a      	mov	r2, r3
 8009740:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009744:	4413      	add	r3, r2
 8009746:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800974a:	463b      	mov	r3, r7
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	011a      	lsls	r2, r3, #4
 8009752:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009756:	4413      	add	r3, r2
 8009758:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800975c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009760:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009764:	b29a      	uxth	r2, r3
 8009766:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800976a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800976c:	463b      	mov	r3, r7
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	891b      	ldrh	r3, [r3, #8]
 8009772:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009776:	463b      	mov	r3, r7
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	6959      	ldr	r1, [r3, #20]
 800977c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009780:	b29b      	uxth	r3, r3
 8009782:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009786:	1d38      	adds	r0, r7, #4
 8009788:	6800      	ldr	r0, [r0, #0]
 800978a:	f000 fd61 	bl	800a250 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800978e:	1d3b      	adds	r3, r7, #4
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	463b      	mov	r3, r7
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	4413      	add	r3, r2
 800979c:	881b      	ldrh	r3, [r3, #0]
 800979e:	b29b      	uxth	r3, r3
 80097a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097a8:	817b      	strh	r3, [r7, #10]
 80097aa:	897b      	ldrh	r3, [r7, #10]
 80097ac:	f083 0310 	eor.w	r3, r3, #16
 80097b0:	817b      	strh	r3, [r7, #10]
 80097b2:	897b      	ldrh	r3, [r7, #10]
 80097b4:	f083 0320 	eor.w	r3, r3, #32
 80097b8:	817b      	strh	r3, [r7, #10]
 80097ba:	1d3b      	adds	r3, r7, #4
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	463b      	mov	r3, r7
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	441a      	add	r2, r3
 80097c8:	897b      	ldrh	r3, [r7, #10]
 80097ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097da:	b29b      	uxth	r3, r3
 80097dc:	8013      	strh	r3, [r2, #0]
 80097de:	e3f3      	b.n	8009fc8 <USB_EPStartXfer+0x128c>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80097e0:	463b      	mov	r3, r7
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	7b1b      	ldrb	r3, [r3, #12]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	f040 809c 	bne.w	8009924 <USB_EPStartXfer+0xbe8>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80097ec:	463b      	mov	r3, r7
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	699a      	ldr	r2, [r3, #24]
 80097f2:	463b      	mov	r3, r7
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	691b      	ldr	r3, [r3, #16]
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d90e      	bls.n	800981a <USB_EPStartXfer+0xade>
      {
        len = ep->maxpacket;
 80097fc:	463b      	mov	r3, r7
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	691b      	ldr	r3, [r3, #16]
 8009802:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8009806:	463b      	mov	r3, r7
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	699a      	ldr	r2, [r3, #24]
 800980c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009810:	1ad2      	subs	r2, r2, r3
 8009812:	463b      	mov	r3, r7
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	619a      	str	r2, [r3, #24]
 8009818:	e008      	b.n	800982c <USB_EPStartXfer+0xaf0>
      }
      else
      {
        len = ep->xfer_len;
 800981a:	463b      	mov	r3, r7
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	699b      	ldr	r3, [r3, #24]
 8009820:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8009824:	463b      	mov	r3, r7
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2200      	movs	r2, #0
 800982a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800982c:	1d3b      	adds	r3, r7, #4
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009834:	1d3b      	adds	r3, r7, #4
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800983c:	b29b      	uxth	r3, r3
 800983e:	461a      	mov	r2, r3
 8009840:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009844:	4413      	add	r3, r2
 8009846:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800984a:	463b      	mov	r3, r7
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	011a      	lsls	r2, r3, #4
 8009852:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009856:	4413      	add	r3, r2
 8009858:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800985c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009860:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009864:	881b      	ldrh	r3, [r3, #0]
 8009866:	b29b      	uxth	r3, r3
 8009868:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800986c:	b29a      	uxth	r2, r3
 800986e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009872:	801a      	strh	r2, [r3, #0]
 8009874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009878:	2b3e      	cmp	r3, #62	; 0x3e
 800987a:	d923      	bls.n	80098c4 <USB_EPStartXfer+0xb88>
 800987c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009880:	095b      	lsrs	r3, r3, #5
 8009882:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800988a:	f003 031f 	and.w	r3, r3, #31
 800988e:	2b00      	cmp	r3, #0
 8009890:	d104      	bne.n	800989c <USB_EPStartXfer+0xb60>
 8009892:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009896:	3b01      	subs	r3, #1
 8009898:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800989c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80098a0:	881b      	ldrh	r3, [r3, #0]
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	029b      	lsls	r3, r3, #10
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	4313      	orrs	r3, r2
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098ba:	b29a      	uxth	r2, r3
 80098bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80098c0:	801a      	strh	r2, [r3, #0]
 80098c2:	e353      	b.n	8009f6c <USB_EPStartXfer+0x1230>
 80098c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d10c      	bne.n	80098e6 <USB_EPStartXfer+0xbaa>
 80098cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80098d0:	881b      	ldrh	r3, [r3, #0]
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098dc:	b29a      	uxth	r2, r3
 80098de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80098e2:	801a      	strh	r2, [r3, #0]
 80098e4:	e342      	b.n	8009f6c <USB_EPStartXfer+0x1230>
 80098e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098ea:	085b      	lsrs	r3, r3, #1
 80098ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80098f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098f4:	f003 0301 	and.w	r3, r3, #1
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d004      	beq.n	8009906 <USB_EPStartXfer+0xbca>
 80098fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009900:	3301      	adds	r3, #1
 8009902:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009906:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800990a:	881b      	ldrh	r3, [r3, #0]
 800990c:	b29a      	uxth	r2, r3
 800990e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009912:	b29b      	uxth	r3, r3
 8009914:	029b      	lsls	r3, r3, #10
 8009916:	b29b      	uxth	r3, r3
 8009918:	4313      	orrs	r3, r2
 800991a:	b29a      	uxth	r2, r3
 800991c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009920:	801a      	strh	r2, [r3, #0]
 8009922:	e323      	b.n	8009f6c <USB_EPStartXfer+0x1230>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009924:	463b      	mov	r3, r7
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	78db      	ldrb	r3, [r3, #3]
 800992a:	2b02      	cmp	r3, #2
 800992c:	f040 81a9 	bne.w	8009c82 <USB_EPStartXfer+0xf46>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009930:	463b      	mov	r3, r7
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	785b      	ldrb	r3, [r3, #1]
 8009936:	2b00      	cmp	r3, #0
 8009938:	f040 8082 	bne.w	8009a40 <USB_EPStartXfer+0xd04>
 800993c:	1d3b      	adds	r3, r7, #4
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009944:	1d3b      	adds	r3, r7, #4
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800994c:	b29b      	uxth	r3, r3
 800994e:	461a      	mov	r2, r3
 8009950:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009954:	4413      	add	r3, r2
 8009956:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800995a:	463b      	mov	r3, r7
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	011a      	lsls	r2, r3, #4
 8009962:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009966:	4413      	add	r3, r2
 8009968:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800996c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009970:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009974:	881b      	ldrh	r3, [r3, #0]
 8009976:	b29b      	uxth	r3, r3
 8009978:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800997c:	b29a      	uxth	r2, r3
 800997e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009982:	801a      	strh	r2, [r3, #0]
 8009984:	463b      	mov	r3, r7
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	2b3e      	cmp	r3, #62	; 0x3e
 800998c:	d925      	bls.n	80099da <USB_EPStartXfer+0xc9e>
 800998e:	463b      	mov	r3, r7
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	691b      	ldr	r3, [r3, #16]
 8009994:	095b      	lsrs	r3, r3, #5
 8009996:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800999a:	463b      	mov	r3, r7
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	f003 031f 	and.w	r3, r3, #31
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d104      	bne.n	80099b2 <USB_EPStartXfer+0xc76>
 80099a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099ac:	3b01      	subs	r3, #1
 80099ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80099b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099b6:	881b      	ldrh	r3, [r3, #0]
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099be:	b29b      	uxth	r3, r3
 80099c0:	029b      	lsls	r3, r3, #10
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	4313      	orrs	r3, r2
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099d0:	b29a      	uxth	r2, r3
 80099d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099d6:	801a      	strh	r2, [r3, #0]
 80099d8:	e058      	b.n	8009a8c <USB_EPStartXfer+0xd50>
 80099da:	463b      	mov	r3, r7
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d10c      	bne.n	80099fe <USB_EPStartXfer+0xcc2>
 80099e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099e8:	881b      	ldrh	r3, [r3, #0]
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099f4:	b29a      	uxth	r2, r3
 80099f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099fa:	801a      	strh	r2, [r3, #0]
 80099fc:	e046      	b.n	8009a8c <USB_EPStartXfer+0xd50>
 80099fe:	463b      	mov	r3, r7
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	691b      	ldr	r3, [r3, #16]
 8009a04:	085b      	lsrs	r3, r3, #1
 8009a06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009a0a:	463b      	mov	r3, r7
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	691b      	ldr	r3, [r3, #16]
 8009a10:	f003 0301 	and.w	r3, r3, #1
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d004      	beq.n	8009a22 <USB_EPStartXfer+0xce6>
 8009a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009a22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009a26:	881b      	ldrh	r3, [r3, #0]
 8009a28:	b29a      	uxth	r2, r3
 8009a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	029b      	lsls	r3, r3, #10
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	4313      	orrs	r3, r2
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009a3c:	801a      	strh	r2, [r3, #0]
 8009a3e:	e025      	b.n	8009a8c <USB_EPStartXfer+0xd50>
 8009a40:	463b      	mov	r3, r7
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	785b      	ldrb	r3, [r3, #1]
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d120      	bne.n	8009a8c <USB_EPStartXfer+0xd50>
 8009a4a:	1d3b      	adds	r3, r7, #4
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a52:	1d3b      	adds	r3, r7, #4
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009a62:	4413      	add	r3, r2
 8009a64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a68:	463b      	mov	r3, r7
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	011a      	lsls	r2, r3, #4
 8009a70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009a74:	4413      	add	r3, r2
 8009a76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009a7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009a7e:	463b      	mov	r3, r7
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	691b      	ldr	r3, [r3, #16]
 8009a84:	b29a      	uxth	r2, r3
 8009a86:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009a8a:	801a      	strh	r2, [r3, #0]
 8009a8c:	1d3b      	adds	r3, r7, #4
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009a94:	463b      	mov	r3, r7
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	785b      	ldrb	r3, [r3, #1]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f040 8082 	bne.w	8009ba4 <USB_EPStartXfer+0xe68>
 8009aa0:	1d3b      	adds	r3, r7, #4
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009aa8:	1d3b      	adds	r3, r7, #4
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ab8:	4413      	add	r3, r2
 8009aba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009abe:	463b      	mov	r3, r7
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	011a      	lsls	r2, r3, #4
 8009ac6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009aca:	4413      	add	r3, r2
 8009acc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009ad0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009ad4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ad8:	881b      	ldrh	r3, [r3, #0]
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ae0:	b29a      	uxth	r2, r3
 8009ae2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ae6:	801a      	strh	r2, [r3, #0]
 8009ae8:	463b      	mov	r3, r7
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	691b      	ldr	r3, [r3, #16]
 8009aee:	2b3e      	cmp	r3, #62	; 0x3e
 8009af0:	d925      	bls.n	8009b3e <USB_EPStartXfer+0xe02>
 8009af2:	463b      	mov	r3, r7
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	691b      	ldr	r3, [r3, #16]
 8009af8:	095b      	lsrs	r3, r3, #5
 8009afa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009afe:	463b      	mov	r3, r7
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	691b      	ldr	r3, [r3, #16]
 8009b04:	f003 031f 	and.w	r3, r3, #31
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d104      	bne.n	8009b16 <USB_EPStartXfer+0xdda>
 8009b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b10:	3b01      	subs	r3, #1
 8009b12:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009b16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b1a:	881b      	ldrh	r3, [r3, #0]
 8009b1c:	b29a      	uxth	r2, r3
 8009b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	029b      	lsls	r3, r3, #10
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b34:	b29a      	uxth	r2, r3
 8009b36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b3a:	801a      	strh	r2, [r3, #0]
 8009b3c:	e054      	b.n	8009be8 <USB_EPStartXfer+0xeac>
 8009b3e:	463b      	mov	r3, r7
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	691b      	ldr	r3, [r3, #16]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d10c      	bne.n	8009b62 <USB_EPStartXfer+0xe26>
 8009b48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b4c:	881b      	ldrh	r3, [r3, #0]
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b58:	b29a      	uxth	r2, r3
 8009b5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b5e:	801a      	strh	r2, [r3, #0]
 8009b60:	e042      	b.n	8009be8 <USB_EPStartXfer+0xeac>
 8009b62:	463b      	mov	r3, r7
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	691b      	ldr	r3, [r3, #16]
 8009b68:	085b      	lsrs	r3, r3, #1
 8009b6a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009b6e:	463b      	mov	r3, r7
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	f003 0301 	and.w	r3, r3, #1
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d004      	beq.n	8009b86 <USB_EPStartXfer+0xe4a>
 8009b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b80:	3301      	adds	r3, #1
 8009b82:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009b86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b8a:	881b      	ldrh	r3, [r3, #0]
 8009b8c:	b29a      	uxth	r2, r3
 8009b8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	029b      	lsls	r3, r3, #10
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	b29a      	uxth	r2, r3
 8009b9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ba0:	801a      	strh	r2, [r3, #0]
 8009ba2:	e021      	b.n	8009be8 <USB_EPStartXfer+0xeac>
 8009ba4:	463b      	mov	r3, r7
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	785b      	ldrb	r3, [r3, #1]
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d11c      	bne.n	8009be8 <USB_EPStartXfer+0xeac>
 8009bae:	1d3b      	adds	r3, r7, #4
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	461a      	mov	r2, r3
 8009bba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009bbe:	4413      	add	r3, r2
 8009bc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009bc4:	463b      	mov	r3, r7
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	011a      	lsls	r2, r3, #4
 8009bcc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009bd0:	4413      	add	r3, r2
 8009bd2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009bd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009bda:	463b      	mov	r3, r7
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	691b      	ldr	r3, [r3, #16]
 8009be0:	b29a      	uxth	r2, r3
 8009be2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009be6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009be8:	463b      	mov	r3, r7
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	69db      	ldr	r3, [r3, #28]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	f000 81bc 	beq.w	8009f6c <USB_EPStartXfer+0x1230>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009bf4:	1d3b      	adds	r3, r7, #4
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	463b      	mov	r3, r7
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	4413      	add	r3, r2
 8009c02:	881b      	ldrh	r3, [r3, #0]
 8009c04:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009c08:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009c0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d005      	beq.n	8009c20 <USB_EPStartXfer+0xee4>
 8009c14:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d10d      	bne.n	8009c3c <USB_EPStartXfer+0xf00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009c20:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	f040 819f 	bne.w	8009f6c <USB_EPStartXfer+0x1230>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009c2e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	f040 8198 	bne.w	8009f6c <USB_EPStartXfer+0x1230>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009c3c:	1d3b      	adds	r3, r7, #4
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	463b      	mov	r3, r7
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	4413      	add	r3, r2
 8009c4a:	881b      	ldrh	r3, [r3, #0]
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c56:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009c5a:	1d3b      	adds	r3, r7, #4
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	463b      	mov	r3, r7
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	441a      	add	r2, r3
 8009c68:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	8013      	strh	r3, [r2, #0]
 8009c80:	e174      	b.n	8009f6c <USB_EPStartXfer+0x1230>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009c82:	463b      	mov	r3, r7
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	78db      	ldrb	r3, [r3, #3]
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	f040 816d 	bne.w	8009f68 <USB_EPStartXfer+0x122c>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009c8e:	463b      	mov	r3, r7
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	699a      	ldr	r2, [r3, #24]
 8009c94:	463b      	mov	r3, r7
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	691b      	ldr	r3, [r3, #16]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d90e      	bls.n	8009cbc <USB_EPStartXfer+0xf80>
        {
          len = ep->maxpacket;
 8009c9e:	463b      	mov	r3, r7
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	691b      	ldr	r3, [r3, #16]
 8009ca4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8009ca8:	463b      	mov	r3, r7
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	699a      	ldr	r2, [r3, #24]
 8009cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cb2:	1ad2      	subs	r2, r2, r3
 8009cb4:	463b      	mov	r3, r7
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	619a      	str	r2, [r3, #24]
 8009cba:	e008      	b.n	8009cce <USB_EPStartXfer+0xf92>
        }
        else
        {
          len = ep->xfer_len;
 8009cbc:	463b      	mov	r3, r7
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	699b      	ldr	r3, [r3, #24]
 8009cc2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009cc6:	463b      	mov	r3, r7
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009cce:	463b      	mov	r3, r7
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	785b      	ldrb	r3, [r3, #1]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d17b      	bne.n	8009dd0 <USB_EPStartXfer+0x1094>
 8009cd8:	1d3b      	adds	r3, r7, #4
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009ce0:	1d3b      	adds	r3, r7, #4
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	461a      	mov	r2, r3
 8009cec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009cf0:	4413      	add	r3, r2
 8009cf2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009cf6:	463b      	mov	r3, r7
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	011a      	lsls	r2, r3, #4
 8009cfe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009d02:	4413      	add	r3, r2
 8009d04:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009d08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009d0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d10:	881b      	ldrh	r3, [r3, #0]
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d18:	b29a      	uxth	r2, r3
 8009d1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d1e:	801a      	strh	r2, [r3, #0]
 8009d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d24:	2b3e      	cmp	r3, #62	; 0x3e
 8009d26:	d923      	bls.n	8009d70 <USB_EPStartXfer+0x1034>
 8009d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d2c:	095b      	lsrs	r3, r3, #5
 8009d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d36:	f003 031f 	and.w	r3, r3, #31
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d104      	bne.n	8009d48 <USB_EPStartXfer+0x100c>
 8009d3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d42:	3b01      	subs	r3, #1
 8009d44:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009d48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d4c:	881b      	ldrh	r3, [r3, #0]
 8009d4e:	b29a      	uxth	r2, r3
 8009d50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	029b      	lsls	r3, r3, #10
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d66:	b29a      	uxth	r2, r3
 8009d68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d6c:	801a      	strh	r2, [r3, #0]
 8009d6e:	e054      	b.n	8009e1a <USB_EPStartXfer+0x10de>
 8009d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d10c      	bne.n	8009d92 <USB_EPStartXfer+0x1056>
 8009d78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d7c:	881b      	ldrh	r3, [r3, #0]
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d88:	b29a      	uxth	r2, r3
 8009d8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d8e:	801a      	strh	r2, [r3, #0]
 8009d90:	e043      	b.n	8009e1a <USB_EPStartXfer+0x10de>
 8009d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d96:	085b      	lsrs	r3, r3, #1
 8009d98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009da0:	f003 0301 	and.w	r3, r3, #1
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d004      	beq.n	8009db2 <USB_EPStartXfer+0x1076>
 8009da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009dac:	3301      	adds	r3, #1
 8009dae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009db2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009db6:	881b      	ldrh	r3, [r3, #0]
 8009db8:	b29a      	uxth	r2, r3
 8009dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	029b      	lsls	r3, r3, #10
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	b29a      	uxth	r2, r3
 8009dc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009dcc:	801a      	strh	r2, [r3, #0]
 8009dce:	e024      	b.n	8009e1a <USB_EPStartXfer+0x10de>
 8009dd0:	463b      	mov	r3, r7
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	785b      	ldrb	r3, [r3, #1]
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d11f      	bne.n	8009e1a <USB_EPStartXfer+0x10de>
 8009dda:	1d3b      	adds	r3, r7, #4
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009de2:	1d3b      	adds	r3, r7, #4
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	461a      	mov	r2, r3
 8009dee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009df2:	4413      	add	r3, r2
 8009df4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009df8:	463b      	mov	r3, r7
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	011a      	lsls	r2, r3, #4
 8009e00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009e04:	4413      	add	r3, r2
 8009e06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009e0a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e12:	b29a      	uxth	r2, r3
 8009e14:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009e18:	801a      	strh	r2, [r3, #0]
 8009e1a:	1d3b      	adds	r3, r7, #4
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009e22:	463b      	mov	r3, r7
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	785b      	ldrb	r3, [r3, #1]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d17b      	bne.n	8009f24 <USB_EPStartXfer+0x11e8>
 8009e2c:	1d3b      	adds	r3, r7, #4
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009e34:	1d3b      	adds	r3, r7, #4
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	461a      	mov	r2, r3
 8009e40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009e44:	4413      	add	r3, r2
 8009e46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009e4a:	463b      	mov	r3, r7
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	011a      	lsls	r2, r3, #4
 8009e52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009e56:	4413      	add	r3, r2
 8009e58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009e5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009e60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e64:	881b      	ldrh	r3, [r3, #0]
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e6c:	b29a      	uxth	r2, r3
 8009e6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e72:	801a      	strh	r2, [r3, #0]
 8009e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e78:	2b3e      	cmp	r3, #62	; 0x3e
 8009e7a:	d923      	bls.n	8009ec4 <USB_EPStartXfer+0x1188>
 8009e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e80:	095b      	lsrs	r3, r3, #5
 8009e82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e8a:	f003 031f 	and.w	r3, r3, #31
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d104      	bne.n	8009e9c <USB_EPStartXfer+0x1160>
 8009e92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e96:	3b01      	subs	r3, #1
 8009e98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009e9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009ea0:	881b      	ldrh	r3, [r3, #0]
 8009ea2:	b29a      	uxth	r2, r3
 8009ea4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	029b      	lsls	r3, r3, #10
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009eb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009eba:	b29a      	uxth	r2, r3
 8009ebc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009ec0:	801a      	strh	r2, [r3, #0]
 8009ec2:	e053      	b.n	8009f6c <USB_EPStartXfer+0x1230>
 8009ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d10c      	bne.n	8009ee6 <USB_EPStartXfer+0x11aa>
 8009ecc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009ed0:	881b      	ldrh	r3, [r3, #0]
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009edc:	b29a      	uxth	r2, r3
 8009ede:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009ee2:	801a      	strh	r2, [r3, #0]
 8009ee4:	e042      	b.n	8009f6c <USB_EPStartXfer+0x1230>
 8009ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009eea:	085b      	lsrs	r3, r3, #1
 8009eec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ef4:	f003 0301 	and.w	r3, r3, #1
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d004      	beq.n	8009f06 <USB_EPStartXfer+0x11ca>
 8009efc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f00:	3301      	adds	r3, #1
 8009f02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009f06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f0a:	881b      	ldrh	r3, [r3, #0]
 8009f0c:	b29a      	uxth	r2, r3
 8009f0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	029b      	lsls	r3, r3, #10
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	b29a      	uxth	r2, r3
 8009f1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f20:	801a      	strh	r2, [r3, #0]
 8009f22:	e023      	b.n	8009f6c <USB_EPStartXfer+0x1230>
 8009f24:	463b      	mov	r3, r7
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	785b      	ldrb	r3, [r3, #1]
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d11e      	bne.n	8009f6c <USB_EPStartXfer+0x1230>
 8009f2e:	1d3b      	adds	r3, r7, #4
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	461a      	mov	r2, r3
 8009f3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009f3e:	4413      	add	r3, r2
 8009f40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009f44:	463b      	mov	r3, r7
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	011a      	lsls	r2, r3, #4
 8009f4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009f50:	4413      	add	r3, r2
 8009f52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009f56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f5e:	b29a      	uxth	r2, r3
 8009f60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009f64:	801a      	strh	r2, [r3, #0]
 8009f66:	e001      	b.n	8009f6c <USB_EPStartXfer+0x1230>
      }
      else
      {
        return HAL_ERROR;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	e02e      	b.n	8009fca <USB_EPStartXfer+0x128e>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009f6c:	1d3b      	adds	r3, r7, #4
 8009f6e:	681a      	ldr	r2, [r3, #0]
 8009f70:	463b      	mov	r3, r7
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	4413      	add	r3, r2
 8009f7a:	881b      	ldrh	r3, [r3, #0]
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f86:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009f8a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009f8e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009f92:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009f96:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009f9a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009f9e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009fa2:	1d3b      	adds	r3, r7, #4
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	463b      	mov	r3, r7
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	441a      	add	r2, r3
 8009fb0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009fb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009fc8:	2300      	movs	r3, #0
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b085      	sub	sp, #20
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	785b      	ldrb	r3, [r3, #1]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d020      	beq.n	800a028 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	4413      	add	r3, r2
 8009ff0:	881b      	ldrh	r3, [r3, #0]
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ffc:	81bb      	strh	r3, [r7, #12]
 8009ffe:	89bb      	ldrh	r3, [r7, #12]
 800a000:	f083 0310 	eor.w	r3, r3, #16
 800a004:	81bb      	strh	r3, [r7, #12]
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	441a      	add	r2, r3
 800a010:	89bb      	ldrh	r3, [r7, #12]
 800a012:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a016:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a01a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a01e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a022:	b29b      	uxth	r3, r3
 800a024:	8013      	strh	r3, [r2, #0]
 800a026:	e01f      	b.n	800a068 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a028:	687a      	ldr	r2, [r7, #4]
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	4413      	add	r3, r2
 800a032:	881b      	ldrh	r3, [r3, #0]
 800a034:	b29b      	uxth	r3, r3
 800a036:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a03a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a03e:	81fb      	strh	r3, [r7, #14]
 800a040:	89fb      	ldrh	r3, [r7, #14]
 800a042:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a046:	81fb      	strh	r3, [r7, #14]
 800a048:	687a      	ldr	r2, [r7, #4]
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	009b      	lsls	r3, r3, #2
 800a050:	441a      	add	r2, r3
 800a052:	89fb      	ldrh	r3, [r7, #14]
 800a054:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a058:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a05c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a064:	b29b      	uxth	r3, r3
 800a066:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a068:	2300      	movs	r3, #0
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3714      	adds	r7, #20
 800a06e:	46bd      	mov	sp, r7
 800a070:	bc80      	pop	{r7}
 800a072:	4770      	bx	lr

0800a074 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a074:	b480      	push	{r7}
 800a076:	b087      	sub	sp, #28
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	7b1b      	ldrb	r3, [r3, #12]
 800a082:	2b00      	cmp	r3, #0
 800a084:	f040 809d 	bne.w	800a1c2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	785b      	ldrb	r3, [r3, #1]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d04c      	beq.n	800a12a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	4413      	add	r3, r2
 800a09a:	881b      	ldrh	r3, [r3, #0]
 800a09c:	823b      	strh	r3, [r7, #16]
 800a09e:	8a3b      	ldrh	r3, [r7, #16]
 800a0a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d01b      	beq.n	800a0e0 <USB_EPClearStall+0x6c>
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	009b      	lsls	r3, r3, #2
 800a0b0:	4413      	add	r3, r2
 800a0b2:	881b      	ldrh	r3, [r3, #0]
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0be:	81fb      	strh	r3, [r7, #14]
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	441a      	add	r2, r3
 800a0ca:	89fb      	ldrh	r3, [r7, #14]
 800a0cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	78db      	ldrb	r3, [r3, #3]
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	d06c      	beq.n	800a1c2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	4413      	add	r3, r2
 800a0f2:	881b      	ldrh	r3, [r3, #0]
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0fe:	81bb      	strh	r3, [r7, #12]
 800a100:	89bb      	ldrh	r3, [r7, #12]
 800a102:	f083 0320 	eor.w	r3, r3, #32
 800a106:	81bb      	strh	r3, [r7, #12]
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	441a      	add	r2, r3
 800a112:	89bb      	ldrh	r3, [r7, #12]
 800a114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a11c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a124:	b29b      	uxth	r3, r3
 800a126:	8013      	strh	r3, [r2, #0]
 800a128:	e04b      	b.n	800a1c2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	4413      	add	r3, r2
 800a134:	881b      	ldrh	r3, [r3, #0]
 800a136:	82fb      	strh	r3, [r7, #22]
 800a138:	8afb      	ldrh	r3, [r7, #22]
 800a13a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d01b      	beq.n	800a17a <USB_EPClearStall+0x106>
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	4413      	add	r3, r2
 800a14c:	881b      	ldrh	r3, [r3, #0]
 800a14e:	b29b      	uxth	r3, r3
 800a150:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a158:	82bb      	strh	r3, [r7, #20]
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	441a      	add	r2, r3
 800a164:	8abb      	ldrh	r3, [r7, #20]
 800a166:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a16a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a16e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a176:	b29b      	uxth	r3, r3
 800a178:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	009b      	lsls	r3, r3, #2
 800a182:	4413      	add	r3, r2
 800a184:	881b      	ldrh	r3, [r3, #0]
 800a186:	b29b      	uxth	r3, r3
 800a188:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a18c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a190:	827b      	strh	r3, [r7, #18]
 800a192:	8a7b      	ldrh	r3, [r7, #18]
 800a194:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a198:	827b      	strh	r3, [r7, #18]
 800a19a:	8a7b      	ldrh	r3, [r7, #18]
 800a19c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a1a0:	827b      	strh	r3, [r7, #18]
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	009b      	lsls	r3, r3, #2
 800a1aa:	441a      	add	r2, r3
 800a1ac:	8a7b      	ldrh	r3, [r7, #18]
 800a1ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a1c2:	2300      	movs	r3, #0
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	371c      	adds	r7, #28
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bc80      	pop	{r7}
 800a1cc:	4770      	bx	lr

0800a1ce <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a1ce:	b480      	push	{r7}
 800a1d0:	b083      	sub	sp, #12
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	6078      	str	r0, [r7, #4]
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a1da:	78fb      	ldrb	r3, [r7, #3]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d103      	bne.n	800a1e8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2280      	movs	r2, #128	; 0x80
 800a1e4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	370c      	adds	r7, #12
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bc80      	pop	{r7}
 800a1f2:	4770      	bx	lr

0800a1f4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	370c      	adds	r7, #12
 800a202:	46bd      	mov	sp, r7
 800a204:	bc80      	pop	{r7}
 800a206:	4770      	bx	lr

0800a208 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a210:	2300      	movs	r3, #0
}
 800a212:	4618      	mov	r0, r3
 800a214:	370c      	adds	r7, #12
 800a216:	46bd      	mov	sp, r7
 800a218:	bc80      	pop	{r7}
 800a21a:	4770      	bx	lr

0800a21c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b085      	sub	sp, #20
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a22e:	68fb      	ldr	r3, [r7, #12]
}
 800a230:	4618      	mov	r0, r3
 800a232:	3714      	adds	r7, #20
 800a234:	46bd      	mov	sp, r7
 800a236:	bc80      	pop	{r7}
 800a238:	4770      	bx	lr

0800a23a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a23a:	b480      	push	{r7}
 800a23c:	b083      	sub	sp, #12
 800a23e:	af00      	add	r7, sp, #0
 800a240:	6078      	str	r0, [r7, #4]
 800a242:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a244:	2300      	movs	r3, #0
}
 800a246:	4618      	mov	r0, r3
 800a248:	370c      	adds	r7, #12
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bc80      	pop	{r7}
 800a24e:	4770      	bx	lr

0800a250 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a250:	b480      	push	{r7}
 800a252:	b08b      	sub	sp, #44	; 0x2c
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	4611      	mov	r1, r2
 800a25c:	461a      	mov	r2, r3
 800a25e:	460b      	mov	r3, r1
 800a260:	80fb      	strh	r3, [r7, #6]
 800a262:	4613      	mov	r3, r2
 800a264:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a266:	88bb      	ldrh	r3, [r7, #4]
 800a268:	3301      	adds	r3, #1
 800a26a:	085b      	lsrs	r3, r3, #1
 800a26c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a276:	88fb      	ldrh	r3, [r7, #6]
 800a278:	005a      	lsls	r2, r3, #1
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	4413      	add	r3, r2
 800a27e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a282:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	627b      	str	r3, [r7, #36]	; 0x24
 800a288:	e01e      	b.n	800a2c8 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800a28a:	69fb      	ldr	r3, [r7, #28]
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	3301      	adds	r3, #1
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	021b      	lsls	r3, r3, #8
 800a298:	b21a      	sxth	r2, r3
 800a29a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	b21b      	sxth	r3, r3
 800a2a2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a2a4:	6a3b      	ldr	r3, [r7, #32]
 800a2a6:	8a7a      	ldrh	r2, [r7, #18]
 800a2a8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a2aa:	6a3b      	ldr	r3, [r7, #32]
 800a2ac:	3302      	adds	r3, #2
 800a2ae:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a2b0:	6a3b      	ldr	r3, [r7, #32]
 800a2b2:	3302      	adds	r3, #2
 800a2b4:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800a2b6:	69fb      	ldr	r3, [r7, #28]
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a2bc:	69fb      	ldr	r3, [r7, #28]
 800a2be:	3301      	adds	r3, #1
 800a2c0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c4:	3b01      	subs	r3, #1
 800a2c6:	627b      	str	r3, [r7, #36]	; 0x24
 800a2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d1dd      	bne.n	800a28a <USB_WritePMA+0x3a>
  }
}
 800a2ce:	bf00      	nop
 800a2d0:	bf00      	nop
 800a2d2:	372c      	adds	r7, #44	; 0x2c
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bc80      	pop	{r7}
 800a2d8:	4770      	bx	lr

0800a2da <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a2da:	b480      	push	{r7}
 800a2dc:	b08b      	sub	sp, #44	; 0x2c
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	60f8      	str	r0, [r7, #12]
 800a2e2:	60b9      	str	r1, [r7, #8]
 800a2e4:	4611      	mov	r1, r2
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	80fb      	strh	r3, [r7, #6]
 800a2ec:	4613      	mov	r3, r2
 800a2ee:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a2f0:	88bb      	ldrh	r3, [r7, #4]
 800a2f2:	085b      	lsrs	r3, r3, #1
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a300:	88fb      	ldrh	r3, [r7, #6]
 800a302:	005a      	lsls	r2, r3, #1
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	4413      	add	r3, r2
 800a308:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a30c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a30e:	69bb      	ldr	r3, [r7, #24]
 800a310:	627b      	str	r3, [r7, #36]	; 0x24
 800a312:	e01b      	b.n	800a34c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a314:	6a3b      	ldr	r3, [r7, #32]
 800a316:	881b      	ldrh	r3, [r3, #0]
 800a318:	b29b      	uxth	r3, r3
 800a31a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a31c:	6a3b      	ldr	r3, [r7, #32]
 800a31e:	3302      	adds	r3, #2
 800a320:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	b2da      	uxtb	r2, r3
 800a326:	69fb      	ldr	r3, [r7, #28]
 800a328:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a32a:	69fb      	ldr	r3, [r7, #28]
 800a32c:	3301      	adds	r3, #1
 800a32e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	0a1b      	lsrs	r3, r3, #8
 800a334:	b2da      	uxtb	r2, r3
 800a336:	69fb      	ldr	r3, [r7, #28]
 800a338:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a33a:	69fb      	ldr	r3, [r7, #28]
 800a33c:	3301      	adds	r3, #1
 800a33e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a340:	6a3b      	ldr	r3, [r7, #32]
 800a342:	3302      	adds	r3, #2
 800a344:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800a346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a348:	3b01      	subs	r3, #1
 800a34a:	627b      	str	r3, [r7, #36]	; 0x24
 800a34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d1e0      	bne.n	800a314 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a352:	88bb      	ldrh	r3, [r7, #4]
 800a354:	f003 0301 	and.w	r3, r3, #1
 800a358:	b29b      	uxth	r3, r3
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d007      	beq.n	800a36e <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800a35e:	6a3b      	ldr	r3, [r7, #32]
 800a360:	881b      	ldrh	r3, [r3, #0]
 800a362:	b29b      	uxth	r3, r3
 800a364:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	b2da      	uxtb	r2, r3
 800a36a:	69fb      	ldr	r3, [r7, #28]
 800a36c:	701a      	strb	r2, [r3, #0]
  }
}
 800a36e:	bf00      	nop
 800a370:	372c      	adds	r7, #44	; 0x2c
 800a372:	46bd      	mov	sp, r7
 800a374:	bc80      	pop	{r7}
 800a376:	4770      	bx	lr

0800a378 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	460b      	mov	r3, r1
 800a382:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a384:	2300      	movs	r3, #0
 800a386:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	7c1b      	ldrb	r3, [r3, #16]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d115      	bne.n	800a3bc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a390:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a394:	2202      	movs	r2, #2
 800a396:	2181      	movs	r1, #129	; 0x81
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f001 fe30 	bl	800bffe <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a3a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3a8:	2202      	movs	r2, #2
 800a3aa:	2101      	movs	r1, #1
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f001 fe26 	bl	800bffe <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a3ba:	e012      	b.n	800a3e2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a3bc:	2340      	movs	r3, #64	; 0x40
 800a3be:	2202      	movs	r2, #2
 800a3c0:	2181      	movs	r1, #129	; 0x81
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f001 fe1b 	bl	800bffe <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a3ce:	2340      	movs	r3, #64	; 0x40
 800a3d0:	2202      	movs	r2, #2
 800a3d2:	2101      	movs	r1, #1
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f001 fe12 	bl	800bffe <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2201      	movs	r2, #1
 800a3de:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a3e2:	2308      	movs	r3, #8
 800a3e4:	2203      	movs	r2, #3
 800a3e6:	2182      	movs	r1, #130	; 0x82
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f001 fe08 	bl	800bffe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a3f4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a3f8:	f001 ff28 	bl	800c24c <USBD_static_malloc>
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d102      	bne.n	800a414 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a40e:	2301      	movs	r3, #1
 800a410:	73fb      	strb	r3, [r7, #15]
 800a412:	e026      	b.n	800a462 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a41a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	2200      	movs	r2, #0
 800a42a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	2200      	movs	r2, #0
 800a432:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	7c1b      	ldrb	r3, [r3, #16]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d109      	bne.n	800a452 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a444:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a448:	2101      	movs	r1, #1
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f001 fec7 	bl	800c1de <USBD_LL_PrepareReceive>
 800a450:	e007      	b.n	800a462 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a458:	2340      	movs	r3, #64	; 0x40
 800a45a:	2101      	movs	r1, #1
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f001 febe 	bl	800c1de <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a462:	7bfb      	ldrb	r3, [r7, #15]
}
 800a464:	4618      	mov	r0, r3
 800a466:	3710      	adds	r7, #16
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	460b      	mov	r3, r1
 800a476:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a478:	2300      	movs	r3, #0
 800a47a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a47c:	2181      	movs	r1, #129	; 0x81
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f001 fde3 	bl	800c04a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a48a:	2101      	movs	r1, #1
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f001 fddc 	bl	800c04a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2200      	movs	r2, #0
 800a496:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a49a:	2182      	movs	r1, #130	; 0x82
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f001 fdd4 	bl	800c04a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d00e      	beq.n	800a4d0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f001 fece 	bl	800c264 <USBD_static_free>
    pdev->pClassData = NULL;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800a4d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	b086      	sub	sp, #24
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
 800a4e2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4ea:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a500:	2b00      	cmp	r3, #0
 800a502:	d039      	beq.n	800a578 <USBD_CDC_Setup+0x9e>
 800a504:	2b20      	cmp	r3, #32
 800a506:	d17f      	bne.n	800a608 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	88db      	ldrh	r3, [r3, #6]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d029      	beq.n	800a564 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	b25b      	sxtb	r3, r3
 800a516:	2b00      	cmp	r3, #0
 800a518:	da11      	bge.n	800a53e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	683a      	ldr	r2, [r7, #0]
 800a524:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a526:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a528:	683a      	ldr	r2, [r7, #0]
 800a52a:	88d2      	ldrh	r2, [r2, #6]
 800a52c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a52e:	6939      	ldr	r1, [r7, #16]
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	88db      	ldrh	r3, [r3, #6]
 800a534:	461a      	mov	r2, r3
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f001 f9d9 	bl	800b8ee <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a53c:	e06b      	b.n	800a616 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	785a      	ldrb	r2, [r3, #1]
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	88db      	ldrh	r3, [r3, #6]
 800a54c:	b2da      	uxtb	r2, r3
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a554:	6939      	ldr	r1, [r7, #16]
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	88db      	ldrh	r3, [r3, #6]
 800a55a:	461a      	mov	r2, r3
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f001 f9f4 	bl	800b94a <USBD_CtlPrepareRx>
      break;
 800a562:	e058      	b.n	800a616 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	683a      	ldr	r2, [r7, #0]
 800a56e:	7850      	ldrb	r0, [r2, #1]
 800a570:	2200      	movs	r2, #0
 800a572:	6839      	ldr	r1, [r7, #0]
 800a574:	4798      	blx	r3
      break;
 800a576:	e04e      	b.n	800a616 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	785b      	ldrb	r3, [r3, #1]
 800a57c:	2b0b      	cmp	r3, #11
 800a57e:	d02e      	beq.n	800a5de <USBD_CDC_Setup+0x104>
 800a580:	2b0b      	cmp	r3, #11
 800a582:	dc38      	bgt.n	800a5f6 <USBD_CDC_Setup+0x11c>
 800a584:	2b00      	cmp	r3, #0
 800a586:	d002      	beq.n	800a58e <USBD_CDC_Setup+0xb4>
 800a588:	2b0a      	cmp	r3, #10
 800a58a:	d014      	beq.n	800a5b6 <USBD_CDC_Setup+0xdc>
 800a58c:	e033      	b.n	800a5f6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a594:	2b03      	cmp	r3, #3
 800a596:	d107      	bne.n	800a5a8 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a598:	f107 030c 	add.w	r3, r7, #12
 800a59c:	2202      	movs	r2, #2
 800a59e:	4619      	mov	r1, r3
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f001 f9a4 	bl	800b8ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a5a6:	e02e      	b.n	800a606 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a5a8:	6839      	ldr	r1, [r7, #0]
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f001 f935 	bl	800b81a <USBD_CtlError>
            ret = USBD_FAIL;
 800a5b0:	2302      	movs	r3, #2
 800a5b2:	75fb      	strb	r3, [r7, #23]
          break;
 800a5b4:	e027      	b.n	800a606 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5bc:	2b03      	cmp	r3, #3
 800a5be:	d107      	bne.n	800a5d0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a5c0:	f107 030f 	add.w	r3, r7, #15
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f001 f990 	bl	800b8ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a5ce:	e01a      	b.n	800a606 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a5d0:	6839      	ldr	r1, [r7, #0]
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f001 f921 	bl	800b81a <USBD_CtlError>
            ret = USBD_FAIL;
 800a5d8:	2302      	movs	r3, #2
 800a5da:	75fb      	strb	r3, [r7, #23]
          break;
 800a5dc:	e013      	b.n	800a606 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5e4:	2b03      	cmp	r3, #3
 800a5e6:	d00d      	beq.n	800a604 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a5e8:	6839      	ldr	r1, [r7, #0]
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f001 f915 	bl	800b81a <USBD_CtlError>
            ret = USBD_FAIL;
 800a5f0:	2302      	movs	r3, #2
 800a5f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a5f4:	e006      	b.n	800a604 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a5f6:	6839      	ldr	r1, [r7, #0]
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f001 f90e 	bl	800b81a <USBD_CtlError>
          ret = USBD_FAIL;
 800a5fe:	2302      	movs	r3, #2
 800a600:	75fb      	strb	r3, [r7, #23]
          break;
 800a602:	e000      	b.n	800a606 <USBD_CDC_Setup+0x12c>
          break;
 800a604:	bf00      	nop
      }
      break;
 800a606:	e006      	b.n	800a616 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a608:	6839      	ldr	r1, [r7, #0]
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f001 f905 	bl	800b81a <USBD_CtlError>
      ret = USBD_FAIL;
 800a610:	2302      	movs	r3, #2
 800a612:	75fb      	strb	r3, [r7, #23]
      break;
 800a614:	bf00      	nop
  }

  return ret;
 800a616:	7dfb      	ldrb	r3, [r7, #23]
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3718      	adds	r7, #24
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b084      	sub	sp, #16
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	460b      	mov	r3, r1
 800a62a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a632:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a63a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a642:	2b00      	cmp	r3, #0
 800a644:	d03a      	beq.n	800a6bc <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a646:	78fa      	ldrb	r2, [r7, #3]
 800a648:	6879      	ldr	r1, [r7, #4]
 800a64a:	4613      	mov	r3, r2
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	4413      	add	r3, r2
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	440b      	add	r3, r1
 800a654:	331c      	adds	r3, #28
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d029      	beq.n	800a6b0 <USBD_CDC_DataIn+0x90>
 800a65c:	78fa      	ldrb	r2, [r7, #3]
 800a65e:	6879      	ldr	r1, [r7, #4]
 800a660:	4613      	mov	r3, r2
 800a662:	009b      	lsls	r3, r3, #2
 800a664:	4413      	add	r3, r2
 800a666:	009b      	lsls	r3, r3, #2
 800a668:	440b      	add	r3, r1
 800a66a:	331c      	adds	r3, #28
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	78f9      	ldrb	r1, [r7, #3]
 800a670:	68b8      	ldr	r0, [r7, #8]
 800a672:	460b      	mov	r3, r1
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	440b      	add	r3, r1
 800a678:	00db      	lsls	r3, r3, #3
 800a67a:	4403      	add	r3, r0
 800a67c:	3320      	adds	r3, #32
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	fbb2 f1f3 	udiv	r1, r2, r3
 800a684:	fb03 f301 	mul.w	r3, r3, r1
 800a688:	1ad3      	subs	r3, r2, r3
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d110      	bne.n	800a6b0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a68e:	78fa      	ldrb	r2, [r7, #3]
 800a690:	6879      	ldr	r1, [r7, #4]
 800a692:	4613      	mov	r3, r2
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	4413      	add	r3, r2
 800a698:	009b      	lsls	r3, r3, #2
 800a69a:	440b      	add	r3, r1
 800a69c:	331c      	adds	r3, #28
 800a69e:	2200      	movs	r2, #0
 800a6a0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a6a2:	78f9      	ldrb	r1, [r7, #3]
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f001 fd75 	bl	800c198 <USBD_LL_Transmit>
 800a6ae:	e003      	b.n	800a6b8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	e000      	b.n	800a6be <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a6bc:	2302      	movs	r3, #2
  }
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3710      	adds	r7, #16
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b084      	sub	sp, #16
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6d8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a6da:	78fb      	ldrb	r3, [r7, #3]
 800a6dc:	4619      	mov	r1, r3
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f001 fda0 	bl	800c224 <USBD_LL_GetRxDataSize>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d00d      	beq.n	800a712 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6fc:	68db      	ldr	r3, [r3, #12]
 800a6fe:	68fa      	ldr	r2, [r7, #12]
 800a700:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a704:	68fa      	ldr	r2, [r7, #12]
 800a706:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a70a:	4611      	mov	r1, r2
 800a70c:	4798      	blx	r3

    return USBD_OK;
 800a70e:	2300      	movs	r3, #0
 800a710:	e000      	b.n	800a714 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a712:	2302      	movs	r3, #2
  }
}
 800a714:	4618      	mov	r0, r3
 800a716:	3710      	adds	r7, #16
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b084      	sub	sp, #16
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a72a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a732:	2b00      	cmp	r3, #0
 800a734:	d015      	beq.n	800a762 <USBD_CDC_EP0_RxReady+0x46>
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a73c:	2bff      	cmp	r3, #255	; 0xff
 800a73e:	d010      	beq.n	800a762 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	68fa      	ldr	r2, [r7, #12]
 800a74a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a74e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a750:	68fa      	ldr	r2, [r7, #12]
 800a752:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a756:	b292      	uxth	r2, r2
 800a758:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	22ff      	movs	r2, #255	; 0xff
 800a75e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a762:	2300      	movs	r3, #0
}
 800a764:	4618      	mov	r0, r3
 800a766:	3710      	adds	r7, #16
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2243      	movs	r2, #67	; 0x43
 800a778:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a77a:	4b03      	ldr	r3, [pc, #12]	; (800a788 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	370c      	adds	r7, #12
 800a780:	46bd      	mov	sp, r7
 800a782:	bc80      	pop	{r7}
 800a784:	4770      	bx	lr
 800a786:	bf00      	nop
 800a788:	20000098 	.word	0x20000098

0800a78c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2243      	movs	r2, #67	; 0x43
 800a798:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a79a:	4b03      	ldr	r3, [pc, #12]	; (800a7a8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	370c      	adds	r7, #12
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bc80      	pop	{r7}
 800a7a4:	4770      	bx	lr
 800a7a6:	bf00      	nop
 800a7a8:	20000054 	.word	0x20000054

0800a7ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2243      	movs	r2, #67	; 0x43
 800a7b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a7ba:	4b03      	ldr	r3, [pc, #12]	; (800a7c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	370c      	adds	r7, #12
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bc80      	pop	{r7}
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop
 800a7c8:	200000dc 	.word	0x200000dc

0800a7cc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	220a      	movs	r2, #10
 800a7d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a7da:	4b03      	ldr	r3, [pc, #12]	; (800a7e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	370c      	adds	r7, #12
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bc80      	pop	{r7}
 800a7e4:	4770      	bx	lr
 800a7e6:	bf00      	nop
 800a7e8:	20000010 	.word	0x20000010

0800a7ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b085      	sub	sp, #20
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a7f6:	2302      	movs	r3, #2
 800a7f8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d005      	beq.n	800a80c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	683a      	ldr	r2, [r7, #0]
 800a804:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a808:	2300      	movs	r3, #0
 800a80a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a80c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3714      	adds	r7, #20
 800a812:	46bd      	mov	sp, r7
 800a814:	bc80      	pop	{r7}
 800a816:	4770      	bx	lr

0800a818 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a818:	b480      	push	{r7}
 800a81a:	b087      	sub	sp, #28
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	60f8      	str	r0, [r7, #12]
 800a820:	60b9      	str	r1, [r7, #8]
 800a822:	4613      	mov	r3, r2
 800a824:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a82c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	68ba      	ldr	r2, [r7, #8]
 800a832:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a836:	88fa      	ldrh	r2, [r7, #6]
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a83e:	2300      	movs	r3, #0
}
 800a840:	4618      	mov	r0, r3
 800a842:	371c      	adds	r7, #28
 800a844:	46bd      	mov	sp, r7
 800a846:	bc80      	pop	{r7}
 800a848:	4770      	bx	lr

0800a84a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a84a:	b480      	push	{r7}
 800a84c:	b085      	sub	sp, #20
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
 800a852:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a85a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	683a      	ldr	r2, [r7, #0]
 800a860:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a864:	2300      	movs	r3, #0
}
 800a866:	4618      	mov	r0, r3
 800a868:	3714      	adds	r7, #20
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bc80      	pop	{r7}
 800a86e:	4770      	bx	lr

0800a870 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a87e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a886:	2b00      	cmp	r3, #0
 800a888:	d017      	beq.n	800a8ba <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	7c1b      	ldrb	r3, [r3, #16]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d109      	bne.n	800a8a6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a898:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a89c:	2101      	movs	r1, #1
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f001 fc9d 	bl	800c1de <USBD_LL_PrepareReceive>
 800a8a4:	e007      	b.n	800a8b6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a8ac:	2340      	movs	r3, #64	; 0x40
 800a8ae:	2101      	movs	r1, #1
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f001 fc94 	bl	800c1de <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	e000      	b.n	800a8bc <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a8ba:	2302      	movs	r3, #2
  }
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3710      	adds	r7, #16
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	60f8      	str	r0, [r7, #12]
 800a8cc:	60b9      	str	r1, [r7, #8]
 800a8ce:	4613      	mov	r3, r2
 800a8d0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d101      	bne.n	800a8dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a8d8:	2302      	movs	r3, #2
 800a8da:	e01a      	b.n	800a912 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d003      	beq.n	800a8ee <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d003      	beq.n	800a8fc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	68ba      	ldr	r2, [r7, #8]
 800a8f8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2201      	movs	r2, #1
 800a900:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	79fa      	ldrb	r2, [r7, #7]
 800a908:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a90a:	68f8      	ldr	r0, [r7, #12]
 800a90c:	f001 fb02 	bl	800bf14 <USBD_LL_Init>

  return USBD_OK;
 800a910:	2300      	movs	r3, #0
}
 800a912:	4618      	mov	r0, r3
 800a914:	3710      	adds	r7, #16
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a91a:	b480      	push	{r7}
 800a91c:	b085      	sub	sp, #20
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
 800a922:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a924:	2300      	movs	r3, #0
 800a926:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d006      	beq.n	800a93c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	683a      	ldr	r2, [r7, #0]
 800a932:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a936:	2300      	movs	r3, #0
 800a938:	73fb      	strb	r3, [r7, #15]
 800a93a:	e001      	b.n	800a940 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a93c:	2302      	movs	r3, #2
 800a93e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a940:	7bfb      	ldrb	r3, [r7, #15]
}
 800a942:	4618      	mov	r0, r3
 800a944:	3714      	adds	r7, #20
 800a946:	46bd      	mov	sp, r7
 800a948:	bc80      	pop	{r7}
 800a94a:	4770      	bx	lr

0800a94c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b082      	sub	sp, #8
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f001 fb37 	bl	800bfc8 <USBD_LL_Start>

  return USBD_OK;
 800a95a:	2300      	movs	r3, #0
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3708      	adds	r7, #8
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a96c:	2300      	movs	r3, #0
}
 800a96e:	4618      	mov	r0, r3
 800a970:	370c      	adds	r7, #12
 800a972:	46bd      	mov	sp, r7
 800a974:	bc80      	pop	{r7}
 800a976:	4770      	bx	lr

0800a978 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	460b      	mov	r3, r1
 800a982:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a984:	2302      	movs	r3, #2
 800a986:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d00c      	beq.n	800a9ac <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	78fa      	ldrb	r2, [r7, #3]
 800a99c:	4611      	mov	r1, r2
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	4798      	blx	r3
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d101      	bne.n	800a9ac <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a9ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}

0800a9b6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a9b6:	b580      	push	{r7, lr}
 800a9b8:	b082      	sub	sp, #8
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6078      	str	r0, [r7, #4]
 800a9be:	460b      	mov	r3, r1
 800a9c0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	78fa      	ldrb	r2, [r7, #3]
 800a9cc:	4611      	mov	r1, r2
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	4798      	blx	r3

  return USBD_OK;
 800a9d2:	2300      	movs	r3, #0
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3708      	adds	r7, #8
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b082      	sub	sp, #8
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a9ec:	6839      	ldr	r1, [r7, #0]
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f000 fed7 	bl	800b7a2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800aa02:	461a      	mov	r2, r3
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800aa10:	f003 031f 	and.w	r3, r3, #31
 800aa14:	2b02      	cmp	r3, #2
 800aa16:	d016      	beq.n	800aa46 <USBD_LL_SetupStage+0x6a>
 800aa18:	2b02      	cmp	r3, #2
 800aa1a:	d81c      	bhi.n	800aa56 <USBD_LL_SetupStage+0x7a>
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d002      	beq.n	800aa26 <USBD_LL_SetupStage+0x4a>
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d008      	beq.n	800aa36 <USBD_LL_SetupStage+0x5a>
 800aa24:	e017      	b.n	800aa56 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 f9ca 	bl	800adc8 <USBD_StdDevReq>
      break;
 800aa34:	e01a      	b.n	800aa6c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 fa2c 	bl	800ae9c <USBD_StdItfReq>
      break;
 800aa44:	e012      	b.n	800aa6c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f000 fa6c 	bl	800af2c <USBD_StdEPReq>
      break;
 800aa54:	e00a      	b.n	800aa6c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800aa5c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aa60:	b2db      	uxtb	r3, r3
 800aa62:	4619      	mov	r1, r3
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f001 fb0f 	bl	800c088 <USBD_LL_StallEP>
      break;
 800aa6a:	bf00      	nop
  }

  return USBD_OK;
 800aa6c:	2300      	movs	r3, #0
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3708      	adds	r7, #8
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b086      	sub	sp, #24
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	60f8      	str	r0, [r7, #12]
 800aa7e:	460b      	mov	r3, r1
 800aa80:	607a      	str	r2, [r7, #4]
 800aa82:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800aa84:	7afb      	ldrb	r3, [r7, #11]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d14b      	bne.n	800ab22 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800aa90:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aa98:	2b03      	cmp	r3, #3
 800aa9a:	d134      	bne.n	800ab06 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	68da      	ldr	r2, [r3, #12]
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	691b      	ldr	r3, [r3, #16]
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d919      	bls.n	800aadc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	68da      	ldr	r2, [r3, #12]
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	691b      	ldr	r3, [r3, #16]
 800aab0:	1ad2      	subs	r2, r2, r3
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	68da      	ldr	r2, [r3, #12]
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d203      	bcs.n	800aaca <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	e002      	b.n	800aad0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800aace:	b29b      	uxth	r3, r3
 800aad0:	461a      	mov	r2, r3
 800aad2:	6879      	ldr	r1, [r7, #4]
 800aad4:	68f8      	ldr	r0, [r7, #12]
 800aad6:	f000 ff56 	bl	800b986 <USBD_CtlContinueRx>
 800aada:	e038      	b.n	800ab4e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aae2:	691b      	ldr	r3, [r3, #16]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d00a      	beq.n	800aafe <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800aaee:	2b03      	cmp	r3, #3
 800aaf0:	d105      	bne.n	800aafe <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaf8:	691b      	ldr	r3, [r3, #16]
 800aafa:	68f8      	ldr	r0, [r7, #12]
 800aafc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800aafe:	68f8      	ldr	r0, [r7, #12]
 800ab00:	f000 ff53 	bl	800b9aa <USBD_CtlSendStatus>
 800ab04:	e023      	b.n	800ab4e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ab0c:	2b05      	cmp	r3, #5
 800ab0e:	d11e      	bne.n	800ab4e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2200      	movs	r2, #0
 800ab14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800ab18:	2100      	movs	r1, #0
 800ab1a:	68f8      	ldr	r0, [r7, #12]
 800ab1c:	f001 fab4 	bl	800c088 <USBD_LL_StallEP>
 800ab20:	e015      	b.n	800ab4e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab28:	699b      	ldr	r3, [r3, #24]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d00d      	beq.n	800ab4a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800ab34:	2b03      	cmp	r3, #3
 800ab36:	d108      	bne.n	800ab4a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab3e:	699b      	ldr	r3, [r3, #24]
 800ab40:	7afa      	ldrb	r2, [r7, #11]
 800ab42:	4611      	mov	r1, r2
 800ab44:	68f8      	ldr	r0, [r7, #12]
 800ab46:	4798      	blx	r3
 800ab48:	e001      	b.n	800ab4e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ab4a:	2302      	movs	r3, #2
 800ab4c:	e000      	b.n	800ab50 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800ab4e:	2300      	movs	r3, #0
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3718      	adds	r7, #24
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b086      	sub	sp, #24
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	60f8      	str	r0, [r7, #12]
 800ab60:	460b      	mov	r3, r1
 800ab62:	607a      	str	r2, [r7, #4]
 800ab64:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ab66:	7afb      	ldrb	r3, [r7, #11]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d17f      	bne.n	800ac6c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	3314      	adds	r3, #20
 800ab70:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ab78:	2b02      	cmp	r3, #2
 800ab7a:	d15c      	bne.n	800ac36 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	68da      	ldr	r2, [r3, #12]
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	691b      	ldr	r3, [r3, #16]
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d915      	bls.n	800abb4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	68da      	ldr	r2, [r3, #12]
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	691b      	ldr	r3, [r3, #16]
 800ab90:	1ad2      	subs	r2, r2, r3
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	68db      	ldr	r3, [r3, #12]
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	6879      	ldr	r1, [r7, #4]
 800aba0:	68f8      	ldr	r0, [r7, #12]
 800aba2:	f000 fec0 	bl	800b926 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aba6:	2300      	movs	r3, #0
 800aba8:	2200      	movs	r2, #0
 800abaa:	2100      	movs	r1, #0
 800abac:	68f8      	ldr	r0, [r7, #12]
 800abae:	f001 fb16 	bl	800c1de <USBD_LL_PrepareReceive>
 800abb2:	e04e      	b.n	800ac52 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	697a      	ldr	r2, [r7, #20]
 800abba:	6912      	ldr	r2, [r2, #16]
 800abbc:	fbb3 f1f2 	udiv	r1, r3, r2
 800abc0:	fb02 f201 	mul.w	r2, r2, r1
 800abc4:	1a9b      	subs	r3, r3, r2
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d11c      	bne.n	800ac04 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	689a      	ldr	r2, [r3, #8]
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d316      	bcc.n	800ac04 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	689a      	ldr	r2, [r3, #8]
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d20f      	bcs.n	800ac04 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800abe4:	2200      	movs	r2, #0
 800abe6:	2100      	movs	r1, #0
 800abe8:	68f8      	ldr	r0, [r7, #12]
 800abea:	f000 fe9c 	bl	800b926 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	2200      	movs	r2, #0
 800abf2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800abf6:	2300      	movs	r3, #0
 800abf8:	2200      	movs	r2, #0
 800abfa:	2100      	movs	r1, #0
 800abfc:	68f8      	ldr	r0, [r7, #12]
 800abfe:	f001 faee 	bl	800c1de <USBD_LL_PrepareReceive>
 800ac02:	e026      	b.n	800ac52 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac0a:	68db      	ldr	r3, [r3, #12]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d00a      	beq.n	800ac26 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ac16:	2b03      	cmp	r3, #3
 800ac18:	d105      	bne.n	800ac26 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac20:	68db      	ldr	r3, [r3, #12]
 800ac22:	68f8      	ldr	r0, [r7, #12]
 800ac24:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800ac26:	2180      	movs	r1, #128	; 0x80
 800ac28:	68f8      	ldr	r0, [r7, #12]
 800ac2a:	f001 fa2d 	bl	800c088 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800ac2e:	68f8      	ldr	r0, [r7, #12]
 800ac30:	f000 fece 	bl	800b9d0 <USBD_CtlReceiveStatus>
 800ac34:	e00d      	b.n	800ac52 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ac3c:	2b04      	cmp	r3, #4
 800ac3e:	d004      	beq.n	800ac4a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d103      	bne.n	800ac52 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800ac4a:	2180      	movs	r1, #128	; 0x80
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f001 fa1b 	bl	800c088 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	d11d      	bne.n	800ac98 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800ac5c:	68f8      	ldr	r0, [r7, #12]
 800ac5e:	f7ff fe81 	bl	800a964 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2200      	movs	r2, #0
 800ac66:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ac6a:	e015      	b.n	800ac98 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac72:	695b      	ldr	r3, [r3, #20]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d00d      	beq.n	800ac94 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ac7e:	2b03      	cmp	r3, #3
 800ac80:	d108      	bne.n	800ac94 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac88:	695b      	ldr	r3, [r3, #20]
 800ac8a:	7afa      	ldrb	r2, [r7, #11]
 800ac8c:	4611      	mov	r1, r2
 800ac8e:	68f8      	ldr	r0, [r7, #12]
 800ac90:	4798      	blx	r3
 800ac92:	e001      	b.n	800ac98 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ac94:	2302      	movs	r3, #2
 800ac96:	e000      	b.n	800ac9a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800ac98:	2300      	movs	r3, #0
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3718      	adds	r7, #24
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}

0800aca2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aca2:	b580      	push	{r7, lr}
 800aca4:	b082      	sub	sp, #8
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800acaa:	2340      	movs	r3, #64	; 0x40
 800acac:	2200      	movs	r2, #0
 800acae:	2100      	movs	r1, #0
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f001 f9a4 	bl	800bffe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2201      	movs	r2, #1
 800acba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2240      	movs	r2, #64	; 0x40
 800acc2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800acc6:	2340      	movs	r3, #64	; 0x40
 800acc8:	2200      	movs	r2, #0
 800acca:	2180      	movs	r1, #128	; 0x80
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f001 f996 	bl	800bffe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2201      	movs	r2, #1
 800acd6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2240      	movs	r2, #64	; 0x40
 800acdc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2201      	movs	r2, #1
 800ace2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2200      	movs	r2, #0
 800acea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2200      	movs	r2, #0
 800acf2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2200      	movs	r2, #0
 800acf8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d009      	beq.n	800ad1a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	687a      	ldr	r2, [r7, #4]
 800ad10:	6852      	ldr	r2, [r2, #4]
 800ad12:	b2d2      	uxtb	r2, r2
 800ad14:	4611      	mov	r1, r2
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	4798      	blx	r3
  }

  return USBD_OK;
 800ad1a:	2300      	movs	r3, #0
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3708      	adds	r7, #8
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	460b      	mov	r3, r1
 800ad2e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	78fa      	ldrb	r2, [r7, #3]
 800ad34:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ad36:	2300      	movs	r3, #0
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	370c      	adds	r7, #12
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bc80      	pop	{r7}
 800ad40:	4770      	bx	lr

0800ad42 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ad42:	b480      	push	{r7}
 800ad44:	b083      	sub	sp, #12
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2204      	movs	r2, #4
 800ad5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ad5e:	2300      	movs	r3, #0
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	370c      	adds	r7, #12
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bc80      	pop	{r7}
 800ad68:	4770      	bx	lr

0800ad6a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ad6a:	b480      	push	{r7}
 800ad6c:	b083      	sub	sp, #12
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad78:	2b04      	cmp	r3, #4
 800ad7a:	d105      	bne.n	800ad88 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ad88:	2300      	movs	r3, #0
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	370c      	adds	r7, #12
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bc80      	pop	{r7}
 800ad92:	4770      	bx	lr

0800ad94 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b082      	sub	sp, #8
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ada2:	2b03      	cmp	r3, #3
 800ada4:	d10b      	bne.n	800adbe <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adac:	69db      	ldr	r3, [r3, #28]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d005      	beq.n	800adbe <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adb8:	69db      	ldr	r3, [r3, #28]
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800adbe:	2300      	movs	r3, #0
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3708      	adds	r7, #8
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800add2:	2300      	movs	r3, #0
 800add4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800adde:	2b40      	cmp	r3, #64	; 0x40
 800ade0:	d005      	beq.n	800adee <USBD_StdDevReq+0x26>
 800ade2:	2b40      	cmp	r3, #64	; 0x40
 800ade4:	d84f      	bhi.n	800ae86 <USBD_StdDevReq+0xbe>
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d009      	beq.n	800adfe <USBD_StdDevReq+0x36>
 800adea:	2b20      	cmp	r3, #32
 800adec:	d14b      	bne.n	800ae86 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adf4:	689b      	ldr	r3, [r3, #8]
 800adf6:	6839      	ldr	r1, [r7, #0]
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	4798      	blx	r3
      break;
 800adfc:	e048      	b.n	800ae90 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	785b      	ldrb	r3, [r3, #1]
 800ae02:	2b09      	cmp	r3, #9
 800ae04:	d839      	bhi.n	800ae7a <USBD_StdDevReq+0xb2>
 800ae06:	a201      	add	r2, pc, #4	; (adr r2, 800ae0c <USBD_StdDevReq+0x44>)
 800ae08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae0c:	0800ae5d 	.word	0x0800ae5d
 800ae10:	0800ae71 	.word	0x0800ae71
 800ae14:	0800ae7b 	.word	0x0800ae7b
 800ae18:	0800ae67 	.word	0x0800ae67
 800ae1c:	0800ae7b 	.word	0x0800ae7b
 800ae20:	0800ae3f 	.word	0x0800ae3f
 800ae24:	0800ae35 	.word	0x0800ae35
 800ae28:	0800ae7b 	.word	0x0800ae7b
 800ae2c:	0800ae53 	.word	0x0800ae53
 800ae30:	0800ae49 	.word	0x0800ae49
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ae34:	6839      	ldr	r1, [r7, #0]
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 f9dc 	bl	800b1f4 <USBD_GetDescriptor>
          break;
 800ae3c:	e022      	b.n	800ae84 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ae3e:	6839      	ldr	r1, [r7, #0]
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f000 fb3f 	bl	800b4c4 <USBD_SetAddress>
          break;
 800ae46:	e01d      	b.n	800ae84 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800ae48:	6839      	ldr	r1, [r7, #0]
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 fb7e 	bl	800b54c <USBD_SetConfig>
          break;
 800ae50:	e018      	b.n	800ae84 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ae52:	6839      	ldr	r1, [r7, #0]
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 fc07 	bl	800b668 <USBD_GetConfig>
          break;
 800ae5a:	e013      	b.n	800ae84 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ae5c:	6839      	ldr	r1, [r7, #0]
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 fc37 	bl	800b6d2 <USBD_GetStatus>
          break;
 800ae64:	e00e      	b.n	800ae84 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ae66:	6839      	ldr	r1, [r7, #0]
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f000 fc65 	bl	800b738 <USBD_SetFeature>
          break;
 800ae6e:	e009      	b.n	800ae84 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ae70:	6839      	ldr	r1, [r7, #0]
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f000 fc74 	bl	800b760 <USBD_ClrFeature>
          break;
 800ae78:	e004      	b.n	800ae84 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800ae7a:	6839      	ldr	r1, [r7, #0]
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 fccc 	bl	800b81a <USBD_CtlError>
          break;
 800ae82:	bf00      	nop
      }
      break;
 800ae84:	e004      	b.n	800ae90 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800ae86:	6839      	ldr	r1, [r7, #0]
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f000 fcc6 	bl	800b81a <USBD_CtlError>
      break;
 800ae8e:	bf00      	nop
  }

  return ret;
 800ae90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3710      	adds	r7, #16
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
 800ae9a:	bf00      	nop

0800ae9c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b084      	sub	sp, #16
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aea6:	2300      	movs	r3, #0
 800aea8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aeb2:	2b40      	cmp	r3, #64	; 0x40
 800aeb4:	d005      	beq.n	800aec2 <USBD_StdItfReq+0x26>
 800aeb6:	2b40      	cmp	r3, #64	; 0x40
 800aeb8:	d82e      	bhi.n	800af18 <USBD_StdItfReq+0x7c>
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d001      	beq.n	800aec2 <USBD_StdItfReq+0x26>
 800aebe:	2b20      	cmp	r3, #32
 800aec0:	d12a      	bne.n	800af18 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aec8:	3b01      	subs	r3, #1
 800aeca:	2b02      	cmp	r3, #2
 800aecc:	d81d      	bhi.n	800af0a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	889b      	ldrh	r3, [r3, #4]
 800aed2:	b2db      	uxtb	r3, r3
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	d813      	bhi.n	800af00 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aede:	689b      	ldr	r3, [r3, #8]
 800aee0:	6839      	ldr	r1, [r7, #0]
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	4798      	blx	r3
 800aee6:	4603      	mov	r3, r0
 800aee8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	88db      	ldrh	r3, [r3, #6]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d110      	bne.n	800af14 <USBD_StdItfReq+0x78>
 800aef2:	7bfb      	ldrb	r3, [r7, #15]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d10d      	bne.n	800af14 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 fd56 	bl	800b9aa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aefe:	e009      	b.n	800af14 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800af00:	6839      	ldr	r1, [r7, #0]
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f000 fc89 	bl	800b81a <USBD_CtlError>
          break;
 800af08:	e004      	b.n	800af14 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800af0a:	6839      	ldr	r1, [r7, #0]
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f000 fc84 	bl	800b81a <USBD_CtlError>
          break;
 800af12:	e000      	b.n	800af16 <USBD_StdItfReq+0x7a>
          break;
 800af14:	bf00      	nop
      }
      break;
 800af16:	e004      	b.n	800af22 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800af18:	6839      	ldr	r1, [r7, #0]
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 fc7d 	bl	800b81a <USBD_CtlError>
      break;
 800af20:	bf00      	nop
  }

  return USBD_OK;
 800af22:	2300      	movs	r3, #0
}
 800af24:	4618      	mov	r0, r3
 800af26:	3710      	adds	r7, #16
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800af36:	2300      	movs	r3, #0
 800af38:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	889b      	ldrh	r3, [r3, #4]
 800af3e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af48:	2b40      	cmp	r3, #64	; 0x40
 800af4a:	d007      	beq.n	800af5c <USBD_StdEPReq+0x30>
 800af4c:	2b40      	cmp	r3, #64	; 0x40
 800af4e:	f200 8146 	bhi.w	800b1de <USBD_StdEPReq+0x2b2>
 800af52:	2b00      	cmp	r3, #0
 800af54:	d00a      	beq.n	800af6c <USBD_StdEPReq+0x40>
 800af56:	2b20      	cmp	r3, #32
 800af58:	f040 8141 	bne.w	800b1de <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af62:	689b      	ldr	r3, [r3, #8]
 800af64:	6839      	ldr	r1, [r7, #0]
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	4798      	blx	r3
      break;
 800af6a:	e13d      	b.n	800b1e8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	781b      	ldrb	r3, [r3, #0]
 800af70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af74:	2b20      	cmp	r3, #32
 800af76:	d10a      	bne.n	800af8e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af7e:	689b      	ldr	r3, [r3, #8]
 800af80:	6839      	ldr	r1, [r7, #0]
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	4798      	blx	r3
 800af86:	4603      	mov	r3, r0
 800af88:	73fb      	strb	r3, [r7, #15]

        return ret;
 800af8a:	7bfb      	ldrb	r3, [r7, #15]
 800af8c:	e12d      	b.n	800b1ea <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	785b      	ldrb	r3, [r3, #1]
 800af92:	2b03      	cmp	r3, #3
 800af94:	d007      	beq.n	800afa6 <USBD_StdEPReq+0x7a>
 800af96:	2b03      	cmp	r3, #3
 800af98:	f300 811b 	bgt.w	800b1d2 <USBD_StdEPReq+0x2a6>
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d072      	beq.n	800b086 <USBD_StdEPReq+0x15a>
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d03a      	beq.n	800b01a <USBD_StdEPReq+0xee>
 800afa4:	e115      	b.n	800b1d2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afac:	2b02      	cmp	r3, #2
 800afae:	d002      	beq.n	800afb6 <USBD_StdEPReq+0x8a>
 800afb0:	2b03      	cmp	r3, #3
 800afb2:	d015      	beq.n	800afe0 <USBD_StdEPReq+0xb4>
 800afb4:	e02b      	b.n	800b00e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afb6:	7bbb      	ldrb	r3, [r7, #14]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d00c      	beq.n	800afd6 <USBD_StdEPReq+0xaa>
 800afbc:	7bbb      	ldrb	r3, [r7, #14]
 800afbe:	2b80      	cmp	r3, #128	; 0x80
 800afc0:	d009      	beq.n	800afd6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800afc2:	7bbb      	ldrb	r3, [r7, #14]
 800afc4:	4619      	mov	r1, r3
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f001 f85e 	bl	800c088 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800afcc:	2180      	movs	r1, #128	; 0x80
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f001 f85a 	bl	800c088 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800afd4:	e020      	b.n	800b018 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800afd6:	6839      	ldr	r1, [r7, #0]
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f000 fc1e 	bl	800b81a <USBD_CtlError>
              break;
 800afde:	e01b      	b.n	800b018 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	885b      	ldrh	r3, [r3, #2]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d10e      	bne.n	800b006 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800afe8:	7bbb      	ldrb	r3, [r7, #14]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d00b      	beq.n	800b006 <USBD_StdEPReq+0xda>
 800afee:	7bbb      	ldrb	r3, [r7, #14]
 800aff0:	2b80      	cmp	r3, #128	; 0x80
 800aff2:	d008      	beq.n	800b006 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	88db      	ldrh	r3, [r3, #6]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d104      	bne.n	800b006 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800affc:	7bbb      	ldrb	r3, [r7, #14]
 800affe:	4619      	mov	r1, r3
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f001 f841 	bl	800c088 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f000 fccf 	bl	800b9aa <USBD_CtlSendStatus>

              break;
 800b00c:	e004      	b.n	800b018 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b00e:	6839      	ldr	r1, [r7, #0]
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 fc02 	bl	800b81a <USBD_CtlError>
              break;
 800b016:	bf00      	nop
          }
          break;
 800b018:	e0e0      	b.n	800b1dc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b020:	2b02      	cmp	r3, #2
 800b022:	d002      	beq.n	800b02a <USBD_StdEPReq+0xfe>
 800b024:	2b03      	cmp	r3, #3
 800b026:	d015      	beq.n	800b054 <USBD_StdEPReq+0x128>
 800b028:	e026      	b.n	800b078 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b02a:	7bbb      	ldrb	r3, [r7, #14]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d00c      	beq.n	800b04a <USBD_StdEPReq+0x11e>
 800b030:	7bbb      	ldrb	r3, [r7, #14]
 800b032:	2b80      	cmp	r3, #128	; 0x80
 800b034:	d009      	beq.n	800b04a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b036:	7bbb      	ldrb	r3, [r7, #14]
 800b038:	4619      	mov	r1, r3
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f001 f824 	bl	800c088 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b040:	2180      	movs	r1, #128	; 0x80
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f001 f820 	bl	800c088 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b048:	e01c      	b.n	800b084 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b04a:	6839      	ldr	r1, [r7, #0]
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f000 fbe4 	bl	800b81a <USBD_CtlError>
              break;
 800b052:	e017      	b.n	800b084 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	885b      	ldrh	r3, [r3, #2]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d112      	bne.n	800b082 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b05c:	7bbb      	ldrb	r3, [r7, #14]
 800b05e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b062:	2b00      	cmp	r3, #0
 800b064:	d004      	beq.n	800b070 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b066:	7bbb      	ldrb	r3, [r7, #14]
 800b068:	4619      	mov	r1, r3
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f001 f82b 	bl	800c0c6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 fc9a 	bl	800b9aa <USBD_CtlSendStatus>
              }
              break;
 800b076:	e004      	b.n	800b082 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b078:	6839      	ldr	r1, [r7, #0]
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 fbcd 	bl	800b81a <USBD_CtlError>
              break;
 800b080:	e000      	b.n	800b084 <USBD_StdEPReq+0x158>
              break;
 800b082:	bf00      	nop
          }
          break;
 800b084:	e0aa      	b.n	800b1dc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b08c:	2b02      	cmp	r3, #2
 800b08e:	d002      	beq.n	800b096 <USBD_StdEPReq+0x16a>
 800b090:	2b03      	cmp	r3, #3
 800b092:	d032      	beq.n	800b0fa <USBD_StdEPReq+0x1ce>
 800b094:	e097      	b.n	800b1c6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b096:	7bbb      	ldrb	r3, [r7, #14]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d007      	beq.n	800b0ac <USBD_StdEPReq+0x180>
 800b09c:	7bbb      	ldrb	r3, [r7, #14]
 800b09e:	2b80      	cmp	r3, #128	; 0x80
 800b0a0:	d004      	beq.n	800b0ac <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b0a2:	6839      	ldr	r1, [r7, #0]
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 fbb8 	bl	800b81a <USBD_CtlError>
                break;
 800b0aa:	e091      	b.n	800b1d0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	da0b      	bge.n	800b0cc <USBD_StdEPReq+0x1a0>
 800b0b4:	7bbb      	ldrb	r3, [r7, #14]
 800b0b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b0ba:	4613      	mov	r3, r2
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	4413      	add	r3, r2
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	3310      	adds	r3, #16
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	4413      	add	r3, r2
 800b0c8:	3304      	adds	r3, #4
 800b0ca:	e00b      	b.n	800b0e4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b0cc:	7bbb      	ldrb	r3, [r7, #14]
 800b0ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0d2:	4613      	mov	r3, r2
 800b0d4:	009b      	lsls	r3, r3, #2
 800b0d6:	4413      	add	r3, r2
 800b0d8:	009b      	lsls	r3, r3, #2
 800b0da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	4413      	add	r3, r2
 800b0e2:	3304      	adds	r3, #4
 800b0e4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	2202      	movs	r2, #2
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 fbfb 	bl	800b8ee <USBD_CtlSendData>
              break;
 800b0f8:	e06a      	b.n	800b1d0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b0fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	da11      	bge.n	800b126 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b102:	7bbb      	ldrb	r3, [r7, #14]
 800b104:	f003 020f 	and.w	r2, r3, #15
 800b108:	6879      	ldr	r1, [r7, #4]
 800b10a:	4613      	mov	r3, r2
 800b10c:	009b      	lsls	r3, r3, #2
 800b10e:	4413      	add	r3, r2
 800b110:	009b      	lsls	r3, r3, #2
 800b112:	440b      	add	r3, r1
 800b114:	3318      	adds	r3, #24
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d117      	bne.n	800b14c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b11c:	6839      	ldr	r1, [r7, #0]
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 fb7b 	bl	800b81a <USBD_CtlError>
                  break;
 800b124:	e054      	b.n	800b1d0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b126:	7bbb      	ldrb	r3, [r7, #14]
 800b128:	f003 020f 	and.w	r2, r3, #15
 800b12c:	6879      	ldr	r1, [r7, #4]
 800b12e:	4613      	mov	r3, r2
 800b130:	009b      	lsls	r3, r3, #2
 800b132:	4413      	add	r3, r2
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	440b      	add	r3, r1
 800b138:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d104      	bne.n	800b14c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b142:	6839      	ldr	r1, [r7, #0]
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 fb68 	bl	800b81a <USBD_CtlError>
                  break;
 800b14a:	e041      	b.n	800b1d0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b14c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b150:	2b00      	cmp	r3, #0
 800b152:	da0b      	bge.n	800b16c <USBD_StdEPReq+0x240>
 800b154:	7bbb      	ldrb	r3, [r7, #14]
 800b156:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b15a:	4613      	mov	r3, r2
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	4413      	add	r3, r2
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	3310      	adds	r3, #16
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	4413      	add	r3, r2
 800b168:	3304      	adds	r3, #4
 800b16a:	e00b      	b.n	800b184 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b16c:	7bbb      	ldrb	r3, [r7, #14]
 800b16e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b172:	4613      	mov	r3, r2
 800b174:	009b      	lsls	r3, r3, #2
 800b176:	4413      	add	r3, r2
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	4413      	add	r3, r2
 800b182:	3304      	adds	r3, #4
 800b184:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b186:	7bbb      	ldrb	r3, [r7, #14]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d002      	beq.n	800b192 <USBD_StdEPReq+0x266>
 800b18c:	7bbb      	ldrb	r3, [r7, #14]
 800b18e:	2b80      	cmp	r3, #128	; 0x80
 800b190:	d103      	bne.n	800b19a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	2200      	movs	r2, #0
 800b196:	601a      	str	r2, [r3, #0]
 800b198:	e00e      	b.n	800b1b8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b19a:	7bbb      	ldrb	r3, [r7, #14]
 800b19c:	4619      	mov	r1, r3
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 ffb0 	bl	800c104 <USBD_LL_IsStallEP>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d003      	beq.n	800b1b2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	601a      	str	r2, [r3, #0]
 800b1b0:	e002      	b.n	800b1b8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	2202      	movs	r2, #2
 800b1bc:	4619      	mov	r1, r3
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 fb95 	bl	800b8ee <USBD_CtlSendData>
              break;
 800b1c4:	e004      	b.n	800b1d0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b1c6:	6839      	ldr	r1, [r7, #0]
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 fb26 	bl	800b81a <USBD_CtlError>
              break;
 800b1ce:	bf00      	nop
          }
          break;
 800b1d0:	e004      	b.n	800b1dc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b1d2:	6839      	ldr	r1, [r7, #0]
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 fb20 	bl	800b81a <USBD_CtlError>
          break;
 800b1da:	bf00      	nop
      }
      break;
 800b1dc:	e004      	b.n	800b1e8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b1de:	6839      	ldr	r1, [r7, #0]
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 fb1a 	bl	800b81a <USBD_CtlError>
      break;
 800b1e6:	bf00      	nop
  }

  return ret;
 800b1e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3710      	adds	r7, #16
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
	...

0800b1f4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b1fe:	2300      	movs	r3, #0
 800b200:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b202:	2300      	movs	r3, #0
 800b204:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b206:	2300      	movs	r3, #0
 800b208:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	885b      	ldrh	r3, [r3, #2]
 800b20e:	0a1b      	lsrs	r3, r3, #8
 800b210:	b29b      	uxth	r3, r3
 800b212:	3b01      	subs	r3, #1
 800b214:	2b06      	cmp	r3, #6
 800b216:	f200 8128 	bhi.w	800b46a <USBD_GetDescriptor+0x276>
 800b21a:	a201      	add	r2, pc, #4	; (adr r2, 800b220 <USBD_GetDescriptor+0x2c>)
 800b21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b220:	0800b23d 	.word	0x0800b23d
 800b224:	0800b255 	.word	0x0800b255
 800b228:	0800b295 	.word	0x0800b295
 800b22c:	0800b46b 	.word	0x0800b46b
 800b230:	0800b46b 	.word	0x0800b46b
 800b234:	0800b40b 	.word	0x0800b40b
 800b238:	0800b437 	.word	0x0800b437
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	687a      	ldr	r2, [r7, #4]
 800b246:	7c12      	ldrb	r2, [r2, #16]
 800b248:	f107 0108 	add.w	r1, r7, #8
 800b24c:	4610      	mov	r0, r2
 800b24e:	4798      	blx	r3
 800b250:	60f8      	str	r0, [r7, #12]
      break;
 800b252:	e112      	b.n	800b47a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	7c1b      	ldrb	r3, [r3, #16]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d10d      	bne.n	800b278 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b264:	f107 0208 	add.w	r2, r7, #8
 800b268:	4610      	mov	r0, r2
 800b26a:	4798      	blx	r3
 800b26c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	3301      	adds	r3, #1
 800b272:	2202      	movs	r2, #2
 800b274:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b276:	e100      	b.n	800b47a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b280:	f107 0208 	add.w	r2, r7, #8
 800b284:	4610      	mov	r0, r2
 800b286:	4798      	blx	r3
 800b288:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	3301      	adds	r3, #1
 800b28e:	2202      	movs	r2, #2
 800b290:	701a      	strb	r2, [r3, #0]
      break;
 800b292:	e0f2      	b.n	800b47a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	885b      	ldrh	r3, [r3, #2]
 800b298:	b2db      	uxtb	r3, r3
 800b29a:	2b05      	cmp	r3, #5
 800b29c:	f200 80ac 	bhi.w	800b3f8 <USBD_GetDescriptor+0x204>
 800b2a0:	a201      	add	r2, pc, #4	; (adr r2, 800b2a8 <USBD_GetDescriptor+0xb4>)
 800b2a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2a6:	bf00      	nop
 800b2a8:	0800b2c1 	.word	0x0800b2c1
 800b2ac:	0800b2f5 	.word	0x0800b2f5
 800b2b0:	0800b329 	.word	0x0800b329
 800b2b4:	0800b35d 	.word	0x0800b35d
 800b2b8:	0800b391 	.word	0x0800b391
 800b2bc:	0800b3c5 	.word	0x0800b3c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d00b      	beq.n	800b2e4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	7c12      	ldrb	r2, [r2, #16]
 800b2d8:	f107 0108 	add.w	r1, r7, #8
 800b2dc:	4610      	mov	r0, r2
 800b2de:	4798      	blx	r3
 800b2e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2e2:	e091      	b.n	800b408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2e4:	6839      	ldr	r1, [r7, #0]
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f000 fa97 	bl	800b81a <USBD_CtlError>
            err++;
 800b2ec:	7afb      	ldrb	r3, [r7, #11]
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	72fb      	strb	r3, [r7, #11]
          break;
 800b2f2:	e089      	b.n	800b408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b2fa:	689b      	ldr	r3, [r3, #8]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d00b      	beq.n	800b318 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b306:	689b      	ldr	r3, [r3, #8]
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	7c12      	ldrb	r2, [r2, #16]
 800b30c:	f107 0108 	add.w	r1, r7, #8
 800b310:	4610      	mov	r0, r2
 800b312:	4798      	blx	r3
 800b314:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b316:	e077      	b.n	800b408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b318:	6839      	ldr	r1, [r7, #0]
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f000 fa7d 	bl	800b81a <USBD_CtlError>
            err++;
 800b320:	7afb      	ldrb	r3, [r7, #11]
 800b322:	3301      	adds	r3, #1
 800b324:	72fb      	strb	r3, [r7, #11]
          break;
 800b326:	e06f      	b.n	800b408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b32e:	68db      	ldr	r3, [r3, #12]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d00b      	beq.n	800b34c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b33a:	68db      	ldr	r3, [r3, #12]
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	7c12      	ldrb	r2, [r2, #16]
 800b340:	f107 0108 	add.w	r1, r7, #8
 800b344:	4610      	mov	r0, r2
 800b346:	4798      	blx	r3
 800b348:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b34a:	e05d      	b.n	800b408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b34c:	6839      	ldr	r1, [r7, #0]
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f000 fa63 	bl	800b81a <USBD_CtlError>
            err++;
 800b354:	7afb      	ldrb	r3, [r7, #11]
 800b356:	3301      	adds	r3, #1
 800b358:	72fb      	strb	r3, [r7, #11]
          break;
 800b35a:	e055      	b.n	800b408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b362:	691b      	ldr	r3, [r3, #16]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d00b      	beq.n	800b380 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b36e:	691b      	ldr	r3, [r3, #16]
 800b370:	687a      	ldr	r2, [r7, #4]
 800b372:	7c12      	ldrb	r2, [r2, #16]
 800b374:	f107 0108 	add.w	r1, r7, #8
 800b378:	4610      	mov	r0, r2
 800b37a:	4798      	blx	r3
 800b37c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b37e:	e043      	b.n	800b408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b380:	6839      	ldr	r1, [r7, #0]
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f000 fa49 	bl	800b81a <USBD_CtlError>
            err++;
 800b388:	7afb      	ldrb	r3, [r7, #11]
 800b38a:	3301      	adds	r3, #1
 800b38c:	72fb      	strb	r3, [r7, #11]
          break;
 800b38e:	e03b      	b.n	800b408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b396:	695b      	ldr	r3, [r3, #20]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d00b      	beq.n	800b3b4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b3a2:	695b      	ldr	r3, [r3, #20]
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	7c12      	ldrb	r2, [r2, #16]
 800b3a8:	f107 0108 	add.w	r1, r7, #8
 800b3ac:	4610      	mov	r0, r2
 800b3ae:	4798      	blx	r3
 800b3b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3b2:	e029      	b.n	800b408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3b4:	6839      	ldr	r1, [r7, #0]
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 fa2f 	bl	800b81a <USBD_CtlError>
            err++;
 800b3bc:	7afb      	ldrb	r3, [r7, #11]
 800b3be:	3301      	adds	r3, #1
 800b3c0:	72fb      	strb	r3, [r7, #11]
          break;
 800b3c2:	e021      	b.n	800b408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b3ca:	699b      	ldr	r3, [r3, #24]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d00b      	beq.n	800b3e8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b3d6:	699b      	ldr	r3, [r3, #24]
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	7c12      	ldrb	r2, [r2, #16]
 800b3dc:	f107 0108 	add.w	r1, r7, #8
 800b3e0:	4610      	mov	r0, r2
 800b3e2:	4798      	blx	r3
 800b3e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3e6:	e00f      	b.n	800b408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3e8:	6839      	ldr	r1, [r7, #0]
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 fa15 	bl	800b81a <USBD_CtlError>
            err++;
 800b3f0:	7afb      	ldrb	r3, [r7, #11]
 800b3f2:	3301      	adds	r3, #1
 800b3f4:	72fb      	strb	r3, [r7, #11]
          break;
 800b3f6:	e007      	b.n	800b408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b3f8:	6839      	ldr	r1, [r7, #0]
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f000 fa0d 	bl	800b81a <USBD_CtlError>
          err++;
 800b400:	7afb      	ldrb	r3, [r7, #11]
 800b402:	3301      	adds	r3, #1
 800b404:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b406:	e038      	b.n	800b47a <USBD_GetDescriptor+0x286>
 800b408:	e037      	b.n	800b47a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	7c1b      	ldrb	r3, [r3, #16]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d109      	bne.n	800b426 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b41a:	f107 0208 	add.w	r2, r7, #8
 800b41e:	4610      	mov	r0, r2
 800b420:	4798      	blx	r3
 800b422:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b424:	e029      	b.n	800b47a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b426:	6839      	ldr	r1, [r7, #0]
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f000 f9f6 	bl	800b81a <USBD_CtlError>
        err++;
 800b42e:	7afb      	ldrb	r3, [r7, #11]
 800b430:	3301      	adds	r3, #1
 800b432:	72fb      	strb	r3, [r7, #11]
      break;
 800b434:	e021      	b.n	800b47a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	7c1b      	ldrb	r3, [r3, #16]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d10d      	bne.n	800b45a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b446:	f107 0208 	add.w	r2, r7, #8
 800b44a:	4610      	mov	r0, r2
 800b44c:	4798      	blx	r3
 800b44e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	3301      	adds	r3, #1
 800b454:	2207      	movs	r2, #7
 800b456:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b458:	e00f      	b.n	800b47a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b45a:	6839      	ldr	r1, [r7, #0]
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f000 f9dc 	bl	800b81a <USBD_CtlError>
        err++;
 800b462:	7afb      	ldrb	r3, [r7, #11]
 800b464:	3301      	adds	r3, #1
 800b466:	72fb      	strb	r3, [r7, #11]
      break;
 800b468:	e007      	b.n	800b47a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b46a:	6839      	ldr	r1, [r7, #0]
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f000 f9d4 	bl	800b81a <USBD_CtlError>
      err++;
 800b472:	7afb      	ldrb	r3, [r7, #11]
 800b474:	3301      	adds	r3, #1
 800b476:	72fb      	strb	r3, [r7, #11]
      break;
 800b478:	bf00      	nop
  }

  if (err != 0U)
 800b47a:	7afb      	ldrb	r3, [r7, #11]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d11c      	bne.n	800b4ba <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b480:	893b      	ldrh	r3, [r7, #8]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d011      	beq.n	800b4aa <USBD_GetDescriptor+0x2b6>
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	88db      	ldrh	r3, [r3, #6]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d00d      	beq.n	800b4aa <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	88da      	ldrh	r2, [r3, #6]
 800b492:	893b      	ldrh	r3, [r7, #8]
 800b494:	4293      	cmp	r3, r2
 800b496:	bf28      	it	cs
 800b498:	4613      	movcs	r3, r2
 800b49a:	b29b      	uxth	r3, r3
 800b49c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b49e:	893b      	ldrh	r3, [r7, #8]
 800b4a0:	461a      	mov	r2, r3
 800b4a2:	68f9      	ldr	r1, [r7, #12]
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 fa22 	bl	800b8ee <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	88db      	ldrh	r3, [r3, #6]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d104      	bne.n	800b4bc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f000 fa79 	bl	800b9aa <USBD_CtlSendStatus>
 800b4b8:	e000      	b.n	800b4bc <USBD_GetDescriptor+0x2c8>
    return;
 800b4ba:	bf00      	nop
    }
  }
}
 800b4bc:	3710      	adds	r7, #16
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}
 800b4c2:	bf00      	nop

0800b4c4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	889b      	ldrh	r3, [r3, #4]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d130      	bne.n	800b538 <USBD_SetAddress+0x74>
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	88db      	ldrh	r3, [r3, #6]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d12c      	bne.n	800b538 <USBD_SetAddress+0x74>
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	885b      	ldrh	r3, [r3, #2]
 800b4e2:	2b7f      	cmp	r3, #127	; 0x7f
 800b4e4:	d828      	bhi.n	800b538 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	885b      	ldrh	r3, [r3, #2]
 800b4ea:	b2db      	uxtb	r3, r3
 800b4ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4f8:	2b03      	cmp	r3, #3
 800b4fa:	d104      	bne.n	800b506 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b4fc:	6839      	ldr	r1, [r7, #0]
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f000 f98b 	bl	800b81a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b504:	e01d      	b.n	800b542 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	7bfa      	ldrb	r2, [r7, #15]
 800b50a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b50e:	7bfb      	ldrb	r3, [r7, #15]
 800b510:	4619      	mov	r1, r3
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 fe21 	bl	800c15a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f000 fa46 	bl	800b9aa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b51e:	7bfb      	ldrb	r3, [r7, #15]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d004      	beq.n	800b52e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2202      	movs	r2, #2
 800b528:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b52c:	e009      	b.n	800b542 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2201      	movs	r2, #1
 800b532:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b536:	e004      	b.n	800b542 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b538:	6839      	ldr	r1, [r7, #0]
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f000 f96d 	bl	800b81a <USBD_CtlError>
  }
}
 800b540:	bf00      	nop
 800b542:	bf00      	nop
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
	...

0800b54c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	885b      	ldrh	r3, [r3, #2]
 800b55a:	b2da      	uxtb	r2, r3
 800b55c:	4b41      	ldr	r3, [pc, #260]	; (800b664 <USBD_SetConfig+0x118>)
 800b55e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b560:	4b40      	ldr	r3, [pc, #256]	; (800b664 <USBD_SetConfig+0x118>)
 800b562:	781b      	ldrb	r3, [r3, #0]
 800b564:	2b01      	cmp	r3, #1
 800b566:	d904      	bls.n	800b572 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b568:	6839      	ldr	r1, [r7, #0]
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 f955 	bl	800b81a <USBD_CtlError>
 800b570:	e075      	b.n	800b65e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b578:	2b02      	cmp	r3, #2
 800b57a:	d002      	beq.n	800b582 <USBD_SetConfig+0x36>
 800b57c:	2b03      	cmp	r3, #3
 800b57e:	d023      	beq.n	800b5c8 <USBD_SetConfig+0x7c>
 800b580:	e062      	b.n	800b648 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b582:	4b38      	ldr	r3, [pc, #224]	; (800b664 <USBD_SetConfig+0x118>)
 800b584:	781b      	ldrb	r3, [r3, #0]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d01a      	beq.n	800b5c0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b58a:	4b36      	ldr	r3, [pc, #216]	; (800b664 <USBD_SetConfig+0x118>)
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	461a      	mov	r2, r3
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2203      	movs	r2, #3
 800b598:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b59c:	4b31      	ldr	r3, [pc, #196]	; (800b664 <USBD_SetConfig+0x118>)
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f7ff f9e8 	bl	800a978 <USBD_SetClassConfig>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	2b02      	cmp	r3, #2
 800b5ac:	d104      	bne.n	800b5b8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b5ae:	6839      	ldr	r1, [r7, #0]
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f000 f932 	bl	800b81a <USBD_CtlError>
            return;
 800b5b6:	e052      	b.n	800b65e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 f9f6 	bl	800b9aa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b5be:	e04e      	b.n	800b65e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 f9f2 	bl	800b9aa <USBD_CtlSendStatus>
        break;
 800b5c6:	e04a      	b.n	800b65e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b5c8:	4b26      	ldr	r3, [pc, #152]	; (800b664 <USBD_SetConfig+0x118>)
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d112      	bne.n	800b5f6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2202      	movs	r2, #2
 800b5d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b5d8:	4b22      	ldr	r3, [pc, #136]	; (800b664 <USBD_SetConfig+0x118>)
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	461a      	mov	r2, r3
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b5e2:	4b20      	ldr	r3, [pc, #128]	; (800b664 <USBD_SetConfig+0x118>)
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f7ff f9e4 	bl	800a9b6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f000 f9db 	bl	800b9aa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b5f4:	e033      	b.n	800b65e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b5f6:	4b1b      	ldr	r3, [pc, #108]	; (800b664 <USBD_SetConfig+0x118>)
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	429a      	cmp	r2, r3
 800b602:	d01d      	beq.n	800b640 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	b2db      	uxtb	r3, r3
 800b60a:	4619      	mov	r1, r3
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f7ff f9d2 	bl	800a9b6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b612:	4b14      	ldr	r3, [pc, #80]	; (800b664 <USBD_SetConfig+0x118>)
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	461a      	mov	r2, r3
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b61c:	4b11      	ldr	r3, [pc, #68]	; (800b664 <USBD_SetConfig+0x118>)
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	4619      	mov	r1, r3
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f7ff f9a8 	bl	800a978 <USBD_SetClassConfig>
 800b628:	4603      	mov	r3, r0
 800b62a:	2b02      	cmp	r3, #2
 800b62c:	d104      	bne.n	800b638 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b62e:	6839      	ldr	r1, [r7, #0]
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 f8f2 	bl	800b81a <USBD_CtlError>
            return;
 800b636:	e012      	b.n	800b65e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 f9b6 	bl	800b9aa <USBD_CtlSendStatus>
        break;
 800b63e:	e00e      	b.n	800b65e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f000 f9b2 	bl	800b9aa <USBD_CtlSendStatus>
        break;
 800b646:	e00a      	b.n	800b65e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b648:	6839      	ldr	r1, [r7, #0]
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 f8e5 	bl	800b81a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b650:	4b04      	ldr	r3, [pc, #16]	; (800b664 <USBD_SetConfig+0x118>)
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	4619      	mov	r1, r3
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f7ff f9ad 	bl	800a9b6 <USBD_ClrClassConfig>
        break;
 800b65c:	bf00      	nop
    }
  }
}
 800b65e:	3708      	adds	r7, #8
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}
 800b664:	20000588 	.word	0x20000588

0800b668 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b082      	sub	sp, #8
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	88db      	ldrh	r3, [r3, #6]
 800b676:	2b01      	cmp	r3, #1
 800b678:	d004      	beq.n	800b684 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b67a:	6839      	ldr	r1, [r7, #0]
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f000 f8cc 	bl	800b81a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b682:	e022      	b.n	800b6ca <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b68a:	2b02      	cmp	r3, #2
 800b68c:	dc02      	bgt.n	800b694 <USBD_GetConfig+0x2c>
 800b68e:	2b00      	cmp	r3, #0
 800b690:	dc03      	bgt.n	800b69a <USBD_GetConfig+0x32>
 800b692:	e015      	b.n	800b6c0 <USBD_GetConfig+0x58>
 800b694:	2b03      	cmp	r3, #3
 800b696:	d00b      	beq.n	800b6b0 <USBD_GetConfig+0x48>
 800b698:	e012      	b.n	800b6c0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2200      	movs	r2, #0
 800b69e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	3308      	adds	r3, #8
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f000 f920 	bl	800b8ee <USBD_CtlSendData>
        break;
 800b6ae:	e00c      	b.n	800b6ca <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	3304      	adds	r3, #4
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f000 f918 	bl	800b8ee <USBD_CtlSendData>
        break;
 800b6be:	e004      	b.n	800b6ca <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b6c0:	6839      	ldr	r1, [r7, #0]
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f000 f8a9 	bl	800b81a <USBD_CtlError>
        break;
 800b6c8:	bf00      	nop
}
 800b6ca:	bf00      	nop
 800b6cc:	3708      	adds	r7, #8
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}

0800b6d2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6d2:	b580      	push	{r7, lr}
 800b6d4:	b082      	sub	sp, #8
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
 800b6da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6e2:	3b01      	subs	r3, #1
 800b6e4:	2b02      	cmp	r3, #2
 800b6e6:	d81e      	bhi.n	800b726 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	88db      	ldrh	r3, [r3, #6]
 800b6ec:	2b02      	cmp	r3, #2
 800b6ee:	d004      	beq.n	800b6fa <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b6f0:	6839      	ldr	r1, [r7, #0]
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f000 f891 	bl	800b81a <USBD_CtlError>
        break;
 800b6f8:	e01a      	b.n	800b730 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b706:	2b00      	cmp	r3, #0
 800b708:	d005      	beq.n	800b716 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	68db      	ldr	r3, [r3, #12]
 800b70e:	f043 0202 	orr.w	r2, r3, #2
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	330c      	adds	r3, #12
 800b71a:	2202      	movs	r2, #2
 800b71c:	4619      	mov	r1, r3
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f000 f8e5 	bl	800b8ee <USBD_CtlSendData>
      break;
 800b724:	e004      	b.n	800b730 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b726:	6839      	ldr	r1, [r7, #0]
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 f876 	bl	800b81a <USBD_CtlError>
      break;
 800b72e:	bf00      	nop
  }
}
 800b730:	bf00      	nop
 800b732:	3708      	adds	r7, #8
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b082      	sub	sp, #8
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	885b      	ldrh	r3, [r3, #2]
 800b746:	2b01      	cmp	r3, #1
 800b748:	d106      	bne.n	800b758 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2201      	movs	r2, #1
 800b74e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f000 f929 	bl	800b9aa <USBD_CtlSendStatus>
  }
}
 800b758:	bf00      	nop
 800b75a:	3708      	adds	r7, #8
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b082      	sub	sp, #8
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b770:	3b01      	subs	r3, #1
 800b772:	2b02      	cmp	r3, #2
 800b774:	d80b      	bhi.n	800b78e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	885b      	ldrh	r3, [r3, #2]
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	d10c      	bne.n	800b798 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2200      	movs	r2, #0
 800b782:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f000 f90f 	bl	800b9aa <USBD_CtlSendStatus>
      }
      break;
 800b78c:	e004      	b.n	800b798 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b78e:	6839      	ldr	r1, [r7, #0]
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f000 f842 	bl	800b81a <USBD_CtlError>
      break;
 800b796:	e000      	b.n	800b79a <USBD_ClrFeature+0x3a>
      break;
 800b798:	bf00      	nop
  }
}
 800b79a:	bf00      	nop
 800b79c:	3708      	adds	r7, #8
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}

0800b7a2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b7a2:	b480      	push	{r7}
 800b7a4:	b083      	sub	sp, #12
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
 800b7aa:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	781a      	ldrb	r2, [r3, #0]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	785a      	ldrb	r2, [r3, #1]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	3302      	adds	r3, #2
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	b29a      	uxth	r2, r3
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	3303      	adds	r3, #3
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	021b      	lsls	r3, r3, #8
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	4413      	add	r3, r2
 800b7d2:	b29a      	uxth	r2, r3
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	3304      	adds	r3, #4
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	b29a      	uxth	r2, r3
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	3305      	adds	r3, #5
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	b29b      	uxth	r3, r3
 800b7e8:	021b      	lsls	r3, r3, #8
 800b7ea:	b29b      	uxth	r3, r3
 800b7ec:	4413      	add	r3, r2
 800b7ee:	b29a      	uxth	r2, r3
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	3306      	adds	r3, #6
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	b29a      	uxth	r2, r3
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	3307      	adds	r3, #7
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	b29b      	uxth	r3, r3
 800b804:	021b      	lsls	r3, r3, #8
 800b806:	b29b      	uxth	r3, r3
 800b808:	4413      	add	r3, r2
 800b80a:	b29a      	uxth	r2, r3
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	80da      	strh	r2, [r3, #6]

}
 800b810:	bf00      	nop
 800b812:	370c      	adds	r7, #12
 800b814:	46bd      	mov	sp, r7
 800b816:	bc80      	pop	{r7}
 800b818:	4770      	bx	lr

0800b81a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b81a:	b580      	push	{r7, lr}
 800b81c:	b082      	sub	sp, #8
 800b81e:	af00      	add	r7, sp, #0
 800b820:	6078      	str	r0, [r7, #4]
 800b822:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b824:	2180      	movs	r1, #128	; 0x80
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 fc2e 	bl	800c088 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b82c:	2100      	movs	r1, #0
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 fc2a 	bl	800c088 <USBD_LL_StallEP>
}
 800b834:	bf00      	nop
 800b836:	3708      	adds	r7, #8
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b086      	sub	sp, #24
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	60b9      	str	r1, [r7, #8]
 800b846:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b848:	2300      	movs	r3, #0
 800b84a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d032      	beq.n	800b8b8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b852:	68f8      	ldr	r0, [r7, #12]
 800b854:	f000 f834 	bl	800b8c0 <USBD_GetLen>
 800b858:	4603      	mov	r3, r0
 800b85a:	3301      	adds	r3, #1
 800b85c:	b29b      	uxth	r3, r3
 800b85e:	005b      	lsls	r3, r3, #1
 800b860:	b29a      	uxth	r2, r3
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b866:	7dfb      	ldrb	r3, [r7, #23]
 800b868:	1c5a      	adds	r2, r3, #1
 800b86a:	75fa      	strb	r2, [r7, #23]
 800b86c:	461a      	mov	r2, r3
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	4413      	add	r3, r2
 800b872:	687a      	ldr	r2, [r7, #4]
 800b874:	7812      	ldrb	r2, [r2, #0]
 800b876:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b878:	7dfb      	ldrb	r3, [r7, #23]
 800b87a:	1c5a      	adds	r2, r3, #1
 800b87c:	75fa      	strb	r2, [r7, #23]
 800b87e:	461a      	mov	r2, r3
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	4413      	add	r3, r2
 800b884:	2203      	movs	r2, #3
 800b886:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b888:	e012      	b.n	800b8b0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	1c5a      	adds	r2, r3, #1
 800b88e:	60fa      	str	r2, [r7, #12]
 800b890:	7dfa      	ldrb	r2, [r7, #23]
 800b892:	1c51      	adds	r1, r2, #1
 800b894:	75f9      	strb	r1, [r7, #23]
 800b896:	4611      	mov	r1, r2
 800b898:	68ba      	ldr	r2, [r7, #8]
 800b89a:	440a      	add	r2, r1
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b8a0:	7dfb      	ldrb	r3, [r7, #23]
 800b8a2:	1c5a      	adds	r2, r3, #1
 800b8a4:	75fa      	strb	r2, [r7, #23]
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	4413      	add	r3, r2
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d1e8      	bne.n	800b88a <USBD_GetString+0x4e>
    }
  }
}
 800b8b8:	bf00      	nop
 800b8ba:	3718      	adds	r7, #24
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b085      	sub	sp, #20
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b8cc:	e005      	b.n	800b8da <USBD_GetLen+0x1a>
  {
    len++;
 800b8ce:	7bfb      	ldrb	r3, [r7, #15]
 800b8d0:	3301      	adds	r3, #1
 800b8d2:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	781b      	ldrb	r3, [r3, #0]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d1f5      	bne.n	800b8ce <USBD_GetLen+0xe>
  }

  return len;
 800b8e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3714      	adds	r7, #20
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bc80      	pop	{r7}
 800b8ec:	4770      	bx	lr

0800b8ee <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b8ee:	b580      	push	{r7, lr}
 800b8f0:	b084      	sub	sp, #16
 800b8f2:	af00      	add	r7, sp, #0
 800b8f4:	60f8      	str	r0, [r7, #12]
 800b8f6:	60b9      	str	r1, [r7, #8]
 800b8f8:	4613      	mov	r3, r2
 800b8fa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	2202      	movs	r2, #2
 800b900:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b904:	88fa      	ldrh	r2, [r7, #6]
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b90a:	88fa      	ldrh	r2, [r7, #6]
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b910:	88fb      	ldrh	r3, [r7, #6]
 800b912:	68ba      	ldr	r2, [r7, #8]
 800b914:	2100      	movs	r1, #0
 800b916:	68f8      	ldr	r0, [r7, #12]
 800b918:	f000 fc3e 	bl	800c198 <USBD_LL_Transmit>

  return USBD_OK;
 800b91c:	2300      	movs	r3, #0
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3710      	adds	r7, #16
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}

0800b926 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b926:	b580      	push	{r7, lr}
 800b928:	b084      	sub	sp, #16
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	60f8      	str	r0, [r7, #12]
 800b92e:	60b9      	str	r1, [r7, #8]
 800b930:	4613      	mov	r3, r2
 800b932:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b934:	88fb      	ldrh	r3, [r7, #6]
 800b936:	68ba      	ldr	r2, [r7, #8]
 800b938:	2100      	movs	r1, #0
 800b93a:	68f8      	ldr	r0, [r7, #12]
 800b93c:	f000 fc2c 	bl	800c198 <USBD_LL_Transmit>

  return USBD_OK;
 800b940:	2300      	movs	r3, #0
}
 800b942:	4618      	mov	r0, r3
 800b944:	3710      	adds	r7, #16
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}

0800b94a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b94a:	b580      	push	{r7, lr}
 800b94c:	b084      	sub	sp, #16
 800b94e:	af00      	add	r7, sp, #0
 800b950:	60f8      	str	r0, [r7, #12]
 800b952:	60b9      	str	r1, [r7, #8]
 800b954:	4613      	mov	r3, r2
 800b956:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2203      	movs	r2, #3
 800b95c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b960:	88fa      	ldrh	r2, [r7, #6]
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b968:	88fa      	ldrh	r2, [r7, #6]
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b970:	88fb      	ldrh	r3, [r7, #6]
 800b972:	68ba      	ldr	r2, [r7, #8]
 800b974:	2100      	movs	r1, #0
 800b976:	68f8      	ldr	r0, [r7, #12]
 800b978:	f000 fc31 	bl	800c1de <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b97c:	2300      	movs	r3, #0
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3710      	adds	r7, #16
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}

0800b986 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b986:	b580      	push	{r7, lr}
 800b988:	b084      	sub	sp, #16
 800b98a:	af00      	add	r7, sp, #0
 800b98c:	60f8      	str	r0, [r7, #12]
 800b98e:	60b9      	str	r1, [r7, #8]
 800b990:	4613      	mov	r3, r2
 800b992:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b994:	88fb      	ldrh	r3, [r7, #6]
 800b996:	68ba      	ldr	r2, [r7, #8]
 800b998:	2100      	movs	r1, #0
 800b99a:	68f8      	ldr	r0, [r7, #12]
 800b99c:	f000 fc1f 	bl	800c1de <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9a0:	2300      	movs	r3, #0
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3710      	adds	r7, #16
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}

0800b9aa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b9aa:	b580      	push	{r7, lr}
 800b9ac:	b082      	sub	sp, #8
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2204      	movs	r2, #4
 800b9b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	2200      	movs	r2, #0
 800b9be:	2100      	movs	r1, #0
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f000 fbe9 	bl	800c198 <USBD_LL_Transmit>

  return USBD_OK;
 800b9c6:	2300      	movs	r3, #0
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3708      	adds	r7, #8
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b082      	sub	sp, #8
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2205      	movs	r2, #5
 800b9dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	2100      	movs	r1, #0
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 fbf9 	bl	800c1de <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9ec:	2300      	movs	r3, #0
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3708      	adds	r7, #8
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
	...

0800b9f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	4912      	ldr	r1, [pc, #72]	; (800ba48 <MX_USB_DEVICE_Init+0x50>)
 800ba00:	4812      	ldr	r0, [pc, #72]	; (800ba4c <MX_USB_DEVICE_Init+0x54>)
 800ba02:	f7fe ff5f 	bl	800a8c4 <USBD_Init>
 800ba06:	4603      	mov	r3, r0
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d001      	beq.n	800ba10 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ba0c:	f7f7 fa90 	bl	8002f30 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ba10:	490f      	ldr	r1, [pc, #60]	; (800ba50 <MX_USB_DEVICE_Init+0x58>)
 800ba12:	480e      	ldr	r0, [pc, #56]	; (800ba4c <MX_USB_DEVICE_Init+0x54>)
 800ba14:	f7fe ff81 	bl	800a91a <USBD_RegisterClass>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d001      	beq.n	800ba22 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ba1e:	f7f7 fa87 	bl	8002f30 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ba22:	490c      	ldr	r1, [pc, #48]	; (800ba54 <MX_USB_DEVICE_Init+0x5c>)
 800ba24:	4809      	ldr	r0, [pc, #36]	; (800ba4c <MX_USB_DEVICE_Init+0x54>)
 800ba26:	f7fe fee1 	bl	800a7ec <USBD_CDC_RegisterInterface>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d001      	beq.n	800ba34 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ba30:	f7f7 fa7e 	bl	8002f30 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ba34:	4805      	ldr	r0, [pc, #20]	; (800ba4c <MX_USB_DEVICE_Init+0x54>)
 800ba36:	f7fe ff89 	bl	800a94c <USBD_Start>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d001      	beq.n	800ba44 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ba40:	f7f7 fa76 	bl	8002f30 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ba44:	bf00      	nop
 800ba46:	bd80      	pop	{r7, pc}
 800ba48:	20000130 	.word	0x20000130
 800ba4c:	200007b8 	.word	0x200007b8
 800ba50:	2000001c 	.word	0x2000001c
 800ba54:	20000120 	.word	0x20000120

0800ba58 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	4905      	ldr	r1, [pc, #20]	; (800ba74 <CDC_Init_FS+0x1c>)
 800ba60:	4805      	ldr	r0, [pc, #20]	; (800ba78 <CDC_Init_FS+0x20>)
 800ba62:	f7fe fed9 	bl	800a818 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ba66:	4905      	ldr	r1, [pc, #20]	; (800ba7c <CDC_Init_FS+0x24>)
 800ba68:	4803      	ldr	r0, [pc, #12]	; (800ba78 <CDC_Init_FS+0x20>)
 800ba6a:	f7fe feee 	bl	800a84a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ba6e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	bd80      	pop	{r7, pc}
 800ba74:	20000e64 	.word	0x20000e64
 800ba78:	200007b8 	.word	0x200007b8
 800ba7c:	20000a7c 	.word	0x20000a7c

0800ba80 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ba80:	b480      	push	{r7}
 800ba82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ba84:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bc80      	pop	{r7}
 800ba8c:	4770      	bx	lr
	...

0800ba90 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ba90:	b480      	push	{r7}
 800ba92:	b083      	sub	sp, #12
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	4603      	mov	r3, r0
 800ba98:	6039      	str	r1, [r7, #0]
 800ba9a:	71fb      	strb	r3, [r7, #7]
 800ba9c:	4613      	mov	r3, r2
 800ba9e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800baa0:	79fb      	ldrb	r3, [r7, #7]
 800baa2:	2b23      	cmp	r3, #35	; 0x23
 800baa4:	d84a      	bhi.n	800bb3c <CDC_Control_FS+0xac>
 800baa6:	a201      	add	r2, pc, #4	; (adr r2, 800baac <CDC_Control_FS+0x1c>)
 800baa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baac:	0800bb3d 	.word	0x0800bb3d
 800bab0:	0800bb3d 	.word	0x0800bb3d
 800bab4:	0800bb3d 	.word	0x0800bb3d
 800bab8:	0800bb3d 	.word	0x0800bb3d
 800babc:	0800bb3d 	.word	0x0800bb3d
 800bac0:	0800bb3d 	.word	0x0800bb3d
 800bac4:	0800bb3d 	.word	0x0800bb3d
 800bac8:	0800bb3d 	.word	0x0800bb3d
 800bacc:	0800bb3d 	.word	0x0800bb3d
 800bad0:	0800bb3d 	.word	0x0800bb3d
 800bad4:	0800bb3d 	.word	0x0800bb3d
 800bad8:	0800bb3d 	.word	0x0800bb3d
 800badc:	0800bb3d 	.word	0x0800bb3d
 800bae0:	0800bb3d 	.word	0x0800bb3d
 800bae4:	0800bb3d 	.word	0x0800bb3d
 800bae8:	0800bb3d 	.word	0x0800bb3d
 800baec:	0800bb3d 	.word	0x0800bb3d
 800baf0:	0800bb3d 	.word	0x0800bb3d
 800baf4:	0800bb3d 	.word	0x0800bb3d
 800baf8:	0800bb3d 	.word	0x0800bb3d
 800bafc:	0800bb3d 	.word	0x0800bb3d
 800bb00:	0800bb3d 	.word	0x0800bb3d
 800bb04:	0800bb3d 	.word	0x0800bb3d
 800bb08:	0800bb3d 	.word	0x0800bb3d
 800bb0c:	0800bb3d 	.word	0x0800bb3d
 800bb10:	0800bb3d 	.word	0x0800bb3d
 800bb14:	0800bb3d 	.word	0x0800bb3d
 800bb18:	0800bb3d 	.word	0x0800bb3d
 800bb1c:	0800bb3d 	.word	0x0800bb3d
 800bb20:	0800bb3d 	.word	0x0800bb3d
 800bb24:	0800bb3d 	.word	0x0800bb3d
 800bb28:	0800bb3d 	.word	0x0800bb3d
 800bb2c:	0800bb3d 	.word	0x0800bb3d
 800bb30:	0800bb3d 	.word	0x0800bb3d
 800bb34:	0800bb3d 	.word	0x0800bb3d
 800bb38:	0800bb3d 	.word	0x0800bb3d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bb3c:	bf00      	nop
  }

  return (USBD_OK);
 800bb3e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	370c      	adds	r7, #12
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bc80      	pop	{r7}
 800bb48:	4770      	bx	lr
 800bb4a:	bf00      	nop

0800bb4c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bb56:	6879      	ldr	r1, [r7, #4]
 800bb58:	4805      	ldr	r0, [pc, #20]	; (800bb70 <CDC_Receive_FS+0x24>)
 800bb5a:	f7fe fe76 	bl	800a84a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bb5e:	4804      	ldr	r0, [pc, #16]	; (800bb70 <CDC_Receive_FS+0x24>)
 800bb60:	f7fe fe86 	bl	800a870 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bb64:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3708      	adds	r7, #8
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	200007b8 	.word	0x200007b8

0800bb74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb74:	b480      	push	{r7}
 800bb76:	b083      	sub	sp, #12
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	6039      	str	r1, [r7, #0]
 800bb7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	2212      	movs	r2, #18
 800bb84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bb86:	4b03      	ldr	r3, [pc, #12]	; (800bb94 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	370c      	adds	r7, #12
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bc80      	pop	{r7}
 800bb90:	4770      	bx	lr
 800bb92:	bf00      	nop
 800bb94:	2000014c 	.word	0x2000014c

0800bb98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b083      	sub	sp, #12
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	4603      	mov	r3, r0
 800bba0:	6039      	str	r1, [r7, #0]
 800bba2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	2204      	movs	r2, #4
 800bba8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bbaa:	4b03      	ldr	r3, [pc, #12]	; (800bbb8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	370c      	adds	r7, #12
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bc80      	pop	{r7}
 800bbb4:	4770      	bx	lr
 800bbb6:	bf00      	nop
 800bbb8:	20000160 	.word	0x20000160

0800bbbc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b082      	sub	sp, #8
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	6039      	str	r1, [r7, #0]
 800bbc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bbc8:	79fb      	ldrb	r3, [r7, #7]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d105      	bne.n	800bbda <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bbce:	683a      	ldr	r2, [r7, #0]
 800bbd0:	4907      	ldr	r1, [pc, #28]	; (800bbf0 <USBD_FS_ProductStrDescriptor+0x34>)
 800bbd2:	4808      	ldr	r0, [pc, #32]	; (800bbf4 <USBD_FS_ProductStrDescriptor+0x38>)
 800bbd4:	f7ff fe32 	bl	800b83c <USBD_GetString>
 800bbd8:	e004      	b.n	800bbe4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bbda:	683a      	ldr	r2, [r7, #0]
 800bbdc:	4904      	ldr	r1, [pc, #16]	; (800bbf0 <USBD_FS_ProductStrDescriptor+0x34>)
 800bbde:	4805      	ldr	r0, [pc, #20]	; (800bbf4 <USBD_FS_ProductStrDescriptor+0x38>)
 800bbe0:	f7ff fe2c 	bl	800b83c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bbe4:	4b02      	ldr	r3, [pc, #8]	; (800bbf0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3708      	adds	r7, #8
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	2000124c 	.word	0x2000124c
 800bbf4:	0800d8a8 	.word	0x0800d8a8

0800bbf8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b082      	sub	sp, #8
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	4603      	mov	r3, r0
 800bc00:	6039      	str	r1, [r7, #0]
 800bc02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bc04:	683a      	ldr	r2, [r7, #0]
 800bc06:	4904      	ldr	r1, [pc, #16]	; (800bc18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bc08:	4804      	ldr	r0, [pc, #16]	; (800bc1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bc0a:	f7ff fe17 	bl	800b83c <USBD_GetString>
  return USBD_StrDesc;
 800bc0e:	4b02      	ldr	r3, [pc, #8]	; (800bc18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3708      	adds	r7, #8
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}
 800bc18:	2000124c 	.word	0x2000124c
 800bc1c:	0800d8c0 	.word	0x0800d8c0

0800bc20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b082      	sub	sp, #8
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	4603      	mov	r3, r0
 800bc28:	6039      	str	r1, [r7, #0]
 800bc2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	221a      	movs	r2, #26
 800bc30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bc32:	f000 f843 	bl	800bcbc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bc36:	4b02      	ldr	r3, [pc, #8]	; (800bc40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3708      	adds	r7, #8
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}
 800bc40:	20000164 	.word	0x20000164

0800bc44 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	6039      	str	r1, [r7, #0]
 800bc4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bc50:	79fb      	ldrb	r3, [r7, #7]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d105      	bne.n	800bc62 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bc56:	683a      	ldr	r2, [r7, #0]
 800bc58:	4907      	ldr	r1, [pc, #28]	; (800bc78 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bc5a:	4808      	ldr	r0, [pc, #32]	; (800bc7c <USBD_FS_ConfigStrDescriptor+0x38>)
 800bc5c:	f7ff fdee 	bl	800b83c <USBD_GetString>
 800bc60:	e004      	b.n	800bc6c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bc62:	683a      	ldr	r2, [r7, #0]
 800bc64:	4904      	ldr	r1, [pc, #16]	; (800bc78 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bc66:	4805      	ldr	r0, [pc, #20]	; (800bc7c <USBD_FS_ConfigStrDescriptor+0x38>)
 800bc68:	f7ff fde8 	bl	800b83c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc6c:	4b02      	ldr	r3, [pc, #8]	; (800bc78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3708      	adds	r7, #8
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	2000124c 	.word	0x2000124c
 800bc7c:	0800d8d4 	.word	0x0800d8d4

0800bc80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b082      	sub	sp, #8
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	4603      	mov	r3, r0
 800bc88:	6039      	str	r1, [r7, #0]
 800bc8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bc8c:	79fb      	ldrb	r3, [r7, #7]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d105      	bne.n	800bc9e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bc92:	683a      	ldr	r2, [r7, #0]
 800bc94:	4907      	ldr	r1, [pc, #28]	; (800bcb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bc96:	4808      	ldr	r0, [pc, #32]	; (800bcb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bc98:	f7ff fdd0 	bl	800b83c <USBD_GetString>
 800bc9c:	e004      	b.n	800bca8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bc9e:	683a      	ldr	r2, [r7, #0]
 800bca0:	4904      	ldr	r1, [pc, #16]	; (800bcb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bca2:	4805      	ldr	r0, [pc, #20]	; (800bcb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bca4:	f7ff fdca 	bl	800b83c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bca8:	4b02      	ldr	r3, [pc, #8]	; (800bcb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3708      	adds	r7, #8
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}
 800bcb2:	bf00      	nop
 800bcb4:	2000124c 	.word	0x2000124c
 800bcb8:	0800d8e0 	.word	0x0800d8e0

0800bcbc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b084      	sub	sp, #16
 800bcc0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bcc2:	4b0f      	ldr	r3, [pc, #60]	; (800bd00 <Get_SerialNum+0x44>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bcc8:	4b0e      	ldr	r3, [pc, #56]	; (800bd04 <Get_SerialNum+0x48>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bcce:	4b0e      	ldr	r3, [pc, #56]	; (800bd08 <Get_SerialNum+0x4c>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bcd4:	68fa      	ldr	r2, [r7, #12]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	4413      	add	r3, r2
 800bcda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d009      	beq.n	800bcf6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bce2:	2208      	movs	r2, #8
 800bce4:	4909      	ldr	r1, [pc, #36]	; (800bd0c <Get_SerialNum+0x50>)
 800bce6:	68f8      	ldr	r0, [r7, #12]
 800bce8:	f000 f814 	bl	800bd14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bcec:	2204      	movs	r2, #4
 800bcee:	4908      	ldr	r1, [pc, #32]	; (800bd10 <Get_SerialNum+0x54>)
 800bcf0:	68b8      	ldr	r0, [r7, #8]
 800bcf2:	f000 f80f 	bl	800bd14 <IntToUnicode>
  }
}
 800bcf6:	bf00      	nop
 800bcf8:	3710      	adds	r7, #16
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	1ffff7e8 	.word	0x1ffff7e8
 800bd04:	1ffff7ec 	.word	0x1ffff7ec
 800bd08:	1ffff7f0 	.word	0x1ffff7f0
 800bd0c:	20000166 	.word	0x20000166
 800bd10:	20000176 	.word	0x20000176

0800bd14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b087      	sub	sp, #28
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	60b9      	str	r1, [r7, #8]
 800bd1e:	4613      	mov	r3, r2
 800bd20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bd22:	2300      	movs	r3, #0
 800bd24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bd26:	2300      	movs	r3, #0
 800bd28:	75fb      	strb	r3, [r7, #23]
 800bd2a:	e027      	b.n	800bd7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	0f1b      	lsrs	r3, r3, #28
 800bd30:	2b09      	cmp	r3, #9
 800bd32:	d80b      	bhi.n	800bd4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	0f1b      	lsrs	r3, r3, #28
 800bd38:	b2da      	uxtb	r2, r3
 800bd3a:	7dfb      	ldrb	r3, [r7, #23]
 800bd3c:	005b      	lsls	r3, r3, #1
 800bd3e:	4619      	mov	r1, r3
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	440b      	add	r3, r1
 800bd44:	3230      	adds	r2, #48	; 0x30
 800bd46:	b2d2      	uxtb	r2, r2
 800bd48:	701a      	strb	r2, [r3, #0]
 800bd4a:	e00a      	b.n	800bd62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	0f1b      	lsrs	r3, r3, #28
 800bd50:	b2da      	uxtb	r2, r3
 800bd52:	7dfb      	ldrb	r3, [r7, #23]
 800bd54:	005b      	lsls	r3, r3, #1
 800bd56:	4619      	mov	r1, r3
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	440b      	add	r3, r1
 800bd5c:	3237      	adds	r2, #55	; 0x37
 800bd5e:	b2d2      	uxtb	r2, r2
 800bd60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	011b      	lsls	r3, r3, #4
 800bd66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bd68:	7dfb      	ldrb	r3, [r7, #23]
 800bd6a:	005b      	lsls	r3, r3, #1
 800bd6c:	3301      	adds	r3, #1
 800bd6e:	68ba      	ldr	r2, [r7, #8]
 800bd70:	4413      	add	r3, r2
 800bd72:	2200      	movs	r2, #0
 800bd74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bd76:	7dfb      	ldrb	r3, [r7, #23]
 800bd78:	3301      	adds	r3, #1
 800bd7a:	75fb      	strb	r3, [r7, #23]
 800bd7c:	7dfa      	ldrb	r2, [r7, #23]
 800bd7e:	79fb      	ldrb	r3, [r7, #7]
 800bd80:	429a      	cmp	r2, r3
 800bd82:	d3d3      	bcc.n	800bd2c <IntToUnicode+0x18>
  }
}
 800bd84:	bf00      	nop
 800bd86:	bf00      	nop
 800bd88:	371c      	adds	r7, #28
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bc80      	pop	{r7}
 800bd8e:	4770      	bx	lr

0800bd90 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b084      	sub	sp, #16
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	4a0d      	ldr	r2, [pc, #52]	; (800bdd4 <HAL_PCD_MspInit+0x44>)
 800bd9e:	4293      	cmp	r3, r2
 800bda0:	d113      	bne.n	800bdca <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bda2:	4b0d      	ldr	r3, [pc, #52]	; (800bdd8 <HAL_PCD_MspInit+0x48>)
 800bda4:	69db      	ldr	r3, [r3, #28]
 800bda6:	4a0c      	ldr	r2, [pc, #48]	; (800bdd8 <HAL_PCD_MspInit+0x48>)
 800bda8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bdac:	61d3      	str	r3, [r2, #28]
 800bdae:	4b0a      	ldr	r3, [pc, #40]	; (800bdd8 <HAL_PCD_MspInit+0x48>)
 800bdb0:	69db      	ldr	r3, [r3, #28]
 800bdb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bdb6:	60fb      	str	r3, [r7, #12]
 800bdb8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800bdba:	2200      	movs	r2, #0
 800bdbc:	2100      	movs	r1, #0
 800bdbe:	2014      	movs	r0, #20
 800bdc0:	f7f7 fd11 	bl	80037e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800bdc4:	2014      	movs	r0, #20
 800bdc6:	f7f7 fd2a 	bl	800381e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bdca:	bf00      	nop
 800bdcc:	3710      	adds	r7, #16
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop
 800bdd4:	40005c00 	.word	0x40005c00
 800bdd8:	40021000 	.word	0x40021000

0800bddc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	4610      	mov	r0, r2
 800bdf4:	f7fe fdf2 	bl	800a9dc <USBD_LL_SetupStage>
}
 800bdf8:	bf00      	nop
 800bdfa:	3708      	adds	r7, #8
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	460b      	mov	r3, r1
 800be0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 800be12:	78fa      	ldrb	r2, [r7, #3]
 800be14:	6879      	ldr	r1, [r7, #4]
 800be16:	4613      	mov	r3, r2
 800be18:	009b      	lsls	r3, r3, #2
 800be1a:	4413      	add	r3, r2
 800be1c:	00db      	lsls	r3, r3, #3
 800be1e:	440b      	add	r3, r1
 800be20:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800be24:	681a      	ldr	r2, [r3, #0]
 800be26:	78fb      	ldrb	r3, [r7, #3]
 800be28:	4619      	mov	r1, r3
 800be2a:	f7fe fe24 	bl	800aa76 <USBD_LL_DataOutStage>
}
 800be2e:	bf00      	nop
 800be30:	3708      	adds	r7, #8
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}

0800be36 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be36:	b580      	push	{r7, lr}
 800be38:	b082      	sub	sp, #8
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
 800be3e:	460b      	mov	r3, r1
 800be40:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 800be48:	78fa      	ldrb	r2, [r7, #3]
 800be4a:	6879      	ldr	r1, [r7, #4]
 800be4c:	4613      	mov	r3, r2
 800be4e:	009b      	lsls	r3, r3, #2
 800be50:	4413      	add	r3, r2
 800be52:	00db      	lsls	r3, r3, #3
 800be54:	440b      	add	r3, r1
 800be56:	3324      	adds	r3, #36	; 0x24
 800be58:	681a      	ldr	r2, [r3, #0]
 800be5a:	78fb      	ldrb	r3, [r7, #3]
 800be5c:	4619      	mov	r1, r3
 800be5e:	f7fe fe7b 	bl	800ab58 <USBD_LL_DataInStage>
}
 800be62:	bf00      	nop
 800be64:	3708      	adds	r7, #8
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}

0800be6a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be6a:	b580      	push	{r7, lr}
 800be6c:	b082      	sub	sp, #8
 800be6e:	af00      	add	r7, sp, #0
 800be70:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800be78:	4618      	mov	r0, r3
 800be7a:	f7fe ff8b 	bl	800ad94 <USBD_LL_SOF>
}
 800be7e:	bf00      	nop
 800be80:	3708      	adds	r7, #8
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}

0800be86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be86:	b580      	push	{r7, lr}
 800be88:	b084      	sub	sp, #16
 800be8a:	af00      	add	r7, sp, #0
 800be8c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800be8e:	2301      	movs	r3, #1
 800be90:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	799b      	ldrb	r3, [r3, #6]
 800be96:	2b02      	cmp	r3, #2
 800be98:	d001      	beq.n	800be9e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800be9a:	f7f7 f849 	bl	8002f30 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bea4:	7bfa      	ldrb	r2, [r7, #15]
 800bea6:	4611      	mov	r1, r2
 800bea8:	4618      	mov	r0, r3
 800beaa:	f7fe ff3b 	bl	800ad24 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800beb4:	4618      	mov	r0, r3
 800beb6:	f7fe fef4 	bl	800aca2 <USBD_LL_Reset>
}
 800beba:	bf00      	nop
 800bebc:	3710      	adds	r7, #16
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
	...

0800bec4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b082      	sub	sp, #8
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bed2:	4618      	mov	r0, r3
 800bed4:	f7fe ff35 	bl	800ad42 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	7a9b      	ldrb	r3, [r3, #10]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d005      	beq.n	800beec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bee0:	4b04      	ldr	r3, [pc, #16]	; (800bef4 <HAL_PCD_SuspendCallback+0x30>)
 800bee2:	691b      	ldr	r3, [r3, #16]
 800bee4:	4a03      	ldr	r2, [pc, #12]	; (800bef4 <HAL_PCD_SuspendCallback+0x30>)
 800bee6:	f043 0306 	orr.w	r3, r3, #6
 800beea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800beec:	bf00      	nop
 800beee:	3708      	adds	r7, #8
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	e000ed00 	.word	0xe000ed00

0800bef8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bf06:	4618      	mov	r0, r3
 800bf08:	f7fe ff2f 	bl	800ad6a <USBD_LL_Resume>
}
 800bf0c:	bf00      	nop
 800bf0e:	3708      	adds	r7, #8
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800bf1c:	4a28      	ldr	r2, [pc, #160]	; (800bfc0 <USBD_LL_Init+0xac>)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8c2 32d4 	str.w	r3, [r2, #724]	; 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	4a26      	ldr	r2, [pc, #152]	; (800bfc0 <USBD_LL_Init+0xac>)
 800bf28:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800bf2c:	4b24      	ldr	r3, [pc, #144]	; (800bfc0 <USBD_LL_Init+0xac>)
 800bf2e:	4a25      	ldr	r2, [pc, #148]	; (800bfc4 <USBD_LL_Init+0xb0>)
 800bf30:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bf32:	4b23      	ldr	r3, [pc, #140]	; (800bfc0 <USBD_LL_Init+0xac>)
 800bf34:	2208      	movs	r2, #8
 800bf36:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bf38:	4b21      	ldr	r3, [pc, #132]	; (800bfc0 <USBD_LL_Init+0xac>)
 800bf3a:	2202      	movs	r2, #2
 800bf3c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bf3e:	4b20      	ldr	r3, [pc, #128]	; (800bfc0 <USBD_LL_Init+0xac>)
 800bf40:	2200      	movs	r2, #0
 800bf42:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bf44:	4b1e      	ldr	r3, [pc, #120]	; (800bfc0 <USBD_LL_Init+0xac>)
 800bf46:	2200      	movs	r2, #0
 800bf48:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bf4a:	4b1d      	ldr	r3, [pc, #116]	; (800bfc0 <USBD_LL_Init+0xac>)
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bf50:	481b      	ldr	r0, [pc, #108]	; (800bfc0 <USBD_LL_Init+0xac>)
 800bf52:	f7f9 f818 	bl	8004f86 <HAL_PCD_Init>
 800bf56:	4603      	mov	r3, r0
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d001      	beq.n	800bf60 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800bf5c:	f7f6 ffe8 	bl	8002f30 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bf66:	2318      	movs	r3, #24
 800bf68:	2200      	movs	r2, #0
 800bf6a:	2100      	movs	r1, #0
 800bf6c:	f7fa fd2c 	bl	80069c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bf76:	2358      	movs	r3, #88	; 0x58
 800bf78:	2200      	movs	r2, #0
 800bf7a:	2180      	movs	r1, #128	; 0x80
 800bf7c:	f7fa fd24 	bl	80069c8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bf86:	23c0      	movs	r3, #192	; 0xc0
 800bf88:	2200      	movs	r2, #0
 800bf8a:	2181      	movs	r1, #129	; 0x81
 800bf8c:	f7fa fd1c 	bl	80069c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bf96:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	2101      	movs	r1, #1
 800bf9e:	f7fa fd13 	bl	80069c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bfa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bfac:	2200      	movs	r2, #0
 800bfae:	2182      	movs	r1, #130	; 0x82
 800bfb0:	f7fa fd0a 	bl	80069c8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bfb4:	2300      	movs	r3, #0
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3708      	adds	r7, #8
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}
 800bfbe:	bf00      	nop
 800bfc0:	2000144c 	.word	0x2000144c
 800bfc4:	40005c00 	.word	0x40005c00

0800bfc8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b084      	sub	sp, #16
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7f9 f8c7 	bl	8005172 <HAL_PCD_Start>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfe8:	7bfb      	ldrb	r3, [r7, #15]
 800bfea:	4618      	mov	r0, r3
 800bfec:	f000 f94e 	bl	800c28c <USBD_Get_USB_Status>
 800bff0:	4603      	mov	r3, r0
 800bff2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bff4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3710      	adds	r7, #16
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}

0800bffe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bffe:	b580      	push	{r7, lr}
 800c000:	b084      	sub	sp, #16
 800c002:	af00      	add	r7, sp, #0
 800c004:	6078      	str	r0, [r7, #4]
 800c006:	4608      	mov	r0, r1
 800c008:	4611      	mov	r1, r2
 800c00a:	461a      	mov	r2, r3
 800c00c:	4603      	mov	r3, r0
 800c00e:	70fb      	strb	r3, [r7, #3]
 800c010:	460b      	mov	r3, r1
 800c012:	70bb      	strb	r3, [r7, #2]
 800c014:	4613      	mov	r3, r2
 800c016:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c018:	2300      	movs	r3, #0
 800c01a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c01c:	2300      	movs	r3, #0
 800c01e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c026:	78bb      	ldrb	r3, [r7, #2]
 800c028:	883a      	ldrh	r2, [r7, #0]
 800c02a:	78f9      	ldrb	r1, [r7, #3]
 800c02c:	f7f9 fa1d 	bl	800546a <HAL_PCD_EP_Open>
 800c030:	4603      	mov	r3, r0
 800c032:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c034:	7bfb      	ldrb	r3, [r7, #15]
 800c036:	4618      	mov	r0, r3
 800c038:	f000 f928 	bl	800c28c <USBD_Get_USB_Status>
 800c03c:	4603      	mov	r3, r0
 800c03e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c040:	7bbb      	ldrb	r3, [r7, #14]
}
 800c042:	4618      	mov	r0, r3
 800c044:	3710      	adds	r7, #16
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}

0800c04a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c04a:	b580      	push	{r7, lr}
 800c04c:	b084      	sub	sp, #16
 800c04e:	af00      	add	r7, sp, #0
 800c050:	6078      	str	r0, [r7, #4]
 800c052:	460b      	mov	r3, r1
 800c054:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c056:	2300      	movs	r3, #0
 800c058:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c05a:	2300      	movs	r3, #0
 800c05c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c064:	78fa      	ldrb	r2, [r7, #3]
 800c066:	4611      	mov	r1, r2
 800c068:	4618      	mov	r0, r3
 800c06a:	f7f9 fa5b 	bl	8005524 <HAL_PCD_EP_Close>
 800c06e:	4603      	mov	r3, r0
 800c070:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c072:	7bfb      	ldrb	r3, [r7, #15]
 800c074:	4618      	mov	r0, r3
 800c076:	f000 f909 	bl	800c28c <USBD_Get_USB_Status>
 800c07a:	4603      	mov	r3, r0
 800c07c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c07e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c080:	4618      	mov	r0, r3
 800c082:	3710      	adds	r7, #16
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}

0800c088 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b084      	sub	sp, #16
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	460b      	mov	r3, r1
 800c092:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c094:	2300      	movs	r3, #0
 800c096:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c098:	2300      	movs	r3, #0
 800c09a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0a2:	78fa      	ldrb	r2, [r7, #3]
 800c0a4:	4611      	mov	r1, r2
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f7f9 fb03 	bl	80056b2 <HAL_PCD_EP_SetStall>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0b0:	7bfb      	ldrb	r3, [r7, #15]
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f000 f8ea 	bl	800c28c <USBD_Get_USB_Status>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3710      	adds	r7, #16
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}

0800c0c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b084      	sub	sp, #16
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	6078      	str	r0, [r7, #4]
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0e0:	78fa      	ldrb	r2, [r7, #3]
 800c0e2:	4611      	mov	r1, r2
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f7f9 fb44 	bl	8005772 <HAL_PCD_EP_ClrStall>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0ee:	7bfb      	ldrb	r3, [r7, #15]
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f000 f8cb 	bl	800c28c <USBD_Get_USB_Status>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3710      	adds	r7, #16
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}

0800c104 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c104:	b480      	push	{r7}
 800c106:	b085      	sub	sp, #20
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	460b      	mov	r3, r1
 800c10e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c116:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c118:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	da0b      	bge.n	800c138 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c120:	78fb      	ldrb	r3, [r7, #3]
 800c122:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c126:	68f9      	ldr	r1, [r7, #12]
 800c128:	4613      	mov	r3, r2
 800c12a:	009b      	lsls	r3, r3, #2
 800c12c:	4413      	add	r3, r2
 800c12e:	00db      	lsls	r3, r3, #3
 800c130:	440b      	add	r3, r1
 800c132:	3312      	adds	r3, #18
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	e00b      	b.n	800c150 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c138:	78fb      	ldrb	r3, [r7, #3]
 800c13a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c13e:	68f9      	ldr	r1, [r7, #12]
 800c140:	4613      	mov	r3, r2
 800c142:	009b      	lsls	r3, r3, #2
 800c144:	4413      	add	r3, r2
 800c146:	00db      	lsls	r3, r3, #3
 800c148:	440b      	add	r3, r1
 800c14a:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800c14e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c150:	4618      	mov	r0, r3
 800c152:	3714      	adds	r7, #20
 800c154:	46bd      	mov	sp, r7
 800c156:	bc80      	pop	{r7}
 800c158:	4770      	bx	lr

0800c15a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c15a:	b580      	push	{r7, lr}
 800c15c:	b084      	sub	sp, #16
 800c15e:	af00      	add	r7, sp, #0
 800c160:	6078      	str	r0, [r7, #4]
 800c162:	460b      	mov	r3, r1
 800c164:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c166:	2300      	movs	r3, #0
 800c168:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c16a:	2300      	movs	r3, #0
 800c16c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c174:	78fa      	ldrb	r2, [r7, #3]
 800c176:	4611      	mov	r1, r2
 800c178:	4618      	mov	r0, r3
 800c17a:	f7f9 f952 	bl	8005422 <HAL_PCD_SetAddress>
 800c17e:	4603      	mov	r3, r0
 800c180:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c182:	7bfb      	ldrb	r3, [r7, #15]
 800c184:	4618      	mov	r0, r3
 800c186:	f000 f881 	bl	800c28c <USBD_Get_USB_Status>
 800c18a:	4603      	mov	r3, r0
 800c18c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c18e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c190:	4618      	mov	r0, r3
 800c192:	3710      	adds	r7, #16
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}

0800c198 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b086      	sub	sp, #24
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	60f8      	str	r0, [r7, #12]
 800c1a0:	607a      	str	r2, [r7, #4]
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	460b      	mov	r3, r1
 800c1a6:	72fb      	strb	r3, [r7, #11]
 800c1a8:	4613      	mov	r3, r2
 800c1aa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c1ba:	893b      	ldrh	r3, [r7, #8]
 800c1bc:	7af9      	ldrb	r1, [r7, #11]
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	f7f9 fa40 	bl	8005644 <HAL_PCD_EP_Transmit>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1c8:	7dfb      	ldrb	r3, [r7, #23]
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f000 f85e 	bl	800c28c <USBD_Get_USB_Status>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c1d4:	7dbb      	ldrb	r3, [r7, #22]
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3718      	adds	r7, #24
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}

0800c1de <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c1de:	b580      	push	{r7, lr}
 800c1e0:	b086      	sub	sp, #24
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	60f8      	str	r0, [r7, #12]
 800c1e6:	607a      	str	r2, [r7, #4]
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	460b      	mov	r3, r1
 800c1ec:	72fb      	strb	r3, [r7, #11]
 800c1ee:	4613      	mov	r3, r2
 800c1f0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c200:	893b      	ldrh	r3, [r7, #8]
 800c202:	7af9      	ldrb	r1, [r7, #11]
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	f7f9 f9d5 	bl	80055b4 <HAL_PCD_EP_Receive>
 800c20a:	4603      	mov	r3, r0
 800c20c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c20e:	7dfb      	ldrb	r3, [r7, #23]
 800c210:	4618      	mov	r0, r3
 800c212:	f000 f83b 	bl	800c28c <USBD_Get_USB_Status>
 800c216:	4603      	mov	r3, r0
 800c218:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c21a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3718      	adds	r7, #24
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b082      	sub	sp, #8
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	460b      	mov	r3, r1
 800c22e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c236:	78fa      	ldrb	r2, [r7, #3]
 800c238:	4611      	mov	r1, r2
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7f9 f9eb 	bl	8005616 <HAL_PCD_EP_GetRxCount>
 800c240:	4603      	mov	r3, r0
}
 800c242:	4618      	mov	r0, r3
 800c244:	3708      	adds	r7, #8
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
	...

0800c24c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b083      	sub	sp, #12
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c254:	4b02      	ldr	r3, [pc, #8]	; (800c260 <USBD_static_malloc+0x14>)
}
 800c256:	4618      	mov	r0, r3
 800c258:	370c      	adds	r7, #12
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bc80      	pop	{r7}
 800c25e:	4770      	bx	lr
 800c260:	2000058c 	.word	0x2000058c

0800c264 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c264:	b480      	push	{r7}
 800c266:	b083      	sub	sp, #12
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]

}
 800c26c:	bf00      	nop
 800c26e:	370c      	adds	r7, #12
 800c270:	46bd      	mov	sp, r7
 800c272:	bc80      	pop	{r7}
 800c274:	4770      	bx	lr

0800c276 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c276:	b480      	push	{r7}
 800c278:	b083      	sub	sp, #12
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	6078      	str	r0, [r7, #4]
 800c27e:	460b      	mov	r3, r1
 800c280:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c282:	bf00      	nop
 800c284:	370c      	adds	r7, #12
 800c286:	46bd      	mov	sp, r7
 800c288:	bc80      	pop	{r7}
 800c28a:	4770      	bx	lr

0800c28c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b085      	sub	sp, #20
 800c290:	af00      	add	r7, sp, #0
 800c292:	4603      	mov	r3, r0
 800c294:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c296:	2300      	movs	r3, #0
 800c298:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c29a:	79fb      	ldrb	r3, [r7, #7]
 800c29c:	2b03      	cmp	r3, #3
 800c29e:	d817      	bhi.n	800c2d0 <USBD_Get_USB_Status+0x44>
 800c2a0:	a201      	add	r2, pc, #4	; (adr r2, 800c2a8 <USBD_Get_USB_Status+0x1c>)
 800c2a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2a6:	bf00      	nop
 800c2a8:	0800c2b9 	.word	0x0800c2b9
 800c2ac:	0800c2bf 	.word	0x0800c2bf
 800c2b0:	0800c2c5 	.word	0x0800c2c5
 800c2b4:	0800c2cb 	.word	0x0800c2cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	73fb      	strb	r3, [r7, #15]
    break;
 800c2bc:	e00b      	b.n	800c2d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c2be:	2302      	movs	r3, #2
 800c2c0:	73fb      	strb	r3, [r7, #15]
    break;
 800c2c2:	e008      	b.n	800c2d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	73fb      	strb	r3, [r7, #15]
    break;
 800c2c8:	e005      	b.n	800c2d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c2ca:	2302      	movs	r3, #2
 800c2cc:	73fb      	strb	r3, [r7, #15]
    break;
 800c2ce:	e002      	b.n	800c2d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c2d0:	2302      	movs	r3, #2
 800c2d2:	73fb      	strb	r3, [r7, #15]
    break;
 800c2d4:	bf00      	nop
  }
  return usb_status;
 800c2d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3714      	adds	r7, #20
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bc80      	pop	{r7}
 800c2e0:	4770      	bx	lr
 800c2e2:	bf00      	nop

0800c2e4 <__errno>:
 800c2e4:	4b01      	ldr	r3, [pc, #4]	; (800c2ec <__errno+0x8>)
 800c2e6:	6818      	ldr	r0, [r3, #0]
 800c2e8:	4770      	bx	lr
 800c2ea:	bf00      	nop
 800c2ec:	20000180 	.word	0x20000180

0800c2f0 <__libc_init_array>:
 800c2f0:	b570      	push	{r4, r5, r6, lr}
 800c2f2:	2600      	movs	r6, #0
 800c2f4:	4d0c      	ldr	r5, [pc, #48]	; (800c328 <__libc_init_array+0x38>)
 800c2f6:	4c0d      	ldr	r4, [pc, #52]	; (800c32c <__libc_init_array+0x3c>)
 800c2f8:	1b64      	subs	r4, r4, r5
 800c2fa:	10a4      	asrs	r4, r4, #2
 800c2fc:	42a6      	cmp	r6, r4
 800c2fe:	d109      	bne.n	800c314 <__libc_init_array+0x24>
 800c300:	f001 f88e 	bl	800d420 <_init>
 800c304:	2600      	movs	r6, #0
 800c306:	4d0a      	ldr	r5, [pc, #40]	; (800c330 <__libc_init_array+0x40>)
 800c308:	4c0a      	ldr	r4, [pc, #40]	; (800c334 <__libc_init_array+0x44>)
 800c30a:	1b64      	subs	r4, r4, r5
 800c30c:	10a4      	asrs	r4, r4, #2
 800c30e:	42a6      	cmp	r6, r4
 800c310:	d105      	bne.n	800c31e <__libc_init_array+0x2e>
 800c312:	bd70      	pop	{r4, r5, r6, pc}
 800c314:	f855 3b04 	ldr.w	r3, [r5], #4
 800c318:	4798      	blx	r3
 800c31a:	3601      	adds	r6, #1
 800c31c:	e7ee      	b.n	800c2fc <__libc_init_array+0xc>
 800c31e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c322:	4798      	blx	r3
 800c324:	3601      	adds	r6, #1
 800c326:	e7f2      	b.n	800c30e <__libc_init_array+0x1e>
 800c328:	0800da04 	.word	0x0800da04
 800c32c:	0800da04 	.word	0x0800da04
 800c330:	0800da04 	.word	0x0800da04
 800c334:	0800da14 	.word	0x0800da14

0800c338 <memset>:
 800c338:	4603      	mov	r3, r0
 800c33a:	4402      	add	r2, r0
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d100      	bne.n	800c342 <memset+0xa>
 800c340:	4770      	bx	lr
 800c342:	f803 1b01 	strb.w	r1, [r3], #1
 800c346:	e7f9      	b.n	800c33c <memset+0x4>

0800c348 <_puts_r>:
 800c348:	b570      	push	{r4, r5, r6, lr}
 800c34a:	460e      	mov	r6, r1
 800c34c:	4605      	mov	r5, r0
 800c34e:	b118      	cbz	r0, 800c358 <_puts_r+0x10>
 800c350:	6983      	ldr	r3, [r0, #24]
 800c352:	b90b      	cbnz	r3, 800c358 <_puts_r+0x10>
 800c354:	f000 fa9c 	bl	800c890 <__sinit>
 800c358:	69ab      	ldr	r3, [r5, #24]
 800c35a:	68ac      	ldr	r4, [r5, #8]
 800c35c:	b913      	cbnz	r3, 800c364 <_puts_r+0x1c>
 800c35e:	4628      	mov	r0, r5
 800c360:	f000 fa96 	bl	800c890 <__sinit>
 800c364:	4b2c      	ldr	r3, [pc, #176]	; (800c418 <_puts_r+0xd0>)
 800c366:	429c      	cmp	r4, r3
 800c368:	d120      	bne.n	800c3ac <_puts_r+0x64>
 800c36a:	686c      	ldr	r4, [r5, #4]
 800c36c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c36e:	07db      	lsls	r3, r3, #31
 800c370:	d405      	bmi.n	800c37e <_puts_r+0x36>
 800c372:	89a3      	ldrh	r3, [r4, #12]
 800c374:	0598      	lsls	r0, r3, #22
 800c376:	d402      	bmi.n	800c37e <_puts_r+0x36>
 800c378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c37a:	f000 fb27 	bl	800c9cc <__retarget_lock_acquire_recursive>
 800c37e:	89a3      	ldrh	r3, [r4, #12]
 800c380:	0719      	lsls	r1, r3, #28
 800c382:	d51d      	bpl.n	800c3c0 <_puts_r+0x78>
 800c384:	6923      	ldr	r3, [r4, #16]
 800c386:	b1db      	cbz	r3, 800c3c0 <_puts_r+0x78>
 800c388:	3e01      	subs	r6, #1
 800c38a:	68a3      	ldr	r3, [r4, #8]
 800c38c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c390:	3b01      	subs	r3, #1
 800c392:	60a3      	str	r3, [r4, #8]
 800c394:	bb39      	cbnz	r1, 800c3e6 <_puts_r+0x9e>
 800c396:	2b00      	cmp	r3, #0
 800c398:	da38      	bge.n	800c40c <_puts_r+0xc4>
 800c39a:	4622      	mov	r2, r4
 800c39c:	210a      	movs	r1, #10
 800c39e:	4628      	mov	r0, r5
 800c3a0:	f000 f89c 	bl	800c4dc <__swbuf_r>
 800c3a4:	3001      	adds	r0, #1
 800c3a6:	d011      	beq.n	800c3cc <_puts_r+0x84>
 800c3a8:	250a      	movs	r5, #10
 800c3aa:	e011      	b.n	800c3d0 <_puts_r+0x88>
 800c3ac:	4b1b      	ldr	r3, [pc, #108]	; (800c41c <_puts_r+0xd4>)
 800c3ae:	429c      	cmp	r4, r3
 800c3b0:	d101      	bne.n	800c3b6 <_puts_r+0x6e>
 800c3b2:	68ac      	ldr	r4, [r5, #8]
 800c3b4:	e7da      	b.n	800c36c <_puts_r+0x24>
 800c3b6:	4b1a      	ldr	r3, [pc, #104]	; (800c420 <_puts_r+0xd8>)
 800c3b8:	429c      	cmp	r4, r3
 800c3ba:	bf08      	it	eq
 800c3bc:	68ec      	ldreq	r4, [r5, #12]
 800c3be:	e7d5      	b.n	800c36c <_puts_r+0x24>
 800c3c0:	4621      	mov	r1, r4
 800c3c2:	4628      	mov	r0, r5
 800c3c4:	f000 f8dc 	bl	800c580 <__swsetup_r>
 800c3c8:	2800      	cmp	r0, #0
 800c3ca:	d0dd      	beq.n	800c388 <_puts_r+0x40>
 800c3cc:	f04f 35ff 	mov.w	r5, #4294967295
 800c3d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c3d2:	07da      	lsls	r2, r3, #31
 800c3d4:	d405      	bmi.n	800c3e2 <_puts_r+0x9a>
 800c3d6:	89a3      	ldrh	r3, [r4, #12]
 800c3d8:	059b      	lsls	r3, r3, #22
 800c3da:	d402      	bmi.n	800c3e2 <_puts_r+0x9a>
 800c3dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3de:	f000 faf6 	bl	800c9ce <__retarget_lock_release_recursive>
 800c3e2:	4628      	mov	r0, r5
 800c3e4:	bd70      	pop	{r4, r5, r6, pc}
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	da04      	bge.n	800c3f4 <_puts_r+0xac>
 800c3ea:	69a2      	ldr	r2, [r4, #24]
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	dc06      	bgt.n	800c3fe <_puts_r+0xb6>
 800c3f0:	290a      	cmp	r1, #10
 800c3f2:	d004      	beq.n	800c3fe <_puts_r+0xb6>
 800c3f4:	6823      	ldr	r3, [r4, #0]
 800c3f6:	1c5a      	adds	r2, r3, #1
 800c3f8:	6022      	str	r2, [r4, #0]
 800c3fa:	7019      	strb	r1, [r3, #0]
 800c3fc:	e7c5      	b.n	800c38a <_puts_r+0x42>
 800c3fe:	4622      	mov	r2, r4
 800c400:	4628      	mov	r0, r5
 800c402:	f000 f86b 	bl	800c4dc <__swbuf_r>
 800c406:	3001      	adds	r0, #1
 800c408:	d1bf      	bne.n	800c38a <_puts_r+0x42>
 800c40a:	e7df      	b.n	800c3cc <_puts_r+0x84>
 800c40c:	250a      	movs	r5, #10
 800c40e:	6823      	ldr	r3, [r4, #0]
 800c410:	1c5a      	adds	r2, r3, #1
 800c412:	6022      	str	r2, [r4, #0]
 800c414:	701d      	strb	r5, [r3, #0]
 800c416:	e7db      	b.n	800c3d0 <_puts_r+0x88>
 800c418:	0800d990 	.word	0x0800d990
 800c41c:	0800d9b0 	.word	0x0800d9b0
 800c420:	0800d970 	.word	0x0800d970

0800c424 <puts>:
 800c424:	4b02      	ldr	r3, [pc, #8]	; (800c430 <puts+0xc>)
 800c426:	4601      	mov	r1, r0
 800c428:	6818      	ldr	r0, [r3, #0]
 800c42a:	f7ff bf8d 	b.w	800c348 <_puts_r>
 800c42e:	bf00      	nop
 800c430:	20000180 	.word	0x20000180

0800c434 <sniprintf>:
 800c434:	b40c      	push	{r2, r3}
 800c436:	b530      	push	{r4, r5, lr}
 800c438:	4b17      	ldr	r3, [pc, #92]	; (800c498 <sniprintf+0x64>)
 800c43a:	1e0c      	subs	r4, r1, #0
 800c43c:	681d      	ldr	r5, [r3, #0]
 800c43e:	b09d      	sub	sp, #116	; 0x74
 800c440:	da08      	bge.n	800c454 <sniprintf+0x20>
 800c442:	238b      	movs	r3, #139	; 0x8b
 800c444:	f04f 30ff 	mov.w	r0, #4294967295
 800c448:	602b      	str	r3, [r5, #0]
 800c44a:	b01d      	add	sp, #116	; 0x74
 800c44c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c450:	b002      	add	sp, #8
 800c452:	4770      	bx	lr
 800c454:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c458:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c45c:	bf0c      	ite	eq
 800c45e:	4623      	moveq	r3, r4
 800c460:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c464:	9304      	str	r3, [sp, #16]
 800c466:	9307      	str	r3, [sp, #28]
 800c468:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c46c:	9002      	str	r0, [sp, #8]
 800c46e:	9006      	str	r0, [sp, #24]
 800c470:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c474:	4628      	mov	r0, r5
 800c476:	ab21      	add	r3, sp, #132	; 0x84
 800c478:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c47a:	a902      	add	r1, sp, #8
 800c47c:	9301      	str	r3, [sp, #4]
 800c47e:	f000 fc0d 	bl	800cc9c <_svfiprintf_r>
 800c482:	1c43      	adds	r3, r0, #1
 800c484:	bfbc      	itt	lt
 800c486:	238b      	movlt	r3, #139	; 0x8b
 800c488:	602b      	strlt	r3, [r5, #0]
 800c48a:	2c00      	cmp	r4, #0
 800c48c:	d0dd      	beq.n	800c44a <sniprintf+0x16>
 800c48e:	2200      	movs	r2, #0
 800c490:	9b02      	ldr	r3, [sp, #8]
 800c492:	701a      	strb	r2, [r3, #0]
 800c494:	e7d9      	b.n	800c44a <sniprintf+0x16>
 800c496:	bf00      	nop
 800c498:	20000180 	.word	0x20000180

0800c49c <siprintf>:
 800c49c:	b40e      	push	{r1, r2, r3}
 800c49e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c4a2:	b500      	push	{lr}
 800c4a4:	b09c      	sub	sp, #112	; 0x70
 800c4a6:	ab1d      	add	r3, sp, #116	; 0x74
 800c4a8:	9002      	str	r0, [sp, #8]
 800c4aa:	9006      	str	r0, [sp, #24]
 800c4ac:	9107      	str	r1, [sp, #28]
 800c4ae:	9104      	str	r1, [sp, #16]
 800c4b0:	4808      	ldr	r0, [pc, #32]	; (800c4d4 <siprintf+0x38>)
 800c4b2:	4909      	ldr	r1, [pc, #36]	; (800c4d8 <siprintf+0x3c>)
 800c4b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4b8:	9105      	str	r1, [sp, #20]
 800c4ba:	6800      	ldr	r0, [r0, #0]
 800c4bc:	a902      	add	r1, sp, #8
 800c4be:	9301      	str	r3, [sp, #4]
 800c4c0:	f000 fbec 	bl	800cc9c <_svfiprintf_r>
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	9b02      	ldr	r3, [sp, #8]
 800c4c8:	701a      	strb	r2, [r3, #0]
 800c4ca:	b01c      	add	sp, #112	; 0x70
 800c4cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4d0:	b003      	add	sp, #12
 800c4d2:	4770      	bx	lr
 800c4d4:	20000180 	.word	0x20000180
 800c4d8:	ffff0208 	.word	0xffff0208

0800c4dc <__swbuf_r>:
 800c4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4de:	460e      	mov	r6, r1
 800c4e0:	4614      	mov	r4, r2
 800c4e2:	4605      	mov	r5, r0
 800c4e4:	b118      	cbz	r0, 800c4ee <__swbuf_r+0x12>
 800c4e6:	6983      	ldr	r3, [r0, #24]
 800c4e8:	b90b      	cbnz	r3, 800c4ee <__swbuf_r+0x12>
 800c4ea:	f000 f9d1 	bl	800c890 <__sinit>
 800c4ee:	4b21      	ldr	r3, [pc, #132]	; (800c574 <__swbuf_r+0x98>)
 800c4f0:	429c      	cmp	r4, r3
 800c4f2:	d12b      	bne.n	800c54c <__swbuf_r+0x70>
 800c4f4:	686c      	ldr	r4, [r5, #4]
 800c4f6:	69a3      	ldr	r3, [r4, #24]
 800c4f8:	60a3      	str	r3, [r4, #8]
 800c4fa:	89a3      	ldrh	r3, [r4, #12]
 800c4fc:	071a      	lsls	r2, r3, #28
 800c4fe:	d52f      	bpl.n	800c560 <__swbuf_r+0x84>
 800c500:	6923      	ldr	r3, [r4, #16]
 800c502:	b36b      	cbz	r3, 800c560 <__swbuf_r+0x84>
 800c504:	6923      	ldr	r3, [r4, #16]
 800c506:	6820      	ldr	r0, [r4, #0]
 800c508:	b2f6      	uxtb	r6, r6
 800c50a:	1ac0      	subs	r0, r0, r3
 800c50c:	6963      	ldr	r3, [r4, #20]
 800c50e:	4637      	mov	r7, r6
 800c510:	4283      	cmp	r3, r0
 800c512:	dc04      	bgt.n	800c51e <__swbuf_r+0x42>
 800c514:	4621      	mov	r1, r4
 800c516:	4628      	mov	r0, r5
 800c518:	f000 f926 	bl	800c768 <_fflush_r>
 800c51c:	bb30      	cbnz	r0, 800c56c <__swbuf_r+0x90>
 800c51e:	68a3      	ldr	r3, [r4, #8]
 800c520:	3001      	adds	r0, #1
 800c522:	3b01      	subs	r3, #1
 800c524:	60a3      	str	r3, [r4, #8]
 800c526:	6823      	ldr	r3, [r4, #0]
 800c528:	1c5a      	adds	r2, r3, #1
 800c52a:	6022      	str	r2, [r4, #0]
 800c52c:	701e      	strb	r6, [r3, #0]
 800c52e:	6963      	ldr	r3, [r4, #20]
 800c530:	4283      	cmp	r3, r0
 800c532:	d004      	beq.n	800c53e <__swbuf_r+0x62>
 800c534:	89a3      	ldrh	r3, [r4, #12]
 800c536:	07db      	lsls	r3, r3, #31
 800c538:	d506      	bpl.n	800c548 <__swbuf_r+0x6c>
 800c53a:	2e0a      	cmp	r6, #10
 800c53c:	d104      	bne.n	800c548 <__swbuf_r+0x6c>
 800c53e:	4621      	mov	r1, r4
 800c540:	4628      	mov	r0, r5
 800c542:	f000 f911 	bl	800c768 <_fflush_r>
 800c546:	b988      	cbnz	r0, 800c56c <__swbuf_r+0x90>
 800c548:	4638      	mov	r0, r7
 800c54a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c54c:	4b0a      	ldr	r3, [pc, #40]	; (800c578 <__swbuf_r+0x9c>)
 800c54e:	429c      	cmp	r4, r3
 800c550:	d101      	bne.n	800c556 <__swbuf_r+0x7a>
 800c552:	68ac      	ldr	r4, [r5, #8]
 800c554:	e7cf      	b.n	800c4f6 <__swbuf_r+0x1a>
 800c556:	4b09      	ldr	r3, [pc, #36]	; (800c57c <__swbuf_r+0xa0>)
 800c558:	429c      	cmp	r4, r3
 800c55a:	bf08      	it	eq
 800c55c:	68ec      	ldreq	r4, [r5, #12]
 800c55e:	e7ca      	b.n	800c4f6 <__swbuf_r+0x1a>
 800c560:	4621      	mov	r1, r4
 800c562:	4628      	mov	r0, r5
 800c564:	f000 f80c 	bl	800c580 <__swsetup_r>
 800c568:	2800      	cmp	r0, #0
 800c56a:	d0cb      	beq.n	800c504 <__swbuf_r+0x28>
 800c56c:	f04f 37ff 	mov.w	r7, #4294967295
 800c570:	e7ea      	b.n	800c548 <__swbuf_r+0x6c>
 800c572:	bf00      	nop
 800c574:	0800d990 	.word	0x0800d990
 800c578:	0800d9b0 	.word	0x0800d9b0
 800c57c:	0800d970 	.word	0x0800d970

0800c580 <__swsetup_r>:
 800c580:	4b32      	ldr	r3, [pc, #200]	; (800c64c <__swsetup_r+0xcc>)
 800c582:	b570      	push	{r4, r5, r6, lr}
 800c584:	681d      	ldr	r5, [r3, #0]
 800c586:	4606      	mov	r6, r0
 800c588:	460c      	mov	r4, r1
 800c58a:	b125      	cbz	r5, 800c596 <__swsetup_r+0x16>
 800c58c:	69ab      	ldr	r3, [r5, #24]
 800c58e:	b913      	cbnz	r3, 800c596 <__swsetup_r+0x16>
 800c590:	4628      	mov	r0, r5
 800c592:	f000 f97d 	bl	800c890 <__sinit>
 800c596:	4b2e      	ldr	r3, [pc, #184]	; (800c650 <__swsetup_r+0xd0>)
 800c598:	429c      	cmp	r4, r3
 800c59a:	d10f      	bne.n	800c5bc <__swsetup_r+0x3c>
 800c59c:	686c      	ldr	r4, [r5, #4]
 800c59e:	89a3      	ldrh	r3, [r4, #12]
 800c5a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c5a4:	0719      	lsls	r1, r3, #28
 800c5a6:	d42c      	bmi.n	800c602 <__swsetup_r+0x82>
 800c5a8:	06dd      	lsls	r5, r3, #27
 800c5aa:	d411      	bmi.n	800c5d0 <__swsetup_r+0x50>
 800c5ac:	2309      	movs	r3, #9
 800c5ae:	6033      	str	r3, [r6, #0]
 800c5b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5b8:	81a3      	strh	r3, [r4, #12]
 800c5ba:	e03e      	b.n	800c63a <__swsetup_r+0xba>
 800c5bc:	4b25      	ldr	r3, [pc, #148]	; (800c654 <__swsetup_r+0xd4>)
 800c5be:	429c      	cmp	r4, r3
 800c5c0:	d101      	bne.n	800c5c6 <__swsetup_r+0x46>
 800c5c2:	68ac      	ldr	r4, [r5, #8]
 800c5c4:	e7eb      	b.n	800c59e <__swsetup_r+0x1e>
 800c5c6:	4b24      	ldr	r3, [pc, #144]	; (800c658 <__swsetup_r+0xd8>)
 800c5c8:	429c      	cmp	r4, r3
 800c5ca:	bf08      	it	eq
 800c5cc:	68ec      	ldreq	r4, [r5, #12]
 800c5ce:	e7e6      	b.n	800c59e <__swsetup_r+0x1e>
 800c5d0:	0758      	lsls	r0, r3, #29
 800c5d2:	d512      	bpl.n	800c5fa <__swsetup_r+0x7a>
 800c5d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5d6:	b141      	cbz	r1, 800c5ea <__swsetup_r+0x6a>
 800c5d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5dc:	4299      	cmp	r1, r3
 800c5de:	d002      	beq.n	800c5e6 <__swsetup_r+0x66>
 800c5e0:	4630      	mov	r0, r6
 800c5e2:	f000 fa59 	bl	800ca98 <_free_r>
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	6363      	str	r3, [r4, #52]	; 0x34
 800c5ea:	89a3      	ldrh	r3, [r4, #12]
 800c5ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c5f0:	81a3      	strh	r3, [r4, #12]
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	6063      	str	r3, [r4, #4]
 800c5f6:	6923      	ldr	r3, [r4, #16]
 800c5f8:	6023      	str	r3, [r4, #0]
 800c5fa:	89a3      	ldrh	r3, [r4, #12]
 800c5fc:	f043 0308 	orr.w	r3, r3, #8
 800c600:	81a3      	strh	r3, [r4, #12]
 800c602:	6923      	ldr	r3, [r4, #16]
 800c604:	b94b      	cbnz	r3, 800c61a <__swsetup_r+0x9a>
 800c606:	89a3      	ldrh	r3, [r4, #12]
 800c608:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c60c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c610:	d003      	beq.n	800c61a <__swsetup_r+0x9a>
 800c612:	4621      	mov	r1, r4
 800c614:	4630      	mov	r0, r6
 800c616:	f000 f9ff 	bl	800ca18 <__smakebuf_r>
 800c61a:	89a0      	ldrh	r0, [r4, #12]
 800c61c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c620:	f010 0301 	ands.w	r3, r0, #1
 800c624:	d00a      	beq.n	800c63c <__swsetup_r+0xbc>
 800c626:	2300      	movs	r3, #0
 800c628:	60a3      	str	r3, [r4, #8]
 800c62a:	6963      	ldr	r3, [r4, #20]
 800c62c:	425b      	negs	r3, r3
 800c62e:	61a3      	str	r3, [r4, #24]
 800c630:	6923      	ldr	r3, [r4, #16]
 800c632:	b943      	cbnz	r3, 800c646 <__swsetup_r+0xc6>
 800c634:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c638:	d1ba      	bne.n	800c5b0 <__swsetup_r+0x30>
 800c63a:	bd70      	pop	{r4, r5, r6, pc}
 800c63c:	0781      	lsls	r1, r0, #30
 800c63e:	bf58      	it	pl
 800c640:	6963      	ldrpl	r3, [r4, #20]
 800c642:	60a3      	str	r3, [r4, #8]
 800c644:	e7f4      	b.n	800c630 <__swsetup_r+0xb0>
 800c646:	2000      	movs	r0, #0
 800c648:	e7f7      	b.n	800c63a <__swsetup_r+0xba>
 800c64a:	bf00      	nop
 800c64c:	20000180 	.word	0x20000180
 800c650:	0800d990 	.word	0x0800d990
 800c654:	0800d9b0 	.word	0x0800d9b0
 800c658:	0800d970 	.word	0x0800d970

0800c65c <__sflush_r>:
 800c65c:	898a      	ldrh	r2, [r1, #12]
 800c65e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c662:	4605      	mov	r5, r0
 800c664:	0710      	lsls	r0, r2, #28
 800c666:	460c      	mov	r4, r1
 800c668:	d458      	bmi.n	800c71c <__sflush_r+0xc0>
 800c66a:	684b      	ldr	r3, [r1, #4]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	dc05      	bgt.n	800c67c <__sflush_r+0x20>
 800c670:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c672:	2b00      	cmp	r3, #0
 800c674:	dc02      	bgt.n	800c67c <__sflush_r+0x20>
 800c676:	2000      	movs	r0, #0
 800c678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c67c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c67e:	2e00      	cmp	r6, #0
 800c680:	d0f9      	beq.n	800c676 <__sflush_r+0x1a>
 800c682:	2300      	movs	r3, #0
 800c684:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c688:	682f      	ldr	r7, [r5, #0]
 800c68a:	602b      	str	r3, [r5, #0]
 800c68c:	d032      	beq.n	800c6f4 <__sflush_r+0x98>
 800c68e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c690:	89a3      	ldrh	r3, [r4, #12]
 800c692:	075a      	lsls	r2, r3, #29
 800c694:	d505      	bpl.n	800c6a2 <__sflush_r+0x46>
 800c696:	6863      	ldr	r3, [r4, #4]
 800c698:	1ac0      	subs	r0, r0, r3
 800c69a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c69c:	b10b      	cbz	r3, 800c6a2 <__sflush_r+0x46>
 800c69e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c6a0:	1ac0      	subs	r0, r0, r3
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	4602      	mov	r2, r0
 800c6a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c6a8:	4628      	mov	r0, r5
 800c6aa:	6a21      	ldr	r1, [r4, #32]
 800c6ac:	47b0      	blx	r6
 800c6ae:	1c43      	adds	r3, r0, #1
 800c6b0:	89a3      	ldrh	r3, [r4, #12]
 800c6b2:	d106      	bne.n	800c6c2 <__sflush_r+0x66>
 800c6b4:	6829      	ldr	r1, [r5, #0]
 800c6b6:	291d      	cmp	r1, #29
 800c6b8:	d82c      	bhi.n	800c714 <__sflush_r+0xb8>
 800c6ba:	4a2a      	ldr	r2, [pc, #168]	; (800c764 <__sflush_r+0x108>)
 800c6bc:	40ca      	lsrs	r2, r1
 800c6be:	07d6      	lsls	r6, r2, #31
 800c6c0:	d528      	bpl.n	800c714 <__sflush_r+0xb8>
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	6062      	str	r2, [r4, #4]
 800c6c6:	6922      	ldr	r2, [r4, #16]
 800c6c8:	04d9      	lsls	r1, r3, #19
 800c6ca:	6022      	str	r2, [r4, #0]
 800c6cc:	d504      	bpl.n	800c6d8 <__sflush_r+0x7c>
 800c6ce:	1c42      	adds	r2, r0, #1
 800c6d0:	d101      	bne.n	800c6d6 <__sflush_r+0x7a>
 800c6d2:	682b      	ldr	r3, [r5, #0]
 800c6d4:	b903      	cbnz	r3, 800c6d8 <__sflush_r+0x7c>
 800c6d6:	6560      	str	r0, [r4, #84]	; 0x54
 800c6d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6da:	602f      	str	r7, [r5, #0]
 800c6dc:	2900      	cmp	r1, #0
 800c6de:	d0ca      	beq.n	800c676 <__sflush_r+0x1a>
 800c6e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6e4:	4299      	cmp	r1, r3
 800c6e6:	d002      	beq.n	800c6ee <__sflush_r+0x92>
 800c6e8:	4628      	mov	r0, r5
 800c6ea:	f000 f9d5 	bl	800ca98 <_free_r>
 800c6ee:	2000      	movs	r0, #0
 800c6f0:	6360      	str	r0, [r4, #52]	; 0x34
 800c6f2:	e7c1      	b.n	800c678 <__sflush_r+0x1c>
 800c6f4:	6a21      	ldr	r1, [r4, #32]
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	4628      	mov	r0, r5
 800c6fa:	47b0      	blx	r6
 800c6fc:	1c41      	adds	r1, r0, #1
 800c6fe:	d1c7      	bne.n	800c690 <__sflush_r+0x34>
 800c700:	682b      	ldr	r3, [r5, #0]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d0c4      	beq.n	800c690 <__sflush_r+0x34>
 800c706:	2b1d      	cmp	r3, #29
 800c708:	d001      	beq.n	800c70e <__sflush_r+0xb2>
 800c70a:	2b16      	cmp	r3, #22
 800c70c:	d101      	bne.n	800c712 <__sflush_r+0xb6>
 800c70e:	602f      	str	r7, [r5, #0]
 800c710:	e7b1      	b.n	800c676 <__sflush_r+0x1a>
 800c712:	89a3      	ldrh	r3, [r4, #12]
 800c714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c718:	81a3      	strh	r3, [r4, #12]
 800c71a:	e7ad      	b.n	800c678 <__sflush_r+0x1c>
 800c71c:	690f      	ldr	r7, [r1, #16]
 800c71e:	2f00      	cmp	r7, #0
 800c720:	d0a9      	beq.n	800c676 <__sflush_r+0x1a>
 800c722:	0793      	lsls	r3, r2, #30
 800c724:	bf18      	it	ne
 800c726:	2300      	movne	r3, #0
 800c728:	680e      	ldr	r6, [r1, #0]
 800c72a:	bf08      	it	eq
 800c72c:	694b      	ldreq	r3, [r1, #20]
 800c72e:	eba6 0807 	sub.w	r8, r6, r7
 800c732:	600f      	str	r7, [r1, #0]
 800c734:	608b      	str	r3, [r1, #8]
 800c736:	f1b8 0f00 	cmp.w	r8, #0
 800c73a:	dd9c      	ble.n	800c676 <__sflush_r+0x1a>
 800c73c:	4643      	mov	r3, r8
 800c73e:	463a      	mov	r2, r7
 800c740:	4628      	mov	r0, r5
 800c742:	6a21      	ldr	r1, [r4, #32]
 800c744:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c746:	47b0      	blx	r6
 800c748:	2800      	cmp	r0, #0
 800c74a:	dc06      	bgt.n	800c75a <__sflush_r+0xfe>
 800c74c:	89a3      	ldrh	r3, [r4, #12]
 800c74e:	f04f 30ff 	mov.w	r0, #4294967295
 800c752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c756:	81a3      	strh	r3, [r4, #12]
 800c758:	e78e      	b.n	800c678 <__sflush_r+0x1c>
 800c75a:	4407      	add	r7, r0
 800c75c:	eba8 0800 	sub.w	r8, r8, r0
 800c760:	e7e9      	b.n	800c736 <__sflush_r+0xda>
 800c762:	bf00      	nop
 800c764:	20400001 	.word	0x20400001

0800c768 <_fflush_r>:
 800c768:	b538      	push	{r3, r4, r5, lr}
 800c76a:	690b      	ldr	r3, [r1, #16]
 800c76c:	4605      	mov	r5, r0
 800c76e:	460c      	mov	r4, r1
 800c770:	b913      	cbnz	r3, 800c778 <_fflush_r+0x10>
 800c772:	2500      	movs	r5, #0
 800c774:	4628      	mov	r0, r5
 800c776:	bd38      	pop	{r3, r4, r5, pc}
 800c778:	b118      	cbz	r0, 800c782 <_fflush_r+0x1a>
 800c77a:	6983      	ldr	r3, [r0, #24]
 800c77c:	b90b      	cbnz	r3, 800c782 <_fflush_r+0x1a>
 800c77e:	f000 f887 	bl	800c890 <__sinit>
 800c782:	4b14      	ldr	r3, [pc, #80]	; (800c7d4 <_fflush_r+0x6c>)
 800c784:	429c      	cmp	r4, r3
 800c786:	d11b      	bne.n	800c7c0 <_fflush_r+0x58>
 800c788:	686c      	ldr	r4, [r5, #4]
 800c78a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d0ef      	beq.n	800c772 <_fflush_r+0xa>
 800c792:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c794:	07d0      	lsls	r0, r2, #31
 800c796:	d404      	bmi.n	800c7a2 <_fflush_r+0x3a>
 800c798:	0599      	lsls	r1, r3, #22
 800c79a:	d402      	bmi.n	800c7a2 <_fflush_r+0x3a>
 800c79c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c79e:	f000 f915 	bl	800c9cc <__retarget_lock_acquire_recursive>
 800c7a2:	4628      	mov	r0, r5
 800c7a4:	4621      	mov	r1, r4
 800c7a6:	f7ff ff59 	bl	800c65c <__sflush_r>
 800c7aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c7ac:	4605      	mov	r5, r0
 800c7ae:	07da      	lsls	r2, r3, #31
 800c7b0:	d4e0      	bmi.n	800c774 <_fflush_r+0xc>
 800c7b2:	89a3      	ldrh	r3, [r4, #12]
 800c7b4:	059b      	lsls	r3, r3, #22
 800c7b6:	d4dd      	bmi.n	800c774 <_fflush_r+0xc>
 800c7b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7ba:	f000 f908 	bl	800c9ce <__retarget_lock_release_recursive>
 800c7be:	e7d9      	b.n	800c774 <_fflush_r+0xc>
 800c7c0:	4b05      	ldr	r3, [pc, #20]	; (800c7d8 <_fflush_r+0x70>)
 800c7c2:	429c      	cmp	r4, r3
 800c7c4:	d101      	bne.n	800c7ca <_fflush_r+0x62>
 800c7c6:	68ac      	ldr	r4, [r5, #8]
 800c7c8:	e7df      	b.n	800c78a <_fflush_r+0x22>
 800c7ca:	4b04      	ldr	r3, [pc, #16]	; (800c7dc <_fflush_r+0x74>)
 800c7cc:	429c      	cmp	r4, r3
 800c7ce:	bf08      	it	eq
 800c7d0:	68ec      	ldreq	r4, [r5, #12]
 800c7d2:	e7da      	b.n	800c78a <_fflush_r+0x22>
 800c7d4:	0800d990 	.word	0x0800d990
 800c7d8:	0800d9b0 	.word	0x0800d9b0
 800c7dc:	0800d970 	.word	0x0800d970

0800c7e0 <std>:
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	b510      	push	{r4, lr}
 800c7e4:	4604      	mov	r4, r0
 800c7e6:	e9c0 3300 	strd	r3, r3, [r0]
 800c7ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c7ee:	6083      	str	r3, [r0, #8]
 800c7f0:	8181      	strh	r1, [r0, #12]
 800c7f2:	6643      	str	r3, [r0, #100]	; 0x64
 800c7f4:	81c2      	strh	r2, [r0, #14]
 800c7f6:	6183      	str	r3, [r0, #24]
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	2208      	movs	r2, #8
 800c7fc:	305c      	adds	r0, #92	; 0x5c
 800c7fe:	f7ff fd9b 	bl	800c338 <memset>
 800c802:	4b05      	ldr	r3, [pc, #20]	; (800c818 <std+0x38>)
 800c804:	6224      	str	r4, [r4, #32]
 800c806:	6263      	str	r3, [r4, #36]	; 0x24
 800c808:	4b04      	ldr	r3, [pc, #16]	; (800c81c <std+0x3c>)
 800c80a:	62a3      	str	r3, [r4, #40]	; 0x28
 800c80c:	4b04      	ldr	r3, [pc, #16]	; (800c820 <std+0x40>)
 800c80e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c810:	4b04      	ldr	r3, [pc, #16]	; (800c824 <std+0x44>)
 800c812:	6323      	str	r3, [r4, #48]	; 0x30
 800c814:	bd10      	pop	{r4, pc}
 800c816:	bf00      	nop
 800c818:	0800d1e9 	.word	0x0800d1e9
 800c81c:	0800d20b 	.word	0x0800d20b
 800c820:	0800d243 	.word	0x0800d243
 800c824:	0800d267 	.word	0x0800d267

0800c828 <_cleanup_r>:
 800c828:	4901      	ldr	r1, [pc, #4]	; (800c830 <_cleanup_r+0x8>)
 800c82a:	f000 b8af 	b.w	800c98c <_fwalk_reent>
 800c82e:	bf00      	nop
 800c830:	0800c769 	.word	0x0800c769

0800c834 <__sfmoreglue>:
 800c834:	b570      	push	{r4, r5, r6, lr}
 800c836:	2568      	movs	r5, #104	; 0x68
 800c838:	1e4a      	subs	r2, r1, #1
 800c83a:	4355      	muls	r5, r2
 800c83c:	460e      	mov	r6, r1
 800c83e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c842:	f000 f975 	bl	800cb30 <_malloc_r>
 800c846:	4604      	mov	r4, r0
 800c848:	b140      	cbz	r0, 800c85c <__sfmoreglue+0x28>
 800c84a:	2100      	movs	r1, #0
 800c84c:	e9c0 1600 	strd	r1, r6, [r0]
 800c850:	300c      	adds	r0, #12
 800c852:	60a0      	str	r0, [r4, #8]
 800c854:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c858:	f7ff fd6e 	bl	800c338 <memset>
 800c85c:	4620      	mov	r0, r4
 800c85e:	bd70      	pop	{r4, r5, r6, pc}

0800c860 <__sfp_lock_acquire>:
 800c860:	4801      	ldr	r0, [pc, #4]	; (800c868 <__sfp_lock_acquire+0x8>)
 800c862:	f000 b8b3 	b.w	800c9cc <__retarget_lock_acquire_recursive>
 800c866:	bf00      	nop
 800c868:	2000172c 	.word	0x2000172c

0800c86c <__sfp_lock_release>:
 800c86c:	4801      	ldr	r0, [pc, #4]	; (800c874 <__sfp_lock_release+0x8>)
 800c86e:	f000 b8ae 	b.w	800c9ce <__retarget_lock_release_recursive>
 800c872:	bf00      	nop
 800c874:	2000172c 	.word	0x2000172c

0800c878 <__sinit_lock_acquire>:
 800c878:	4801      	ldr	r0, [pc, #4]	; (800c880 <__sinit_lock_acquire+0x8>)
 800c87a:	f000 b8a7 	b.w	800c9cc <__retarget_lock_acquire_recursive>
 800c87e:	bf00      	nop
 800c880:	20001727 	.word	0x20001727

0800c884 <__sinit_lock_release>:
 800c884:	4801      	ldr	r0, [pc, #4]	; (800c88c <__sinit_lock_release+0x8>)
 800c886:	f000 b8a2 	b.w	800c9ce <__retarget_lock_release_recursive>
 800c88a:	bf00      	nop
 800c88c:	20001727 	.word	0x20001727

0800c890 <__sinit>:
 800c890:	b510      	push	{r4, lr}
 800c892:	4604      	mov	r4, r0
 800c894:	f7ff fff0 	bl	800c878 <__sinit_lock_acquire>
 800c898:	69a3      	ldr	r3, [r4, #24]
 800c89a:	b11b      	cbz	r3, 800c8a4 <__sinit+0x14>
 800c89c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8a0:	f7ff bff0 	b.w	800c884 <__sinit_lock_release>
 800c8a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c8a8:	6523      	str	r3, [r4, #80]	; 0x50
 800c8aa:	4b13      	ldr	r3, [pc, #76]	; (800c8f8 <__sinit+0x68>)
 800c8ac:	4a13      	ldr	r2, [pc, #76]	; (800c8fc <__sinit+0x6c>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	62a2      	str	r2, [r4, #40]	; 0x28
 800c8b2:	42a3      	cmp	r3, r4
 800c8b4:	bf08      	it	eq
 800c8b6:	2301      	moveq	r3, #1
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	bf08      	it	eq
 800c8bc:	61a3      	streq	r3, [r4, #24]
 800c8be:	f000 f81f 	bl	800c900 <__sfp>
 800c8c2:	6060      	str	r0, [r4, #4]
 800c8c4:	4620      	mov	r0, r4
 800c8c6:	f000 f81b 	bl	800c900 <__sfp>
 800c8ca:	60a0      	str	r0, [r4, #8]
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	f000 f817 	bl	800c900 <__sfp>
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	2104      	movs	r1, #4
 800c8d6:	60e0      	str	r0, [r4, #12]
 800c8d8:	6860      	ldr	r0, [r4, #4]
 800c8da:	f7ff ff81 	bl	800c7e0 <std>
 800c8de:	2201      	movs	r2, #1
 800c8e0:	2109      	movs	r1, #9
 800c8e2:	68a0      	ldr	r0, [r4, #8]
 800c8e4:	f7ff ff7c 	bl	800c7e0 <std>
 800c8e8:	2202      	movs	r2, #2
 800c8ea:	2112      	movs	r1, #18
 800c8ec:	68e0      	ldr	r0, [r4, #12]
 800c8ee:	f7ff ff77 	bl	800c7e0 <std>
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	61a3      	str	r3, [r4, #24]
 800c8f6:	e7d1      	b.n	800c89c <__sinit+0xc>
 800c8f8:	0800d96c 	.word	0x0800d96c
 800c8fc:	0800c829 	.word	0x0800c829

0800c900 <__sfp>:
 800c900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c902:	4607      	mov	r7, r0
 800c904:	f7ff ffac 	bl	800c860 <__sfp_lock_acquire>
 800c908:	4b1e      	ldr	r3, [pc, #120]	; (800c984 <__sfp+0x84>)
 800c90a:	681e      	ldr	r6, [r3, #0]
 800c90c:	69b3      	ldr	r3, [r6, #24]
 800c90e:	b913      	cbnz	r3, 800c916 <__sfp+0x16>
 800c910:	4630      	mov	r0, r6
 800c912:	f7ff ffbd 	bl	800c890 <__sinit>
 800c916:	3648      	adds	r6, #72	; 0x48
 800c918:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c91c:	3b01      	subs	r3, #1
 800c91e:	d503      	bpl.n	800c928 <__sfp+0x28>
 800c920:	6833      	ldr	r3, [r6, #0]
 800c922:	b30b      	cbz	r3, 800c968 <__sfp+0x68>
 800c924:	6836      	ldr	r6, [r6, #0]
 800c926:	e7f7      	b.n	800c918 <__sfp+0x18>
 800c928:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c92c:	b9d5      	cbnz	r5, 800c964 <__sfp+0x64>
 800c92e:	4b16      	ldr	r3, [pc, #88]	; (800c988 <__sfp+0x88>)
 800c930:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c934:	60e3      	str	r3, [r4, #12]
 800c936:	6665      	str	r5, [r4, #100]	; 0x64
 800c938:	f000 f847 	bl	800c9ca <__retarget_lock_init_recursive>
 800c93c:	f7ff ff96 	bl	800c86c <__sfp_lock_release>
 800c940:	2208      	movs	r2, #8
 800c942:	4629      	mov	r1, r5
 800c944:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c948:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c94c:	6025      	str	r5, [r4, #0]
 800c94e:	61a5      	str	r5, [r4, #24]
 800c950:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c954:	f7ff fcf0 	bl	800c338 <memset>
 800c958:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c95c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c960:	4620      	mov	r0, r4
 800c962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c964:	3468      	adds	r4, #104	; 0x68
 800c966:	e7d9      	b.n	800c91c <__sfp+0x1c>
 800c968:	2104      	movs	r1, #4
 800c96a:	4638      	mov	r0, r7
 800c96c:	f7ff ff62 	bl	800c834 <__sfmoreglue>
 800c970:	4604      	mov	r4, r0
 800c972:	6030      	str	r0, [r6, #0]
 800c974:	2800      	cmp	r0, #0
 800c976:	d1d5      	bne.n	800c924 <__sfp+0x24>
 800c978:	f7ff ff78 	bl	800c86c <__sfp_lock_release>
 800c97c:	230c      	movs	r3, #12
 800c97e:	603b      	str	r3, [r7, #0]
 800c980:	e7ee      	b.n	800c960 <__sfp+0x60>
 800c982:	bf00      	nop
 800c984:	0800d96c 	.word	0x0800d96c
 800c988:	ffff0001 	.word	0xffff0001

0800c98c <_fwalk_reent>:
 800c98c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c990:	4606      	mov	r6, r0
 800c992:	4688      	mov	r8, r1
 800c994:	2700      	movs	r7, #0
 800c996:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c99a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c99e:	f1b9 0901 	subs.w	r9, r9, #1
 800c9a2:	d505      	bpl.n	800c9b0 <_fwalk_reent+0x24>
 800c9a4:	6824      	ldr	r4, [r4, #0]
 800c9a6:	2c00      	cmp	r4, #0
 800c9a8:	d1f7      	bne.n	800c99a <_fwalk_reent+0xe>
 800c9aa:	4638      	mov	r0, r7
 800c9ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9b0:	89ab      	ldrh	r3, [r5, #12]
 800c9b2:	2b01      	cmp	r3, #1
 800c9b4:	d907      	bls.n	800c9c6 <_fwalk_reent+0x3a>
 800c9b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	d003      	beq.n	800c9c6 <_fwalk_reent+0x3a>
 800c9be:	4629      	mov	r1, r5
 800c9c0:	4630      	mov	r0, r6
 800c9c2:	47c0      	blx	r8
 800c9c4:	4307      	orrs	r7, r0
 800c9c6:	3568      	adds	r5, #104	; 0x68
 800c9c8:	e7e9      	b.n	800c99e <_fwalk_reent+0x12>

0800c9ca <__retarget_lock_init_recursive>:
 800c9ca:	4770      	bx	lr

0800c9cc <__retarget_lock_acquire_recursive>:
 800c9cc:	4770      	bx	lr

0800c9ce <__retarget_lock_release_recursive>:
 800c9ce:	4770      	bx	lr

0800c9d0 <__swhatbuf_r>:
 800c9d0:	b570      	push	{r4, r5, r6, lr}
 800c9d2:	460e      	mov	r6, r1
 800c9d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9d8:	4614      	mov	r4, r2
 800c9da:	2900      	cmp	r1, #0
 800c9dc:	461d      	mov	r5, r3
 800c9de:	b096      	sub	sp, #88	; 0x58
 800c9e0:	da07      	bge.n	800c9f2 <__swhatbuf_r+0x22>
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	602b      	str	r3, [r5, #0]
 800c9e6:	89b3      	ldrh	r3, [r6, #12]
 800c9e8:	061a      	lsls	r2, r3, #24
 800c9ea:	d410      	bmi.n	800ca0e <__swhatbuf_r+0x3e>
 800c9ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9f0:	e00e      	b.n	800ca10 <__swhatbuf_r+0x40>
 800c9f2:	466a      	mov	r2, sp
 800c9f4:	f000 fc5e 	bl	800d2b4 <_fstat_r>
 800c9f8:	2800      	cmp	r0, #0
 800c9fa:	dbf2      	blt.n	800c9e2 <__swhatbuf_r+0x12>
 800c9fc:	9a01      	ldr	r2, [sp, #4]
 800c9fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ca02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ca06:	425a      	negs	r2, r3
 800ca08:	415a      	adcs	r2, r3
 800ca0a:	602a      	str	r2, [r5, #0]
 800ca0c:	e7ee      	b.n	800c9ec <__swhatbuf_r+0x1c>
 800ca0e:	2340      	movs	r3, #64	; 0x40
 800ca10:	2000      	movs	r0, #0
 800ca12:	6023      	str	r3, [r4, #0]
 800ca14:	b016      	add	sp, #88	; 0x58
 800ca16:	bd70      	pop	{r4, r5, r6, pc}

0800ca18 <__smakebuf_r>:
 800ca18:	898b      	ldrh	r3, [r1, #12]
 800ca1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca1c:	079d      	lsls	r5, r3, #30
 800ca1e:	4606      	mov	r6, r0
 800ca20:	460c      	mov	r4, r1
 800ca22:	d507      	bpl.n	800ca34 <__smakebuf_r+0x1c>
 800ca24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ca28:	6023      	str	r3, [r4, #0]
 800ca2a:	6123      	str	r3, [r4, #16]
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	6163      	str	r3, [r4, #20]
 800ca30:	b002      	add	sp, #8
 800ca32:	bd70      	pop	{r4, r5, r6, pc}
 800ca34:	466a      	mov	r2, sp
 800ca36:	ab01      	add	r3, sp, #4
 800ca38:	f7ff ffca 	bl	800c9d0 <__swhatbuf_r>
 800ca3c:	9900      	ldr	r1, [sp, #0]
 800ca3e:	4605      	mov	r5, r0
 800ca40:	4630      	mov	r0, r6
 800ca42:	f000 f875 	bl	800cb30 <_malloc_r>
 800ca46:	b948      	cbnz	r0, 800ca5c <__smakebuf_r+0x44>
 800ca48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca4c:	059a      	lsls	r2, r3, #22
 800ca4e:	d4ef      	bmi.n	800ca30 <__smakebuf_r+0x18>
 800ca50:	f023 0303 	bic.w	r3, r3, #3
 800ca54:	f043 0302 	orr.w	r3, r3, #2
 800ca58:	81a3      	strh	r3, [r4, #12]
 800ca5a:	e7e3      	b.n	800ca24 <__smakebuf_r+0xc>
 800ca5c:	4b0d      	ldr	r3, [pc, #52]	; (800ca94 <__smakebuf_r+0x7c>)
 800ca5e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ca60:	89a3      	ldrh	r3, [r4, #12]
 800ca62:	6020      	str	r0, [r4, #0]
 800ca64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca68:	81a3      	strh	r3, [r4, #12]
 800ca6a:	9b00      	ldr	r3, [sp, #0]
 800ca6c:	6120      	str	r0, [r4, #16]
 800ca6e:	6163      	str	r3, [r4, #20]
 800ca70:	9b01      	ldr	r3, [sp, #4]
 800ca72:	b15b      	cbz	r3, 800ca8c <__smakebuf_r+0x74>
 800ca74:	4630      	mov	r0, r6
 800ca76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca7a:	f000 fc2d 	bl	800d2d8 <_isatty_r>
 800ca7e:	b128      	cbz	r0, 800ca8c <__smakebuf_r+0x74>
 800ca80:	89a3      	ldrh	r3, [r4, #12]
 800ca82:	f023 0303 	bic.w	r3, r3, #3
 800ca86:	f043 0301 	orr.w	r3, r3, #1
 800ca8a:	81a3      	strh	r3, [r4, #12]
 800ca8c:	89a0      	ldrh	r0, [r4, #12]
 800ca8e:	4305      	orrs	r5, r0
 800ca90:	81a5      	strh	r5, [r4, #12]
 800ca92:	e7cd      	b.n	800ca30 <__smakebuf_r+0x18>
 800ca94:	0800c829 	.word	0x0800c829

0800ca98 <_free_r>:
 800ca98:	b538      	push	{r3, r4, r5, lr}
 800ca9a:	4605      	mov	r5, r0
 800ca9c:	2900      	cmp	r1, #0
 800ca9e:	d043      	beq.n	800cb28 <_free_r+0x90>
 800caa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800caa4:	1f0c      	subs	r4, r1, #4
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	bfb8      	it	lt
 800caaa:	18e4      	addlt	r4, r4, r3
 800caac:	f000 fc6c 	bl	800d388 <__malloc_lock>
 800cab0:	4a1e      	ldr	r2, [pc, #120]	; (800cb2c <_free_r+0x94>)
 800cab2:	6813      	ldr	r3, [r2, #0]
 800cab4:	4610      	mov	r0, r2
 800cab6:	b933      	cbnz	r3, 800cac6 <_free_r+0x2e>
 800cab8:	6063      	str	r3, [r4, #4]
 800caba:	6014      	str	r4, [r2, #0]
 800cabc:	4628      	mov	r0, r5
 800cabe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cac2:	f000 bc67 	b.w	800d394 <__malloc_unlock>
 800cac6:	42a3      	cmp	r3, r4
 800cac8:	d90a      	bls.n	800cae0 <_free_r+0x48>
 800caca:	6821      	ldr	r1, [r4, #0]
 800cacc:	1862      	adds	r2, r4, r1
 800cace:	4293      	cmp	r3, r2
 800cad0:	bf01      	itttt	eq
 800cad2:	681a      	ldreq	r2, [r3, #0]
 800cad4:	685b      	ldreq	r3, [r3, #4]
 800cad6:	1852      	addeq	r2, r2, r1
 800cad8:	6022      	streq	r2, [r4, #0]
 800cada:	6063      	str	r3, [r4, #4]
 800cadc:	6004      	str	r4, [r0, #0]
 800cade:	e7ed      	b.n	800cabc <_free_r+0x24>
 800cae0:	461a      	mov	r2, r3
 800cae2:	685b      	ldr	r3, [r3, #4]
 800cae4:	b10b      	cbz	r3, 800caea <_free_r+0x52>
 800cae6:	42a3      	cmp	r3, r4
 800cae8:	d9fa      	bls.n	800cae0 <_free_r+0x48>
 800caea:	6811      	ldr	r1, [r2, #0]
 800caec:	1850      	adds	r0, r2, r1
 800caee:	42a0      	cmp	r0, r4
 800caf0:	d10b      	bne.n	800cb0a <_free_r+0x72>
 800caf2:	6820      	ldr	r0, [r4, #0]
 800caf4:	4401      	add	r1, r0
 800caf6:	1850      	adds	r0, r2, r1
 800caf8:	4283      	cmp	r3, r0
 800cafa:	6011      	str	r1, [r2, #0]
 800cafc:	d1de      	bne.n	800cabc <_free_r+0x24>
 800cafe:	6818      	ldr	r0, [r3, #0]
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	4401      	add	r1, r0
 800cb04:	6011      	str	r1, [r2, #0]
 800cb06:	6053      	str	r3, [r2, #4]
 800cb08:	e7d8      	b.n	800cabc <_free_r+0x24>
 800cb0a:	d902      	bls.n	800cb12 <_free_r+0x7a>
 800cb0c:	230c      	movs	r3, #12
 800cb0e:	602b      	str	r3, [r5, #0]
 800cb10:	e7d4      	b.n	800cabc <_free_r+0x24>
 800cb12:	6820      	ldr	r0, [r4, #0]
 800cb14:	1821      	adds	r1, r4, r0
 800cb16:	428b      	cmp	r3, r1
 800cb18:	bf01      	itttt	eq
 800cb1a:	6819      	ldreq	r1, [r3, #0]
 800cb1c:	685b      	ldreq	r3, [r3, #4]
 800cb1e:	1809      	addeq	r1, r1, r0
 800cb20:	6021      	streq	r1, [r4, #0]
 800cb22:	6063      	str	r3, [r4, #4]
 800cb24:	6054      	str	r4, [r2, #4]
 800cb26:	e7c9      	b.n	800cabc <_free_r+0x24>
 800cb28:	bd38      	pop	{r3, r4, r5, pc}
 800cb2a:	bf00      	nop
 800cb2c:	200007ac 	.word	0x200007ac

0800cb30 <_malloc_r>:
 800cb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb32:	1ccd      	adds	r5, r1, #3
 800cb34:	f025 0503 	bic.w	r5, r5, #3
 800cb38:	3508      	adds	r5, #8
 800cb3a:	2d0c      	cmp	r5, #12
 800cb3c:	bf38      	it	cc
 800cb3e:	250c      	movcc	r5, #12
 800cb40:	2d00      	cmp	r5, #0
 800cb42:	4606      	mov	r6, r0
 800cb44:	db01      	blt.n	800cb4a <_malloc_r+0x1a>
 800cb46:	42a9      	cmp	r1, r5
 800cb48:	d903      	bls.n	800cb52 <_malloc_r+0x22>
 800cb4a:	230c      	movs	r3, #12
 800cb4c:	6033      	str	r3, [r6, #0]
 800cb4e:	2000      	movs	r0, #0
 800cb50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb52:	f000 fc19 	bl	800d388 <__malloc_lock>
 800cb56:	4921      	ldr	r1, [pc, #132]	; (800cbdc <_malloc_r+0xac>)
 800cb58:	680a      	ldr	r2, [r1, #0]
 800cb5a:	4614      	mov	r4, r2
 800cb5c:	b99c      	cbnz	r4, 800cb86 <_malloc_r+0x56>
 800cb5e:	4f20      	ldr	r7, [pc, #128]	; (800cbe0 <_malloc_r+0xb0>)
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	b923      	cbnz	r3, 800cb6e <_malloc_r+0x3e>
 800cb64:	4621      	mov	r1, r4
 800cb66:	4630      	mov	r0, r6
 800cb68:	f000 fb2e 	bl	800d1c8 <_sbrk_r>
 800cb6c:	6038      	str	r0, [r7, #0]
 800cb6e:	4629      	mov	r1, r5
 800cb70:	4630      	mov	r0, r6
 800cb72:	f000 fb29 	bl	800d1c8 <_sbrk_r>
 800cb76:	1c43      	adds	r3, r0, #1
 800cb78:	d123      	bne.n	800cbc2 <_malloc_r+0x92>
 800cb7a:	230c      	movs	r3, #12
 800cb7c:	4630      	mov	r0, r6
 800cb7e:	6033      	str	r3, [r6, #0]
 800cb80:	f000 fc08 	bl	800d394 <__malloc_unlock>
 800cb84:	e7e3      	b.n	800cb4e <_malloc_r+0x1e>
 800cb86:	6823      	ldr	r3, [r4, #0]
 800cb88:	1b5b      	subs	r3, r3, r5
 800cb8a:	d417      	bmi.n	800cbbc <_malloc_r+0x8c>
 800cb8c:	2b0b      	cmp	r3, #11
 800cb8e:	d903      	bls.n	800cb98 <_malloc_r+0x68>
 800cb90:	6023      	str	r3, [r4, #0]
 800cb92:	441c      	add	r4, r3
 800cb94:	6025      	str	r5, [r4, #0]
 800cb96:	e004      	b.n	800cba2 <_malloc_r+0x72>
 800cb98:	6863      	ldr	r3, [r4, #4]
 800cb9a:	42a2      	cmp	r2, r4
 800cb9c:	bf0c      	ite	eq
 800cb9e:	600b      	streq	r3, [r1, #0]
 800cba0:	6053      	strne	r3, [r2, #4]
 800cba2:	4630      	mov	r0, r6
 800cba4:	f000 fbf6 	bl	800d394 <__malloc_unlock>
 800cba8:	f104 000b 	add.w	r0, r4, #11
 800cbac:	1d23      	adds	r3, r4, #4
 800cbae:	f020 0007 	bic.w	r0, r0, #7
 800cbb2:	1ac2      	subs	r2, r0, r3
 800cbb4:	d0cc      	beq.n	800cb50 <_malloc_r+0x20>
 800cbb6:	1a1b      	subs	r3, r3, r0
 800cbb8:	50a3      	str	r3, [r4, r2]
 800cbba:	e7c9      	b.n	800cb50 <_malloc_r+0x20>
 800cbbc:	4622      	mov	r2, r4
 800cbbe:	6864      	ldr	r4, [r4, #4]
 800cbc0:	e7cc      	b.n	800cb5c <_malloc_r+0x2c>
 800cbc2:	1cc4      	adds	r4, r0, #3
 800cbc4:	f024 0403 	bic.w	r4, r4, #3
 800cbc8:	42a0      	cmp	r0, r4
 800cbca:	d0e3      	beq.n	800cb94 <_malloc_r+0x64>
 800cbcc:	1a21      	subs	r1, r4, r0
 800cbce:	4630      	mov	r0, r6
 800cbd0:	f000 fafa 	bl	800d1c8 <_sbrk_r>
 800cbd4:	3001      	adds	r0, #1
 800cbd6:	d1dd      	bne.n	800cb94 <_malloc_r+0x64>
 800cbd8:	e7cf      	b.n	800cb7a <_malloc_r+0x4a>
 800cbda:	bf00      	nop
 800cbdc:	200007ac 	.word	0x200007ac
 800cbe0:	200007b0 	.word	0x200007b0

0800cbe4 <__ssputs_r>:
 800cbe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbe8:	688e      	ldr	r6, [r1, #8]
 800cbea:	4682      	mov	sl, r0
 800cbec:	429e      	cmp	r6, r3
 800cbee:	460c      	mov	r4, r1
 800cbf0:	4690      	mov	r8, r2
 800cbf2:	461f      	mov	r7, r3
 800cbf4:	d838      	bhi.n	800cc68 <__ssputs_r+0x84>
 800cbf6:	898a      	ldrh	r2, [r1, #12]
 800cbf8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cbfc:	d032      	beq.n	800cc64 <__ssputs_r+0x80>
 800cbfe:	6825      	ldr	r5, [r4, #0]
 800cc00:	6909      	ldr	r1, [r1, #16]
 800cc02:	3301      	adds	r3, #1
 800cc04:	eba5 0901 	sub.w	r9, r5, r1
 800cc08:	6965      	ldr	r5, [r4, #20]
 800cc0a:	444b      	add	r3, r9
 800cc0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cc14:	106d      	asrs	r5, r5, #1
 800cc16:	429d      	cmp	r5, r3
 800cc18:	bf38      	it	cc
 800cc1a:	461d      	movcc	r5, r3
 800cc1c:	0553      	lsls	r3, r2, #21
 800cc1e:	d531      	bpl.n	800cc84 <__ssputs_r+0xa0>
 800cc20:	4629      	mov	r1, r5
 800cc22:	f7ff ff85 	bl	800cb30 <_malloc_r>
 800cc26:	4606      	mov	r6, r0
 800cc28:	b950      	cbnz	r0, 800cc40 <__ssputs_r+0x5c>
 800cc2a:	230c      	movs	r3, #12
 800cc2c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc30:	f8ca 3000 	str.w	r3, [sl]
 800cc34:	89a3      	ldrh	r3, [r4, #12]
 800cc36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc3a:	81a3      	strh	r3, [r4, #12]
 800cc3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc40:	464a      	mov	r2, r9
 800cc42:	6921      	ldr	r1, [r4, #16]
 800cc44:	f000 fb78 	bl	800d338 <memcpy>
 800cc48:	89a3      	ldrh	r3, [r4, #12]
 800cc4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cc4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc52:	81a3      	strh	r3, [r4, #12]
 800cc54:	6126      	str	r6, [r4, #16]
 800cc56:	444e      	add	r6, r9
 800cc58:	6026      	str	r6, [r4, #0]
 800cc5a:	463e      	mov	r6, r7
 800cc5c:	6165      	str	r5, [r4, #20]
 800cc5e:	eba5 0509 	sub.w	r5, r5, r9
 800cc62:	60a5      	str	r5, [r4, #8]
 800cc64:	42be      	cmp	r6, r7
 800cc66:	d900      	bls.n	800cc6a <__ssputs_r+0x86>
 800cc68:	463e      	mov	r6, r7
 800cc6a:	4632      	mov	r2, r6
 800cc6c:	4641      	mov	r1, r8
 800cc6e:	6820      	ldr	r0, [r4, #0]
 800cc70:	f000 fb70 	bl	800d354 <memmove>
 800cc74:	68a3      	ldr	r3, [r4, #8]
 800cc76:	6822      	ldr	r2, [r4, #0]
 800cc78:	1b9b      	subs	r3, r3, r6
 800cc7a:	4432      	add	r2, r6
 800cc7c:	2000      	movs	r0, #0
 800cc7e:	60a3      	str	r3, [r4, #8]
 800cc80:	6022      	str	r2, [r4, #0]
 800cc82:	e7db      	b.n	800cc3c <__ssputs_r+0x58>
 800cc84:	462a      	mov	r2, r5
 800cc86:	f000 fb8b 	bl	800d3a0 <_realloc_r>
 800cc8a:	4606      	mov	r6, r0
 800cc8c:	2800      	cmp	r0, #0
 800cc8e:	d1e1      	bne.n	800cc54 <__ssputs_r+0x70>
 800cc90:	4650      	mov	r0, sl
 800cc92:	6921      	ldr	r1, [r4, #16]
 800cc94:	f7ff ff00 	bl	800ca98 <_free_r>
 800cc98:	e7c7      	b.n	800cc2a <__ssputs_r+0x46>
	...

0800cc9c <_svfiprintf_r>:
 800cc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cca0:	4698      	mov	r8, r3
 800cca2:	898b      	ldrh	r3, [r1, #12]
 800cca4:	4607      	mov	r7, r0
 800cca6:	061b      	lsls	r3, r3, #24
 800cca8:	460d      	mov	r5, r1
 800ccaa:	4614      	mov	r4, r2
 800ccac:	b09d      	sub	sp, #116	; 0x74
 800ccae:	d50e      	bpl.n	800ccce <_svfiprintf_r+0x32>
 800ccb0:	690b      	ldr	r3, [r1, #16]
 800ccb2:	b963      	cbnz	r3, 800ccce <_svfiprintf_r+0x32>
 800ccb4:	2140      	movs	r1, #64	; 0x40
 800ccb6:	f7ff ff3b 	bl	800cb30 <_malloc_r>
 800ccba:	6028      	str	r0, [r5, #0]
 800ccbc:	6128      	str	r0, [r5, #16]
 800ccbe:	b920      	cbnz	r0, 800ccca <_svfiprintf_r+0x2e>
 800ccc0:	230c      	movs	r3, #12
 800ccc2:	603b      	str	r3, [r7, #0]
 800ccc4:	f04f 30ff 	mov.w	r0, #4294967295
 800ccc8:	e0d1      	b.n	800ce6e <_svfiprintf_r+0x1d2>
 800ccca:	2340      	movs	r3, #64	; 0x40
 800cccc:	616b      	str	r3, [r5, #20]
 800ccce:	2300      	movs	r3, #0
 800ccd0:	9309      	str	r3, [sp, #36]	; 0x24
 800ccd2:	2320      	movs	r3, #32
 800ccd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ccd8:	2330      	movs	r3, #48	; 0x30
 800ccda:	f04f 0901 	mov.w	r9, #1
 800ccde:	f8cd 800c 	str.w	r8, [sp, #12]
 800cce2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ce88 <_svfiprintf_r+0x1ec>
 800cce6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ccea:	4623      	mov	r3, r4
 800ccec:	469a      	mov	sl, r3
 800ccee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccf2:	b10a      	cbz	r2, 800ccf8 <_svfiprintf_r+0x5c>
 800ccf4:	2a25      	cmp	r2, #37	; 0x25
 800ccf6:	d1f9      	bne.n	800ccec <_svfiprintf_r+0x50>
 800ccf8:	ebba 0b04 	subs.w	fp, sl, r4
 800ccfc:	d00b      	beq.n	800cd16 <_svfiprintf_r+0x7a>
 800ccfe:	465b      	mov	r3, fp
 800cd00:	4622      	mov	r2, r4
 800cd02:	4629      	mov	r1, r5
 800cd04:	4638      	mov	r0, r7
 800cd06:	f7ff ff6d 	bl	800cbe4 <__ssputs_r>
 800cd0a:	3001      	adds	r0, #1
 800cd0c:	f000 80aa 	beq.w	800ce64 <_svfiprintf_r+0x1c8>
 800cd10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd12:	445a      	add	r2, fp
 800cd14:	9209      	str	r2, [sp, #36]	; 0x24
 800cd16:	f89a 3000 	ldrb.w	r3, [sl]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	f000 80a2 	beq.w	800ce64 <_svfiprintf_r+0x1c8>
 800cd20:	2300      	movs	r3, #0
 800cd22:	f04f 32ff 	mov.w	r2, #4294967295
 800cd26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd2a:	f10a 0a01 	add.w	sl, sl, #1
 800cd2e:	9304      	str	r3, [sp, #16]
 800cd30:	9307      	str	r3, [sp, #28]
 800cd32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd36:	931a      	str	r3, [sp, #104]	; 0x68
 800cd38:	4654      	mov	r4, sl
 800cd3a:	2205      	movs	r2, #5
 800cd3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd40:	4851      	ldr	r0, [pc, #324]	; (800ce88 <_svfiprintf_r+0x1ec>)
 800cd42:	f000 faeb 	bl	800d31c <memchr>
 800cd46:	9a04      	ldr	r2, [sp, #16]
 800cd48:	b9d8      	cbnz	r0, 800cd82 <_svfiprintf_r+0xe6>
 800cd4a:	06d0      	lsls	r0, r2, #27
 800cd4c:	bf44      	itt	mi
 800cd4e:	2320      	movmi	r3, #32
 800cd50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd54:	0711      	lsls	r1, r2, #28
 800cd56:	bf44      	itt	mi
 800cd58:	232b      	movmi	r3, #43	; 0x2b
 800cd5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd5e:	f89a 3000 	ldrb.w	r3, [sl]
 800cd62:	2b2a      	cmp	r3, #42	; 0x2a
 800cd64:	d015      	beq.n	800cd92 <_svfiprintf_r+0xf6>
 800cd66:	4654      	mov	r4, sl
 800cd68:	2000      	movs	r0, #0
 800cd6a:	f04f 0c0a 	mov.w	ip, #10
 800cd6e:	9a07      	ldr	r2, [sp, #28]
 800cd70:	4621      	mov	r1, r4
 800cd72:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd76:	3b30      	subs	r3, #48	; 0x30
 800cd78:	2b09      	cmp	r3, #9
 800cd7a:	d94e      	bls.n	800ce1a <_svfiprintf_r+0x17e>
 800cd7c:	b1b0      	cbz	r0, 800cdac <_svfiprintf_r+0x110>
 800cd7e:	9207      	str	r2, [sp, #28]
 800cd80:	e014      	b.n	800cdac <_svfiprintf_r+0x110>
 800cd82:	eba0 0308 	sub.w	r3, r0, r8
 800cd86:	fa09 f303 	lsl.w	r3, r9, r3
 800cd8a:	4313      	orrs	r3, r2
 800cd8c:	46a2      	mov	sl, r4
 800cd8e:	9304      	str	r3, [sp, #16]
 800cd90:	e7d2      	b.n	800cd38 <_svfiprintf_r+0x9c>
 800cd92:	9b03      	ldr	r3, [sp, #12]
 800cd94:	1d19      	adds	r1, r3, #4
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	9103      	str	r1, [sp, #12]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	bfbb      	ittet	lt
 800cd9e:	425b      	neglt	r3, r3
 800cda0:	f042 0202 	orrlt.w	r2, r2, #2
 800cda4:	9307      	strge	r3, [sp, #28]
 800cda6:	9307      	strlt	r3, [sp, #28]
 800cda8:	bfb8      	it	lt
 800cdaa:	9204      	strlt	r2, [sp, #16]
 800cdac:	7823      	ldrb	r3, [r4, #0]
 800cdae:	2b2e      	cmp	r3, #46	; 0x2e
 800cdb0:	d10c      	bne.n	800cdcc <_svfiprintf_r+0x130>
 800cdb2:	7863      	ldrb	r3, [r4, #1]
 800cdb4:	2b2a      	cmp	r3, #42	; 0x2a
 800cdb6:	d135      	bne.n	800ce24 <_svfiprintf_r+0x188>
 800cdb8:	9b03      	ldr	r3, [sp, #12]
 800cdba:	3402      	adds	r4, #2
 800cdbc:	1d1a      	adds	r2, r3, #4
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	9203      	str	r2, [sp, #12]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	bfb8      	it	lt
 800cdc6:	f04f 33ff 	movlt.w	r3, #4294967295
 800cdca:	9305      	str	r3, [sp, #20]
 800cdcc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ce98 <_svfiprintf_r+0x1fc>
 800cdd0:	2203      	movs	r2, #3
 800cdd2:	4650      	mov	r0, sl
 800cdd4:	7821      	ldrb	r1, [r4, #0]
 800cdd6:	f000 faa1 	bl	800d31c <memchr>
 800cdda:	b140      	cbz	r0, 800cdee <_svfiprintf_r+0x152>
 800cddc:	2340      	movs	r3, #64	; 0x40
 800cdde:	eba0 000a 	sub.w	r0, r0, sl
 800cde2:	fa03 f000 	lsl.w	r0, r3, r0
 800cde6:	9b04      	ldr	r3, [sp, #16]
 800cde8:	3401      	adds	r4, #1
 800cdea:	4303      	orrs	r3, r0
 800cdec:	9304      	str	r3, [sp, #16]
 800cdee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdf2:	2206      	movs	r2, #6
 800cdf4:	4825      	ldr	r0, [pc, #148]	; (800ce8c <_svfiprintf_r+0x1f0>)
 800cdf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cdfa:	f000 fa8f 	bl	800d31c <memchr>
 800cdfe:	2800      	cmp	r0, #0
 800ce00:	d038      	beq.n	800ce74 <_svfiprintf_r+0x1d8>
 800ce02:	4b23      	ldr	r3, [pc, #140]	; (800ce90 <_svfiprintf_r+0x1f4>)
 800ce04:	bb1b      	cbnz	r3, 800ce4e <_svfiprintf_r+0x1b2>
 800ce06:	9b03      	ldr	r3, [sp, #12]
 800ce08:	3307      	adds	r3, #7
 800ce0a:	f023 0307 	bic.w	r3, r3, #7
 800ce0e:	3308      	adds	r3, #8
 800ce10:	9303      	str	r3, [sp, #12]
 800ce12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce14:	4433      	add	r3, r6
 800ce16:	9309      	str	r3, [sp, #36]	; 0x24
 800ce18:	e767      	b.n	800ccea <_svfiprintf_r+0x4e>
 800ce1a:	460c      	mov	r4, r1
 800ce1c:	2001      	movs	r0, #1
 800ce1e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce22:	e7a5      	b.n	800cd70 <_svfiprintf_r+0xd4>
 800ce24:	2300      	movs	r3, #0
 800ce26:	f04f 0c0a 	mov.w	ip, #10
 800ce2a:	4619      	mov	r1, r3
 800ce2c:	3401      	adds	r4, #1
 800ce2e:	9305      	str	r3, [sp, #20]
 800ce30:	4620      	mov	r0, r4
 800ce32:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce36:	3a30      	subs	r2, #48	; 0x30
 800ce38:	2a09      	cmp	r2, #9
 800ce3a:	d903      	bls.n	800ce44 <_svfiprintf_r+0x1a8>
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d0c5      	beq.n	800cdcc <_svfiprintf_r+0x130>
 800ce40:	9105      	str	r1, [sp, #20]
 800ce42:	e7c3      	b.n	800cdcc <_svfiprintf_r+0x130>
 800ce44:	4604      	mov	r4, r0
 800ce46:	2301      	movs	r3, #1
 800ce48:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce4c:	e7f0      	b.n	800ce30 <_svfiprintf_r+0x194>
 800ce4e:	ab03      	add	r3, sp, #12
 800ce50:	9300      	str	r3, [sp, #0]
 800ce52:	462a      	mov	r2, r5
 800ce54:	4638      	mov	r0, r7
 800ce56:	4b0f      	ldr	r3, [pc, #60]	; (800ce94 <_svfiprintf_r+0x1f8>)
 800ce58:	a904      	add	r1, sp, #16
 800ce5a:	f3af 8000 	nop.w
 800ce5e:	1c42      	adds	r2, r0, #1
 800ce60:	4606      	mov	r6, r0
 800ce62:	d1d6      	bne.n	800ce12 <_svfiprintf_r+0x176>
 800ce64:	89ab      	ldrh	r3, [r5, #12]
 800ce66:	065b      	lsls	r3, r3, #25
 800ce68:	f53f af2c 	bmi.w	800ccc4 <_svfiprintf_r+0x28>
 800ce6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce6e:	b01d      	add	sp, #116	; 0x74
 800ce70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce74:	ab03      	add	r3, sp, #12
 800ce76:	9300      	str	r3, [sp, #0]
 800ce78:	462a      	mov	r2, r5
 800ce7a:	4638      	mov	r0, r7
 800ce7c:	4b05      	ldr	r3, [pc, #20]	; (800ce94 <_svfiprintf_r+0x1f8>)
 800ce7e:	a904      	add	r1, sp, #16
 800ce80:	f000 f87c 	bl	800cf7c <_printf_i>
 800ce84:	e7eb      	b.n	800ce5e <_svfiprintf_r+0x1c2>
 800ce86:	bf00      	nop
 800ce88:	0800d9d0 	.word	0x0800d9d0
 800ce8c:	0800d9da 	.word	0x0800d9da
 800ce90:	00000000 	.word	0x00000000
 800ce94:	0800cbe5 	.word	0x0800cbe5
 800ce98:	0800d9d6 	.word	0x0800d9d6

0800ce9c <_printf_common>:
 800ce9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cea0:	4616      	mov	r6, r2
 800cea2:	4699      	mov	r9, r3
 800cea4:	688a      	ldr	r2, [r1, #8]
 800cea6:	690b      	ldr	r3, [r1, #16]
 800cea8:	4607      	mov	r7, r0
 800ceaa:	4293      	cmp	r3, r2
 800ceac:	bfb8      	it	lt
 800ceae:	4613      	movlt	r3, r2
 800ceb0:	6033      	str	r3, [r6, #0]
 800ceb2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ceb6:	460c      	mov	r4, r1
 800ceb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cebc:	b10a      	cbz	r2, 800cec2 <_printf_common+0x26>
 800cebe:	3301      	adds	r3, #1
 800cec0:	6033      	str	r3, [r6, #0]
 800cec2:	6823      	ldr	r3, [r4, #0]
 800cec4:	0699      	lsls	r1, r3, #26
 800cec6:	bf42      	ittt	mi
 800cec8:	6833      	ldrmi	r3, [r6, #0]
 800ceca:	3302      	addmi	r3, #2
 800cecc:	6033      	strmi	r3, [r6, #0]
 800cece:	6825      	ldr	r5, [r4, #0]
 800ced0:	f015 0506 	ands.w	r5, r5, #6
 800ced4:	d106      	bne.n	800cee4 <_printf_common+0x48>
 800ced6:	f104 0a19 	add.w	sl, r4, #25
 800ceda:	68e3      	ldr	r3, [r4, #12]
 800cedc:	6832      	ldr	r2, [r6, #0]
 800cede:	1a9b      	subs	r3, r3, r2
 800cee0:	42ab      	cmp	r3, r5
 800cee2:	dc28      	bgt.n	800cf36 <_printf_common+0x9a>
 800cee4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cee8:	1e13      	subs	r3, r2, #0
 800ceea:	6822      	ldr	r2, [r4, #0]
 800ceec:	bf18      	it	ne
 800ceee:	2301      	movne	r3, #1
 800cef0:	0692      	lsls	r2, r2, #26
 800cef2:	d42d      	bmi.n	800cf50 <_printf_common+0xb4>
 800cef4:	4649      	mov	r1, r9
 800cef6:	4638      	mov	r0, r7
 800cef8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cefc:	47c0      	blx	r8
 800cefe:	3001      	adds	r0, #1
 800cf00:	d020      	beq.n	800cf44 <_printf_common+0xa8>
 800cf02:	6823      	ldr	r3, [r4, #0]
 800cf04:	68e5      	ldr	r5, [r4, #12]
 800cf06:	f003 0306 	and.w	r3, r3, #6
 800cf0a:	2b04      	cmp	r3, #4
 800cf0c:	bf18      	it	ne
 800cf0e:	2500      	movne	r5, #0
 800cf10:	6832      	ldr	r2, [r6, #0]
 800cf12:	f04f 0600 	mov.w	r6, #0
 800cf16:	68a3      	ldr	r3, [r4, #8]
 800cf18:	bf08      	it	eq
 800cf1a:	1aad      	subeq	r5, r5, r2
 800cf1c:	6922      	ldr	r2, [r4, #16]
 800cf1e:	bf08      	it	eq
 800cf20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf24:	4293      	cmp	r3, r2
 800cf26:	bfc4      	itt	gt
 800cf28:	1a9b      	subgt	r3, r3, r2
 800cf2a:	18ed      	addgt	r5, r5, r3
 800cf2c:	341a      	adds	r4, #26
 800cf2e:	42b5      	cmp	r5, r6
 800cf30:	d11a      	bne.n	800cf68 <_printf_common+0xcc>
 800cf32:	2000      	movs	r0, #0
 800cf34:	e008      	b.n	800cf48 <_printf_common+0xac>
 800cf36:	2301      	movs	r3, #1
 800cf38:	4652      	mov	r2, sl
 800cf3a:	4649      	mov	r1, r9
 800cf3c:	4638      	mov	r0, r7
 800cf3e:	47c0      	blx	r8
 800cf40:	3001      	adds	r0, #1
 800cf42:	d103      	bne.n	800cf4c <_printf_common+0xb0>
 800cf44:	f04f 30ff 	mov.w	r0, #4294967295
 800cf48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf4c:	3501      	adds	r5, #1
 800cf4e:	e7c4      	b.n	800ceda <_printf_common+0x3e>
 800cf50:	2030      	movs	r0, #48	; 0x30
 800cf52:	18e1      	adds	r1, r4, r3
 800cf54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cf58:	1c5a      	adds	r2, r3, #1
 800cf5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cf5e:	4422      	add	r2, r4
 800cf60:	3302      	adds	r3, #2
 800cf62:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cf66:	e7c5      	b.n	800cef4 <_printf_common+0x58>
 800cf68:	2301      	movs	r3, #1
 800cf6a:	4622      	mov	r2, r4
 800cf6c:	4649      	mov	r1, r9
 800cf6e:	4638      	mov	r0, r7
 800cf70:	47c0      	blx	r8
 800cf72:	3001      	adds	r0, #1
 800cf74:	d0e6      	beq.n	800cf44 <_printf_common+0xa8>
 800cf76:	3601      	adds	r6, #1
 800cf78:	e7d9      	b.n	800cf2e <_printf_common+0x92>
	...

0800cf7c <_printf_i>:
 800cf7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf80:	460c      	mov	r4, r1
 800cf82:	7e27      	ldrb	r7, [r4, #24]
 800cf84:	4691      	mov	r9, r2
 800cf86:	2f78      	cmp	r7, #120	; 0x78
 800cf88:	4680      	mov	r8, r0
 800cf8a:	469a      	mov	sl, r3
 800cf8c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cf8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cf92:	d807      	bhi.n	800cfa4 <_printf_i+0x28>
 800cf94:	2f62      	cmp	r7, #98	; 0x62
 800cf96:	d80a      	bhi.n	800cfae <_printf_i+0x32>
 800cf98:	2f00      	cmp	r7, #0
 800cf9a:	f000 80d9 	beq.w	800d150 <_printf_i+0x1d4>
 800cf9e:	2f58      	cmp	r7, #88	; 0x58
 800cfa0:	f000 80a4 	beq.w	800d0ec <_printf_i+0x170>
 800cfa4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cfa8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cfac:	e03a      	b.n	800d024 <_printf_i+0xa8>
 800cfae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cfb2:	2b15      	cmp	r3, #21
 800cfb4:	d8f6      	bhi.n	800cfa4 <_printf_i+0x28>
 800cfb6:	a001      	add	r0, pc, #4	; (adr r0, 800cfbc <_printf_i+0x40>)
 800cfb8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800cfbc:	0800d015 	.word	0x0800d015
 800cfc0:	0800d029 	.word	0x0800d029
 800cfc4:	0800cfa5 	.word	0x0800cfa5
 800cfc8:	0800cfa5 	.word	0x0800cfa5
 800cfcc:	0800cfa5 	.word	0x0800cfa5
 800cfd0:	0800cfa5 	.word	0x0800cfa5
 800cfd4:	0800d029 	.word	0x0800d029
 800cfd8:	0800cfa5 	.word	0x0800cfa5
 800cfdc:	0800cfa5 	.word	0x0800cfa5
 800cfe0:	0800cfa5 	.word	0x0800cfa5
 800cfe4:	0800cfa5 	.word	0x0800cfa5
 800cfe8:	0800d137 	.word	0x0800d137
 800cfec:	0800d059 	.word	0x0800d059
 800cff0:	0800d119 	.word	0x0800d119
 800cff4:	0800cfa5 	.word	0x0800cfa5
 800cff8:	0800cfa5 	.word	0x0800cfa5
 800cffc:	0800d159 	.word	0x0800d159
 800d000:	0800cfa5 	.word	0x0800cfa5
 800d004:	0800d059 	.word	0x0800d059
 800d008:	0800cfa5 	.word	0x0800cfa5
 800d00c:	0800cfa5 	.word	0x0800cfa5
 800d010:	0800d121 	.word	0x0800d121
 800d014:	680b      	ldr	r3, [r1, #0]
 800d016:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d01a:	1d1a      	adds	r2, r3, #4
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	600a      	str	r2, [r1, #0]
 800d020:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d024:	2301      	movs	r3, #1
 800d026:	e0a4      	b.n	800d172 <_printf_i+0x1f6>
 800d028:	6825      	ldr	r5, [r4, #0]
 800d02a:	6808      	ldr	r0, [r1, #0]
 800d02c:	062e      	lsls	r6, r5, #24
 800d02e:	f100 0304 	add.w	r3, r0, #4
 800d032:	d50a      	bpl.n	800d04a <_printf_i+0xce>
 800d034:	6805      	ldr	r5, [r0, #0]
 800d036:	600b      	str	r3, [r1, #0]
 800d038:	2d00      	cmp	r5, #0
 800d03a:	da03      	bge.n	800d044 <_printf_i+0xc8>
 800d03c:	232d      	movs	r3, #45	; 0x2d
 800d03e:	426d      	negs	r5, r5
 800d040:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d044:	230a      	movs	r3, #10
 800d046:	485e      	ldr	r0, [pc, #376]	; (800d1c0 <_printf_i+0x244>)
 800d048:	e019      	b.n	800d07e <_printf_i+0x102>
 800d04a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d04e:	6805      	ldr	r5, [r0, #0]
 800d050:	600b      	str	r3, [r1, #0]
 800d052:	bf18      	it	ne
 800d054:	b22d      	sxthne	r5, r5
 800d056:	e7ef      	b.n	800d038 <_printf_i+0xbc>
 800d058:	680b      	ldr	r3, [r1, #0]
 800d05a:	6825      	ldr	r5, [r4, #0]
 800d05c:	1d18      	adds	r0, r3, #4
 800d05e:	6008      	str	r0, [r1, #0]
 800d060:	0628      	lsls	r0, r5, #24
 800d062:	d501      	bpl.n	800d068 <_printf_i+0xec>
 800d064:	681d      	ldr	r5, [r3, #0]
 800d066:	e002      	b.n	800d06e <_printf_i+0xf2>
 800d068:	0669      	lsls	r1, r5, #25
 800d06a:	d5fb      	bpl.n	800d064 <_printf_i+0xe8>
 800d06c:	881d      	ldrh	r5, [r3, #0]
 800d06e:	2f6f      	cmp	r7, #111	; 0x6f
 800d070:	bf0c      	ite	eq
 800d072:	2308      	moveq	r3, #8
 800d074:	230a      	movne	r3, #10
 800d076:	4852      	ldr	r0, [pc, #328]	; (800d1c0 <_printf_i+0x244>)
 800d078:	2100      	movs	r1, #0
 800d07a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d07e:	6866      	ldr	r6, [r4, #4]
 800d080:	2e00      	cmp	r6, #0
 800d082:	bfa8      	it	ge
 800d084:	6821      	ldrge	r1, [r4, #0]
 800d086:	60a6      	str	r6, [r4, #8]
 800d088:	bfa4      	itt	ge
 800d08a:	f021 0104 	bicge.w	r1, r1, #4
 800d08e:	6021      	strge	r1, [r4, #0]
 800d090:	b90d      	cbnz	r5, 800d096 <_printf_i+0x11a>
 800d092:	2e00      	cmp	r6, #0
 800d094:	d04d      	beq.n	800d132 <_printf_i+0x1b6>
 800d096:	4616      	mov	r6, r2
 800d098:	fbb5 f1f3 	udiv	r1, r5, r3
 800d09c:	fb03 5711 	mls	r7, r3, r1, r5
 800d0a0:	5dc7      	ldrb	r7, [r0, r7]
 800d0a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d0a6:	462f      	mov	r7, r5
 800d0a8:	42bb      	cmp	r3, r7
 800d0aa:	460d      	mov	r5, r1
 800d0ac:	d9f4      	bls.n	800d098 <_printf_i+0x11c>
 800d0ae:	2b08      	cmp	r3, #8
 800d0b0:	d10b      	bne.n	800d0ca <_printf_i+0x14e>
 800d0b2:	6823      	ldr	r3, [r4, #0]
 800d0b4:	07df      	lsls	r7, r3, #31
 800d0b6:	d508      	bpl.n	800d0ca <_printf_i+0x14e>
 800d0b8:	6923      	ldr	r3, [r4, #16]
 800d0ba:	6861      	ldr	r1, [r4, #4]
 800d0bc:	4299      	cmp	r1, r3
 800d0be:	bfde      	ittt	le
 800d0c0:	2330      	movle	r3, #48	; 0x30
 800d0c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d0c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d0ca:	1b92      	subs	r2, r2, r6
 800d0cc:	6122      	str	r2, [r4, #16]
 800d0ce:	464b      	mov	r3, r9
 800d0d0:	4621      	mov	r1, r4
 800d0d2:	4640      	mov	r0, r8
 800d0d4:	f8cd a000 	str.w	sl, [sp]
 800d0d8:	aa03      	add	r2, sp, #12
 800d0da:	f7ff fedf 	bl	800ce9c <_printf_common>
 800d0de:	3001      	adds	r0, #1
 800d0e0:	d14c      	bne.n	800d17c <_printf_i+0x200>
 800d0e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d0e6:	b004      	add	sp, #16
 800d0e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0ec:	4834      	ldr	r0, [pc, #208]	; (800d1c0 <_printf_i+0x244>)
 800d0ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d0f2:	680e      	ldr	r6, [r1, #0]
 800d0f4:	6823      	ldr	r3, [r4, #0]
 800d0f6:	f856 5b04 	ldr.w	r5, [r6], #4
 800d0fa:	061f      	lsls	r7, r3, #24
 800d0fc:	600e      	str	r6, [r1, #0]
 800d0fe:	d514      	bpl.n	800d12a <_printf_i+0x1ae>
 800d100:	07d9      	lsls	r1, r3, #31
 800d102:	bf44      	itt	mi
 800d104:	f043 0320 	orrmi.w	r3, r3, #32
 800d108:	6023      	strmi	r3, [r4, #0]
 800d10a:	b91d      	cbnz	r5, 800d114 <_printf_i+0x198>
 800d10c:	6823      	ldr	r3, [r4, #0]
 800d10e:	f023 0320 	bic.w	r3, r3, #32
 800d112:	6023      	str	r3, [r4, #0]
 800d114:	2310      	movs	r3, #16
 800d116:	e7af      	b.n	800d078 <_printf_i+0xfc>
 800d118:	6823      	ldr	r3, [r4, #0]
 800d11a:	f043 0320 	orr.w	r3, r3, #32
 800d11e:	6023      	str	r3, [r4, #0]
 800d120:	2378      	movs	r3, #120	; 0x78
 800d122:	4828      	ldr	r0, [pc, #160]	; (800d1c4 <_printf_i+0x248>)
 800d124:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d128:	e7e3      	b.n	800d0f2 <_printf_i+0x176>
 800d12a:	065e      	lsls	r6, r3, #25
 800d12c:	bf48      	it	mi
 800d12e:	b2ad      	uxthmi	r5, r5
 800d130:	e7e6      	b.n	800d100 <_printf_i+0x184>
 800d132:	4616      	mov	r6, r2
 800d134:	e7bb      	b.n	800d0ae <_printf_i+0x132>
 800d136:	680b      	ldr	r3, [r1, #0]
 800d138:	6826      	ldr	r6, [r4, #0]
 800d13a:	1d1d      	adds	r5, r3, #4
 800d13c:	6960      	ldr	r0, [r4, #20]
 800d13e:	600d      	str	r5, [r1, #0]
 800d140:	0635      	lsls	r5, r6, #24
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	d501      	bpl.n	800d14a <_printf_i+0x1ce>
 800d146:	6018      	str	r0, [r3, #0]
 800d148:	e002      	b.n	800d150 <_printf_i+0x1d4>
 800d14a:	0671      	lsls	r1, r6, #25
 800d14c:	d5fb      	bpl.n	800d146 <_printf_i+0x1ca>
 800d14e:	8018      	strh	r0, [r3, #0]
 800d150:	2300      	movs	r3, #0
 800d152:	4616      	mov	r6, r2
 800d154:	6123      	str	r3, [r4, #16]
 800d156:	e7ba      	b.n	800d0ce <_printf_i+0x152>
 800d158:	680b      	ldr	r3, [r1, #0]
 800d15a:	1d1a      	adds	r2, r3, #4
 800d15c:	600a      	str	r2, [r1, #0]
 800d15e:	681e      	ldr	r6, [r3, #0]
 800d160:	2100      	movs	r1, #0
 800d162:	4630      	mov	r0, r6
 800d164:	6862      	ldr	r2, [r4, #4]
 800d166:	f000 f8d9 	bl	800d31c <memchr>
 800d16a:	b108      	cbz	r0, 800d170 <_printf_i+0x1f4>
 800d16c:	1b80      	subs	r0, r0, r6
 800d16e:	6060      	str	r0, [r4, #4]
 800d170:	6863      	ldr	r3, [r4, #4]
 800d172:	6123      	str	r3, [r4, #16]
 800d174:	2300      	movs	r3, #0
 800d176:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d17a:	e7a8      	b.n	800d0ce <_printf_i+0x152>
 800d17c:	4632      	mov	r2, r6
 800d17e:	4649      	mov	r1, r9
 800d180:	4640      	mov	r0, r8
 800d182:	6923      	ldr	r3, [r4, #16]
 800d184:	47d0      	blx	sl
 800d186:	3001      	adds	r0, #1
 800d188:	d0ab      	beq.n	800d0e2 <_printf_i+0x166>
 800d18a:	6823      	ldr	r3, [r4, #0]
 800d18c:	079b      	lsls	r3, r3, #30
 800d18e:	d413      	bmi.n	800d1b8 <_printf_i+0x23c>
 800d190:	68e0      	ldr	r0, [r4, #12]
 800d192:	9b03      	ldr	r3, [sp, #12]
 800d194:	4298      	cmp	r0, r3
 800d196:	bfb8      	it	lt
 800d198:	4618      	movlt	r0, r3
 800d19a:	e7a4      	b.n	800d0e6 <_printf_i+0x16a>
 800d19c:	2301      	movs	r3, #1
 800d19e:	4632      	mov	r2, r6
 800d1a0:	4649      	mov	r1, r9
 800d1a2:	4640      	mov	r0, r8
 800d1a4:	47d0      	blx	sl
 800d1a6:	3001      	adds	r0, #1
 800d1a8:	d09b      	beq.n	800d0e2 <_printf_i+0x166>
 800d1aa:	3501      	adds	r5, #1
 800d1ac:	68e3      	ldr	r3, [r4, #12]
 800d1ae:	9903      	ldr	r1, [sp, #12]
 800d1b0:	1a5b      	subs	r3, r3, r1
 800d1b2:	42ab      	cmp	r3, r5
 800d1b4:	dcf2      	bgt.n	800d19c <_printf_i+0x220>
 800d1b6:	e7eb      	b.n	800d190 <_printf_i+0x214>
 800d1b8:	2500      	movs	r5, #0
 800d1ba:	f104 0619 	add.w	r6, r4, #25
 800d1be:	e7f5      	b.n	800d1ac <_printf_i+0x230>
 800d1c0:	0800d9e1 	.word	0x0800d9e1
 800d1c4:	0800d9f2 	.word	0x0800d9f2

0800d1c8 <_sbrk_r>:
 800d1c8:	b538      	push	{r3, r4, r5, lr}
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	4d05      	ldr	r5, [pc, #20]	; (800d1e4 <_sbrk_r+0x1c>)
 800d1ce:	4604      	mov	r4, r0
 800d1d0:	4608      	mov	r0, r1
 800d1d2:	602b      	str	r3, [r5, #0]
 800d1d4:	f7f6 f948 	bl	8003468 <_sbrk>
 800d1d8:	1c43      	adds	r3, r0, #1
 800d1da:	d102      	bne.n	800d1e2 <_sbrk_r+0x1a>
 800d1dc:	682b      	ldr	r3, [r5, #0]
 800d1de:	b103      	cbz	r3, 800d1e2 <_sbrk_r+0x1a>
 800d1e0:	6023      	str	r3, [r4, #0]
 800d1e2:	bd38      	pop	{r3, r4, r5, pc}
 800d1e4:	20001730 	.word	0x20001730

0800d1e8 <__sread>:
 800d1e8:	b510      	push	{r4, lr}
 800d1ea:	460c      	mov	r4, r1
 800d1ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1f0:	f000 f8fc 	bl	800d3ec <_read_r>
 800d1f4:	2800      	cmp	r0, #0
 800d1f6:	bfab      	itete	ge
 800d1f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d1fa:	89a3      	ldrhlt	r3, [r4, #12]
 800d1fc:	181b      	addge	r3, r3, r0
 800d1fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d202:	bfac      	ite	ge
 800d204:	6563      	strge	r3, [r4, #84]	; 0x54
 800d206:	81a3      	strhlt	r3, [r4, #12]
 800d208:	bd10      	pop	{r4, pc}

0800d20a <__swrite>:
 800d20a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d20e:	461f      	mov	r7, r3
 800d210:	898b      	ldrh	r3, [r1, #12]
 800d212:	4605      	mov	r5, r0
 800d214:	05db      	lsls	r3, r3, #23
 800d216:	460c      	mov	r4, r1
 800d218:	4616      	mov	r6, r2
 800d21a:	d505      	bpl.n	800d228 <__swrite+0x1e>
 800d21c:	2302      	movs	r3, #2
 800d21e:	2200      	movs	r2, #0
 800d220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d224:	f000 f868 	bl	800d2f8 <_lseek_r>
 800d228:	89a3      	ldrh	r3, [r4, #12]
 800d22a:	4632      	mov	r2, r6
 800d22c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d230:	81a3      	strh	r3, [r4, #12]
 800d232:	4628      	mov	r0, r5
 800d234:	463b      	mov	r3, r7
 800d236:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d23a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d23e:	f000 b817 	b.w	800d270 <_write_r>

0800d242 <__sseek>:
 800d242:	b510      	push	{r4, lr}
 800d244:	460c      	mov	r4, r1
 800d246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d24a:	f000 f855 	bl	800d2f8 <_lseek_r>
 800d24e:	1c43      	adds	r3, r0, #1
 800d250:	89a3      	ldrh	r3, [r4, #12]
 800d252:	bf15      	itete	ne
 800d254:	6560      	strne	r0, [r4, #84]	; 0x54
 800d256:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d25a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d25e:	81a3      	strheq	r3, [r4, #12]
 800d260:	bf18      	it	ne
 800d262:	81a3      	strhne	r3, [r4, #12]
 800d264:	bd10      	pop	{r4, pc}

0800d266 <__sclose>:
 800d266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d26a:	f000 b813 	b.w	800d294 <_close_r>
	...

0800d270 <_write_r>:
 800d270:	b538      	push	{r3, r4, r5, lr}
 800d272:	4604      	mov	r4, r0
 800d274:	4608      	mov	r0, r1
 800d276:	4611      	mov	r1, r2
 800d278:	2200      	movs	r2, #0
 800d27a:	4d05      	ldr	r5, [pc, #20]	; (800d290 <_write_r+0x20>)
 800d27c:	602a      	str	r2, [r5, #0]
 800d27e:	461a      	mov	r2, r3
 800d280:	f7f6 f8a5 	bl	80033ce <_write>
 800d284:	1c43      	adds	r3, r0, #1
 800d286:	d102      	bne.n	800d28e <_write_r+0x1e>
 800d288:	682b      	ldr	r3, [r5, #0]
 800d28a:	b103      	cbz	r3, 800d28e <_write_r+0x1e>
 800d28c:	6023      	str	r3, [r4, #0]
 800d28e:	bd38      	pop	{r3, r4, r5, pc}
 800d290:	20001730 	.word	0x20001730

0800d294 <_close_r>:
 800d294:	b538      	push	{r3, r4, r5, lr}
 800d296:	2300      	movs	r3, #0
 800d298:	4d05      	ldr	r5, [pc, #20]	; (800d2b0 <_close_r+0x1c>)
 800d29a:	4604      	mov	r4, r0
 800d29c:	4608      	mov	r0, r1
 800d29e:	602b      	str	r3, [r5, #0]
 800d2a0:	f7f6 f8b1 	bl	8003406 <_close>
 800d2a4:	1c43      	adds	r3, r0, #1
 800d2a6:	d102      	bne.n	800d2ae <_close_r+0x1a>
 800d2a8:	682b      	ldr	r3, [r5, #0]
 800d2aa:	b103      	cbz	r3, 800d2ae <_close_r+0x1a>
 800d2ac:	6023      	str	r3, [r4, #0]
 800d2ae:	bd38      	pop	{r3, r4, r5, pc}
 800d2b0:	20001730 	.word	0x20001730

0800d2b4 <_fstat_r>:
 800d2b4:	b538      	push	{r3, r4, r5, lr}
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	4d06      	ldr	r5, [pc, #24]	; (800d2d4 <_fstat_r+0x20>)
 800d2ba:	4604      	mov	r4, r0
 800d2bc:	4608      	mov	r0, r1
 800d2be:	4611      	mov	r1, r2
 800d2c0:	602b      	str	r3, [r5, #0]
 800d2c2:	f7f6 f8ab 	bl	800341c <_fstat>
 800d2c6:	1c43      	adds	r3, r0, #1
 800d2c8:	d102      	bne.n	800d2d0 <_fstat_r+0x1c>
 800d2ca:	682b      	ldr	r3, [r5, #0]
 800d2cc:	b103      	cbz	r3, 800d2d0 <_fstat_r+0x1c>
 800d2ce:	6023      	str	r3, [r4, #0]
 800d2d0:	bd38      	pop	{r3, r4, r5, pc}
 800d2d2:	bf00      	nop
 800d2d4:	20001730 	.word	0x20001730

0800d2d8 <_isatty_r>:
 800d2d8:	b538      	push	{r3, r4, r5, lr}
 800d2da:	2300      	movs	r3, #0
 800d2dc:	4d05      	ldr	r5, [pc, #20]	; (800d2f4 <_isatty_r+0x1c>)
 800d2de:	4604      	mov	r4, r0
 800d2e0:	4608      	mov	r0, r1
 800d2e2:	602b      	str	r3, [r5, #0]
 800d2e4:	f7f6 f8a9 	bl	800343a <_isatty>
 800d2e8:	1c43      	adds	r3, r0, #1
 800d2ea:	d102      	bne.n	800d2f2 <_isatty_r+0x1a>
 800d2ec:	682b      	ldr	r3, [r5, #0]
 800d2ee:	b103      	cbz	r3, 800d2f2 <_isatty_r+0x1a>
 800d2f0:	6023      	str	r3, [r4, #0]
 800d2f2:	bd38      	pop	{r3, r4, r5, pc}
 800d2f4:	20001730 	.word	0x20001730

0800d2f8 <_lseek_r>:
 800d2f8:	b538      	push	{r3, r4, r5, lr}
 800d2fa:	4604      	mov	r4, r0
 800d2fc:	4608      	mov	r0, r1
 800d2fe:	4611      	mov	r1, r2
 800d300:	2200      	movs	r2, #0
 800d302:	4d05      	ldr	r5, [pc, #20]	; (800d318 <_lseek_r+0x20>)
 800d304:	602a      	str	r2, [r5, #0]
 800d306:	461a      	mov	r2, r3
 800d308:	f7f6 f8a1 	bl	800344e <_lseek>
 800d30c:	1c43      	adds	r3, r0, #1
 800d30e:	d102      	bne.n	800d316 <_lseek_r+0x1e>
 800d310:	682b      	ldr	r3, [r5, #0]
 800d312:	b103      	cbz	r3, 800d316 <_lseek_r+0x1e>
 800d314:	6023      	str	r3, [r4, #0]
 800d316:	bd38      	pop	{r3, r4, r5, pc}
 800d318:	20001730 	.word	0x20001730

0800d31c <memchr>:
 800d31c:	4603      	mov	r3, r0
 800d31e:	b510      	push	{r4, lr}
 800d320:	b2c9      	uxtb	r1, r1
 800d322:	4402      	add	r2, r0
 800d324:	4293      	cmp	r3, r2
 800d326:	4618      	mov	r0, r3
 800d328:	d101      	bne.n	800d32e <memchr+0x12>
 800d32a:	2000      	movs	r0, #0
 800d32c:	e003      	b.n	800d336 <memchr+0x1a>
 800d32e:	7804      	ldrb	r4, [r0, #0]
 800d330:	3301      	adds	r3, #1
 800d332:	428c      	cmp	r4, r1
 800d334:	d1f6      	bne.n	800d324 <memchr+0x8>
 800d336:	bd10      	pop	{r4, pc}

0800d338 <memcpy>:
 800d338:	440a      	add	r2, r1
 800d33a:	4291      	cmp	r1, r2
 800d33c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d340:	d100      	bne.n	800d344 <memcpy+0xc>
 800d342:	4770      	bx	lr
 800d344:	b510      	push	{r4, lr}
 800d346:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d34a:	4291      	cmp	r1, r2
 800d34c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d350:	d1f9      	bne.n	800d346 <memcpy+0xe>
 800d352:	bd10      	pop	{r4, pc}

0800d354 <memmove>:
 800d354:	4288      	cmp	r0, r1
 800d356:	b510      	push	{r4, lr}
 800d358:	eb01 0402 	add.w	r4, r1, r2
 800d35c:	d902      	bls.n	800d364 <memmove+0x10>
 800d35e:	4284      	cmp	r4, r0
 800d360:	4623      	mov	r3, r4
 800d362:	d807      	bhi.n	800d374 <memmove+0x20>
 800d364:	1e43      	subs	r3, r0, #1
 800d366:	42a1      	cmp	r1, r4
 800d368:	d008      	beq.n	800d37c <memmove+0x28>
 800d36a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d36e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d372:	e7f8      	b.n	800d366 <memmove+0x12>
 800d374:	4601      	mov	r1, r0
 800d376:	4402      	add	r2, r0
 800d378:	428a      	cmp	r2, r1
 800d37a:	d100      	bne.n	800d37e <memmove+0x2a>
 800d37c:	bd10      	pop	{r4, pc}
 800d37e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d382:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d386:	e7f7      	b.n	800d378 <memmove+0x24>

0800d388 <__malloc_lock>:
 800d388:	4801      	ldr	r0, [pc, #4]	; (800d390 <__malloc_lock+0x8>)
 800d38a:	f7ff bb1f 	b.w	800c9cc <__retarget_lock_acquire_recursive>
 800d38e:	bf00      	nop
 800d390:	20001728 	.word	0x20001728

0800d394 <__malloc_unlock>:
 800d394:	4801      	ldr	r0, [pc, #4]	; (800d39c <__malloc_unlock+0x8>)
 800d396:	f7ff bb1a 	b.w	800c9ce <__retarget_lock_release_recursive>
 800d39a:	bf00      	nop
 800d39c:	20001728 	.word	0x20001728

0800d3a0 <_realloc_r>:
 800d3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3a2:	4607      	mov	r7, r0
 800d3a4:	4614      	mov	r4, r2
 800d3a6:	460e      	mov	r6, r1
 800d3a8:	b921      	cbnz	r1, 800d3b4 <_realloc_r+0x14>
 800d3aa:	4611      	mov	r1, r2
 800d3ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d3b0:	f7ff bbbe 	b.w	800cb30 <_malloc_r>
 800d3b4:	b922      	cbnz	r2, 800d3c0 <_realloc_r+0x20>
 800d3b6:	f7ff fb6f 	bl	800ca98 <_free_r>
 800d3ba:	4625      	mov	r5, r4
 800d3bc:	4628      	mov	r0, r5
 800d3be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3c0:	f000 f826 	bl	800d410 <_malloc_usable_size_r>
 800d3c4:	42a0      	cmp	r0, r4
 800d3c6:	d20f      	bcs.n	800d3e8 <_realloc_r+0x48>
 800d3c8:	4621      	mov	r1, r4
 800d3ca:	4638      	mov	r0, r7
 800d3cc:	f7ff fbb0 	bl	800cb30 <_malloc_r>
 800d3d0:	4605      	mov	r5, r0
 800d3d2:	2800      	cmp	r0, #0
 800d3d4:	d0f2      	beq.n	800d3bc <_realloc_r+0x1c>
 800d3d6:	4631      	mov	r1, r6
 800d3d8:	4622      	mov	r2, r4
 800d3da:	f7ff ffad 	bl	800d338 <memcpy>
 800d3de:	4631      	mov	r1, r6
 800d3e0:	4638      	mov	r0, r7
 800d3e2:	f7ff fb59 	bl	800ca98 <_free_r>
 800d3e6:	e7e9      	b.n	800d3bc <_realloc_r+0x1c>
 800d3e8:	4635      	mov	r5, r6
 800d3ea:	e7e7      	b.n	800d3bc <_realloc_r+0x1c>

0800d3ec <_read_r>:
 800d3ec:	b538      	push	{r3, r4, r5, lr}
 800d3ee:	4604      	mov	r4, r0
 800d3f0:	4608      	mov	r0, r1
 800d3f2:	4611      	mov	r1, r2
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	4d05      	ldr	r5, [pc, #20]	; (800d40c <_read_r+0x20>)
 800d3f8:	602a      	str	r2, [r5, #0]
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	f7f5 ffca 	bl	8003394 <_read>
 800d400:	1c43      	adds	r3, r0, #1
 800d402:	d102      	bne.n	800d40a <_read_r+0x1e>
 800d404:	682b      	ldr	r3, [r5, #0]
 800d406:	b103      	cbz	r3, 800d40a <_read_r+0x1e>
 800d408:	6023      	str	r3, [r4, #0]
 800d40a:	bd38      	pop	{r3, r4, r5, pc}
 800d40c:	20001730 	.word	0x20001730

0800d410 <_malloc_usable_size_r>:
 800d410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d414:	1f18      	subs	r0, r3, #4
 800d416:	2b00      	cmp	r3, #0
 800d418:	bfbc      	itt	lt
 800d41a:	580b      	ldrlt	r3, [r1, r0]
 800d41c:	18c0      	addlt	r0, r0, r3
 800d41e:	4770      	bx	lr

0800d420 <_init>:
 800d420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d422:	bf00      	nop
 800d424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d426:	bc08      	pop	{r3}
 800d428:	469e      	mov	lr, r3
 800d42a:	4770      	bx	lr

0800d42c <_fini>:
 800d42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d42e:	bf00      	nop
 800d430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d432:	bc08      	pop	{r3}
 800d434:	469e      	mov	lr, r3
 800d436:	4770      	bx	lr
