
carrito.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae14  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  0800af24  0800af24  0001af24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0a8  0800b0a8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b0a8  0800b0a8  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b0a8  0800b0a8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0800b0a8  0800b0a8  0001b0a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b0b8  0800b0b8  0001b0b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b0bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014c8  200001e4  0800b2a0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016ac  0800b2a0  000216ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027039  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000536b  00000000  00000000  00047246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001678  00000000  00000000  0004c5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d8  00000000  00000000  0004dc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000091d2  00000000  00000000  0004f108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e52d  00000000  00000000  000582da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098e80  00000000  00000000  00076807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010f687  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006554  00000000  00000000  0010f6dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800af0c 	.word	0x0800af0c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800af0c 	.word	0x0800af0c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__gedf2>:
 80004d8:	f04f 3cff 	mov.w	ip, #4294967295
 80004dc:	e006      	b.n	80004ec <__cmpdf2+0x4>
 80004de:	bf00      	nop

080004e0 <__ledf2>:
 80004e0:	f04f 0c01 	mov.w	ip, #1
 80004e4:	e002      	b.n	80004ec <__cmpdf2+0x4>
 80004e6:	bf00      	nop

080004e8 <__cmpdf2>:
 80004e8:	f04f 0c01 	mov.w	ip, #1
 80004ec:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004fc:	bf18      	it	ne
 80004fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000502:	d01b      	beq.n	800053c <__cmpdf2+0x54>
 8000504:	b001      	add	sp, #4
 8000506:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800050a:	bf0c      	ite	eq
 800050c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000510:	ea91 0f03 	teqne	r1, r3
 8000514:	bf02      	ittt	eq
 8000516:	ea90 0f02 	teqeq	r0, r2
 800051a:	2000      	moveq	r0, #0
 800051c:	4770      	bxeq	lr
 800051e:	f110 0f00 	cmn.w	r0, #0
 8000522:	ea91 0f03 	teq	r1, r3
 8000526:	bf58      	it	pl
 8000528:	4299      	cmppl	r1, r3
 800052a:	bf08      	it	eq
 800052c:	4290      	cmpeq	r0, r2
 800052e:	bf2c      	ite	cs
 8000530:	17d8      	asrcs	r0, r3, #31
 8000532:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000536:	f040 0001 	orr.w	r0, r0, #1
 800053a:	4770      	bx	lr
 800053c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d102      	bne.n	800054c <__cmpdf2+0x64>
 8000546:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800054a:	d107      	bne.n	800055c <__cmpdf2+0x74>
 800054c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000550:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000554:	d1d6      	bne.n	8000504 <__cmpdf2+0x1c>
 8000556:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800055a:	d0d3      	beq.n	8000504 <__cmpdf2+0x1c>
 800055c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <__aeabi_cdrcmple>:
 8000564:	4684      	mov	ip, r0
 8000566:	4610      	mov	r0, r2
 8000568:	4662      	mov	r2, ip
 800056a:	468c      	mov	ip, r1
 800056c:	4619      	mov	r1, r3
 800056e:	4663      	mov	r3, ip
 8000570:	e000      	b.n	8000574 <__aeabi_cdcmpeq>
 8000572:	bf00      	nop

08000574 <__aeabi_cdcmpeq>:
 8000574:	b501      	push	{r0, lr}
 8000576:	f7ff ffb7 	bl	80004e8 <__cmpdf2>
 800057a:	2800      	cmp	r0, #0
 800057c:	bf48      	it	mi
 800057e:	f110 0f00 	cmnmi.w	r0, #0
 8000582:	bd01      	pop	{r0, pc}

08000584 <__aeabi_dcmpeq>:
 8000584:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000588:	f7ff fff4 	bl	8000574 <__aeabi_cdcmpeq>
 800058c:	bf0c      	ite	eq
 800058e:	2001      	moveq	r0, #1
 8000590:	2000      	movne	r0, #0
 8000592:	f85d fb08 	ldr.w	pc, [sp], #8
 8000596:	bf00      	nop

08000598 <__aeabi_dcmplt>:
 8000598:	f84d ed08 	str.w	lr, [sp, #-8]!
 800059c:	f7ff ffea 	bl	8000574 <__aeabi_cdcmpeq>
 80005a0:	bf34      	ite	cc
 80005a2:	2001      	movcc	r0, #1
 80005a4:	2000      	movcs	r0, #0
 80005a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005aa:	bf00      	nop

080005ac <__aeabi_dcmple>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff ffe0 	bl	8000574 <__aeabi_cdcmpeq>
 80005b4:	bf94      	ite	ls
 80005b6:	2001      	movls	r0, #1
 80005b8:	2000      	movhi	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmpge>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffce 	bl	8000564 <__aeabi_cdrcmple>
 80005c8:	bf94      	ite	ls
 80005ca:	2001      	movls	r0, #1
 80005cc:	2000      	movhi	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmpgt>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffc4 	bl	8000564 <__aeabi_cdrcmple>
 80005dc:	bf34      	ite	cc
 80005de:	2001      	movcc	r0, #1
 80005e0:	2000      	movcs	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_frsub>:
 80005e8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80005ec:	e002      	b.n	80005f4 <__addsf3>
 80005ee:	bf00      	nop

080005f0 <__aeabi_fsub>:
 80005f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080005f4 <__addsf3>:
 80005f4:	0042      	lsls	r2, r0, #1
 80005f6:	bf1f      	itttt	ne
 80005f8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80005fc:	ea92 0f03 	teqne	r2, r3
 8000600:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000604:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000608:	d06a      	beq.n	80006e0 <__addsf3+0xec>
 800060a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800060e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000612:	bfc1      	itttt	gt
 8000614:	18d2      	addgt	r2, r2, r3
 8000616:	4041      	eorgt	r1, r0
 8000618:	4048      	eorgt	r0, r1
 800061a:	4041      	eorgt	r1, r0
 800061c:	bfb8      	it	lt
 800061e:	425b      	neglt	r3, r3
 8000620:	2b19      	cmp	r3, #25
 8000622:	bf88      	it	hi
 8000624:	4770      	bxhi	lr
 8000626:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800062a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800062e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000632:	bf18      	it	ne
 8000634:	4240      	negne	r0, r0
 8000636:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800063a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800063e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000642:	bf18      	it	ne
 8000644:	4249      	negne	r1, r1
 8000646:	ea92 0f03 	teq	r2, r3
 800064a:	d03f      	beq.n	80006cc <__addsf3+0xd8>
 800064c:	f1a2 0201 	sub.w	r2, r2, #1
 8000650:	fa41 fc03 	asr.w	ip, r1, r3
 8000654:	eb10 000c 	adds.w	r0, r0, ip
 8000658:	f1c3 0320 	rsb	r3, r3, #32
 800065c:	fa01 f103 	lsl.w	r1, r1, r3
 8000660:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000664:	d502      	bpl.n	800066c <__addsf3+0x78>
 8000666:	4249      	negs	r1, r1
 8000668:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800066c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000670:	d313      	bcc.n	800069a <__addsf3+0xa6>
 8000672:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000676:	d306      	bcc.n	8000686 <__addsf3+0x92>
 8000678:	0840      	lsrs	r0, r0, #1
 800067a:	ea4f 0131 	mov.w	r1, r1, rrx
 800067e:	f102 0201 	add.w	r2, r2, #1
 8000682:	2afe      	cmp	r2, #254	; 0xfe
 8000684:	d251      	bcs.n	800072a <__addsf3+0x136>
 8000686:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800068a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800068e:	bf08      	it	eq
 8000690:	f020 0001 	biceq.w	r0, r0, #1
 8000694:	ea40 0003 	orr.w	r0, r0, r3
 8000698:	4770      	bx	lr
 800069a:	0049      	lsls	r1, r1, #1
 800069c:	eb40 0000 	adc.w	r0, r0, r0
 80006a0:	3a01      	subs	r2, #1
 80006a2:	bf28      	it	cs
 80006a4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80006a8:	d2ed      	bcs.n	8000686 <__addsf3+0x92>
 80006aa:	fab0 fc80 	clz	ip, r0
 80006ae:	f1ac 0c08 	sub.w	ip, ip, #8
 80006b2:	ebb2 020c 	subs.w	r2, r2, ip
 80006b6:	fa00 f00c 	lsl.w	r0, r0, ip
 80006ba:	bfaa      	itet	ge
 80006bc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80006c0:	4252      	neglt	r2, r2
 80006c2:	4318      	orrge	r0, r3
 80006c4:	bfbc      	itt	lt
 80006c6:	40d0      	lsrlt	r0, r2
 80006c8:	4318      	orrlt	r0, r3
 80006ca:	4770      	bx	lr
 80006cc:	f092 0f00 	teq	r2, #0
 80006d0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80006d4:	bf06      	itte	eq
 80006d6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80006da:	3201      	addeq	r2, #1
 80006dc:	3b01      	subne	r3, #1
 80006de:	e7b5      	b.n	800064c <__addsf3+0x58>
 80006e0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006e4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006e8:	bf18      	it	ne
 80006ea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006ee:	d021      	beq.n	8000734 <__addsf3+0x140>
 80006f0:	ea92 0f03 	teq	r2, r3
 80006f4:	d004      	beq.n	8000700 <__addsf3+0x10c>
 80006f6:	f092 0f00 	teq	r2, #0
 80006fa:	bf08      	it	eq
 80006fc:	4608      	moveq	r0, r1
 80006fe:	4770      	bx	lr
 8000700:	ea90 0f01 	teq	r0, r1
 8000704:	bf1c      	itt	ne
 8000706:	2000      	movne	r0, #0
 8000708:	4770      	bxne	lr
 800070a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800070e:	d104      	bne.n	800071a <__addsf3+0x126>
 8000710:	0040      	lsls	r0, r0, #1
 8000712:	bf28      	it	cs
 8000714:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000718:	4770      	bx	lr
 800071a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800071e:	bf3c      	itt	cc
 8000720:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000724:	4770      	bxcc	lr
 8000726:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800072a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800072e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000732:	4770      	bx	lr
 8000734:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000738:	bf16      	itet	ne
 800073a:	4608      	movne	r0, r1
 800073c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000740:	4601      	movne	r1, r0
 8000742:	0242      	lsls	r2, r0, #9
 8000744:	bf06      	itte	eq
 8000746:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800074a:	ea90 0f01 	teqeq	r0, r1
 800074e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000752:	4770      	bx	lr

08000754 <__aeabi_ui2f>:
 8000754:	f04f 0300 	mov.w	r3, #0
 8000758:	e004      	b.n	8000764 <__aeabi_i2f+0x8>
 800075a:	bf00      	nop

0800075c <__aeabi_i2f>:
 800075c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000760:	bf48      	it	mi
 8000762:	4240      	negmi	r0, r0
 8000764:	ea5f 0c00 	movs.w	ip, r0
 8000768:	bf08      	it	eq
 800076a:	4770      	bxeq	lr
 800076c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000770:	4601      	mov	r1, r0
 8000772:	f04f 0000 	mov.w	r0, #0
 8000776:	e01c      	b.n	80007b2 <__aeabi_l2f+0x2a>

08000778 <__aeabi_ul2f>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	f04f 0300 	mov.w	r3, #0
 8000784:	e00a      	b.n	800079c <__aeabi_l2f+0x14>
 8000786:	bf00      	nop

08000788 <__aeabi_l2f>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000794:	d502      	bpl.n	800079c <__aeabi_l2f+0x14>
 8000796:	4240      	negs	r0, r0
 8000798:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079c:	ea5f 0c01 	movs.w	ip, r1
 80007a0:	bf02      	ittt	eq
 80007a2:	4684      	moveq	ip, r0
 80007a4:	4601      	moveq	r1, r0
 80007a6:	2000      	moveq	r0, #0
 80007a8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80007ac:	bf08      	it	eq
 80007ae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80007b2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007b6:	fabc f28c 	clz	r2, ip
 80007ba:	3a08      	subs	r2, #8
 80007bc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80007c0:	db10      	blt.n	80007e4 <__aeabi_l2f+0x5c>
 80007c2:	fa01 fc02 	lsl.w	ip, r1, r2
 80007c6:	4463      	add	r3, ip
 80007c8:	fa00 fc02 	lsl.w	ip, r0, r2
 80007cc:	f1c2 0220 	rsb	r2, r2, #32
 80007d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80007d4:	fa20 f202 	lsr.w	r2, r0, r2
 80007d8:	eb43 0002 	adc.w	r0, r3, r2
 80007dc:	bf08      	it	eq
 80007de:	f020 0001 	biceq.w	r0, r0, #1
 80007e2:	4770      	bx	lr
 80007e4:	f102 0220 	add.w	r2, r2, #32
 80007e8:	fa01 fc02 	lsl.w	ip, r1, r2
 80007ec:	f1c2 0220 	rsb	r2, r2, #32
 80007f0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80007f4:	fa21 f202 	lsr.w	r2, r1, r2
 80007f8:	eb43 0002 	adc.w	r0, r3, r2
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000802:	4770      	bx	lr

08000804 <__aeabi_fmul>:
 8000804:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000808:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800080c:	bf1e      	ittt	ne
 800080e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000812:	ea92 0f0c 	teqne	r2, ip
 8000816:	ea93 0f0c 	teqne	r3, ip
 800081a:	d06f      	beq.n	80008fc <__aeabi_fmul+0xf8>
 800081c:	441a      	add	r2, r3
 800081e:	ea80 0c01 	eor.w	ip, r0, r1
 8000822:	0240      	lsls	r0, r0, #9
 8000824:	bf18      	it	ne
 8000826:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800082a:	d01e      	beq.n	800086a <__aeabi_fmul+0x66>
 800082c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000830:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000834:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000838:	fba0 3101 	umull	r3, r1, r0, r1
 800083c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000840:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000844:	bf3e      	ittt	cc
 8000846:	0049      	lslcc	r1, r1, #1
 8000848:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800084c:	005b      	lslcc	r3, r3, #1
 800084e:	ea40 0001 	orr.w	r0, r0, r1
 8000852:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000856:	2afd      	cmp	r2, #253	; 0xfd
 8000858:	d81d      	bhi.n	8000896 <__aeabi_fmul+0x92>
 800085a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800085e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000862:	bf08      	it	eq
 8000864:	f020 0001 	biceq.w	r0, r0, #1
 8000868:	4770      	bx	lr
 800086a:	f090 0f00 	teq	r0, #0
 800086e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000872:	bf08      	it	eq
 8000874:	0249      	lsleq	r1, r1, #9
 8000876:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800087a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800087e:	3a7f      	subs	r2, #127	; 0x7f
 8000880:	bfc2      	ittt	gt
 8000882:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000886:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800088a:	4770      	bxgt	lr
 800088c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000890:	f04f 0300 	mov.w	r3, #0
 8000894:	3a01      	subs	r2, #1
 8000896:	dc5d      	bgt.n	8000954 <__aeabi_fmul+0x150>
 8000898:	f112 0f19 	cmn.w	r2, #25
 800089c:	bfdc      	itt	le
 800089e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80008a2:	4770      	bxle	lr
 80008a4:	f1c2 0200 	rsb	r2, r2, #0
 80008a8:	0041      	lsls	r1, r0, #1
 80008aa:	fa21 f102 	lsr.w	r1, r1, r2
 80008ae:	f1c2 0220 	rsb	r2, r2, #32
 80008b2:	fa00 fc02 	lsl.w	ip, r0, r2
 80008b6:	ea5f 0031 	movs.w	r0, r1, rrx
 80008ba:	f140 0000 	adc.w	r0, r0, #0
 80008be:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80008c2:	bf08      	it	eq
 80008c4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008c8:	4770      	bx	lr
 80008ca:	f092 0f00 	teq	r2, #0
 80008ce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80008d2:	bf02      	ittt	eq
 80008d4:	0040      	lsleq	r0, r0, #1
 80008d6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80008da:	3a01      	subeq	r2, #1
 80008dc:	d0f9      	beq.n	80008d2 <__aeabi_fmul+0xce>
 80008de:	ea40 000c 	orr.w	r0, r0, ip
 80008e2:	f093 0f00 	teq	r3, #0
 80008e6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008ea:	bf02      	ittt	eq
 80008ec:	0049      	lsleq	r1, r1, #1
 80008ee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80008f2:	3b01      	subeq	r3, #1
 80008f4:	d0f9      	beq.n	80008ea <__aeabi_fmul+0xe6>
 80008f6:	ea41 010c 	orr.w	r1, r1, ip
 80008fa:	e78f      	b.n	800081c <__aeabi_fmul+0x18>
 80008fc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000900:	ea92 0f0c 	teq	r2, ip
 8000904:	bf18      	it	ne
 8000906:	ea93 0f0c 	teqne	r3, ip
 800090a:	d00a      	beq.n	8000922 <__aeabi_fmul+0x11e>
 800090c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000910:	bf18      	it	ne
 8000912:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000916:	d1d8      	bne.n	80008ca <__aeabi_fmul+0xc6>
 8000918:	ea80 0001 	eor.w	r0, r0, r1
 800091c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000920:	4770      	bx	lr
 8000922:	f090 0f00 	teq	r0, #0
 8000926:	bf17      	itett	ne
 8000928:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800092c:	4608      	moveq	r0, r1
 800092e:	f091 0f00 	teqne	r1, #0
 8000932:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000936:	d014      	beq.n	8000962 <__aeabi_fmul+0x15e>
 8000938:	ea92 0f0c 	teq	r2, ip
 800093c:	d101      	bne.n	8000942 <__aeabi_fmul+0x13e>
 800093e:	0242      	lsls	r2, r0, #9
 8000940:	d10f      	bne.n	8000962 <__aeabi_fmul+0x15e>
 8000942:	ea93 0f0c 	teq	r3, ip
 8000946:	d103      	bne.n	8000950 <__aeabi_fmul+0x14c>
 8000948:	024b      	lsls	r3, r1, #9
 800094a:	bf18      	it	ne
 800094c:	4608      	movne	r0, r1
 800094e:	d108      	bne.n	8000962 <__aeabi_fmul+0x15e>
 8000950:	ea80 0001 	eor.w	r0, r0, r1
 8000954:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000958:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800095c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000960:	4770      	bx	lr
 8000962:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000966:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800096a:	4770      	bx	lr

0800096c <__aeabi_fdiv>:
 800096c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000970:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000974:	bf1e      	ittt	ne
 8000976:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800097a:	ea92 0f0c 	teqne	r2, ip
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d069      	beq.n	8000a58 <__aeabi_fdiv+0xec>
 8000984:	eba2 0203 	sub.w	r2, r2, r3
 8000988:	ea80 0c01 	eor.w	ip, r0, r1
 800098c:	0249      	lsls	r1, r1, #9
 800098e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000992:	d037      	beq.n	8000a04 <__aeabi_fdiv+0x98>
 8000994:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000998:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800099c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80009a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009a4:	428b      	cmp	r3, r1
 80009a6:	bf38      	it	cc
 80009a8:	005b      	lslcc	r3, r3, #1
 80009aa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80009ae:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80009b2:	428b      	cmp	r3, r1
 80009b4:	bf24      	itt	cs
 80009b6:	1a5b      	subcs	r3, r3, r1
 80009b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80009bc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80009c0:	bf24      	itt	cs
 80009c2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80009c6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009ca:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80009ce:	bf24      	itt	cs
 80009d0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80009d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009d8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80009dc:	bf24      	itt	cs
 80009de:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80009e2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009e6:	011b      	lsls	r3, r3, #4
 80009e8:	bf18      	it	ne
 80009ea:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80009ee:	d1e0      	bne.n	80009b2 <__aeabi_fdiv+0x46>
 80009f0:	2afd      	cmp	r2, #253	; 0xfd
 80009f2:	f63f af50 	bhi.w	8000896 <__aeabi_fmul+0x92>
 80009f6:	428b      	cmp	r3, r1
 80009f8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009fc:	bf08      	it	eq
 80009fe:	f020 0001 	biceq.w	r0, r0, #1
 8000a02:	4770      	bx	lr
 8000a04:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a08:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a0c:	327f      	adds	r2, #127	; 0x7f
 8000a0e:	bfc2      	ittt	gt
 8000a10:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a14:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a18:	4770      	bxgt	lr
 8000a1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a1e:	f04f 0300 	mov.w	r3, #0
 8000a22:	3a01      	subs	r2, #1
 8000a24:	e737      	b.n	8000896 <__aeabi_fmul+0x92>
 8000a26:	f092 0f00 	teq	r2, #0
 8000a2a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a2e:	bf02      	ittt	eq
 8000a30:	0040      	lsleq	r0, r0, #1
 8000a32:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a36:	3a01      	subeq	r2, #1
 8000a38:	d0f9      	beq.n	8000a2e <__aeabi_fdiv+0xc2>
 8000a3a:	ea40 000c 	orr.w	r0, r0, ip
 8000a3e:	f093 0f00 	teq	r3, #0
 8000a42:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a46:	bf02      	ittt	eq
 8000a48:	0049      	lsleq	r1, r1, #1
 8000a4a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a4e:	3b01      	subeq	r3, #1
 8000a50:	d0f9      	beq.n	8000a46 <__aeabi_fdiv+0xda>
 8000a52:	ea41 010c 	orr.w	r1, r1, ip
 8000a56:	e795      	b.n	8000984 <__aeabi_fdiv+0x18>
 8000a58:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a5c:	ea92 0f0c 	teq	r2, ip
 8000a60:	d108      	bne.n	8000a74 <__aeabi_fdiv+0x108>
 8000a62:	0242      	lsls	r2, r0, #9
 8000a64:	f47f af7d 	bne.w	8000962 <__aeabi_fmul+0x15e>
 8000a68:	ea93 0f0c 	teq	r3, ip
 8000a6c:	f47f af70 	bne.w	8000950 <__aeabi_fmul+0x14c>
 8000a70:	4608      	mov	r0, r1
 8000a72:	e776      	b.n	8000962 <__aeabi_fmul+0x15e>
 8000a74:	ea93 0f0c 	teq	r3, ip
 8000a78:	d104      	bne.n	8000a84 <__aeabi_fdiv+0x118>
 8000a7a:	024b      	lsls	r3, r1, #9
 8000a7c:	f43f af4c 	beq.w	8000918 <__aeabi_fmul+0x114>
 8000a80:	4608      	mov	r0, r1
 8000a82:	e76e      	b.n	8000962 <__aeabi_fmul+0x15e>
 8000a84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a88:	bf18      	it	ne
 8000a8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a8e:	d1ca      	bne.n	8000a26 <__aeabi_fdiv+0xba>
 8000a90:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a94:	f47f af5c 	bne.w	8000950 <__aeabi_fmul+0x14c>
 8000a98:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a9c:	f47f af3c 	bne.w	8000918 <__aeabi_fmul+0x114>
 8000aa0:	e75f      	b.n	8000962 <__aeabi_fmul+0x15e>
 8000aa2:	bf00      	nop

08000aa4 <__gesf2>:
 8000aa4:	f04f 3cff 	mov.w	ip, #4294967295
 8000aa8:	e006      	b.n	8000ab8 <__cmpsf2+0x4>
 8000aaa:	bf00      	nop

08000aac <__lesf2>:
 8000aac:	f04f 0c01 	mov.w	ip, #1
 8000ab0:	e002      	b.n	8000ab8 <__cmpsf2+0x4>
 8000ab2:	bf00      	nop

08000ab4 <__cmpsf2>:
 8000ab4:	f04f 0c01 	mov.w	ip, #1
 8000ab8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000abc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ac0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ac4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ac8:	bf18      	it	ne
 8000aca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ace:	d011      	beq.n	8000af4 <__cmpsf2+0x40>
 8000ad0:	b001      	add	sp, #4
 8000ad2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ad6:	bf18      	it	ne
 8000ad8:	ea90 0f01 	teqne	r0, r1
 8000adc:	bf58      	it	pl
 8000ade:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ae2:	bf88      	it	hi
 8000ae4:	17c8      	asrhi	r0, r1, #31
 8000ae6:	bf38      	it	cc
 8000ae8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000aec:	bf18      	it	ne
 8000aee:	f040 0001 	orrne.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000af8:	d102      	bne.n	8000b00 <__cmpsf2+0x4c>
 8000afa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000afe:	d105      	bne.n	8000b0c <__cmpsf2+0x58>
 8000b00:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b04:	d1e4      	bne.n	8000ad0 <__cmpsf2+0x1c>
 8000b06:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b0a:	d0e1      	beq.n	8000ad0 <__cmpsf2+0x1c>
 8000b0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_cfrcmple>:
 8000b14:	4684      	mov	ip, r0
 8000b16:	4608      	mov	r0, r1
 8000b18:	4661      	mov	r1, ip
 8000b1a:	e7ff      	b.n	8000b1c <__aeabi_cfcmpeq>

08000b1c <__aeabi_cfcmpeq>:
 8000b1c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b1e:	f7ff ffc9 	bl	8000ab4 <__cmpsf2>
 8000b22:	2800      	cmp	r0, #0
 8000b24:	bf48      	it	mi
 8000b26:	f110 0f00 	cmnmi.w	r0, #0
 8000b2a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000b2c <__aeabi_fcmpeq>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff fff4 	bl	8000b1c <__aeabi_cfcmpeq>
 8000b34:	bf0c      	ite	eq
 8000b36:	2001      	moveq	r0, #1
 8000b38:	2000      	movne	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_fcmplt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffea 	bl	8000b1c <__aeabi_cfcmpeq>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_fcmple>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffe0 	bl	8000b1c <__aeabi_cfcmpeq>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_fcmpge>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffd2 	bl	8000b14 <__aeabi_cfrcmple>
 8000b70:	bf94      	ite	ls
 8000b72:	2001      	movls	r0, #1
 8000b74:	2000      	movhi	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_fcmpgt>:
 8000b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b80:	f7ff ffc8 	bl	8000b14 <__aeabi_cfrcmple>
 8000b84:	bf34      	ite	cc
 8000b86:	2001      	movcc	r0, #1
 8000b88:	2000      	movcs	r0, #0
 8000b8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8e:	bf00      	nop

08000b90 <__aeabi_f2iz>:
 8000b90:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b94:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b98:	d30f      	bcc.n	8000bba <__aeabi_f2iz+0x2a>
 8000b9a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b9e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ba2:	d90d      	bls.n	8000bc0 <__aeabi_f2iz+0x30>
 8000ba4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ba8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bac:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bb0:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb4:	bf18      	it	ne
 8000bb6:	4240      	negne	r0, r0
 8000bb8:	4770      	bx	lr
 8000bba:	f04f 0000 	mov.w	r0, #0
 8000bbe:	4770      	bx	lr
 8000bc0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000bc4:	d101      	bne.n	8000bca <__aeabi_f2iz+0x3a>
 8000bc6:	0242      	lsls	r2, r0, #9
 8000bc8:	d105      	bne.n	8000bd6 <__aeabi_f2iz+0x46>
 8000bca:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000bce:	bf08      	it	eq
 8000bd0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd4:	4770      	bx	lr
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_f2uiz>:
 8000bdc:	0042      	lsls	r2, r0, #1
 8000bde:	d20e      	bcs.n	8000bfe <__aeabi_f2uiz+0x22>
 8000be0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000be4:	d30b      	bcc.n	8000bfe <__aeabi_f2uiz+0x22>
 8000be6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000bea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bee:	d409      	bmi.n	8000c04 <__aeabi_f2uiz+0x28>
 8000bf0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000bf4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf8:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfc:	4770      	bx	lr
 8000bfe:	f04f 0000 	mov.w	r0, #0
 8000c02:	4770      	bx	lr
 8000c04:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c08:	d101      	bne.n	8000c0e <__aeabi_f2uiz+0x32>
 8000c0a:	0242      	lsls	r2, r0, #9
 8000c0c:	d102      	bne.n	8000c14 <__aeabi_f2uiz+0x38>
 8000c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c12:	4770      	bx	lr
 8000c14:	f04f 0000 	mov.w	r0, #0
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <_ZN3PIDC1Ev>:
    float integral = 0;
    float kP = 0, kI = 0, kD = 0;
    float out_min = 0, out_max = 100;

public:
    PID() = default;
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f04f 0200 	mov.w	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f04f 0200 	mov.w	r2, #0
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f04f 0200 	mov.w	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f04f 0200 	mov.w	r2, #0
 8000c42:	60da      	str	r2, [r3, #12]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f04f 0200 	mov.w	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f04f 0200 	mov.w	r2, #0
 8000c52:	615a      	str	r2, [r3, #20]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <_ZN3PIDC1Ev+0x4c>)
 8000c58:	619a      	str	r2, [r3, #24]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	42c80000 	.word	0x42c80000

08000c6c <_ZN5MotorC1Ev>:
 *      Author: Sanci
 */

#include "Motor.h"

Motor::Motor()
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af02      	add	r7, sp, #8
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	331c      	adds	r3, #28
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ffcf 	bl	8000c1c <_ZN3PIDC1Ev>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	641a      	str	r2, [r3, #64]	; 0x40
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	649a      	str	r2, [r3, #72]	; 0x48
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f04f 0200 	mov.w	r2, #0
 8000c96:	651a      	str	r2, [r3, #80]	; 0x50
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f04f 0200 	mov.w	r2, #0
 8000c9e:	655a      	str	r2, [r3, #84]	; 0x54
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f04f 0200 	mov.w	r2, #0
 8000ca6:	659a      	str	r2, [r3, #88]	; 0x58
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f04f 0200 	mov.w	r2, #0
 8000cae:	65da      	str	r2, [r3, #92]	; 0x5c
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f04f 0200 	mov.w	r2, #0
 8000cb6:	661a      	str	r2, [r3, #96]	; 0x60
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f04f 0200 	mov.w	r2, #0
 8000cbe:	665a      	str	r2, [r3, #100]	; 0x64
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f04f 0200 	mov.w	r2, #0
 8000cc6:	669a      	str	r2, [r3, #104]	; 0x68
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f04f 0200 	mov.w	r2, #0
 8000cce:	66da      	str	r2, [r3, #108]	; 0x6c
{
    pidController.set(Constants::kMotorKP, Constants::kMotorKI, Constants::kMotorKD,
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f103 001c 	add.w	r0, r3, #28
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <_ZN5MotorC1Ev+0x8c>)
 8000cd8:	9301      	str	r3, [sp, #4]
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <_ZN5MotorC1Ev+0x90>)
 8000cdc:	9300      	str	r3, [sp, #0]
 8000cde:	f04f 0300 	mov.w	r3, #0
 8000ce2:	4a07      	ldr	r2, [pc, #28]	; (8000d00 <_ZN5MotorC1Ev+0x94>)
 8000ce4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000ce8:	f000 fb04 	bl	80012f4 <_ZN3PID3setEfffff>
                      Constants::kMinPWM, Constants::kMaxPWM);
}
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	437f0000 	.word	0x437f0000
 8000cfc:	43190000 	.word	0x43190000
 8000d00:	3fe66666 	.word	0x3fe66666

08000d04 <_ZN5Motor4initE3PinS0_tmP17TIM_HandleTypeDef>:
void Motor::init(Pin _pinA, Pin _pinB, uint16_t _encoder, uint32_t _pwm_channel, TIM_HandleTypeDef *_htim)
{
 8000d04:	b082      	sub	sp, #8
 8000d06:	b480      	push	{r7}
 8000d08:	b085      	sub	sp, #20
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	60f8      	str	r0, [r7, #12]
 8000d0e:	1d38      	adds	r0, r7, #4
 8000d10:	e880 0006 	stmia.w	r0, {r1, r2}
 8000d14:	61fb      	str	r3, [r7, #28]
    this->pinA = _pinA;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	3308      	adds	r3, #8
 8000d1a:	1d3a      	adds	r2, r7, #4
 8000d1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d20:	e883 0003 	stmia.w	r3, {r0, r1}
    this->pinB = _pinB;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	3310      	adds	r3, #16
 8000d28:	f107 021c 	add.w	r2, r7, #28
 8000d2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d30:	e883 0003 	stmia.w	r3, {r0, r1}
    this->encoder = _encoder;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000d38:	831a      	strh	r2, [r3, #24]
    this->pwm_channel = _pwm_channel;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d3e:	63da      	str	r2, [r3, #60]	; 0x3c
    this->htim = _htim;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d44:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d46:	bf00      	nop
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	b002      	add	sp, #8
 8000d50:	4770      	bx	lr
 8000d52:	0000      	movs	r0, r0
 8000d54:	0000      	movs	r0, r0
	...

08000d58 <_ZN5Motor12update_motorEm>:
    // Enviar PWM
    HAL_TIM_PWM_Start(htim, pwm_channel);
    __HAL_TIM_SET_COMPARE(htim, pwm_channel, duty);
}
void Motor::update_motor(uint32_t current_time)
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b087      	sub	sp, #28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
    float dt = (current_time - last_time_ms) / 1000.0f;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	683a      	ldr	r2, [r7, #0]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fcf2 	bl	8000754 <__aeabi_ui2f>
 8000d70:	4603      	mov	r3, r0
 8000d72:	4973      	ldr	r1, [pc, #460]	; (8000f40 <_ZN5Motor12update_motorEm+0x1e8>)
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fdf9 	bl	800096c <__aeabi_fdiv>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	617b      	str	r3, [r7, #20]
    if (dt <= 0.0f)
 8000d7e:	f04f 0100 	mov.w	r1, #0
 8000d82:	6978      	ldr	r0, [r7, #20]
 8000d84:	f7ff fee6 	bl	8000b54 <__aeabi_fcmple>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f040 80d0 	bne.w	8000f30 <_ZN5Motor12update_motorEm+0x1d8>
        return;

    delta_ticks = ticks - last_ticks;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fcda 	bl	8000754 <__aeabi_ui2f>
 8000da0:	4602      	mov	r2, r0
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	651a      	str	r2, [r3, #80]	; 0x50
    distance_cm += delta_ticks * Constants::kCMPerTick;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000dae:	4965      	ldr	r1, [pc, #404]	; (8000f44 <_ZN5Motor12update_motorEm+0x1ec>)
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fd27 	bl	8000804 <__aeabi_fmul>
 8000db6:	4603      	mov	r3, r0
 8000db8:	4619      	mov	r1, r3
 8000dba:	4620      	mov	r0, r4
 8000dbc:	f7ff fc1a 	bl	80005f4 <__addsf3>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	655a      	str	r2, [r3, #84]	; 0x54
    actual_speed_cm_s = (delta_ticks * Constants::kCMPerTick) / dt;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000dcc:	495d      	ldr	r1, [pc, #372]	; (8000f44 <_ZN5Motor12update_motorEm+0x1ec>)
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fd18 	bl	8000804 <__aeabi_fmul>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	6979      	ldr	r1, [r7, #20]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fdc7 	bl	800096c <__aeabi_fdiv>
 8000dde:	4603      	mov	r3, r0
 8000de0:	461a      	mov	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	65da      	str	r2, [r3, #92]	; 0x5c

    // Convert cm/s to PWM equivalent
    float max_cm_s = (Constants::kMotorsRPM * 3.14159f * Constants::kWheelDiameter) / 60.0f;
 8000de6:	4b58      	ldr	r3, [pc, #352]	; (8000f48 <_ZN5Motor12update_motorEm+0x1f0>)
 8000de8:	613b      	str	r3, [r7, #16]
    float scaled_target_pwm = (target_speed_cm_s / max_cm_s) * Constants::kMaxPWM;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dee:	6939      	ldr	r1, [r7, #16]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fdbb 	bl	800096c <__aeabi_fdiv>
 8000df6:	4603      	mov	r3, r0
 8000df8:	4954      	ldr	r1, [pc, #336]	; (8000f4c <_ZN5Motor12update_motorEm+0x1f4>)
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fd02 	bl	8000804 <__aeabi_fmul>
 8000e00:	4603      	mov	r3, r0
 8000e02:	60fb      	str	r3, [r7, #12]
    float scaled_actual_pwm = (actual_speed_cm_s / max_cm_s) * Constants::kMaxPWM;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e08:	6939      	ldr	r1, [r7, #16]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fdae 	bl	800096c <__aeabi_fdiv>
 8000e10:	4603      	mov	r3, r0
 8000e12:	494e      	ldr	r1, [pc, #312]	; (8000f4c <_ZN5Motor12update_motorEm+0x1f4>)
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fcf5 	bl	8000804 <__aeabi_fmul>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	60bb      	str	r3, [r7, #8]

    output = pidController.calculate(scaled_target_pwm, scaled_actual_pwm, dt);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f103 001c 	add.w	r0, r3, #28
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	68f9      	ldr	r1, [r7, #12]
 8000e2a:	f000 fa7e 	bl	800132a <_ZN3PID9calculateEfff>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	66da      	str	r2, [r3, #108]	; 0x6c
    if (target_speed_cm_s - actual_speed_cm_s > 0.3)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4610      	mov	r0, r2
 8000e40:	f7ff fbd6 	bl	80005f0 <__aeabi_fsub>
 8000e44:	4603      	mov	r3, r0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff faee 	bl	8000428 <__aeabi_f2d>
 8000e4c:	a33a      	add	r3, pc, #232	; (adr r3, 8000f38 <_ZN5Motor12update_motorEm+0x1e0>)
 8000e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e52:	f7ff fbbf 	bl	80005d4 <__aeabi_dcmpgt>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d00e      	beq.n	8000e7a <_ZN5Motor12update_motorEm+0x122>
    {
        pwm_out = std::min(std::max(output, Constants::kMinPWM), Constants::kMaxPWM);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	336c      	adds	r3, #108	; 0x6c
 8000e60:	493b      	ldr	r1, [pc, #236]	; (8000f50 <_ZN5Motor12update_motorEm+0x1f8>)
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f8e4 	bl	8001030 <_ZSt3maxIfERKT_S2_S2_>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	493a      	ldr	r1, [pc, #232]	; (8000f54 <_ZN5Motor12update_motorEm+0x1fc>)
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 f8f6 	bl	800105e <_ZSt3minIfERKT_S2_S2_>
 8000e72:	4603      	mov	r3, r0
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	669a      	str	r2, [r3, #104]	; 0x68
    }

    // Dirección hacia adelante
    HAL_GPIO_WritePin(pinA.port, pinA.pin, GPIO_PIN_SET);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6898      	ldr	r0, [r3, #8]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	899b      	ldrh	r3, [r3, #12]
 8000e82:	2201      	movs	r2, #1
 8000e84:	4619      	mov	r1, r3
 8000e86:	f001 fd59 	bl	800293c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pinB.port, pinB.pin, GPIO_PIN_RESET);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6918      	ldr	r0, [r3, #16]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	8a9b      	ldrh	r3, [r3, #20]
 8000e92:	2200      	movs	r2, #0
 8000e94:	4619      	mov	r1, r3
 8000e96:	f001 fd51 	bl	800293c <HAL_GPIO_WritePin>

    __HAL_TIM_SET_COMPARE(htim, pwm_channel, (uint16_t)pwm_out);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d10b      	bne.n	8000eba <_ZN5Motor12update_motorEm+0x162>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fe98 	bl	8000bdc <__aeabi_f2uiz>
 8000eac:	4603      	mov	r3, r0
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	635a      	str	r2, [r3, #52]	; 0x34
 8000eb8:	e02a      	b.n	8000f10 <_ZN5Motor12update_motorEm+0x1b8>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	d10b      	bne.n	8000eda <_ZN5Motor12update_motorEm+0x182>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fe88 	bl	8000bdc <__aeabi_f2uiz>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	639a      	str	r2, [r3, #56]	; 0x38
 8000ed8:	e01a      	b.n	8000f10 <_ZN5Motor12update_motorEm+0x1b8>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ede:	2b08      	cmp	r3, #8
 8000ee0:	d10b      	bne.n	8000efa <_ZN5Motor12update_motorEm+0x1a2>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fe78 	bl	8000bdc <__aeabi_f2uiz>
 8000eec:	4603      	mov	r3, r0
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ef8:	e00a      	b.n	8000f10 <_ZN5Motor12update_motorEm+0x1b8>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fe6c 	bl	8000bdc <__aeabi_f2uiz>
 8000f04:	4603      	mov	r3, r0
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_TIM_PWM_Start(htim, pwm_channel);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4610      	mov	r0, r2
 8000f1c:	f004 fc52 	bl	80057c4 <HAL_TIM_PWM_Start>
    last_ticks = ticks;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	64da      	str	r2, [r3, #76]	; 0x4c
    last_time_ms = current_time;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	683a      	ldr	r2, [r7, #0]
 8000f2c:	641a      	str	r2, [r3, #64]	; 0x40
 8000f2e:	e000      	b.n	8000f32 <_ZN5Motor12update_motorEm+0x1da>
        return;
 8000f30:	bf00      	nop
}
 8000f32:	371c      	adds	r7, #28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd90      	pop	{r4, r7, pc}
 8000f38:	33333333 	.word	0x33333333
 8000f3c:	3fd33333 	.word	0x3fd33333
 8000f40:	447a0000 	.word	0x447a0000
 8000f44:	3d14a20d 	.word	0x3d14a20d
 8000f48:	4218e406 	.word	0x4218e406
 8000f4c:	437f0000 	.word	0x437f0000
 8000f50:	0800afa4 	.word	0x0800afa4
 8000f54:	0800afa0 	.word	0x0800afa0

08000f58 <_ZN5Motor10stop_motorEv>:
void Motor::stop_motor()
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
    // Active brake: both inputs HIGH
    HAL_GPIO_WritePin(pinA.port, pinA.pin, GPIO_PIN_SET);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6898      	ldr	r0, [r3, #8]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	899b      	ldrh	r3, [r3, #12]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f001 fce6 	bl	800293c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pinB.port, pinB.pin, GPIO_PIN_SET);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6918      	ldr	r0, [r3, #16]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	8a9b      	ldrh	r3, [r3, #20]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f001 fcde 	bl	800293c <HAL_GPIO_WritePin>

    // Stop PWM signal
    __HAL_TIM_SET_COMPARE(htim, pwm_channel, 0);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d105      	bne.n	8000f94 <_ZN5Motor10stop_motorEv+0x3c>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f92:	e018      	b.n	8000fc6 <_ZN5Motor10stop_motorEv+0x6e>
    __HAL_TIM_SET_COMPARE(htim, pwm_channel, 0);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f98:	2b04      	cmp	r3, #4
 8000f9a:	d105      	bne.n	8000fa8 <_ZN5Motor10stop_motorEv+0x50>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000fa6:	e00e      	b.n	8000fc6 <_ZN5Motor10stop_motorEv+0x6e>
    __HAL_TIM_SET_COMPARE(htim, pwm_channel, 0);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fac:	2b08      	cmp	r3, #8
 8000fae:	d105      	bne.n	8000fbc <_ZN5Motor10stop_motorEv+0x64>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000fba:	e004      	b.n	8000fc6 <_ZN5Motor10stop_motorEv+0x6e>
    __HAL_TIM_SET_COMPARE(htim, pwm_channel, 0);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <_ZN5Motor9setTargetEf>:

void Motor::setTarget(float _target_speed_cm_s)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
 8000fd6:	6039      	str	r1, [r7, #0]
    target_speed_cm_s = _target_speed_cm_s;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	683a      	ldr	r2, [r7, #0]
 8000fdc:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <_ZN5Motor11getDistanceEv>:

float Motor::getDistance()
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
    return distance_cm;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr

08000ffe <_ZN5Motor8addTicksEv>:

void Motor::addTicks()
{
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
    ticks++;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr

0800101a <_ZN5Motor8getSpeedEv>:
{
    return pwm_out;
}

float Motor::getSpeed()
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
    return actual_speed_cm_s;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr

08001030 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4619      	mov	r1, r3
 8001044:	4610      	mov	r0, r2
 8001046:	f7ff fd7b 	bl	8000b40 <__aeabi_fcmplt>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	e000      	b.n	8001056 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8001054:	687b      	ldr	r3, [r7, #4]
    }
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4619      	mov	r1, r3
 8001072:	4610      	mov	r0, r2
 8001074:	f7ff fd64 	bl	8000b40 <__aeabi_fcmplt>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	e000      	b.n	8001084 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8001082:	687b      	ldr	r3, [r7, #4]
    }
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <_Z12movementInitv>:
 */

#include "Movement.h"

void movementInit()
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af04      	add	r7, sp, #16
    // Motores (Checar que los canales sean los correctos)
    frontLeftMotor.init(
 8001092:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <_Z12movementInitv+0x84>)
 8001094:	491f      	ldr	r1, [pc, #124]	; (8001114 <_Z12movementInitv+0x88>)
 8001096:	4a20      	ldr	r2, [pc, #128]	; (8001118 <_Z12movementInitv+0x8c>)
 8001098:	9203      	str	r2, [sp, #12]
 800109a:	2200      	movs	r2, #0
 800109c:	9202      	str	r2, [sp, #8]
 800109e:	2202      	movs	r2, #2
 80010a0:	9201      	str	r2, [sp, #4]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	9200      	str	r2, [sp, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	c906      	ldmia	r1, {r1, r2}
 80010aa:	481c      	ldr	r0, [pc, #112]	; (800111c <_Z12movementInitv+0x90>)
 80010ac:	f7ff fe2a 	bl	8000d04 <_ZN5Motor4initE3PinS0_tmP17TIM_HandleTypeDef>
        Constants::kFrontLeftA,
        Constants::kFrontLeftB,
        Constants::kFrontLeftEncoder,
        TIM_CHANNEL_1,
        &htim3);
    frontRightMotor.init(
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <_Z12movementInitv+0x94>)
 80010b2:	491c      	ldr	r1, [pc, #112]	; (8001124 <_Z12movementInitv+0x98>)
 80010b4:	4a1c      	ldr	r2, [pc, #112]	; (8001128 <_Z12movementInitv+0x9c>)
 80010b6:	9203      	str	r2, [sp, #12]
 80010b8:	2200      	movs	r2, #0
 80010ba:	9202      	str	r2, [sp, #8]
 80010bc:	2201      	movs	r2, #1
 80010be:	9201      	str	r2, [sp, #4]
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	9200      	str	r2, [sp, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	c906      	ldmia	r1, {r1, r2}
 80010c8:	4818      	ldr	r0, [pc, #96]	; (800112c <_Z12movementInitv+0xa0>)
 80010ca:	f7ff fe1b 	bl	8000d04 <_ZN5Motor4initE3PinS0_tmP17TIM_HandleTypeDef>
        Constants::kFrontRightB,
        Constants::kFrontRightEncoder,
        TIM_CHANNEL_1,
        &htim1);

    backRightMotor.init(
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <_Z12movementInitv+0xa4>)
 80010d0:	4918      	ldr	r1, [pc, #96]	; (8001134 <_Z12movementInitv+0xa8>)
 80010d2:	4a11      	ldr	r2, [pc, #68]	; (8001118 <_Z12movementInitv+0x8c>)
 80010d4:	9203      	str	r2, [sp, #12]
 80010d6:	220c      	movs	r2, #12
 80010d8:	9202      	str	r2, [sp, #8]
 80010da:	2208      	movs	r2, #8
 80010dc:	9201      	str	r2, [sp, #4]
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	9200      	str	r2, [sp, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	c906      	ldmia	r1, {r1, r2}
 80010e6:	4814      	ldr	r0, [pc, #80]	; (8001138 <_Z12movementInitv+0xac>)
 80010e8:	f7ff fe0c 	bl	8000d04 <_ZN5Motor4initE3PinS0_tmP17TIM_HandleTypeDef>
        Constants::kBackRightB,
        Constants::kBackRightEncoder,
        TIM_CHANNEL_4,
        &htim3);

    backLeftMotor.init(
 80010ec:	4b13      	ldr	r3, [pc, #76]	; (800113c <_Z12movementInitv+0xb0>)
 80010ee:	4914      	ldr	r1, [pc, #80]	; (8001140 <_Z12movementInitv+0xb4>)
 80010f0:	4a09      	ldr	r2, [pc, #36]	; (8001118 <_Z12movementInitv+0x8c>)
 80010f2:	9203      	str	r2, [sp, #12]
 80010f4:	2204      	movs	r2, #4
 80010f6:	9202      	str	r2, [sp, #8]
 80010f8:	2204      	movs	r2, #4
 80010fa:	9201      	str	r2, [sp, #4]
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	9200      	str	r2, [sp, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	c906      	ldmia	r1, {r1, r2}
 8001104:	480f      	ldr	r0, [pc, #60]	; (8001144 <_Z12movementInitv+0xb8>)
 8001106:	f7ff fdfd 	bl	8000d04 <_ZN5Motor4initE3PinS0_tmP17TIM_HandleTypeDef>
        Constants::kBackLeftA,
        Constants::kBackLeftB,
        Constants::kBackLeftEncoder,
        TIM_CHANNEL_2,
        &htim3);
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	0800afb0 	.word	0x0800afb0
 8001114:	0800afa8 	.word	0x0800afa8
 8001118:	20000248 	.word	0x20000248
 800111c:	20000290 	.word	0x20000290
 8001120:	0800afc0 	.word	0x0800afc0
 8001124:	0800afb8 	.word	0x0800afb8
 8001128:	20000200 	.word	0x20000200
 800112c:	20000300 	.word	0x20000300
 8001130:	0800afe0 	.word	0x0800afe0
 8001134:	0800afd8 	.word	0x0800afd8
 8001138:	200003e0 	.word	0x200003e0
 800113c:	0800afd0 	.word	0x0800afd0
 8001140:	0800afc8 	.word	0x0800afc8
 8001144:	20000370 	.word	0x20000370

08001148 <_Z8setSpeedi>:
void distance() {}
void setSpeed(int speed)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
    frontLeftMotor.setTarget(speed);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff fb03 	bl	800075c <__aeabi_i2f>
 8001156:	4603      	mov	r3, r0
 8001158:	4619      	mov	r1, r3
 800115a:	480f      	ldr	r0, [pc, #60]	; (8001198 <_Z8setSpeedi+0x50>)
 800115c:	f7ff ff37 	bl	8000fce <_ZN5Motor9setTargetEf>
    frontRightMotor.setTarget(speed);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff fafb 	bl	800075c <__aeabi_i2f>
 8001166:	4603      	mov	r3, r0
 8001168:	4619      	mov	r1, r3
 800116a:	480c      	ldr	r0, [pc, #48]	; (800119c <_Z8setSpeedi+0x54>)
 800116c:	f7ff ff2f 	bl	8000fce <_ZN5Motor9setTargetEf>
    backLeftMotor.setTarget(speed);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff faf3 	bl	800075c <__aeabi_i2f>
 8001176:	4603      	mov	r3, r0
 8001178:	4619      	mov	r1, r3
 800117a:	4809      	ldr	r0, [pc, #36]	; (80011a0 <_Z8setSpeedi+0x58>)
 800117c:	f7ff ff27 	bl	8000fce <_ZN5Motor9setTargetEf>
    backRightMotor.setTarget(speed);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff faeb 	bl	800075c <__aeabi_i2f>
 8001186:	4603      	mov	r3, r0
 8001188:	4619      	mov	r1, r3
 800118a:	4806      	ldr	r0, [pc, #24]	; (80011a4 <_Z8setSpeedi+0x5c>)
 800118c:	f7ff ff1f 	bl	8000fce <_ZN5Motor9setTargetEf>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000290 	.word	0x20000290
 800119c:	20000300 	.word	0x20000300
 80011a0:	20000370 	.word	0x20000370
 80011a4:	200003e0 	.word	0x200003e0

080011a8 <_Z4stopv>:
void stop()
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
    frontLeftMotor.stop_motor();
 80011ac:	4806      	ldr	r0, [pc, #24]	; (80011c8 <_Z4stopv+0x20>)
 80011ae:	f7ff fed3 	bl	8000f58 <_ZN5Motor10stop_motorEv>
    frontRightMotor.stop_motor();
 80011b2:	4806      	ldr	r0, [pc, #24]	; (80011cc <_Z4stopv+0x24>)
 80011b4:	f7ff fed0 	bl	8000f58 <_ZN5Motor10stop_motorEv>
    backLeftMotor.stop_motor();
 80011b8:	4805      	ldr	r0, [pc, #20]	; (80011d0 <_Z4stopv+0x28>)
 80011ba:	f7ff fecd 	bl	8000f58 <_ZN5Motor10stop_motorEv>
    backRightMotor.stop_motor();
 80011be:	4805      	ldr	r0, [pc, #20]	; (80011d4 <_Z4stopv+0x2c>)
 80011c0:	f7ff feca 	bl	8000f58 <_ZN5Motor10stop_motorEv>
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000290 	.word	0x20000290
 80011cc:	20000300 	.word	0x20000300
 80011d0:	20000370 	.word	0x20000370
 80011d4:	200003e0 	.word	0x200003e0

080011d8 <_Z14updateMovementm>:
void updateMovement(uint32_t current_time)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
    frontLeftMotor.update_motor(current_time);
 80011e0:	6879      	ldr	r1, [r7, #4]
 80011e2:	4809      	ldr	r0, [pc, #36]	; (8001208 <_Z14updateMovementm+0x30>)
 80011e4:	f7ff fdb8 	bl	8000d58 <_ZN5Motor12update_motorEm>
    frontRightMotor.update_motor(current_time);
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	4808      	ldr	r0, [pc, #32]	; (800120c <_Z14updateMovementm+0x34>)
 80011ec:	f7ff fdb4 	bl	8000d58 <_ZN5Motor12update_motorEm>
    backLeftMotor.update_motor(current_time);
 80011f0:	6879      	ldr	r1, [r7, #4]
 80011f2:	4807      	ldr	r0, [pc, #28]	; (8001210 <_Z14updateMovementm+0x38>)
 80011f4:	f7ff fdb0 	bl	8000d58 <_ZN5Motor12update_motorEm>
    backRightMotor.update_motor(current_time);
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	4806      	ldr	r0, [pc, #24]	; (8001214 <_Z14updateMovementm+0x3c>)
 80011fc:	f7ff fdac 	bl	8000d58 <_ZN5Motor12update_motorEm>
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000290 	.word	0x20000290
 800120c:	20000300 	.word	0x20000300
 8001210:	20000370 	.word	0x20000370
 8001214:	200003e0 	.word	0x200003e0

08001218 <_Z41__static_initialization_and_destruction_0ii>:
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d148      	bne.n	80012ba <_Z41__static_initialization_and_destruction_0ii+0xa2>
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800122e:	4293      	cmp	r3, r2
 8001230:	d143      	bne.n	80012ba <_Z41__static_initialization_and_destruction_0ii+0xa2>
void setSpeed(int speed);
void stop();
void updateMovement(uint32_t current_time);

// Motors
inline Motor frontLeftMotor;
 8001232:	4b24      	ldr	r3, [pc, #144]	; (80012c4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	3301      	adds	r3, #1
 8001238:	4a22      	ldr	r2, [pc, #136]	; (80012c4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b01      	cmp	r3, #1
 8001242:	bf0c      	ite	eq
 8001244:	2301      	moveq	r3, #1
 8001246:	2300      	movne	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d002      	beq.n	8001254 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800124e:	481e      	ldr	r0, [pc, #120]	; (80012c8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8001250:	f7ff fd0c 	bl	8000c6c <_ZN5MotorC1Ev>
inline Motor frontRightMotor;
 8001254:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	3301      	adds	r3, #1
 800125a:	4a1c      	ldr	r2, [pc, #112]	; (80012cc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b01      	cmp	r3, #1
 8001264:	bf0c      	ite	eq
 8001266:	2301      	moveq	r3, #1
 8001268:	2300      	movne	r3, #0
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b00      	cmp	r3, #0
 800126e:	d002      	beq.n	8001276 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8001270:	4817      	ldr	r0, [pc, #92]	; (80012d0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8001272:	f7ff fcfb 	bl	8000c6c <_ZN5MotorC1Ev>
inline Motor backLeftMotor;
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	3301      	adds	r3, #1
 800127c:	4a15      	ldr	r2, [pc, #84]	; (80012d4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b01      	cmp	r3, #1
 8001286:	bf0c      	ite	eq
 8001288:	2301      	moveq	r3, #1
 800128a:	2300      	movne	r3, #0
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d002      	beq.n	8001298 <_Z41__static_initialization_and_destruction_0ii+0x80>
 8001292:	4811      	ldr	r0, [pc, #68]	; (80012d8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8001294:	f7ff fcea 	bl	8000c6c <_ZN5MotorC1Ev>
inline Motor backRightMotor;
 8001298:	4b10      	ldr	r3, [pc, #64]	; (80012dc <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	3301      	adds	r3, #1
 800129e:	4a0f      	ldr	r2, [pc, #60]	; (80012dc <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	bf0c      	ite	eq
 80012aa:	2301      	moveq	r3, #1
 80012ac:	2300      	movne	r3, #0
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d002      	beq.n	80012ba <_Z41__static_initialization_and_destruction_0ii+0xa2>
 80012b4:	480a      	ldr	r0, [pc, #40]	; (80012e0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80012b6:	f7ff fcd9 	bl	8000c6c <_ZN5MotorC1Ev>
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000450 	.word	0x20000450
 80012c8:	20000290 	.word	0x20000290
 80012cc:	20000454 	.word	0x20000454
 80012d0:	20000300 	.word	0x20000300
 80012d4:	20000458 	.word	0x20000458
 80012d8:	20000370 	.word	0x20000370
 80012dc:	2000045c 	.word	0x2000045c
 80012e0:	200003e0 	.word	0x200003e0

080012e4 <_GLOBAL__sub_I__Z12movementInitv>:
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80012ec:	2001      	movs	r0, #1
 80012ee:	f7ff ff93 	bl	8001218 <_Z41__static_initialization_and_destruction_0ii>
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <_ZN3PID3setEfffff>:
#include "PID.h"

void PID::set(float kp, float ki, float kd, float outMin, float outMax)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
 8001300:	603b      	str	r3, [r7, #0]
    kP = kp;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	68ba      	ldr	r2, [r7, #8]
 8001306:	609a      	str	r2, [r3, #8]
    kI = ki;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	60da      	str	r2, [r3, #12]
    kD = kd;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	611a      	str	r2, [r3, #16]
    out_min = outMin;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	615a      	str	r2, [r3, #20]
    out_max = outMax;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	69fa      	ldr	r2, [r7, #28]
 800131e:	619a      	str	r2, [r3, #24]
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr

0800132a <_ZN3PID9calculateEfff>:

float PID::calculate(float setpoint, float input, float dt)
{
 800132a:	b590      	push	{r4, r7, lr}
 800132c:	b089      	sub	sp, #36	; 0x24
 800132e:	af00      	add	r7, sp, #0
 8001330:	60f8      	str	r0, [r7, #12]
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
 8001336:	603b      	str	r3, [r7, #0]
    float error = setpoint - input;
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	68b8      	ldr	r0, [r7, #8]
 800133c:	f7ff f958 	bl	80005f0 <__aeabi_fsub>
 8001340:	4603      	mov	r3, r0
 8001342:	61bb      	str	r3, [r7, #24]
    integral += error * dt;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	685c      	ldr	r4, [r3, #4]
 8001348:	6839      	ldr	r1, [r7, #0]
 800134a:	69b8      	ldr	r0, [r7, #24]
 800134c:	f7ff fa5a 	bl	8000804 <__aeabi_fmul>
 8001350:	4603      	mov	r3, r0
 8001352:	4619      	mov	r1, r3
 8001354:	4620      	mov	r0, r4
 8001356:	f7ff f94d 	bl	80005f4 <__addsf3>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	605a      	str	r2, [r3, #4]
    float derivative = (error - last_error) / dt;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4619      	mov	r1, r3
 8001368:	69b8      	ldr	r0, [r7, #24]
 800136a:	f7ff f941 	bl	80005f0 <__aeabi_fsub>
 800136e:	4603      	mov	r3, r0
 8001370:	6839      	ldr	r1, [r7, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fafa 	bl	800096c <__aeabi_fdiv>
 8001378:	4603      	mov	r3, r0
 800137a:	617b      	str	r3, [r7, #20]
    float output = kP * error + kI * integral + kD * derivative;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	69b9      	ldr	r1, [r7, #24]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fa3e 	bl	8000804 <__aeabi_fmul>
 8001388:	4603      	mov	r3, r0
 800138a:	461c      	mov	r4, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	68da      	ldr	r2, [r3, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	4619      	mov	r1, r3
 8001396:	4610      	mov	r0, r2
 8001398:	f7ff fa34 	bl	8000804 <__aeabi_fmul>
 800139c:	4603      	mov	r3, r0
 800139e:	4619      	mov	r1, r3
 80013a0:	4620      	mov	r0, r4
 80013a2:	f7ff f927 	bl	80005f4 <__addsf3>
 80013a6:	4603      	mov	r3, r0
 80013a8:	461c      	mov	r4, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	6979      	ldr	r1, [r7, #20]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fa27 	bl	8000804 <__aeabi_fmul>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4619      	mov	r1, r3
 80013ba:	4620      	mov	r0, r4
 80013bc:	f7ff f91a 	bl	80005f4 <__addsf3>
 80013c0:	4603      	mov	r3, r0
 80013c2:	61fb      	str	r3, [r7, #28]

    if (output > out_max)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	4619      	mov	r1, r3
 80013ca:	69f8      	ldr	r0, [r7, #28]
 80013cc:	f7ff fbd6 	bl	8000b7c <__aeabi_fcmpgt>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d002      	beq.n	80013dc <_ZN3PID9calculateEfff+0xb2>
        output = out_max;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	61fb      	str	r3, [r7, #28]
    if (output < out_min)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	4619      	mov	r1, r3
 80013e2:	69f8      	ldr	r0, [r7, #28]
 80013e4:	f7ff fbac 	bl	8000b40 <__aeabi_fcmplt>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d002      	beq.n	80013f4 <_ZN3PID9calculateEfff+0xca>
        output = out_min;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	61fb      	str	r3, [r7, #28]

    last_error = error;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	601a      	str	r2, [r3, #0]
    return output;
 80013fa:	69fb      	ldr	r3, [r7, #28]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3724      	adds	r7, #36	; 0x24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd90      	pop	{r4, r7, pc}

08001404 <_Z7BT_SendPKc>:
#include "bluetooth_uart.h"

void BT_Send(const char *msg)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7fe fe9f 	bl	8000150 <strlen>
 8001412:	4603      	mov	r3, r0
 8001414:	b29a      	uxth	r2, r3
 8001416:	f04f 33ff 	mov.w	r3, #4294967295
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	4803      	ldr	r0, [pc, #12]	; (800142c <_Z7BT_SendPKc+0x28>)
 800141e:	f004 fe4e 	bl	80060be <HAL_UART_Transmit>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000460 	.word	0x20000460

08001430 <_Z15sendMotorSpeedsv>:

void sendMotorSpeeds()
{
 8001430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001432:	b093      	sub	sp, #76	; 0x4c
 8001434:	af02      	add	r7, sp, #8
    char buffer[64];
    sprintf(buffer,
            "FL:%d FR:%d BL:%d BR:%d\r\n",
            (int)frontLeftMotor.getSpeed(),
 8001436:	4818      	ldr	r0, [pc, #96]	; (8001498 <_Z15sendMotorSpeedsv+0x68>)
 8001438:	f7ff fdef 	bl	800101a <_ZN5Motor8getSpeedEv>
 800143c:	4603      	mov	r3, r0
    sprintf(buffer,
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fba6 	bl	8000b90 <__aeabi_f2iz>
 8001444:	4605      	mov	r5, r0
            (int)frontRightMotor.getSpeed(),
 8001446:	4815      	ldr	r0, [pc, #84]	; (800149c <_Z15sendMotorSpeedsv+0x6c>)
 8001448:	f7ff fde7 	bl	800101a <_ZN5Motor8getSpeedEv>
 800144c:	4603      	mov	r3, r0
    sprintf(buffer,
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fb9e 	bl	8000b90 <__aeabi_f2iz>
 8001454:	4606      	mov	r6, r0
            (int)backLeftMotor.getSpeed(),
 8001456:	4812      	ldr	r0, [pc, #72]	; (80014a0 <_Z15sendMotorSpeedsv+0x70>)
 8001458:	f7ff fddf 	bl	800101a <_ZN5Motor8getSpeedEv>
 800145c:	4603      	mov	r3, r0
    sprintf(buffer,
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fb96 	bl	8000b90 <__aeabi_f2iz>
 8001464:	4604      	mov	r4, r0
            (int)backRightMotor.getSpeed());
 8001466:	480f      	ldr	r0, [pc, #60]	; (80014a4 <_Z15sendMotorSpeedsv+0x74>)
 8001468:	f7ff fdd7 	bl	800101a <_ZN5Motor8getSpeedEv>
 800146c:	4603      	mov	r3, r0
    sprintf(buffer,
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fb8e 	bl	8000b90 <__aeabi_f2iz>
 8001474:	4603      	mov	r3, r0
 8001476:	4638      	mov	r0, r7
 8001478:	9301      	str	r3, [sp, #4]
 800147a:	9400      	str	r4, [sp, #0]
 800147c:	4633      	mov	r3, r6
 800147e:	462a      	mov	r2, r5
 8001480:	4909      	ldr	r1, [pc, #36]	; (80014a8 <_Z15sendMotorSpeedsv+0x78>)
 8001482:	f009 f909 	bl	800a698 <siprintf>

    BT_Send(buffer);
 8001486:	463b      	mov	r3, r7
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ffbb 	bl	8001404 <_Z7BT_SendPKc>
 800148e:	bf00      	nop
 8001490:	3744      	adds	r7, #68	; 0x44
 8001492:	46bd      	mov	sp, r7
 8001494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001496:	bf00      	nop
 8001498:	20000290 	.word	0x20000290
 800149c:	20000300 	.word	0x20000300
 80014a0:	20000370 	.word	0x20000370
 80014a4:	200003e0 	.word	0x200003e0
 80014a8:	0800af24 	.word	0x0800af24

080014ac <_Z41__static_initialization_and_destruction_0ii>:
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d148      	bne.n	800154e <_Z41__static_initialization_and_destruction_0ii+0xa2>
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d143      	bne.n	800154e <_Z41__static_initialization_and_destruction_0ii+0xa2>
inline Motor frontLeftMotor;
 80014c6:	4b24      	ldr	r3, [pc, #144]	; (8001558 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	3301      	adds	r3, #1
 80014cc:	4a22      	ldr	r2, [pc, #136]	; (8001558 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	4b21      	ldr	r3, [pc, #132]	; (8001558 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	bf0c      	ite	eq
 80014d8:	2301      	moveq	r3, #1
 80014da:	2300      	movne	r3, #0
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d002      	beq.n	80014e8 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80014e2:	481e      	ldr	r0, [pc, #120]	; (800155c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80014e4:	f7ff fbc2 	bl	8000c6c <_ZN5MotorC1Ev>
inline Motor frontRightMotor;
 80014e8:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	3301      	adds	r3, #1
 80014ee:	4a1c      	ldr	r2, [pc, #112]	; (8001560 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	bf0c      	ite	eq
 80014fa:	2301      	moveq	r3, #1
 80014fc:	2300      	movne	r3, #0
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	d002      	beq.n	800150a <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8001504:	4817      	ldr	r0, [pc, #92]	; (8001564 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8001506:	f7ff fbb1 	bl	8000c6c <_ZN5MotorC1Ev>
inline Motor backLeftMotor;
 800150a:	4b17      	ldr	r3, [pc, #92]	; (8001568 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	3301      	adds	r3, #1
 8001510:	4a15      	ldr	r2, [pc, #84]	; (8001568 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b01      	cmp	r3, #1
 800151a:	bf0c      	ite	eq
 800151c:	2301      	moveq	r3, #1
 800151e:	2300      	movne	r3, #0
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d002      	beq.n	800152c <_Z41__static_initialization_and_destruction_0ii+0x80>
 8001526:	4811      	ldr	r0, [pc, #68]	; (800156c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8001528:	f7ff fba0 	bl	8000c6c <_ZN5MotorC1Ev>
inline Motor backRightMotor;
 800152c:	4b10      	ldr	r3, [pc, #64]	; (8001570 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	3301      	adds	r3, #1
 8001532:	4a0f      	ldr	r2, [pc, #60]	; (8001570 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b01      	cmp	r3, #1
 800153c:	bf0c      	ite	eq
 800153e:	2301      	moveq	r3, #1
 8001540:	2300      	movne	r3, #0
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d002      	beq.n	800154e <_Z41__static_initialization_and_destruction_0ii+0xa2>
 8001548:	480a      	ldr	r0, [pc, #40]	; (8001574 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800154a:	f7ff fb8f 	bl	8000c6c <_ZN5MotorC1Ev>
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000450 	.word	0x20000450
 800155c:	20000290 	.word	0x20000290
 8001560:	20000454 	.word	0x20000454
 8001564:	20000300 	.word	0x20000300
 8001568:	20000458 	.word	0x20000458
 800156c:	20000370 	.word	0x20000370
 8001570:	2000045c 	.word	0x2000045c
 8001574:	200003e0 	.word	0x200003e0

08001578 <_GLOBAL__sub_I__Z7BT_SendPKc>:
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
 800157c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001580:	2001      	movs	r0, #1
 8001582:	f7ff ff93 	bl	80014ac <_Z41__static_initialization_and_destruction_0ii>
 8001586:	bd80      	pop	{r7, pc}

08001588 <_Z9lcd_beginv>:
#include "lcd.h"

void lcd_begin()
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
	uint8_t data;
	HAL_Delay(50);
 800158e:	2032      	movs	r0, #50	; 0x32
 8001590:	f000 ff1e 	bl	80023d0 <HAL_Delay>
	data = 0b00111100;
 8001594:	233c      	movs	r3, #60	; 0x3c
 8001596:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(5, data); // Wait 4ms
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	4619      	mov	r1, r3
 800159c:	2005      	movs	r0, #5
 800159e:	f000 f851 	bl	8001644 <_Z16send_lcd_commandhh>

	data = 0b00111100;
 80015a2:	233c      	movs	r3, #60	; 0x3c
 80015a4:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // Wait 100us
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	4619      	mov	r1, r3
 80015aa:	2001      	movs	r0, #1
 80015ac:	f000 f84a 	bl	8001644 <_Z16send_lcd_commandhh>

	data = 0b00111100;
 80015b0:	233c      	movs	r3, #60	; 0x3c
 80015b2:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // Wait 100us
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	4619      	mov	r1, r3
 80015b8:	2001      	movs	r0, #1
 80015ba:	f000 f843 	bl	8001644 <_Z16send_lcd_commandhh>

	data = 0b00101100;
 80015be:	232c      	movs	r3, #44	; 0x2c
 80015c0:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // Wait 100us
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	4619      	mov	r1, r3
 80015c6:	2001      	movs	r0, #1
 80015c8:	f000 f83c 	bl	8001644 <_Z16send_lcd_commandhh>

	data = 0b00101100;
 80015cc:	232c      	movs	r3, #44	; 0x2c
 80015ce:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // Wait 100us
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	4619      	mov	r1, r3
 80015d4:	2001      	movs	r0, #1
 80015d6:	f000 f835 	bl	8001644 <_Z16send_lcd_commandhh>

	data = 0b10001100;
 80015da:	238c      	movs	r3, #140	; 0x8c
 80015dc:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // NF
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	4619      	mov	r1, r3
 80015e2:	2001      	movs	r0, #1
 80015e4:	f000 f82e 	bl	8001644 <_Z16send_lcd_commandhh>

	data = 0x0C;
 80015e8:	230c      	movs	r3, #12
 80015ea:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data);
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	4619      	mov	r1, r3
 80015f0:	2001      	movs	r0, #1
 80015f2:	f000 f827 	bl	8001644 <_Z16send_lcd_commandhh>
	//-----------------------------------------------------------
	data = (0xC0) | (1 << 2);
 80015f6:	23c4      	movs	r3, #196	; 0xc4
 80015f8:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(5, data); // 6b
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	4619      	mov	r1, r3
 80015fe:	2005      	movs	r0, #5
 8001600:	f000 f820 	bl	8001644 <_Z16send_lcd_commandhh>

	data = (0x00) | (1 << 2);
 8001604:	2304      	movs	r3, #4
 8001606:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // 7a
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	4619      	mov	r1, r3
 800160c:	2001      	movs	r0, #1
 800160e:	f000 f819 	bl	8001644 <_Z16send_lcd_commandhh>

	data = (0x10) | (1 << 2);
 8001612:	2314      	movs	r3, #20
 8001614:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // 7b
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	4619      	mov	r1, r3
 800161a:	2001      	movs	r0, #1
 800161c:	f000 f812 	bl	8001644 <_Z16send_lcd_commandhh>

	data = (0x00) | (1 << 2);
 8001620:	2304      	movs	r3, #4
 8001622:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // 8a
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	4619      	mov	r1, r3
 8001628:	2001      	movs	r0, #1
 800162a:	f000 f80b 	bl	8001644 <_Z16send_lcd_commandhh>

	data = (0x60) | (1 << 2);
 800162e:	2364      	movs	r3, #100	; 0x64
 8001630:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(5, data); // 8b
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	4619      	mov	r1, r3
 8001636:	2005      	movs	r0, #5
 8001638:	f000 f804 	bl	8001644 <_Z16send_lcd_commandhh>
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <_Z16send_lcd_commandhh>:

void send_lcd_command(uint8_t delay, uint8_t info)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af02      	add	r7, sp, #8
 800164a:	4603      	mov	r3, r0
 800164c:	460a      	mov	r2, r1
 800164e:	71fb      	strb	r3, [r7, #7]
 8001650:	4613      	mov	r3, r2
 8001652:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, 0x27 << 1, &info, 1, 1000);
 8001654:	1dba      	adds	r2, r7, #6
 8001656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	2301      	movs	r3, #1
 800165e:	214e      	movs	r1, #78	; 0x4e
 8001660:	480d      	ldr	r0, [pc, #52]	; (8001698 <_Z16send_lcd_commandhh+0x54>)
 8001662:	f001 fadf 	bl	8002c24 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001666:	2001      	movs	r0, #1
 8001668:	f000 feb2 	bl	80023d0 <HAL_Delay>
	info = info & ~(1 << 2);
 800166c:	79bb      	ldrb	r3, [r7, #6]
 800166e:	f023 0304 	bic.w	r3, r3, #4
 8001672:	b2db      	uxtb	r3, r3
 8001674:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, 0x27 << 1, &info, 1, 1000);
 8001676:	1dba      	adds	r2, r7, #6
 8001678:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	2301      	movs	r3, #1
 8001680:	214e      	movs	r1, #78	; 0x4e
 8001682:	4805      	ldr	r0, [pc, #20]	; (8001698 <_Z16send_lcd_commandhh+0x54>)
 8001684:	f001 face 	bl	8002c24 <HAL_I2C_Master_Transmit>
	HAL_Delay(delay); // Wait 100us
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	4618      	mov	r0, r3
 800168c:	f000 fea0 	bl	80023d0 <HAL_Delay>
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	200004a8 	.word	0x200004a8

0800169c <_Z8send_msgPc>:

void send_msg(char *text)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	uint8_t data;

	while (*text)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d01d      	beq.n	80016e8 <_Z8send_msgPc+0x4c>
	{
		data = (*text & 0xF0) | 0x0D | 0x08;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	f023 030f 	bic.w	r3, r3, #15
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	f043 030d 	orr.w	r3, r3, #13
 80016ba:	73fb      	strb	r3, [r7, #15]
		send_lcd_command(1, data);
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	4619      	mov	r1, r3
 80016c0:	2001      	movs	r0, #1
 80016c2:	f7ff ffbf 	bl	8001644 <_Z16send_lcd_commandhh>
		data = ((*text << 4) & 0xF0) | 0x0D | 0x08;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	011b      	lsls	r3, r3, #4
 80016cc:	b25b      	sxtb	r3, r3
 80016ce:	f043 030d 	orr.w	r3, r3, #13
 80016d2:	b25b      	sxtb	r3, r3
 80016d4:	73fb      	strb	r3, [r7, #15]
		send_lcd_command(1, data);
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	4619      	mov	r1, r3
 80016da:	2001      	movs	r0, #1
 80016dc:	f7ff ffb2 	bl	8001644 <_Z16send_lcd_commandhh>
		text++;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3301      	adds	r3, #1
 80016e4:	607b      	str	r3, [r7, #4]
	while (*text)
 80016e6:	e7dd      	b.n	80016a4 <_Z8send_msgPc+0x8>
	}
}
 80016e8:	bf00      	nop
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <_Z9lcd_cleanv>:

void lcd_clean()
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af02      	add	r7, sp, #8
	uint8_t data = (0x08) | (1 << 2);
 80016f6:	230c      	movs	r3, #12
 80016f8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, 0x27 << 1, &data, 1, 1000);
 80016fa:	1dfa      	adds	r2, r7, #7
 80016fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	2301      	movs	r3, #1
 8001704:	214e      	movs	r1, #78	; 0x4e
 8001706:	4809      	ldr	r0, [pc, #36]	; (800172c <_Z9lcd_cleanv+0x3c>)
 8001708:	f001 fa8c 	bl	8002c24 <HAL_I2C_Master_Transmit>
	send_lcd_command(5, data);
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	4619      	mov	r1, r3
 8001710:	2005      	movs	r0, #5
 8001712:	f7ff ff97 	bl	8001644 <_Z16send_lcd_commandhh>
	data = (0x18) | (1 << 2) | 0x08;
 8001716:	231c      	movs	r3, #28
 8001718:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(5, data);
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	4619      	mov	r1, r3
 800171e:	2005      	movs	r0, #5
 8001720:	f7ff ff90 	bl	8001644 <_Z16send_lcd_commandhh>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200004a8 	.word	0x200004a8

08001730 <HAL_GPIO_EXTI_Callback>:
static void MX_TIM3_Init(void);
static void MX_USART1_UART_Init(void);

/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800173a:	88fb      	ldrh	r3, [r7, #6]
 800173c:	3b01      	subs	r3, #1
 800173e:	2b07      	cmp	r3, #7
 8001740:	d822      	bhi.n	8001788 <HAL_GPIO_EXTI_Callback+0x58>
 8001742:	a201      	add	r2, pc, #4	; (adr r2, 8001748 <HAL_GPIO_EXTI_Callback+0x18>)
 8001744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001748:	08001771 	.word	0x08001771
 800174c:	08001769 	.word	0x08001769
 8001750:	08001789 	.word	0x08001789
 8001754:	08001779 	.word	0x08001779
 8001758:	08001789 	.word	0x08001789
 800175c:	08001789 	.word	0x08001789
 8001760:	08001789 	.word	0x08001789
 8001764:	08001781 	.word	0x08001781
  {
  case Constants::kFrontLeftEncoder:
    frontLeftMotor.addTicks();
 8001768:	4809      	ldr	r0, [pc, #36]	; (8001790 <HAL_GPIO_EXTI_Callback+0x60>)
 800176a:	f7ff fc48 	bl	8000ffe <_ZN5Motor8addTicksEv>
    break;
 800176e:	e00b      	b.n	8001788 <HAL_GPIO_EXTI_Callback+0x58>
  case Constants::kFrontRightEncoder:
    frontRightMotor.addTicks();
 8001770:	4808      	ldr	r0, [pc, #32]	; (8001794 <HAL_GPIO_EXTI_Callback+0x64>)
 8001772:	f7ff fc44 	bl	8000ffe <_ZN5Motor8addTicksEv>
    break;
 8001776:	e007      	b.n	8001788 <HAL_GPIO_EXTI_Callback+0x58>
  case Constants::kBackLeftEncoder:
    backLeftMotor.addTicks();
 8001778:	4807      	ldr	r0, [pc, #28]	; (8001798 <HAL_GPIO_EXTI_Callback+0x68>)
 800177a:	f7ff fc40 	bl	8000ffe <_ZN5Motor8addTicksEv>
    break;
 800177e:	e003      	b.n	8001788 <HAL_GPIO_EXTI_Callback+0x58>
  case Constants::kBackRightEncoder:
    backRightMotor.addTicks();
 8001780:	4806      	ldr	r0, [pc, #24]	; (800179c <HAL_GPIO_EXTI_Callback+0x6c>)
 8001782:	f7ff fc3c 	bl	8000ffe <_ZN5Motor8addTicksEv>
    break;
 8001786:	bf00      	nop
  }
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000290 	.word	0x20000290
 8001794:	20000300 	.word	0x20000300
 8001798:	20000370 	.word	0x20000370
 800179c:	200003e0 	.word	0x200003e0

080017a0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b08f      	sub	sp, #60	; 0x3c
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a6:	f000 fdb1 	bl	800230c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017aa:	f000 f8ab 	bl	8001904 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ae:	f000 fa93 	bl	8001cd8 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 80017b2:	f000 f911 	bl	80019d8 <_ZL12MX_I2C1_Initv>
  MX_USB_DEVICE_Init();
 80017b6:	f008 fac7 	bl	8009d48 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80017ba:	f000 f941 	bl	8001a40 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 80017be:	f000 f9d5 	bl	8001b6c <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 80017c2:	f000 fa5b 	bl	8001c7c <_ZL19MX_USART1_UART_Initv>

  /* USER CODE BEGIN 2 */
  MX_GPIO_Init();
 80017c6:	f000 fa87 	bl	8001cd8 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 80017ca:	f000 f905 	bl	80019d8 <_ZL12MX_I2C1_Initv>
  MX_USB_DEVICE_Init();
 80017ce:	f008 fabb 	bl	8009d48 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_Init();
 80017d2:	f000 fd9b 	bl	800230c <HAL_Init>
  SystemClock_Config();
 80017d6:	f000 f895 	bl	8001904 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 80017da:	f000 fa7d 	bl	8001cd8 <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 80017de:	f000 f92f 	bl	8001a40 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 80017e2:	f000 f9c3 	bl	8001b6c <_ZL12MX_TIM3_Initv>

  lcd_begin();
 80017e6:	f7ff fecf 	bl	8001588 <_Z9lcd_beginv>
  send_msg("Equipo4");
 80017ea:	483e      	ldr	r0, [pc, #248]	; (80018e4 <main+0x144>)
 80017ec:	f7ff ff56 	bl	800169c <_Z8send_msgPc>

  movementInit();
 80017f0:	f7ff fc4c 	bl	800108c <_Z12movementInitv>

  /// SPEED
  setSpeed(speed);
 80017f4:	4b3c      	ldr	r3, [pc, #240]	; (80018e8 <main+0x148>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fca5 	bl	8001148 <_Z8setSpeedi>
  uint32_t last_average_time = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	633b      	str	r3, [r7, #48]	; 0x30
  float total_distance = 0;
 8001802:	f04f 0300 	mov.w	r3, #0
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
  float last_time_print = HAL_GetTick();
 8001808:	f000 fdd8 	bl	80023bc <HAL_GetTick>
 800180c:	4603      	mov	r3, r0
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe ffa0 	bl	8000754 <__aeabi_ui2f>
 8001814:	4603      	mov	r3, r0
 8001816:	637b      	str	r3, [r7, #52]	; 0x34
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    uint32_t now = HAL_GetTick();
 8001818:	f000 fdd0 	bl	80023bc <HAL_GetTick>
 800181c:	62b8      	str	r0, [r7, #40]	; 0x28
    updateMovement(now);
 800181e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001820:	f7ff fcda 	bl	80011d8 <_Z14updateMovementm>

    int distancia_entera = (int)((backLeftMotor.getDistance() + backRightMotor.getDistance() + frontLeftMotor.getDistance() + frontRightMotor.getDistance()) / 4);
 8001824:	4831      	ldr	r0, [pc, #196]	; (80018ec <main+0x14c>)
 8001826:	f7ff fbdf 	bl	8000fe8 <_ZN5Motor11getDistanceEv>
 800182a:	4604      	mov	r4, r0
 800182c:	4830      	ldr	r0, [pc, #192]	; (80018f0 <main+0x150>)
 800182e:	f7ff fbdb 	bl	8000fe8 <_ZN5Motor11getDistanceEv>
 8001832:	4603      	mov	r3, r0
 8001834:	4619      	mov	r1, r3
 8001836:	4620      	mov	r0, r4
 8001838:	f7fe fedc 	bl	80005f4 <__addsf3>
 800183c:	4603      	mov	r3, r0
 800183e:	461c      	mov	r4, r3
 8001840:	482c      	ldr	r0, [pc, #176]	; (80018f4 <main+0x154>)
 8001842:	f7ff fbd1 	bl	8000fe8 <_ZN5Motor11getDistanceEv>
 8001846:	4603      	mov	r3, r0
 8001848:	4619      	mov	r1, r3
 800184a:	4620      	mov	r0, r4
 800184c:	f7fe fed2 	bl	80005f4 <__addsf3>
 8001850:	4603      	mov	r3, r0
 8001852:	461c      	mov	r4, r3
 8001854:	4828      	ldr	r0, [pc, #160]	; (80018f8 <main+0x158>)
 8001856:	f7ff fbc7 	bl	8000fe8 <_ZN5Motor11getDistanceEv>
 800185a:	4603      	mov	r3, r0
 800185c:	4619      	mov	r1, r3
 800185e:	4620      	mov	r0, r4
 8001860:	f7fe fec8 	bl	80005f4 <__addsf3>
 8001864:	4603      	mov	r3, r0
 8001866:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff f87e 	bl	800096c <__aeabi_fdiv>
 8001870:	4603      	mov	r3, r0
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff f98c 	bl	8000b90 <__aeabi_f2iz>
 8001878:	4603      	mov	r3, r0
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
    if (now - last_time_print > 500)
 800187c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800187e:	f7fe ff69 	bl	8000754 <__aeabi_ui2f>
 8001882:	4603      	mov	r3, r0
 8001884:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe feb2 	bl	80005f0 <__aeabi_fsub>
 800188c:	4603      	mov	r3, r0
 800188e:	491b      	ldr	r1, [pc, #108]	; (80018fc <main+0x15c>)
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff f973 	bl	8000b7c <__aeabi_fcmpgt>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d019      	beq.n	80018d0 <main+0x130>
    {
      char buffer[32];
      sprintf(buffer, "Vel %d Dis  %d", (int)frontLeftMotor.getSpeed(), distancia_entera);
 800189c:	4815      	ldr	r0, [pc, #84]	; (80018f4 <main+0x154>)
 800189e:	f7ff fbbc 	bl	800101a <_ZN5Motor8getSpeedEv>
 80018a2:	4603      	mov	r3, r0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff f973 	bl	8000b90 <__aeabi_f2iz>
 80018aa:	4602      	mov	r2, r0
 80018ac:	1d38      	adds	r0, r7, #4
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	4913      	ldr	r1, [pc, #76]	; (8001900 <main+0x160>)
 80018b2:	f008 fef1 	bl	800a698 <siprintf>
      lcd_clean();
 80018b6:	f7ff ff1b 	bl	80016f0 <_Z9lcd_cleanv>
      send_msg(buffer);
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff feed 	bl	800169c <_Z8send_msgPc>
      last_time_print = now;
 80018c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80018c4:	f7fe ff46 	bl	8000754 <__aeabi_ui2f>
 80018c8:	4603      	mov	r3, r0
 80018ca:	637b      	str	r3, [r7, #52]	; 0x34
      sendMotorSpeeds();
 80018cc:	f7ff fdb0 	bl	8001430 <_Z15sendMotorSpeedsv>
    }
    HAL_Delay(100);
 80018d0:	2064      	movs	r0, #100	; 0x64
 80018d2:	f000 fd7d 	bl	80023d0 <HAL_Delay>
    while (distancia_entera > 300)
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80018dc:	dd9c      	ble.n	8001818 <main+0x78>
    {
      stop();
 80018de:	f7ff fc63 	bl	80011a8 <_Z4stopv>
    while (distancia_entera > 300)
 80018e2:	e7f8      	b.n	80018d6 <main+0x136>
 80018e4:	0800af40 	.word	0x0800af40
 80018e8:	20000000 	.word	0x20000000
 80018ec:	20000370 	.word	0x20000370
 80018f0:	200003e0 	.word	0x200003e0
 80018f4:	20000290 	.word	0x20000290
 80018f8:	20000300 	.word	0x20000300
 80018fc:	43fa0000 	.word	0x43fa0000
 8001900:	0800af48 	.word	0x0800af48

08001904 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b094      	sub	sp, #80	; 0x50
 8001908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800190a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800190e:	2228      	movs	r2, #40	; 0x28
 8001910:	2100      	movs	r1, #0
 8001912:	4618      	mov	r0, r3
 8001914:	f008 feb8 	bl	800a688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001934:	2301      	movs	r3, #1
 8001936:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001938:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800193e:	2300      	movs	r3, #0
 8001940:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001942:	2301      	movs	r3, #1
 8001944:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001946:	2302      	movs	r3, #2
 8001948:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800194a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800194e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001950:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001954:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001956:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800195a:	4618      	mov	r0, r3
 800195c:	f003 fa1e 	bl	8004d9c <HAL_RCC_OscConfig>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	bf14      	ite	ne
 8001966:	2301      	movne	r3, #1
 8001968:	2300      	moveq	r3, #0
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001970:	f000 fa4c 	bl	8001e0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001974:	230f      	movs	r3, #15
 8001976:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001978:	2302      	movs	r3, #2
 800197a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800197c:	2300      	movs	r3, #0
 800197e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001984:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001986:	2300      	movs	r3, #0
 8001988:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	2102      	movs	r1, #2
 8001990:	4618      	mov	r0, r3
 8001992:	f003 fc83 	bl	800529c <HAL_RCC_ClockConfig>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	bf14      	ite	ne
 800199c:	2301      	movne	r3, #1
 800199e:	2300      	moveq	r3, #0
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 80019a6:	f000 fa31 	bl	8001e0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80019aa:	2310      	movs	r3, #16
 80019ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	4618      	mov	r0, r3
 80019b6:	f003 fdff 	bl	80055b8 <HAL_RCCEx_PeriphCLKConfig>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	bf14      	ite	ne
 80019c0:	2301      	movne	r3, #1
 80019c2:	2300      	moveq	r3, #0
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 80019ca:	f000 fa1f 	bl	8001e0c <Error_Handler>
  }
}
 80019ce:	bf00      	nop
 80019d0:	3750      	adds	r7, #80	; 0x50
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <_ZL12MX_I2C1_Initv>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019dc:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <_ZL12MX_I2C1_Initv+0x5c>)
 80019de:	4a16      	ldr	r2, [pc, #88]	; (8001a38 <_ZL12MX_I2C1_Initv+0x60>)
 80019e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019e2:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <_ZL12MX_I2C1_Initv+0x5c>)
 80019e4:	4a15      	ldr	r2, [pc, #84]	; (8001a3c <_ZL12MX_I2C1_Initv+0x64>)
 80019e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <_ZL12MX_I2C1_Initv+0x5c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <_ZL12MX_I2C1_Initv+0x5c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <_ZL12MX_I2C1_Initv+0x5c>)
 80019f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019fc:	4b0d      	ldr	r3, [pc, #52]	; (8001a34 <_ZL12MX_I2C1_Initv+0x5c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a02:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <_ZL12MX_I2C1_Initv+0x5c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a08:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <_ZL12MX_I2C1_Initv+0x5c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <_ZL12MX_I2C1_Initv+0x5c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a14:	4807      	ldr	r0, [pc, #28]	; (8001a34 <_ZL12MX_I2C1_Initv+0x5c>)
 8001a16:	f000 ffc1 	bl	800299c <HAL_I2C_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	bf14      	ite	ne
 8001a20:	2301      	movne	r3, #1
 8001a22:	2300      	moveq	r3, #0
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001a2a:	f000 f9ef 	bl	8001e0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200004a8 	.word	0x200004a8
 8001a38:	40005400 	.word	0x40005400
 8001a3c:	000186a0 	.word	0x000186a0

08001a40 <_ZL12MX_TIM1_Initv>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b092      	sub	sp, #72	; 0x48
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
 8001a60:	615a      	str	r2, [r3, #20]
 8001a62:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	2220      	movs	r2, #32
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f008 fe0c 	bl	800a688 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a70:	4b3c      	ldr	r3, [pc, #240]	; (8001b64 <_ZL12MX_TIM1_Initv+0x124>)
 8001a72:	4a3d      	ldr	r2, [pc, #244]	; (8001b68 <_ZL12MX_TIM1_Initv+0x128>)
 8001a74:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 13;
 8001a76:	4b3b      	ldr	r3, [pc, #236]	; (8001b64 <_ZL12MX_TIM1_Initv+0x124>)
 8001a78:	220d      	movs	r2, #13
 8001a7a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a7c:	4b39      	ldr	r3, [pc, #228]	; (8001b64 <_ZL12MX_TIM1_Initv+0x124>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8001a82:	4b38      	ldr	r3, [pc, #224]	; (8001b64 <_ZL12MX_TIM1_Initv+0x124>)
 8001a84:	22ff      	movs	r2, #255	; 0xff
 8001a86:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a88:	4b36      	ldr	r3, [pc, #216]	; (8001b64 <_ZL12MX_TIM1_Initv+0x124>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a8e:	4b35      	ldr	r3, [pc, #212]	; (8001b64 <_ZL12MX_TIM1_Initv+0x124>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a94:	4b33      	ldr	r3, [pc, #204]	; (8001b64 <_ZL12MX_TIM1_Initv+0x124>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a9a:	4832      	ldr	r0, [pc, #200]	; (8001b64 <_ZL12MX_TIM1_Initv+0x124>)
 8001a9c:	f003 fe42 	bl	8005724 <HAL_TIM_PWM_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	bf14      	ite	ne
 8001aa6:	2301      	movne	r3, #1
 8001aa8:	2300      	moveq	r3, #0
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <_ZL12MX_TIM1_Initv+0x74>
  {
    Error_Handler();
 8001ab0:	f000 f9ac 	bl	8001e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001abc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4828      	ldr	r0, [pc, #160]	; (8001b64 <_ZL12MX_TIM1_Initv+0x124>)
 8001ac4:	f004 f9fc 	bl	8005ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	bf14      	ite	ne
 8001ace:	2301      	movne	r3, #1
 8001ad0:	2300      	moveq	r3, #0
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <_ZL12MX_TIM1_Initv+0x9c>
  {
    Error_Handler();
 8001ad8:	f000 f998 	bl	8001e0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001adc:	2360      	movs	r3, #96	; 0x60
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001af0:	2300      	movs	r3, #0
 8001af2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001af4:	2300      	movs	r3, #0
 8001af6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001afc:	2200      	movs	r2, #0
 8001afe:	4619      	mov	r1, r3
 8001b00:	4818      	ldr	r0, [pc, #96]	; (8001b64 <_ZL12MX_TIM1_Initv+0x124>)
 8001b02:	f003 ff01 	bl	8005908 <HAL_TIM_PWM_ConfigChannel>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	bf14      	ite	ne
 8001b0c:	2301      	movne	r3, #1
 8001b0e:	2300      	moveq	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <_ZL12MX_TIM1_Initv+0xda>
  {
    Error_Handler();
 8001b16:	f000 f979 	bl	8001e0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b32:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4809      	ldr	r0, [pc, #36]	; (8001b64 <_ZL12MX_TIM1_Initv+0x124>)
 8001b3e:	f004 fa1d 	bl	8005f7c <HAL_TIMEx_ConfigBreakDeadTime>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	bf14      	ite	ne
 8001b48:	2301      	movne	r3, #1
 8001b4a:	2300      	moveq	r3, #0
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <_ZL12MX_TIM1_Initv+0x116>
  {
    Error_Handler();
 8001b52:	f000 f95b 	bl	8001e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b56:	4803      	ldr	r0, [pc, #12]	; (8001b64 <_ZL12MX_TIM1_Initv+0x124>)
 8001b58:	f000 fa6e 	bl	8002038 <HAL_TIM_MspPostInit>
}
 8001b5c:	bf00      	nop
 8001b5e:	3748      	adds	r7, #72	; 0x48
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000200 	.word	0x20000200
 8001b68:	40012c00 	.word	0x40012c00

08001b6c <_ZL12MX_TIM3_Initv>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	; 0x28
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b72:	f107 0320 	add.w	r3, r7, #32
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
 8001b88:	611a      	str	r2, [r3, #16]
 8001b8a:	615a      	str	r2, [r3, #20]
 8001b8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b8e:	4b39      	ldr	r3, [pc, #228]	; (8001c74 <_ZL12MX_TIM3_Initv+0x108>)
 8001b90:	4a39      	ldr	r2, [pc, #228]	; (8001c78 <_ZL12MX_TIM3_Initv+0x10c>)
 8001b92:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 13;
 8001b94:	4b37      	ldr	r3, [pc, #220]	; (8001c74 <_ZL12MX_TIM3_Initv+0x108>)
 8001b96:	220d      	movs	r2, #13
 8001b98:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9a:	4b36      	ldr	r3, [pc, #216]	; (8001c74 <_ZL12MX_TIM3_Initv+0x108>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8001ba0:	4b34      	ldr	r3, [pc, #208]	; (8001c74 <_ZL12MX_TIM3_Initv+0x108>)
 8001ba2:	22ff      	movs	r2, #255	; 0xff
 8001ba4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba6:	4b33      	ldr	r3, [pc, #204]	; (8001c74 <_ZL12MX_TIM3_Initv+0x108>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bac:	4b31      	ldr	r3, [pc, #196]	; (8001c74 <_ZL12MX_TIM3_Initv+0x108>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001bb2:	4830      	ldr	r0, [pc, #192]	; (8001c74 <_ZL12MX_TIM3_Initv+0x108>)
 8001bb4:	f003 fdb6 	bl	8005724 <HAL_TIM_PWM_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	bf14      	ite	ne
 8001bbe:	2301      	movne	r3, #1
 8001bc0:	2300      	moveq	r3, #0
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <_ZL12MX_TIM3_Initv+0x60>
  {
    Error_Handler();
 8001bc8:	f000 f920 	bl	8001e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bd4:	f107 0320 	add.w	r3, r7, #32
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4826      	ldr	r0, [pc, #152]	; (8001c74 <_ZL12MX_TIM3_Initv+0x108>)
 8001bdc:	f004 f970 	bl	8005ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	bf14      	ite	ne
 8001be6:	2301      	movne	r3, #1
 8001be8:	2300      	moveq	r3, #0
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <_ZL12MX_TIM3_Initv+0x88>
  {
    Error_Handler();
 8001bf0:	f000 f90c 	bl	8001e0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bf4:	2360      	movs	r3, #96	; 0x60
 8001bf6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	2200      	movs	r2, #0
 8001c08:	4619      	mov	r1, r3
 8001c0a:	481a      	ldr	r0, [pc, #104]	; (8001c74 <_ZL12MX_TIM3_Initv+0x108>)
 8001c0c:	f003 fe7c 	bl	8005908 <HAL_TIM_PWM_ConfigChannel>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	bf14      	ite	ne
 8001c16:	2301      	movne	r3, #1
 8001c18:	2300      	moveq	r3, #0
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <_ZL12MX_TIM3_Initv+0xb8>
  {
    Error_Handler();
 8001c20:	f000 f8f4 	bl	8001e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	2204      	movs	r2, #4
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4812      	ldr	r0, [pc, #72]	; (8001c74 <_ZL12MX_TIM3_Initv+0x108>)
 8001c2c:	f003 fe6c 	bl	8005908 <HAL_TIM_PWM_ConfigChannel>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	bf14      	ite	ne
 8001c36:	2301      	movne	r3, #1
 8001c38:	2300      	moveq	r3, #0
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8001c40:	f000 f8e4 	bl	8001e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c44:	1d3b      	adds	r3, r7, #4
 8001c46:	220c      	movs	r2, #12
 8001c48:	4619      	mov	r1, r3
 8001c4a:	480a      	ldr	r0, [pc, #40]	; (8001c74 <_ZL12MX_TIM3_Initv+0x108>)
 8001c4c:	f003 fe5c 	bl	8005908 <HAL_TIM_PWM_ConfigChannel>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	bf14      	ite	ne
 8001c56:	2301      	movne	r3, #1
 8001c58:	2300      	moveq	r3, #0
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <_ZL12MX_TIM3_Initv+0xf8>
  {
    Error_Handler();
 8001c60:	f000 f8d4 	bl	8001e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c64:	4803      	ldr	r0, [pc, #12]	; (8001c74 <_ZL12MX_TIM3_Initv+0x108>)
 8001c66:	f000 f9e7 	bl	8002038 <HAL_TIM_MspPostInit>
}
 8001c6a:	bf00      	nop
 8001c6c:	3728      	adds	r7, #40	; 0x28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000248 	.word	0x20000248
 8001c78:	40000400 	.word	0x40000400

08001c7c <_ZL19MX_USART1_UART_Initv>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c80:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001c82:	4a14      	ldr	r2, [pc, #80]	; (8001cd4 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001c84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001c86:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001c88:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c8e:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c94:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ca2:	220c      	movs	r2, #12
 8001ca4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cac:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cb2:	4807      	ldr	r0, [pc, #28]	; (8001cd0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001cb4:	f004 f9b3 	bl	800601e <HAL_UART_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	bf14      	ite	ne
 8001cbe:	2301      	movne	r3, #1
 8001cc0:	2300      	moveq	r3, #0
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001cc8:	f000 f8a0 	bl	8001e0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000460 	.word	0x20000460
 8001cd4:	40013800 	.word	0x40013800

08001cd8 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cde:	f107 0310 	add.w	r3, r7, #16
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	605a      	str	r2, [r3, #4]
 8001ce8:	609a      	str	r2, [r3, #8]
 8001cea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cec:	4b43      	ldr	r3, [pc, #268]	; (8001dfc <_ZL12MX_GPIO_Initv+0x124>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	4a42      	ldr	r2, [pc, #264]	; (8001dfc <_ZL12MX_GPIO_Initv+0x124>)
 8001cf2:	f043 0310 	orr.w	r3, r3, #16
 8001cf6:	6193      	str	r3, [r2, #24]
 8001cf8:	4b40      	ldr	r3, [pc, #256]	; (8001dfc <_ZL12MX_GPIO_Initv+0x124>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	f003 0310 	and.w	r3, r3, #16
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d04:	4b3d      	ldr	r3, [pc, #244]	; (8001dfc <_ZL12MX_GPIO_Initv+0x124>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	4a3c      	ldr	r2, [pc, #240]	; (8001dfc <_ZL12MX_GPIO_Initv+0x124>)
 8001d0a:	f043 0320 	orr.w	r3, r3, #32
 8001d0e:	6193      	str	r3, [r2, #24]
 8001d10:	4b3a      	ldr	r3, [pc, #232]	; (8001dfc <_ZL12MX_GPIO_Initv+0x124>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f003 0320 	and.w	r3, r3, #32
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1c:	4b37      	ldr	r3, [pc, #220]	; (8001dfc <_ZL12MX_GPIO_Initv+0x124>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	4a36      	ldr	r2, [pc, #216]	; (8001dfc <_ZL12MX_GPIO_Initv+0x124>)
 8001d22:	f043 0304 	orr.w	r3, r3, #4
 8001d26:	6193      	str	r3, [r2, #24]
 8001d28:	4b34      	ldr	r3, [pc, #208]	; (8001dfc <_ZL12MX_GPIO_Initv+0x124>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	607b      	str	r3, [r7, #4]
 8001d32:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d34:	4b31      	ldr	r3, [pc, #196]	; (8001dfc <_ZL12MX_GPIO_Initv+0x124>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	4a30      	ldr	r2, [pc, #192]	; (8001dfc <_ZL12MX_GPIO_Initv+0x124>)
 8001d3a:	f043 0308 	orr.w	r3, r3, #8
 8001d3e:	6193      	str	r3, [r2, #24]
 8001d40:	4b2e      	ldr	r3, [pc, #184]	; (8001dfc <_ZL12MX_GPIO_Initv+0x124>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	603b      	str	r3, [r7, #0]
 8001d4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2130      	movs	r1, #48	; 0x30
 8001d50:	482b      	ldr	r0, [pc, #172]	; (8001e00 <_ZL12MX_GPIO_Initv+0x128>)
 8001d52:	f000 fdf3 	bl	800293c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 8001d56:	2200      	movs	r2, #0
 8001d58:	f64e 4101 	movw	r1, #60417	; 0xec01
 8001d5c:	4829      	ldr	r0, [pc, #164]	; (8001e04 <_ZL12MX_GPIO_Initv+0x12c>)
 8001d5e:	f000 fded 	bl	800293c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 PA4*/
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4;
 8001d62:	231f      	movs	r3, #31
 8001d64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d66:	4b28      	ldr	r3, [pc, #160]	; (8001e08 <_ZL12MX_GPIO_Initv+0x130>)
 8001d68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6e:	f107 0310 	add.w	r3, r7, #16
 8001d72:	4619      	mov	r1, r3
 8001d74:	4822      	ldr	r0, [pc, #136]	; (8001e00 <_ZL12MX_GPIO_Initv+0x128>)
 8001d76:	f000 fc5d 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8001d7a:	2330      	movs	r3, #48	; 0x30
 8001d7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d86:	2302      	movs	r3, #2
 8001d88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8a:	f107 0310 	add.w	r3, r7, #16
 8001d8e:	4619      	mov	r1, r3
 8001d90:	481b      	ldr	r0, [pc, #108]	; (8001e00 <_ZL12MX_GPIO_Initv+0x128>)
 8001d92:	f000 fc4f 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB11 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8001d96:	f64f 4301 	movw	r3, #64513	; 0xfc01
 8001d9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da4:	2302      	movs	r3, #2
 8001da6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da8:	f107 0310 	add.w	r3, r7, #16
 8001dac:	4619      	mov	r1, r3
 8001dae:	4815      	ldr	r0, [pc, #84]	; (8001e04 <_ZL12MX_GPIO_Initv+0x12c>)
 8001db0:	f000 fc40 	bl	8002634 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001db4:	2200      	movs	r2, #0
 8001db6:	2100      	movs	r1, #0
 8001db8:	2006      	movs	r0, #6
 8001dba:	f000 fc04 	bl	80025c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001dbe:	2006      	movs	r0, #6
 8001dc0:	f000 fc1d 	bl	80025fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	2007      	movs	r0, #7
 8001dca:	f000 fbfc 	bl	80025c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001dce:	2007      	movs	r0, #7
 8001dd0:	f000 fc15 	bl	80025fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	2008      	movs	r0, #8
 8001dda:	f000 fbf4 	bl	80025c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001dde:	2008      	movs	r0, #8
 8001de0:	f000 fc0d 	bl	80025fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001de4:	2200      	movs	r2, #0
 8001de6:	2100      	movs	r1, #0
 8001de8:	2009      	movs	r0, #9
 8001dea:	f000 fbec 	bl	80025c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001dee:	2009      	movs	r0, #9
 8001df0:	f000 fc05 	bl	80025fe <HAL_NVIC_EnableIRQ>
}
 8001df4:	bf00      	nop
 8001df6:	3720      	adds	r7, #32
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40010800 	.word	0x40010800
 8001e04:	40010c00 	.word	0x40010c00
 8001e08:	10110000 	.word	0x10110000

08001e0c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e10:	b672      	cpsid	i
}
 8001e12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e14:	e7fe      	b.n	8001e14 <Error_Handler+0x8>
	...

08001e18 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d148      	bne.n	8001eba <_Z41__static_initialization_and_destruction_0ii+0xa2>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d143      	bne.n	8001eba <_Z41__static_initialization_and_destruction_0ii+0xa2>
inline Motor frontLeftMotor;
 8001e32:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	3301      	adds	r3, #1
 8001e38:	4a22      	ldr	r2, [pc, #136]	; (8001ec4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8001e3a:	6013      	str	r3, [r2, #0]
 8001e3c:	4b21      	ldr	r3, [pc, #132]	; (8001ec4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	bf0c      	ite	eq
 8001e44:	2301      	moveq	r3, #1
 8001e46:	2300      	movne	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d002      	beq.n	8001e54 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8001e4e:	481e      	ldr	r0, [pc, #120]	; (8001ec8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8001e50:	f7fe ff0c 	bl	8000c6c <_ZN5MotorC1Ev>
inline Motor frontRightMotor;
 8001e54:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	4a1c      	ldr	r2, [pc, #112]	; (8001ecc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	bf0c      	ite	eq
 8001e66:	2301      	moveq	r3, #1
 8001e68:	2300      	movne	r3, #0
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d002      	beq.n	8001e76 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8001e70:	4817      	ldr	r0, [pc, #92]	; (8001ed0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8001e72:	f7fe fefb 	bl	8000c6c <_ZN5MotorC1Ev>
inline Motor backLeftMotor;
 8001e76:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	4a15      	ldr	r2, [pc, #84]	; (8001ed4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	bf0c      	ite	eq
 8001e88:	2301      	moveq	r3, #1
 8001e8a:	2300      	movne	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d002      	beq.n	8001e98 <_Z41__static_initialization_and_destruction_0ii+0x80>
 8001e92:	4811      	ldr	r0, [pc, #68]	; (8001ed8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8001e94:	f7fe feea 	bl	8000c6c <_ZN5MotorC1Ev>
inline Motor backRightMotor;
 8001e98:	4b10      	ldr	r3, [pc, #64]	; (8001edc <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	4a0f      	ldr	r2, [pc, #60]	; (8001edc <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	bf0c      	ite	eq
 8001eaa:	2301      	moveq	r3, #1
 8001eac:	2300      	movne	r3, #0
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d002      	beq.n	8001eba <_Z41__static_initialization_and_destruction_0ii+0xa2>
 8001eb4:	480a      	ldr	r0, [pc, #40]	; (8001ee0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8001eb6:	f7fe fed9 	bl	8000c6c <_ZN5MotorC1Ev>
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000450 	.word	0x20000450
 8001ec8:	20000290 	.word	0x20000290
 8001ecc:	20000454 	.word	0x20000454
 8001ed0:	20000300 	.word	0x20000300
 8001ed4:	20000458 	.word	0x20000458
 8001ed8:	20000370 	.word	0x20000370
 8001edc:	2000045c 	.word	0x2000045c
 8001ee0:	200003e0 	.word	0x200003e0

08001ee4 <_GLOBAL__sub_I_hi2c1>:
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001eec:	2001      	movs	r0, #1
 8001eee:	f7ff ff93 	bl	8001e18 <_Z41__static_initialization_and_destruction_0ii>
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001efa:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <HAL_MspInit+0x5c>)
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	4a14      	ldr	r2, [pc, #80]	; (8001f50 <HAL_MspInit+0x5c>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	6193      	str	r3, [r2, #24]
 8001f06:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <HAL_MspInit+0x5c>)
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f12:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <HAL_MspInit+0x5c>)
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	4a0e      	ldr	r2, [pc, #56]	; (8001f50 <HAL_MspInit+0x5c>)
 8001f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	61d3      	str	r3, [r2, #28]
 8001f1e:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <HAL_MspInit+0x5c>)
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f26:	607b      	str	r3, [r7, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <HAL_MspInit+0x60>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	4a04      	ldr	r2, [pc, #16]	; (8001f54 <HAL_MspInit+0x60>)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f46:	bf00      	nop
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr
 8001f50:	40021000 	.word	0x40021000
 8001f54:	40010000 	.word	0x40010000

08001f58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b088      	sub	sp, #32
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	f107 0310 	add.w	r3, r7, #16
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a15      	ldr	r2, [pc, #84]	; (8001fc8 <HAL_I2C_MspInit+0x70>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d123      	bne.n	8001fc0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f78:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <HAL_I2C_MspInit+0x74>)
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	4a13      	ldr	r2, [pc, #76]	; (8001fcc <HAL_I2C_MspInit+0x74>)
 8001f7e:	f043 0308 	orr.w	r3, r3, #8
 8001f82:	6193      	str	r3, [r2, #24]
 8001f84:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <HAL_I2C_MspInit+0x74>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f90:	23c0      	movs	r3, #192	; 0xc0
 8001f92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f94:	2312      	movs	r3, #18
 8001f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9c:	f107 0310 	add.w	r3, r7, #16
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	480b      	ldr	r0, [pc, #44]	; (8001fd0 <HAL_I2C_MspInit+0x78>)
 8001fa4:	f000 fb46 	bl	8002634 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fa8:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <HAL_I2C_MspInit+0x74>)
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	4a07      	ldr	r2, [pc, #28]	; (8001fcc <HAL_I2C_MspInit+0x74>)
 8001fae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fb2:	61d3      	str	r3, [r2, #28]
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <HAL_I2C_MspInit+0x74>)
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fc0:	bf00      	nop
 8001fc2:	3720      	adds	r7, #32
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40005400 	.word	0x40005400
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40010c00 	.word	0x40010c00

08001fd4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a12      	ldr	r2, [pc, #72]	; (800202c <HAL_TIM_PWM_MspInit+0x58>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d10c      	bne.n	8002000 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fe6:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_TIM_PWM_MspInit+0x5c>)
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	4a11      	ldr	r2, [pc, #68]	; (8002030 <HAL_TIM_PWM_MspInit+0x5c>)
 8001fec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ff0:	6193      	str	r3, [r2, #24]
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <HAL_TIM_PWM_MspInit+0x5c>)
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ffe:	e010      	b.n	8002022 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a0b      	ldr	r2, [pc, #44]	; (8002034 <HAL_TIM_PWM_MspInit+0x60>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d10b      	bne.n	8002022 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <HAL_TIM_PWM_MspInit+0x5c>)
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	4a08      	ldr	r2, [pc, #32]	; (8002030 <HAL_TIM_PWM_MspInit+0x5c>)
 8002010:	f043 0302 	orr.w	r3, r3, #2
 8002014:	61d3      	str	r3, [r2, #28]
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_TIM_PWM_MspInit+0x5c>)
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	60bb      	str	r3, [r7, #8]
 8002020:	68bb      	ldr	r3, [r7, #8]
}
 8002022:	bf00      	nop
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr
 800202c:	40012c00 	.word	0x40012c00
 8002030:	40021000 	.word	0x40021000
 8002034:	40000400 	.word	0x40000400

08002038 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08a      	sub	sp, #40	; 0x28
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	f107 0318 	add.w	r3, r7, #24
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a2b      	ldr	r2, [pc, #172]	; (8002100 <HAL_TIM_MspPostInit+0xc8>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d119      	bne.n	800208c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002058:	4b2a      	ldr	r3, [pc, #168]	; (8002104 <HAL_TIM_MspPostInit+0xcc>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	4a29      	ldr	r2, [pc, #164]	; (8002104 <HAL_TIM_MspPostInit+0xcc>)
 800205e:	f043 0304 	orr.w	r3, r3, #4
 8002062:	6193      	str	r3, [r2, #24]
 8002064:	4b27      	ldr	r3, [pc, #156]	; (8002104 <HAL_TIM_MspPostInit+0xcc>)
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002070:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002076:	2302      	movs	r3, #2
 8002078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2302      	movs	r3, #2
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207e:	f107 0318 	add.w	r3, r7, #24
 8002082:	4619      	mov	r1, r3
 8002084:	4820      	ldr	r0, [pc, #128]	; (8002108 <HAL_TIM_MspPostInit+0xd0>)
 8002086:	f000 fad5 	bl	8002634 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800208a:	e034      	b.n	80020f6 <HAL_TIM_MspPostInit+0xbe>
  else if(htim->Instance==TIM3)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a1e      	ldr	r2, [pc, #120]	; (800210c <HAL_TIM_MspPostInit+0xd4>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d12f      	bne.n	80020f6 <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002096:	4b1b      	ldr	r3, [pc, #108]	; (8002104 <HAL_TIM_MspPostInit+0xcc>)
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	4a1a      	ldr	r2, [pc, #104]	; (8002104 <HAL_TIM_MspPostInit+0xcc>)
 800209c:	f043 0304 	orr.w	r3, r3, #4
 80020a0:	6193      	str	r3, [r2, #24]
 80020a2:	4b18      	ldr	r3, [pc, #96]	; (8002104 <HAL_TIM_MspPostInit+0xcc>)
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ae:	4b15      	ldr	r3, [pc, #84]	; (8002104 <HAL_TIM_MspPostInit+0xcc>)
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	4a14      	ldr	r2, [pc, #80]	; (8002104 <HAL_TIM_MspPostInit+0xcc>)
 80020b4:	f043 0308 	orr.w	r3, r3, #8
 80020b8:	6193      	str	r3, [r2, #24]
 80020ba:	4b12      	ldr	r3, [pc, #72]	; (8002104 <HAL_TIM_MspPostInit+0xcc>)
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020c6:	23c0      	movs	r3, #192	; 0xc0
 80020c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ca:	2302      	movs	r3, #2
 80020cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ce:	2302      	movs	r3, #2
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d2:	f107 0318 	add.w	r3, r7, #24
 80020d6:	4619      	mov	r1, r3
 80020d8:	480b      	ldr	r0, [pc, #44]	; (8002108 <HAL_TIM_MspPostInit+0xd0>)
 80020da:	f000 faab 	bl	8002634 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80020de:	2302      	movs	r3, #2
 80020e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e2:	2302      	movs	r3, #2
 80020e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e6:	2302      	movs	r3, #2
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ea:	f107 0318 	add.w	r3, r7, #24
 80020ee:	4619      	mov	r1, r3
 80020f0:	4807      	ldr	r0, [pc, #28]	; (8002110 <HAL_TIM_MspPostInit+0xd8>)
 80020f2:	f000 fa9f 	bl	8002634 <HAL_GPIO_Init>
}
 80020f6:	bf00      	nop
 80020f8:	3728      	adds	r7, #40	; 0x28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40012c00 	.word	0x40012c00
 8002104:	40021000 	.word	0x40021000
 8002108:	40010800 	.word	0x40010800
 800210c:	40000400 	.word	0x40000400
 8002110:	40010c00 	.word	0x40010c00

08002114 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b088      	sub	sp, #32
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 0310 	add.w	r3, r7, #16
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a1c      	ldr	r2, [pc, #112]	; (80021a0 <HAL_UART_MspInit+0x8c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d131      	bne.n	8002198 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002134:	4b1b      	ldr	r3, [pc, #108]	; (80021a4 <HAL_UART_MspInit+0x90>)
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	4a1a      	ldr	r2, [pc, #104]	; (80021a4 <HAL_UART_MspInit+0x90>)
 800213a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800213e:	6193      	str	r3, [r2, #24]
 8002140:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <HAL_UART_MspInit+0x90>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214c:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <HAL_UART_MspInit+0x90>)
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	4a14      	ldr	r2, [pc, #80]	; (80021a4 <HAL_UART_MspInit+0x90>)
 8002152:	f043 0304 	orr.w	r3, r3, #4
 8002156:	6193      	str	r3, [r2, #24]
 8002158:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <HAL_UART_MspInit+0x90>)
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002164:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002168:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216a:	2302      	movs	r3, #2
 800216c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800216e:	2303      	movs	r3, #3
 8002170:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002172:	f107 0310 	add.w	r3, r7, #16
 8002176:	4619      	mov	r1, r3
 8002178:	480b      	ldr	r0, [pc, #44]	; (80021a8 <HAL_UART_MspInit+0x94>)
 800217a:	f000 fa5b 	bl	8002634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800217e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002182:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218c:	f107 0310 	add.w	r3, r7, #16
 8002190:	4619      	mov	r1, r3
 8002192:	4805      	ldr	r0, [pc, #20]	; (80021a8 <HAL_UART_MspInit+0x94>)
 8002194:	f000 fa4e 	bl	8002634 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002198:	bf00      	nop
 800219a:	3720      	adds	r7, #32
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40013800 	.word	0x40013800
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40010800 	.word	0x40010800

080021ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021b0:	e7fe      	b.n	80021b0 <NMI_Handler+0x4>

080021b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021b6:	e7fe      	b.n	80021b6 <HardFault_Handler+0x4>

080021b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021bc:	e7fe      	b.n	80021bc <MemManage_Handler+0x4>

080021be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021c2:	e7fe      	b.n	80021c2 <BusFault_Handler+0x4>

080021c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021c8:	e7fe      	b.n	80021c8 <UsageFault_Handler+0x4>

080021ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr

080021d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021d6:	b480      	push	{r7}
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr

080021e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021e2:	b480      	push	{r7}
 80021e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr

080021ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021f2:	f000 f8d1 	bl	8002398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}

080021fa <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80021fe:	2001      	movs	r0, #1
 8002200:	f000 fbb4 	bl	800296c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002204:	bf00      	nop
 8002206:	bd80      	pop	{r7, pc}

08002208 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800220c:	2002      	movs	r0, #2
 800220e:	f000 fbad 	bl	800296c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}

08002216 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800221a:	2004      	movs	r0, #4
 800221c:	f000 fba6 	bl	800296c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002220:	bf00      	nop
 8002222:	bd80      	pop	{r7, pc}

08002224 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002228:	2008      	movs	r0, #8
 800222a:	f000 fb9f 	bl	800296c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002238:	4802      	ldr	r0, [pc, #8]	; (8002244 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800223a:	f001 f967 	bl	800350c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	200013c4 	.word	0x200013c4

08002248 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002250:	4a14      	ldr	r2, [pc, #80]	; (80022a4 <_sbrk+0x5c>)
 8002252:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <_sbrk+0x60>)
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800225c:	4b13      	ldr	r3, [pc, #76]	; (80022ac <_sbrk+0x64>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d102      	bne.n	800226a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002264:	4b11      	ldr	r3, [pc, #68]	; (80022ac <_sbrk+0x64>)
 8002266:	4a12      	ldr	r2, [pc, #72]	; (80022b0 <_sbrk+0x68>)
 8002268:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800226a:	4b10      	ldr	r3, [pc, #64]	; (80022ac <_sbrk+0x64>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4413      	add	r3, r2
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	429a      	cmp	r2, r3
 8002276:	d207      	bcs.n	8002288 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002278:	f008 f9dc 	bl	800a634 <__errno>
 800227c:	4603      	mov	r3, r0
 800227e:	220c      	movs	r2, #12
 8002280:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002282:	f04f 33ff 	mov.w	r3, #4294967295
 8002286:	e009      	b.n	800229c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002288:	4b08      	ldr	r3, [pc, #32]	; (80022ac <_sbrk+0x64>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800228e:	4b07      	ldr	r3, [pc, #28]	; (80022ac <_sbrk+0x64>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4413      	add	r3, r2
 8002296:	4a05      	ldr	r2, [pc, #20]	; (80022ac <_sbrk+0x64>)
 8002298:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800229a:	68fb      	ldr	r3, [r7, #12]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20005000 	.word	0x20005000
 80022a8:	00000400 	.word	0x00000400
 80022ac:	200004fc 	.word	0x200004fc
 80022b0:	200016b0 	.word	0x200016b0

080022b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr

080022c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022c0:	f7ff fff8 	bl	80022b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022c4:	480b      	ldr	r0, [pc, #44]	; (80022f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80022c6:	490c      	ldr	r1, [pc, #48]	; (80022f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80022c8:	4a0c      	ldr	r2, [pc, #48]	; (80022fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80022ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022cc:	e002      	b.n	80022d4 <LoopCopyDataInit>

080022ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022d2:	3304      	adds	r3, #4

080022d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022d8:	d3f9      	bcc.n	80022ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022da:	4a09      	ldr	r2, [pc, #36]	; (8002300 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80022dc:	4c09      	ldr	r4, [pc, #36]	; (8002304 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022e0:	e001      	b.n	80022e6 <LoopFillZerobss>

080022e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022e4:	3204      	adds	r2, #4

080022e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022e8:	d3fb      	bcc.n	80022e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022ea:	f008 f9a9 	bl	800a640 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022ee:	f7ff fa57 	bl	80017a0 <main>
  bx lr
 80022f2:	4770      	bx	lr
  ldr r0, =_sdata
 80022f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022f8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80022fc:	0800b0bc 	.word	0x0800b0bc
  ldr r2, =_sbss
 8002300:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002304:	200016ac 	.word	0x200016ac

08002308 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002308:	e7fe      	b.n	8002308 <ADC1_2_IRQHandler>
	...

0800230c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002310:	4b08      	ldr	r3, [pc, #32]	; (8002334 <HAL_Init+0x28>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a07      	ldr	r2, [pc, #28]	; (8002334 <HAL_Init+0x28>)
 8002316:	f043 0310 	orr.w	r3, r3, #16
 800231a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800231c:	2003      	movs	r0, #3
 800231e:	f000 f947 	bl	80025b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002322:	200f      	movs	r0, #15
 8002324:	f000 f808 	bl	8002338 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002328:	f7ff fde4 	bl	8001ef4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40022000 	.word	0x40022000

08002338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002340:	4b12      	ldr	r3, [pc, #72]	; (800238c <HAL_InitTick+0x54>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	4b12      	ldr	r3, [pc, #72]	; (8002390 <HAL_InitTick+0x58>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	4619      	mov	r1, r3
 800234a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800234e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002352:	fbb2 f3f3 	udiv	r3, r2, r3
 8002356:	4618      	mov	r0, r3
 8002358:	f000 f95f 	bl	800261a <HAL_SYSTICK_Config>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e00e      	b.n	8002384 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b0f      	cmp	r3, #15
 800236a:	d80a      	bhi.n	8002382 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800236c:	2200      	movs	r2, #0
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	f04f 30ff 	mov.w	r0, #4294967295
 8002374:	f000 f927 	bl	80025c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002378:	4a06      	ldr	r2, [pc, #24]	; (8002394 <HAL_InitTick+0x5c>)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	e000      	b.n	8002384 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
}
 8002384:	4618      	mov	r0, r3
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20000004 	.word	0x20000004
 8002390:	2000000c 	.word	0x2000000c
 8002394:	20000008 	.word	0x20000008

08002398 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800239c:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <HAL_IncTick+0x1c>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	461a      	mov	r2, r3
 80023a2:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <HAL_IncTick+0x20>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4413      	add	r3, r2
 80023a8:	4a03      	ldr	r2, [pc, #12]	; (80023b8 <HAL_IncTick+0x20>)
 80023aa:	6013      	str	r3, [r2, #0]
}
 80023ac:	bf00      	nop
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr
 80023b4:	2000000c 	.word	0x2000000c
 80023b8:	2000072c 	.word	0x2000072c

080023bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return uwTick;
 80023c0:	4b02      	ldr	r3, [pc, #8]	; (80023cc <HAL_GetTick+0x10>)
 80023c2:	681b      	ldr	r3, [r3, #0]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr
 80023cc:	2000072c 	.word	0x2000072c

080023d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023d8:	f7ff fff0 	bl	80023bc <HAL_GetTick>
 80023dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e8:	d005      	beq.n	80023f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ea:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <HAL_Delay+0x44>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4413      	add	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023f6:	bf00      	nop
 80023f8:	f7ff ffe0 	bl	80023bc <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	429a      	cmp	r2, r3
 8002406:	d8f7      	bhi.n	80023f8 <HAL_Delay+0x28>
  {
  }
}
 8002408:	bf00      	nop
 800240a:	bf00      	nop
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	2000000c 	.word	0x2000000c

08002418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <__NVIC_SetPriorityGrouping+0x44>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002434:	4013      	ands	r3, r2
 8002436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002440:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002448:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800244a:	4a04      	ldr	r2, [pc, #16]	; (800245c <__NVIC_SetPriorityGrouping+0x44>)
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	60d3      	str	r3, [r2, #12]
}
 8002450:	bf00      	nop
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	bc80      	pop	{r7}
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002464:	4b04      	ldr	r3, [pc, #16]	; (8002478 <__NVIC_GetPriorityGrouping+0x18>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	0a1b      	lsrs	r3, r3, #8
 800246a:	f003 0307 	and.w	r3, r3, #7
}
 800246e:	4618      	mov	r0, r3
 8002470:	46bd      	mov	sp, r7
 8002472:	bc80      	pop	{r7}
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248a:	2b00      	cmp	r3, #0
 800248c:	db0b      	blt.n	80024a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	f003 021f 	and.w	r2, r3, #31
 8002494:	4906      	ldr	r1, [pc, #24]	; (80024b0 <__NVIC_EnableIRQ+0x34>)
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	095b      	lsrs	r3, r3, #5
 800249c:	2001      	movs	r0, #1
 800249e:	fa00 f202 	lsl.w	r2, r0, r2
 80024a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	e000e100 	.word	0xe000e100

080024b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	6039      	str	r1, [r7, #0]
 80024be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	db0a      	blt.n	80024de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	490c      	ldr	r1, [pc, #48]	; (8002500 <__NVIC_SetPriority+0x4c>)
 80024ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d2:	0112      	lsls	r2, r2, #4
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	440b      	add	r3, r1
 80024d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024dc:	e00a      	b.n	80024f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	4908      	ldr	r1, [pc, #32]	; (8002504 <__NVIC_SetPriority+0x50>)
 80024e4:	79fb      	ldrb	r3, [r7, #7]
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	3b04      	subs	r3, #4
 80024ec:	0112      	lsls	r2, r2, #4
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	440b      	add	r3, r1
 80024f2:	761a      	strb	r2, [r3, #24]
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	e000e100 	.word	0xe000e100
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002508:	b480      	push	{r7}
 800250a:	b089      	sub	sp, #36	; 0x24
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f1c3 0307 	rsb	r3, r3, #7
 8002522:	2b04      	cmp	r3, #4
 8002524:	bf28      	it	cs
 8002526:	2304      	movcs	r3, #4
 8002528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	3304      	adds	r3, #4
 800252e:	2b06      	cmp	r3, #6
 8002530:	d902      	bls.n	8002538 <NVIC_EncodePriority+0x30>
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	3b03      	subs	r3, #3
 8002536:	e000      	b.n	800253a <NVIC_EncodePriority+0x32>
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800253c:	f04f 32ff 	mov.w	r2, #4294967295
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43da      	mvns	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	401a      	ands	r2, r3
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002550:	f04f 31ff 	mov.w	r1, #4294967295
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	fa01 f303 	lsl.w	r3, r1, r3
 800255a:	43d9      	mvns	r1, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002560:	4313      	orrs	r3, r2
         );
}
 8002562:	4618      	mov	r0, r3
 8002564:	3724      	adds	r7, #36	; 0x24
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr

0800256c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3b01      	subs	r3, #1
 8002578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800257c:	d301      	bcc.n	8002582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800257e:	2301      	movs	r3, #1
 8002580:	e00f      	b.n	80025a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002582:	4a0a      	ldr	r2, [pc, #40]	; (80025ac <SysTick_Config+0x40>)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3b01      	subs	r3, #1
 8002588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800258a:	210f      	movs	r1, #15
 800258c:	f04f 30ff 	mov.w	r0, #4294967295
 8002590:	f7ff ff90 	bl	80024b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002594:	4b05      	ldr	r3, [pc, #20]	; (80025ac <SysTick_Config+0x40>)
 8002596:	2200      	movs	r2, #0
 8002598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800259a:	4b04      	ldr	r3, [pc, #16]	; (80025ac <SysTick_Config+0x40>)
 800259c:	2207      	movs	r2, #7
 800259e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	e000e010 	.word	0xe000e010

080025b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f7ff ff2d 	bl	8002418 <__NVIC_SetPriorityGrouping>
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b086      	sub	sp, #24
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	4603      	mov	r3, r0
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	607a      	str	r2, [r7, #4]
 80025d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025d8:	f7ff ff42 	bl	8002460 <__NVIC_GetPriorityGrouping>
 80025dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	68b9      	ldr	r1, [r7, #8]
 80025e2:	6978      	ldr	r0, [r7, #20]
 80025e4:	f7ff ff90 	bl	8002508 <NVIC_EncodePriority>
 80025e8:	4602      	mov	r2, r0
 80025ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ee:	4611      	mov	r1, r2
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ff5f 	bl	80024b4 <__NVIC_SetPriority>
}
 80025f6:	bf00      	nop
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	4603      	mov	r3, r0
 8002606:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff ff35 	bl	800247c <__NVIC_EnableIRQ>
}
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff ffa2 	bl	800256c <SysTick_Config>
 8002628:	4603      	mov	r3, r0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002634:	b480      	push	{r7}
 8002636:	b08b      	sub	sp, #44	; 0x2c
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800263e:	2300      	movs	r3, #0
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002642:	2300      	movs	r3, #0
 8002644:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002646:	e169      	b.n	800291c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002648:	2201      	movs	r2, #1
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	69fa      	ldr	r2, [r7, #28]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	429a      	cmp	r2, r3
 8002662:	f040 8158 	bne.w	8002916 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	4a9a      	ldr	r2, [pc, #616]	; (80028d4 <HAL_GPIO_Init+0x2a0>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d05e      	beq.n	800272e <HAL_GPIO_Init+0xfa>
 8002670:	4a98      	ldr	r2, [pc, #608]	; (80028d4 <HAL_GPIO_Init+0x2a0>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d875      	bhi.n	8002762 <HAL_GPIO_Init+0x12e>
 8002676:	4a98      	ldr	r2, [pc, #608]	; (80028d8 <HAL_GPIO_Init+0x2a4>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d058      	beq.n	800272e <HAL_GPIO_Init+0xfa>
 800267c:	4a96      	ldr	r2, [pc, #600]	; (80028d8 <HAL_GPIO_Init+0x2a4>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d86f      	bhi.n	8002762 <HAL_GPIO_Init+0x12e>
 8002682:	4a96      	ldr	r2, [pc, #600]	; (80028dc <HAL_GPIO_Init+0x2a8>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d052      	beq.n	800272e <HAL_GPIO_Init+0xfa>
 8002688:	4a94      	ldr	r2, [pc, #592]	; (80028dc <HAL_GPIO_Init+0x2a8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d869      	bhi.n	8002762 <HAL_GPIO_Init+0x12e>
 800268e:	4a94      	ldr	r2, [pc, #592]	; (80028e0 <HAL_GPIO_Init+0x2ac>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d04c      	beq.n	800272e <HAL_GPIO_Init+0xfa>
 8002694:	4a92      	ldr	r2, [pc, #584]	; (80028e0 <HAL_GPIO_Init+0x2ac>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d863      	bhi.n	8002762 <HAL_GPIO_Init+0x12e>
 800269a:	4a92      	ldr	r2, [pc, #584]	; (80028e4 <HAL_GPIO_Init+0x2b0>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d046      	beq.n	800272e <HAL_GPIO_Init+0xfa>
 80026a0:	4a90      	ldr	r2, [pc, #576]	; (80028e4 <HAL_GPIO_Init+0x2b0>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d85d      	bhi.n	8002762 <HAL_GPIO_Init+0x12e>
 80026a6:	2b12      	cmp	r3, #18
 80026a8:	d82a      	bhi.n	8002700 <HAL_GPIO_Init+0xcc>
 80026aa:	2b12      	cmp	r3, #18
 80026ac:	d859      	bhi.n	8002762 <HAL_GPIO_Init+0x12e>
 80026ae:	a201      	add	r2, pc, #4	; (adr r2, 80026b4 <HAL_GPIO_Init+0x80>)
 80026b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b4:	0800272f 	.word	0x0800272f
 80026b8:	08002709 	.word	0x08002709
 80026bc:	0800271b 	.word	0x0800271b
 80026c0:	0800275d 	.word	0x0800275d
 80026c4:	08002763 	.word	0x08002763
 80026c8:	08002763 	.word	0x08002763
 80026cc:	08002763 	.word	0x08002763
 80026d0:	08002763 	.word	0x08002763
 80026d4:	08002763 	.word	0x08002763
 80026d8:	08002763 	.word	0x08002763
 80026dc:	08002763 	.word	0x08002763
 80026e0:	08002763 	.word	0x08002763
 80026e4:	08002763 	.word	0x08002763
 80026e8:	08002763 	.word	0x08002763
 80026ec:	08002763 	.word	0x08002763
 80026f0:	08002763 	.word	0x08002763
 80026f4:	08002763 	.word	0x08002763
 80026f8:	08002711 	.word	0x08002711
 80026fc:	08002725 	.word	0x08002725
 8002700:	4a79      	ldr	r2, [pc, #484]	; (80028e8 <HAL_GPIO_Init+0x2b4>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d013      	beq.n	800272e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002706:	e02c      	b.n	8002762 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	623b      	str	r3, [r7, #32]
          break;
 800270e:	e029      	b.n	8002764 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	3304      	adds	r3, #4
 8002716:	623b      	str	r3, [r7, #32]
          break;
 8002718:	e024      	b.n	8002764 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	3308      	adds	r3, #8
 8002720:	623b      	str	r3, [r7, #32]
          break;
 8002722:	e01f      	b.n	8002764 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	330c      	adds	r3, #12
 800272a:	623b      	str	r3, [r7, #32]
          break;
 800272c:	e01a      	b.n	8002764 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d102      	bne.n	800273c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002736:	2304      	movs	r3, #4
 8002738:	623b      	str	r3, [r7, #32]
          break;
 800273a:	e013      	b.n	8002764 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d105      	bne.n	8002750 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002744:	2308      	movs	r3, #8
 8002746:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	611a      	str	r2, [r3, #16]
          break;
 800274e:	e009      	b.n	8002764 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002750:	2308      	movs	r3, #8
 8002752:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	69fa      	ldr	r2, [r7, #28]
 8002758:	615a      	str	r2, [r3, #20]
          break;
 800275a:	e003      	b.n	8002764 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800275c:	2300      	movs	r3, #0
 800275e:	623b      	str	r3, [r7, #32]
          break;
 8002760:	e000      	b.n	8002764 <HAL_GPIO_Init+0x130>
          break;
 8002762:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	2bff      	cmp	r3, #255	; 0xff
 8002768:	d801      	bhi.n	800276e <HAL_GPIO_Init+0x13a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	e001      	b.n	8002772 <HAL_GPIO_Init+0x13e>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	3304      	adds	r3, #4
 8002772:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	2bff      	cmp	r3, #255	; 0xff
 8002778:	d802      	bhi.n	8002780 <HAL_GPIO_Init+0x14c>
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	e002      	b.n	8002786 <HAL_GPIO_Init+0x152>
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	3b08      	subs	r3, #8
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	210f      	movs	r1, #15
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	fa01 f303 	lsl.w	r3, r1, r3
 8002794:	43db      	mvns	r3, r3
 8002796:	401a      	ands	r2, r3
 8002798:	6a39      	ldr	r1, [r7, #32]
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	fa01 f303 	lsl.w	r3, r1, r3
 80027a0:	431a      	orrs	r2, r3
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 80b1 	beq.w	8002916 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027b4:	4b4d      	ldr	r3, [pc, #308]	; (80028ec <HAL_GPIO_Init+0x2b8>)
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	4a4c      	ldr	r2, [pc, #304]	; (80028ec <HAL_GPIO_Init+0x2b8>)
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	6193      	str	r3, [r2, #24]
 80027c0:	4b4a      	ldr	r3, [pc, #296]	; (80028ec <HAL_GPIO_Init+0x2b8>)
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	60bb      	str	r3, [r7, #8]
 80027ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027cc:	4a48      	ldr	r2, [pc, #288]	; (80028f0 <HAL_GPIO_Init+0x2bc>)
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	089b      	lsrs	r3, r3, #2
 80027d2:	3302      	adds	r3, #2
 80027d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	220f      	movs	r2, #15
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	4013      	ands	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a40      	ldr	r2, [pc, #256]	; (80028f4 <HAL_GPIO_Init+0x2c0>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d013      	beq.n	8002820 <HAL_GPIO_Init+0x1ec>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a3f      	ldr	r2, [pc, #252]	; (80028f8 <HAL_GPIO_Init+0x2c4>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d00d      	beq.n	800281c <HAL_GPIO_Init+0x1e8>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a3e      	ldr	r2, [pc, #248]	; (80028fc <HAL_GPIO_Init+0x2c8>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d007      	beq.n	8002818 <HAL_GPIO_Init+0x1e4>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a3d      	ldr	r2, [pc, #244]	; (8002900 <HAL_GPIO_Init+0x2cc>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d101      	bne.n	8002814 <HAL_GPIO_Init+0x1e0>
 8002810:	2303      	movs	r3, #3
 8002812:	e006      	b.n	8002822 <HAL_GPIO_Init+0x1ee>
 8002814:	2304      	movs	r3, #4
 8002816:	e004      	b.n	8002822 <HAL_GPIO_Init+0x1ee>
 8002818:	2302      	movs	r3, #2
 800281a:	e002      	b.n	8002822 <HAL_GPIO_Init+0x1ee>
 800281c:	2301      	movs	r3, #1
 800281e:	e000      	b.n	8002822 <HAL_GPIO_Init+0x1ee>
 8002820:	2300      	movs	r3, #0
 8002822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002824:	f002 0203 	and.w	r2, r2, #3
 8002828:	0092      	lsls	r2, r2, #2
 800282a:	4093      	lsls	r3, r2
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	4313      	orrs	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002832:	492f      	ldr	r1, [pc, #188]	; (80028f0 <HAL_GPIO_Init+0x2bc>)
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	089b      	lsrs	r3, r3, #2
 8002838:	3302      	adds	r3, #2
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d006      	beq.n	800285a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800284c:	4b2d      	ldr	r3, [pc, #180]	; (8002904 <HAL_GPIO_Init+0x2d0>)
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	492c      	ldr	r1, [pc, #176]	; (8002904 <HAL_GPIO_Init+0x2d0>)
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	4313      	orrs	r3, r2
 8002856:	608b      	str	r3, [r1, #8]
 8002858:	e006      	b.n	8002868 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800285a:	4b2a      	ldr	r3, [pc, #168]	; (8002904 <HAL_GPIO_Init+0x2d0>)
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	43db      	mvns	r3, r3
 8002862:	4928      	ldr	r1, [pc, #160]	; (8002904 <HAL_GPIO_Init+0x2d0>)
 8002864:	4013      	ands	r3, r2
 8002866:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d006      	beq.n	8002882 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002874:	4b23      	ldr	r3, [pc, #140]	; (8002904 <HAL_GPIO_Init+0x2d0>)
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	4922      	ldr	r1, [pc, #136]	; (8002904 <HAL_GPIO_Init+0x2d0>)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	60cb      	str	r3, [r1, #12]
 8002880:	e006      	b.n	8002890 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002882:	4b20      	ldr	r3, [pc, #128]	; (8002904 <HAL_GPIO_Init+0x2d0>)
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	43db      	mvns	r3, r3
 800288a:	491e      	ldr	r1, [pc, #120]	; (8002904 <HAL_GPIO_Init+0x2d0>)
 800288c:	4013      	ands	r3, r2
 800288e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d006      	beq.n	80028aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800289c:	4b19      	ldr	r3, [pc, #100]	; (8002904 <HAL_GPIO_Init+0x2d0>)
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	4918      	ldr	r1, [pc, #96]	; (8002904 <HAL_GPIO_Init+0x2d0>)
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	604b      	str	r3, [r1, #4]
 80028a8:	e006      	b.n	80028b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028aa:	4b16      	ldr	r3, [pc, #88]	; (8002904 <HAL_GPIO_Init+0x2d0>)
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	43db      	mvns	r3, r3
 80028b2:	4914      	ldr	r1, [pc, #80]	; (8002904 <HAL_GPIO_Init+0x2d0>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d021      	beq.n	8002908 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028c4:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <HAL_GPIO_Init+0x2d0>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	490e      	ldr	r1, [pc, #56]	; (8002904 <HAL_GPIO_Init+0x2d0>)
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	600b      	str	r3, [r1, #0]
 80028d0:	e021      	b.n	8002916 <HAL_GPIO_Init+0x2e2>
 80028d2:	bf00      	nop
 80028d4:	10320000 	.word	0x10320000
 80028d8:	10310000 	.word	0x10310000
 80028dc:	10220000 	.word	0x10220000
 80028e0:	10210000 	.word	0x10210000
 80028e4:	10120000 	.word	0x10120000
 80028e8:	10110000 	.word	0x10110000
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40010000 	.word	0x40010000
 80028f4:	40010800 	.word	0x40010800
 80028f8:	40010c00 	.word	0x40010c00
 80028fc:	40011000 	.word	0x40011000
 8002900:	40011400 	.word	0x40011400
 8002904:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002908:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <HAL_GPIO_Init+0x304>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	43db      	mvns	r3, r3
 8002910:	4909      	ldr	r1, [pc, #36]	; (8002938 <HAL_GPIO_Init+0x304>)
 8002912:	4013      	ands	r3, r2
 8002914:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	3301      	adds	r3, #1
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	fa22 f303 	lsr.w	r3, r2, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	f47f ae8e 	bne.w	8002648 <HAL_GPIO_Init+0x14>
  }
}
 800292c:	bf00      	nop
 800292e:	bf00      	nop
 8002930:	372c      	adds	r7, #44	; 0x2c
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr
 8002938:	40010400 	.word	0x40010400

0800293c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	460b      	mov	r3, r1
 8002946:	807b      	strh	r3, [r7, #2]
 8002948:	4613      	mov	r3, r2
 800294a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800294c:	787b      	ldrb	r3, [r7, #1]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002952:	887a      	ldrh	r2, [r7, #2]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002958:	e003      	b.n	8002962 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800295a:	887b      	ldrh	r3, [r7, #2]
 800295c:	041a      	lsls	r2, r3, #16
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	611a      	str	r2, [r3, #16]
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002976:	4b08      	ldr	r3, [pc, #32]	; (8002998 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002978:	695a      	ldr	r2, [r3, #20]
 800297a:	88fb      	ldrh	r3, [r7, #6]
 800297c:	4013      	ands	r3, r2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d006      	beq.n	8002990 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002982:	4a05      	ldr	r2, [pc, #20]	; (8002998 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002984:	88fb      	ldrh	r3, [r7, #6]
 8002986:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002988:	88fb      	ldrh	r3, [r7, #6]
 800298a:	4618      	mov	r0, r3
 800298c:	f7fe fed0 	bl	8001730 <HAL_GPIO_EXTI_Callback>
  }
}
 8002990:	bf00      	nop
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40010400 	.word	0x40010400

0800299c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e12b      	b.n	8002c06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d106      	bne.n	80029c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7ff fac8 	bl	8001f58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2224      	movs	r2, #36	; 0x24
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0201 	bic.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a00:	f002 fd94 	bl	800552c <HAL_RCC_GetPCLK1Freq>
 8002a04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	4a81      	ldr	r2, [pc, #516]	; (8002c10 <HAL_I2C_Init+0x274>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d807      	bhi.n	8002a20 <HAL_I2C_Init+0x84>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4a80      	ldr	r2, [pc, #512]	; (8002c14 <HAL_I2C_Init+0x278>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	bf94      	ite	ls
 8002a18:	2301      	movls	r3, #1
 8002a1a:	2300      	movhi	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	e006      	b.n	8002a2e <HAL_I2C_Init+0x92>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4a7d      	ldr	r2, [pc, #500]	; (8002c18 <HAL_I2C_Init+0x27c>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	bf94      	ite	ls
 8002a28:	2301      	movls	r3, #1
 8002a2a:	2300      	movhi	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e0e7      	b.n	8002c06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4a78      	ldr	r2, [pc, #480]	; (8002c1c <HAL_I2C_Init+0x280>)
 8002a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3e:	0c9b      	lsrs	r3, r3, #18
 8002a40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	4a6a      	ldr	r2, [pc, #424]	; (8002c10 <HAL_I2C_Init+0x274>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d802      	bhi.n	8002a70 <HAL_I2C_Init+0xd4>
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	e009      	b.n	8002a84 <HAL_I2C_Init+0xe8>
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a76:	fb02 f303 	mul.w	r3, r2, r3
 8002a7a:	4a69      	ldr	r2, [pc, #420]	; (8002c20 <HAL_I2C_Init+0x284>)
 8002a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a80:	099b      	lsrs	r3, r3, #6
 8002a82:	3301      	adds	r3, #1
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	495c      	ldr	r1, [pc, #368]	; (8002c10 <HAL_I2C_Init+0x274>)
 8002aa0:	428b      	cmp	r3, r1
 8002aa2:	d819      	bhi.n	8002ad8 <HAL_I2C_Init+0x13c>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1e59      	subs	r1, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ab2:	1c59      	adds	r1, r3, #1
 8002ab4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ab8:	400b      	ands	r3, r1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00a      	beq.n	8002ad4 <HAL_I2C_Init+0x138>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1e59      	subs	r1, r3, #1
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002acc:	3301      	adds	r3, #1
 8002ace:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad2:	e051      	b.n	8002b78 <HAL_I2C_Init+0x1dc>
 8002ad4:	2304      	movs	r3, #4
 8002ad6:	e04f      	b.n	8002b78 <HAL_I2C_Init+0x1dc>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d111      	bne.n	8002b04 <HAL_I2C_Init+0x168>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	1e58      	subs	r0, r3, #1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6859      	ldr	r1, [r3, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	440b      	add	r3, r1
 8002aee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002af2:	3301      	adds	r3, #1
 8002af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	bf0c      	ite	eq
 8002afc:	2301      	moveq	r3, #1
 8002afe:	2300      	movne	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	e012      	b.n	8002b2a <HAL_I2C_Init+0x18e>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	1e58      	subs	r0, r3, #1
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6859      	ldr	r1, [r3, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	0099      	lsls	r1, r3, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	bf0c      	ite	eq
 8002b24:	2301      	moveq	r3, #1
 8002b26:	2300      	movne	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_I2C_Init+0x196>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e022      	b.n	8002b78 <HAL_I2C_Init+0x1dc>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10e      	bne.n	8002b58 <HAL_I2C_Init+0x1bc>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1e58      	subs	r0, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6859      	ldr	r1, [r3, #4]
 8002b42:	460b      	mov	r3, r1
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	440b      	add	r3, r1
 8002b48:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b56:	e00f      	b.n	8002b78 <HAL_I2C_Init+0x1dc>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	1e58      	subs	r0, r3, #1
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6859      	ldr	r1, [r3, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	0099      	lsls	r1, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b6e:	3301      	adds	r3, #1
 8002b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	6809      	ldr	r1, [r1, #0]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69da      	ldr	r2, [r3, #28]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ba6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6911      	ldr	r1, [r2, #16]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	68d2      	ldr	r2, [r2, #12]
 8002bb2:	4311      	orrs	r1, r2
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6812      	ldr	r2, [r2, #0]
 8002bb8:	430b      	orrs	r3, r1
 8002bba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	695a      	ldr	r2, [r3, #20]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	000186a0 	.word	0x000186a0
 8002c14:	001e847f 	.word	0x001e847f
 8002c18:	003d08ff 	.word	0x003d08ff
 8002c1c:	431bde83 	.word	0x431bde83
 8002c20:	10624dd3 	.word	0x10624dd3

08002c24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b088      	sub	sp, #32
 8002c28:	af02      	add	r7, sp, #8
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	607a      	str	r2, [r7, #4]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	460b      	mov	r3, r1
 8002c32:	817b      	strh	r3, [r7, #10]
 8002c34:	4613      	mov	r3, r2
 8002c36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c38:	f7ff fbc0 	bl	80023bc <HAL_GetTick>
 8002c3c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b20      	cmp	r3, #32
 8002c48:	f040 80e0 	bne.w	8002e0c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	2319      	movs	r3, #25
 8002c52:	2201      	movs	r2, #1
 8002c54:	4970      	ldr	r1, [pc, #448]	; (8002e18 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 f964 	bl	8002f24 <I2C_WaitOnFlagUntilTimeout>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c62:	2302      	movs	r3, #2
 8002c64:	e0d3      	b.n	8002e0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d101      	bne.n	8002c74 <HAL_I2C_Master_Transmit+0x50>
 8002c70:	2302      	movs	r3, #2
 8002c72:	e0cc      	b.n	8002e0e <HAL_I2C_Master_Transmit+0x1ea>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d007      	beq.n	8002c9a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f042 0201 	orr.w	r2, r2, #1
 8002c98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ca8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2221      	movs	r2, #33	; 0x21
 8002cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2210      	movs	r2, #16
 8002cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	893a      	ldrh	r2, [r7, #8]
 8002cca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	4a50      	ldr	r2, [pc, #320]	; (8002e1c <HAL_I2C_Master_Transmit+0x1f8>)
 8002cda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002cdc:	8979      	ldrh	r1, [r7, #10]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	6a3a      	ldr	r2, [r7, #32]
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 f89c 	bl	8002e20 <I2C_MasterRequestWrite>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e08d      	b.n	8002e0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	613b      	str	r3, [r7, #16]
 8002d06:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d08:	e066      	b.n	8002dd8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	6a39      	ldr	r1, [r7, #32]
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 fa22 	bl	8003158 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00d      	beq.n	8002d36 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d107      	bne.n	8002d32 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e06b      	b.n	8002e0e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	781a      	ldrb	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d11b      	bne.n	8002dac <HAL_I2C_Master_Transmit+0x188>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d017      	beq.n	8002dac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	781a      	ldrb	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	6a39      	ldr	r1, [r7, #32]
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 fa19 	bl	80031e8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00d      	beq.n	8002dd8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d107      	bne.n	8002dd4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e01a      	b.n	8002e0e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d194      	bne.n	8002d0a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2220      	movs	r2, #32
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	e000      	b.n	8002e0e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e0c:	2302      	movs	r3, #2
  }
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	00100002 	.word	0x00100002
 8002e1c:	ffff0000 	.word	0xffff0000

08002e20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	607a      	str	r2, [r7, #4]
 8002e2a:	603b      	str	r3, [r7, #0]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d006      	beq.n	8002e4a <I2C_MasterRequestWrite+0x2a>
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d003      	beq.n	8002e4a <I2C_MasterRequestWrite+0x2a>
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e48:	d108      	bne.n	8002e5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	e00b      	b.n	8002e74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e60:	2b12      	cmp	r3, #18
 8002e62:	d107      	bne.n	8002e74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 f84f 	bl	8002f24 <I2C_WaitOnFlagUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00d      	beq.n	8002ea8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e9a:	d103      	bne.n	8002ea4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ea2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e035      	b.n	8002f14 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002eb0:	d108      	bne.n	8002ec4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eb2:	897b      	ldrh	r3, [r7, #10]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ec0:	611a      	str	r2, [r3, #16]
 8002ec2:	e01b      	b.n	8002efc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ec4:	897b      	ldrh	r3, [r7, #10]
 8002ec6:	11db      	asrs	r3, r3, #7
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	f003 0306 	and.w	r3, r3, #6
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	f063 030f 	orn	r3, r3, #15
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	490e      	ldr	r1, [pc, #56]	; (8002f1c <I2C_MasterRequestWrite+0xfc>)
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 f898 	bl	8003018 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e010      	b.n	8002f14 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ef2:	897b      	ldrh	r3, [r7, #10]
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	4907      	ldr	r1, [pc, #28]	; (8002f20 <I2C_MasterRequestWrite+0x100>)
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 f888 	bl	8003018 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	00010008 	.word	0x00010008
 8002f20:	00010002 	.word	0x00010002

08002f24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	603b      	str	r3, [r7, #0]
 8002f30:	4613      	mov	r3, r2
 8002f32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f34:	e048      	b.n	8002fc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3c:	d044      	beq.n	8002fc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f3e:	f7ff fa3d 	bl	80023bc <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d302      	bcc.n	8002f54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d139      	bne.n	8002fc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	0c1b      	lsrs	r3, r3, #16
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d10d      	bne.n	8002f7a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	43da      	mvns	r2, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	bf0c      	ite	eq
 8002f70:	2301      	moveq	r3, #1
 8002f72:	2300      	movne	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	461a      	mov	r2, r3
 8002f78:	e00c      	b.n	8002f94 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	43da      	mvns	r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	4013      	ands	r3, r2
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf0c      	ite	eq
 8002f8c:	2301      	moveq	r3, #1
 8002f8e:	2300      	movne	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d116      	bne.n	8002fc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	f043 0220 	orr.w	r2, r3, #32
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e023      	b.n	8003010 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	0c1b      	lsrs	r3, r3, #16
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d10d      	bne.n	8002fee <I2C_WaitOnFlagUntilTimeout+0xca>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	43da      	mvns	r2, r3
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	bf0c      	ite	eq
 8002fe4:	2301      	moveq	r3, #1
 8002fe6:	2300      	movne	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	461a      	mov	r2, r3
 8002fec:	e00c      	b.n	8003008 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	43da      	mvns	r2, r3
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	bf0c      	ite	eq
 8003000:	2301      	moveq	r3, #1
 8003002:	2300      	movne	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	461a      	mov	r2, r3
 8003008:	79fb      	ldrb	r3, [r7, #7]
 800300a:	429a      	cmp	r2, r3
 800300c:	d093      	beq.n	8002f36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
 8003024:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003026:	e071      	b.n	800310c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003036:	d123      	bne.n	8003080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003046:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003050:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	f043 0204 	orr.w	r2, r3, #4
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e067      	b.n	8003150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003086:	d041      	beq.n	800310c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003088:	f7ff f998 	bl	80023bc <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	429a      	cmp	r2, r3
 8003096:	d302      	bcc.n	800309e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d136      	bne.n	800310c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	0c1b      	lsrs	r3, r3, #16
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d10c      	bne.n	80030c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	43da      	mvns	r2, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	4013      	ands	r3, r2
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	bf14      	ite	ne
 80030ba:	2301      	movne	r3, #1
 80030bc:	2300      	moveq	r3, #0
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	e00b      	b.n	80030da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	43da      	mvns	r2, r3
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	4013      	ands	r3, r2
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	bf14      	ite	ne
 80030d4:	2301      	movne	r3, #1
 80030d6:	2300      	moveq	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d016      	beq.n	800310c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	f043 0220 	orr.w	r2, r3, #32
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e021      	b.n	8003150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	0c1b      	lsrs	r3, r3, #16
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b01      	cmp	r3, #1
 8003114:	d10c      	bne.n	8003130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	43da      	mvns	r2, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	4013      	ands	r3, r2
 8003122:	b29b      	uxth	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	bf14      	ite	ne
 8003128:	2301      	movne	r3, #1
 800312a:	2300      	moveq	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	e00b      	b.n	8003148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	43da      	mvns	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4013      	ands	r3, r2
 800313c:	b29b      	uxth	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	bf14      	ite	ne
 8003142:	2301      	movne	r3, #1
 8003144:	2300      	moveq	r3, #0
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	f47f af6d 	bne.w	8003028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003164:	e034      	b.n	80031d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 f886 	bl	8003278 <I2C_IsAcknowledgeFailed>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e034      	b.n	80031e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317c:	d028      	beq.n	80031d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317e:	f7ff f91d 	bl	80023bc <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	429a      	cmp	r2, r3
 800318c:	d302      	bcc.n	8003194 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d11d      	bne.n	80031d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319e:	2b80      	cmp	r3, #128	; 0x80
 80031a0:	d016      	beq.n	80031d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	f043 0220 	orr.w	r2, r3, #32
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e007      	b.n	80031e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031da:	2b80      	cmp	r3, #128	; 0x80
 80031dc:	d1c3      	bne.n	8003166 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031f4:	e034      	b.n	8003260 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f83e 	bl	8003278 <I2C_IsAcknowledgeFailed>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e034      	b.n	8003270 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320c:	d028      	beq.n	8003260 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800320e:	f7ff f8d5 	bl	80023bc <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	429a      	cmp	r2, r3
 800321c:	d302      	bcc.n	8003224 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d11d      	bne.n	8003260 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	f003 0304 	and.w	r3, r3, #4
 800322e:	2b04      	cmp	r3, #4
 8003230:	d016      	beq.n	8003260 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	f043 0220 	orr.w	r2, r3, #32
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e007      	b.n	8003270 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	2b04      	cmp	r3, #4
 800326c:	d1c3      	bne.n	80031f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800328a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800328e:	d11b      	bne.n	80032c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003298:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2220      	movs	r2, #32
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	f043 0204 	orr.w	r2, r3, #4
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e000      	b.n	80032ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr

080032d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e0e8      	b.n	80034b8 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d106      	bne.n	8003300 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f006 fef0 	bl	800a0e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2203      	movs	r2, #3
 8003304:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f003 f8cb 	bl	80064ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6818      	ldr	r0, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3304      	adds	r3, #4
 8003320:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003322:	f003 f8a1 	bl	8006468 <USB_CoreInit>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e0bf      	b.n	80034b8 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2100      	movs	r1, #0
 800333e:	4618      	mov	r0, r3
 8003340:	f003 f8cf 	bl	80064e2 <USB_SetCurrentMode>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d005      	beq.n	8003356 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2202      	movs	r2, #2
 800334e:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e0b0      	b.n	80034b8 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003356:	2300      	movs	r3, #0
 8003358:	73fb      	strb	r3, [r7, #15]
 800335a:	e03e      	b.n	80033da <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800335c:	7bfa      	ldrb	r2, [r7, #15]
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	440b      	add	r3, r1
 800336a:	3311      	adds	r3, #17
 800336c:	2201      	movs	r2, #1
 800336e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003370:	7bfa      	ldrb	r2, [r7, #15]
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	4613      	mov	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	440b      	add	r3, r1
 800337e:	3310      	adds	r3, #16
 8003380:	7bfa      	ldrb	r2, [r7, #15]
 8003382:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003384:	7bfa      	ldrb	r2, [r7, #15]
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	440b      	add	r3, r1
 8003392:	3313      	adds	r3, #19
 8003394:	2200      	movs	r2, #0
 8003396:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003398:	7bfa      	ldrb	r2, [r7, #15]
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	440b      	add	r3, r1
 80033a6:	3320      	adds	r3, #32
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033ac:	7bfa      	ldrb	r2, [r7, #15]
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	4613      	mov	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	440b      	add	r3, r1
 80033ba:	3324      	adds	r3, #36	; 0x24
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	1c5a      	adds	r2, r3, #1
 80033c6:	4613      	mov	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	440b      	add	r3, r1
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
 80033d6:	3301      	adds	r3, #1
 80033d8:	73fb      	strb	r3, [r7, #15]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	791b      	ldrb	r3, [r3, #4]
 80033de:	7bfa      	ldrb	r2, [r7, #15]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d3bb      	bcc.n	800335c <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033e4:	2300      	movs	r3, #0
 80033e6:	73fb      	strb	r3, [r7, #15]
 80033e8:	e044      	b.n	8003474 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80033ea:	7bfa      	ldrb	r2, [r7, #15]
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	440b      	add	r3, r1
 80033f8:	f203 1351 	addw	r3, r3, #337	; 0x151
 80033fc:	2200      	movs	r2, #0
 80033fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003400:	7bfa      	ldrb	r2, [r7, #15]
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	440b      	add	r3, r1
 800340e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003412:	7bfa      	ldrb	r2, [r7, #15]
 8003414:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003416:	7bfa      	ldrb	r2, [r7, #15]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	440b      	add	r3, r1
 8003424:	f203 1353 	addw	r3, r3, #339	; 0x153
 8003428:	2200      	movs	r2, #0
 800342a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800342c:	7bfa      	ldrb	r2, [r7, #15]
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	440b      	add	r3, r1
 800343a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003442:	7bfa      	ldrb	r2, [r7, #15]
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	440b      	add	r3, r1
 8003450:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003458:	7bfa      	ldrb	r2, [r7, #15]
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	440b      	add	r3, r1
 8003466:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800346e:	7bfb      	ldrb	r3, [r7, #15]
 8003470:	3301      	adds	r3, #1
 8003472:	73fb      	strb	r3, [r7, #15]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	791b      	ldrb	r3, [r3, #4]
 8003478:	7bfa      	ldrb	r2, [r7, #15]
 800347a:	429a      	cmp	r2, r3
 800347c:	d3b5      	bcc.n	80033ea <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6818      	ldr	r0, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3304      	adds	r3, #4
 8003486:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003488:	f003 f837 	bl	80064fa <USB_DevInit>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d005      	beq.n	800349e <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2202      	movs	r2, #2
 8003496:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e00c      	b.n	80034b8 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f005 f851 	bl	8008558 <USB_DevDisconnect>

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d101      	bne.n	80034d6 <HAL_PCD_Start+0x16>
 80034d2:	2302      	movs	r3, #2
 80034d4:	e016      	b.n	8003504 <HAL_PCD_Start+0x44>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f002 ffcd 	bl	8006482 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80034e8:	2101      	movs	r1, #1
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f007 f86b 	bl	800a5c6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f005 f825 	bl	8008544 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b088      	sub	sp, #32
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f005 f827 	bl	800856c <USB_ReadInterrupts>
 800351e:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fb1c 	bl	8003b68 <PCD_EP_ISR_Handler>

    return;
 8003530:	e11b      	b.n	800376a <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003538:	2b00      	cmp	r3, #0
 800353a:	d013      	beq.n	8003564 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003544:	b29a      	uxth	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800354e:	b292      	uxth	r2, r2
 8003550:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f006 fe3e 	bl	800a1d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800355a:	2100      	movs	r1, #0
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f907 	bl	8003770 <HAL_PCD_SetAddress>

    return;
 8003562:	e102      	b.n	800376a <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00c      	beq.n	8003588 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003576:	b29a      	uxth	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003580:	b292      	uxth	r2, r2
 8003582:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003586:	e0f0      	b.n	800376a <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00c      	beq.n	80035ac <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800359a:	b29a      	uxth	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035a4:	b292      	uxth	r2, r2
 80035a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80035aa:	e0de      	b.n	800376a <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d027      	beq.n	8003606 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80035be:	b29a      	uxth	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0204 	bic.w	r2, r2, #4
 80035c8:	b292      	uxth	r2, r2
 80035ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0208 	bic.w	r2, r2, #8
 80035e0:	b292      	uxth	r2, r2
 80035e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f006 fe2e 	bl	800a248 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035fe:	b292      	uxth	r2, r2
 8003600:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003604:	e0b1      	b.n	800376a <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 8085 	beq.w	800371c <HAL_PCD_IRQHandler+0x210>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8003612:	2300      	movs	r3, #0
 8003614:	77fb      	strb	r3, [r7, #31]
 8003616:	e011      	b.n	800363c <HAL_PCD_IRQHandler+0x130>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	461a      	mov	r2, r3
 800361e:	7ffb      	ldrb	r3, [r7, #31]
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	441a      	add	r2, r3
 8003624:	7ffb      	ldrb	r3, [r7, #31]
 8003626:	8812      	ldrh	r2, [r2, #0]
 8003628:	b292      	uxth	r2, r2
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	f107 0120 	add.w	r1, r7, #32
 8003630:	440b      	add	r3, r1
 8003632:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8003636:	7ffb      	ldrb	r3, [r7, #31]
 8003638:	3301      	adds	r3, #1
 800363a:	77fb      	strb	r3, [r7, #31]
 800363c:	7ffb      	ldrb	r3, [r7, #31]
 800363e:	2b07      	cmp	r3, #7
 8003640:	d9ea      	bls.n	8003618 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800364a:	b29a      	uxth	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f042 0201 	orr.w	r2, r2, #1
 8003654:	b292      	uxth	r2, r2
 8003656:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003662:	b29a      	uxth	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0201 	bic.w	r2, r2, #1
 800366c:	b292      	uxth	r2, r2
 800366e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003672:	bf00      	nop
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800367c:	b29b      	uxth	r3, r3
 800367e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0f6      	beq.n	8003674 <HAL_PCD_IRQHandler+0x168>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800368e:	b29a      	uxth	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003698:	b292      	uxth	r2, r2
 800369a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800369e:	2300      	movs	r3, #0
 80036a0:	77fb      	strb	r3, [r7, #31]
 80036a2:	e010      	b.n	80036c6 <HAL_PCD_IRQHandler+0x1ba>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80036a4:	7ffb      	ldrb	r3, [r7, #31]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6812      	ldr	r2, [r2, #0]
 80036aa:	4611      	mov	r1, r2
 80036ac:	7ffa      	ldrb	r2, [r7, #31]
 80036ae:	0092      	lsls	r2, r2, #2
 80036b0:	440a      	add	r2, r1
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	f107 0120 	add.w	r1, r7, #32
 80036b8:	440b      	add	r3, r1
 80036ba:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80036be:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80036c0:	7ffb      	ldrb	r3, [r7, #31]
 80036c2:	3301      	adds	r3, #1
 80036c4:	77fb      	strb	r3, [r7, #31]
 80036c6:	7ffb      	ldrb	r3, [r7, #31]
 80036c8:	2b07      	cmp	r3, #7
 80036ca:	d9eb      	bls.n	80036a4 <HAL_PCD_IRQHandler+0x198>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0208 	orr.w	r2, r2, #8
 80036de:	b292      	uxth	r2, r2
 80036e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036f6:	b292      	uxth	r2, r2
 80036f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003704:	b29a      	uxth	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0204 	orr.w	r2, r2, #4
 800370e:	b292      	uxth	r2, r2
 8003710:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f006 fd7d 	bl	800a214 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800371a:	e026      	b.n	800376a <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00f      	beq.n	8003746 <HAL_PCD_IRQHandler+0x23a>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800372e:	b29a      	uxth	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003738:	b292      	uxth	r2, r2
 800373a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f006 fd3b 	bl	800a1ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003744:	e011      	b.n	800376a <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00c      	beq.n	800376a <HAL_PCD_IRQHandler+0x25e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003758:	b29a      	uxth	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003762:	b292      	uxth	r2, r2
 8003764:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003768:	bf00      	nop
  }
}
 800376a:	3720      	adds	r7, #32
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003782:	2b01      	cmp	r3, #1
 8003784:	d101      	bne.n	800378a <HAL_PCD_SetAddress+0x1a>
 8003786:	2302      	movs	r3, #2
 8003788:	e012      	b.n	80037b0 <HAL_PCD_SetAddress+0x40>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	78fa      	ldrb	r2, [r7, #3]
 8003796:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	78fa      	ldrb	r2, [r7, #3]
 800379e:	4611      	mov	r1, r2
 80037a0:	4618      	mov	r0, r3
 80037a2:	f004 febc 	bl	800851e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	4608      	mov	r0, r1
 80037c2:	4611      	mov	r1, r2
 80037c4:	461a      	mov	r2, r3
 80037c6:	4603      	mov	r3, r0
 80037c8:	70fb      	strb	r3, [r7, #3]
 80037ca:	460b      	mov	r3, r1
 80037cc:	803b      	strh	r3, [r7, #0]
 80037ce:	4613      	mov	r3, r2
 80037d0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80037d2:	2300      	movs	r3, #0
 80037d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	da0e      	bge.n	80037fc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037de:	78fb      	ldrb	r3, [r7, #3]
 80037e0:	f003 0207 	and.w	r2, r3, #7
 80037e4:	4613      	mov	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	3310      	adds	r3, #16
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	4413      	add	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2201      	movs	r2, #1
 80037f8:	705a      	strb	r2, [r3, #1]
 80037fa:	e00e      	b.n	800381a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037fc:	78fb      	ldrb	r3, [r7, #3]
 80037fe:	f003 0207 	and.w	r2, r3, #7
 8003802:	4613      	mov	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4413      	add	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	4413      	add	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800381a:	78fb      	ldrb	r3, [r7, #3]
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	b2da      	uxtb	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003826:	883a      	ldrh	r2, [r7, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	78ba      	ldrb	r2, [r7, #2]
 8003830:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003832:	78bb      	ldrb	r3, [r7, #2]
 8003834:	2b02      	cmp	r3, #2
 8003836:	d102      	bne.n	800383e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003844:	2b01      	cmp	r3, #1
 8003846:	d101      	bne.n	800384c <HAL_PCD_EP_Open+0x94>
 8003848:	2302      	movs	r3, #2
 800384a:	e00e      	b.n	800386a <HAL_PCD_EP_Open+0xb2>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68f9      	ldr	r1, [r7, #12]
 800385a:	4618      	mov	r0, r3
 800385c:	f002 fe6a 	bl	8006534 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8003868:	7afb      	ldrb	r3, [r7, #11]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b084      	sub	sp, #16
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	460b      	mov	r3, r1
 800387c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800387e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003882:	2b00      	cmp	r3, #0
 8003884:	da0e      	bge.n	80038a4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003886:	78fb      	ldrb	r3, [r7, #3]
 8003888:	f003 0207 	and.w	r2, r3, #7
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	3310      	adds	r3, #16
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	4413      	add	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2201      	movs	r2, #1
 80038a0:	705a      	strb	r2, [r3, #1]
 80038a2:	e00e      	b.n	80038c2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038a4:	78fb      	ldrb	r3, [r7, #3]
 80038a6:	f003 0207 	and.w	r2, r3, #7
 80038aa:	4613      	mov	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	4413      	add	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80038c2:	78fb      	ldrb	r3, [r7, #3]
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <HAL_PCD_EP_Close+0x6a>
 80038d8:	2302      	movs	r3, #2
 80038da:	e00e      	b.n	80038fa <HAL_PCD_EP_Close+0x88>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68f9      	ldr	r1, [r7, #12]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f003 f9e2 	bl	8006cb4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b086      	sub	sp, #24
 8003906:	af00      	add	r7, sp, #0
 8003908:	60f8      	str	r0, [r7, #12]
 800390a:	607a      	str	r2, [r7, #4]
 800390c:	603b      	str	r3, [r7, #0]
 800390e:	460b      	mov	r3, r1
 8003910:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003912:	7afb      	ldrb	r3, [r7, #11]
 8003914:	f003 0207 	and.w	r2, r3, #7
 8003918:	4613      	mov	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	4413      	add	r3, r2
 8003928:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2200      	movs	r2, #0
 800393a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	2200      	movs	r2, #0
 8003940:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003942:	7afb      	ldrb	r3, [r7, #11]
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	b2da      	uxtb	r2, r3
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	6979      	ldr	r1, [r7, #20]
 8003954:	4618      	mov	r0, r3
 8003956:	f003 fb99 	bl	800708c <USB_EPStartXfer>

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3718      	adds	r7, #24
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	460b      	mov	r3, r1
 800396e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	f003 0207 	and.w	r2, r3, #7
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	4613      	mov	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	440b      	add	r3, r1
 8003982:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8003986:	681b      	ldr	r3, [r3, #0]
}
 8003988:	4618      	mov	r0, r3
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	bc80      	pop	{r7}
 8003990:	4770      	bx	lr

08003992 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b086      	sub	sp, #24
 8003996:	af00      	add	r7, sp, #0
 8003998:	60f8      	str	r0, [r7, #12]
 800399a:	607a      	str	r2, [r7, #4]
 800399c:	603b      	str	r3, [r7, #0]
 800399e:	460b      	mov	r3, r1
 80039a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039a2:	7afb      	ldrb	r3, [r7, #11]
 80039a4:	f003 0207 	and.w	r2, r3, #7
 80039a8:	4613      	mov	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	3310      	adds	r3, #16
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	4413      	add	r3, r2
 80039b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2200      	movs	r2, #0
 80039d6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2201      	movs	r2, #1
 80039dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039de:	7afb      	ldrb	r3, [r7, #11]
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6979      	ldr	r1, [r7, #20]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f003 fb4b 	bl	800708c <USB_EPStartXfer>

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3718      	adds	r7, #24
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a0c:	78fb      	ldrb	r3, [r7, #3]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	7912      	ldrb	r2, [r2, #4]
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d901      	bls.n	8003a1e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e04c      	b.n	8003ab8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	da0e      	bge.n	8003a44 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a26:	78fb      	ldrb	r3, [r7, #3]
 8003a28:	f003 0207 	and.w	r2, r3, #7
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	3310      	adds	r3, #16
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	4413      	add	r3, r2
 8003a3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	705a      	strb	r2, [r3, #1]
 8003a42:	e00c      	b.n	8003a5e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a44:	78fa      	ldrb	r2, [r7, #3]
 8003a46:	4613      	mov	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4413      	add	r3, r2
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	4413      	add	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2201      	movs	r2, #1
 8003a62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a64:	78fb      	ldrb	r3, [r7, #3]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	b2da      	uxtb	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d101      	bne.n	8003a7e <HAL_PCD_EP_SetStall+0x7e>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	e01c      	b.n	8003ab8 <HAL_PCD_EP_SetStall+0xb8>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68f9      	ldr	r1, [r7, #12]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f004 fc49 	bl	8008324 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a92:	78fb      	ldrb	r3, [r7, #3]
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d108      	bne.n	8003aae <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4610      	mov	r0, r2
 8003aaa:	f004 fd6e 	bl	800858a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	460b      	mov	r3, r1
 8003aca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003acc:	78fb      	ldrb	r3, [r7, #3]
 8003ace:	f003 030f 	and.w	r3, r3, #15
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	7912      	ldrb	r2, [r2, #4]
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d901      	bls.n	8003ade <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e040      	b.n	8003b60 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ade:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	da0e      	bge.n	8003b04 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ae6:	78fb      	ldrb	r3, [r7, #3]
 8003ae8:	f003 0207 	and.w	r2, r3, #7
 8003aec:	4613      	mov	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	3310      	adds	r3, #16
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	4413      	add	r3, r2
 8003afa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2201      	movs	r2, #1
 8003b00:	705a      	strb	r2, [r3, #1]
 8003b02:	e00e      	b.n	8003b22 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b04:	78fb      	ldrb	r3, [r7, #3]
 8003b06:	f003 0207 	and.w	r2, r3, #7
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	4413      	add	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b28:	78fb      	ldrb	r3, [r7, #3]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <HAL_PCD_EP_ClrStall+0x82>
 8003b3e:	2302      	movs	r3, #2
 8003b40:	e00e      	b.n	8003b60 <HAL_PCD_EP_ClrStall+0xa0>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68f9      	ldr	r1, [r7, #12]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f004 fc37 	bl	80083c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b096      	sub	sp, #88	; 0x58
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b70:	e3bc      	b.n	80042ec <PCD_EP_ISR_Handler+0x784>
  {
    wIstr = hpcd->Instance->ISTR;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b7a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003b7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	f003 030f 	and.w	r3, r3, #15
 8003b88:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8003b8c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f040 8176 	bne.w	8003e82 <PCD_EP_ISR_Handler+0x31a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003b96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b9a:	f003 0310 	and.w	r3, r3, #16
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d14f      	bne.n	8003c42 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb2:	81fb      	strh	r3, [r7, #14]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	89fb      	ldrh	r3, [r7, #14]
 8003bba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	3310      	adds	r3, #16
 8003bca:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	4413      	add	r3, r2
 8003be0:	3302      	adds	r3, #2
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6812      	ldr	r2, [r2, #0]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bf6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bfa:	695a      	ldr	r2, [r3, #20]
 8003bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	441a      	add	r2, r3
 8003c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c04:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003c06:	2100      	movs	r1, #0
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f006 fabc 	bl	800a186 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	7b5b      	ldrb	r3, [r3, #13]
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 8369 	beq.w	80042ec <PCD_EP_ISR_Handler+0x784>
 8003c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f040 8364 	bne.w	80042ec <PCD_EP_ISR_Handler+0x784>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	7b5b      	ldrb	r3, [r3, #13]
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	b292      	uxth	r2, r2
 8003c36:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	735a      	strb	r2, [r3, #13]
 8003c40:	e354      	b.n	80042ec <PCD_EP_ISR_Handler+0x784>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003c48:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003c54:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003c58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d034      	beq.n	8003cca <PCD_EP_ISR_Handler+0x162>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	4413      	add	r3, r2
 8003c74:	3306      	adds	r3, #6
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6812      	ldr	r2, [r2, #0]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c8a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6818      	ldr	r0, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8003c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c98:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c9c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	f004 fcc3 	bl	800862a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	823b      	strh	r3, [r7, #16]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	8a3a      	ldrh	r2, [r7, #16]
 8003cba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cbe:	b292      	uxth	r2, r2
 8003cc0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f006 fa32 	bl	800a12c <HAL_PCD_SetupStageCallback>
 8003cc8:	e310      	b.n	80042ec <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003cca:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f280 830c 	bge.w	80042ec <PCD_EP_ISR_Handler+0x784>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	83fb      	strh	r3, [r7, #30]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	8bfa      	ldrh	r2, [r7, #30]
 8003cea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cee:	b292      	uxth	r2, r2
 8003cf0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	4413      	add	r3, r2
 8003d06:	3306      	adds	r3, #6
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6812      	ldr	r2, [r2, #0]
 8003d0e:	4413      	add	r3, r2
 8003d10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d1c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d019      	beq.n	8003d5a <PCD_EP_ISR_Handler+0x1f2>
 8003d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d015      	beq.n	8003d5a <PCD_EP_ISR_Handler+0x1f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6818      	ldr	r0, [r3, #0]
 8003d32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d34:	6959      	ldr	r1, [r3, #20]
 8003d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d38:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d3c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	f004 fc73 	bl	800862a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d46:	695a      	ldr	r2, [r3, #20]
 8003d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	441a      	add	r2, r3
 8003d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d50:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003d52:	2100      	movs	r1, #0
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f006 f9fb 	bl	800a150 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003d64:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003d68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f040 82bd 	bne.w	80042ec <PCD_EP_ISR_Handler+0x784>
 8003d72:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003d76:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003d7a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d7e:	f000 82b5 	beq.w	80042ec <PCD_EP_ISR_Handler+0x784>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	61bb      	str	r3, [r7, #24]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	461a      	mov	r2, r3
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	4413      	add	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003da0:	617b      	str	r3, [r7, #20]
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	801a      	strh	r2, [r3, #0]
 8003db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	2b3e      	cmp	r3, #62	; 0x3e
 8003db8:	d91d      	bls.n	8003df6 <PCD_EP_ISR_Handler+0x28e>
 8003dba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	095b      	lsrs	r3, r3, #5
 8003dc0:	647b      	str	r3, [r7, #68]	; 0x44
 8003dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f003 031f 	and.w	r3, r3, #31
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d102      	bne.n	8003dd4 <PCD_EP_ISR_Handler+0x26c>
 8003dce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	647b      	str	r3, [r7, #68]	; 0x44
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	881b      	ldrh	r3, [r3, #0]
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	029b      	lsls	r3, r3, #10
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	4313      	orrs	r3, r2
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	801a      	strh	r2, [r3, #0]
 8003df4:	e026      	b.n	8003e44 <PCD_EP_ISR_Handler+0x2dc>
 8003df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10a      	bne.n	8003e14 <PCD_EP_ISR_Handler+0x2ac>
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	881b      	ldrh	r3, [r3, #0]
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	801a      	strh	r2, [r3, #0]
 8003e12:	e017      	b.n	8003e44 <PCD_EP_ISR_Handler+0x2dc>
 8003e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	085b      	lsrs	r3, r3, #1
 8003e1a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d002      	beq.n	8003e2e <PCD_EP_ISR_Handler+0x2c6>
 8003e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	647b      	str	r3, [r7, #68]	; 0x44
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	881b      	ldrh	r3, [r3, #0]
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	029b      	lsls	r3, r3, #10
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	881b      	ldrh	r3, [r3, #0]
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e54:	827b      	strh	r3, [r7, #18]
 8003e56:	8a7b      	ldrh	r3, [r7, #18]
 8003e58:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003e5c:	827b      	strh	r3, [r7, #18]
 8003e5e:	8a7b      	ldrh	r3, [r7, #18]
 8003e60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003e64:	827b      	strh	r3, [r7, #18]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	8a7b      	ldrh	r3, [r7, #18]
 8003e6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	8013      	strh	r3, [r2, #0]
 8003e80:	e234      	b.n	80042ec <PCD_EP_ISR_Handler+0x784>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	461a      	mov	r2, r3
 8003e88:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e96:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f280 80fc 	bge.w	8004098 <PCD_EP_ISR_Handler+0x530>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	881b      	ldrh	r3, [r3, #0]
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4413      	add	r3, r2
 8003eca:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003ece:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ed2:	b292      	uxth	r2, r2
 8003ed4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003ed6:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003eda:	4613      	mov	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4413      	add	r3, r2
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	4413      	add	r3, r2
 8003eea:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003eec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eee:	7b1b      	ldrb	r3, [r3, #12]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d125      	bne.n	8003f40 <PCD_EP_ISR_Handler+0x3d8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	461a      	mov	r2, r3
 8003f00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	4413      	add	r3, r2
 8003f08:	3306      	adds	r3, #6
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	6812      	ldr	r2, [r2, #0]
 8003f10:	4413      	add	r3, r2
 8003f12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f1c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8003f20:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 8092 	beq.w	800404e <PCD_EP_ISR_Handler+0x4e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f30:	6959      	ldr	r1, [r3, #20]
 8003f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f34:	88da      	ldrh	r2, [r3, #6]
 8003f36:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003f3a:	f004 fb76 	bl	800862a <USB_ReadPMA>
 8003f3e:	e086      	b.n	800404e <PCD_EP_ISR_Handler+0x4e6>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003f40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f42:	78db      	ldrb	r3, [r3, #3]
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d10a      	bne.n	8003f5e <PCD_EP_ISR_Handler+0x3f6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003f48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f9d9 	bl	8004308 <HAL_PCD_EP_DB_Receive>
 8003f56:	4603      	mov	r3, r0
 8003f58:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8003f5c:	e077      	b.n	800404e <PCD_EP_ISR_Handler+0x4e6>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f78:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	461a      	mov	r2, r3
 8003f82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	441a      	add	r2, r3
 8003f8a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003f8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4413      	add	r3, r2
 8003fb0:	881b      	ldrh	r3, [r3, #0]
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d024      	beq.n	8004006 <PCD_EP_ISR_Handler+0x49e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	4413      	add	r3, r2
 8003fd0:	3302      	adds	r3, #2
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6812      	ldr	r2, [r2, #0]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fde:	881b      	ldrh	r3, [r3, #0]
 8003fe0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fe4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003fe8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d02e      	beq.n	800404e <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6818      	ldr	r0, [r3, #0]
 8003ff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ff6:	6959      	ldr	r1, [r3, #20]
 8003ff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ffa:	891a      	ldrh	r2, [r3, #8]
 8003ffc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004000:	f004 fb13 	bl	800862a <USB_ReadPMA>
 8004004:	e023      	b.n	800404e <PCD_EP_ISR_Handler+0x4e6>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800400e:	b29b      	uxth	r3, r3
 8004010:	461a      	mov	r2, r3
 8004012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	4413      	add	r3, r2
 800401a:	3306      	adds	r3, #6
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6812      	ldr	r2, [r2, #0]
 8004022:	4413      	add	r3, r2
 8004024:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800402e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004032:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004036:	2b00      	cmp	r3, #0
 8004038:	d009      	beq.n	800404e <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6818      	ldr	r0, [r3, #0]
 800403e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004040:	6959      	ldr	r1, [r3, #20]
 8004042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004044:	895a      	ldrh	r2, [r3, #10]
 8004046:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800404a:	f004 faee 	bl	800862a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800404e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004050:	69da      	ldr	r2, [r3, #28]
 8004052:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004056:	441a      	add	r2, r3
 8004058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800405a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800405c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800405e:	695a      	ldr	r2, [r3, #20]
 8004060:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004064:	441a      	add	r2, r3
 8004066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004068:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800406a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d005      	beq.n	800407e <PCD_EP_ISR_Handler+0x516>
 8004072:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	429a      	cmp	r2, r3
 800407c:	d206      	bcs.n	800408c <PCD_EP_ISR_Handler+0x524>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800407e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	4619      	mov	r1, r3
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f006 f863 	bl	800a150 <HAL_PCD_DataOutStageCallback>
 800408a:	e005      	b.n	8004098 <PCD_EP_ISR_Handler+0x530>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004092:	4618      	mov	r0, r3
 8004094:	f002 fffa 	bl	800708c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004098:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800409c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 8123 	beq.w	80042ec <PCD_EP_ISR_Handler+0x784>
      {
        ep = &hpcd->IN_ep[epindex];
 80040a6:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80040aa:	4613      	mov	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4413      	add	r3, r2
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	3310      	adds	r3, #16
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	4413      	add	r3, r2
 80040b8:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80040d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	461a      	mov	r2, r3
 80040de:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	441a      	add	r2, r3
 80040e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80040ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80040f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040f8:	78db      	ldrb	r3, [r3, #3]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	f040 80a2 	bne.w	8004244 <PCD_EP_ISR_Handler+0x6dc>
        {
          ep->xfer_len = 0U;
 8004100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004102:	2200      	movs	r2, #0
 8004104:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004108:	7b1b      	ldrb	r3, [r3, #12]
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 8093 	beq.w	8004236 <PCD_EP_ISR_Handler+0x6ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004110:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004118:	2b00      	cmp	r3, #0
 800411a:	d046      	beq.n	80041aa <PCD_EP_ISR_Handler+0x642>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800411c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800411e:	785b      	ldrb	r3, [r3, #1]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d126      	bne.n	8004172 <PCD_EP_ISR_Handler+0x60a>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	627b      	str	r3, [r7, #36]	; 0x24
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004132:	b29b      	uxth	r3, r3
 8004134:	461a      	mov	r2, r3
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	4413      	add	r3, r2
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
 800413c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	011a      	lsls	r2, r3, #4
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	4413      	add	r3, r2
 8004146:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800414a:	623b      	str	r3, [r7, #32]
 800414c:	6a3b      	ldr	r3, [r7, #32]
 800414e:	881b      	ldrh	r3, [r3, #0]
 8004150:	b29b      	uxth	r3, r3
 8004152:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004156:	b29a      	uxth	r2, r3
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	801a      	strh	r2, [r3, #0]
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	881b      	ldrh	r3, [r3, #0]
 8004160:	b29b      	uxth	r3, r3
 8004162:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004166:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800416a:	b29a      	uxth	r2, r3
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	801a      	strh	r2, [r3, #0]
 8004170:	e061      	b.n	8004236 <PCD_EP_ISR_Handler+0x6ce>
 8004172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004174:	785b      	ldrb	r3, [r3, #1]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d15d      	bne.n	8004236 <PCD_EP_ISR_Handler+0x6ce>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004188:	b29b      	uxth	r3, r3
 800418a:	461a      	mov	r2, r3
 800418c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418e:	4413      	add	r3, r2
 8004190:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	011a      	lsls	r2, r3, #4
 8004198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419a:	4413      	add	r3, r2
 800419c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80041a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80041a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a4:	2200      	movs	r2, #0
 80041a6:	801a      	strh	r2, [r3, #0]
 80041a8:	e045      	b.n	8004236 <PCD_EP_ISR_Handler+0x6ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041b2:	785b      	ldrb	r3, [r3, #1]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d126      	bne.n	8004206 <PCD_EP_ISR_Handler+0x69e>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	637b      	str	r3, [r7, #52]	; 0x34
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	461a      	mov	r2, r3
 80041ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041cc:	4413      	add	r3, r2
 80041ce:	637b      	str	r3, [r7, #52]	; 0x34
 80041d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	011a      	lsls	r2, r3, #4
 80041d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d8:	4413      	add	r3, r2
 80041da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041de:	633b      	str	r3, [r7, #48]	; 0x30
 80041e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ee:	801a      	strh	r2, [r3, #0]
 80041f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f2:	881b      	ldrh	r3, [r3, #0]
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041fe:	b29a      	uxth	r2, r3
 8004200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004202:	801a      	strh	r2, [r3, #0]
 8004204:	e017      	b.n	8004236 <PCD_EP_ISR_Handler+0x6ce>
 8004206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004208:	785b      	ldrb	r3, [r3, #1]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d113      	bne.n	8004236 <PCD_EP_ISR_Handler+0x6ce>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004216:	b29b      	uxth	r3, r3
 8004218:	461a      	mov	r2, r3
 800421a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800421c:	4413      	add	r3, r2
 800421e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	011a      	lsls	r2, r3, #4
 8004226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004228:	4413      	add	r3, r2
 800422a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800422e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004232:	2200      	movs	r2, #0
 8004234:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	4619      	mov	r1, r3
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f005 ffa2 	bl	800a186 <HAL_PCD_DataInStageCallback>
 8004242:	e053      	b.n	80042ec <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004244:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800424c:	2b00      	cmp	r3, #0
 800424e:	d146      	bne.n	80042de <PCD_EP_ISR_Handler+0x776>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004258:	b29b      	uxth	r3, r3
 800425a:	461a      	mov	r2, r3
 800425c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	4413      	add	r3, r2
 8004264:	3302      	adds	r3, #2
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6812      	ldr	r2, [r2, #0]
 800426c:	4413      	add	r3, r2
 800426e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004278:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800427c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800427e:	699a      	ldr	r2, [r3, #24]
 8004280:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004284:	429a      	cmp	r2, r3
 8004286:	d907      	bls.n	8004298 <PCD_EP_ISR_Handler+0x730>
            {
              ep->xfer_len -= TxPctSize;
 8004288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800428a:	699a      	ldr	r2, [r3, #24]
 800428c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004290:	1ad2      	subs	r2, r2, r3
 8004292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004294:	619a      	str	r2, [r3, #24]
 8004296:	e002      	b.n	800429e <PCD_EP_ISR_Handler+0x736>
            }
            else
            {
              ep->xfer_len = 0U;
 8004298:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800429a:	2200      	movs	r2, #0
 800429c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800429e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <PCD_EP_ISR_Handler+0x74c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	4619      	mov	r1, r3
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f005 ff6a 	bl	800a186 <HAL_PCD_DataInStageCallback>
 80042b2:	e01b      	b.n	80042ec <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80042b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042b6:	695a      	ldr	r2, [r3, #20]
 80042b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80042bc:	441a      	add	r2, r3
 80042be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042c0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80042c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042c4:	69da      	ldr	r2, [r3, #28]
 80042c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80042ca:	441a      	add	r2, r3
 80042cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ce:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042d6:	4618      	mov	r0, r3
 80042d8:	f002 fed8 	bl	800708c <USB_EPStartXfer>
 80042dc:	e006      	b.n	80042ec <PCD_EP_ISR_Handler+0x784>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80042de:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80042e2:	461a      	mov	r2, r3
 80042e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f91b 	bl	8004522 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	b21b      	sxth	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f6ff ac3a 	blt.w	8003b72 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3758      	adds	r7, #88	; 0x58
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	4613      	mov	r3, r2
 8004314:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004316:	88fb      	ldrh	r3, [r7, #6]
 8004318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d07e      	beq.n	800441e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004328:	b29b      	uxth	r3, r3
 800432a:	461a      	mov	r2, r3
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	4413      	add	r3, r2
 8004334:	3302      	adds	r3, #2
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	6812      	ldr	r2, [r2, #0]
 800433c:	4413      	add	r3, r2
 800433e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004348:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	699a      	ldr	r2, [r3, #24]
 800434e:	8b7b      	ldrh	r3, [r7, #26]
 8004350:	429a      	cmp	r2, r3
 8004352:	d306      	bcc.n	8004362 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	699a      	ldr	r2, [r3, #24]
 8004358:	8b7b      	ldrh	r3, [r7, #26]
 800435a:	1ad2      	subs	r2, r2, r3
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	619a      	str	r2, [r3, #24]
 8004360:	e002      	b.n	8004368 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2200      	movs	r2, #0
 8004366:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d123      	bne.n	80043b8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	461a      	mov	r2, r3
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	881b      	ldrh	r3, [r3, #0]
 8004380:	b29b      	uxth	r3, r3
 8004382:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438a:	833b      	strh	r3, [r7, #24]
 800438c:	8b3b      	ldrh	r3, [r7, #24]
 800438e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004392:	833b      	strh	r3, [r7, #24]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	461a      	mov	r2, r3
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	441a      	add	r2, r3
 80043a2:	8b3b      	ldrh	r3, [r7, #24]
 80043a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80043b8:	88fb      	ldrh	r3, [r7, #6]
 80043ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d01f      	beq.n	8004402 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	461a      	mov	r2, r3
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	881b      	ldrh	r3, [r3, #0]
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043dc:	82fb      	strh	r3, [r7, #22]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	461a      	mov	r2, r3
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	441a      	add	r2, r3
 80043ec:	8afb      	ldrh	r3, [r7, #22]
 80043ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043fe:	b29b      	uxth	r3, r3
 8004400:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004402:	8b7b      	ldrh	r3, [r7, #26]
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 8087 	beq.w	8004518 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6818      	ldr	r0, [r3, #0]
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	6959      	ldr	r1, [r3, #20]
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	891a      	ldrh	r2, [r3, #8]
 8004416:	8b7b      	ldrh	r3, [r7, #26]
 8004418:	f004 f907 	bl	800862a <USB_ReadPMA>
 800441c:	e07c      	b.n	8004518 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004426:	b29b      	uxth	r3, r3
 8004428:	461a      	mov	r2, r3
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	4413      	add	r3, r2
 8004432:	3306      	adds	r3, #6
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	6812      	ldr	r2, [r2, #0]
 800443a:	4413      	add	r3, r2
 800443c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004440:	881b      	ldrh	r3, [r3, #0]
 8004442:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004446:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	699a      	ldr	r2, [r3, #24]
 800444c:	8b7b      	ldrh	r3, [r7, #26]
 800444e:	429a      	cmp	r2, r3
 8004450:	d306      	bcc.n	8004460 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	699a      	ldr	r2, [r3, #24]
 8004456:	8b7b      	ldrh	r3, [r7, #26]
 8004458:	1ad2      	subs	r2, r2, r3
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	619a      	str	r2, [r3, #24]
 800445e:	e002      	b.n	8004466 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2200      	movs	r2, #0
 8004464:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d123      	bne.n	80044b6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	461a      	mov	r2, r3
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	b29b      	uxth	r3, r3
 8004480:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004488:	83fb      	strh	r3, [r7, #30]
 800448a:	8bfb      	ldrh	r3, [r7, #30]
 800448c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004490:	83fb      	strh	r3, [r7, #30]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	461a      	mov	r2, r3
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	441a      	add	r2, r3
 80044a0:	8bfb      	ldrh	r3, [r7, #30]
 80044a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80044b6:	88fb      	ldrh	r3, [r7, #6]
 80044b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d11f      	bne.n	8004500 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	461a      	mov	r2, r3
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	881b      	ldrh	r3, [r3, #0]
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044da:	83bb      	strh	r3, [r7, #28]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	461a      	mov	r2, r3
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	441a      	add	r2, r3
 80044ea:	8bbb      	ldrh	r3, [r7, #28]
 80044ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004500:	8b7b      	ldrh	r3, [r7, #26]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d008      	beq.n	8004518 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6818      	ldr	r0, [r3, #0]
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	6959      	ldr	r1, [r3, #20]
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	895a      	ldrh	r2, [r3, #10]
 8004512:	8b7b      	ldrh	r3, [r7, #26]
 8004514:	f004 f889 	bl	800862a <USB_ReadPMA>
    }
  }

  return count;
 8004518:	8b7b      	ldrh	r3, [r7, #26]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3720      	adds	r7, #32
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b0a4      	sub	sp, #144	; 0x90
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	4613      	mov	r3, r2
 800452e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004530:	88fb      	ldrh	r3, [r7, #6]
 8004532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 81dd 	beq.w	80048f6 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004544:	b29b      	uxth	r3, r3
 8004546:	461a      	mov	r2, r3
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	4413      	add	r3, r2
 8004550:	3302      	adds	r3, #2
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	6812      	ldr	r2, [r2, #0]
 8004558:	4413      	add	r3, r2
 800455a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800455e:	881b      	ldrh	r3, [r3, #0]
 8004560:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004564:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	699a      	ldr	r2, [r3, #24]
 800456c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004570:	429a      	cmp	r2, r3
 8004572:	d907      	bls.n	8004584 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	699a      	ldr	r2, [r3, #24]
 8004578:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800457c:	1ad2      	subs	r2, r2, r3
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	619a      	str	r2, [r3, #24]
 8004582:	e002      	b.n	800458a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	2200      	movs	r2, #0
 8004588:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	2b00      	cmp	r3, #0
 8004590:	f040 80b9 	bne.w	8004706 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	785b      	ldrb	r3, [r3, #1]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d126      	bne.n	80045ea <HAL_PCD_EP_DB_Transmit+0xc8>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	461a      	mov	r2, r3
 80045ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b0:	4413      	add	r3, r2
 80045b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	011a      	lsls	r2, r3, #4
 80045ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045bc:	4413      	add	r3, r2
 80045be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80045c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d2:	801a      	strh	r2, [r3, #0]
 80045d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	b29b      	uxth	r3, r3
 80045da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e6:	801a      	strh	r2, [r3, #0]
 80045e8:	e01a      	b.n	8004620 <HAL_PCD_EP_DB_Transmit+0xfe>
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	785b      	ldrb	r3, [r3, #1]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d116      	bne.n	8004620 <HAL_PCD_EP_DB_Transmit+0xfe>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	637b      	str	r3, [r7, #52]	; 0x34
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004600:	b29b      	uxth	r3, r3
 8004602:	461a      	mov	r2, r3
 8004604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004606:	4413      	add	r3, r2
 8004608:	637b      	str	r3, [r7, #52]	; 0x34
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	011a      	lsls	r2, r3, #4
 8004610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004612:	4413      	add	r3, r2
 8004614:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004618:	633b      	str	r3, [r7, #48]	; 0x30
 800461a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461c:	2200      	movs	r2, #0
 800461e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	627b      	str	r3, [r7, #36]	; 0x24
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	785b      	ldrb	r3, [r3, #1]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d126      	bne.n	800467c <HAL_PCD_EP_DB_Transmit+0x15a>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	61fb      	str	r3, [r7, #28]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800463c:	b29b      	uxth	r3, r3
 800463e:	461a      	mov	r2, r3
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	4413      	add	r3, r2
 8004644:	61fb      	str	r3, [r7, #28]
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	011a      	lsls	r2, r3, #4
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	4413      	add	r3, r2
 8004650:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004654:	61bb      	str	r3, [r7, #24]
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	881b      	ldrh	r3, [r3, #0]
 800465a:	b29b      	uxth	r3, r3
 800465c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004660:	b29a      	uxth	r2, r3
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	801a      	strh	r2, [r3, #0]
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	b29b      	uxth	r3, r3
 800466c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004674:	b29a      	uxth	r2, r3
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	801a      	strh	r2, [r3, #0]
 800467a:	e017      	b.n	80046ac <HAL_PCD_EP_DB_Transmit+0x18a>
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	785b      	ldrb	r3, [r3, #1]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d113      	bne.n	80046ac <HAL_PCD_EP_DB_Transmit+0x18a>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800468c:	b29b      	uxth	r3, r3
 800468e:	461a      	mov	r2, r3
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	4413      	add	r3, r2
 8004694:	627b      	str	r3, [r7, #36]	; 0x24
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	011a      	lsls	r2, r3, #4
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	4413      	add	r3, r2
 80046a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046a4:	623b      	str	r3, [r7, #32]
 80046a6:	6a3b      	ldr	r3, [r7, #32]
 80046a8:	2200      	movs	r2, #0
 80046aa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	4619      	mov	r1, r3
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f005 fd67 	bl	800a186 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80046b8:	88fb      	ldrh	r3, [r7, #6]
 80046ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 82fc 	beq.w	8004cbc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	461a      	mov	r2, r3
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046de:	82fb      	strh	r3, [r7, #22]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	461a      	mov	r2, r3
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	441a      	add	r2, r3
 80046ee:	8afb      	ldrh	r3, [r7, #22]
 80046f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004700:	b29b      	uxth	r3, r3
 8004702:	8013      	strh	r3, [r2, #0]
 8004704:	e2da      	b.n	8004cbc <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004706:	88fb      	ldrh	r3, [r7, #6]
 8004708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d021      	beq.n	8004754 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	461a      	mov	r2, r3
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	881b      	ldrh	r3, [r3, #0]
 8004720:	b29b      	uxth	r3, r3
 8004722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	461a      	mov	r2, r3
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	441a      	add	r2, r3
 800473c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004740:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004744:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004748:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800474c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004750:	b29b      	uxth	r3, r3
 8004752:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800475a:	2b01      	cmp	r3, #1
 800475c:	f040 82ae 	bne.w	8004cbc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	695a      	ldr	r2, [r3, #20]
 8004764:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004768:	441a      	add	r2, r3
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	69da      	ldr	r2, [r3, #28]
 8004772:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004776:	441a      	add	r2, r3
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	6a1a      	ldr	r2, [r3, #32]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	429a      	cmp	r2, r3
 8004786:	d30b      	bcc.n	80047a0 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	6a1a      	ldr	r2, [r3, #32]
 8004794:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004798:	1ad2      	subs	r2, r2, r3
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	621a      	str	r2, [r3, #32]
 800479e:	e017      	b.n	80047d0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d108      	bne.n	80047ba <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80047a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80047ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80047b8:	e00a      	b.n	80047d0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	2200      	movs	r2, #0
 80047ce:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	785b      	ldrb	r3, [r3, #1]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d165      	bne.n	80048a4 <HAL_PCD_EP_DB_Transmit+0x382>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	461a      	mov	r2, r3
 80047ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ec:	4413      	add	r3, r2
 80047ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	011a      	lsls	r2, r3, #4
 80047f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047f8:	4413      	add	r3, r2
 80047fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	b29b      	uxth	r3, r3
 8004806:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800480a:	b29a      	uxth	r2, r3
 800480c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480e:	801a      	strh	r2, [r3, #0]
 8004810:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004814:	2b3e      	cmp	r3, #62	; 0x3e
 8004816:	d91d      	bls.n	8004854 <HAL_PCD_EP_DB_Transmit+0x332>
 8004818:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800481c:	095b      	lsrs	r3, r3, #5
 800481e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004820:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004824:	f003 031f 	and.w	r3, r3, #31
 8004828:	2b00      	cmp	r3, #0
 800482a:	d102      	bne.n	8004832 <HAL_PCD_EP_DB_Transmit+0x310>
 800482c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800482e:	3b01      	subs	r3, #1
 8004830:	64bb      	str	r3, [r7, #72]	; 0x48
 8004832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	b29a      	uxth	r2, r3
 8004838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800483a:	b29b      	uxth	r3, r3
 800483c:	029b      	lsls	r3, r3, #10
 800483e:	b29b      	uxth	r3, r3
 8004840:	4313      	orrs	r3, r2
 8004842:	b29b      	uxth	r3, r3
 8004844:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004848:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800484c:	b29a      	uxth	r2, r3
 800484e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004850:	801a      	strh	r2, [r3, #0]
 8004852:	e044      	b.n	80048de <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004854:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10a      	bne.n	8004872 <HAL_PCD_EP_DB_Transmit+0x350>
 800485c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485e:	881b      	ldrh	r3, [r3, #0]
 8004860:	b29b      	uxth	r3, r3
 8004862:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004866:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800486a:	b29a      	uxth	r2, r3
 800486c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486e:	801a      	strh	r2, [r3, #0]
 8004870:	e035      	b.n	80048de <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004872:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004876:	085b      	lsrs	r3, r3, #1
 8004878:	64bb      	str	r3, [r7, #72]	; 0x48
 800487a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <HAL_PCD_EP_DB_Transmit+0x36a>
 8004886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004888:	3301      	adds	r3, #1
 800488a:	64bb      	str	r3, [r7, #72]	; 0x48
 800488c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	b29a      	uxth	r2, r3
 8004892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004894:	b29b      	uxth	r3, r3
 8004896:	029b      	lsls	r3, r3, #10
 8004898:	b29b      	uxth	r3, r3
 800489a:	4313      	orrs	r3, r2
 800489c:	b29a      	uxth	r2, r3
 800489e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a0:	801a      	strh	r2, [r3, #0]
 80048a2:	e01c      	b.n	80048de <HAL_PCD_EP_DB_Transmit+0x3bc>
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	785b      	ldrb	r3, [r3, #1]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d118      	bne.n	80048de <HAL_PCD_EP_DB_Transmit+0x3bc>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	647b      	str	r3, [r7, #68]	; 0x44
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	461a      	mov	r2, r3
 80048be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048c0:	4413      	add	r3, r2
 80048c2:	647b      	str	r3, [r7, #68]	; 0x44
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	011a      	lsls	r2, r3, #4
 80048ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048cc:	4413      	add	r3, r2
 80048ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048d2:	643b      	str	r3, [r7, #64]	; 0x40
 80048d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048d8:	b29a      	uxth	r2, r3
 80048da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048dc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6818      	ldr	r0, [r3, #0]
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	6959      	ldr	r1, [r3, #20]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	891a      	ldrh	r2, [r3, #8]
 80048ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	f003 fe56 	bl	80085a0 <USB_WritePMA>
 80048f4:	e1e2      	b.n	8004cbc <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048fe:	b29b      	uxth	r3, r3
 8004900:	461a      	mov	r2, r3
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	4413      	add	r3, r2
 800490a:	3306      	adds	r3, #6
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	6812      	ldr	r2, [r2, #0]
 8004912:	4413      	add	r3, r2
 8004914:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004918:	881b      	ldrh	r3, [r3, #0]
 800491a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800491e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	699a      	ldr	r2, [r3, #24]
 8004926:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800492a:	429a      	cmp	r2, r3
 800492c:	d307      	bcc.n	800493e <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	699a      	ldr	r2, [r3, #24]
 8004932:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004936:	1ad2      	subs	r2, r2, r3
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	619a      	str	r2, [r3, #24]
 800493c:	e002      	b.n	8004944 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	2200      	movs	r2, #0
 8004942:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	2b00      	cmp	r3, #0
 800494a:	f040 80c0 	bne.w	8004ace <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	785b      	ldrb	r3, [r3, #1]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d126      	bne.n	80049a4 <HAL_PCD_EP_DB_Transmit+0x482>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004964:	b29b      	uxth	r3, r3
 8004966:	461a      	mov	r2, r3
 8004968:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800496a:	4413      	add	r3, r2
 800496c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	011a      	lsls	r2, r3, #4
 8004974:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004976:	4413      	add	r3, r2
 8004978:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800497c:	67bb      	str	r3, [r7, #120]	; 0x78
 800497e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004980:	881b      	ldrh	r3, [r3, #0]
 8004982:	b29b      	uxth	r3, r3
 8004984:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004988:	b29a      	uxth	r2, r3
 800498a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800498c:	801a      	strh	r2, [r3, #0]
 800498e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004990:	881b      	ldrh	r3, [r3, #0]
 8004992:	b29b      	uxth	r3, r3
 8004994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800499c:	b29a      	uxth	r2, r3
 800499e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049a0:	801a      	strh	r2, [r3, #0]
 80049a2:	e01a      	b.n	80049da <HAL_PCD_EP_DB_Transmit+0x4b8>
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	785b      	ldrb	r3, [r3, #1]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d116      	bne.n	80049da <HAL_PCD_EP_DB_Transmit+0x4b8>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	667b      	str	r3, [r7, #100]	; 0x64
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	461a      	mov	r2, r3
 80049be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049c0:	4413      	add	r3, r2
 80049c2:	667b      	str	r3, [r7, #100]	; 0x64
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	011a      	lsls	r2, r3, #4
 80049ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049cc:	4413      	add	r3, r2
 80049ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049d2:	663b      	str	r3, [r7, #96]	; 0x60
 80049d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049d6:	2200      	movs	r2, #0
 80049d8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	677b      	str	r3, [r7, #116]	; 0x74
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	785b      	ldrb	r3, [r3, #1]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d12b      	bne.n	8004a40 <HAL_PCD_EP_DB_Transmit+0x51e>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	461a      	mov	r2, r3
 80049fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049fc:	4413      	add	r3, r2
 80049fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	011a      	lsls	r2, r3, #4
 8004a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a08:	4413      	add	r3, r2
 8004a0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a24:	801a      	strh	r2, [r3, #0]
 8004a26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a3c:	801a      	strh	r2, [r3, #0]
 8004a3e:	e017      	b.n	8004a70 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	785b      	ldrb	r3, [r3, #1]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d113      	bne.n	8004a70 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	461a      	mov	r2, r3
 8004a54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a56:	4413      	add	r3, r2
 8004a58:	677b      	str	r3, [r7, #116]	; 0x74
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	011a      	lsls	r2, r3, #4
 8004a60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a62:	4413      	add	r3, r2
 8004a64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a68:	673b      	str	r3, [r7, #112]	; 0x70
 8004a6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	4619      	mov	r1, r3
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f005 fb85 	bl	800a186 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004a7c:	88fb      	ldrh	r3, [r7, #6]
 8004a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f040 811a 	bne.w	8004cbc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	881b      	ldrh	r3, [r3, #0]
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa2:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	461a      	mov	r2, r3
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	441a      	add	r2, r3
 8004ab4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004ab8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004abc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ac0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	8013      	strh	r3, [r2, #0]
 8004acc:	e0f6      	b.n	8004cbc <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004ace:	88fb      	ldrh	r3, [r7, #6]
 8004ad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d121      	bne.n	8004b1c <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	461a      	mov	r2, r3
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	881b      	ldrh	r3, [r3, #0]
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	461a      	mov	r2, r3
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	441a      	add	r2, r3
 8004b04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	f040 80ca 	bne.w	8004cbc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	695a      	ldr	r2, [r3, #20]
 8004b2c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b30:	441a      	add	r2, r3
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	69da      	ldr	r2, [r3, #28]
 8004b3a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b3e:	441a      	add	r2, r3
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	6a1a      	ldr	r2, [r3, #32]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d30b      	bcc.n	8004b68 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	6a1a      	ldr	r2, [r3, #32]
 8004b5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b60:	1ad2      	subs	r2, r2, r3
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	621a      	str	r2, [r3, #32]
 8004b66:	e017      	b.n	8004b98 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d108      	bne.n	8004b82 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004b70:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004b80:	e00a      	b.n	8004b98 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	657b      	str	r3, [r7, #84]	; 0x54
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	785b      	ldrb	r3, [r3, #1]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d165      	bne.n	8004c72 <HAL_PCD_EP_DB_Transmit+0x750>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bba:	4413      	add	r3, r2
 8004bbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	011a      	lsls	r2, r3, #4
 8004bc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004bcc:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bd0:	881b      	ldrh	r3, [r3, #0]
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bdc:	801a      	strh	r2, [r3, #0]
 8004bde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004be2:	2b3e      	cmp	r3, #62	; 0x3e
 8004be4:	d91d      	bls.n	8004c22 <HAL_PCD_EP_DB_Transmit+0x700>
 8004be6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bf2:	f003 031f 	and.w	r3, r3, #31
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d102      	bne.n	8004c00 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004bfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c02:	881b      	ldrh	r3, [r3, #0]
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	029b      	lsls	r3, r3, #10
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c1e:	801a      	strh	r2, [r3, #0]
 8004c20:	e041      	b.n	8004ca6 <HAL_PCD_EP_DB_Transmit+0x784>
 8004c22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10a      	bne.n	8004c40 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004c2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c2c:	881b      	ldrh	r3, [r3, #0]
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c3c:	801a      	strh	r2, [r3, #0]
 8004c3e:	e032      	b.n	8004ca6 <HAL_PCD_EP_DB_Transmit+0x784>
 8004c40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c44:	085b      	lsrs	r3, r3, #1
 8004c46:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <HAL_PCD_EP_DB_Transmit+0x738>
 8004c54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c56:	3301      	adds	r3, #1
 8004c58:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c5c:	881b      	ldrh	r3, [r3, #0]
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	029b      	lsls	r3, r3, #10
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c6e:	801a      	strh	r2, [r3, #0]
 8004c70:	e019      	b.n	8004ca6 <HAL_PCD_EP_DB_Transmit+0x784>
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	785b      	ldrb	r3, [r3, #1]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d115      	bne.n	8004ca6 <HAL_PCD_EP_DB_Transmit+0x784>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	461a      	mov	r2, r3
 8004c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c88:	4413      	add	r3, r2
 8004c8a:	657b      	str	r3, [r7, #84]	; 0x54
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	011a      	lsls	r2, r3, #4
 8004c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c94:	4413      	add	r3, r2
 8004c96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c9a:	653b      	str	r3, [r7, #80]	; 0x50
 8004c9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ca4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6818      	ldr	r0, [r3, #0]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	6959      	ldr	r1, [r3, #20]
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	895a      	ldrh	r2, [r3, #10]
 8004cb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	f003 fc72 	bl	80085a0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4413      	add	r3, r2
 8004cca:	881b      	ldrh	r3, [r3, #0]
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cd6:	82bb      	strh	r3, [r7, #20]
 8004cd8:	8abb      	ldrh	r3, [r7, #20]
 8004cda:	f083 0310 	eor.w	r3, r3, #16
 8004cde:	82bb      	strh	r3, [r7, #20]
 8004ce0:	8abb      	ldrh	r3, [r7, #20]
 8004ce2:	f083 0320 	eor.w	r3, r3, #32
 8004ce6:	82bb      	strh	r3, [r7, #20]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	461a      	mov	r2, r3
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	441a      	add	r2, r3
 8004cf6:	8abb      	ldrh	r3, [r7, #20]
 8004cf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3790      	adds	r7, #144	; 0x90
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b087      	sub	sp, #28
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	60f8      	str	r0, [r7, #12]
 8004d1e:	607b      	str	r3, [r7, #4]
 8004d20:	460b      	mov	r3, r1
 8004d22:	817b      	strh	r3, [r7, #10]
 8004d24:	4613      	mov	r3, r2
 8004d26:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004d28:	897b      	ldrh	r3, [r7, #10]
 8004d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00b      	beq.n	8004d4c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d34:	897b      	ldrh	r3, [r7, #10]
 8004d36:	f003 0207 	and.w	r2, r3, #7
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	00db      	lsls	r3, r3, #3
 8004d42:	3310      	adds	r3, #16
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	4413      	add	r3, r2
 8004d48:	617b      	str	r3, [r7, #20]
 8004d4a:	e009      	b.n	8004d60 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d4c:	897a      	ldrh	r2, [r7, #10]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004d60:	893b      	ldrh	r3, [r7, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d107      	bne.n	8004d76 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	80da      	strh	r2, [r3, #6]
 8004d74:	e00b      	b.n	8004d8e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	0c1b      	lsrs	r3, r3, #16
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	371c      	adds	r7, #28
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bc80      	pop	{r7}
 8004d98:	4770      	bx	lr
	...

08004d9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e26c      	b.n	8005288 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f000 8087 	beq.w	8004eca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004dbc:	4b92      	ldr	r3, [pc, #584]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f003 030c 	and.w	r3, r3, #12
 8004dc4:	2b04      	cmp	r3, #4
 8004dc6:	d00c      	beq.n	8004de2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004dc8:	4b8f      	ldr	r3, [pc, #572]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f003 030c 	and.w	r3, r3, #12
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d112      	bne.n	8004dfa <HAL_RCC_OscConfig+0x5e>
 8004dd4:	4b8c      	ldr	r3, [pc, #560]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de0:	d10b      	bne.n	8004dfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004de2:	4b89      	ldr	r3, [pc, #548]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d06c      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x12c>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d168      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e246      	b.n	8005288 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e02:	d106      	bne.n	8004e12 <HAL_RCC_OscConfig+0x76>
 8004e04:	4b80      	ldr	r3, [pc, #512]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a7f      	ldr	r2, [pc, #508]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e0e:	6013      	str	r3, [r2, #0]
 8004e10:	e02e      	b.n	8004e70 <HAL_RCC_OscConfig+0xd4>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10c      	bne.n	8004e34 <HAL_RCC_OscConfig+0x98>
 8004e1a:	4b7b      	ldr	r3, [pc, #492]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a7a      	ldr	r2, [pc, #488]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	4b78      	ldr	r3, [pc, #480]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a77      	ldr	r2, [pc, #476]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004e2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e30:	6013      	str	r3, [r2, #0]
 8004e32:	e01d      	b.n	8004e70 <HAL_RCC_OscConfig+0xd4>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e3c:	d10c      	bne.n	8004e58 <HAL_RCC_OscConfig+0xbc>
 8004e3e:	4b72      	ldr	r3, [pc, #456]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a71      	ldr	r2, [pc, #452]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e48:	6013      	str	r3, [r2, #0]
 8004e4a:	4b6f      	ldr	r3, [pc, #444]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a6e      	ldr	r2, [pc, #440]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	e00b      	b.n	8004e70 <HAL_RCC_OscConfig+0xd4>
 8004e58:	4b6b      	ldr	r3, [pc, #428]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a6a      	ldr	r2, [pc, #424]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e62:	6013      	str	r3, [r2, #0]
 8004e64:	4b68      	ldr	r3, [pc, #416]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a67      	ldr	r2, [pc, #412]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004e6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d013      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e78:	f7fd faa0 	bl	80023bc <HAL_GetTick>
 8004e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e80:	f7fd fa9c 	bl	80023bc <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b64      	cmp	r3, #100	; 0x64
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e1fa      	b.n	8005288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e92:	4b5d      	ldr	r3, [pc, #372]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0f0      	beq.n	8004e80 <HAL_RCC_OscConfig+0xe4>
 8004e9e:	e014      	b.n	8004eca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea0:	f7fd fa8c 	bl	80023bc <HAL_GetTick>
 8004ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ea8:	f7fd fa88 	bl	80023bc <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b64      	cmp	r3, #100	; 0x64
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e1e6      	b.n	8005288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eba:	4b53      	ldr	r3, [pc, #332]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1f0      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x10c>
 8004ec6:	e000      	b.n	8004eca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d063      	beq.n	8004f9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ed6:	4b4c      	ldr	r3, [pc, #304]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f003 030c 	and.w	r3, r3, #12
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00b      	beq.n	8004efa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004ee2:	4b49      	ldr	r3, [pc, #292]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f003 030c 	and.w	r3, r3, #12
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	d11c      	bne.n	8004f28 <HAL_RCC_OscConfig+0x18c>
 8004eee:	4b46      	ldr	r3, [pc, #280]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d116      	bne.n	8004f28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004efa:	4b43      	ldr	r3, [pc, #268]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d005      	beq.n	8004f12 <HAL_RCC_OscConfig+0x176>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d001      	beq.n	8004f12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e1ba      	b.n	8005288 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f12:	4b3d      	ldr	r3, [pc, #244]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	4939      	ldr	r1, [pc, #228]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f26:	e03a      	b.n	8004f9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d020      	beq.n	8004f72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f30:	4b36      	ldr	r3, [pc, #216]	; (800500c <HAL_RCC_OscConfig+0x270>)
 8004f32:	2201      	movs	r2, #1
 8004f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f36:	f7fd fa41 	bl	80023bc <HAL_GetTick>
 8004f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f3c:	e008      	b.n	8004f50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f3e:	f7fd fa3d 	bl	80023bc <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d901      	bls.n	8004f50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e19b      	b.n	8005288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f50:	4b2d      	ldr	r3, [pc, #180]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d0f0      	beq.n	8004f3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f5c:	4b2a      	ldr	r3, [pc, #168]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	00db      	lsls	r3, r3, #3
 8004f6a:	4927      	ldr	r1, [pc, #156]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	600b      	str	r3, [r1, #0]
 8004f70:	e015      	b.n	8004f9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f72:	4b26      	ldr	r3, [pc, #152]	; (800500c <HAL_RCC_OscConfig+0x270>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f78:	f7fd fa20 	bl	80023bc <HAL_GetTick>
 8004f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f7e:	e008      	b.n	8004f92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f80:	f7fd fa1c 	bl	80023bc <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e17a      	b.n	8005288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f92:	4b1d      	ldr	r3, [pc, #116]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1f0      	bne.n	8004f80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0308 	and.w	r3, r3, #8
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d03a      	beq.n	8005020 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d019      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fb2:	4b17      	ldr	r3, [pc, #92]	; (8005010 <HAL_RCC_OscConfig+0x274>)
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fb8:	f7fd fa00 	bl	80023bc <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fbe:	e008      	b.n	8004fd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fc0:	f7fd f9fc 	bl	80023bc <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e15a      	b.n	8005288 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fd2:	4b0d      	ldr	r3, [pc, #52]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d0f0      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004fde:	2001      	movs	r0, #1
 8004fe0:	f000 facc 	bl	800557c <RCC_Delay>
 8004fe4:	e01c      	b.n	8005020 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fe6:	4b0a      	ldr	r3, [pc, #40]	; (8005010 <HAL_RCC_OscConfig+0x274>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fec:	f7fd f9e6 	bl	80023bc <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ff2:	e00f      	b.n	8005014 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ff4:	f7fd f9e2 	bl	80023bc <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d908      	bls.n	8005014 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e140      	b.n	8005288 <HAL_RCC_OscConfig+0x4ec>
 8005006:	bf00      	nop
 8005008:	40021000 	.word	0x40021000
 800500c:	42420000 	.word	0x42420000
 8005010:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005014:	4b9e      	ldr	r3, [pc, #632]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1e9      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0304 	and.w	r3, r3, #4
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 80a6 	beq.w	800517a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800502e:	2300      	movs	r3, #0
 8005030:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005032:	4b97      	ldr	r3, [pc, #604]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10d      	bne.n	800505a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800503e:	4b94      	ldr	r3, [pc, #592]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	4a93      	ldr	r2, [pc, #588]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 8005044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005048:	61d3      	str	r3, [r2, #28]
 800504a:	4b91      	ldr	r3, [pc, #580]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005052:	60bb      	str	r3, [r7, #8]
 8005054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005056:	2301      	movs	r3, #1
 8005058:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800505a:	4b8e      	ldr	r3, [pc, #568]	; (8005294 <HAL_RCC_OscConfig+0x4f8>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005062:	2b00      	cmp	r3, #0
 8005064:	d118      	bne.n	8005098 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005066:	4b8b      	ldr	r3, [pc, #556]	; (8005294 <HAL_RCC_OscConfig+0x4f8>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a8a      	ldr	r2, [pc, #552]	; (8005294 <HAL_RCC_OscConfig+0x4f8>)
 800506c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005070:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005072:	f7fd f9a3 	bl	80023bc <HAL_GetTick>
 8005076:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005078:	e008      	b.n	800508c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800507a:	f7fd f99f 	bl	80023bc <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b64      	cmp	r3, #100	; 0x64
 8005086:	d901      	bls.n	800508c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e0fd      	b.n	8005288 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800508c:	4b81      	ldr	r3, [pc, #516]	; (8005294 <HAL_RCC_OscConfig+0x4f8>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005094:	2b00      	cmp	r3, #0
 8005096:	d0f0      	beq.n	800507a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d106      	bne.n	80050ae <HAL_RCC_OscConfig+0x312>
 80050a0:	4b7b      	ldr	r3, [pc, #492]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	4a7a      	ldr	r2, [pc, #488]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 80050a6:	f043 0301 	orr.w	r3, r3, #1
 80050aa:	6213      	str	r3, [r2, #32]
 80050ac:	e02d      	b.n	800510a <HAL_RCC_OscConfig+0x36e>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10c      	bne.n	80050d0 <HAL_RCC_OscConfig+0x334>
 80050b6:	4b76      	ldr	r3, [pc, #472]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	4a75      	ldr	r2, [pc, #468]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 80050bc:	f023 0301 	bic.w	r3, r3, #1
 80050c0:	6213      	str	r3, [r2, #32]
 80050c2:	4b73      	ldr	r3, [pc, #460]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	4a72      	ldr	r2, [pc, #456]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 80050c8:	f023 0304 	bic.w	r3, r3, #4
 80050cc:	6213      	str	r3, [r2, #32]
 80050ce:	e01c      	b.n	800510a <HAL_RCC_OscConfig+0x36e>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	2b05      	cmp	r3, #5
 80050d6:	d10c      	bne.n	80050f2 <HAL_RCC_OscConfig+0x356>
 80050d8:	4b6d      	ldr	r3, [pc, #436]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	4a6c      	ldr	r2, [pc, #432]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 80050de:	f043 0304 	orr.w	r3, r3, #4
 80050e2:	6213      	str	r3, [r2, #32]
 80050e4:	4b6a      	ldr	r3, [pc, #424]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	4a69      	ldr	r2, [pc, #420]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 80050ea:	f043 0301 	orr.w	r3, r3, #1
 80050ee:	6213      	str	r3, [r2, #32]
 80050f0:	e00b      	b.n	800510a <HAL_RCC_OscConfig+0x36e>
 80050f2:	4b67      	ldr	r3, [pc, #412]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	4a66      	ldr	r2, [pc, #408]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 80050f8:	f023 0301 	bic.w	r3, r3, #1
 80050fc:	6213      	str	r3, [r2, #32]
 80050fe:	4b64      	ldr	r3, [pc, #400]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	4a63      	ldr	r2, [pc, #396]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 8005104:	f023 0304 	bic.w	r3, r3, #4
 8005108:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d015      	beq.n	800513e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005112:	f7fd f953 	bl	80023bc <HAL_GetTick>
 8005116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005118:	e00a      	b.n	8005130 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800511a:	f7fd f94f 	bl	80023bc <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	f241 3288 	movw	r2, #5000	; 0x1388
 8005128:	4293      	cmp	r3, r2
 800512a:	d901      	bls.n	8005130 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e0ab      	b.n	8005288 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005130:	4b57      	ldr	r3, [pc, #348]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d0ee      	beq.n	800511a <HAL_RCC_OscConfig+0x37e>
 800513c:	e014      	b.n	8005168 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800513e:	f7fd f93d 	bl	80023bc <HAL_GetTick>
 8005142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005144:	e00a      	b.n	800515c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005146:	f7fd f939 	bl	80023bc <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	f241 3288 	movw	r2, #5000	; 0x1388
 8005154:	4293      	cmp	r3, r2
 8005156:	d901      	bls.n	800515c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e095      	b.n	8005288 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800515c:	4b4c      	ldr	r3, [pc, #304]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1ee      	bne.n	8005146 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005168:	7dfb      	ldrb	r3, [r7, #23]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d105      	bne.n	800517a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800516e:	4b48      	ldr	r3, [pc, #288]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	4a47      	ldr	r2, [pc, #284]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 8005174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005178:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 8081 	beq.w	8005286 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005184:	4b42      	ldr	r3, [pc, #264]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f003 030c 	and.w	r3, r3, #12
 800518c:	2b08      	cmp	r3, #8
 800518e:	d061      	beq.n	8005254 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	69db      	ldr	r3, [r3, #28]
 8005194:	2b02      	cmp	r3, #2
 8005196:	d146      	bne.n	8005226 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005198:	4b3f      	ldr	r3, [pc, #252]	; (8005298 <HAL_RCC_OscConfig+0x4fc>)
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800519e:	f7fd f90d 	bl	80023bc <HAL_GetTick>
 80051a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051a4:	e008      	b.n	80051b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051a6:	f7fd f909 	bl	80023bc <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d901      	bls.n	80051b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e067      	b.n	8005288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051b8:	4b35      	ldr	r3, [pc, #212]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1f0      	bne.n	80051a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051cc:	d108      	bne.n	80051e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80051ce:	4b30      	ldr	r3, [pc, #192]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	492d      	ldr	r1, [pc, #180]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051e0:	4b2b      	ldr	r3, [pc, #172]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a19      	ldr	r1, [r3, #32]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	430b      	orrs	r3, r1
 80051f2:	4927      	ldr	r1, [pc, #156]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051f8:	4b27      	ldr	r3, [pc, #156]	; (8005298 <HAL_RCC_OscConfig+0x4fc>)
 80051fa:	2201      	movs	r2, #1
 80051fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051fe:	f7fd f8dd 	bl	80023bc <HAL_GetTick>
 8005202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005204:	e008      	b.n	8005218 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005206:	f7fd f8d9 	bl	80023bc <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	2b02      	cmp	r3, #2
 8005212:	d901      	bls.n	8005218 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e037      	b.n	8005288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005218:	4b1d      	ldr	r3, [pc, #116]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0f0      	beq.n	8005206 <HAL_RCC_OscConfig+0x46a>
 8005224:	e02f      	b.n	8005286 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005226:	4b1c      	ldr	r3, [pc, #112]	; (8005298 <HAL_RCC_OscConfig+0x4fc>)
 8005228:	2200      	movs	r2, #0
 800522a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800522c:	f7fd f8c6 	bl	80023bc <HAL_GetTick>
 8005230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005232:	e008      	b.n	8005246 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005234:	f7fd f8c2 	bl	80023bc <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b02      	cmp	r3, #2
 8005240:	d901      	bls.n	8005246 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e020      	b.n	8005288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005246:	4b12      	ldr	r3, [pc, #72]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1f0      	bne.n	8005234 <HAL_RCC_OscConfig+0x498>
 8005252:	e018      	b.n	8005286 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	69db      	ldr	r3, [r3, #28]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d101      	bne.n	8005260 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e013      	b.n	8005288 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005260:	4b0b      	ldr	r3, [pc, #44]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	429a      	cmp	r2, r3
 8005272:	d106      	bne.n	8005282 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800527e:	429a      	cmp	r2, r3
 8005280:	d001      	beq.n	8005286 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e000      	b.n	8005288 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3718      	adds	r7, #24
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	40021000 	.word	0x40021000
 8005294:	40007000 	.word	0x40007000
 8005298:	42420060 	.word	0x42420060

0800529c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e0d0      	b.n	8005452 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052b0:	4b6a      	ldr	r3, [pc, #424]	; (800545c <HAL_RCC_ClockConfig+0x1c0>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0307 	and.w	r3, r3, #7
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d910      	bls.n	80052e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052be:	4b67      	ldr	r3, [pc, #412]	; (800545c <HAL_RCC_ClockConfig+0x1c0>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f023 0207 	bic.w	r2, r3, #7
 80052c6:	4965      	ldr	r1, [pc, #404]	; (800545c <HAL_RCC_ClockConfig+0x1c0>)
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ce:	4b63      	ldr	r3, [pc, #396]	; (800545c <HAL_RCC_ClockConfig+0x1c0>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0307 	and.w	r3, r3, #7
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d001      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e0b8      	b.n	8005452 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d020      	beq.n	800532e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d005      	beq.n	8005304 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052f8:	4b59      	ldr	r3, [pc, #356]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	4a58      	ldr	r2, [pc, #352]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 80052fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005302:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0308 	and.w	r3, r3, #8
 800530c:	2b00      	cmp	r3, #0
 800530e:	d005      	beq.n	800531c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005310:	4b53      	ldr	r3, [pc, #332]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	4a52      	ldr	r2, [pc, #328]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 8005316:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800531a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800531c:	4b50      	ldr	r3, [pc, #320]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	494d      	ldr	r1, [pc, #308]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 800532a:	4313      	orrs	r3, r2
 800532c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d040      	beq.n	80053bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d107      	bne.n	8005352 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005342:	4b47      	ldr	r3, [pc, #284]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d115      	bne.n	800537a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e07f      	b.n	8005452 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2b02      	cmp	r3, #2
 8005358:	d107      	bne.n	800536a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800535a:	4b41      	ldr	r3, [pc, #260]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d109      	bne.n	800537a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e073      	b.n	8005452 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800536a:	4b3d      	ldr	r3, [pc, #244]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e06b      	b.n	8005452 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800537a:	4b39      	ldr	r3, [pc, #228]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f023 0203 	bic.w	r2, r3, #3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	4936      	ldr	r1, [pc, #216]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 8005388:	4313      	orrs	r3, r2
 800538a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800538c:	f7fd f816 	bl	80023bc <HAL_GetTick>
 8005390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005392:	e00a      	b.n	80053aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005394:	f7fd f812 	bl	80023bc <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e053      	b.n	8005452 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053aa:	4b2d      	ldr	r3, [pc, #180]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f003 020c 	and.w	r2, r3, #12
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d1eb      	bne.n	8005394 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053bc:	4b27      	ldr	r3, [pc, #156]	; (800545c <HAL_RCC_ClockConfig+0x1c0>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0307 	and.w	r3, r3, #7
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d210      	bcs.n	80053ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ca:	4b24      	ldr	r3, [pc, #144]	; (800545c <HAL_RCC_ClockConfig+0x1c0>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f023 0207 	bic.w	r2, r3, #7
 80053d2:	4922      	ldr	r1, [pc, #136]	; (800545c <HAL_RCC_ClockConfig+0x1c0>)
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053da:	4b20      	ldr	r3, [pc, #128]	; (800545c <HAL_RCC_ClockConfig+0x1c0>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d001      	beq.n	80053ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e032      	b.n	8005452 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0304 	and.w	r3, r3, #4
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d008      	beq.n	800540a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053f8:	4b19      	ldr	r3, [pc, #100]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	4916      	ldr	r1, [pc, #88]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 8005406:	4313      	orrs	r3, r2
 8005408:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0308 	and.w	r3, r3, #8
 8005412:	2b00      	cmp	r3, #0
 8005414:	d009      	beq.n	800542a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005416:	4b12      	ldr	r3, [pc, #72]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	00db      	lsls	r3, r3, #3
 8005424:	490e      	ldr	r1, [pc, #56]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 8005426:	4313      	orrs	r3, r2
 8005428:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800542a:	f000 f821 	bl	8005470 <HAL_RCC_GetSysClockFreq>
 800542e:	4602      	mov	r2, r0
 8005430:	4b0b      	ldr	r3, [pc, #44]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	091b      	lsrs	r3, r3, #4
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	490a      	ldr	r1, [pc, #40]	; (8005464 <HAL_RCC_ClockConfig+0x1c8>)
 800543c:	5ccb      	ldrb	r3, [r1, r3]
 800543e:	fa22 f303 	lsr.w	r3, r2, r3
 8005442:	4a09      	ldr	r2, [pc, #36]	; (8005468 <HAL_RCC_ClockConfig+0x1cc>)
 8005444:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005446:	4b09      	ldr	r3, [pc, #36]	; (800546c <HAL_RCC_ClockConfig+0x1d0>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4618      	mov	r0, r3
 800544c:	f7fc ff74 	bl	8002338 <HAL_InitTick>

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	40022000 	.word	0x40022000
 8005460:	40021000 	.word	0x40021000
 8005464:	0800afe8 	.word	0x0800afe8
 8005468:	20000004 	.word	0x20000004
 800546c:	20000008 	.word	0x20000008

08005470 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005470:	b480      	push	{r7}
 8005472:	b087      	sub	sp, #28
 8005474:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005476:	2300      	movs	r3, #0
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	2300      	movs	r3, #0
 800547c:	60bb      	str	r3, [r7, #8]
 800547e:	2300      	movs	r3, #0
 8005480:	617b      	str	r3, [r7, #20]
 8005482:	2300      	movs	r3, #0
 8005484:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005486:	2300      	movs	r3, #0
 8005488:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800548a:	4b1e      	ldr	r3, [pc, #120]	; (8005504 <HAL_RCC_GetSysClockFreq+0x94>)
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f003 030c 	and.w	r3, r3, #12
 8005496:	2b04      	cmp	r3, #4
 8005498:	d002      	beq.n	80054a0 <HAL_RCC_GetSysClockFreq+0x30>
 800549a:	2b08      	cmp	r3, #8
 800549c:	d003      	beq.n	80054a6 <HAL_RCC_GetSysClockFreq+0x36>
 800549e:	e027      	b.n	80054f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80054a0:	4b19      	ldr	r3, [pc, #100]	; (8005508 <HAL_RCC_GetSysClockFreq+0x98>)
 80054a2:	613b      	str	r3, [r7, #16]
      break;
 80054a4:	e027      	b.n	80054f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	0c9b      	lsrs	r3, r3, #18
 80054aa:	f003 030f 	and.w	r3, r3, #15
 80054ae:	4a17      	ldr	r2, [pc, #92]	; (800550c <HAL_RCC_GetSysClockFreq+0x9c>)
 80054b0:	5cd3      	ldrb	r3, [r2, r3]
 80054b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d010      	beq.n	80054e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80054be:	4b11      	ldr	r3, [pc, #68]	; (8005504 <HAL_RCC_GetSysClockFreq+0x94>)
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	0c5b      	lsrs	r3, r3, #17
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	4a11      	ldr	r2, [pc, #68]	; (8005510 <HAL_RCC_GetSysClockFreq+0xa0>)
 80054ca:	5cd3      	ldrb	r3, [r2, r3]
 80054cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a0d      	ldr	r2, [pc, #52]	; (8005508 <HAL_RCC_GetSysClockFreq+0x98>)
 80054d2:	fb02 f203 	mul.w	r2, r2, r3
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054dc:	617b      	str	r3, [r7, #20]
 80054de:	e004      	b.n	80054ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a0c      	ldr	r2, [pc, #48]	; (8005514 <HAL_RCC_GetSysClockFreq+0xa4>)
 80054e4:	fb02 f303 	mul.w	r3, r2, r3
 80054e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	613b      	str	r3, [r7, #16]
      break;
 80054ee:	e002      	b.n	80054f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80054f0:	4b05      	ldr	r3, [pc, #20]	; (8005508 <HAL_RCC_GetSysClockFreq+0x98>)
 80054f2:	613b      	str	r3, [r7, #16]
      break;
 80054f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054f6:	693b      	ldr	r3, [r7, #16]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	371c      	adds	r7, #28
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bc80      	pop	{r7}
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	40021000 	.word	0x40021000
 8005508:	007a1200 	.word	0x007a1200
 800550c:	0800b000 	.word	0x0800b000
 8005510:	0800b010 	.word	0x0800b010
 8005514:	003d0900 	.word	0x003d0900

08005518 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005518:	b480      	push	{r7}
 800551a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800551c:	4b02      	ldr	r3, [pc, #8]	; (8005528 <HAL_RCC_GetHCLKFreq+0x10>)
 800551e:	681b      	ldr	r3, [r3, #0]
}
 8005520:	4618      	mov	r0, r3
 8005522:	46bd      	mov	sp, r7
 8005524:	bc80      	pop	{r7}
 8005526:	4770      	bx	lr
 8005528:	20000004 	.word	0x20000004

0800552c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005530:	f7ff fff2 	bl	8005518 <HAL_RCC_GetHCLKFreq>
 8005534:	4602      	mov	r2, r0
 8005536:	4b05      	ldr	r3, [pc, #20]	; (800554c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	0a1b      	lsrs	r3, r3, #8
 800553c:	f003 0307 	and.w	r3, r3, #7
 8005540:	4903      	ldr	r1, [pc, #12]	; (8005550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005542:	5ccb      	ldrb	r3, [r1, r3]
 8005544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005548:	4618      	mov	r0, r3
 800554a:	bd80      	pop	{r7, pc}
 800554c:	40021000 	.word	0x40021000
 8005550:	0800aff8 	.word	0x0800aff8

08005554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005558:	f7ff ffde 	bl	8005518 <HAL_RCC_GetHCLKFreq>
 800555c:	4602      	mov	r2, r0
 800555e:	4b05      	ldr	r3, [pc, #20]	; (8005574 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	0adb      	lsrs	r3, r3, #11
 8005564:	f003 0307 	and.w	r3, r3, #7
 8005568:	4903      	ldr	r1, [pc, #12]	; (8005578 <HAL_RCC_GetPCLK2Freq+0x24>)
 800556a:	5ccb      	ldrb	r3, [r1, r3]
 800556c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005570:	4618      	mov	r0, r3
 8005572:	bd80      	pop	{r7, pc}
 8005574:	40021000 	.word	0x40021000
 8005578:	0800aff8 	.word	0x0800aff8

0800557c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005584:	4b0a      	ldr	r3, [pc, #40]	; (80055b0 <RCC_Delay+0x34>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a0a      	ldr	r2, [pc, #40]	; (80055b4 <RCC_Delay+0x38>)
 800558a:	fba2 2303 	umull	r2, r3, r2, r3
 800558e:	0a5b      	lsrs	r3, r3, #9
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	fb02 f303 	mul.w	r3, r2, r3
 8005596:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005598:	bf00      	nop
  }
  while (Delay --);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	1e5a      	subs	r2, r3, #1
 800559e:	60fa      	str	r2, [r7, #12]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1f9      	bne.n	8005598 <RCC_Delay+0x1c>
}
 80055a4:	bf00      	nop
 80055a6:	bf00      	nop
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bc80      	pop	{r7}
 80055ae:	4770      	bx	lr
 80055b0:	20000004 	.word	0x20000004
 80055b4:	10624dd3 	.word	0x10624dd3

080055b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80055c0:	2300      	movs	r3, #0
 80055c2:	613b      	str	r3, [r7, #16]
 80055c4:	2300      	movs	r3, #0
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d07d      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80055d4:	2300      	movs	r3, #0
 80055d6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055d8:	4b4f      	ldr	r3, [pc, #316]	; (8005718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10d      	bne.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055e4:	4b4c      	ldr	r3, [pc, #304]	; (8005718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	4a4b      	ldr	r2, [pc, #300]	; (8005718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ee:	61d3      	str	r3, [r2, #28]
 80055f0:	4b49      	ldr	r3, [pc, #292]	; (8005718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055f2:	69db      	ldr	r3, [r3, #28]
 80055f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f8:	60bb      	str	r3, [r7, #8]
 80055fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055fc:	2301      	movs	r3, #1
 80055fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005600:	4b46      	ldr	r3, [pc, #280]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005608:	2b00      	cmp	r3, #0
 800560a:	d118      	bne.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800560c:	4b43      	ldr	r3, [pc, #268]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a42      	ldr	r2, [pc, #264]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005616:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005618:	f7fc fed0 	bl	80023bc <HAL_GetTick>
 800561c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800561e:	e008      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005620:	f7fc fecc 	bl	80023bc <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	2b64      	cmp	r3, #100	; 0x64
 800562c:	d901      	bls.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e06d      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005632:	4b3a      	ldr	r3, [pc, #232]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800563a:	2b00      	cmp	r3, #0
 800563c:	d0f0      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800563e:	4b36      	ldr	r3, [pc, #216]	; (8005718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005646:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d02e      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	429a      	cmp	r2, r3
 800565a:	d027      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800565c:	4b2e      	ldr	r3, [pc, #184]	; (8005718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005664:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005666:	4b2e      	ldr	r3, [pc, #184]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005668:	2201      	movs	r2, #1
 800566a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800566c:	4b2c      	ldr	r3, [pc, #176]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800566e:	2200      	movs	r2, #0
 8005670:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005672:	4a29      	ldr	r2, [pc, #164]	; (8005718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b00      	cmp	r3, #0
 8005680:	d014      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005682:	f7fc fe9b 	bl	80023bc <HAL_GetTick>
 8005686:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005688:	e00a      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800568a:	f7fc fe97 	bl	80023bc <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	f241 3288 	movw	r2, #5000	; 0x1388
 8005698:	4293      	cmp	r3, r2
 800569a:	d901      	bls.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e036      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056a0:	4b1d      	ldr	r3, [pc, #116]	; (8005718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	f003 0302 	and.w	r3, r3, #2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d0ee      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056ac:	4b1a      	ldr	r3, [pc, #104]	; (8005718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ae:	6a1b      	ldr	r3, [r3, #32]
 80056b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	4917      	ldr	r1, [pc, #92]	; (8005718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80056be:	7dfb      	ldrb	r3, [r7, #23]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d105      	bne.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056c4:	4b14      	ldr	r3, [pc, #80]	; (8005718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056c6:	69db      	ldr	r3, [r3, #28]
 80056c8:	4a13      	ldr	r2, [pc, #76]	; (8005718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0302 	and.w	r3, r3, #2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d008      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056dc:	4b0e      	ldr	r3, [pc, #56]	; (8005718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	490b      	ldr	r1, [pc, #44]	; (8005718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0310 	and.w	r3, r3, #16
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d008      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056fa:	4b07      	ldr	r3, [pc, #28]	; (8005718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	4904      	ldr	r1, [pc, #16]	; (8005718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005708:	4313      	orrs	r3, r2
 800570a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3718      	adds	r7, #24
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	40021000 	.word	0x40021000
 800571c:	40007000 	.word	0x40007000
 8005720:	42420440 	.word	0x42420440

08005724 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e041      	b.n	80057ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d106      	bne.n	8005750 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7fc fc42 	bl	8001fd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	3304      	adds	r3, #4
 8005760:	4619      	mov	r1, r3
 8005762:	4610      	mov	r0, r2
 8005764:	f000 f992 	bl	8005a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
	...

080057c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d109      	bne.n	80057e8 <HAL_TIM_PWM_Start+0x24>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b01      	cmp	r3, #1
 80057de:	bf14      	ite	ne
 80057e0:	2301      	movne	r3, #1
 80057e2:	2300      	moveq	r3, #0
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	e022      	b.n	800582e <HAL_TIM_PWM_Start+0x6a>
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	2b04      	cmp	r3, #4
 80057ec:	d109      	bne.n	8005802 <HAL_TIM_PWM_Start+0x3e>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	bf14      	ite	ne
 80057fa:	2301      	movne	r3, #1
 80057fc:	2300      	moveq	r3, #0
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	e015      	b.n	800582e <HAL_TIM_PWM_Start+0x6a>
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2b08      	cmp	r3, #8
 8005806:	d109      	bne.n	800581c <HAL_TIM_PWM_Start+0x58>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800580e:	b2db      	uxtb	r3, r3
 8005810:	2b01      	cmp	r3, #1
 8005812:	bf14      	ite	ne
 8005814:	2301      	movne	r3, #1
 8005816:	2300      	moveq	r3, #0
 8005818:	b2db      	uxtb	r3, r3
 800581a:	e008      	b.n	800582e <HAL_TIM_PWM_Start+0x6a>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b01      	cmp	r3, #1
 8005826:	bf14      	ite	ne
 8005828:	2301      	movne	r3, #1
 800582a:	2300      	moveq	r3, #0
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e05e      	b.n	80058f4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d104      	bne.n	8005846 <HAL_TIM_PWM_Start+0x82>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005844:	e013      	b.n	800586e <HAL_TIM_PWM_Start+0xaa>
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	2b04      	cmp	r3, #4
 800584a:	d104      	bne.n	8005856 <HAL_TIM_PWM_Start+0x92>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2202      	movs	r2, #2
 8005850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005854:	e00b      	b.n	800586e <HAL_TIM_PWM_Start+0xaa>
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	2b08      	cmp	r3, #8
 800585a:	d104      	bne.n	8005866 <HAL_TIM_PWM_Start+0xa2>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2202      	movs	r2, #2
 8005860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005864:	e003      	b.n	800586e <HAL_TIM_PWM_Start+0xaa>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2202      	movs	r2, #2
 800586a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2201      	movs	r2, #1
 8005874:	6839      	ldr	r1, [r7, #0]
 8005876:	4618      	mov	r0, r3
 8005878:	f000 fafe 	bl	8005e78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a1e      	ldr	r2, [pc, #120]	; (80058fc <HAL_TIM_PWM_Start+0x138>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d107      	bne.n	8005896 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005894:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a18      	ldr	r2, [pc, #96]	; (80058fc <HAL_TIM_PWM_Start+0x138>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d00e      	beq.n	80058be <HAL_TIM_PWM_Start+0xfa>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058a8:	d009      	beq.n	80058be <HAL_TIM_PWM_Start+0xfa>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a14      	ldr	r2, [pc, #80]	; (8005900 <HAL_TIM_PWM_Start+0x13c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d004      	beq.n	80058be <HAL_TIM_PWM_Start+0xfa>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a12      	ldr	r2, [pc, #72]	; (8005904 <HAL_TIM_PWM_Start+0x140>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d111      	bne.n	80058e2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f003 0307 	and.w	r3, r3, #7
 80058c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2b06      	cmp	r3, #6
 80058ce:	d010      	beq.n	80058f2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0201 	orr.w	r2, r2, #1
 80058de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e0:	e007      	b.n	80058f2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f042 0201 	orr.w	r2, r2, #1
 80058f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	40012c00 	.word	0x40012c00
 8005900:	40000400 	.word	0x40000400
 8005904:	40000800 	.word	0x40000800

08005908 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b086      	sub	sp, #24
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005914:	2300      	movs	r3, #0
 8005916:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800591e:	2b01      	cmp	r3, #1
 8005920:	d101      	bne.n	8005926 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005922:	2302      	movs	r3, #2
 8005924:	e0ae      	b.n	8005a84 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2b0c      	cmp	r3, #12
 8005932:	f200 809f 	bhi.w	8005a74 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005936:	a201      	add	r2, pc, #4	; (adr r2, 800593c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593c:	08005971 	.word	0x08005971
 8005940:	08005a75 	.word	0x08005a75
 8005944:	08005a75 	.word	0x08005a75
 8005948:	08005a75 	.word	0x08005a75
 800594c:	080059b1 	.word	0x080059b1
 8005950:	08005a75 	.word	0x08005a75
 8005954:	08005a75 	.word	0x08005a75
 8005958:	08005a75 	.word	0x08005a75
 800595c:	080059f3 	.word	0x080059f3
 8005960:	08005a75 	.word	0x08005a75
 8005964:	08005a75 	.word	0x08005a75
 8005968:	08005a75 	.word	0x08005a75
 800596c:	08005a33 	.word	0x08005a33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68b9      	ldr	r1, [r7, #8]
 8005976:	4618      	mov	r0, r3
 8005978:	f000 f8f6 	bl	8005b68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	699a      	ldr	r2, [r3, #24]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0208 	orr.w	r2, r2, #8
 800598a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	699a      	ldr	r2, [r3, #24]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 0204 	bic.w	r2, r2, #4
 800599a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6999      	ldr	r1, [r3, #24]
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	691a      	ldr	r2, [r3, #16]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	619a      	str	r2, [r3, #24]
      break;
 80059ae:	e064      	b.n	8005a7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68b9      	ldr	r1, [r7, #8]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 f93c 	bl	8005c34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	699a      	ldr	r2, [r3, #24]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	699a      	ldr	r2, [r3, #24]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6999      	ldr	r1, [r3, #24]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	021a      	lsls	r2, r3, #8
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	619a      	str	r2, [r3, #24]
      break;
 80059f0:	e043      	b.n	8005a7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68b9      	ldr	r1, [r7, #8]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f000 f985 	bl	8005d08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	69da      	ldr	r2, [r3, #28]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f042 0208 	orr.w	r2, r2, #8
 8005a0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	69da      	ldr	r2, [r3, #28]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f022 0204 	bic.w	r2, r2, #4
 8005a1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	69d9      	ldr	r1, [r3, #28]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	691a      	ldr	r2, [r3, #16]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	61da      	str	r2, [r3, #28]
      break;
 8005a30:	e023      	b.n	8005a7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68b9      	ldr	r1, [r7, #8]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f000 f9cf 	bl	8005ddc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	69da      	ldr	r2, [r3, #28]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	69da      	ldr	r2, [r3, #28]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	69d9      	ldr	r1, [r3, #28]
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	021a      	lsls	r2, r3, #8
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	61da      	str	r2, [r3, #28]
      break;
 8005a72:	e002      	b.n	8005a7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	75fb      	strb	r3, [r7, #23]
      break;
 8005a78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3718      	adds	r7, #24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a2f      	ldr	r2, [pc, #188]	; (8005b5c <TIM_Base_SetConfig+0xd0>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d00b      	beq.n	8005abc <TIM_Base_SetConfig+0x30>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aaa:	d007      	beq.n	8005abc <TIM_Base_SetConfig+0x30>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a2c      	ldr	r2, [pc, #176]	; (8005b60 <TIM_Base_SetConfig+0xd4>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d003      	beq.n	8005abc <TIM_Base_SetConfig+0x30>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a2b      	ldr	r2, [pc, #172]	; (8005b64 <TIM_Base_SetConfig+0xd8>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d108      	bne.n	8005ace <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a22      	ldr	r2, [pc, #136]	; (8005b5c <TIM_Base_SetConfig+0xd0>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d00b      	beq.n	8005aee <TIM_Base_SetConfig+0x62>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005adc:	d007      	beq.n	8005aee <TIM_Base_SetConfig+0x62>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a1f      	ldr	r2, [pc, #124]	; (8005b60 <TIM_Base_SetConfig+0xd4>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d003      	beq.n	8005aee <TIM_Base_SetConfig+0x62>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a1e      	ldr	r2, [pc, #120]	; (8005b64 <TIM_Base_SetConfig+0xd8>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d108      	bne.n	8005b00 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005af4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	689a      	ldr	r2, [r3, #8]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a0d      	ldr	r2, [pc, #52]	; (8005b5c <TIM_Base_SetConfig+0xd0>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d103      	bne.n	8005b34 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	691a      	ldr	r2, [r3, #16]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d005      	beq.n	8005b52 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	f023 0201 	bic.w	r2, r3, #1
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	611a      	str	r2, [r3, #16]
  }
}
 8005b52:	bf00      	nop
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bc80      	pop	{r7}
 8005b5a:	4770      	bx	lr
 8005b5c:	40012c00 	.word	0x40012c00
 8005b60:	40000400 	.word	0x40000400
 8005b64:	40000800 	.word	0x40000800

08005b68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b087      	sub	sp, #28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	f023 0201 	bic.w	r2, r3, #1
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f023 0303 	bic.w	r3, r3, #3
 8005b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f023 0302 	bic.w	r3, r3, #2
 8005bb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a1c      	ldr	r2, [pc, #112]	; (8005c30 <TIM_OC1_SetConfig+0xc8>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d10c      	bne.n	8005bde <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f023 0308 	bic.w	r3, r3, #8
 8005bca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f023 0304 	bic.w	r3, r3, #4
 8005bdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a13      	ldr	r2, [pc, #76]	; (8005c30 <TIM_OC1_SetConfig+0xc8>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d111      	bne.n	8005c0a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	621a      	str	r2, [r3, #32]
}
 8005c24:	bf00      	nop
 8005c26:	371c      	adds	r7, #28
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bc80      	pop	{r7}
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	40012c00 	.word	0x40012c00

08005c34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	f023 0210 	bic.w	r2, r3, #16
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	021b      	lsls	r3, r3, #8
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f023 0320 	bic.w	r3, r3, #32
 8005c7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	011b      	lsls	r3, r3, #4
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a1d      	ldr	r2, [pc, #116]	; (8005d04 <TIM_OC2_SetConfig+0xd0>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d10d      	bne.n	8005cb0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	011b      	lsls	r3, r3, #4
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a14      	ldr	r2, [pc, #80]	; (8005d04 <TIM_OC2_SetConfig+0xd0>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d113      	bne.n	8005ce0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	695b      	ldr	r3, [r3, #20]
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	621a      	str	r2, [r3, #32]
}
 8005cfa:	bf00      	nop
 8005cfc:	371c      	adds	r7, #28
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bc80      	pop	{r7}
 8005d02:	4770      	bx	lr
 8005d04:	40012c00 	.word	0x40012c00

08005d08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f023 0303 	bic.w	r3, r3, #3
 8005d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	021b      	lsls	r3, r3, #8
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a1d      	ldr	r2, [pc, #116]	; (8005dd8 <TIM_OC3_SetConfig+0xd0>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d10d      	bne.n	8005d82 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	021b      	lsls	r3, r3, #8
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a14      	ldr	r2, [pc, #80]	; (8005dd8 <TIM_OC3_SetConfig+0xd0>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d113      	bne.n	8005db2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	011b      	lsls	r3, r3, #4
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	011b      	lsls	r3, r3, #4
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	621a      	str	r2, [r3, #32]
}
 8005dcc:	bf00      	nop
 8005dce:	371c      	adds	r7, #28
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bc80      	pop	{r7}
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	40012c00 	.word	0x40012c00

08005ddc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b087      	sub	sp, #28
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	69db      	ldr	r3, [r3, #28]
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	021b      	lsls	r3, r3, #8
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	031b      	lsls	r3, r3, #12
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a0f      	ldr	r2, [pc, #60]	; (8005e74 <TIM_OC4_SetConfig+0x98>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d109      	bne.n	8005e50 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	019b      	lsls	r3, r3, #6
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	621a      	str	r2, [r3, #32]
}
 8005e6a:	bf00      	nop
 8005e6c:	371c      	adds	r7, #28
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bc80      	pop	{r7}
 8005e72:	4770      	bx	lr
 8005e74:	40012c00 	.word	0x40012c00

08005e78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b087      	sub	sp, #28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f003 031f 	and.w	r3, r3, #31
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6a1a      	ldr	r2, [r3, #32]
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	43db      	mvns	r3, r3
 8005e9a:	401a      	ands	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6a1a      	ldr	r2, [r3, #32]
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	f003 031f 	and.w	r3, r3, #31
 8005eaa:	6879      	ldr	r1, [r7, #4]
 8005eac:	fa01 f303 	lsl.w	r3, r1, r3
 8005eb0:	431a      	orrs	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	621a      	str	r2, [r3, #32]
}
 8005eb6:	bf00      	nop
 8005eb8:	371c      	adds	r7, #28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bc80      	pop	{r7}
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d101      	bne.n	8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	e046      	b.n	8005f66 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005efe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a16      	ldr	r2, [pc, #88]	; (8005f70 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d00e      	beq.n	8005f3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f24:	d009      	beq.n	8005f3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a12      	ldr	r2, [pc, #72]	; (8005f74 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d004      	beq.n	8005f3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a10      	ldr	r2, [pc, #64]	; (8005f78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d10c      	bne.n	8005f54 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3714      	adds	r7, #20
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bc80      	pop	{r7}
 8005f6e:	4770      	bx	lr
 8005f70:	40012c00 	.word	0x40012c00
 8005f74:	40000400 	.word	0x40000400
 8005f78:	40000800 	.word	0x40000800

08005f7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f86:	2300      	movs	r3, #0
 8005f88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d101      	bne.n	8005f98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f94:	2302      	movs	r3, #2
 8005f96:	e03d      	b.n	8006014 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	695b      	ldr	r3, [r3, #20]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	bc80      	pop	{r7}
 800601c:	4770      	bx	lr

0800601e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b082      	sub	sp, #8
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d101      	bne.n	8006030 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e042      	b.n	80060b6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006036:	b2db      	uxtb	r3, r3
 8006038:	2b00      	cmp	r3, #0
 800603a:	d106      	bne.n	800604a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f7fc f865 	bl	8002114 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2224      	movs	r2, #36	; 0x24
 800604e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68da      	ldr	r2, [r3, #12]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006060:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f972 	bl	800634c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	691a      	ldr	r2, [r3, #16]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006076:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	695a      	ldr	r2, [r3, #20]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006086:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68da      	ldr	r2, [r3, #12]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006096:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2220      	movs	r2, #32
 80060a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b08a      	sub	sp, #40	; 0x28
 80060c2:	af02      	add	r7, sp, #8
 80060c4:	60f8      	str	r0, [r7, #12]
 80060c6:	60b9      	str	r1, [r7, #8]
 80060c8:	603b      	str	r3, [r7, #0]
 80060ca:	4613      	mov	r3, r2
 80060cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80060ce:	2300      	movs	r3, #0
 80060d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b20      	cmp	r3, #32
 80060dc:	d175      	bne.n	80061ca <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <HAL_UART_Transmit+0x2c>
 80060e4:	88fb      	ldrh	r3, [r7, #6]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e06e      	b.n	80061cc <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2221      	movs	r2, #33	; 0x21
 80060f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060fc:	f7fc f95e 	bl	80023bc <HAL_GetTick>
 8006100:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	88fa      	ldrh	r2, [r7, #6]
 8006106:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	88fa      	ldrh	r2, [r7, #6]
 800610c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006116:	d108      	bne.n	800612a <HAL_UART_Transmit+0x6c>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d104      	bne.n	800612a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006120:	2300      	movs	r3, #0
 8006122:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	61bb      	str	r3, [r7, #24]
 8006128:	e003      	b.n	8006132 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800612e:	2300      	movs	r3, #0
 8006130:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006132:	e02e      	b.n	8006192 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	2200      	movs	r2, #0
 800613c:	2180      	movs	r1, #128	; 0x80
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f000 f848 	bl	80061d4 <UART_WaitOnFlagUntilTimeout>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d005      	beq.n	8006156 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2220      	movs	r2, #32
 800614e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e03a      	b.n	80061cc <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10b      	bne.n	8006174 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	881b      	ldrh	r3, [r3, #0]
 8006160:	461a      	mov	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800616a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	3302      	adds	r3, #2
 8006170:	61bb      	str	r3, [r7, #24]
 8006172:	e007      	b.n	8006184 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	781a      	ldrb	r2, [r3, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	3301      	adds	r3, #1
 8006182:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006188:	b29b      	uxth	r3, r3
 800618a:	3b01      	subs	r3, #1
 800618c:	b29a      	uxth	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006196:	b29b      	uxth	r3, r3
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1cb      	bne.n	8006134 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	9300      	str	r3, [sp, #0]
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	2200      	movs	r2, #0
 80061a4:	2140      	movs	r1, #64	; 0x40
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 f814 	bl	80061d4 <UART_WaitOnFlagUntilTimeout>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d005      	beq.n	80061be <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2220      	movs	r2, #32
 80061b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e006      	b.n	80061cc <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2220      	movs	r2, #32
 80061c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80061c6:	2300      	movs	r3, #0
 80061c8:	e000      	b.n	80061cc <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80061ca:	2302      	movs	r3, #2
  }
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3720      	adds	r7, #32
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	603b      	str	r3, [r7, #0]
 80061e0:	4613      	mov	r3, r2
 80061e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061e4:	e03b      	b.n	800625e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ec:	d037      	beq.n	800625e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ee:	f7fc f8e5 	bl	80023bc <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	6a3a      	ldr	r2, [r7, #32]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d302      	bcc.n	8006204 <UART_WaitOnFlagUntilTimeout+0x30>
 80061fe:	6a3b      	ldr	r3, [r7, #32]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d101      	bne.n	8006208 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e03a      	b.n	800627e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	f003 0304 	and.w	r3, r3, #4
 8006212:	2b00      	cmp	r3, #0
 8006214:	d023      	beq.n	800625e <UART_WaitOnFlagUntilTimeout+0x8a>
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	2b80      	cmp	r3, #128	; 0x80
 800621a:	d020      	beq.n	800625e <UART_WaitOnFlagUntilTimeout+0x8a>
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2b40      	cmp	r3, #64	; 0x40
 8006220:	d01d      	beq.n	800625e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0308 	and.w	r3, r3, #8
 800622c:	2b08      	cmp	r3, #8
 800622e:	d116      	bne.n	800625e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006230:	2300      	movs	r3, #0
 8006232:	617b      	str	r3, [r7, #20]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	617b      	str	r3, [r7, #20]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	617b      	str	r3, [r7, #20]
 8006244:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f000 f81d 	bl	8006286 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2208      	movs	r2, #8
 8006250:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e00f      	b.n	800627e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	4013      	ands	r3, r2
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	429a      	cmp	r2, r3
 800626c:	bf0c      	ite	eq
 800626e:	2301      	moveq	r3, #1
 8006270:	2300      	movne	r3, #0
 8006272:	b2db      	uxtb	r3, r3
 8006274:	461a      	mov	r2, r3
 8006276:	79fb      	ldrb	r3, [r7, #7]
 8006278:	429a      	cmp	r2, r3
 800627a:	d0b4      	beq.n	80061e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3718      	adds	r7, #24
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006286:	b480      	push	{r7}
 8006288:	b095      	sub	sp, #84	; 0x54
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	330c      	adds	r3, #12
 8006294:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006298:	e853 3f00 	ldrex	r3, [r3]
 800629c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800629e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	330c      	adds	r3, #12
 80062ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062ae:	643a      	str	r2, [r7, #64]	; 0x40
 80062b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062b6:	e841 2300 	strex	r3, r2, [r1]
 80062ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1e5      	bne.n	800628e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	3314      	adds	r3, #20
 80062c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ca:	6a3b      	ldr	r3, [r7, #32]
 80062cc:	e853 3f00 	ldrex	r3, [r3]
 80062d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	f023 0301 	bic.w	r3, r3, #1
 80062d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	3314      	adds	r3, #20
 80062e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062ea:	e841 2300 	strex	r3, r2, [r1]
 80062ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1e5      	bne.n	80062c2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d119      	bne.n	8006332 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	330c      	adds	r3, #12
 8006304:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	e853 3f00 	ldrex	r3, [r3]
 800630c:	60bb      	str	r3, [r7, #8]
   return(result);
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	f023 0310 	bic.w	r3, r3, #16
 8006314:	647b      	str	r3, [r7, #68]	; 0x44
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	330c      	adds	r3, #12
 800631c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800631e:	61ba      	str	r2, [r7, #24]
 8006320:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006322:	6979      	ldr	r1, [r7, #20]
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	e841 2300 	strex	r3, r2, [r1]
 800632a:	613b      	str	r3, [r7, #16]
   return(result);
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1e5      	bne.n	80062fe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2220      	movs	r2, #32
 8006336:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006340:	bf00      	nop
 8006342:	3754      	adds	r7, #84	; 0x54
 8006344:	46bd      	mov	sp, r7
 8006346:	bc80      	pop	{r7}
 8006348:	4770      	bx	lr
	...

0800634c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	68da      	ldr	r2, [r3, #12]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	430a      	orrs	r2, r1
 8006368:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	689a      	ldr	r2, [r3, #8]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	431a      	orrs	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	4313      	orrs	r3, r2
 800637a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006386:	f023 030c 	bic.w	r3, r3, #12
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	6812      	ldr	r2, [r2, #0]
 800638e:	68b9      	ldr	r1, [r7, #8]
 8006390:	430b      	orrs	r3, r1
 8006392:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	699a      	ldr	r2, [r3, #24]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a2c      	ldr	r2, [pc, #176]	; (8006460 <UART_SetConfig+0x114>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d103      	bne.n	80063bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80063b4:	f7ff f8ce 	bl	8005554 <HAL_RCC_GetPCLK2Freq>
 80063b8:	60f8      	str	r0, [r7, #12]
 80063ba:	e002      	b.n	80063c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80063bc:	f7ff f8b6 	bl	800552c <HAL_RCC_GetPCLK1Freq>
 80063c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	4613      	mov	r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4413      	add	r3, r2
 80063ca:	009a      	lsls	r2, r3, #2
 80063cc:	441a      	add	r2, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063d8:	4a22      	ldr	r2, [pc, #136]	; (8006464 <UART_SetConfig+0x118>)
 80063da:	fba2 2303 	umull	r2, r3, r2, r3
 80063de:	095b      	lsrs	r3, r3, #5
 80063e0:	0119      	lsls	r1, r3, #4
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	4613      	mov	r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4413      	add	r3, r2
 80063ea:	009a      	lsls	r2, r3, #2
 80063ec:	441a      	add	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80063f8:	4b1a      	ldr	r3, [pc, #104]	; (8006464 <UART_SetConfig+0x118>)
 80063fa:	fba3 0302 	umull	r0, r3, r3, r2
 80063fe:	095b      	lsrs	r3, r3, #5
 8006400:	2064      	movs	r0, #100	; 0x64
 8006402:	fb00 f303 	mul.w	r3, r0, r3
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	011b      	lsls	r3, r3, #4
 800640a:	3332      	adds	r3, #50	; 0x32
 800640c:	4a15      	ldr	r2, [pc, #84]	; (8006464 <UART_SetConfig+0x118>)
 800640e:	fba2 2303 	umull	r2, r3, r2, r3
 8006412:	095b      	lsrs	r3, r3, #5
 8006414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006418:	4419      	add	r1, r3
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	4613      	mov	r3, r2
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	4413      	add	r3, r2
 8006422:	009a      	lsls	r2, r3, #2
 8006424:	441a      	add	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006430:	4b0c      	ldr	r3, [pc, #48]	; (8006464 <UART_SetConfig+0x118>)
 8006432:	fba3 0302 	umull	r0, r3, r3, r2
 8006436:	095b      	lsrs	r3, r3, #5
 8006438:	2064      	movs	r0, #100	; 0x64
 800643a:	fb00 f303 	mul.w	r3, r0, r3
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	011b      	lsls	r3, r3, #4
 8006442:	3332      	adds	r3, #50	; 0x32
 8006444:	4a07      	ldr	r2, [pc, #28]	; (8006464 <UART_SetConfig+0x118>)
 8006446:	fba2 2303 	umull	r2, r3, r2, r3
 800644a:	095b      	lsrs	r3, r3, #5
 800644c:	f003 020f 	and.w	r2, r3, #15
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	440a      	add	r2, r1
 8006456:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006458:	bf00      	nop
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	40013800 	.word	0x40013800
 8006464:	51eb851f 	.word	0x51eb851f

08006468 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	4638      	mov	r0, r7
 8006472:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3714      	adds	r7, #20
 800647c:	46bd      	mov	sp, r7
 800647e:	bc80      	pop	{r7}
 8006480:	4770      	bx	lr

08006482 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006482:	b480      	push	{r7}
 8006484:	b085      	sub	sp, #20
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006492:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006496:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	b29a      	uxth	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3714      	adds	r7, #20
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bc80      	pop	{r7}
 80064ac:	4770      	bx	lr

080064ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b085      	sub	sp, #20
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80064b6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80064ba:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	43db      	mvns	r3, r3
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	4013      	ands	r3, r2
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3714      	adds	r7, #20
 80064dc:	46bd      	mov	sp, r7
 80064de:	bc80      	pop	{r7}
 80064e0:	4770      	bx	lr

080064e2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b083      	sub	sp, #12
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
 80064ea:	460b      	mov	r3, r1
 80064ec:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bc80      	pop	{r7}
 80064f8:	4770      	bx	lr

080064fa <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b085      	sub	sp, #20
 80064fe:	af00      	add	r7, sp, #0
 8006500:	60f8      	str	r0, [r7, #12]
 8006502:	4638      	mov	r0, r7
 8006504:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2201      	movs	r2, #1
 800650c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	bc80      	pop	{r7}
 8006532:	4770      	bx	lr

08006534 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006534:	b480      	push	{r7}
 8006536:	b09d      	sub	sp, #116	; 0x74
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800653e:	2300      	movs	r3, #0
 8006540:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4413      	add	r3, r2
 800654e:	881b      	ldrh	r3, [r3, #0]
 8006550:	b29b      	uxth	r3, r3
 8006552:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800655a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	78db      	ldrb	r3, [r3, #3]
 8006562:	2b03      	cmp	r3, #3
 8006564:	d81f      	bhi.n	80065a6 <USB_ActivateEndpoint+0x72>
 8006566:	a201      	add	r2, pc, #4	; (adr r2, 800656c <USB_ActivateEndpoint+0x38>)
 8006568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656c:	0800657d 	.word	0x0800657d
 8006570:	08006599 	.word	0x08006599
 8006574:	080065af 	.word	0x080065af
 8006578:	0800658b 	.word	0x0800658b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800657c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006580:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006584:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006588:	e012      	b.n	80065b0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800658a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800658e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006592:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006596:	e00b      	b.n	80065b0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006598:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800659c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80065a0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80065a4:	e004      	b.n	80065b0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80065ac:	e000      	b.n	80065b0 <USB_ActivateEndpoint+0x7c>
      break;
 80065ae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	441a      	add	r2, r3
 80065ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80065be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	881b      	ldrh	r3, [r3, #0]
 80065de:	b29b      	uxth	r3, r3
 80065e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	4313      	orrs	r3, r2
 80065f2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	441a      	add	r2, r3
 8006600:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006604:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006608:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800660c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006614:	b29b      	uxth	r3, r3
 8006616:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	7b1b      	ldrb	r3, [r3, #12]
 800661c:	2b00      	cmp	r3, #0
 800661e:	f040 8178 	bne.w	8006912 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	785b      	ldrb	r3, [r3, #1]
 8006626:	2b00      	cmp	r3, #0
 8006628:	f000 8084 	beq.w	8006734 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	61bb      	str	r3, [r7, #24]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006636:	b29b      	uxth	r3, r3
 8006638:	461a      	mov	r2, r3
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	4413      	add	r3, r2
 800663e:	61bb      	str	r3, [r7, #24]
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	011a      	lsls	r2, r3, #4
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	4413      	add	r3, r2
 800664a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800664e:	617b      	str	r3, [r7, #20]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	88db      	ldrh	r3, [r3, #6]
 8006654:	085b      	lsrs	r3, r3, #1
 8006656:	b29b      	uxth	r3, r3
 8006658:	005b      	lsls	r3, r3, #1
 800665a:	b29a      	uxth	r2, r3
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4413      	add	r3, r2
 800666a:	881b      	ldrh	r3, [r3, #0]
 800666c:	827b      	strh	r3, [r7, #18]
 800666e:	8a7b      	ldrh	r3, [r7, #18]
 8006670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006674:	2b00      	cmp	r3, #0
 8006676:	d01b      	beq.n	80066b0 <USB_ActivateEndpoint+0x17c>
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	881b      	ldrh	r3, [r3, #0]
 8006684:	b29b      	uxth	r3, r3
 8006686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800668a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800668e:	823b      	strh	r3, [r7, #16]
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	441a      	add	r2, r3
 800669a:	8a3b      	ldrh	r3, [r7, #16]
 800669c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	78db      	ldrb	r3, [r3, #3]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d020      	beq.n	80066fa <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4413      	add	r3, r2
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066ce:	81bb      	strh	r3, [r7, #12]
 80066d0:	89bb      	ldrh	r3, [r7, #12]
 80066d2:	f083 0320 	eor.w	r3, r3, #32
 80066d6:	81bb      	strh	r3, [r7, #12]
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	441a      	add	r2, r3
 80066e2:	89bb      	ldrh	r3, [r7, #12]
 80066e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	8013      	strh	r3, [r2, #0]
 80066f8:	e2d5      	b.n	8006ca6 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	b29b      	uxth	r3, r3
 8006708:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800670c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006710:	81fb      	strh	r3, [r7, #14]
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	441a      	add	r2, r3
 800671c:	89fb      	ldrh	r3, [r7, #14]
 800671e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006722:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800672a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800672e:	b29b      	uxth	r3, r3
 8006730:	8013      	strh	r3, [r2, #0]
 8006732:	e2b8      	b.n	8006ca6 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	633b      	str	r3, [r7, #48]	; 0x30
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800673e:	b29b      	uxth	r3, r3
 8006740:	461a      	mov	r2, r3
 8006742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006744:	4413      	add	r3, r2
 8006746:	633b      	str	r3, [r7, #48]	; 0x30
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	011a      	lsls	r2, r3, #4
 800674e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006750:	4413      	add	r3, r2
 8006752:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006756:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	88db      	ldrh	r3, [r3, #6]
 800675c:	085b      	lsrs	r3, r3, #1
 800675e:	b29b      	uxth	r3, r3
 8006760:	005b      	lsls	r3, r3, #1
 8006762:	b29a      	uxth	r2, r3
 8006764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006766:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	62bb      	str	r3, [r7, #40]	; 0x28
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006772:	b29b      	uxth	r3, r3
 8006774:	461a      	mov	r2, r3
 8006776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006778:	4413      	add	r3, r2
 800677a:	62bb      	str	r3, [r7, #40]	; 0x28
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	011a      	lsls	r2, r3, #4
 8006782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006784:	4413      	add	r3, r2
 8006786:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800678a:	627b      	str	r3, [r7, #36]	; 0x24
 800678c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	b29b      	uxth	r3, r3
 8006792:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006796:	b29a      	uxth	r2, r3
 8006798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679a:	801a      	strh	r2, [r3, #0]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	2b3e      	cmp	r3, #62	; 0x3e
 80067a2:	d91d      	bls.n	80067e0 <USB_ActivateEndpoint+0x2ac>
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	095b      	lsrs	r3, r3, #5
 80067aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	f003 031f 	and.w	r3, r3, #31
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d102      	bne.n	80067be <USB_ActivateEndpoint+0x28a>
 80067b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067ba:	3b01      	subs	r3, #1
 80067bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c0:	881b      	ldrh	r3, [r3, #0]
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	029b      	lsls	r3, r3, #10
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	4313      	orrs	r3, r2
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067d8:	b29a      	uxth	r2, r3
 80067da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067dc:	801a      	strh	r2, [r3, #0]
 80067de:	e026      	b.n	800682e <USB_ActivateEndpoint+0x2fa>
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d10a      	bne.n	80067fe <USB_ActivateEndpoint+0x2ca>
 80067e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ea:	881b      	ldrh	r3, [r3, #0]
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fa:	801a      	strh	r2, [r3, #0]
 80067fc:	e017      	b.n	800682e <USB_ActivateEndpoint+0x2fa>
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	085b      	lsrs	r3, r3, #1
 8006804:	66bb      	str	r3, [r7, #104]	; 0x68
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	2b00      	cmp	r3, #0
 8006810:	d002      	beq.n	8006818 <USB_ActivateEndpoint+0x2e4>
 8006812:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006814:	3301      	adds	r3, #1
 8006816:	66bb      	str	r3, [r7, #104]	; 0x68
 8006818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681a:	881b      	ldrh	r3, [r3, #0]
 800681c:	b29a      	uxth	r2, r3
 800681e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006820:	b29b      	uxth	r3, r3
 8006822:	029b      	lsls	r3, r3, #10
 8006824:	b29b      	uxth	r3, r3
 8006826:	4313      	orrs	r3, r2
 8006828:	b29a      	uxth	r2, r3
 800682a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4413      	add	r3, r2
 8006838:	881b      	ldrh	r3, [r3, #0]
 800683a:	847b      	strh	r3, [r7, #34]	; 0x22
 800683c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800683e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d01b      	beq.n	800687e <USB_ActivateEndpoint+0x34a>
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4413      	add	r3, r2
 8006850:	881b      	ldrh	r3, [r3, #0]
 8006852:	b29b      	uxth	r3, r3
 8006854:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800685c:	843b      	strh	r3, [r7, #32]
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	441a      	add	r2, r3
 8006868:	8c3b      	ldrh	r3, [r7, #32]
 800686a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800686e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006872:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800687a:	b29b      	uxth	r3, r3
 800687c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d124      	bne.n	80068d0 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	4413      	add	r3, r2
 8006890:	881b      	ldrh	r3, [r3, #0]
 8006892:	b29b      	uxth	r3, r3
 8006894:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800689c:	83bb      	strh	r3, [r7, #28]
 800689e:	8bbb      	ldrh	r3, [r7, #28]
 80068a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068a4:	83bb      	strh	r3, [r7, #28]
 80068a6:	8bbb      	ldrh	r3, [r7, #28]
 80068a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80068ac:	83bb      	strh	r3, [r7, #28]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	441a      	add	r2, r3
 80068b8:	8bbb      	ldrh	r3, [r7, #28]
 80068ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	8013      	strh	r3, [r2, #0]
 80068ce:	e1ea      	b.n	8006ca6 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	881b      	ldrh	r3, [r3, #0]
 80068dc:	b29b      	uxth	r3, r3
 80068de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e6:	83fb      	strh	r3, [r7, #30]
 80068e8:	8bfb      	ldrh	r3, [r7, #30]
 80068ea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80068ee:	83fb      	strh	r3, [r7, #30]
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	441a      	add	r2, r3
 80068fa:	8bfb      	ldrh	r3, [r7, #30]
 80068fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800690c:	b29b      	uxth	r3, r3
 800690e:	8013      	strh	r3, [r2, #0]
 8006910:	e1c9      	b.n	8006ca6 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	78db      	ldrb	r3, [r3, #3]
 8006916:	2b02      	cmp	r3, #2
 8006918:	d11e      	bne.n	8006958 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4413      	add	r3, r2
 8006924:	881b      	ldrh	r3, [r3, #0]
 8006926:	b29b      	uxth	r3, r3
 8006928:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800692c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006930:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	441a      	add	r2, r3
 800693e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800694a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800694e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006952:	b29b      	uxth	r3, r3
 8006954:	8013      	strh	r3, [r2, #0]
 8006956:	e01d      	b.n	8006994 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	881b      	ldrh	r3, [r3, #0]
 8006964:	b29b      	uxth	r3, r3
 8006966:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800696a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800696e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	441a      	add	r2, r3
 800697c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006980:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006984:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800698c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006990:	b29b      	uxth	r3, r3
 8006992:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800699e:	b29b      	uxth	r3, r3
 80069a0:	461a      	mov	r2, r3
 80069a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069a4:	4413      	add	r3, r2
 80069a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	011a      	lsls	r2, r3, #4
 80069ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	891b      	ldrh	r3, [r3, #8]
 80069bc:	085b      	lsrs	r3, r3, #1
 80069be:	b29b      	uxth	r3, r3
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069c6:	801a      	strh	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	657b      	str	r3, [r7, #84]	; 0x54
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	461a      	mov	r2, r3
 80069d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069d8:	4413      	add	r3, r2
 80069da:	657b      	str	r3, [r7, #84]	; 0x54
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	011a      	lsls	r2, r3, #4
 80069e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069e4:	4413      	add	r3, r2
 80069e6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80069ea:	653b      	str	r3, [r7, #80]	; 0x50
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	895b      	ldrh	r3, [r3, #10]
 80069f0:	085b      	lsrs	r3, r3, #1
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	005b      	lsls	r3, r3, #1
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069fa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	785b      	ldrb	r3, [r3, #1]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f040 8093 	bne.w	8006b2c <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4413      	add	r3, r2
 8006a10:	881b      	ldrh	r3, [r3, #0]
 8006a12:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006a16:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d01b      	beq.n	8006a5a <USB_ActivateEndpoint+0x526>
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	881b      	ldrh	r3, [r3, #0]
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a38:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	441a      	add	r2, r3
 8006a44:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006a46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	881b      	ldrh	r3, [r3, #0]
 8006a66:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006a68:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d01b      	beq.n	8006aaa <USB_ActivateEndpoint+0x576>
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	881b      	ldrh	r3, [r3, #0]
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a88:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	441a      	add	r2, r3
 8006a94:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aa2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac0:	873b      	strh	r3, [r7, #56]	; 0x38
 8006ac2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006ac4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ac8:	873b      	strh	r3, [r7, #56]	; 0x38
 8006aca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006acc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006ad0:	873b      	strh	r3, [r7, #56]	; 0x38
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	441a      	add	r2, r3
 8006adc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	881b      	ldrh	r3, [r3, #0]
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b08:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	441a      	add	r2, r3
 8006b14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006b16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	8013      	strh	r3, [r2, #0]
 8006b2a:	e0bc      	b.n	8006ca6 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4413      	add	r3, r2
 8006b36:	881b      	ldrh	r3, [r3, #0]
 8006b38:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006b3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006b40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d01d      	beq.n	8006b84 <USB_ActivateEndpoint+0x650>
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4413      	add	r3, r2
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b5e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	441a      	add	r2, r3
 8006b6c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006b70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	881b      	ldrh	r3, [r3, #0]
 8006b90:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006b94:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d01d      	beq.n	8006bdc <USB_ActivateEndpoint+0x6a8>
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	441a      	add	r2, r3
 8006bc4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bd4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	78db      	ldrb	r3, [r3, #3]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d024      	beq.n	8006c2e <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bfa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006bfe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006c02:	f083 0320 	eor.w	r3, r3, #32
 8006c06:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	441a      	add	r2, r3
 8006c14:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006c18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	8013      	strh	r3, [r2, #0]
 8006c2c:	e01d      	b.n	8006c6a <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4413      	add	r3, r2
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c44:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	441a      	add	r2, r3
 8006c52:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006c56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	881b      	ldrh	r3, [r3, #0]
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c80:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	441a      	add	r2, r3
 8006c8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006ca6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3774      	adds	r7, #116	; 0x74
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bc80      	pop	{r7}
 8006cb2:	4770      	bx	lr

08006cb4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b08d      	sub	sp, #52	; 0x34
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	7b1b      	ldrb	r3, [r3, #12]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f040 808e 	bne.w	8006de4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	785b      	ldrb	r3, [r3, #1]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d044      	beq.n	8006d5a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	4413      	add	r3, r2
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	81bb      	strh	r3, [r7, #12]
 8006cde:	89bb      	ldrh	r3, [r7, #12]
 8006ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d01b      	beq.n	8006d20 <USB_DeactivateEndpoint+0x6c>
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	4413      	add	r3, r2
 8006cf2:	881b      	ldrh	r3, [r3, #0]
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cfe:	817b      	strh	r3, [r7, #10]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	441a      	add	r2, r3
 8006d0a:	897b      	ldrh	r3, [r7, #10]
 8006d0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	881b      	ldrh	r3, [r3, #0]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d36:	813b      	strh	r3, [r7, #8]
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	441a      	add	r2, r3
 8006d42:	893b      	ldrh	r3, [r7, #8]
 8006d44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	8013      	strh	r3, [r2, #0]
 8006d58:	e192      	b.n	8007080 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	881b      	ldrh	r3, [r3, #0]
 8006d66:	827b      	strh	r3, [r7, #18]
 8006d68:	8a7b      	ldrh	r3, [r7, #18]
 8006d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d01b      	beq.n	8006daa <USB_DeactivateEndpoint+0xf6>
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4413      	add	r3, r2
 8006d7c:	881b      	ldrh	r3, [r3, #0]
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d88:	823b      	strh	r3, [r7, #16]
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	441a      	add	r2, r3
 8006d94:	8a3b      	ldrh	r3, [r7, #16]
 8006d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4413      	add	r3, r2
 8006db4:	881b      	ldrh	r3, [r3, #0]
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc0:	81fb      	strh	r3, [r7, #14]
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	441a      	add	r2, r3
 8006dcc:	89fb      	ldrh	r3, [r7, #14]
 8006dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	8013      	strh	r3, [r2, #0]
 8006de2:	e14d      	b.n	8007080 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	785b      	ldrb	r3, [r3, #1]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f040 80a5 	bne.w	8006f38 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4413      	add	r3, r2
 8006df8:	881b      	ldrh	r3, [r3, #0]
 8006dfa:	843b      	strh	r3, [r7, #32]
 8006dfc:	8c3b      	ldrh	r3, [r7, #32]
 8006dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d01b      	beq.n	8006e3e <USB_DeactivateEndpoint+0x18a>
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4413      	add	r3, r2
 8006e10:	881b      	ldrh	r3, [r3, #0]
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1c:	83fb      	strh	r3, [r7, #30]
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	441a      	add	r2, r3
 8006e28:	8bfb      	ldrh	r3, [r7, #30]
 8006e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4413      	add	r3, r2
 8006e48:	881b      	ldrh	r3, [r3, #0]
 8006e4a:	83bb      	strh	r3, [r7, #28]
 8006e4c:	8bbb      	ldrh	r3, [r7, #28]
 8006e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d01b      	beq.n	8006e8e <USB_DeactivateEndpoint+0x1da>
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4413      	add	r3, r2
 8006e60:	881b      	ldrh	r3, [r3, #0]
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e6c:	837b      	strh	r3, [r7, #26]
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	441a      	add	r2, r3
 8006e78:	8b7b      	ldrh	r3, [r7, #26]
 8006e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4413      	add	r3, r2
 8006e98:	881b      	ldrh	r3, [r3, #0]
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ea4:	833b      	strh	r3, [r7, #24]
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	441a      	add	r2, r3
 8006eb0:	8b3b      	ldrh	r3, [r7, #24]
 8006eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ebe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4413      	add	r3, r2
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006edc:	82fb      	strh	r3, [r7, #22]
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	441a      	add	r2, r3
 8006ee8:	8afb      	ldrh	r3, [r7, #22]
 8006eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f14:	82bb      	strh	r3, [r7, #20]
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	441a      	add	r2, r3
 8006f20:	8abb      	ldrh	r3, [r7, #20]
 8006f22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	8013      	strh	r3, [r2, #0]
 8006f36:	e0a3      	b.n	8007080 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4413      	add	r3, r2
 8006f42:	881b      	ldrh	r3, [r3, #0]
 8006f44:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006f46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d01b      	beq.n	8006f88 <USB_DeactivateEndpoint+0x2d4>
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4413      	add	r3, r2
 8006f5a:	881b      	ldrh	r3, [r3, #0]
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f66:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	441a      	add	r2, r3
 8006f72:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006f74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	4413      	add	r3, r2
 8006f92:	881b      	ldrh	r3, [r3, #0]
 8006f94:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006f96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d01b      	beq.n	8006fd8 <USB_DeactivateEndpoint+0x324>
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	4413      	add	r3, r2
 8006faa:	881b      	ldrh	r3, [r3, #0]
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fb6:	853b      	strh	r3, [r7, #40]	; 0x28
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	441a      	add	r2, r3
 8006fc2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006fc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4413      	add	r3, r2
 8006fe2:	881b      	ldrh	r3, [r3, #0]
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fee:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	441a      	add	r2, r3
 8006ffa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007004:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800700c:	b29b      	uxth	r3, r3
 800700e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4413      	add	r3, r2
 800701a:	881b      	ldrh	r3, [r3, #0]
 800701c:	b29b      	uxth	r3, r3
 800701e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007022:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007026:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	441a      	add	r2, r3
 8007032:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800703c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007044:	b29b      	uxth	r3, r3
 8007046:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	b29b      	uxth	r3, r3
 8007056:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800705a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800705e:	847b      	strh	r3, [r7, #34]	; 0x22
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	441a      	add	r2, r3
 800706a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800706c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007074:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800707c:	b29b      	uxth	r3, r3
 800707e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3734      	adds	r7, #52	; 0x34
 8007086:	46bd      	mov	sp, r7
 8007088:	bc80      	pop	{r7}
 800708a:	4770      	bx	lr

0800708c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b0c2      	sub	sp, #264	; 0x108
 8007090:	af00      	add	r7, sp, #0
 8007092:	1d3b      	adds	r3, r7, #4
 8007094:	6018      	str	r0, [r3, #0]
 8007096:	463b      	mov	r3, r7
 8007098:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800709a:	463b      	mov	r3, r7
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	785b      	ldrb	r3, [r3, #1]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	f040 8545 	bne.w	8007b30 <USB_EPStartXfer+0xaa4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80070a6:	463b      	mov	r3, r7
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	699a      	ldr	r2, [r3, #24]
 80070ac:	463b      	mov	r3, r7
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d905      	bls.n	80070c2 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80070b6:	463b      	mov	r3, r7
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80070c0:	e004      	b.n	80070cc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80070c2:	463b      	mov	r3, r7
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	699b      	ldr	r3, [r3, #24]
 80070c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80070cc:	463b      	mov	r3, r7
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	7b1b      	ldrb	r3, [r3, #12]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d128      	bne.n	8007128 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80070d6:	463b      	mov	r3, r7
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	6959      	ldr	r1, [r3, #20]
 80070dc:	463b      	mov	r3, r7
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	88da      	ldrh	r2, [r3, #6]
 80070e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	1d38      	adds	r0, r7, #4
 80070ea:	6800      	ldr	r0, [r0, #0]
 80070ec:	f001 fa58 	bl	80085a0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80070f0:	1d3b      	adds	r3, r7, #4
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	613b      	str	r3, [r7, #16]
 80070f6:	1d3b      	adds	r3, r7, #4
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070fe:	b29b      	uxth	r3, r3
 8007100:	461a      	mov	r2, r3
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	4413      	add	r3, r2
 8007106:	613b      	str	r3, [r7, #16]
 8007108:	463b      	mov	r3, r7
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	011a      	lsls	r2, r3, #4
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	4413      	add	r3, r2
 8007114:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007118:	60fb      	str	r3, [r7, #12]
 800711a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800711e:	b29a      	uxth	r2, r3
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	801a      	strh	r2, [r3, #0]
 8007124:	f000 bcdb 	b.w	8007ade <USB_EPStartXfer+0xa52>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007128:	463b      	mov	r3, r7
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	78db      	ldrb	r3, [r3, #3]
 800712e:	2b02      	cmp	r3, #2
 8007130:	f040 836f 	bne.w	8007812 <USB_EPStartXfer+0x786>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007134:	463b      	mov	r3, r7
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6a1a      	ldr	r2, [r3, #32]
 800713a:	463b      	mov	r3, r7
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	429a      	cmp	r2, r3
 8007142:	f240 8313 	bls.w	800776c <USB_EPStartXfer+0x6e0>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007146:	1d3b      	adds	r3, r7, #4
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	463b      	mov	r3, r7
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	4413      	add	r3, r2
 8007154:	881b      	ldrh	r3, [r3, #0]
 8007156:	b29b      	uxth	r3, r3
 8007158:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800715c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007160:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007164:	1d3b      	adds	r3, r7, #4
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	463b      	mov	r3, r7
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	441a      	add	r2, r3
 8007172:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007176:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800717a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800717e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007186:	b29b      	uxth	r3, r3
 8007188:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800718a:	463b      	mov	r3, r7
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	6a1a      	ldr	r2, [r3, #32]
 8007190:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007194:	1ad2      	subs	r2, r2, r3
 8007196:	463b      	mov	r3, r7
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800719c:	1d3b      	adds	r3, r7, #4
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	463b      	mov	r3, r7
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	881b      	ldrh	r3, [r3, #0]
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f000 816d 	beq.w	8007492 <USB_EPStartXfer+0x406>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071b8:	1d3b      	adds	r3, r7, #4
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	633b      	str	r3, [r7, #48]	; 0x30
 80071be:	463b      	mov	r3, r7
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	785b      	ldrb	r3, [r3, #1]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d16e      	bne.n	80072a6 <USB_EPStartXfer+0x21a>
 80071c8:	1d3b      	adds	r3, r7, #4
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80071ce:	1d3b      	adds	r3, r7, #4
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	461a      	mov	r2, r3
 80071da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071dc:	4413      	add	r3, r2
 80071de:	62bb      	str	r3, [r7, #40]	; 0x28
 80071e0:	463b      	mov	r3, r7
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	011a      	lsls	r2, r3, #4
 80071e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ea:	4413      	add	r3, r2
 80071ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80071f0:	627b      	str	r3, [r7, #36]	; 0x24
 80071f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f4:	881b      	ldrh	r3, [r3, #0]
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007200:	801a      	strh	r2, [r3, #0]
 8007202:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007206:	2b3e      	cmp	r3, #62	; 0x3e
 8007208:	d921      	bls.n	800724e <USB_EPStartXfer+0x1c2>
 800720a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800720e:	095b      	lsrs	r3, r3, #5
 8007210:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007218:	f003 031f 	and.w	r3, r3, #31
 800721c:	2b00      	cmp	r3, #0
 800721e:	d104      	bne.n	800722a <USB_EPStartXfer+0x19e>
 8007220:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007224:	3b01      	subs	r3, #1
 8007226:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800722a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722c:	881b      	ldrh	r3, [r3, #0]
 800722e:	b29a      	uxth	r2, r3
 8007230:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007234:	b29b      	uxth	r3, r3
 8007236:	029b      	lsls	r3, r3, #10
 8007238:	b29b      	uxth	r3, r3
 800723a:	4313      	orrs	r3, r2
 800723c:	b29b      	uxth	r3, r3
 800723e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007242:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007246:	b29a      	uxth	r2, r3
 8007248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724a:	801a      	strh	r2, [r3, #0]
 800724c:	e047      	b.n	80072de <USB_EPStartXfer+0x252>
 800724e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007252:	2b00      	cmp	r3, #0
 8007254:	d10a      	bne.n	800726c <USB_EPStartXfer+0x1e0>
 8007256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007258:	881b      	ldrh	r3, [r3, #0]
 800725a:	b29b      	uxth	r3, r3
 800725c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007260:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007264:	b29a      	uxth	r2, r3
 8007266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007268:	801a      	strh	r2, [r3, #0]
 800726a:	e038      	b.n	80072de <USB_EPStartXfer+0x252>
 800726c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007270:	085b      	lsrs	r3, r3, #1
 8007272:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	2b00      	cmp	r3, #0
 8007280:	d004      	beq.n	800728c <USB_EPStartXfer+0x200>
 8007282:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007286:	3301      	adds	r3, #1
 8007288:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800728c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728e:	881b      	ldrh	r3, [r3, #0]
 8007290:	b29a      	uxth	r2, r3
 8007292:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007296:	b29b      	uxth	r3, r3
 8007298:	029b      	lsls	r3, r3, #10
 800729a:	b29b      	uxth	r3, r3
 800729c:	4313      	orrs	r3, r2
 800729e:	b29a      	uxth	r2, r3
 80072a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a2:	801a      	strh	r2, [r3, #0]
 80072a4:	e01b      	b.n	80072de <USB_EPStartXfer+0x252>
 80072a6:	463b      	mov	r3, r7
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	785b      	ldrb	r3, [r3, #1]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d116      	bne.n	80072de <USB_EPStartXfer+0x252>
 80072b0:	1d3b      	adds	r3, r7, #4
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	461a      	mov	r2, r3
 80072bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072be:	4413      	add	r3, r2
 80072c0:	633b      	str	r3, [r7, #48]	; 0x30
 80072c2:	463b      	mov	r3, r7
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	011a      	lsls	r2, r3, #4
 80072ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072cc:	4413      	add	r3, r2
 80072ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072d8:	b29a      	uxth	r2, r3
 80072da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80072de:	463b      	mov	r3, r7
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	895b      	ldrh	r3, [r3, #10]
 80072e4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072e8:	463b      	mov	r3, r7
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6959      	ldr	r1, [r3, #20]
 80072ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80072f8:	1d38      	adds	r0, r7, #4
 80072fa:	6800      	ldr	r0, [r0, #0]
 80072fc:	f001 f950 	bl	80085a0 <USB_WritePMA>
            ep->xfer_buff += len;
 8007300:	463b      	mov	r3, r7
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	695a      	ldr	r2, [r3, #20]
 8007306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800730a:	441a      	add	r2, r3
 800730c:	463b      	mov	r3, r7
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007312:	463b      	mov	r3, r7
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	6a1a      	ldr	r2, [r3, #32]
 8007318:	463b      	mov	r3, r7
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	429a      	cmp	r2, r3
 8007320:	d909      	bls.n	8007336 <USB_EPStartXfer+0x2aa>
            {
              ep->xfer_len_db -= len;
 8007322:	463b      	mov	r3, r7
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	6a1a      	ldr	r2, [r3, #32]
 8007328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800732c:	1ad2      	subs	r2, r2, r3
 800732e:	463b      	mov	r3, r7
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	621a      	str	r2, [r3, #32]
 8007334:	e008      	b.n	8007348 <USB_EPStartXfer+0x2bc>
            }
            else
            {
              len = ep->xfer_len_db;
 8007336:	463b      	mov	r3, r7
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	6a1b      	ldr	r3, [r3, #32]
 800733c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007340:	463b      	mov	r3, r7
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2200      	movs	r2, #0
 8007346:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007348:	463b      	mov	r3, r7
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	785b      	ldrb	r3, [r3, #1]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d16e      	bne.n	8007430 <USB_EPStartXfer+0x3a4>
 8007352:	1d3b      	adds	r3, r7, #4
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	61bb      	str	r3, [r7, #24]
 8007358:	1d3b      	adds	r3, r7, #4
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007360:	b29b      	uxth	r3, r3
 8007362:	461a      	mov	r2, r3
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	4413      	add	r3, r2
 8007368:	61bb      	str	r3, [r7, #24]
 800736a:	463b      	mov	r3, r7
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	011a      	lsls	r2, r3, #4
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	4413      	add	r3, r2
 8007376:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800737a:	617b      	str	r3, [r7, #20]
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	881b      	ldrh	r3, [r3, #0]
 8007380:	b29b      	uxth	r3, r3
 8007382:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007386:	b29a      	uxth	r2, r3
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	801a      	strh	r2, [r3, #0]
 800738c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007390:	2b3e      	cmp	r3, #62	; 0x3e
 8007392:	d921      	bls.n	80073d8 <USB_EPStartXfer+0x34c>
 8007394:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007398:	095b      	lsrs	r3, r3, #5
 800739a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800739e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073a2:	f003 031f 	and.w	r3, r3, #31
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d104      	bne.n	80073b4 <USB_EPStartXfer+0x328>
 80073aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073ae:	3b01      	subs	r3, #1
 80073b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	881b      	ldrh	r3, [r3, #0]
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073be:	b29b      	uxth	r3, r3
 80073c0:	029b      	lsls	r3, r3, #10
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	4313      	orrs	r3, r2
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	801a      	strh	r2, [r3, #0]
 80073d6:	e04a      	b.n	800746e <USB_EPStartXfer+0x3e2>
 80073d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d10a      	bne.n	80073f6 <USB_EPStartXfer+0x36a>
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	881b      	ldrh	r3, [r3, #0]
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	801a      	strh	r2, [r3, #0]
 80073f4:	e03b      	b.n	800746e <USB_EPStartXfer+0x3e2>
 80073f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073fa:	085b      	lsrs	r3, r3, #1
 80073fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007404:	f003 0301 	and.w	r3, r3, #1
 8007408:	2b00      	cmp	r3, #0
 800740a:	d004      	beq.n	8007416 <USB_EPStartXfer+0x38a>
 800740c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007410:	3301      	adds	r3, #1
 8007412:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	881b      	ldrh	r3, [r3, #0]
 800741a:	b29a      	uxth	r2, r3
 800741c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007420:	b29b      	uxth	r3, r3
 8007422:	029b      	lsls	r3, r3, #10
 8007424:	b29b      	uxth	r3, r3
 8007426:	4313      	orrs	r3, r2
 8007428:	b29a      	uxth	r2, r3
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	801a      	strh	r2, [r3, #0]
 800742e:	e01e      	b.n	800746e <USB_EPStartXfer+0x3e2>
 8007430:	463b      	mov	r3, r7
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	785b      	ldrb	r3, [r3, #1]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d119      	bne.n	800746e <USB_EPStartXfer+0x3e2>
 800743a:	1d3b      	adds	r3, r7, #4
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	623b      	str	r3, [r7, #32]
 8007440:	1d3b      	adds	r3, r7, #4
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007448:	b29b      	uxth	r3, r3
 800744a:	461a      	mov	r2, r3
 800744c:	6a3b      	ldr	r3, [r7, #32]
 800744e:	4413      	add	r3, r2
 8007450:	623b      	str	r3, [r7, #32]
 8007452:	463b      	mov	r3, r7
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	011a      	lsls	r2, r3, #4
 800745a:	6a3b      	ldr	r3, [r7, #32]
 800745c:	4413      	add	r3, r2
 800745e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007462:	61fb      	str	r3, [r7, #28]
 8007464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007468:	b29a      	uxth	r2, r3
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800746e:	463b      	mov	r3, r7
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	891b      	ldrh	r3, [r3, #8]
 8007474:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007478:	463b      	mov	r3, r7
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	6959      	ldr	r1, [r3, #20]
 800747e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007482:	b29b      	uxth	r3, r3
 8007484:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007488:	1d38      	adds	r0, r7, #4
 800748a:	6800      	ldr	r0, [r0, #0]
 800748c:	f001 f888 	bl	80085a0 <USB_WritePMA>
 8007490:	e325      	b.n	8007ade <USB_EPStartXfer+0xa52>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007492:	463b      	mov	r3, r7
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	785b      	ldrb	r3, [r3, #1]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d16e      	bne.n	800757a <USB_EPStartXfer+0x4ee>
 800749c:	1d3b      	adds	r3, r7, #4
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80074a2:	1d3b      	adds	r3, r7, #4
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	461a      	mov	r2, r3
 80074ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074b0:	4413      	add	r3, r2
 80074b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80074b4:	463b      	mov	r3, r7
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	011a      	lsls	r2, r3, #4
 80074bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074be:	4413      	add	r3, r2
 80074c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80074c4:	647b      	str	r3, [r7, #68]	; 0x44
 80074c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074c8:	881b      	ldrh	r3, [r3, #0]
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074d4:	801a      	strh	r2, [r3, #0]
 80074d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074da:	2b3e      	cmp	r3, #62	; 0x3e
 80074dc:	d921      	bls.n	8007522 <USB_EPStartXfer+0x496>
 80074de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074e2:	095b      	lsrs	r3, r3, #5
 80074e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80074e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ec:	f003 031f 	and.w	r3, r3, #31
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d104      	bne.n	80074fe <USB_EPStartXfer+0x472>
 80074f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80074f8:	3b01      	subs	r3, #1
 80074fa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80074fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007500:	881b      	ldrh	r3, [r3, #0]
 8007502:	b29a      	uxth	r2, r3
 8007504:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007508:	b29b      	uxth	r3, r3
 800750a:	029b      	lsls	r3, r3, #10
 800750c:	b29b      	uxth	r3, r3
 800750e:	4313      	orrs	r3, r2
 8007510:	b29b      	uxth	r3, r3
 8007512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800751a:	b29a      	uxth	r2, r3
 800751c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800751e:	801a      	strh	r2, [r3, #0]
 8007520:	e04a      	b.n	80075b8 <USB_EPStartXfer+0x52c>
 8007522:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007526:	2b00      	cmp	r3, #0
 8007528:	d10a      	bne.n	8007540 <USB_EPStartXfer+0x4b4>
 800752a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800752c:	881b      	ldrh	r3, [r3, #0]
 800752e:	b29b      	uxth	r3, r3
 8007530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007538:	b29a      	uxth	r2, r3
 800753a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800753c:	801a      	strh	r2, [r3, #0]
 800753e:	e03b      	b.n	80075b8 <USB_EPStartXfer+0x52c>
 8007540:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007544:	085b      	lsrs	r3, r3, #1
 8007546:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800754a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800754e:	f003 0301 	and.w	r3, r3, #1
 8007552:	2b00      	cmp	r3, #0
 8007554:	d004      	beq.n	8007560 <USB_EPStartXfer+0x4d4>
 8007556:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800755a:	3301      	adds	r3, #1
 800755c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007562:	881b      	ldrh	r3, [r3, #0]
 8007564:	b29a      	uxth	r2, r3
 8007566:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800756a:	b29b      	uxth	r3, r3
 800756c:	029b      	lsls	r3, r3, #10
 800756e:	b29b      	uxth	r3, r3
 8007570:	4313      	orrs	r3, r2
 8007572:	b29a      	uxth	r2, r3
 8007574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007576:	801a      	strh	r2, [r3, #0]
 8007578:	e01e      	b.n	80075b8 <USB_EPStartXfer+0x52c>
 800757a:	463b      	mov	r3, r7
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	785b      	ldrb	r3, [r3, #1]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d119      	bne.n	80075b8 <USB_EPStartXfer+0x52c>
 8007584:	1d3b      	adds	r3, r7, #4
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	653b      	str	r3, [r7, #80]	; 0x50
 800758a:	1d3b      	adds	r3, r7, #4
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007592:	b29b      	uxth	r3, r3
 8007594:	461a      	mov	r2, r3
 8007596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007598:	4413      	add	r3, r2
 800759a:	653b      	str	r3, [r7, #80]	; 0x50
 800759c:	463b      	mov	r3, r7
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	011a      	lsls	r2, r3, #4
 80075a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075a6:	4413      	add	r3, r2
 80075a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80075ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80075b8:	463b      	mov	r3, r7
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	891b      	ldrh	r3, [r3, #8]
 80075be:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075c2:	463b      	mov	r3, r7
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	6959      	ldr	r1, [r3, #20]
 80075c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80075d2:	1d38      	adds	r0, r7, #4
 80075d4:	6800      	ldr	r0, [r0, #0]
 80075d6:	f000 ffe3 	bl	80085a0 <USB_WritePMA>
            ep->xfer_buff += len;
 80075da:	463b      	mov	r3, r7
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	695a      	ldr	r2, [r3, #20]
 80075e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075e4:	441a      	add	r2, r3
 80075e6:	463b      	mov	r3, r7
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80075ec:	463b      	mov	r3, r7
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	6a1a      	ldr	r2, [r3, #32]
 80075f2:	463b      	mov	r3, r7
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d909      	bls.n	8007610 <USB_EPStartXfer+0x584>
            {
              ep->xfer_len_db -= len;
 80075fc:	463b      	mov	r3, r7
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	6a1a      	ldr	r2, [r3, #32]
 8007602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007606:	1ad2      	subs	r2, r2, r3
 8007608:	463b      	mov	r3, r7
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	621a      	str	r2, [r3, #32]
 800760e:	e008      	b.n	8007622 <USB_EPStartXfer+0x596>
            }
            else
            {
              len = ep->xfer_len_db;
 8007610:	463b      	mov	r3, r7
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	6a1b      	ldr	r3, [r3, #32]
 8007616:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800761a:	463b      	mov	r3, r7
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2200      	movs	r2, #0
 8007620:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007622:	1d3b      	adds	r3, r7, #4
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	643b      	str	r3, [r7, #64]	; 0x40
 8007628:	463b      	mov	r3, r7
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	785b      	ldrb	r3, [r3, #1]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d16e      	bne.n	8007710 <USB_EPStartXfer+0x684>
 8007632:	1d3b      	adds	r3, r7, #4
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	63bb      	str	r3, [r7, #56]	; 0x38
 8007638:	1d3b      	adds	r3, r7, #4
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007640:	b29b      	uxth	r3, r3
 8007642:	461a      	mov	r2, r3
 8007644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007646:	4413      	add	r3, r2
 8007648:	63bb      	str	r3, [r7, #56]	; 0x38
 800764a:	463b      	mov	r3, r7
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	011a      	lsls	r2, r3, #4
 8007652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007654:	4413      	add	r3, r2
 8007656:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800765a:	637b      	str	r3, [r7, #52]	; 0x34
 800765c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800765e:	881b      	ldrh	r3, [r3, #0]
 8007660:	b29b      	uxth	r3, r3
 8007662:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007666:	b29a      	uxth	r2, r3
 8007668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800766a:	801a      	strh	r2, [r3, #0]
 800766c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007670:	2b3e      	cmp	r3, #62	; 0x3e
 8007672:	d921      	bls.n	80076b8 <USB_EPStartXfer+0x62c>
 8007674:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007678:	095b      	lsrs	r3, r3, #5
 800767a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800767e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007682:	f003 031f 	and.w	r3, r3, #31
 8007686:	2b00      	cmp	r3, #0
 8007688:	d104      	bne.n	8007694 <USB_EPStartXfer+0x608>
 800768a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800768e:	3b01      	subs	r3, #1
 8007690:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007696:	881b      	ldrh	r3, [r3, #0]
 8007698:	b29a      	uxth	r2, r3
 800769a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800769e:	b29b      	uxth	r3, r3
 80076a0:	029b      	lsls	r3, r3, #10
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	4313      	orrs	r3, r2
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b4:	801a      	strh	r2, [r3, #0]
 80076b6:	e047      	b.n	8007748 <USB_EPStartXfer+0x6bc>
 80076b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d10a      	bne.n	80076d6 <USB_EPStartXfer+0x64a>
 80076c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076c2:	881b      	ldrh	r3, [r3, #0]
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076d2:	801a      	strh	r2, [r3, #0]
 80076d4:	e038      	b.n	8007748 <USB_EPStartXfer+0x6bc>
 80076d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076da:	085b      	lsrs	r3, r3, #1
 80076dc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80076e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076e4:	f003 0301 	and.w	r3, r3, #1
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d004      	beq.n	80076f6 <USB_EPStartXfer+0x66a>
 80076ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076f0:	3301      	adds	r3, #1
 80076f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80076f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076f8:	881b      	ldrh	r3, [r3, #0]
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007700:	b29b      	uxth	r3, r3
 8007702:	029b      	lsls	r3, r3, #10
 8007704:	b29b      	uxth	r3, r3
 8007706:	4313      	orrs	r3, r2
 8007708:	b29a      	uxth	r2, r3
 800770a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800770c:	801a      	strh	r2, [r3, #0]
 800770e:	e01b      	b.n	8007748 <USB_EPStartXfer+0x6bc>
 8007710:	463b      	mov	r3, r7
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	785b      	ldrb	r3, [r3, #1]
 8007716:	2b01      	cmp	r3, #1
 8007718:	d116      	bne.n	8007748 <USB_EPStartXfer+0x6bc>
 800771a:	1d3b      	adds	r3, r7, #4
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007722:	b29b      	uxth	r3, r3
 8007724:	461a      	mov	r2, r3
 8007726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007728:	4413      	add	r3, r2
 800772a:	643b      	str	r3, [r7, #64]	; 0x40
 800772c:	463b      	mov	r3, r7
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	011a      	lsls	r2, r3, #4
 8007734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007736:	4413      	add	r3, r2
 8007738:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800773c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800773e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007742:	b29a      	uxth	r2, r3
 8007744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007746:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007748:	463b      	mov	r3, r7
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	895b      	ldrh	r3, [r3, #10]
 800774e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007752:	463b      	mov	r3, r7
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	6959      	ldr	r1, [r3, #20]
 8007758:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800775c:	b29b      	uxth	r3, r3
 800775e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007762:	1d38      	adds	r0, r7, #4
 8007764:	6800      	ldr	r0, [r0, #0]
 8007766:	f000 ff1b 	bl	80085a0 <USB_WritePMA>
 800776a:	e1b8      	b.n	8007ade <USB_EPStartXfer+0xa52>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800776c:	463b      	mov	r3, r7
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007776:	1d3b      	adds	r3, r7, #4
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	463b      	mov	r3, r7
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	4413      	add	r3, r2
 8007784:	881b      	ldrh	r3, [r3, #0]
 8007786:	b29b      	uxth	r3, r3
 8007788:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800778c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007790:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007794:	1d3b      	adds	r3, r7, #4
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	463b      	mov	r3, r7
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	441a      	add	r2, r3
 80077a2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80077a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80077ba:	1d3b      	adds	r3, r7, #4
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077c0:	1d3b      	adds	r3, r7, #4
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	461a      	mov	r2, r3
 80077cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077ce:	4413      	add	r3, r2
 80077d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077d2:	463b      	mov	r3, r7
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	011a      	lsls	r2, r3, #4
 80077da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077dc:	4413      	add	r3, r2
 80077de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80077e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80077e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077ec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80077ee:	463b      	mov	r3, r7
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	891b      	ldrh	r3, [r3, #8]
 80077f4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077f8:	463b      	mov	r3, r7
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6959      	ldr	r1, [r3, #20]
 80077fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007802:	b29b      	uxth	r3, r3
 8007804:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007808:	1d38      	adds	r0, r7, #4
 800780a:	6800      	ldr	r0, [r0, #0]
 800780c:	f000 fec8 	bl	80085a0 <USB_WritePMA>
 8007810:	e165      	b.n	8007ade <USB_EPStartXfer+0xa52>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007812:	463b      	mov	r3, r7
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	6a1a      	ldr	r2, [r3, #32]
 8007818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800781c:	1ad2      	subs	r2, r2, r3
 800781e:	463b      	mov	r3, r7
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007824:	1d3b      	adds	r3, r7, #4
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	463b      	mov	r3, r7
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	4413      	add	r3, r2
 8007832:	881b      	ldrh	r3, [r3, #0]
 8007834:	b29b      	uxth	r3, r3
 8007836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800783a:	2b00      	cmp	r3, #0
 800783c:	f000 80a5 	beq.w	800798a <USB_EPStartXfer+0x8fe>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007840:	1d3b      	adds	r3, r7, #4
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	673b      	str	r3, [r7, #112]	; 0x70
 8007846:	463b      	mov	r3, r7
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	785b      	ldrb	r3, [r3, #1]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d16e      	bne.n	800792e <USB_EPStartXfer+0x8a2>
 8007850:	1d3b      	adds	r3, r7, #4
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	66bb      	str	r3, [r7, #104]	; 0x68
 8007856:	1d3b      	adds	r3, r7, #4
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800785e:	b29b      	uxth	r3, r3
 8007860:	461a      	mov	r2, r3
 8007862:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007864:	4413      	add	r3, r2
 8007866:	66bb      	str	r3, [r7, #104]	; 0x68
 8007868:	463b      	mov	r3, r7
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	011a      	lsls	r2, r3, #4
 8007870:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007872:	4413      	add	r3, r2
 8007874:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007878:	667b      	str	r3, [r7, #100]	; 0x64
 800787a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800787c:	881b      	ldrh	r3, [r3, #0]
 800787e:	b29b      	uxth	r3, r3
 8007880:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007884:	b29a      	uxth	r2, r3
 8007886:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007888:	801a      	strh	r2, [r3, #0]
 800788a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800788e:	2b3e      	cmp	r3, #62	; 0x3e
 8007890:	d921      	bls.n	80078d6 <USB_EPStartXfer+0x84a>
 8007892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007896:	095b      	lsrs	r3, r3, #5
 8007898:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800789c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078a0:	f003 031f 	and.w	r3, r3, #31
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d104      	bne.n	80078b2 <USB_EPStartXfer+0x826>
 80078a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80078ac:	3b01      	subs	r3, #1
 80078ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80078b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078b4:	881b      	ldrh	r3, [r3, #0]
 80078b6:	b29a      	uxth	r2, r3
 80078b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80078bc:	b29b      	uxth	r3, r3
 80078be:	029b      	lsls	r3, r3, #10
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	4313      	orrs	r3, r2
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078d2:	801a      	strh	r2, [r3, #0]
 80078d4:	e047      	b.n	8007966 <USB_EPStartXfer+0x8da>
 80078d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d10a      	bne.n	80078f4 <USB_EPStartXfer+0x868>
 80078de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078e0:	881b      	ldrh	r3, [r3, #0]
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078f0:	801a      	strh	r2, [r3, #0]
 80078f2:	e038      	b.n	8007966 <USB_EPStartXfer+0x8da>
 80078f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078f8:	085b      	lsrs	r3, r3, #1
 80078fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80078fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007902:	f003 0301 	and.w	r3, r3, #1
 8007906:	2b00      	cmp	r3, #0
 8007908:	d004      	beq.n	8007914 <USB_EPStartXfer+0x888>
 800790a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800790e:	3301      	adds	r3, #1
 8007910:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007914:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007916:	881b      	ldrh	r3, [r3, #0]
 8007918:	b29a      	uxth	r2, r3
 800791a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800791e:	b29b      	uxth	r3, r3
 8007920:	029b      	lsls	r3, r3, #10
 8007922:	b29b      	uxth	r3, r3
 8007924:	4313      	orrs	r3, r2
 8007926:	b29a      	uxth	r2, r3
 8007928:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800792a:	801a      	strh	r2, [r3, #0]
 800792c:	e01b      	b.n	8007966 <USB_EPStartXfer+0x8da>
 800792e:	463b      	mov	r3, r7
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	785b      	ldrb	r3, [r3, #1]
 8007934:	2b01      	cmp	r3, #1
 8007936:	d116      	bne.n	8007966 <USB_EPStartXfer+0x8da>
 8007938:	1d3b      	adds	r3, r7, #4
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007940:	b29b      	uxth	r3, r3
 8007942:	461a      	mov	r2, r3
 8007944:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007946:	4413      	add	r3, r2
 8007948:	673b      	str	r3, [r7, #112]	; 0x70
 800794a:	463b      	mov	r3, r7
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	011a      	lsls	r2, r3, #4
 8007952:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007954:	4413      	add	r3, r2
 8007956:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800795a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800795c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007960:	b29a      	uxth	r2, r3
 8007962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007964:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007966:	463b      	mov	r3, r7
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	895b      	ldrh	r3, [r3, #10]
 800796c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007970:	463b      	mov	r3, r7
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6959      	ldr	r1, [r3, #20]
 8007976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800797a:	b29b      	uxth	r3, r3
 800797c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007980:	1d38      	adds	r0, r7, #4
 8007982:	6800      	ldr	r0, [r0, #0]
 8007984:	f000 fe0c 	bl	80085a0 <USB_WritePMA>
 8007988:	e0a9      	b.n	8007ade <USB_EPStartXfer+0xa52>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800798a:	463b      	mov	r3, r7
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	785b      	ldrb	r3, [r3, #1]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d16e      	bne.n	8007a72 <USB_EPStartXfer+0x9e6>
 8007994:	1d3b      	adds	r3, r7, #4
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	67fb      	str	r3, [r7, #124]	; 0x7c
 800799a:	1d3b      	adds	r3, r7, #4
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	461a      	mov	r2, r3
 80079a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079a8:	4413      	add	r3, r2
 80079aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80079ac:	463b      	mov	r3, r7
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	011a      	lsls	r2, r3, #4
 80079b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079b6:	4413      	add	r3, r2
 80079b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80079bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80079be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079c0:	881b      	ldrh	r3, [r3, #0]
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079c8:	b29a      	uxth	r2, r3
 80079ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079cc:	801a      	strh	r2, [r3, #0]
 80079ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079d2:	2b3e      	cmp	r3, #62	; 0x3e
 80079d4:	d921      	bls.n	8007a1a <USB_EPStartXfer+0x98e>
 80079d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079da:	095b      	lsrs	r3, r3, #5
 80079dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80079e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079e4:	f003 031f 	and.w	r3, r3, #31
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d104      	bne.n	80079f6 <USB_EPStartXfer+0x96a>
 80079ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80079f0:	3b01      	subs	r3, #1
 80079f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80079f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079f8:	881b      	ldrh	r3, [r3, #0]
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	029b      	lsls	r3, r3, #10
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	4313      	orrs	r3, r2
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a16:	801a      	strh	r2, [r3, #0]
 8007a18:	e050      	b.n	8007abc <USB_EPStartXfer+0xa30>
 8007a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10a      	bne.n	8007a38 <USB_EPStartXfer+0x9ac>
 8007a22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a24:	881b      	ldrh	r3, [r3, #0]
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a34:	801a      	strh	r2, [r3, #0]
 8007a36:	e041      	b.n	8007abc <USB_EPStartXfer+0xa30>
 8007a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a3c:	085b      	lsrs	r3, r3, #1
 8007a3e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a46:	f003 0301 	and.w	r3, r3, #1
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d004      	beq.n	8007a58 <USB_EPStartXfer+0x9cc>
 8007a4e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a52:	3301      	adds	r3, #1
 8007a54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007a58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a5a:	881b      	ldrh	r3, [r3, #0]
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	029b      	lsls	r3, r3, #10
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a6e:	801a      	strh	r2, [r3, #0]
 8007a70:	e024      	b.n	8007abc <USB_EPStartXfer+0xa30>
 8007a72:	463b      	mov	r3, r7
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	785b      	ldrb	r3, [r3, #1]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d11f      	bne.n	8007abc <USB_EPStartXfer+0xa30>
 8007a7c:	1d3b      	adds	r3, r7, #4
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a84:	1d3b      	adds	r3, r7, #4
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	461a      	mov	r2, r3
 8007a90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a94:	4413      	add	r3, r2
 8007a96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a9a:	463b      	mov	r3, r7
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	011a      	lsls	r2, r3, #4
 8007aa2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007aa6:	4413      	add	r3, r2
 8007aa8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007aac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007aba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007abc:	463b      	mov	r3, r7
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	891b      	ldrh	r3, [r3, #8]
 8007ac2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ac6:	463b      	mov	r3, r7
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	6959      	ldr	r1, [r3, #20]
 8007acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007ad6:	1d38      	adds	r0, r7, #4
 8007ad8:	6800      	ldr	r0, [r0, #0]
 8007ada:	f000 fd61 	bl	80085a0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007ade:	1d3b      	adds	r3, r7, #4
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	463b      	mov	r3, r7
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4413      	add	r3, r2
 8007aec:	881b      	ldrh	r3, [r3, #0]
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007af8:	817b      	strh	r3, [r7, #10]
 8007afa:	897b      	ldrh	r3, [r7, #10]
 8007afc:	f083 0310 	eor.w	r3, r3, #16
 8007b00:	817b      	strh	r3, [r7, #10]
 8007b02:	897b      	ldrh	r3, [r7, #10]
 8007b04:	f083 0320 	eor.w	r3, r3, #32
 8007b08:	817b      	strh	r3, [r7, #10]
 8007b0a:	1d3b      	adds	r3, r7, #4
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	463b      	mov	r3, r7
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	441a      	add	r2, r3
 8007b18:	897b      	ldrh	r3, [r7, #10]
 8007b1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	8013      	strh	r3, [r2, #0]
 8007b2e:	e3f3      	b.n	8008318 <USB_EPStartXfer+0x128c>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007b30:	463b      	mov	r3, r7
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	7b1b      	ldrb	r3, [r3, #12]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f040 809c 	bne.w	8007c74 <USB_EPStartXfer+0xbe8>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007b3c:	463b      	mov	r3, r7
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	699a      	ldr	r2, [r3, #24]
 8007b42:	463b      	mov	r3, r7
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d90e      	bls.n	8007b6a <USB_EPStartXfer+0xade>
      {
        len = ep->maxpacket;
 8007b4c:	463b      	mov	r3, r7
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007b56:	463b      	mov	r3, r7
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	699a      	ldr	r2, [r3, #24]
 8007b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b60:	1ad2      	subs	r2, r2, r3
 8007b62:	463b      	mov	r3, r7
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	619a      	str	r2, [r3, #24]
 8007b68:	e008      	b.n	8007b7c <USB_EPStartXfer+0xaf0>
      }
      else
      {
        len = ep->xfer_len;
 8007b6a:	463b      	mov	r3, r7
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	699b      	ldr	r3, [r3, #24]
 8007b70:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007b74:	463b      	mov	r3, r7
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007b7c:	1d3b      	adds	r3, r7, #4
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007b84:	1d3b      	adds	r3, r7, #4
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	461a      	mov	r2, r3
 8007b90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007b94:	4413      	add	r3, r2
 8007b96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007b9a:	463b      	mov	r3, r7
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	011a      	lsls	r2, r3, #4
 8007ba2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007bac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007bb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bb4:	881b      	ldrh	r3, [r3, #0]
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bc2:	801a      	strh	r2, [r3, #0]
 8007bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bc8:	2b3e      	cmp	r3, #62	; 0x3e
 8007bca:	d923      	bls.n	8007c14 <USB_EPStartXfer+0xb88>
 8007bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bd0:	095b      	lsrs	r3, r3, #5
 8007bd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bda:	f003 031f 	and.w	r3, r3, #31
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d104      	bne.n	8007bec <USB_EPStartXfer+0xb60>
 8007be2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007be6:	3b01      	subs	r3, #1
 8007be8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007bec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bf0:	881b      	ldrh	r3, [r3, #0]
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	029b      	lsls	r3, r3, #10
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c0a:	b29a      	uxth	r2, r3
 8007c0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c10:	801a      	strh	r2, [r3, #0]
 8007c12:	e353      	b.n	80082bc <USB_EPStartXfer+0x1230>
 8007c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10c      	bne.n	8007c36 <USB_EPStartXfer+0xbaa>
 8007c1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c20:	881b      	ldrh	r3, [r3, #0]
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c2c:	b29a      	uxth	r2, r3
 8007c2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c32:	801a      	strh	r2, [r3, #0]
 8007c34:	e342      	b.n	80082bc <USB_EPStartXfer+0x1230>
 8007c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c3a:	085b      	lsrs	r3, r3, #1
 8007c3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c44:	f003 0301 	and.w	r3, r3, #1
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d004      	beq.n	8007c56 <USB_EPStartXfer+0xbca>
 8007c4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c50:	3301      	adds	r3, #1
 8007c52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c5a:	881b      	ldrh	r3, [r3, #0]
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	029b      	lsls	r3, r3, #10
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	b29a      	uxth	r2, r3
 8007c6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c70:	801a      	strh	r2, [r3, #0]
 8007c72:	e323      	b.n	80082bc <USB_EPStartXfer+0x1230>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007c74:	463b      	mov	r3, r7
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	78db      	ldrb	r3, [r3, #3]
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	f040 81a9 	bne.w	8007fd2 <USB_EPStartXfer+0xf46>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007c80:	463b      	mov	r3, r7
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	785b      	ldrb	r3, [r3, #1]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f040 8082 	bne.w	8007d90 <USB_EPStartXfer+0xd04>
 8007c8c:	1d3b      	adds	r3, r7, #4
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007c94:	1d3b      	adds	r3, r7, #4
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007caa:	463b      	mov	r3, r7
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	011a      	lsls	r2, r3, #4
 8007cb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007cb6:	4413      	add	r3, r2
 8007cb8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007cbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007cc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007cc4:	881b      	ldrh	r3, [r3, #0]
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007cd2:	801a      	strh	r2, [r3, #0]
 8007cd4:	463b      	mov	r3, r7
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	2b3e      	cmp	r3, #62	; 0x3e
 8007cdc:	d925      	bls.n	8007d2a <USB_EPStartXfer+0xc9e>
 8007cde:	463b      	mov	r3, r7
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	095b      	lsrs	r3, r3, #5
 8007ce6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007cea:	463b      	mov	r3, r7
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	f003 031f 	and.w	r3, r3, #31
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d104      	bne.n	8007d02 <USB_EPStartXfer+0xc76>
 8007cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d06:	881b      	ldrh	r3, [r3, #0]
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	029b      	lsls	r3, r3, #10
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	4313      	orrs	r3, r2
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d26:	801a      	strh	r2, [r3, #0]
 8007d28:	e058      	b.n	8007ddc <USB_EPStartXfer+0xd50>
 8007d2a:	463b      	mov	r3, r7
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10c      	bne.n	8007d4e <USB_EPStartXfer+0xcc2>
 8007d34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d38:	881b      	ldrh	r3, [r3, #0]
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d4a:	801a      	strh	r2, [r3, #0]
 8007d4c:	e046      	b.n	8007ddc <USB_EPStartXfer+0xd50>
 8007d4e:	463b      	mov	r3, r7
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	085b      	lsrs	r3, r3, #1
 8007d56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d5a:	463b      	mov	r3, r7
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	f003 0301 	and.w	r3, r3, #1
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d004      	beq.n	8007d72 <USB_EPStartXfer+0xce6>
 8007d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d76:	881b      	ldrh	r3, [r3, #0]
 8007d78:	b29a      	uxth	r2, r3
 8007d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	029b      	lsls	r3, r3, #10
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	4313      	orrs	r3, r2
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d8c:	801a      	strh	r2, [r3, #0]
 8007d8e:	e025      	b.n	8007ddc <USB_EPStartXfer+0xd50>
 8007d90:	463b      	mov	r3, r7
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	785b      	ldrb	r3, [r3, #1]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d120      	bne.n	8007ddc <USB_EPStartXfer+0xd50>
 8007d9a:	1d3b      	adds	r3, r7, #4
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007da2:	1d3b      	adds	r3, r7, #4
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	461a      	mov	r2, r3
 8007dae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007db2:	4413      	add	r3, r2
 8007db4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007db8:	463b      	mov	r3, r7
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	011a      	lsls	r2, r3, #4
 8007dc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007dc4:	4413      	add	r3, r2
 8007dc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007dca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007dce:	463b      	mov	r3, r7
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	b29a      	uxth	r2, r3
 8007dd6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007dda:	801a      	strh	r2, [r3, #0]
 8007ddc:	1d3b      	adds	r3, r7, #4
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007de4:	463b      	mov	r3, r7
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	785b      	ldrb	r3, [r3, #1]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	f040 8082 	bne.w	8007ef4 <USB_EPStartXfer+0xe68>
 8007df0:	1d3b      	adds	r3, r7, #4
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007df8:	1d3b      	adds	r3, r7, #4
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	461a      	mov	r2, r3
 8007e04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e08:	4413      	add	r3, r2
 8007e0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e0e:	463b      	mov	r3, r7
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	011a      	lsls	r2, r3, #4
 8007e16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e1a:	4413      	add	r3, r2
 8007e1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e28:	881b      	ldrh	r3, [r3, #0]
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e30:	b29a      	uxth	r2, r3
 8007e32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e36:	801a      	strh	r2, [r3, #0]
 8007e38:	463b      	mov	r3, r7
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	2b3e      	cmp	r3, #62	; 0x3e
 8007e40:	d925      	bls.n	8007e8e <USB_EPStartXfer+0xe02>
 8007e42:	463b      	mov	r3, r7
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	095b      	lsrs	r3, r3, #5
 8007e4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e4e:	463b      	mov	r3, r7
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	f003 031f 	and.w	r3, r3, #31
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d104      	bne.n	8007e66 <USB_EPStartXfer+0xdda>
 8007e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e60:	3b01      	subs	r3, #1
 8007e62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e6a:	881b      	ldrh	r3, [r3, #0]
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	029b      	lsls	r3, r3, #10
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e8a:	801a      	strh	r2, [r3, #0]
 8007e8c:	e054      	b.n	8007f38 <USB_EPStartXfer+0xeac>
 8007e8e:	463b      	mov	r3, r7
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d10c      	bne.n	8007eb2 <USB_EPStartXfer+0xe26>
 8007e98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e9c:	881b      	ldrh	r3, [r3, #0]
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007eae:	801a      	strh	r2, [r3, #0]
 8007eb0:	e042      	b.n	8007f38 <USB_EPStartXfer+0xeac>
 8007eb2:	463b      	mov	r3, r7
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	085b      	lsrs	r3, r3, #1
 8007eba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ebe:	463b      	mov	r3, r7
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	f003 0301 	and.w	r3, r3, #1
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d004      	beq.n	8007ed6 <USB_EPStartXfer+0xe4a>
 8007ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ed6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007eda:	881b      	ldrh	r3, [r3, #0]
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	029b      	lsls	r3, r3, #10
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ef0:	801a      	strh	r2, [r3, #0]
 8007ef2:	e021      	b.n	8007f38 <USB_EPStartXfer+0xeac>
 8007ef4:	463b      	mov	r3, r7
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	785b      	ldrb	r3, [r3, #1]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d11c      	bne.n	8007f38 <USB_EPStartXfer+0xeac>
 8007efe:	1d3b      	adds	r3, r7, #4
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	461a      	mov	r2, r3
 8007f0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f0e:	4413      	add	r3, r2
 8007f10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007f14:	463b      	mov	r3, r7
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	011a      	lsls	r2, r3, #4
 8007f1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f20:	4413      	add	r3, r2
 8007f22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007f2a:	463b      	mov	r3, r7
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f36:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007f38:	463b      	mov	r3, r7
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	69db      	ldr	r3, [r3, #28]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	f000 81bc 	beq.w	80082bc <USB_EPStartXfer+0x1230>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007f44:	1d3b      	adds	r3, r7, #4
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	463b      	mov	r3, r7
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4413      	add	r3, r2
 8007f52:	881b      	ldrh	r3, [r3, #0]
 8007f54:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007f58:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007f5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d005      	beq.n	8007f70 <USB_EPStartXfer+0xee4>
 8007f64:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d10d      	bne.n	8007f8c <USB_EPStartXfer+0xf00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007f70:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f040 819f 	bne.w	80082bc <USB_EPStartXfer+0x1230>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007f7e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f040 8198 	bne.w	80082bc <USB_EPStartXfer+0x1230>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007f8c:	1d3b      	adds	r3, r7, #4
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	463b      	mov	r3, r7
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4413      	add	r3, r2
 8007f9a:	881b      	ldrh	r3, [r3, #0]
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fa6:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007faa:	1d3b      	adds	r3, r7, #4
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	463b      	mov	r3, r7
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	441a      	add	r2, r3
 8007fb8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007fbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fc8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	8013      	strh	r3, [r2, #0]
 8007fd0:	e174      	b.n	80082bc <USB_EPStartXfer+0x1230>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007fd2:	463b      	mov	r3, r7
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	78db      	ldrb	r3, [r3, #3]
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	f040 816d 	bne.w	80082b8 <USB_EPStartXfer+0x122c>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007fde:	463b      	mov	r3, r7
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	699a      	ldr	r2, [r3, #24]
 8007fe4:	463b      	mov	r3, r7
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d90e      	bls.n	800800c <USB_EPStartXfer+0xf80>
        {
          len = ep->maxpacket;
 8007fee:	463b      	mov	r3, r7
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007ff8:	463b      	mov	r3, r7
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	699a      	ldr	r2, [r3, #24]
 8007ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008002:	1ad2      	subs	r2, r2, r3
 8008004:	463b      	mov	r3, r7
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	619a      	str	r2, [r3, #24]
 800800a:	e008      	b.n	800801e <USB_EPStartXfer+0xf92>
        }
        else
        {
          len = ep->xfer_len;
 800800c:	463b      	mov	r3, r7
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	699b      	ldr	r3, [r3, #24]
 8008012:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8008016:	463b      	mov	r3, r7
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2200      	movs	r2, #0
 800801c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800801e:	463b      	mov	r3, r7
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	785b      	ldrb	r3, [r3, #1]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d17b      	bne.n	8008120 <USB_EPStartXfer+0x1094>
 8008028:	1d3b      	adds	r3, r7, #4
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008030:	1d3b      	adds	r3, r7, #4
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008038:	b29b      	uxth	r3, r3
 800803a:	461a      	mov	r2, r3
 800803c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008040:	4413      	add	r3, r2
 8008042:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008046:	463b      	mov	r3, r7
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	011a      	lsls	r2, r3, #4
 800804e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008052:	4413      	add	r3, r2
 8008054:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008058:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800805c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008060:	881b      	ldrh	r3, [r3, #0]
 8008062:	b29b      	uxth	r3, r3
 8008064:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008068:	b29a      	uxth	r2, r3
 800806a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800806e:	801a      	strh	r2, [r3, #0]
 8008070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008074:	2b3e      	cmp	r3, #62	; 0x3e
 8008076:	d923      	bls.n	80080c0 <USB_EPStartXfer+0x1034>
 8008078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800807c:	095b      	lsrs	r3, r3, #5
 800807e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008082:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008086:	f003 031f 	and.w	r3, r3, #31
 800808a:	2b00      	cmp	r3, #0
 800808c:	d104      	bne.n	8008098 <USB_EPStartXfer+0x100c>
 800808e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008092:	3b01      	subs	r3, #1
 8008094:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008098:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800809c:	881b      	ldrh	r3, [r3, #0]
 800809e:	b29a      	uxth	r2, r3
 80080a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	029b      	lsls	r3, r3, #10
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	4313      	orrs	r3, r2
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080bc:	801a      	strh	r2, [r3, #0]
 80080be:	e054      	b.n	800816a <USB_EPStartXfer+0x10de>
 80080c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d10c      	bne.n	80080e2 <USB_EPStartXfer+0x1056>
 80080c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080cc:	881b      	ldrh	r3, [r3, #0]
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080d8:	b29a      	uxth	r2, r3
 80080da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080de:	801a      	strh	r2, [r3, #0]
 80080e0:	e043      	b.n	800816a <USB_EPStartXfer+0x10de>
 80080e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080e6:	085b      	lsrs	r3, r3, #1
 80080e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80080ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080f0:	f003 0301 	and.w	r3, r3, #1
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d004      	beq.n	8008102 <USB_EPStartXfer+0x1076>
 80080f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080fc:	3301      	adds	r3, #1
 80080fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008102:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008106:	881b      	ldrh	r3, [r3, #0]
 8008108:	b29a      	uxth	r2, r3
 800810a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800810e:	b29b      	uxth	r3, r3
 8008110:	029b      	lsls	r3, r3, #10
 8008112:	b29b      	uxth	r3, r3
 8008114:	4313      	orrs	r3, r2
 8008116:	b29a      	uxth	r2, r3
 8008118:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800811c:	801a      	strh	r2, [r3, #0]
 800811e:	e024      	b.n	800816a <USB_EPStartXfer+0x10de>
 8008120:	463b      	mov	r3, r7
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	785b      	ldrb	r3, [r3, #1]
 8008126:	2b01      	cmp	r3, #1
 8008128:	d11f      	bne.n	800816a <USB_EPStartXfer+0x10de>
 800812a:	1d3b      	adds	r3, r7, #4
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008132:	1d3b      	adds	r3, r7, #4
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800813a:	b29b      	uxth	r3, r3
 800813c:	461a      	mov	r2, r3
 800813e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008142:	4413      	add	r3, r2
 8008144:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008148:	463b      	mov	r3, r7
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	011a      	lsls	r2, r3, #4
 8008150:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008154:	4413      	add	r3, r2
 8008156:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800815a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800815e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008162:	b29a      	uxth	r2, r3
 8008164:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008168:	801a      	strh	r2, [r3, #0]
 800816a:	1d3b      	adds	r3, r7, #4
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008172:	463b      	mov	r3, r7
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	785b      	ldrb	r3, [r3, #1]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d17b      	bne.n	8008274 <USB_EPStartXfer+0x11e8>
 800817c:	1d3b      	adds	r3, r7, #4
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008184:	1d3b      	adds	r3, r7, #4
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800818c:	b29b      	uxth	r3, r3
 800818e:	461a      	mov	r2, r3
 8008190:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008194:	4413      	add	r3, r2
 8008196:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800819a:	463b      	mov	r3, r7
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	011a      	lsls	r2, r3, #4
 80081a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80081a6:	4413      	add	r3, r2
 80081a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80081ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80081b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081b4:	881b      	ldrh	r3, [r3, #0]
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081bc:	b29a      	uxth	r2, r3
 80081be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081c2:	801a      	strh	r2, [r3, #0]
 80081c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081c8:	2b3e      	cmp	r3, #62	; 0x3e
 80081ca:	d923      	bls.n	8008214 <USB_EPStartXfer+0x1188>
 80081cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081d0:	095b      	lsrs	r3, r3, #5
 80081d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081da:	f003 031f 	and.w	r3, r3, #31
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d104      	bne.n	80081ec <USB_EPStartXfer+0x1160>
 80081e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081e6:	3b01      	subs	r3, #1
 80081e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081f0:	881b      	ldrh	r3, [r3, #0]
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	029b      	lsls	r3, r3, #10
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	4313      	orrs	r3, r2
 8008200:	b29b      	uxth	r3, r3
 8008202:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008206:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800820a:	b29a      	uxth	r2, r3
 800820c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008210:	801a      	strh	r2, [r3, #0]
 8008212:	e053      	b.n	80082bc <USB_EPStartXfer+0x1230>
 8008214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008218:	2b00      	cmp	r3, #0
 800821a:	d10c      	bne.n	8008236 <USB_EPStartXfer+0x11aa>
 800821c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008220:	881b      	ldrh	r3, [r3, #0]
 8008222:	b29b      	uxth	r3, r3
 8008224:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008228:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800822c:	b29a      	uxth	r2, r3
 800822e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008232:	801a      	strh	r2, [r3, #0]
 8008234:	e042      	b.n	80082bc <USB_EPStartXfer+0x1230>
 8008236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800823a:	085b      	lsrs	r3, r3, #1
 800823c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008244:	f003 0301 	and.w	r3, r3, #1
 8008248:	2b00      	cmp	r3, #0
 800824a:	d004      	beq.n	8008256 <USB_EPStartXfer+0x11ca>
 800824c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008250:	3301      	adds	r3, #1
 8008252:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008256:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800825a:	881b      	ldrh	r3, [r3, #0]
 800825c:	b29a      	uxth	r2, r3
 800825e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008262:	b29b      	uxth	r3, r3
 8008264:	029b      	lsls	r3, r3, #10
 8008266:	b29b      	uxth	r3, r3
 8008268:	4313      	orrs	r3, r2
 800826a:	b29a      	uxth	r2, r3
 800826c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008270:	801a      	strh	r2, [r3, #0]
 8008272:	e023      	b.n	80082bc <USB_EPStartXfer+0x1230>
 8008274:	463b      	mov	r3, r7
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	785b      	ldrb	r3, [r3, #1]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d11e      	bne.n	80082bc <USB_EPStartXfer+0x1230>
 800827e:	1d3b      	adds	r3, r7, #4
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008286:	b29b      	uxth	r3, r3
 8008288:	461a      	mov	r2, r3
 800828a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800828e:	4413      	add	r3, r2
 8008290:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008294:	463b      	mov	r3, r7
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	011a      	lsls	r2, r3, #4
 800829c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80082a0:	4413      	add	r3, r2
 80082a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80082a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082ae:	b29a      	uxth	r2, r3
 80082b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80082b4:	801a      	strh	r2, [r3, #0]
 80082b6:	e001      	b.n	80082bc <USB_EPStartXfer+0x1230>
      }
      else
      {
        return HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	e02e      	b.n	800831a <USB_EPStartXfer+0x128e>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80082bc:	1d3b      	adds	r3, r7, #4
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	463b      	mov	r3, r7
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	4413      	add	r3, r2
 80082ca:	881b      	ldrh	r3, [r3, #0]
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082d6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80082da:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80082de:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80082e2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80082e6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80082ea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80082ee:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80082f2:	1d3b      	adds	r3, r7, #4
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	463b      	mov	r3, r7
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	441a      	add	r2, r3
 8008300:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008304:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008308:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800830c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008314:	b29b      	uxth	r3, r3
 8008316:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008324:	b480      	push	{r7}
 8008326:	b085      	sub	sp, #20
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	785b      	ldrb	r3, [r3, #1]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d020      	beq.n	8008378 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	4413      	add	r3, r2
 8008340:	881b      	ldrh	r3, [r3, #0]
 8008342:	b29b      	uxth	r3, r3
 8008344:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008348:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800834c:	81bb      	strh	r3, [r7, #12]
 800834e:	89bb      	ldrh	r3, [r7, #12]
 8008350:	f083 0310 	eor.w	r3, r3, #16
 8008354:	81bb      	strh	r3, [r7, #12]
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	441a      	add	r2, r3
 8008360:	89bb      	ldrh	r3, [r7, #12]
 8008362:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008366:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800836a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800836e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008372:	b29b      	uxth	r3, r3
 8008374:	8013      	strh	r3, [r2, #0]
 8008376:	e01f      	b.n	80083b8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	4413      	add	r3, r2
 8008382:	881b      	ldrh	r3, [r3, #0]
 8008384:	b29b      	uxth	r3, r3
 8008386:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800838a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800838e:	81fb      	strh	r3, [r7, #14]
 8008390:	89fb      	ldrh	r3, [r7, #14]
 8008392:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008396:	81fb      	strh	r3, [r7, #14]
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	441a      	add	r2, r3
 80083a2:	89fb      	ldrh	r3, [r7, #14]
 80083a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3714      	adds	r7, #20
 80083be:	46bd      	mov	sp, r7
 80083c0:	bc80      	pop	{r7}
 80083c2:	4770      	bx	lr

080083c4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b087      	sub	sp, #28
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	7b1b      	ldrb	r3, [r3, #12]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	f040 809d 	bne.w	8008512 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	785b      	ldrb	r3, [r3, #1]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d04c      	beq.n	800847a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	4413      	add	r3, r2
 80083ea:	881b      	ldrh	r3, [r3, #0]
 80083ec:	823b      	strh	r3, [r7, #16]
 80083ee:	8a3b      	ldrh	r3, [r7, #16]
 80083f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d01b      	beq.n	8008430 <USB_EPClearStall+0x6c>
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	4413      	add	r3, r2
 8008402:	881b      	ldrh	r3, [r3, #0]
 8008404:	b29b      	uxth	r3, r3
 8008406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800840a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800840e:	81fb      	strh	r3, [r7, #14]
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	441a      	add	r2, r3
 800841a:	89fb      	ldrh	r3, [r7, #14]
 800841c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008420:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008424:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008428:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800842c:	b29b      	uxth	r3, r3
 800842e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	78db      	ldrb	r3, [r3, #3]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d06c      	beq.n	8008512 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4413      	add	r3, r2
 8008442:	881b      	ldrh	r3, [r3, #0]
 8008444:	b29b      	uxth	r3, r3
 8008446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800844a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800844e:	81bb      	strh	r3, [r7, #12]
 8008450:	89bb      	ldrh	r3, [r7, #12]
 8008452:	f083 0320 	eor.w	r3, r3, #32
 8008456:	81bb      	strh	r3, [r7, #12]
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	441a      	add	r2, r3
 8008462:	89bb      	ldrh	r3, [r7, #12]
 8008464:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008468:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800846c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008474:	b29b      	uxth	r3, r3
 8008476:	8013      	strh	r3, [r2, #0]
 8008478:	e04b      	b.n	8008512 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	4413      	add	r3, r2
 8008484:	881b      	ldrh	r3, [r3, #0]
 8008486:	82fb      	strh	r3, [r7, #22]
 8008488:	8afb      	ldrh	r3, [r7, #22]
 800848a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800848e:	2b00      	cmp	r3, #0
 8008490:	d01b      	beq.n	80084ca <USB_EPClearStall+0x106>
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4413      	add	r3, r2
 800849c:	881b      	ldrh	r3, [r3, #0]
 800849e:	b29b      	uxth	r3, r3
 80084a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084a8:	82bb      	strh	r3, [r7, #20]
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	441a      	add	r2, r3
 80084b4:	8abb      	ldrh	r3, [r7, #20]
 80084b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80084c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	4413      	add	r3, r2
 80084d4:	881b      	ldrh	r3, [r3, #0]
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084e0:	827b      	strh	r3, [r7, #18]
 80084e2:	8a7b      	ldrh	r3, [r7, #18]
 80084e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80084e8:	827b      	strh	r3, [r7, #18]
 80084ea:	8a7b      	ldrh	r3, [r7, #18]
 80084ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80084f0:	827b      	strh	r3, [r7, #18]
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	441a      	add	r2, r3
 80084fc:	8a7b      	ldrh	r3, [r7, #18]
 80084fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008502:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800850a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800850e:	b29b      	uxth	r3, r3
 8008510:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008512:	2300      	movs	r3, #0
}
 8008514:	4618      	mov	r0, r3
 8008516:	371c      	adds	r7, #28
 8008518:	46bd      	mov	sp, r7
 800851a:	bc80      	pop	{r7}
 800851c:	4770      	bx	lr

0800851e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800851e:	b480      	push	{r7}
 8008520:	b083      	sub	sp, #12
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
 8008526:	460b      	mov	r3, r1
 8008528:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800852a:	78fb      	ldrb	r3, [r7, #3]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d103      	bne.n	8008538 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2280      	movs	r2, #128	; 0x80
 8008534:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	370c      	adds	r7, #12
 800853e:	46bd      	mov	sp, r7
 8008540:	bc80      	pop	{r7}
 8008542:	4770      	bx	lr

08008544 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	370c      	adds	r7, #12
 8008552:	46bd      	mov	sp, r7
 8008554:	bc80      	pop	{r7}
 8008556:	4770      	bx	lr

08008558 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	370c      	adds	r7, #12
 8008566:	46bd      	mov	sp, r7
 8008568:	bc80      	pop	{r7}
 800856a:	4770      	bx	lr

0800856c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800856c:	b480      	push	{r7}
 800856e:	b085      	sub	sp, #20
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800857a:	b29b      	uxth	r3, r3
 800857c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800857e:	68fb      	ldr	r3, [r7, #12]
}
 8008580:	4618      	mov	r0, r3
 8008582:	3714      	adds	r7, #20
 8008584:	46bd      	mov	sp, r7
 8008586:	bc80      	pop	{r7}
 8008588:	4770      	bx	lr

0800858a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800858a:	b480      	push	{r7}
 800858c:	b083      	sub	sp, #12
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
 8008592:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	370c      	adds	r7, #12
 800859a:	46bd      	mov	sp, r7
 800859c:	bc80      	pop	{r7}
 800859e:	4770      	bx	lr

080085a0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b08b      	sub	sp, #44	; 0x2c
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	4611      	mov	r1, r2
 80085ac:	461a      	mov	r2, r3
 80085ae:	460b      	mov	r3, r1
 80085b0:	80fb      	strh	r3, [r7, #6]
 80085b2:	4613      	mov	r3, r2
 80085b4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80085b6:	88bb      	ldrh	r3, [r7, #4]
 80085b8:	3301      	adds	r3, #1
 80085ba:	085b      	lsrs	r3, r3, #1
 80085bc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80085c6:	88fb      	ldrh	r3, [r7, #6]
 80085c8:	005a      	lsls	r2, r3, #1
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	4413      	add	r3, r2
 80085ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085d2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80085d4:	69bb      	ldr	r3, [r7, #24]
 80085d6:	627b      	str	r3, [r7, #36]	; 0x24
 80085d8:	e01e      	b.n	8008618 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	3301      	adds	r3, #1
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	021b      	lsls	r3, r3, #8
 80085e8:	b21a      	sxth	r2, r3
 80085ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80085ee:	4313      	orrs	r3, r2
 80085f0:	b21b      	sxth	r3, r3
 80085f2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80085f4:	6a3b      	ldr	r3, [r7, #32]
 80085f6:	8a7a      	ldrh	r2, [r7, #18]
 80085f8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80085fa:	6a3b      	ldr	r3, [r7, #32]
 80085fc:	3302      	adds	r3, #2
 80085fe:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008600:	6a3b      	ldr	r3, [r7, #32]
 8008602:	3302      	adds	r3, #2
 8008604:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	3301      	adds	r3, #1
 800860a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	3301      	adds	r3, #1
 8008610:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008614:	3b01      	subs	r3, #1
 8008616:	627b      	str	r3, [r7, #36]	; 0x24
 8008618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861a:	2b00      	cmp	r3, #0
 800861c:	d1dd      	bne.n	80085da <USB_WritePMA+0x3a>
  }
}
 800861e:	bf00      	nop
 8008620:	bf00      	nop
 8008622:	372c      	adds	r7, #44	; 0x2c
 8008624:	46bd      	mov	sp, r7
 8008626:	bc80      	pop	{r7}
 8008628:	4770      	bx	lr

0800862a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800862a:	b480      	push	{r7}
 800862c:	b08b      	sub	sp, #44	; 0x2c
 800862e:	af00      	add	r7, sp, #0
 8008630:	60f8      	str	r0, [r7, #12]
 8008632:	60b9      	str	r1, [r7, #8]
 8008634:	4611      	mov	r1, r2
 8008636:	461a      	mov	r2, r3
 8008638:	460b      	mov	r3, r1
 800863a:	80fb      	strh	r3, [r7, #6]
 800863c:	4613      	mov	r3, r2
 800863e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008640:	88bb      	ldrh	r3, [r7, #4]
 8008642:	085b      	lsrs	r3, r3, #1
 8008644:	b29b      	uxth	r3, r3
 8008646:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008650:	88fb      	ldrh	r3, [r7, #6]
 8008652:	005a      	lsls	r2, r3, #1
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	4413      	add	r3, r2
 8008658:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800865c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	627b      	str	r3, [r7, #36]	; 0x24
 8008662:	e01b      	b.n	800869c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008664:	6a3b      	ldr	r3, [r7, #32]
 8008666:	881b      	ldrh	r3, [r3, #0]
 8008668:	b29b      	uxth	r3, r3
 800866a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800866c:	6a3b      	ldr	r3, [r7, #32]
 800866e:	3302      	adds	r3, #2
 8008670:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	b2da      	uxtb	r2, r3
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	3301      	adds	r3, #1
 800867e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	0a1b      	lsrs	r3, r3, #8
 8008684:	b2da      	uxtb	r2, r3
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	3301      	adds	r3, #1
 800868e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008690:	6a3b      	ldr	r3, [r7, #32]
 8008692:	3302      	adds	r3, #2
 8008694:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008698:	3b01      	subs	r3, #1
 800869a:	627b      	str	r3, [r7, #36]	; 0x24
 800869c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1e0      	bne.n	8008664 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80086a2:	88bb      	ldrh	r3, [r7, #4]
 80086a4:	f003 0301 	and.w	r3, r3, #1
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d007      	beq.n	80086be <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80086ae:	6a3b      	ldr	r3, [r7, #32]
 80086b0:	881b      	ldrh	r3, [r3, #0]
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	b2da      	uxtb	r2, r3
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	701a      	strb	r2, [r3, #0]
  }
}
 80086be:	bf00      	nop
 80086c0:	372c      	adds	r7, #44	; 0x2c
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bc80      	pop	{r7}
 80086c6:	4770      	bx	lr

080086c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	460b      	mov	r3, r1
 80086d2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80086d4:	2300      	movs	r3, #0
 80086d6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	7c1b      	ldrb	r3, [r3, #16]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d115      	bne.n	800870c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80086e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086e4:	2202      	movs	r2, #2
 80086e6:	2181      	movs	r1, #129	; 0x81
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f001 fe30 	bl	800a34e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2201      	movs	r2, #1
 80086f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80086f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086f8:	2202      	movs	r2, #2
 80086fa:	2101      	movs	r1, #1
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f001 fe26 	bl	800a34e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2201      	movs	r2, #1
 8008706:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800870a:	e012      	b.n	8008732 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800870c:	2340      	movs	r3, #64	; 0x40
 800870e:	2202      	movs	r2, #2
 8008710:	2181      	movs	r1, #129	; 0x81
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f001 fe1b 	bl	800a34e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800871e:	2340      	movs	r3, #64	; 0x40
 8008720:	2202      	movs	r2, #2
 8008722:	2101      	movs	r1, #1
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f001 fe12 	bl	800a34e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2201      	movs	r2, #1
 800872e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008732:	2308      	movs	r3, #8
 8008734:	2203      	movs	r2, #3
 8008736:	2182      	movs	r1, #130	; 0x82
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f001 fe08 	bl	800a34e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2201      	movs	r2, #1
 8008742:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008744:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008748:	f001 ff28 	bl	800a59c <USBD_static_malloc>
 800874c:	4602      	mov	r2, r0
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800875a:	2b00      	cmp	r3, #0
 800875c:	d102      	bne.n	8008764 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800875e:	2301      	movs	r3, #1
 8008760:	73fb      	strb	r3, [r7, #15]
 8008762:	e026      	b.n	80087b2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800876a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	2200      	movs	r2, #0
 800877a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	2200      	movs	r2, #0
 8008782:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	7c1b      	ldrb	r3, [r3, #16]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d109      	bne.n	80087a2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008794:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008798:	2101      	movs	r1, #1
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f001 fec7 	bl	800a52e <USBD_LL_PrepareReceive>
 80087a0:	e007      	b.n	80087b2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80087a8:	2340      	movs	r3, #64	; 0x40
 80087aa:	2101      	movs	r1, #1
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f001 febe 	bl	800a52e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80087b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3710      	adds	r7, #16
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	460b      	mov	r3, r1
 80087c6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80087c8:	2300      	movs	r3, #0
 80087ca:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80087cc:	2181      	movs	r1, #129	; 0x81
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f001 fde3 	bl	800a39a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80087da:	2101      	movs	r1, #1
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f001 fddc 	bl	800a39a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80087ea:	2182      	movs	r1, #130	; 0x82
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f001 fdd4 	bl	800a39a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00e      	beq.n	8008820 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008812:	4618      	mov	r0, r3
 8008814:	f001 fece 	bl	800a5b4 <USBD_static_free>
    pdev->pClassData = NULL;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008820:	7bfb      	ldrb	r3, [r7, #15]
}
 8008822:	4618      	mov	r0, r3
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b086      	sub	sp, #24
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
 8008832:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800883a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800883c:	2300      	movs	r3, #0
 800883e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008840:	2300      	movs	r3, #0
 8008842:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008844:	2300      	movs	r3, #0
 8008846:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008850:	2b00      	cmp	r3, #0
 8008852:	d039      	beq.n	80088c8 <USBD_CDC_Setup+0x9e>
 8008854:	2b20      	cmp	r3, #32
 8008856:	d17f      	bne.n	8008958 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	88db      	ldrh	r3, [r3, #6]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d029      	beq.n	80088b4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	b25b      	sxtb	r3, r3
 8008866:	2b00      	cmp	r3, #0
 8008868:	da11      	bge.n	800888e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	683a      	ldr	r2, [r7, #0]
 8008874:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008876:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008878:	683a      	ldr	r2, [r7, #0]
 800887a:	88d2      	ldrh	r2, [r2, #6]
 800887c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800887e:	6939      	ldr	r1, [r7, #16]
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	88db      	ldrh	r3, [r3, #6]
 8008884:	461a      	mov	r2, r3
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f001 f9d9 	bl	8009c3e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800888c:	e06b      	b.n	8008966 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	785a      	ldrb	r2, [r3, #1]
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	88db      	ldrh	r3, [r3, #6]
 800889c:	b2da      	uxtb	r2, r3
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80088a4:	6939      	ldr	r1, [r7, #16]
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	88db      	ldrh	r3, [r3, #6]
 80088aa:	461a      	mov	r2, r3
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f001 f9f4 	bl	8009c9a <USBD_CtlPrepareRx>
      break;
 80088b2:	e058      	b.n	8008966 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	683a      	ldr	r2, [r7, #0]
 80088be:	7850      	ldrb	r0, [r2, #1]
 80088c0:	2200      	movs	r2, #0
 80088c2:	6839      	ldr	r1, [r7, #0]
 80088c4:	4798      	blx	r3
      break;
 80088c6:	e04e      	b.n	8008966 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	785b      	ldrb	r3, [r3, #1]
 80088cc:	2b0b      	cmp	r3, #11
 80088ce:	d02e      	beq.n	800892e <USBD_CDC_Setup+0x104>
 80088d0:	2b0b      	cmp	r3, #11
 80088d2:	dc38      	bgt.n	8008946 <USBD_CDC_Setup+0x11c>
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d002      	beq.n	80088de <USBD_CDC_Setup+0xb4>
 80088d8:	2b0a      	cmp	r3, #10
 80088da:	d014      	beq.n	8008906 <USBD_CDC_Setup+0xdc>
 80088dc:	e033      	b.n	8008946 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088e4:	2b03      	cmp	r3, #3
 80088e6:	d107      	bne.n	80088f8 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80088e8:	f107 030c 	add.w	r3, r7, #12
 80088ec:	2202      	movs	r2, #2
 80088ee:	4619      	mov	r1, r3
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f001 f9a4 	bl	8009c3e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088f6:	e02e      	b.n	8008956 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80088f8:	6839      	ldr	r1, [r7, #0]
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f001 f935 	bl	8009b6a <USBD_CtlError>
            ret = USBD_FAIL;
 8008900:	2302      	movs	r3, #2
 8008902:	75fb      	strb	r3, [r7, #23]
          break;
 8008904:	e027      	b.n	8008956 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800890c:	2b03      	cmp	r3, #3
 800890e:	d107      	bne.n	8008920 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008910:	f107 030f 	add.w	r3, r7, #15
 8008914:	2201      	movs	r2, #1
 8008916:	4619      	mov	r1, r3
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f001 f990 	bl	8009c3e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800891e:	e01a      	b.n	8008956 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008920:	6839      	ldr	r1, [r7, #0]
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f001 f921 	bl	8009b6a <USBD_CtlError>
            ret = USBD_FAIL;
 8008928:	2302      	movs	r3, #2
 800892a:	75fb      	strb	r3, [r7, #23]
          break;
 800892c:	e013      	b.n	8008956 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008934:	2b03      	cmp	r3, #3
 8008936:	d00d      	beq.n	8008954 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008938:	6839      	ldr	r1, [r7, #0]
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f001 f915 	bl	8009b6a <USBD_CtlError>
            ret = USBD_FAIL;
 8008940:	2302      	movs	r3, #2
 8008942:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008944:	e006      	b.n	8008954 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008946:	6839      	ldr	r1, [r7, #0]
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f001 f90e 	bl	8009b6a <USBD_CtlError>
          ret = USBD_FAIL;
 800894e:	2302      	movs	r3, #2
 8008950:	75fb      	strb	r3, [r7, #23]
          break;
 8008952:	e000      	b.n	8008956 <USBD_CDC_Setup+0x12c>
          break;
 8008954:	bf00      	nop
      }
      break;
 8008956:	e006      	b.n	8008966 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008958:	6839      	ldr	r1, [r7, #0]
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f001 f905 	bl	8009b6a <USBD_CtlError>
      ret = USBD_FAIL;
 8008960:	2302      	movs	r3, #2
 8008962:	75fb      	strb	r3, [r7, #23]
      break;
 8008964:	bf00      	nop
  }

  return ret;
 8008966:	7dfb      	ldrb	r3, [r7, #23]
}
 8008968:	4618      	mov	r0, r3
 800896a:	3718      	adds	r7, #24
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	460b      	mov	r3, r1
 800897a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008982:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800898a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008992:	2b00      	cmp	r3, #0
 8008994:	d03a      	beq.n	8008a0c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008996:	78fa      	ldrb	r2, [r7, #3]
 8008998:	6879      	ldr	r1, [r7, #4]
 800899a:	4613      	mov	r3, r2
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	4413      	add	r3, r2
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	440b      	add	r3, r1
 80089a4:	331c      	adds	r3, #28
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d029      	beq.n	8008a00 <USBD_CDC_DataIn+0x90>
 80089ac:	78fa      	ldrb	r2, [r7, #3]
 80089ae:	6879      	ldr	r1, [r7, #4]
 80089b0:	4613      	mov	r3, r2
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	4413      	add	r3, r2
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	440b      	add	r3, r1
 80089ba:	331c      	adds	r3, #28
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	78f9      	ldrb	r1, [r7, #3]
 80089c0:	68b8      	ldr	r0, [r7, #8]
 80089c2:	460b      	mov	r3, r1
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	440b      	add	r3, r1
 80089c8:	00db      	lsls	r3, r3, #3
 80089ca:	4403      	add	r3, r0
 80089cc:	3320      	adds	r3, #32
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	fbb2 f1f3 	udiv	r1, r2, r3
 80089d4:	fb03 f301 	mul.w	r3, r3, r1
 80089d8:	1ad3      	subs	r3, r2, r3
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d110      	bne.n	8008a00 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80089de:	78fa      	ldrb	r2, [r7, #3]
 80089e0:	6879      	ldr	r1, [r7, #4]
 80089e2:	4613      	mov	r3, r2
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	4413      	add	r3, r2
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	440b      	add	r3, r1
 80089ec:	331c      	adds	r3, #28
 80089ee:	2200      	movs	r2, #0
 80089f0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80089f2:	78f9      	ldrb	r1, [r7, #3]
 80089f4:	2300      	movs	r3, #0
 80089f6:	2200      	movs	r2, #0
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f001 fd75 	bl	800a4e8 <USBD_LL_Transmit>
 80089fe:	e003      	b.n	8008a08 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	e000      	b.n	8008a0e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008a0c:	2302      	movs	r3, #2
  }
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3710      	adds	r7, #16
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b084      	sub	sp, #16
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
 8008a1e:	460b      	mov	r3, r1
 8008a20:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a28:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008a2a:	78fb      	ldrb	r3, [r7, #3]
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f001 fda0 	bl	800a574 <USBD_LL_GetRxDataSize>
 8008a34:	4602      	mov	r2, r0
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00d      	beq.n	8008a62 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	68fa      	ldr	r2, [r7, #12]
 8008a50:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008a5a:	4611      	mov	r1, r2
 8008a5c:	4798      	blx	r3

    return USBD_OK;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	e000      	b.n	8008a64 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008a62:	2302      	movs	r3, #2
  }
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3710      	adds	r7, #16
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a7a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d015      	beq.n	8008ab2 <USBD_CDC_EP0_RxReady+0x46>
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008a8c:	2bff      	cmp	r3, #255	; 0xff
 8008a8e:	d010      	beq.n	8008ab2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008a9e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008aa6:	b292      	uxth	r2, r2
 8008aa8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	22ff      	movs	r2, #255	; 0xff
 8008aae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3710      	adds	r7, #16
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2243      	movs	r2, #67	; 0x43
 8008ac8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008aca:	4b03      	ldr	r3, [pc, #12]	; (8008ad8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bc80      	pop	{r7}
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop
 8008ad8:	20000098 	.word	0x20000098

08008adc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2243      	movs	r2, #67	; 0x43
 8008ae8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008aea:	4b03      	ldr	r3, [pc, #12]	; (8008af8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bc80      	pop	{r7}
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	20000054 	.word	0x20000054

08008afc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2243      	movs	r2, #67	; 0x43
 8008b08:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008b0a:	4b03      	ldr	r3, [pc, #12]	; (8008b18 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	370c      	adds	r7, #12
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bc80      	pop	{r7}
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop
 8008b18:	200000dc 	.word	0x200000dc

08008b1c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	220a      	movs	r2, #10
 8008b28:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008b2a:	4b03      	ldr	r3, [pc, #12]	; (8008b38 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	370c      	adds	r7, #12
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bc80      	pop	{r7}
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	20000010 	.word	0x20000010

08008b3c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008b46:	2302      	movs	r3, #2
 8008b48:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d005      	beq.n	8008b5c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	683a      	ldr	r2, [r7, #0]
 8008b54:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3714      	adds	r7, #20
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bc80      	pop	{r7}
 8008b66:	4770      	bx	lr

08008b68 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b087      	sub	sp, #28
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	4613      	mov	r3, r2
 8008b74:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b7c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	68ba      	ldr	r2, [r7, #8]
 8008b82:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008b86:	88fa      	ldrh	r2, [r7, #6]
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	371c      	adds	r7, #28
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bc80      	pop	{r7}
 8008b98:	4770      	bx	lr

08008b9a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	b085      	sub	sp, #20
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
 8008ba2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008baa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	683a      	ldr	r2, [r7, #0]
 8008bb0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3714      	adds	r7, #20
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bc80      	pop	{r7}
 8008bbe:	4770      	bx	lr

08008bc0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bce:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d017      	beq.n	8008c0a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	7c1b      	ldrb	r3, [r3, #16]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d109      	bne.n	8008bf6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bec:	2101      	movs	r1, #1
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f001 fc9d 	bl	800a52e <USBD_LL_PrepareReceive>
 8008bf4:	e007      	b.n	8008c06 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008bfc:	2340      	movs	r3, #64	; 0x40
 8008bfe:	2101      	movs	r1, #1
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f001 fc94 	bl	800a52e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008c06:	2300      	movs	r3, #0
 8008c08:	e000      	b.n	8008c0c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008c0a:	2302      	movs	r3, #2
  }
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3710      	adds	r7, #16
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	4613      	mov	r3, r2
 8008c20:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d101      	bne.n	8008c2c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008c28:	2302      	movs	r3, #2
 8008c2a:	e01a      	b.n	8008c62 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d003      	beq.n	8008c3e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d003      	beq.n	8008c4c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	68ba      	ldr	r2, [r7, #8]
 8008c48:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	79fa      	ldrb	r2, [r7, #7]
 8008c58:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f001 fb02 	bl	800a264 <USBD_LL_Init>

  return USBD_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c6a:	b480      	push	{r7}
 8008c6c:	b085      	sub	sp, #20
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
 8008c72:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d006      	beq.n	8008c8c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	683a      	ldr	r2, [r7, #0]
 8008c82:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008c86:	2300      	movs	r3, #0
 8008c88:	73fb      	strb	r3, [r7, #15]
 8008c8a:	e001      	b.n	8008c90 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008c8c:	2302      	movs	r3, #2
 8008c8e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3714      	adds	r7, #20
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bc80      	pop	{r7}
 8008c9a:	4770      	bx	lr

08008c9c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f001 fb37 	bl	800a318 <USBD_LL_Start>

  return USBD_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	370c      	adds	r7, #12
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bc80      	pop	{r7}
 8008cc6:	4770      	bx	lr

08008cc8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008cd4:	2302      	movs	r3, #2
 8008cd6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d00c      	beq.n	8008cfc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	78fa      	ldrb	r2, [r7, #3]
 8008cec:	4611      	mov	r1, r2
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	4798      	blx	r3
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d101      	bne.n	8008cfc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b082      	sub	sp, #8
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
 8008d0e:	460b      	mov	r3, r1
 8008d10:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	78fa      	ldrb	r2, [r7, #3]
 8008d1c:	4611      	mov	r1, r2
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	4798      	blx	r3

  return USBD_OK;
 8008d22:	2300      	movs	r3, #0
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3708      	adds	r7, #8
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008d3c:	6839      	ldr	r1, [r7, #0]
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f000 fed7 	bl	8009af2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008d52:	461a      	mov	r2, r3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008d60:	f003 031f 	and.w	r3, r3, #31
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d016      	beq.n	8008d96 <USBD_LL_SetupStage+0x6a>
 8008d68:	2b02      	cmp	r3, #2
 8008d6a:	d81c      	bhi.n	8008da6 <USBD_LL_SetupStage+0x7a>
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d002      	beq.n	8008d76 <USBD_LL_SetupStage+0x4a>
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d008      	beq.n	8008d86 <USBD_LL_SetupStage+0x5a>
 8008d74:	e017      	b.n	8008da6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f9ca 	bl	8009118 <USBD_StdDevReq>
      break;
 8008d84:	e01a      	b.n	8008dbc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 fa2c 	bl	80091ec <USBD_StdItfReq>
      break;
 8008d94:	e012      	b.n	8008dbc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 fa6c 	bl	800927c <USBD_StdEPReq>
      break;
 8008da4:	e00a      	b.n	8008dbc <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008dac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	4619      	mov	r1, r3
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f001 fb0f 	bl	800a3d8 <USBD_LL_StallEP>
      break;
 8008dba:	bf00      	nop
  }

  return USBD_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3708      	adds	r7, #8
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b086      	sub	sp, #24
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	60f8      	str	r0, [r7, #12]
 8008dce:	460b      	mov	r3, r1
 8008dd0:	607a      	str	r2, [r7, #4]
 8008dd2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008dd4:	7afb      	ldrb	r3, [r7, #11]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d14b      	bne.n	8008e72 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008de0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008de8:	2b03      	cmp	r3, #3
 8008dea:	d134      	bne.n	8008e56 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	68da      	ldr	r2, [r3, #12]
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	691b      	ldr	r3, [r3, #16]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d919      	bls.n	8008e2c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	68da      	ldr	r2, [r3, #12]
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	691b      	ldr	r3, [r3, #16]
 8008e00:	1ad2      	subs	r2, r2, r3
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	68da      	ldr	r2, [r3, #12]
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d203      	bcs.n	8008e1a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	e002      	b.n	8008e20 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	461a      	mov	r2, r3
 8008e22:	6879      	ldr	r1, [r7, #4]
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	f000 ff56 	bl	8009cd6 <USBD_CtlContinueRx>
 8008e2a:	e038      	b.n	8008e9e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d00a      	beq.n	8008e4e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008e3e:	2b03      	cmp	r3, #3
 8008e40:	d105      	bne.n	8008e4e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	f000 ff53 	bl	8009cfa <USBD_CtlSendStatus>
 8008e54:	e023      	b.n	8008e9e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e5c:	2b05      	cmp	r3, #5
 8008e5e:	d11e      	bne.n	8008e9e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008e68:	2100      	movs	r1, #0
 8008e6a:	68f8      	ldr	r0, [r7, #12]
 8008e6c:	f001 fab4 	bl	800a3d8 <USBD_LL_StallEP>
 8008e70:	e015      	b.n	8008e9e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e78:	699b      	ldr	r3, [r3, #24]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00d      	beq.n	8008e9a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008e84:	2b03      	cmp	r3, #3
 8008e86:	d108      	bne.n	8008e9a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e8e:	699b      	ldr	r3, [r3, #24]
 8008e90:	7afa      	ldrb	r2, [r7, #11]
 8008e92:	4611      	mov	r1, r2
 8008e94:	68f8      	ldr	r0, [r7, #12]
 8008e96:	4798      	blx	r3
 8008e98:	e001      	b.n	8008e9e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008e9a:	2302      	movs	r3, #2
 8008e9c:	e000      	b.n	8008ea0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008e9e:	2300      	movs	r3, #0
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3718      	adds	r7, #24
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b086      	sub	sp, #24
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	607a      	str	r2, [r7, #4]
 8008eb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008eb6:	7afb      	ldrb	r3, [r7, #11]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d17f      	bne.n	8008fbc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	3314      	adds	r3, #20
 8008ec0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008ec8:	2b02      	cmp	r3, #2
 8008eca:	d15c      	bne.n	8008f86 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	68da      	ldr	r2, [r3, #12]
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	691b      	ldr	r3, [r3, #16]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d915      	bls.n	8008f04 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	68da      	ldr	r2, [r3, #12]
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	691b      	ldr	r3, [r3, #16]
 8008ee0:	1ad2      	subs	r2, r2, r3
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	461a      	mov	r2, r3
 8008eee:	6879      	ldr	r1, [r7, #4]
 8008ef0:	68f8      	ldr	r0, [r7, #12]
 8008ef2:	f000 fec0 	bl	8009c76 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	2200      	movs	r2, #0
 8008efa:	2100      	movs	r1, #0
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f001 fb16 	bl	800a52e <USBD_LL_PrepareReceive>
 8008f02:	e04e      	b.n	8008fa2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	697a      	ldr	r2, [r7, #20]
 8008f0a:	6912      	ldr	r2, [r2, #16]
 8008f0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f10:	fb02 f201 	mul.w	r2, r2, r1
 8008f14:	1a9b      	subs	r3, r3, r2
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d11c      	bne.n	8008f54 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	689a      	ldr	r2, [r3, #8]
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d316      	bcc.n	8008f54 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	689a      	ldr	r2, [r3, #8]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d20f      	bcs.n	8008f54 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008f34:	2200      	movs	r2, #0
 8008f36:	2100      	movs	r1, #0
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f000 fe9c 	bl	8009c76 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f46:	2300      	movs	r3, #0
 8008f48:	2200      	movs	r2, #0
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	68f8      	ldr	r0, [r7, #12]
 8008f4e:	f001 faee 	bl	800a52e <USBD_LL_PrepareReceive>
 8008f52:	e026      	b.n	8008fa2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00a      	beq.n	8008f76 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008f66:	2b03      	cmp	r3, #3
 8008f68:	d105      	bne.n	8008f76 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008f76:	2180      	movs	r1, #128	; 0x80
 8008f78:	68f8      	ldr	r0, [r7, #12]
 8008f7a:	f001 fa2d 	bl	800a3d8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008f7e:	68f8      	ldr	r0, [r7, #12]
 8008f80:	f000 fece 	bl	8009d20 <USBD_CtlReceiveStatus>
 8008f84:	e00d      	b.n	8008fa2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f8c:	2b04      	cmp	r3, #4
 8008f8e:	d004      	beq.n	8008f9a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d103      	bne.n	8008fa2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008f9a:	2180      	movs	r1, #128	; 0x80
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f001 fa1b 	bl	800a3d8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d11d      	bne.n	8008fe8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008fac:	68f8      	ldr	r0, [r7, #12]
 8008fae:	f7ff fe81 	bl	8008cb4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008fba:	e015      	b.n	8008fe8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fc2:	695b      	ldr	r3, [r3, #20]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00d      	beq.n	8008fe4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008fce:	2b03      	cmp	r3, #3
 8008fd0:	d108      	bne.n	8008fe4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fd8:	695b      	ldr	r3, [r3, #20]
 8008fda:	7afa      	ldrb	r2, [r7, #11]
 8008fdc:	4611      	mov	r1, r2
 8008fde:	68f8      	ldr	r0, [r7, #12]
 8008fe0:	4798      	blx	r3
 8008fe2:	e001      	b.n	8008fe8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008fe4:	2302      	movs	r3, #2
 8008fe6:	e000      	b.n	8008fea <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3718      	adds	r7, #24
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b082      	sub	sp, #8
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ffa:	2340      	movs	r3, #64	; 0x40
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	2100      	movs	r1, #0
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f001 f9a4 	bl	800a34e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2201      	movs	r2, #1
 800900a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2240      	movs	r2, #64	; 0x40
 8009012:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009016:	2340      	movs	r3, #64	; 0x40
 8009018:	2200      	movs	r2, #0
 800901a:	2180      	movs	r1, #128	; 0x80
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f001 f996 	bl	800a34e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2201      	movs	r2, #1
 8009026:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2240      	movs	r2, #64	; 0x40
 800902c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2201      	movs	r2, #1
 8009032:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009052:	2b00      	cmp	r3, #0
 8009054:	d009      	beq.n	800906a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	6852      	ldr	r2, [r2, #4]
 8009062:	b2d2      	uxtb	r2, r2
 8009064:	4611      	mov	r1, r2
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	4798      	blx	r3
  }

  return USBD_OK;
 800906a:	2300      	movs	r3, #0
}
 800906c:	4618      	mov	r0, r3
 800906e:	3708      	adds	r7, #8
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	460b      	mov	r3, r1
 800907e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	78fa      	ldrb	r2, [r7, #3]
 8009084:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	370c      	adds	r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	bc80      	pop	{r7}
 8009090:	4770      	bx	lr

08009092 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009092:	b480      	push	{r7}
 8009094:	b083      	sub	sp, #12
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2204      	movs	r2, #4
 80090aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bc80      	pop	{r7}
 80090b8:	4770      	bx	lr

080090ba <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80090ba:	b480      	push	{r7}
 80090bc:	b083      	sub	sp, #12
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090c8:	2b04      	cmp	r3, #4
 80090ca:	d105      	bne.n	80090d8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	370c      	adds	r7, #12
 80090de:	46bd      	mov	sp, r7
 80090e0:	bc80      	pop	{r7}
 80090e2:	4770      	bx	lr

080090e4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090f2:	2b03      	cmp	r3, #3
 80090f4:	d10b      	bne.n	800910e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090fc:	69db      	ldr	r3, [r3, #28]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d005      	beq.n	800910e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009108:	69db      	ldr	r3, [r3, #28]
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3708      	adds	r7, #8
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009122:	2300      	movs	r3, #0
 8009124:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800912e:	2b40      	cmp	r3, #64	; 0x40
 8009130:	d005      	beq.n	800913e <USBD_StdDevReq+0x26>
 8009132:	2b40      	cmp	r3, #64	; 0x40
 8009134:	d84f      	bhi.n	80091d6 <USBD_StdDevReq+0xbe>
 8009136:	2b00      	cmp	r3, #0
 8009138:	d009      	beq.n	800914e <USBD_StdDevReq+0x36>
 800913a:	2b20      	cmp	r3, #32
 800913c:	d14b      	bne.n	80091d6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	6839      	ldr	r1, [r7, #0]
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	4798      	blx	r3
      break;
 800914c:	e048      	b.n	80091e0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	785b      	ldrb	r3, [r3, #1]
 8009152:	2b09      	cmp	r3, #9
 8009154:	d839      	bhi.n	80091ca <USBD_StdDevReq+0xb2>
 8009156:	a201      	add	r2, pc, #4	; (adr r2, 800915c <USBD_StdDevReq+0x44>)
 8009158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800915c:	080091ad 	.word	0x080091ad
 8009160:	080091c1 	.word	0x080091c1
 8009164:	080091cb 	.word	0x080091cb
 8009168:	080091b7 	.word	0x080091b7
 800916c:	080091cb 	.word	0x080091cb
 8009170:	0800918f 	.word	0x0800918f
 8009174:	08009185 	.word	0x08009185
 8009178:	080091cb 	.word	0x080091cb
 800917c:	080091a3 	.word	0x080091a3
 8009180:	08009199 	.word	0x08009199
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009184:	6839      	ldr	r1, [r7, #0]
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 f9dc 	bl	8009544 <USBD_GetDescriptor>
          break;
 800918c:	e022      	b.n	80091d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800918e:	6839      	ldr	r1, [r7, #0]
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 fb3f 	bl	8009814 <USBD_SetAddress>
          break;
 8009196:	e01d      	b.n	80091d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009198:	6839      	ldr	r1, [r7, #0]
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 fb7e 	bl	800989c <USBD_SetConfig>
          break;
 80091a0:	e018      	b.n	80091d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80091a2:	6839      	ldr	r1, [r7, #0]
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 fc07 	bl	80099b8 <USBD_GetConfig>
          break;
 80091aa:	e013      	b.n	80091d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80091ac:	6839      	ldr	r1, [r7, #0]
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 fc37 	bl	8009a22 <USBD_GetStatus>
          break;
 80091b4:	e00e      	b.n	80091d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80091b6:	6839      	ldr	r1, [r7, #0]
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 fc65 	bl	8009a88 <USBD_SetFeature>
          break;
 80091be:	e009      	b.n	80091d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80091c0:	6839      	ldr	r1, [r7, #0]
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 fc74 	bl	8009ab0 <USBD_ClrFeature>
          break;
 80091c8:	e004      	b.n	80091d4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80091ca:	6839      	ldr	r1, [r7, #0]
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 fccc 	bl	8009b6a <USBD_CtlError>
          break;
 80091d2:	bf00      	nop
      }
      break;
 80091d4:	e004      	b.n	80091e0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80091d6:	6839      	ldr	r1, [r7, #0]
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 fcc6 	bl	8009b6a <USBD_CtlError>
      break;
 80091de:	bf00      	nop
  }

  return ret;
 80091e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop

080091ec <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091f6:	2300      	movs	r3, #0
 80091f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009202:	2b40      	cmp	r3, #64	; 0x40
 8009204:	d005      	beq.n	8009212 <USBD_StdItfReq+0x26>
 8009206:	2b40      	cmp	r3, #64	; 0x40
 8009208:	d82e      	bhi.n	8009268 <USBD_StdItfReq+0x7c>
 800920a:	2b00      	cmp	r3, #0
 800920c:	d001      	beq.n	8009212 <USBD_StdItfReq+0x26>
 800920e:	2b20      	cmp	r3, #32
 8009210:	d12a      	bne.n	8009268 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009218:	3b01      	subs	r3, #1
 800921a:	2b02      	cmp	r3, #2
 800921c:	d81d      	bhi.n	800925a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	889b      	ldrh	r3, [r3, #4]
 8009222:	b2db      	uxtb	r3, r3
 8009224:	2b01      	cmp	r3, #1
 8009226:	d813      	bhi.n	8009250 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	6839      	ldr	r1, [r7, #0]
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	4798      	blx	r3
 8009236:	4603      	mov	r3, r0
 8009238:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	88db      	ldrh	r3, [r3, #6]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d110      	bne.n	8009264 <USBD_StdItfReq+0x78>
 8009242:	7bfb      	ldrb	r3, [r7, #15]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d10d      	bne.n	8009264 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 fd56 	bl	8009cfa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800924e:	e009      	b.n	8009264 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009250:	6839      	ldr	r1, [r7, #0]
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 fc89 	bl	8009b6a <USBD_CtlError>
          break;
 8009258:	e004      	b.n	8009264 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800925a:	6839      	ldr	r1, [r7, #0]
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 fc84 	bl	8009b6a <USBD_CtlError>
          break;
 8009262:	e000      	b.n	8009266 <USBD_StdItfReq+0x7a>
          break;
 8009264:	bf00      	nop
      }
      break;
 8009266:	e004      	b.n	8009272 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009268:	6839      	ldr	r1, [r7, #0]
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 fc7d 	bl	8009b6a <USBD_CtlError>
      break;
 8009270:	bf00      	nop
  }

  return USBD_OK;
 8009272:	2300      	movs	r3, #0
}
 8009274:	4618      	mov	r0, r3
 8009276:	3710      	adds	r7, #16
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009286:	2300      	movs	r3, #0
 8009288:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	889b      	ldrh	r3, [r3, #4]
 800928e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009298:	2b40      	cmp	r3, #64	; 0x40
 800929a:	d007      	beq.n	80092ac <USBD_StdEPReq+0x30>
 800929c:	2b40      	cmp	r3, #64	; 0x40
 800929e:	f200 8146 	bhi.w	800952e <USBD_StdEPReq+0x2b2>
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d00a      	beq.n	80092bc <USBD_StdEPReq+0x40>
 80092a6:	2b20      	cmp	r3, #32
 80092a8:	f040 8141 	bne.w	800952e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	6839      	ldr	r1, [r7, #0]
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	4798      	blx	r3
      break;
 80092ba:	e13d      	b.n	8009538 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092c4:	2b20      	cmp	r3, #32
 80092c6:	d10a      	bne.n	80092de <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	6839      	ldr	r1, [r7, #0]
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	4798      	blx	r3
 80092d6:	4603      	mov	r3, r0
 80092d8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80092da:	7bfb      	ldrb	r3, [r7, #15]
 80092dc:	e12d      	b.n	800953a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	785b      	ldrb	r3, [r3, #1]
 80092e2:	2b03      	cmp	r3, #3
 80092e4:	d007      	beq.n	80092f6 <USBD_StdEPReq+0x7a>
 80092e6:	2b03      	cmp	r3, #3
 80092e8:	f300 811b 	bgt.w	8009522 <USBD_StdEPReq+0x2a6>
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d072      	beq.n	80093d6 <USBD_StdEPReq+0x15a>
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d03a      	beq.n	800936a <USBD_StdEPReq+0xee>
 80092f4:	e115      	b.n	8009522 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092fc:	2b02      	cmp	r3, #2
 80092fe:	d002      	beq.n	8009306 <USBD_StdEPReq+0x8a>
 8009300:	2b03      	cmp	r3, #3
 8009302:	d015      	beq.n	8009330 <USBD_StdEPReq+0xb4>
 8009304:	e02b      	b.n	800935e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009306:	7bbb      	ldrb	r3, [r7, #14]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00c      	beq.n	8009326 <USBD_StdEPReq+0xaa>
 800930c:	7bbb      	ldrb	r3, [r7, #14]
 800930e:	2b80      	cmp	r3, #128	; 0x80
 8009310:	d009      	beq.n	8009326 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009312:	7bbb      	ldrb	r3, [r7, #14]
 8009314:	4619      	mov	r1, r3
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f001 f85e 	bl	800a3d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800931c:	2180      	movs	r1, #128	; 0x80
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f001 f85a 	bl	800a3d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009324:	e020      	b.n	8009368 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009326:	6839      	ldr	r1, [r7, #0]
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 fc1e 	bl	8009b6a <USBD_CtlError>
              break;
 800932e:	e01b      	b.n	8009368 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	885b      	ldrh	r3, [r3, #2]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d10e      	bne.n	8009356 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009338:	7bbb      	ldrb	r3, [r7, #14]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d00b      	beq.n	8009356 <USBD_StdEPReq+0xda>
 800933e:	7bbb      	ldrb	r3, [r7, #14]
 8009340:	2b80      	cmp	r3, #128	; 0x80
 8009342:	d008      	beq.n	8009356 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	88db      	ldrh	r3, [r3, #6]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d104      	bne.n	8009356 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800934c:	7bbb      	ldrb	r3, [r7, #14]
 800934e:	4619      	mov	r1, r3
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f001 f841 	bl	800a3d8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fccf 	bl	8009cfa <USBD_CtlSendStatus>

              break;
 800935c:	e004      	b.n	8009368 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800935e:	6839      	ldr	r1, [r7, #0]
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 fc02 	bl	8009b6a <USBD_CtlError>
              break;
 8009366:	bf00      	nop
          }
          break;
 8009368:	e0e0      	b.n	800952c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009370:	2b02      	cmp	r3, #2
 8009372:	d002      	beq.n	800937a <USBD_StdEPReq+0xfe>
 8009374:	2b03      	cmp	r3, #3
 8009376:	d015      	beq.n	80093a4 <USBD_StdEPReq+0x128>
 8009378:	e026      	b.n	80093c8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800937a:	7bbb      	ldrb	r3, [r7, #14]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d00c      	beq.n	800939a <USBD_StdEPReq+0x11e>
 8009380:	7bbb      	ldrb	r3, [r7, #14]
 8009382:	2b80      	cmp	r3, #128	; 0x80
 8009384:	d009      	beq.n	800939a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009386:	7bbb      	ldrb	r3, [r7, #14]
 8009388:	4619      	mov	r1, r3
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f001 f824 	bl	800a3d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009390:	2180      	movs	r1, #128	; 0x80
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f001 f820 	bl	800a3d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009398:	e01c      	b.n	80093d4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800939a:	6839      	ldr	r1, [r7, #0]
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 fbe4 	bl	8009b6a <USBD_CtlError>
              break;
 80093a2:	e017      	b.n	80093d4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	885b      	ldrh	r3, [r3, #2]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d112      	bne.n	80093d2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80093ac:	7bbb      	ldrb	r3, [r7, #14]
 80093ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d004      	beq.n	80093c0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80093b6:	7bbb      	ldrb	r3, [r7, #14]
 80093b8:	4619      	mov	r1, r3
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f001 f82b 	bl	800a416 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 fc9a 	bl	8009cfa <USBD_CtlSendStatus>
              }
              break;
 80093c6:	e004      	b.n	80093d2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80093c8:	6839      	ldr	r1, [r7, #0]
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 fbcd 	bl	8009b6a <USBD_CtlError>
              break;
 80093d0:	e000      	b.n	80093d4 <USBD_StdEPReq+0x158>
              break;
 80093d2:	bf00      	nop
          }
          break;
 80093d4:	e0aa      	b.n	800952c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d002      	beq.n	80093e6 <USBD_StdEPReq+0x16a>
 80093e0:	2b03      	cmp	r3, #3
 80093e2:	d032      	beq.n	800944a <USBD_StdEPReq+0x1ce>
 80093e4:	e097      	b.n	8009516 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093e6:	7bbb      	ldrb	r3, [r7, #14]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d007      	beq.n	80093fc <USBD_StdEPReq+0x180>
 80093ec:	7bbb      	ldrb	r3, [r7, #14]
 80093ee:	2b80      	cmp	r3, #128	; 0x80
 80093f0:	d004      	beq.n	80093fc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80093f2:	6839      	ldr	r1, [r7, #0]
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 fbb8 	bl	8009b6a <USBD_CtlError>
                break;
 80093fa:	e091      	b.n	8009520 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009400:	2b00      	cmp	r3, #0
 8009402:	da0b      	bge.n	800941c <USBD_StdEPReq+0x1a0>
 8009404:	7bbb      	ldrb	r3, [r7, #14]
 8009406:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800940a:	4613      	mov	r3, r2
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	4413      	add	r3, r2
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	3310      	adds	r3, #16
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	4413      	add	r3, r2
 8009418:	3304      	adds	r3, #4
 800941a:	e00b      	b.n	8009434 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800941c:	7bbb      	ldrb	r3, [r7, #14]
 800941e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009422:	4613      	mov	r3, r2
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	4413      	add	r3, r2
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	4413      	add	r3, r2
 8009432:	3304      	adds	r3, #4
 8009434:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	2200      	movs	r2, #0
 800943a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	2202      	movs	r2, #2
 8009440:	4619      	mov	r1, r3
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 fbfb 	bl	8009c3e <USBD_CtlSendData>
              break;
 8009448:	e06a      	b.n	8009520 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800944a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800944e:	2b00      	cmp	r3, #0
 8009450:	da11      	bge.n	8009476 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009452:	7bbb      	ldrb	r3, [r7, #14]
 8009454:	f003 020f 	and.w	r2, r3, #15
 8009458:	6879      	ldr	r1, [r7, #4]
 800945a:	4613      	mov	r3, r2
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	4413      	add	r3, r2
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	440b      	add	r3, r1
 8009464:	3318      	adds	r3, #24
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d117      	bne.n	800949c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800946c:	6839      	ldr	r1, [r7, #0]
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 fb7b 	bl	8009b6a <USBD_CtlError>
                  break;
 8009474:	e054      	b.n	8009520 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009476:	7bbb      	ldrb	r3, [r7, #14]
 8009478:	f003 020f 	and.w	r2, r3, #15
 800947c:	6879      	ldr	r1, [r7, #4]
 800947e:	4613      	mov	r3, r2
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	4413      	add	r3, r2
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	440b      	add	r3, r1
 8009488:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d104      	bne.n	800949c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009492:	6839      	ldr	r1, [r7, #0]
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 fb68 	bl	8009b6a <USBD_CtlError>
                  break;
 800949a:	e041      	b.n	8009520 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800949c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	da0b      	bge.n	80094bc <USBD_StdEPReq+0x240>
 80094a4:	7bbb      	ldrb	r3, [r7, #14]
 80094a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094aa:	4613      	mov	r3, r2
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	4413      	add	r3, r2
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	3310      	adds	r3, #16
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	4413      	add	r3, r2
 80094b8:	3304      	adds	r3, #4
 80094ba:	e00b      	b.n	80094d4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094bc:	7bbb      	ldrb	r3, [r7, #14]
 80094be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094c2:	4613      	mov	r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	4413      	add	r3, r2
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	4413      	add	r3, r2
 80094d2:	3304      	adds	r3, #4
 80094d4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80094d6:	7bbb      	ldrb	r3, [r7, #14]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d002      	beq.n	80094e2 <USBD_StdEPReq+0x266>
 80094dc:	7bbb      	ldrb	r3, [r7, #14]
 80094de:	2b80      	cmp	r3, #128	; 0x80
 80094e0:	d103      	bne.n	80094ea <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	2200      	movs	r2, #0
 80094e6:	601a      	str	r2, [r3, #0]
 80094e8:	e00e      	b.n	8009508 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80094ea:	7bbb      	ldrb	r3, [r7, #14]
 80094ec:	4619      	mov	r1, r3
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 ffb0 	bl	800a454 <USBD_LL_IsStallEP>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d003      	beq.n	8009502 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	2201      	movs	r2, #1
 80094fe:	601a      	str	r2, [r3, #0]
 8009500:	e002      	b.n	8009508 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	2200      	movs	r2, #0
 8009506:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	2202      	movs	r2, #2
 800950c:	4619      	mov	r1, r3
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 fb95 	bl	8009c3e <USBD_CtlSendData>
              break;
 8009514:	e004      	b.n	8009520 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009516:	6839      	ldr	r1, [r7, #0]
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fb26 	bl	8009b6a <USBD_CtlError>
              break;
 800951e:	bf00      	nop
          }
          break;
 8009520:	e004      	b.n	800952c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009522:	6839      	ldr	r1, [r7, #0]
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 fb20 	bl	8009b6a <USBD_CtlError>
          break;
 800952a:	bf00      	nop
      }
      break;
 800952c:	e004      	b.n	8009538 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800952e:	6839      	ldr	r1, [r7, #0]
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 fb1a 	bl	8009b6a <USBD_CtlError>
      break;
 8009536:	bf00      	nop
  }

  return ret;
 8009538:	7bfb      	ldrb	r3, [r7, #15]
}
 800953a:	4618      	mov	r0, r3
 800953c:	3710      	adds	r7, #16
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
	...

08009544 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800954e:	2300      	movs	r3, #0
 8009550:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009552:	2300      	movs	r3, #0
 8009554:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009556:	2300      	movs	r3, #0
 8009558:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	885b      	ldrh	r3, [r3, #2]
 800955e:	0a1b      	lsrs	r3, r3, #8
 8009560:	b29b      	uxth	r3, r3
 8009562:	3b01      	subs	r3, #1
 8009564:	2b06      	cmp	r3, #6
 8009566:	f200 8128 	bhi.w	80097ba <USBD_GetDescriptor+0x276>
 800956a:	a201      	add	r2, pc, #4	; (adr r2, 8009570 <USBD_GetDescriptor+0x2c>)
 800956c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009570:	0800958d 	.word	0x0800958d
 8009574:	080095a5 	.word	0x080095a5
 8009578:	080095e5 	.word	0x080095e5
 800957c:	080097bb 	.word	0x080097bb
 8009580:	080097bb 	.word	0x080097bb
 8009584:	0800975b 	.word	0x0800975b
 8009588:	08009787 	.word	0x08009787
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	7c12      	ldrb	r2, [r2, #16]
 8009598:	f107 0108 	add.w	r1, r7, #8
 800959c:	4610      	mov	r0, r2
 800959e:	4798      	blx	r3
 80095a0:	60f8      	str	r0, [r7, #12]
      break;
 80095a2:	e112      	b.n	80097ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	7c1b      	ldrb	r3, [r3, #16]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d10d      	bne.n	80095c8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095b4:	f107 0208 	add.w	r2, r7, #8
 80095b8:	4610      	mov	r0, r2
 80095ba:	4798      	blx	r3
 80095bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	3301      	adds	r3, #1
 80095c2:	2202      	movs	r2, #2
 80095c4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80095c6:	e100      	b.n	80097ca <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d0:	f107 0208 	add.w	r2, r7, #8
 80095d4:	4610      	mov	r0, r2
 80095d6:	4798      	blx	r3
 80095d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	3301      	adds	r3, #1
 80095de:	2202      	movs	r2, #2
 80095e0:	701a      	strb	r2, [r3, #0]
      break;
 80095e2:	e0f2      	b.n	80097ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	885b      	ldrh	r3, [r3, #2]
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	2b05      	cmp	r3, #5
 80095ec:	f200 80ac 	bhi.w	8009748 <USBD_GetDescriptor+0x204>
 80095f0:	a201      	add	r2, pc, #4	; (adr r2, 80095f8 <USBD_GetDescriptor+0xb4>)
 80095f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f6:	bf00      	nop
 80095f8:	08009611 	.word	0x08009611
 80095fc:	08009645 	.word	0x08009645
 8009600:	08009679 	.word	0x08009679
 8009604:	080096ad 	.word	0x080096ad
 8009608:	080096e1 	.word	0x080096e1
 800960c:	08009715 	.word	0x08009715
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d00b      	beq.n	8009634 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	7c12      	ldrb	r2, [r2, #16]
 8009628:	f107 0108 	add.w	r1, r7, #8
 800962c:	4610      	mov	r0, r2
 800962e:	4798      	blx	r3
 8009630:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009632:	e091      	b.n	8009758 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009634:	6839      	ldr	r1, [r7, #0]
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 fa97 	bl	8009b6a <USBD_CtlError>
            err++;
 800963c:	7afb      	ldrb	r3, [r7, #11]
 800963e:	3301      	adds	r3, #1
 8009640:	72fb      	strb	r3, [r7, #11]
          break;
 8009642:	e089      	b.n	8009758 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d00b      	beq.n	8009668 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	7c12      	ldrb	r2, [r2, #16]
 800965c:	f107 0108 	add.w	r1, r7, #8
 8009660:	4610      	mov	r0, r2
 8009662:	4798      	blx	r3
 8009664:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009666:	e077      	b.n	8009758 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009668:	6839      	ldr	r1, [r7, #0]
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 fa7d 	bl	8009b6a <USBD_CtlError>
            err++;
 8009670:	7afb      	ldrb	r3, [r7, #11]
 8009672:	3301      	adds	r3, #1
 8009674:	72fb      	strb	r3, [r7, #11]
          break;
 8009676:	e06f      	b.n	8009758 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00b      	beq.n	800969c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	7c12      	ldrb	r2, [r2, #16]
 8009690:	f107 0108 	add.w	r1, r7, #8
 8009694:	4610      	mov	r0, r2
 8009696:	4798      	blx	r3
 8009698:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800969a:	e05d      	b.n	8009758 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800969c:	6839      	ldr	r1, [r7, #0]
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 fa63 	bl	8009b6a <USBD_CtlError>
            err++;
 80096a4:	7afb      	ldrb	r3, [r7, #11]
 80096a6:	3301      	adds	r3, #1
 80096a8:	72fb      	strb	r3, [r7, #11]
          break;
 80096aa:	e055      	b.n	8009758 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096b2:	691b      	ldr	r3, [r3, #16]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d00b      	beq.n	80096d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096be:	691b      	ldr	r3, [r3, #16]
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	7c12      	ldrb	r2, [r2, #16]
 80096c4:	f107 0108 	add.w	r1, r7, #8
 80096c8:	4610      	mov	r0, r2
 80096ca:	4798      	blx	r3
 80096cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096ce:	e043      	b.n	8009758 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096d0:	6839      	ldr	r1, [r7, #0]
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 fa49 	bl	8009b6a <USBD_CtlError>
            err++;
 80096d8:	7afb      	ldrb	r3, [r7, #11]
 80096da:	3301      	adds	r3, #1
 80096dc:	72fb      	strb	r3, [r7, #11]
          break;
 80096de:	e03b      	b.n	8009758 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096e6:	695b      	ldr	r3, [r3, #20]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00b      	beq.n	8009704 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096f2:	695b      	ldr	r3, [r3, #20]
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	7c12      	ldrb	r2, [r2, #16]
 80096f8:	f107 0108 	add.w	r1, r7, #8
 80096fc:	4610      	mov	r0, r2
 80096fe:	4798      	blx	r3
 8009700:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009702:	e029      	b.n	8009758 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009704:	6839      	ldr	r1, [r7, #0]
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 fa2f 	bl	8009b6a <USBD_CtlError>
            err++;
 800970c:	7afb      	ldrb	r3, [r7, #11]
 800970e:	3301      	adds	r3, #1
 8009710:	72fb      	strb	r3, [r7, #11]
          break;
 8009712:	e021      	b.n	8009758 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800971a:	699b      	ldr	r3, [r3, #24]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00b      	beq.n	8009738 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009726:	699b      	ldr	r3, [r3, #24]
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	7c12      	ldrb	r2, [r2, #16]
 800972c:	f107 0108 	add.w	r1, r7, #8
 8009730:	4610      	mov	r0, r2
 8009732:	4798      	blx	r3
 8009734:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009736:	e00f      	b.n	8009758 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009738:	6839      	ldr	r1, [r7, #0]
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 fa15 	bl	8009b6a <USBD_CtlError>
            err++;
 8009740:	7afb      	ldrb	r3, [r7, #11]
 8009742:	3301      	adds	r3, #1
 8009744:	72fb      	strb	r3, [r7, #11]
          break;
 8009746:	e007      	b.n	8009758 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009748:	6839      	ldr	r1, [r7, #0]
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 fa0d 	bl	8009b6a <USBD_CtlError>
          err++;
 8009750:	7afb      	ldrb	r3, [r7, #11]
 8009752:	3301      	adds	r3, #1
 8009754:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009756:	e038      	b.n	80097ca <USBD_GetDescriptor+0x286>
 8009758:	e037      	b.n	80097ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	7c1b      	ldrb	r3, [r3, #16]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d109      	bne.n	8009776 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800976a:	f107 0208 	add.w	r2, r7, #8
 800976e:	4610      	mov	r0, r2
 8009770:	4798      	blx	r3
 8009772:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009774:	e029      	b.n	80097ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009776:	6839      	ldr	r1, [r7, #0]
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 f9f6 	bl	8009b6a <USBD_CtlError>
        err++;
 800977e:	7afb      	ldrb	r3, [r7, #11]
 8009780:	3301      	adds	r3, #1
 8009782:	72fb      	strb	r3, [r7, #11]
      break;
 8009784:	e021      	b.n	80097ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	7c1b      	ldrb	r3, [r3, #16]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d10d      	bne.n	80097aa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009796:	f107 0208 	add.w	r2, r7, #8
 800979a:	4610      	mov	r0, r2
 800979c:	4798      	blx	r3
 800979e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	3301      	adds	r3, #1
 80097a4:	2207      	movs	r2, #7
 80097a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80097a8:	e00f      	b.n	80097ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80097aa:	6839      	ldr	r1, [r7, #0]
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 f9dc 	bl	8009b6a <USBD_CtlError>
        err++;
 80097b2:	7afb      	ldrb	r3, [r7, #11]
 80097b4:	3301      	adds	r3, #1
 80097b6:	72fb      	strb	r3, [r7, #11]
      break;
 80097b8:	e007      	b.n	80097ca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80097ba:	6839      	ldr	r1, [r7, #0]
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 f9d4 	bl	8009b6a <USBD_CtlError>
      err++;
 80097c2:	7afb      	ldrb	r3, [r7, #11]
 80097c4:	3301      	adds	r3, #1
 80097c6:	72fb      	strb	r3, [r7, #11]
      break;
 80097c8:	bf00      	nop
  }

  if (err != 0U)
 80097ca:	7afb      	ldrb	r3, [r7, #11]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d11c      	bne.n	800980a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80097d0:	893b      	ldrh	r3, [r7, #8]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d011      	beq.n	80097fa <USBD_GetDescriptor+0x2b6>
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	88db      	ldrh	r3, [r3, #6]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00d      	beq.n	80097fa <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	88da      	ldrh	r2, [r3, #6]
 80097e2:	893b      	ldrh	r3, [r7, #8]
 80097e4:	4293      	cmp	r3, r2
 80097e6:	bf28      	it	cs
 80097e8:	4613      	movcs	r3, r2
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80097ee:	893b      	ldrh	r3, [r7, #8]
 80097f0:	461a      	mov	r2, r3
 80097f2:	68f9      	ldr	r1, [r7, #12]
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 fa22 	bl	8009c3e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	88db      	ldrh	r3, [r3, #6]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d104      	bne.n	800980c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 fa79 	bl	8009cfa <USBD_CtlSendStatus>
 8009808:	e000      	b.n	800980c <USBD_GetDescriptor+0x2c8>
    return;
 800980a:	bf00      	nop
    }
  }
}
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop

08009814 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	889b      	ldrh	r3, [r3, #4]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d130      	bne.n	8009888 <USBD_SetAddress+0x74>
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	88db      	ldrh	r3, [r3, #6]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d12c      	bne.n	8009888 <USBD_SetAddress+0x74>
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	885b      	ldrh	r3, [r3, #2]
 8009832:	2b7f      	cmp	r3, #127	; 0x7f
 8009834:	d828      	bhi.n	8009888 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	885b      	ldrh	r3, [r3, #2]
 800983a:	b2db      	uxtb	r3, r3
 800983c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009840:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009848:	2b03      	cmp	r3, #3
 800984a:	d104      	bne.n	8009856 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800984c:	6839      	ldr	r1, [r7, #0]
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 f98b 	bl	8009b6a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009854:	e01d      	b.n	8009892 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	7bfa      	ldrb	r2, [r7, #15]
 800985a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800985e:	7bfb      	ldrb	r3, [r7, #15]
 8009860:	4619      	mov	r1, r3
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 fe21 	bl	800a4aa <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 fa46 	bl	8009cfa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800986e:	7bfb      	ldrb	r3, [r7, #15]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d004      	beq.n	800987e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2202      	movs	r2, #2
 8009878:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800987c:	e009      	b.n	8009892 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2201      	movs	r2, #1
 8009882:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009886:	e004      	b.n	8009892 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009888:	6839      	ldr	r1, [r7, #0]
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 f96d 	bl	8009b6a <USBD_CtlError>
  }
}
 8009890:	bf00      	nop
 8009892:	bf00      	nop
 8009894:	3710      	adds	r7, #16
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
	...

0800989c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	885b      	ldrh	r3, [r3, #2]
 80098aa:	b2da      	uxtb	r2, r3
 80098ac:	4b41      	ldr	r3, [pc, #260]	; (80099b4 <USBD_SetConfig+0x118>)
 80098ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80098b0:	4b40      	ldr	r3, [pc, #256]	; (80099b4 <USBD_SetConfig+0x118>)
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d904      	bls.n	80098c2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80098b8:	6839      	ldr	r1, [r7, #0]
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 f955 	bl	8009b6a <USBD_CtlError>
 80098c0:	e075      	b.n	80099ae <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098c8:	2b02      	cmp	r3, #2
 80098ca:	d002      	beq.n	80098d2 <USBD_SetConfig+0x36>
 80098cc:	2b03      	cmp	r3, #3
 80098ce:	d023      	beq.n	8009918 <USBD_SetConfig+0x7c>
 80098d0:	e062      	b.n	8009998 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80098d2:	4b38      	ldr	r3, [pc, #224]	; (80099b4 <USBD_SetConfig+0x118>)
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d01a      	beq.n	8009910 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80098da:	4b36      	ldr	r3, [pc, #216]	; (80099b4 <USBD_SetConfig+0x118>)
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	461a      	mov	r2, r3
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2203      	movs	r2, #3
 80098e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80098ec:	4b31      	ldr	r3, [pc, #196]	; (80099b4 <USBD_SetConfig+0x118>)
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	4619      	mov	r1, r3
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f7ff f9e8 	bl	8008cc8 <USBD_SetClassConfig>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	d104      	bne.n	8009908 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80098fe:	6839      	ldr	r1, [r7, #0]
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 f932 	bl	8009b6a <USBD_CtlError>
            return;
 8009906:	e052      	b.n	80099ae <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 f9f6 	bl	8009cfa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800990e:	e04e      	b.n	80099ae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 f9f2 	bl	8009cfa <USBD_CtlSendStatus>
        break;
 8009916:	e04a      	b.n	80099ae <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009918:	4b26      	ldr	r3, [pc, #152]	; (80099b4 <USBD_SetConfig+0x118>)
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d112      	bne.n	8009946 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2202      	movs	r2, #2
 8009924:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009928:	4b22      	ldr	r3, [pc, #136]	; (80099b4 <USBD_SetConfig+0x118>)
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	461a      	mov	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009932:	4b20      	ldr	r3, [pc, #128]	; (80099b4 <USBD_SetConfig+0x118>)
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	4619      	mov	r1, r3
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f7ff f9e4 	bl	8008d06 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 f9db 	bl	8009cfa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009944:	e033      	b.n	80099ae <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009946:	4b1b      	ldr	r3, [pc, #108]	; (80099b4 <USBD_SetConfig+0x118>)
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	461a      	mov	r2, r3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	429a      	cmp	r2, r3
 8009952:	d01d      	beq.n	8009990 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	b2db      	uxtb	r3, r3
 800995a:	4619      	mov	r1, r3
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f7ff f9d2 	bl	8008d06 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009962:	4b14      	ldr	r3, [pc, #80]	; (80099b4 <USBD_SetConfig+0x118>)
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	461a      	mov	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800996c:	4b11      	ldr	r3, [pc, #68]	; (80099b4 <USBD_SetConfig+0x118>)
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	4619      	mov	r1, r3
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f7ff f9a8 	bl	8008cc8 <USBD_SetClassConfig>
 8009978:	4603      	mov	r3, r0
 800997a:	2b02      	cmp	r3, #2
 800997c:	d104      	bne.n	8009988 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800997e:	6839      	ldr	r1, [r7, #0]
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 f8f2 	bl	8009b6a <USBD_CtlError>
            return;
 8009986:	e012      	b.n	80099ae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 f9b6 	bl	8009cfa <USBD_CtlSendStatus>
        break;
 800998e:	e00e      	b.n	80099ae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 f9b2 	bl	8009cfa <USBD_CtlSendStatus>
        break;
 8009996:	e00a      	b.n	80099ae <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009998:	6839      	ldr	r1, [r7, #0]
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 f8e5 	bl	8009b6a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80099a0:	4b04      	ldr	r3, [pc, #16]	; (80099b4 <USBD_SetConfig+0x118>)
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	4619      	mov	r1, r3
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f7ff f9ad 	bl	8008d06 <USBD_ClrClassConfig>
        break;
 80099ac:	bf00      	nop
    }
  }
}
 80099ae:	3708      	adds	r7, #8
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	20000500 	.word	0x20000500

080099b8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	88db      	ldrh	r3, [r3, #6]
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d004      	beq.n	80099d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80099ca:	6839      	ldr	r1, [r7, #0]
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 f8cc 	bl	8009b6a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80099d2:	e022      	b.n	8009a1a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099da:	2b02      	cmp	r3, #2
 80099dc:	dc02      	bgt.n	80099e4 <USBD_GetConfig+0x2c>
 80099de:	2b00      	cmp	r3, #0
 80099e0:	dc03      	bgt.n	80099ea <USBD_GetConfig+0x32>
 80099e2:	e015      	b.n	8009a10 <USBD_GetConfig+0x58>
 80099e4:	2b03      	cmp	r3, #3
 80099e6:	d00b      	beq.n	8009a00 <USBD_GetConfig+0x48>
 80099e8:	e012      	b.n	8009a10 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	3308      	adds	r3, #8
 80099f4:	2201      	movs	r2, #1
 80099f6:	4619      	mov	r1, r3
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 f920 	bl	8009c3e <USBD_CtlSendData>
        break;
 80099fe:	e00c      	b.n	8009a1a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	3304      	adds	r3, #4
 8009a04:	2201      	movs	r2, #1
 8009a06:	4619      	mov	r1, r3
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 f918 	bl	8009c3e <USBD_CtlSendData>
        break;
 8009a0e:	e004      	b.n	8009a1a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009a10:	6839      	ldr	r1, [r7, #0]
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 f8a9 	bl	8009b6a <USBD_CtlError>
        break;
 8009a18:	bf00      	nop
}
 8009a1a:	bf00      	nop
 8009a1c:	3708      	adds	r7, #8
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b082      	sub	sp, #8
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
 8009a2a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a32:	3b01      	subs	r3, #1
 8009a34:	2b02      	cmp	r3, #2
 8009a36:	d81e      	bhi.n	8009a76 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	88db      	ldrh	r3, [r3, #6]
 8009a3c:	2b02      	cmp	r3, #2
 8009a3e:	d004      	beq.n	8009a4a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009a40:	6839      	ldr	r1, [r7, #0]
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 f891 	bl	8009b6a <USBD_CtlError>
        break;
 8009a48:	e01a      	b.n	8009a80 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d005      	beq.n	8009a66 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	f043 0202 	orr.w	r2, r3, #2
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	330c      	adds	r3, #12
 8009a6a:	2202      	movs	r2, #2
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 f8e5 	bl	8009c3e <USBD_CtlSendData>
      break;
 8009a74:	e004      	b.n	8009a80 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009a76:	6839      	ldr	r1, [r7, #0]
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 f876 	bl	8009b6a <USBD_CtlError>
      break;
 8009a7e:	bf00      	nop
  }
}
 8009a80:	bf00      	nop
 8009a82:	3708      	adds	r7, #8
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	885b      	ldrh	r3, [r3, #2]
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d106      	bne.n	8009aa8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 f929 	bl	8009cfa <USBD_CtlSendStatus>
  }
}
 8009aa8:	bf00      	nop
 8009aaa:	3708      	adds	r7, #8
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ac0:	3b01      	subs	r3, #1
 8009ac2:	2b02      	cmp	r3, #2
 8009ac4:	d80b      	bhi.n	8009ade <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	885b      	ldrh	r3, [r3, #2]
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d10c      	bne.n	8009ae8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 f90f 	bl	8009cfa <USBD_CtlSendStatus>
      }
      break;
 8009adc:	e004      	b.n	8009ae8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009ade:	6839      	ldr	r1, [r7, #0]
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 f842 	bl	8009b6a <USBD_CtlError>
      break;
 8009ae6:	e000      	b.n	8009aea <USBD_ClrFeature+0x3a>
      break;
 8009ae8:	bf00      	nop
  }
}
 8009aea:	bf00      	nop
 8009aec:	3708      	adds	r7, #8
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}

08009af2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009af2:	b480      	push	{r7}
 8009af4:	b083      	sub	sp, #12
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
 8009afa:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	781a      	ldrb	r2, [r3, #0]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	785a      	ldrb	r2, [r3, #1]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	3302      	adds	r3, #2
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	b29a      	uxth	r2, r3
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	3303      	adds	r3, #3
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	021b      	lsls	r3, r3, #8
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	4413      	add	r3, r2
 8009b22:	b29a      	uxth	r2, r3
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	3304      	adds	r3, #4
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	b29a      	uxth	r2, r3
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	3305      	adds	r3, #5
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	021b      	lsls	r3, r3, #8
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	4413      	add	r3, r2
 8009b3e:	b29a      	uxth	r2, r3
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	3306      	adds	r3, #6
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	b29a      	uxth	r2, r3
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	3307      	adds	r3, #7
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	021b      	lsls	r3, r3, #8
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	4413      	add	r3, r2
 8009b5a:	b29a      	uxth	r2, r3
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	80da      	strh	r2, [r3, #6]

}
 8009b60:	bf00      	nop
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bc80      	pop	{r7}
 8009b68:	4770      	bx	lr

08009b6a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b082      	sub	sp, #8
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
 8009b72:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009b74:	2180      	movs	r1, #128	; 0x80
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 fc2e 	bl	800a3d8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009b7c:	2100      	movs	r1, #0
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 fc2a 	bl	800a3d8 <USBD_LL_StallEP>
}
 8009b84:	bf00      	nop
 8009b86:	3708      	adds	r7, #8
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b086      	sub	sp, #24
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	60b9      	str	r1, [r7, #8]
 8009b96:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d032      	beq.n	8009c08 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	f000 f834 	bl	8009c10 <USBD_GetLen>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	3301      	adds	r3, #1
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	005b      	lsls	r3, r3, #1
 8009bb0:	b29a      	uxth	r2, r3
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009bb6:	7dfb      	ldrb	r3, [r7, #23]
 8009bb8:	1c5a      	adds	r2, r3, #1
 8009bba:	75fa      	strb	r2, [r7, #23]
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	4413      	add	r3, r2
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	7812      	ldrb	r2, [r2, #0]
 8009bc6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009bc8:	7dfb      	ldrb	r3, [r7, #23]
 8009bca:	1c5a      	adds	r2, r3, #1
 8009bcc:	75fa      	strb	r2, [r7, #23]
 8009bce:	461a      	mov	r2, r3
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	4413      	add	r3, r2
 8009bd4:	2203      	movs	r2, #3
 8009bd6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009bd8:	e012      	b.n	8009c00 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	1c5a      	adds	r2, r3, #1
 8009bde:	60fa      	str	r2, [r7, #12]
 8009be0:	7dfa      	ldrb	r2, [r7, #23]
 8009be2:	1c51      	adds	r1, r2, #1
 8009be4:	75f9      	strb	r1, [r7, #23]
 8009be6:	4611      	mov	r1, r2
 8009be8:	68ba      	ldr	r2, [r7, #8]
 8009bea:	440a      	add	r2, r1
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009bf0:	7dfb      	ldrb	r3, [r7, #23]
 8009bf2:	1c5a      	adds	r2, r3, #1
 8009bf4:	75fa      	strb	r2, [r7, #23]
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d1e8      	bne.n	8009bda <USBD_GetString+0x4e>
    }
  }
}
 8009c08:	bf00      	nop
 8009c0a:	3718      	adds	r7, #24
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b085      	sub	sp, #20
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009c1c:	e005      	b.n	8009c2a <USBD_GetLen+0x1a>
  {
    len++;
 8009c1e:	7bfb      	ldrb	r3, [r7, #15]
 8009c20:	3301      	adds	r3, #1
 8009c22:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	3301      	adds	r3, #1
 8009c28:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1f5      	bne.n	8009c1e <USBD_GetLen+0xe>
  }

  return len;
 8009c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3714      	adds	r7, #20
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bc80      	pop	{r7}
 8009c3c:	4770      	bx	lr

08009c3e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b084      	sub	sp, #16
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	60f8      	str	r0, [r7, #12]
 8009c46:	60b9      	str	r1, [r7, #8]
 8009c48:	4613      	mov	r3, r2
 8009c4a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2202      	movs	r2, #2
 8009c50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009c54:	88fa      	ldrh	r2, [r7, #6]
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009c5a:	88fa      	ldrh	r2, [r7, #6]
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c60:	88fb      	ldrh	r3, [r7, #6]
 8009c62:	68ba      	ldr	r2, [r7, #8]
 8009c64:	2100      	movs	r1, #0
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	f000 fc3e 	bl	800a4e8 <USBD_LL_Transmit>

  return USBD_OK;
 8009c6c:	2300      	movs	r3, #0
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b084      	sub	sp, #16
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	60f8      	str	r0, [r7, #12]
 8009c7e:	60b9      	str	r1, [r7, #8]
 8009c80:	4613      	mov	r3, r2
 8009c82:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c84:	88fb      	ldrh	r3, [r7, #6]
 8009c86:	68ba      	ldr	r2, [r7, #8]
 8009c88:	2100      	movs	r1, #0
 8009c8a:	68f8      	ldr	r0, [r7, #12]
 8009c8c:	f000 fc2c 	bl	800a4e8 <USBD_LL_Transmit>

  return USBD_OK;
 8009c90:	2300      	movs	r3, #0
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3710      	adds	r7, #16
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}

08009c9a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009c9a:	b580      	push	{r7, lr}
 8009c9c:	b084      	sub	sp, #16
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	60f8      	str	r0, [r7, #12]
 8009ca2:	60b9      	str	r1, [r7, #8]
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2203      	movs	r2, #3
 8009cac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009cb0:	88fa      	ldrh	r2, [r7, #6]
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009cb8:	88fa      	ldrh	r2, [r7, #6]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009cc0:	88fb      	ldrh	r3, [r7, #6]
 8009cc2:	68ba      	ldr	r2, [r7, #8]
 8009cc4:	2100      	movs	r1, #0
 8009cc6:	68f8      	ldr	r0, [r7, #12]
 8009cc8:	f000 fc31 	bl	800a52e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ccc:	2300      	movs	r3, #0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}

08009cd6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009cd6:	b580      	push	{r7, lr}
 8009cd8:	b084      	sub	sp, #16
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	60f8      	str	r0, [r7, #12]
 8009cde:	60b9      	str	r1, [r7, #8]
 8009ce0:	4613      	mov	r3, r2
 8009ce2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ce4:	88fb      	ldrh	r3, [r7, #6]
 8009ce6:	68ba      	ldr	r2, [r7, #8]
 8009ce8:	2100      	movs	r1, #0
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f000 fc1f 	bl	800a52e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cf0:	2300      	movs	r3, #0
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b082      	sub	sp, #8
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2204      	movs	r2, #4
 8009d06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	2100      	movs	r1, #0
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 fbe9 	bl	800a4e8 <USBD_LL_Transmit>

  return USBD_OK;
 8009d16:	2300      	movs	r3, #0
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3708      	adds	r7, #8
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2205      	movs	r2, #5
 8009d2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d30:	2300      	movs	r3, #0
 8009d32:	2200      	movs	r2, #0
 8009d34:	2100      	movs	r1, #0
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 fbf9 	bl	800a52e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d3c:	2300      	movs	r3, #0
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3708      	adds	r7, #8
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
	...

08009d48 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	4912      	ldr	r1, [pc, #72]	; (8009d98 <MX_USB_DEVICE_Init+0x50>)
 8009d50:	4812      	ldr	r0, [pc, #72]	; (8009d9c <MX_USB_DEVICE_Init+0x54>)
 8009d52:	f7fe ff5f 	bl	8008c14 <USBD_Init>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d001      	beq.n	8009d60 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009d5c:	f7f8 f856 	bl	8001e0c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009d60:	490f      	ldr	r1, [pc, #60]	; (8009da0 <MX_USB_DEVICE_Init+0x58>)
 8009d62:	480e      	ldr	r0, [pc, #56]	; (8009d9c <MX_USB_DEVICE_Init+0x54>)
 8009d64:	f7fe ff81 	bl	8008c6a <USBD_RegisterClass>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d001      	beq.n	8009d72 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009d6e:	f7f8 f84d 	bl	8001e0c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009d72:	490c      	ldr	r1, [pc, #48]	; (8009da4 <MX_USB_DEVICE_Init+0x5c>)
 8009d74:	4809      	ldr	r0, [pc, #36]	; (8009d9c <MX_USB_DEVICE_Init+0x54>)
 8009d76:	f7fe fee1 	bl	8008b3c <USBD_CDC_RegisterInterface>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d001      	beq.n	8009d84 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009d80:	f7f8 f844 	bl	8001e0c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009d84:	4805      	ldr	r0, [pc, #20]	; (8009d9c <MX_USB_DEVICE_Init+0x54>)
 8009d86:	f7fe ff89 	bl	8008c9c <USBD_Start>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d001      	beq.n	8009d94 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009d90:	f7f8 f83c 	bl	8001e0c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009d94:	bf00      	nop
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	20000130 	.word	0x20000130
 8009d9c:	20000730 	.word	0x20000730
 8009da0:	2000001c 	.word	0x2000001c
 8009da4:	20000120 	.word	0x20000120

08009da8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009dac:	2200      	movs	r2, #0
 8009dae:	4905      	ldr	r1, [pc, #20]	; (8009dc4 <CDC_Init_FS+0x1c>)
 8009db0:	4805      	ldr	r0, [pc, #20]	; (8009dc8 <CDC_Init_FS+0x20>)
 8009db2:	f7fe fed9 	bl	8008b68 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009db6:	4905      	ldr	r1, [pc, #20]	; (8009dcc <CDC_Init_FS+0x24>)
 8009db8:	4803      	ldr	r0, [pc, #12]	; (8009dc8 <CDC_Init_FS+0x20>)
 8009dba:	f7fe feee 	bl	8008b9a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009dbe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	20000ddc 	.word	0x20000ddc
 8009dc8:	20000730 	.word	0x20000730
 8009dcc:	200009f4 	.word	0x200009f4

08009dd0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009dd4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bc80      	pop	{r7}
 8009ddc:	4770      	bx	lr
	...

08009de0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b083      	sub	sp, #12
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	4603      	mov	r3, r0
 8009de8:	6039      	str	r1, [r7, #0]
 8009dea:	71fb      	strb	r3, [r7, #7]
 8009dec:	4613      	mov	r3, r2
 8009dee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009df0:	79fb      	ldrb	r3, [r7, #7]
 8009df2:	2b23      	cmp	r3, #35	; 0x23
 8009df4:	d84a      	bhi.n	8009e8c <CDC_Control_FS+0xac>
 8009df6:	a201      	add	r2, pc, #4	; (adr r2, 8009dfc <CDC_Control_FS+0x1c>)
 8009df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dfc:	08009e8d 	.word	0x08009e8d
 8009e00:	08009e8d 	.word	0x08009e8d
 8009e04:	08009e8d 	.word	0x08009e8d
 8009e08:	08009e8d 	.word	0x08009e8d
 8009e0c:	08009e8d 	.word	0x08009e8d
 8009e10:	08009e8d 	.word	0x08009e8d
 8009e14:	08009e8d 	.word	0x08009e8d
 8009e18:	08009e8d 	.word	0x08009e8d
 8009e1c:	08009e8d 	.word	0x08009e8d
 8009e20:	08009e8d 	.word	0x08009e8d
 8009e24:	08009e8d 	.word	0x08009e8d
 8009e28:	08009e8d 	.word	0x08009e8d
 8009e2c:	08009e8d 	.word	0x08009e8d
 8009e30:	08009e8d 	.word	0x08009e8d
 8009e34:	08009e8d 	.word	0x08009e8d
 8009e38:	08009e8d 	.word	0x08009e8d
 8009e3c:	08009e8d 	.word	0x08009e8d
 8009e40:	08009e8d 	.word	0x08009e8d
 8009e44:	08009e8d 	.word	0x08009e8d
 8009e48:	08009e8d 	.word	0x08009e8d
 8009e4c:	08009e8d 	.word	0x08009e8d
 8009e50:	08009e8d 	.word	0x08009e8d
 8009e54:	08009e8d 	.word	0x08009e8d
 8009e58:	08009e8d 	.word	0x08009e8d
 8009e5c:	08009e8d 	.word	0x08009e8d
 8009e60:	08009e8d 	.word	0x08009e8d
 8009e64:	08009e8d 	.word	0x08009e8d
 8009e68:	08009e8d 	.word	0x08009e8d
 8009e6c:	08009e8d 	.word	0x08009e8d
 8009e70:	08009e8d 	.word	0x08009e8d
 8009e74:	08009e8d 	.word	0x08009e8d
 8009e78:	08009e8d 	.word	0x08009e8d
 8009e7c:	08009e8d 	.word	0x08009e8d
 8009e80:	08009e8d 	.word	0x08009e8d
 8009e84:	08009e8d 	.word	0x08009e8d
 8009e88:	08009e8d 	.word	0x08009e8d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009e8c:	bf00      	nop
  }

  return (USBD_OK);
 8009e8e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	370c      	adds	r7, #12
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bc80      	pop	{r7}
 8009e98:	4770      	bx	lr
 8009e9a:	bf00      	nop

08009e9c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009ea6:	6879      	ldr	r1, [r7, #4]
 8009ea8:	4805      	ldr	r0, [pc, #20]	; (8009ec0 <CDC_Receive_FS+0x24>)
 8009eaa:	f7fe fe76 	bl	8008b9a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009eae:	4804      	ldr	r0, [pc, #16]	; (8009ec0 <CDC_Receive_FS+0x24>)
 8009eb0:	f7fe fe86 	bl	8008bc0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009eb4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3708      	adds	r7, #8
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	20000730 	.word	0x20000730

08009ec4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	4603      	mov	r3, r0
 8009ecc:	6039      	str	r1, [r7, #0]
 8009ece:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	2212      	movs	r2, #18
 8009ed4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009ed6:	4b03      	ldr	r3, [pc, #12]	; (8009ee4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bc80      	pop	{r7}
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop
 8009ee4:	2000014c 	.word	0x2000014c

08009ee8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	4603      	mov	r3, r0
 8009ef0:	6039      	str	r1, [r7, #0]
 8009ef2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	2204      	movs	r2, #4
 8009ef8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009efa:	4b03      	ldr	r3, [pc, #12]	; (8009f08 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	370c      	adds	r7, #12
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bc80      	pop	{r7}
 8009f04:	4770      	bx	lr
 8009f06:	bf00      	nop
 8009f08:	20000160 	.word	0x20000160

08009f0c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	4603      	mov	r3, r0
 8009f14:	6039      	str	r1, [r7, #0]
 8009f16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009f18:	79fb      	ldrb	r3, [r7, #7]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d105      	bne.n	8009f2a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009f1e:	683a      	ldr	r2, [r7, #0]
 8009f20:	4907      	ldr	r1, [pc, #28]	; (8009f40 <USBD_FS_ProductStrDescriptor+0x34>)
 8009f22:	4808      	ldr	r0, [pc, #32]	; (8009f44 <USBD_FS_ProductStrDescriptor+0x38>)
 8009f24:	f7ff fe32 	bl	8009b8c <USBD_GetString>
 8009f28:	e004      	b.n	8009f34 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009f2a:	683a      	ldr	r2, [r7, #0]
 8009f2c:	4904      	ldr	r1, [pc, #16]	; (8009f40 <USBD_FS_ProductStrDescriptor+0x34>)
 8009f2e:	4805      	ldr	r0, [pc, #20]	; (8009f44 <USBD_FS_ProductStrDescriptor+0x38>)
 8009f30:	f7ff fe2c 	bl	8009b8c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f34:	4b02      	ldr	r3, [pc, #8]	; (8009f40 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3708      	adds	r7, #8
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	200011c4 	.word	0x200011c4
 8009f44:	0800af58 	.word	0x0800af58

08009f48 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	4603      	mov	r3, r0
 8009f50:	6039      	str	r1, [r7, #0]
 8009f52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009f54:	683a      	ldr	r2, [r7, #0]
 8009f56:	4904      	ldr	r1, [pc, #16]	; (8009f68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009f58:	4804      	ldr	r0, [pc, #16]	; (8009f6c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009f5a:	f7ff fe17 	bl	8009b8c <USBD_GetString>
  return USBD_StrDesc;
 8009f5e:	4b02      	ldr	r3, [pc, #8]	; (8009f68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3708      	adds	r7, #8
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}
 8009f68:	200011c4 	.word	0x200011c4
 8009f6c:	0800af70 	.word	0x0800af70

08009f70 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	4603      	mov	r3, r0
 8009f78:	6039      	str	r1, [r7, #0]
 8009f7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	221a      	movs	r2, #26
 8009f80:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009f82:	f000 f843 	bl	800a00c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009f86:	4b02      	ldr	r3, [pc, #8]	; (8009f90 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3708      	adds	r7, #8
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	20000164 	.word	0x20000164

08009f94 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	6039      	str	r1, [r7, #0]
 8009f9e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009fa0:	79fb      	ldrb	r3, [r7, #7]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d105      	bne.n	8009fb2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009fa6:	683a      	ldr	r2, [r7, #0]
 8009fa8:	4907      	ldr	r1, [pc, #28]	; (8009fc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009faa:	4808      	ldr	r0, [pc, #32]	; (8009fcc <USBD_FS_ConfigStrDescriptor+0x38>)
 8009fac:	f7ff fdee 	bl	8009b8c <USBD_GetString>
 8009fb0:	e004      	b.n	8009fbc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009fb2:	683a      	ldr	r2, [r7, #0]
 8009fb4:	4904      	ldr	r1, [pc, #16]	; (8009fc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009fb6:	4805      	ldr	r0, [pc, #20]	; (8009fcc <USBD_FS_ConfigStrDescriptor+0x38>)
 8009fb8:	f7ff fde8 	bl	8009b8c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009fbc:	4b02      	ldr	r3, [pc, #8]	; (8009fc8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3708      	adds	r7, #8
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	200011c4 	.word	0x200011c4
 8009fcc:	0800af84 	.word	0x0800af84

08009fd0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b082      	sub	sp, #8
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	6039      	str	r1, [r7, #0]
 8009fda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009fdc:	79fb      	ldrb	r3, [r7, #7]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d105      	bne.n	8009fee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009fe2:	683a      	ldr	r2, [r7, #0]
 8009fe4:	4907      	ldr	r1, [pc, #28]	; (800a004 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009fe6:	4808      	ldr	r0, [pc, #32]	; (800a008 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009fe8:	f7ff fdd0 	bl	8009b8c <USBD_GetString>
 8009fec:	e004      	b.n	8009ff8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009fee:	683a      	ldr	r2, [r7, #0]
 8009ff0:	4904      	ldr	r1, [pc, #16]	; (800a004 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ff2:	4805      	ldr	r0, [pc, #20]	; (800a008 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ff4:	f7ff fdca 	bl	8009b8c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ff8:	4b02      	ldr	r3, [pc, #8]	; (800a004 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3708      	adds	r7, #8
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	200011c4 	.word	0x200011c4
 800a008:	0800af90 	.word	0x0800af90

0800a00c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a012:	4b0f      	ldr	r3, [pc, #60]	; (800a050 <Get_SerialNum+0x44>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a018:	4b0e      	ldr	r3, [pc, #56]	; (800a054 <Get_SerialNum+0x48>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a01e:	4b0e      	ldr	r3, [pc, #56]	; (800a058 <Get_SerialNum+0x4c>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4413      	add	r3, r2
 800a02a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d009      	beq.n	800a046 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a032:	2208      	movs	r2, #8
 800a034:	4909      	ldr	r1, [pc, #36]	; (800a05c <Get_SerialNum+0x50>)
 800a036:	68f8      	ldr	r0, [r7, #12]
 800a038:	f000 f814 	bl	800a064 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a03c:	2204      	movs	r2, #4
 800a03e:	4908      	ldr	r1, [pc, #32]	; (800a060 <Get_SerialNum+0x54>)
 800a040:	68b8      	ldr	r0, [r7, #8]
 800a042:	f000 f80f 	bl	800a064 <IntToUnicode>
  }
}
 800a046:	bf00      	nop
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	1ffff7e8 	.word	0x1ffff7e8
 800a054:	1ffff7ec 	.word	0x1ffff7ec
 800a058:	1ffff7f0 	.word	0x1ffff7f0
 800a05c:	20000166 	.word	0x20000166
 800a060:	20000176 	.word	0x20000176

0800a064 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a064:	b480      	push	{r7}
 800a066:	b087      	sub	sp, #28
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	4613      	mov	r3, r2
 800a070:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a072:	2300      	movs	r3, #0
 800a074:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a076:	2300      	movs	r3, #0
 800a078:	75fb      	strb	r3, [r7, #23]
 800a07a:	e027      	b.n	800a0cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	0f1b      	lsrs	r3, r3, #28
 800a080:	2b09      	cmp	r3, #9
 800a082:	d80b      	bhi.n	800a09c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	0f1b      	lsrs	r3, r3, #28
 800a088:	b2da      	uxtb	r2, r3
 800a08a:	7dfb      	ldrb	r3, [r7, #23]
 800a08c:	005b      	lsls	r3, r3, #1
 800a08e:	4619      	mov	r1, r3
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	440b      	add	r3, r1
 800a094:	3230      	adds	r2, #48	; 0x30
 800a096:	b2d2      	uxtb	r2, r2
 800a098:	701a      	strb	r2, [r3, #0]
 800a09a:	e00a      	b.n	800a0b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	0f1b      	lsrs	r3, r3, #28
 800a0a0:	b2da      	uxtb	r2, r3
 800a0a2:	7dfb      	ldrb	r3, [r7, #23]
 800a0a4:	005b      	lsls	r3, r3, #1
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	440b      	add	r3, r1
 800a0ac:	3237      	adds	r2, #55	; 0x37
 800a0ae:	b2d2      	uxtb	r2, r2
 800a0b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	011b      	lsls	r3, r3, #4
 800a0b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a0b8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ba:	005b      	lsls	r3, r3, #1
 800a0bc:	3301      	adds	r3, #1
 800a0be:	68ba      	ldr	r2, [r7, #8]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a0c6:	7dfb      	ldrb	r3, [r7, #23]
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	75fb      	strb	r3, [r7, #23]
 800a0cc:	7dfa      	ldrb	r2, [r7, #23]
 800a0ce:	79fb      	ldrb	r3, [r7, #7]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d3d3      	bcc.n	800a07c <IntToUnicode+0x18>
  }
}
 800a0d4:	bf00      	nop
 800a0d6:	bf00      	nop
 800a0d8:	371c      	adds	r7, #28
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bc80      	pop	{r7}
 800a0de:	4770      	bx	lr

0800a0e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b084      	sub	sp, #16
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4a0d      	ldr	r2, [pc, #52]	; (800a124 <HAL_PCD_MspInit+0x44>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d113      	bne.n	800a11a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a0f2:	4b0d      	ldr	r3, [pc, #52]	; (800a128 <HAL_PCD_MspInit+0x48>)
 800a0f4:	69db      	ldr	r3, [r3, #28]
 800a0f6:	4a0c      	ldr	r2, [pc, #48]	; (800a128 <HAL_PCD_MspInit+0x48>)
 800a0f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a0fc:	61d3      	str	r3, [r2, #28]
 800a0fe:	4b0a      	ldr	r3, [pc, #40]	; (800a128 <HAL_PCD_MspInit+0x48>)
 800a100:	69db      	ldr	r3, [r3, #28]
 800a102:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a106:	60fb      	str	r3, [r7, #12]
 800a108:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a10a:	2200      	movs	r2, #0
 800a10c:	2100      	movs	r1, #0
 800a10e:	2014      	movs	r0, #20
 800a110:	f7f8 fa59 	bl	80025c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a114:	2014      	movs	r0, #20
 800a116:	f7f8 fa72 	bl	80025fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a11a:	bf00      	nop
 800a11c:	3710      	adds	r7, #16
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	40005c00 	.word	0x40005c00
 800a128:	40021000 	.word	0x40021000

0800a12c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800a140:	4619      	mov	r1, r3
 800a142:	4610      	mov	r0, r2
 800a144:	f7fe fdf2 	bl	8008d2c <USBD_LL_SetupStage>
}
 800a148:	bf00      	nop
 800a14a:	3708      	adds	r7, #8
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	460b      	mov	r3, r1
 800a15a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 800a162:	78fa      	ldrb	r2, [r7, #3]
 800a164:	6879      	ldr	r1, [r7, #4]
 800a166:	4613      	mov	r3, r2
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	4413      	add	r3, r2
 800a16c:	00db      	lsls	r3, r3, #3
 800a16e:	440b      	add	r3, r1
 800a170:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	78fb      	ldrb	r3, [r7, #3]
 800a178:	4619      	mov	r1, r3
 800a17a:	f7fe fe24 	bl	8008dc6 <USBD_LL_DataOutStage>
}
 800a17e:	bf00      	nop
 800a180:	3708      	adds	r7, #8
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}

0800a186 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a186:	b580      	push	{r7, lr}
 800a188:	b082      	sub	sp, #8
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
 800a18e:	460b      	mov	r3, r1
 800a190:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 800a198:	78fa      	ldrb	r2, [r7, #3]
 800a19a:	6879      	ldr	r1, [r7, #4]
 800a19c:	4613      	mov	r3, r2
 800a19e:	009b      	lsls	r3, r3, #2
 800a1a0:	4413      	add	r3, r2
 800a1a2:	00db      	lsls	r3, r3, #3
 800a1a4:	440b      	add	r3, r1
 800a1a6:	3324      	adds	r3, #36	; 0x24
 800a1a8:	681a      	ldr	r2, [r3, #0]
 800a1aa:	78fb      	ldrb	r3, [r7, #3]
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	f7fe fe7b 	bl	8008ea8 <USBD_LL_DataInStage>
}
 800a1b2:	bf00      	nop
 800a1b4:	3708      	adds	r7, #8
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b082      	sub	sp, #8
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7fe ff8b 	bl	80090e4 <USBD_LL_SOF>
}
 800a1ce:	bf00      	nop
 800a1d0:	3708      	adds	r7, #8
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}

0800a1d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1d6:	b580      	push	{r7, lr}
 800a1d8:	b084      	sub	sp, #16
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	799b      	ldrb	r3, [r3, #6]
 800a1e6:	2b02      	cmp	r3, #2
 800a1e8:	d001      	beq.n	800a1ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a1ea:	f7f7 fe0f 	bl	8001e0c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1f4:	7bfa      	ldrb	r2, [r7, #15]
 800a1f6:	4611      	mov	r1, r2
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7fe ff3b 	bl	8009074 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a204:	4618      	mov	r0, r3
 800a206:	f7fe fef4 	bl	8008ff2 <USBD_LL_Reset>
}
 800a20a:	bf00      	nop
 800a20c:	3710      	adds	r7, #16
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
	...

0800a214 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a222:	4618      	mov	r0, r3
 800a224:	f7fe ff35 	bl	8009092 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	7a9b      	ldrb	r3, [r3, #10]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d005      	beq.n	800a23c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a230:	4b04      	ldr	r3, [pc, #16]	; (800a244 <HAL_PCD_SuspendCallback+0x30>)
 800a232:	691b      	ldr	r3, [r3, #16]
 800a234:	4a03      	ldr	r2, [pc, #12]	; (800a244 <HAL_PCD_SuspendCallback+0x30>)
 800a236:	f043 0306 	orr.w	r3, r3, #6
 800a23a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a23c:	bf00      	nop
 800a23e:	3708      	adds	r7, #8
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}
 800a244:	e000ed00 	.word	0xe000ed00

0800a248 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a256:	4618      	mov	r0, r3
 800a258:	f7fe ff2f 	bl	80090ba <USBD_LL_Resume>
}
 800a25c:	bf00      	nop
 800a25e:	3708      	adds	r7, #8
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a26c:	4a28      	ldr	r2, [pc, #160]	; (800a310 <USBD_LL_Init+0xac>)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8c2 32d4 	str.w	r3, [r2, #724]	; 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	4a26      	ldr	r2, [pc, #152]	; (800a310 <USBD_LL_Init+0xac>)
 800a278:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a27c:	4b24      	ldr	r3, [pc, #144]	; (800a310 <USBD_LL_Init+0xac>)
 800a27e:	4a25      	ldr	r2, [pc, #148]	; (800a314 <USBD_LL_Init+0xb0>)
 800a280:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a282:	4b23      	ldr	r3, [pc, #140]	; (800a310 <USBD_LL_Init+0xac>)
 800a284:	2208      	movs	r2, #8
 800a286:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a288:	4b21      	ldr	r3, [pc, #132]	; (800a310 <USBD_LL_Init+0xac>)
 800a28a:	2202      	movs	r2, #2
 800a28c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a28e:	4b20      	ldr	r3, [pc, #128]	; (800a310 <USBD_LL_Init+0xac>)
 800a290:	2200      	movs	r2, #0
 800a292:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a294:	4b1e      	ldr	r3, [pc, #120]	; (800a310 <USBD_LL_Init+0xac>)
 800a296:	2200      	movs	r2, #0
 800a298:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a29a:	4b1d      	ldr	r3, [pc, #116]	; (800a310 <USBD_LL_Init+0xac>)
 800a29c:	2200      	movs	r2, #0
 800a29e:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a2a0:	481b      	ldr	r0, [pc, #108]	; (800a310 <USBD_LL_Init+0xac>)
 800a2a2:	f7f9 f817 	bl	80032d4 <HAL_PCD_Init>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d001      	beq.n	800a2b0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a2ac:	f7f7 fdae 	bl	8001e0c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a2b6:	2318      	movs	r3, #24
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	2100      	movs	r1, #0
 800a2bc:	f7fa fd2b 	bl	8004d16 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a2c6:	2358      	movs	r3, #88	; 0x58
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	2180      	movs	r1, #128	; 0x80
 800a2cc:	f7fa fd23 	bl	8004d16 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a2d6:	23c0      	movs	r3, #192	; 0xc0
 800a2d8:	2200      	movs	r2, #0
 800a2da:	2181      	movs	r1, #129	; 0x81
 800a2dc:	f7fa fd1b 	bl	8004d16 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a2e6:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	2101      	movs	r1, #1
 800a2ee:	f7fa fd12 	bl	8004d16 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a2f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	2182      	movs	r1, #130	; 0x82
 800a300:	f7fa fd09 	bl	8004d16 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	200013c4 	.word	0x200013c4
 800a314:	40005c00 	.word	0x40005c00

0800a318 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a320:	2300      	movs	r3, #0
 800a322:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a324:	2300      	movs	r3, #0
 800a326:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a32e:	4618      	mov	r0, r3
 800a330:	f7f9 f8c6 	bl	80034c0 <HAL_PCD_Start>
 800a334:	4603      	mov	r3, r0
 800a336:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a338:	7bfb      	ldrb	r3, [r7, #15]
 800a33a:	4618      	mov	r0, r3
 800a33c:	f000 f94e 	bl	800a5dc <USBD_Get_USB_Status>
 800a340:	4603      	mov	r3, r0
 800a342:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a344:	7bbb      	ldrb	r3, [r7, #14]
}
 800a346:	4618      	mov	r0, r3
 800a348:	3710      	adds	r7, #16
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b084      	sub	sp, #16
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
 800a356:	4608      	mov	r0, r1
 800a358:	4611      	mov	r1, r2
 800a35a:	461a      	mov	r2, r3
 800a35c:	4603      	mov	r3, r0
 800a35e:	70fb      	strb	r3, [r7, #3]
 800a360:	460b      	mov	r3, r1
 800a362:	70bb      	strb	r3, [r7, #2]
 800a364:	4613      	mov	r3, r2
 800a366:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a368:	2300      	movs	r3, #0
 800a36a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a36c:	2300      	movs	r3, #0
 800a36e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a376:	78bb      	ldrb	r3, [r7, #2]
 800a378:	883a      	ldrh	r2, [r7, #0]
 800a37a:	78f9      	ldrb	r1, [r7, #3]
 800a37c:	f7f9 fa1c 	bl	80037b8 <HAL_PCD_EP_Open>
 800a380:	4603      	mov	r3, r0
 800a382:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a384:	7bfb      	ldrb	r3, [r7, #15]
 800a386:	4618      	mov	r0, r3
 800a388:	f000 f928 	bl	800a5dc <USBD_Get_USB_Status>
 800a38c:	4603      	mov	r3, r0
 800a38e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a390:	7bbb      	ldrb	r3, [r7, #14]
}
 800a392:	4618      	mov	r0, r3
 800a394:	3710      	adds	r7, #16
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}

0800a39a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a39a:	b580      	push	{r7, lr}
 800a39c:	b084      	sub	sp, #16
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
 800a3a2:	460b      	mov	r3, r1
 800a3a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3b4:	78fa      	ldrb	r2, [r7, #3]
 800a3b6:	4611      	mov	r1, r2
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f7f9 fa5a 	bl	8003872 <HAL_PCD_EP_Close>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3c2:	7bfb      	ldrb	r3, [r7, #15]
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f000 f909 	bl	800a5dc <USBD_Get_USB_Status>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3710      	adds	r7, #16
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b084      	sub	sp, #16
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3f2:	78fa      	ldrb	r2, [r7, #3]
 800a3f4:	4611      	mov	r1, r2
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7f9 fb02 	bl	8003a00 <HAL_PCD_EP_SetStall>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a400:	7bfb      	ldrb	r3, [r7, #15]
 800a402:	4618      	mov	r0, r3
 800a404:	f000 f8ea 	bl	800a5dc <USBD_Get_USB_Status>
 800a408:	4603      	mov	r3, r0
 800a40a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a40c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3710      	adds	r7, #16
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}

0800a416 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a416:	b580      	push	{r7, lr}
 800a418:	b084      	sub	sp, #16
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
 800a41e:	460b      	mov	r3, r1
 800a420:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a422:	2300      	movs	r3, #0
 800a424:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a426:	2300      	movs	r3, #0
 800a428:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a430:	78fa      	ldrb	r2, [r7, #3]
 800a432:	4611      	mov	r1, r2
 800a434:	4618      	mov	r0, r3
 800a436:	f7f9 fb43 	bl	8003ac0 <HAL_PCD_EP_ClrStall>
 800a43a:	4603      	mov	r3, r0
 800a43c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a43e:	7bfb      	ldrb	r3, [r7, #15]
 800a440:	4618      	mov	r0, r3
 800a442:	f000 f8cb 	bl	800a5dc <USBD_Get_USB_Status>
 800a446:	4603      	mov	r3, r0
 800a448:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a44a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3710      	adds	r7, #16
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a454:	b480      	push	{r7}
 800a456:	b085      	sub	sp, #20
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	460b      	mov	r3, r1
 800a45e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a466:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a468:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	da0b      	bge.n	800a488 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a470:	78fb      	ldrb	r3, [r7, #3]
 800a472:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a476:	68f9      	ldr	r1, [r7, #12]
 800a478:	4613      	mov	r3, r2
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	4413      	add	r3, r2
 800a47e:	00db      	lsls	r3, r3, #3
 800a480:	440b      	add	r3, r1
 800a482:	3312      	adds	r3, #18
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	e00b      	b.n	800a4a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a488:	78fb      	ldrb	r3, [r7, #3]
 800a48a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a48e:	68f9      	ldr	r1, [r7, #12]
 800a490:	4613      	mov	r3, r2
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	4413      	add	r3, r2
 800a496:	00db      	lsls	r3, r3, #3
 800a498:	440b      	add	r3, r1
 800a49a:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800a49e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3714      	adds	r7, #20
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bc80      	pop	{r7}
 800a4a8:	4770      	bx	lr

0800a4aa <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b084      	sub	sp, #16
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4c4:	78fa      	ldrb	r2, [r7, #3]
 800a4c6:	4611      	mov	r1, r2
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f7f9 f951 	bl	8003770 <HAL_PCD_SetAddress>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4d2:	7bfb      	ldrb	r3, [r7, #15]
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f000 f881 	bl	800a5dc <USBD_Get_USB_Status>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4de:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3710      	adds	r7, #16
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b086      	sub	sp, #24
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	60f8      	str	r0, [r7, #12]
 800a4f0:	607a      	str	r2, [r7, #4]
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	72fb      	strb	r3, [r7, #11]
 800a4f8:	4613      	mov	r3, r2
 800a4fa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a500:	2300      	movs	r3, #0
 800a502:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a50a:	893b      	ldrh	r3, [r7, #8]
 800a50c:	7af9      	ldrb	r1, [r7, #11]
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	f7f9 fa3f 	bl	8003992 <HAL_PCD_EP_Transmit>
 800a514:	4603      	mov	r3, r0
 800a516:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a518:	7dfb      	ldrb	r3, [r7, #23]
 800a51a:	4618      	mov	r0, r3
 800a51c:	f000 f85e 	bl	800a5dc <USBD_Get_USB_Status>
 800a520:	4603      	mov	r3, r0
 800a522:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a524:	7dbb      	ldrb	r3, [r7, #22]
}
 800a526:	4618      	mov	r0, r3
 800a528:	3718      	adds	r7, #24
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b086      	sub	sp, #24
 800a532:	af00      	add	r7, sp, #0
 800a534:	60f8      	str	r0, [r7, #12]
 800a536:	607a      	str	r2, [r7, #4]
 800a538:	461a      	mov	r2, r3
 800a53a:	460b      	mov	r3, r1
 800a53c:	72fb      	strb	r3, [r7, #11]
 800a53e:	4613      	mov	r3, r2
 800a540:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a542:	2300      	movs	r3, #0
 800a544:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a546:	2300      	movs	r3, #0
 800a548:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a550:	893b      	ldrh	r3, [r7, #8]
 800a552:	7af9      	ldrb	r1, [r7, #11]
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	f7f9 f9d4 	bl	8003902 <HAL_PCD_EP_Receive>
 800a55a:	4603      	mov	r3, r0
 800a55c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a55e:	7dfb      	ldrb	r3, [r7, #23]
 800a560:	4618      	mov	r0, r3
 800a562:	f000 f83b 	bl	800a5dc <USBD_Get_USB_Status>
 800a566:	4603      	mov	r3, r0
 800a568:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a56a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3718      	adds	r7, #24
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	460b      	mov	r3, r1
 800a57e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a586:	78fa      	ldrb	r2, [r7, #3]
 800a588:	4611      	mov	r1, r2
 800a58a:	4618      	mov	r0, r3
 800a58c:	f7f9 f9ea 	bl	8003964 <HAL_PCD_EP_GetRxCount>
 800a590:	4603      	mov	r3, r0
}
 800a592:	4618      	mov	r0, r3
 800a594:	3708      	adds	r7, #8
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
	...

0800a59c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a5a4:	4b02      	ldr	r3, [pc, #8]	; (800a5b0 <USBD_static_malloc+0x14>)
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	370c      	adds	r7, #12
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bc80      	pop	{r7}
 800a5ae:	4770      	bx	lr
 800a5b0:	20000504 	.word	0x20000504

0800a5b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]

}
 800a5bc:	bf00      	nop
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bc80      	pop	{r7}
 800a5c4:	4770      	bx	lr

0800a5c6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5c6:	b480      	push	{r7}
 800a5c8:	b083      	sub	sp, #12
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
 800a5ce:	460b      	mov	r3, r1
 800a5d0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a5d2:	bf00      	nop
 800a5d4:	370c      	adds	r7, #12
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bc80      	pop	{r7}
 800a5da:	4770      	bx	lr

0800a5dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b085      	sub	sp, #20
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a5ea:	79fb      	ldrb	r3, [r7, #7]
 800a5ec:	2b03      	cmp	r3, #3
 800a5ee:	d817      	bhi.n	800a620 <USBD_Get_USB_Status+0x44>
 800a5f0:	a201      	add	r2, pc, #4	; (adr r2, 800a5f8 <USBD_Get_USB_Status+0x1c>)
 800a5f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5f6:	bf00      	nop
 800a5f8:	0800a609 	.word	0x0800a609
 800a5fc:	0800a60f 	.word	0x0800a60f
 800a600:	0800a615 	.word	0x0800a615
 800a604:	0800a61b 	.word	0x0800a61b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a608:	2300      	movs	r3, #0
 800a60a:	73fb      	strb	r3, [r7, #15]
    break;
 800a60c:	e00b      	b.n	800a626 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a60e:	2302      	movs	r3, #2
 800a610:	73fb      	strb	r3, [r7, #15]
    break;
 800a612:	e008      	b.n	800a626 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a614:	2301      	movs	r3, #1
 800a616:	73fb      	strb	r3, [r7, #15]
    break;
 800a618:	e005      	b.n	800a626 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a61a:	2302      	movs	r3, #2
 800a61c:	73fb      	strb	r3, [r7, #15]
    break;
 800a61e:	e002      	b.n	800a626 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a620:	2302      	movs	r3, #2
 800a622:	73fb      	strb	r3, [r7, #15]
    break;
 800a624:	bf00      	nop
  }
  return usb_status;
 800a626:	7bfb      	ldrb	r3, [r7, #15]
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3714      	adds	r7, #20
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bc80      	pop	{r7}
 800a630:	4770      	bx	lr
 800a632:	bf00      	nop

0800a634 <__errno>:
 800a634:	4b01      	ldr	r3, [pc, #4]	; (800a63c <__errno+0x8>)
 800a636:	6818      	ldr	r0, [r3, #0]
 800a638:	4770      	bx	lr
 800a63a:	bf00      	nop
 800a63c:	20000180 	.word	0x20000180

0800a640 <__libc_init_array>:
 800a640:	b570      	push	{r4, r5, r6, lr}
 800a642:	2600      	movs	r6, #0
 800a644:	4d0c      	ldr	r5, [pc, #48]	; (800a678 <__libc_init_array+0x38>)
 800a646:	4c0d      	ldr	r4, [pc, #52]	; (800a67c <__libc_init_array+0x3c>)
 800a648:	1b64      	subs	r4, r4, r5
 800a64a:	10a4      	asrs	r4, r4, #2
 800a64c:	42a6      	cmp	r6, r4
 800a64e:	d109      	bne.n	800a664 <__libc_init_array+0x24>
 800a650:	f000 fc5c 	bl	800af0c <_init>
 800a654:	2600      	movs	r6, #0
 800a656:	4d0a      	ldr	r5, [pc, #40]	; (800a680 <__libc_init_array+0x40>)
 800a658:	4c0a      	ldr	r4, [pc, #40]	; (800a684 <__libc_init_array+0x44>)
 800a65a:	1b64      	subs	r4, r4, r5
 800a65c:	10a4      	asrs	r4, r4, #2
 800a65e:	42a6      	cmp	r6, r4
 800a660:	d105      	bne.n	800a66e <__libc_init_array+0x2e>
 800a662:	bd70      	pop	{r4, r5, r6, pc}
 800a664:	f855 3b04 	ldr.w	r3, [r5], #4
 800a668:	4798      	blx	r3
 800a66a:	3601      	adds	r6, #1
 800a66c:	e7ee      	b.n	800a64c <__libc_init_array+0xc>
 800a66e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a672:	4798      	blx	r3
 800a674:	3601      	adds	r6, #1
 800a676:	e7f2      	b.n	800a65e <__libc_init_array+0x1e>
 800a678:	0800b0a8 	.word	0x0800b0a8
 800a67c:	0800b0a8 	.word	0x0800b0a8
 800a680:	0800b0a8 	.word	0x0800b0a8
 800a684:	0800b0b8 	.word	0x0800b0b8

0800a688 <memset>:
 800a688:	4603      	mov	r3, r0
 800a68a:	4402      	add	r2, r0
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d100      	bne.n	800a692 <memset+0xa>
 800a690:	4770      	bx	lr
 800a692:	f803 1b01 	strb.w	r1, [r3], #1
 800a696:	e7f9      	b.n	800a68c <memset+0x4>

0800a698 <siprintf>:
 800a698:	b40e      	push	{r1, r2, r3}
 800a69a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a69e:	b500      	push	{lr}
 800a6a0:	b09c      	sub	sp, #112	; 0x70
 800a6a2:	ab1d      	add	r3, sp, #116	; 0x74
 800a6a4:	9002      	str	r0, [sp, #8]
 800a6a6:	9006      	str	r0, [sp, #24]
 800a6a8:	9107      	str	r1, [sp, #28]
 800a6aa:	9104      	str	r1, [sp, #16]
 800a6ac:	4808      	ldr	r0, [pc, #32]	; (800a6d0 <siprintf+0x38>)
 800a6ae:	4909      	ldr	r1, [pc, #36]	; (800a6d4 <siprintf+0x3c>)
 800a6b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6b4:	9105      	str	r1, [sp, #20]
 800a6b6:	6800      	ldr	r0, [r0, #0]
 800a6b8:	a902      	add	r1, sp, #8
 800a6ba:	9301      	str	r3, [sp, #4]
 800a6bc:	f000 f910 	bl	800a8e0 <_svfiprintf_r>
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	9b02      	ldr	r3, [sp, #8]
 800a6c4:	701a      	strb	r2, [r3, #0]
 800a6c6:	b01c      	add	sp, #112	; 0x70
 800a6c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6cc:	b003      	add	sp, #12
 800a6ce:	4770      	bx	lr
 800a6d0:	20000180 	.word	0x20000180
 800a6d4:	ffff0208 	.word	0xffff0208

0800a6d8 <__retarget_lock_acquire_recursive>:
 800a6d8:	4770      	bx	lr

0800a6da <__retarget_lock_release_recursive>:
 800a6da:	4770      	bx	lr

0800a6dc <_free_r>:
 800a6dc:	b538      	push	{r3, r4, r5, lr}
 800a6de:	4605      	mov	r5, r0
 800a6e0:	2900      	cmp	r1, #0
 800a6e2:	d043      	beq.n	800a76c <_free_r+0x90>
 800a6e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6e8:	1f0c      	subs	r4, r1, #4
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	bfb8      	it	lt
 800a6ee:	18e4      	addlt	r4, r4, r3
 800a6f0:	f000 fbd2 	bl	800ae98 <__malloc_lock>
 800a6f4:	4a1e      	ldr	r2, [pc, #120]	; (800a770 <_free_r+0x94>)
 800a6f6:	6813      	ldr	r3, [r2, #0]
 800a6f8:	4610      	mov	r0, r2
 800a6fa:	b933      	cbnz	r3, 800a70a <_free_r+0x2e>
 800a6fc:	6063      	str	r3, [r4, #4]
 800a6fe:	6014      	str	r4, [r2, #0]
 800a700:	4628      	mov	r0, r5
 800a702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a706:	f000 bbcd 	b.w	800aea4 <__malloc_unlock>
 800a70a:	42a3      	cmp	r3, r4
 800a70c:	d90a      	bls.n	800a724 <_free_r+0x48>
 800a70e:	6821      	ldr	r1, [r4, #0]
 800a710:	1862      	adds	r2, r4, r1
 800a712:	4293      	cmp	r3, r2
 800a714:	bf01      	itttt	eq
 800a716:	681a      	ldreq	r2, [r3, #0]
 800a718:	685b      	ldreq	r3, [r3, #4]
 800a71a:	1852      	addeq	r2, r2, r1
 800a71c:	6022      	streq	r2, [r4, #0]
 800a71e:	6063      	str	r3, [r4, #4]
 800a720:	6004      	str	r4, [r0, #0]
 800a722:	e7ed      	b.n	800a700 <_free_r+0x24>
 800a724:	461a      	mov	r2, r3
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	b10b      	cbz	r3, 800a72e <_free_r+0x52>
 800a72a:	42a3      	cmp	r3, r4
 800a72c:	d9fa      	bls.n	800a724 <_free_r+0x48>
 800a72e:	6811      	ldr	r1, [r2, #0]
 800a730:	1850      	adds	r0, r2, r1
 800a732:	42a0      	cmp	r0, r4
 800a734:	d10b      	bne.n	800a74e <_free_r+0x72>
 800a736:	6820      	ldr	r0, [r4, #0]
 800a738:	4401      	add	r1, r0
 800a73a:	1850      	adds	r0, r2, r1
 800a73c:	4283      	cmp	r3, r0
 800a73e:	6011      	str	r1, [r2, #0]
 800a740:	d1de      	bne.n	800a700 <_free_r+0x24>
 800a742:	6818      	ldr	r0, [r3, #0]
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	4401      	add	r1, r0
 800a748:	6011      	str	r1, [r2, #0]
 800a74a:	6053      	str	r3, [r2, #4]
 800a74c:	e7d8      	b.n	800a700 <_free_r+0x24>
 800a74e:	d902      	bls.n	800a756 <_free_r+0x7a>
 800a750:	230c      	movs	r3, #12
 800a752:	602b      	str	r3, [r5, #0]
 800a754:	e7d4      	b.n	800a700 <_free_r+0x24>
 800a756:	6820      	ldr	r0, [r4, #0]
 800a758:	1821      	adds	r1, r4, r0
 800a75a:	428b      	cmp	r3, r1
 800a75c:	bf01      	itttt	eq
 800a75e:	6819      	ldreq	r1, [r3, #0]
 800a760:	685b      	ldreq	r3, [r3, #4]
 800a762:	1809      	addeq	r1, r1, r0
 800a764:	6021      	streq	r1, [r4, #0]
 800a766:	6063      	str	r3, [r4, #4]
 800a768:	6054      	str	r4, [r2, #4]
 800a76a:	e7c9      	b.n	800a700 <_free_r+0x24>
 800a76c:	bd38      	pop	{r3, r4, r5, pc}
 800a76e:	bf00      	nop
 800a770:	20000724 	.word	0x20000724

0800a774 <_malloc_r>:
 800a774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a776:	1ccd      	adds	r5, r1, #3
 800a778:	f025 0503 	bic.w	r5, r5, #3
 800a77c:	3508      	adds	r5, #8
 800a77e:	2d0c      	cmp	r5, #12
 800a780:	bf38      	it	cc
 800a782:	250c      	movcc	r5, #12
 800a784:	2d00      	cmp	r5, #0
 800a786:	4606      	mov	r6, r0
 800a788:	db01      	blt.n	800a78e <_malloc_r+0x1a>
 800a78a:	42a9      	cmp	r1, r5
 800a78c:	d903      	bls.n	800a796 <_malloc_r+0x22>
 800a78e:	230c      	movs	r3, #12
 800a790:	6033      	str	r3, [r6, #0]
 800a792:	2000      	movs	r0, #0
 800a794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a796:	f000 fb7f 	bl	800ae98 <__malloc_lock>
 800a79a:	4921      	ldr	r1, [pc, #132]	; (800a820 <_malloc_r+0xac>)
 800a79c:	680a      	ldr	r2, [r1, #0]
 800a79e:	4614      	mov	r4, r2
 800a7a0:	b99c      	cbnz	r4, 800a7ca <_malloc_r+0x56>
 800a7a2:	4f20      	ldr	r7, [pc, #128]	; (800a824 <_malloc_r+0xb0>)
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	b923      	cbnz	r3, 800a7b2 <_malloc_r+0x3e>
 800a7a8:	4621      	mov	r1, r4
 800a7aa:	4630      	mov	r0, r6
 800a7ac:	f000 fb2e 	bl	800ae0c <_sbrk_r>
 800a7b0:	6038      	str	r0, [r7, #0]
 800a7b2:	4629      	mov	r1, r5
 800a7b4:	4630      	mov	r0, r6
 800a7b6:	f000 fb29 	bl	800ae0c <_sbrk_r>
 800a7ba:	1c43      	adds	r3, r0, #1
 800a7bc:	d123      	bne.n	800a806 <_malloc_r+0x92>
 800a7be:	230c      	movs	r3, #12
 800a7c0:	4630      	mov	r0, r6
 800a7c2:	6033      	str	r3, [r6, #0]
 800a7c4:	f000 fb6e 	bl	800aea4 <__malloc_unlock>
 800a7c8:	e7e3      	b.n	800a792 <_malloc_r+0x1e>
 800a7ca:	6823      	ldr	r3, [r4, #0]
 800a7cc:	1b5b      	subs	r3, r3, r5
 800a7ce:	d417      	bmi.n	800a800 <_malloc_r+0x8c>
 800a7d0:	2b0b      	cmp	r3, #11
 800a7d2:	d903      	bls.n	800a7dc <_malloc_r+0x68>
 800a7d4:	6023      	str	r3, [r4, #0]
 800a7d6:	441c      	add	r4, r3
 800a7d8:	6025      	str	r5, [r4, #0]
 800a7da:	e004      	b.n	800a7e6 <_malloc_r+0x72>
 800a7dc:	6863      	ldr	r3, [r4, #4]
 800a7de:	42a2      	cmp	r2, r4
 800a7e0:	bf0c      	ite	eq
 800a7e2:	600b      	streq	r3, [r1, #0]
 800a7e4:	6053      	strne	r3, [r2, #4]
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	f000 fb5c 	bl	800aea4 <__malloc_unlock>
 800a7ec:	f104 000b 	add.w	r0, r4, #11
 800a7f0:	1d23      	adds	r3, r4, #4
 800a7f2:	f020 0007 	bic.w	r0, r0, #7
 800a7f6:	1ac2      	subs	r2, r0, r3
 800a7f8:	d0cc      	beq.n	800a794 <_malloc_r+0x20>
 800a7fa:	1a1b      	subs	r3, r3, r0
 800a7fc:	50a3      	str	r3, [r4, r2]
 800a7fe:	e7c9      	b.n	800a794 <_malloc_r+0x20>
 800a800:	4622      	mov	r2, r4
 800a802:	6864      	ldr	r4, [r4, #4]
 800a804:	e7cc      	b.n	800a7a0 <_malloc_r+0x2c>
 800a806:	1cc4      	adds	r4, r0, #3
 800a808:	f024 0403 	bic.w	r4, r4, #3
 800a80c:	42a0      	cmp	r0, r4
 800a80e:	d0e3      	beq.n	800a7d8 <_malloc_r+0x64>
 800a810:	1a21      	subs	r1, r4, r0
 800a812:	4630      	mov	r0, r6
 800a814:	f000 fafa 	bl	800ae0c <_sbrk_r>
 800a818:	3001      	adds	r0, #1
 800a81a:	d1dd      	bne.n	800a7d8 <_malloc_r+0x64>
 800a81c:	e7cf      	b.n	800a7be <_malloc_r+0x4a>
 800a81e:	bf00      	nop
 800a820:	20000724 	.word	0x20000724
 800a824:	20000728 	.word	0x20000728

0800a828 <__ssputs_r>:
 800a828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a82c:	688e      	ldr	r6, [r1, #8]
 800a82e:	4682      	mov	sl, r0
 800a830:	429e      	cmp	r6, r3
 800a832:	460c      	mov	r4, r1
 800a834:	4690      	mov	r8, r2
 800a836:	461f      	mov	r7, r3
 800a838:	d838      	bhi.n	800a8ac <__ssputs_r+0x84>
 800a83a:	898a      	ldrh	r2, [r1, #12]
 800a83c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a840:	d032      	beq.n	800a8a8 <__ssputs_r+0x80>
 800a842:	6825      	ldr	r5, [r4, #0]
 800a844:	6909      	ldr	r1, [r1, #16]
 800a846:	3301      	adds	r3, #1
 800a848:	eba5 0901 	sub.w	r9, r5, r1
 800a84c:	6965      	ldr	r5, [r4, #20]
 800a84e:	444b      	add	r3, r9
 800a850:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a854:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a858:	106d      	asrs	r5, r5, #1
 800a85a:	429d      	cmp	r5, r3
 800a85c:	bf38      	it	cc
 800a85e:	461d      	movcc	r5, r3
 800a860:	0553      	lsls	r3, r2, #21
 800a862:	d531      	bpl.n	800a8c8 <__ssputs_r+0xa0>
 800a864:	4629      	mov	r1, r5
 800a866:	f7ff ff85 	bl	800a774 <_malloc_r>
 800a86a:	4606      	mov	r6, r0
 800a86c:	b950      	cbnz	r0, 800a884 <__ssputs_r+0x5c>
 800a86e:	230c      	movs	r3, #12
 800a870:	f04f 30ff 	mov.w	r0, #4294967295
 800a874:	f8ca 3000 	str.w	r3, [sl]
 800a878:	89a3      	ldrh	r3, [r4, #12]
 800a87a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a87e:	81a3      	strh	r3, [r4, #12]
 800a880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a884:	464a      	mov	r2, r9
 800a886:	6921      	ldr	r1, [r4, #16]
 800a888:	f000 fade 	bl	800ae48 <memcpy>
 800a88c:	89a3      	ldrh	r3, [r4, #12]
 800a88e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a896:	81a3      	strh	r3, [r4, #12]
 800a898:	6126      	str	r6, [r4, #16]
 800a89a:	444e      	add	r6, r9
 800a89c:	6026      	str	r6, [r4, #0]
 800a89e:	463e      	mov	r6, r7
 800a8a0:	6165      	str	r5, [r4, #20]
 800a8a2:	eba5 0509 	sub.w	r5, r5, r9
 800a8a6:	60a5      	str	r5, [r4, #8]
 800a8a8:	42be      	cmp	r6, r7
 800a8aa:	d900      	bls.n	800a8ae <__ssputs_r+0x86>
 800a8ac:	463e      	mov	r6, r7
 800a8ae:	4632      	mov	r2, r6
 800a8b0:	4641      	mov	r1, r8
 800a8b2:	6820      	ldr	r0, [r4, #0]
 800a8b4:	f000 fad6 	bl	800ae64 <memmove>
 800a8b8:	68a3      	ldr	r3, [r4, #8]
 800a8ba:	6822      	ldr	r2, [r4, #0]
 800a8bc:	1b9b      	subs	r3, r3, r6
 800a8be:	4432      	add	r2, r6
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	60a3      	str	r3, [r4, #8]
 800a8c4:	6022      	str	r2, [r4, #0]
 800a8c6:	e7db      	b.n	800a880 <__ssputs_r+0x58>
 800a8c8:	462a      	mov	r2, r5
 800a8ca:	f000 faf1 	bl	800aeb0 <_realloc_r>
 800a8ce:	4606      	mov	r6, r0
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	d1e1      	bne.n	800a898 <__ssputs_r+0x70>
 800a8d4:	4650      	mov	r0, sl
 800a8d6:	6921      	ldr	r1, [r4, #16]
 800a8d8:	f7ff ff00 	bl	800a6dc <_free_r>
 800a8dc:	e7c7      	b.n	800a86e <__ssputs_r+0x46>
	...

0800a8e0 <_svfiprintf_r>:
 800a8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e4:	4698      	mov	r8, r3
 800a8e6:	898b      	ldrh	r3, [r1, #12]
 800a8e8:	4607      	mov	r7, r0
 800a8ea:	061b      	lsls	r3, r3, #24
 800a8ec:	460d      	mov	r5, r1
 800a8ee:	4614      	mov	r4, r2
 800a8f0:	b09d      	sub	sp, #116	; 0x74
 800a8f2:	d50e      	bpl.n	800a912 <_svfiprintf_r+0x32>
 800a8f4:	690b      	ldr	r3, [r1, #16]
 800a8f6:	b963      	cbnz	r3, 800a912 <_svfiprintf_r+0x32>
 800a8f8:	2140      	movs	r1, #64	; 0x40
 800a8fa:	f7ff ff3b 	bl	800a774 <_malloc_r>
 800a8fe:	6028      	str	r0, [r5, #0]
 800a900:	6128      	str	r0, [r5, #16]
 800a902:	b920      	cbnz	r0, 800a90e <_svfiprintf_r+0x2e>
 800a904:	230c      	movs	r3, #12
 800a906:	603b      	str	r3, [r7, #0]
 800a908:	f04f 30ff 	mov.w	r0, #4294967295
 800a90c:	e0d1      	b.n	800aab2 <_svfiprintf_r+0x1d2>
 800a90e:	2340      	movs	r3, #64	; 0x40
 800a910:	616b      	str	r3, [r5, #20]
 800a912:	2300      	movs	r3, #0
 800a914:	9309      	str	r3, [sp, #36]	; 0x24
 800a916:	2320      	movs	r3, #32
 800a918:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a91c:	2330      	movs	r3, #48	; 0x30
 800a91e:	f04f 0901 	mov.w	r9, #1
 800a922:	f8cd 800c 	str.w	r8, [sp, #12]
 800a926:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aacc <_svfiprintf_r+0x1ec>
 800a92a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a92e:	4623      	mov	r3, r4
 800a930:	469a      	mov	sl, r3
 800a932:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a936:	b10a      	cbz	r2, 800a93c <_svfiprintf_r+0x5c>
 800a938:	2a25      	cmp	r2, #37	; 0x25
 800a93a:	d1f9      	bne.n	800a930 <_svfiprintf_r+0x50>
 800a93c:	ebba 0b04 	subs.w	fp, sl, r4
 800a940:	d00b      	beq.n	800a95a <_svfiprintf_r+0x7a>
 800a942:	465b      	mov	r3, fp
 800a944:	4622      	mov	r2, r4
 800a946:	4629      	mov	r1, r5
 800a948:	4638      	mov	r0, r7
 800a94a:	f7ff ff6d 	bl	800a828 <__ssputs_r>
 800a94e:	3001      	adds	r0, #1
 800a950:	f000 80aa 	beq.w	800aaa8 <_svfiprintf_r+0x1c8>
 800a954:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a956:	445a      	add	r2, fp
 800a958:	9209      	str	r2, [sp, #36]	; 0x24
 800a95a:	f89a 3000 	ldrb.w	r3, [sl]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	f000 80a2 	beq.w	800aaa8 <_svfiprintf_r+0x1c8>
 800a964:	2300      	movs	r3, #0
 800a966:	f04f 32ff 	mov.w	r2, #4294967295
 800a96a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a96e:	f10a 0a01 	add.w	sl, sl, #1
 800a972:	9304      	str	r3, [sp, #16]
 800a974:	9307      	str	r3, [sp, #28]
 800a976:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a97a:	931a      	str	r3, [sp, #104]	; 0x68
 800a97c:	4654      	mov	r4, sl
 800a97e:	2205      	movs	r2, #5
 800a980:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a984:	4851      	ldr	r0, [pc, #324]	; (800aacc <_svfiprintf_r+0x1ec>)
 800a986:	f000 fa51 	bl	800ae2c <memchr>
 800a98a:	9a04      	ldr	r2, [sp, #16]
 800a98c:	b9d8      	cbnz	r0, 800a9c6 <_svfiprintf_r+0xe6>
 800a98e:	06d0      	lsls	r0, r2, #27
 800a990:	bf44      	itt	mi
 800a992:	2320      	movmi	r3, #32
 800a994:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a998:	0711      	lsls	r1, r2, #28
 800a99a:	bf44      	itt	mi
 800a99c:	232b      	movmi	r3, #43	; 0x2b
 800a99e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9a2:	f89a 3000 	ldrb.w	r3, [sl]
 800a9a6:	2b2a      	cmp	r3, #42	; 0x2a
 800a9a8:	d015      	beq.n	800a9d6 <_svfiprintf_r+0xf6>
 800a9aa:	4654      	mov	r4, sl
 800a9ac:	2000      	movs	r0, #0
 800a9ae:	f04f 0c0a 	mov.w	ip, #10
 800a9b2:	9a07      	ldr	r2, [sp, #28]
 800a9b4:	4621      	mov	r1, r4
 800a9b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9ba:	3b30      	subs	r3, #48	; 0x30
 800a9bc:	2b09      	cmp	r3, #9
 800a9be:	d94e      	bls.n	800aa5e <_svfiprintf_r+0x17e>
 800a9c0:	b1b0      	cbz	r0, 800a9f0 <_svfiprintf_r+0x110>
 800a9c2:	9207      	str	r2, [sp, #28]
 800a9c4:	e014      	b.n	800a9f0 <_svfiprintf_r+0x110>
 800a9c6:	eba0 0308 	sub.w	r3, r0, r8
 800a9ca:	fa09 f303 	lsl.w	r3, r9, r3
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	46a2      	mov	sl, r4
 800a9d2:	9304      	str	r3, [sp, #16]
 800a9d4:	e7d2      	b.n	800a97c <_svfiprintf_r+0x9c>
 800a9d6:	9b03      	ldr	r3, [sp, #12]
 800a9d8:	1d19      	adds	r1, r3, #4
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	9103      	str	r1, [sp, #12]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	bfbb      	ittet	lt
 800a9e2:	425b      	neglt	r3, r3
 800a9e4:	f042 0202 	orrlt.w	r2, r2, #2
 800a9e8:	9307      	strge	r3, [sp, #28]
 800a9ea:	9307      	strlt	r3, [sp, #28]
 800a9ec:	bfb8      	it	lt
 800a9ee:	9204      	strlt	r2, [sp, #16]
 800a9f0:	7823      	ldrb	r3, [r4, #0]
 800a9f2:	2b2e      	cmp	r3, #46	; 0x2e
 800a9f4:	d10c      	bne.n	800aa10 <_svfiprintf_r+0x130>
 800a9f6:	7863      	ldrb	r3, [r4, #1]
 800a9f8:	2b2a      	cmp	r3, #42	; 0x2a
 800a9fa:	d135      	bne.n	800aa68 <_svfiprintf_r+0x188>
 800a9fc:	9b03      	ldr	r3, [sp, #12]
 800a9fe:	3402      	adds	r4, #2
 800aa00:	1d1a      	adds	r2, r3, #4
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	9203      	str	r2, [sp, #12]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	bfb8      	it	lt
 800aa0a:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa0e:	9305      	str	r3, [sp, #20]
 800aa10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aadc <_svfiprintf_r+0x1fc>
 800aa14:	2203      	movs	r2, #3
 800aa16:	4650      	mov	r0, sl
 800aa18:	7821      	ldrb	r1, [r4, #0]
 800aa1a:	f000 fa07 	bl	800ae2c <memchr>
 800aa1e:	b140      	cbz	r0, 800aa32 <_svfiprintf_r+0x152>
 800aa20:	2340      	movs	r3, #64	; 0x40
 800aa22:	eba0 000a 	sub.w	r0, r0, sl
 800aa26:	fa03 f000 	lsl.w	r0, r3, r0
 800aa2a:	9b04      	ldr	r3, [sp, #16]
 800aa2c:	3401      	adds	r4, #1
 800aa2e:	4303      	orrs	r3, r0
 800aa30:	9304      	str	r3, [sp, #16]
 800aa32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa36:	2206      	movs	r2, #6
 800aa38:	4825      	ldr	r0, [pc, #148]	; (800aad0 <_svfiprintf_r+0x1f0>)
 800aa3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa3e:	f000 f9f5 	bl	800ae2c <memchr>
 800aa42:	2800      	cmp	r0, #0
 800aa44:	d038      	beq.n	800aab8 <_svfiprintf_r+0x1d8>
 800aa46:	4b23      	ldr	r3, [pc, #140]	; (800aad4 <_svfiprintf_r+0x1f4>)
 800aa48:	bb1b      	cbnz	r3, 800aa92 <_svfiprintf_r+0x1b2>
 800aa4a:	9b03      	ldr	r3, [sp, #12]
 800aa4c:	3307      	adds	r3, #7
 800aa4e:	f023 0307 	bic.w	r3, r3, #7
 800aa52:	3308      	adds	r3, #8
 800aa54:	9303      	str	r3, [sp, #12]
 800aa56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa58:	4433      	add	r3, r6
 800aa5a:	9309      	str	r3, [sp, #36]	; 0x24
 800aa5c:	e767      	b.n	800a92e <_svfiprintf_r+0x4e>
 800aa5e:	460c      	mov	r4, r1
 800aa60:	2001      	movs	r0, #1
 800aa62:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa66:	e7a5      	b.n	800a9b4 <_svfiprintf_r+0xd4>
 800aa68:	2300      	movs	r3, #0
 800aa6a:	f04f 0c0a 	mov.w	ip, #10
 800aa6e:	4619      	mov	r1, r3
 800aa70:	3401      	adds	r4, #1
 800aa72:	9305      	str	r3, [sp, #20]
 800aa74:	4620      	mov	r0, r4
 800aa76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa7a:	3a30      	subs	r2, #48	; 0x30
 800aa7c:	2a09      	cmp	r2, #9
 800aa7e:	d903      	bls.n	800aa88 <_svfiprintf_r+0x1a8>
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d0c5      	beq.n	800aa10 <_svfiprintf_r+0x130>
 800aa84:	9105      	str	r1, [sp, #20]
 800aa86:	e7c3      	b.n	800aa10 <_svfiprintf_r+0x130>
 800aa88:	4604      	mov	r4, r0
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa90:	e7f0      	b.n	800aa74 <_svfiprintf_r+0x194>
 800aa92:	ab03      	add	r3, sp, #12
 800aa94:	9300      	str	r3, [sp, #0]
 800aa96:	462a      	mov	r2, r5
 800aa98:	4638      	mov	r0, r7
 800aa9a:	4b0f      	ldr	r3, [pc, #60]	; (800aad8 <_svfiprintf_r+0x1f8>)
 800aa9c:	a904      	add	r1, sp, #16
 800aa9e:	f3af 8000 	nop.w
 800aaa2:	1c42      	adds	r2, r0, #1
 800aaa4:	4606      	mov	r6, r0
 800aaa6:	d1d6      	bne.n	800aa56 <_svfiprintf_r+0x176>
 800aaa8:	89ab      	ldrh	r3, [r5, #12]
 800aaaa:	065b      	lsls	r3, r3, #25
 800aaac:	f53f af2c 	bmi.w	800a908 <_svfiprintf_r+0x28>
 800aab0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aab2:	b01d      	add	sp, #116	; 0x74
 800aab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aab8:	ab03      	add	r3, sp, #12
 800aaba:	9300      	str	r3, [sp, #0]
 800aabc:	462a      	mov	r2, r5
 800aabe:	4638      	mov	r0, r7
 800aac0:	4b05      	ldr	r3, [pc, #20]	; (800aad8 <_svfiprintf_r+0x1f8>)
 800aac2:	a904      	add	r1, sp, #16
 800aac4:	f000 f87c 	bl	800abc0 <_printf_i>
 800aac8:	e7eb      	b.n	800aaa2 <_svfiprintf_r+0x1c2>
 800aaca:	bf00      	nop
 800aacc:	0800b074 	.word	0x0800b074
 800aad0:	0800b07e 	.word	0x0800b07e
 800aad4:	00000000 	.word	0x00000000
 800aad8:	0800a829 	.word	0x0800a829
 800aadc:	0800b07a 	.word	0x0800b07a

0800aae0 <_printf_common>:
 800aae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aae4:	4616      	mov	r6, r2
 800aae6:	4699      	mov	r9, r3
 800aae8:	688a      	ldr	r2, [r1, #8]
 800aaea:	690b      	ldr	r3, [r1, #16]
 800aaec:	4607      	mov	r7, r0
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	bfb8      	it	lt
 800aaf2:	4613      	movlt	r3, r2
 800aaf4:	6033      	str	r3, [r6, #0]
 800aaf6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aafa:	460c      	mov	r4, r1
 800aafc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab00:	b10a      	cbz	r2, 800ab06 <_printf_common+0x26>
 800ab02:	3301      	adds	r3, #1
 800ab04:	6033      	str	r3, [r6, #0]
 800ab06:	6823      	ldr	r3, [r4, #0]
 800ab08:	0699      	lsls	r1, r3, #26
 800ab0a:	bf42      	ittt	mi
 800ab0c:	6833      	ldrmi	r3, [r6, #0]
 800ab0e:	3302      	addmi	r3, #2
 800ab10:	6033      	strmi	r3, [r6, #0]
 800ab12:	6825      	ldr	r5, [r4, #0]
 800ab14:	f015 0506 	ands.w	r5, r5, #6
 800ab18:	d106      	bne.n	800ab28 <_printf_common+0x48>
 800ab1a:	f104 0a19 	add.w	sl, r4, #25
 800ab1e:	68e3      	ldr	r3, [r4, #12]
 800ab20:	6832      	ldr	r2, [r6, #0]
 800ab22:	1a9b      	subs	r3, r3, r2
 800ab24:	42ab      	cmp	r3, r5
 800ab26:	dc28      	bgt.n	800ab7a <_printf_common+0x9a>
 800ab28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab2c:	1e13      	subs	r3, r2, #0
 800ab2e:	6822      	ldr	r2, [r4, #0]
 800ab30:	bf18      	it	ne
 800ab32:	2301      	movne	r3, #1
 800ab34:	0692      	lsls	r2, r2, #26
 800ab36:	d42d      	bmi.n	800ab94 <_printf_common+0xb4>
 800ab38:	4649      	mov	r1, r9
 800ab3a:	4638      	mov	r0, r7
 800ab3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab40:	47c0      	blx	r8
 800ab42:	3001      	adds	r0, #1
 800ab44:	d020      	beq.n	800ab88 <_printf_common+0xa8>
 800ab46:	6823      	ldr	r3, [r4, #0]
 800ab48:	68e5      	ldr	r5, [r4, #12]
 800ab4a:	f003 0306 	and.w	r3, r3, #6
 800ab4e:	2b04      	cmp	r3, #4
 800ab50:	bf18      	it	ne
 800ab52:	2500      	movne	r5, #0
 800ab54:	6832      	ldr	r2, [r6, #0]
 800ab56:	f04f 0600 	mov.w	r6, #0
 800ab5a:	68a3      	ldr	r3, [r4, #8]
 800ab5c:	bf08      	it	eq
 800ab5e:	1aad      	subeq	r5, r5, r2
 800ab60:	6922      	ldr	r2, [r4, #16]
 800ab62:	bf08      	it	eq
 800ab64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	bfc4      	itt	gt
 800ab6c:	1a9b      	subgt	r3, r3, r2
 800ab6e:	18ed      	addgt	r5, r5, r3
 800ab70:	341a      	adds	r4, #26
 800ab72:	42b5      	cmp	r5, r6
 800ab74:	d11a      	bne.n	800abac <_printf_common+0xcc>
 800ab76:	2000      	movs	r0, #0
 800ab78:	e008      	b.n	800ab8c <_printf_common+0xac>
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	4652      	mov	r2, sl
 800ab7e:	4649      	mov	r1, r9
 800ab80:	4638      	mov	r0, r7
 800ab82:	47c0      	blx	r8
 800ab84:	3001      	adds	r0, #1
 800ab86:	d103      	bne.n	800ab90 <_printf_common+0xb0>
 800ab88:	f04f 30ff 	mov.w	r0, #4294967295
 800ab8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab90:	3501      	adds	r5, #1
 800ab92:	e7c4      	b.n	800ab1e <_printf_common+0x3e>
 800ab94:	2030      	movs	r0, #48	; 0x30
 800ab96:	18e1      	adds	r1, r4, r3
 800ab98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab9c:	1c5a      	adds	r2, r3, #1
 800ab9e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aba2:	4422      	add	r2, r4
 800aba4:	3302      	adds	r3, #2
 800aba6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800abaa:	e7c5      	b.n	800ab38 <_printf_common+0x58>
 800abac:	2301      	movs	r3, #1
 800abae:	4622      	mov	r2, r4
 800abb0:	4649      	mov	r1, r9
 800abb2:	4638      	mov	r0, r7
 800abb4:	47c0      	blx	r8
 800abb6:	3001      	adds	r0, #1
 800abb8:	d0e6      	beq.n	800ab88 <_printf_common+0xa8>
 800abba:	3601      	adds	r6, #1
 800abbc:	e7d9      	b.n	800ab72 <_printf_common+0x92>
	...

0800abc0 <_printf_i>:
 800abc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abc4:	460c      	mov	r4, r1
 800abc6:	7e27      	ldrb	r7, [r4, #24]
 800abc8:	4691      	mov	r9, r2
 800abca:	2f78      	cmp	r7, #120	; 0x78
 800abcc:	4680      	mov	r8, r0
 800abce:	469a      	mov	sl, r3
 800abd0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800abd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800abd6:	d807      	bhi.n	800abe8 <_printf_i+0x28>
 800abd8:	2f62      	cmp	r7, #98	; 0x62
 800abda:	d80a      	bhi.n	800abf2 <_printf_i+0x32>
 800abdc:	2f00      	cmp	r7, #0
 800abde:	f000 80d9 	beq.w	800ad94 <_printf_i+0x1d4>
 800abe2:	2f58      	cmp	r7, #88	; 0x58
 800abe4:	f000 80a4 	beq.w	800ad30 <_printf_i+0x170>
 800abe8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800abec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800abf0:	e03a      	b.n	800ac68 <_printf_i+0xa8>
 800abf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800abf6:	2b15      	cmp	r3, #21
 800abf8:	d8f6      	bhi.n	800abe8 <_printf_i+0x28>
 800abfa:	a001      	add	r0, pc, #4	; (adr r0, 800ac00 <_printf_i+0x40>)
 800abfc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ac00:	0800ac59 	.word	0x0800ac59
 800ac04:	0800ac6d 	.word	0x0800ac6d
 800ac08:	0800abe9 	.word	0x0800abe9
 800ac0c:	0800abe9 	.word	0x0800abe9
 800ac10:	0800abe9 	.word	0x0800abe9
 800ac14:	0800abe9 	.word	0x0800abe9
 800ac18:	0800ac6d 	.word	0x0800ac6d
 800ac1c:	0800abe9 	.word	0x0800abe9
 800ac20:	0800abe9 	.word	0x0800abe9
 800ac24:	0800abe9 	.word	0x0800abe9
 800ac28:	0800abe9 	.word	0x0800abe9
 800ac2c:	0800ad7b 	.word	0x0800ad7b
 800ac30:	0800ac9d 	.word	0x0800ac9d
 800ac34:	0800ad5d 	.word	0x0800ad5d
 800ac38:	0800abe9 	.word	0x0800abe9
 800ac3c:	0800abe9 	.word	0x0800abe9
 800ac40:	0800ad9d 	.word	0x0800ad9d
 800ac44:	0800abe9 	.word	0x0800abe9
 800ac48:	0800ac9d 	.word	0x0800ac9d
 800ac4c:	0800abe9 	.word	0x0800abe9
 800ac50:	0800abe9 	.word	0x0800abe9
 800ac54:	0800ad65 	.word	0x0800ad65
 800ac58:	680b      	ldr	r3, [r1, #0]
 800ac5a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ac5e:	1d1a      	adds	r2, r3, #4
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	600a      	str	r2, [r1, #0]
 800ac64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac68:	2301      	movs	r3, #1
 800ac6a:	e0a4      	b.n	800adb6 <_printf_i+0x1f6>
 800ac6c:	6825      	ldr	r5, [r4, #0]
 800ac6e:	6808      	ldr	r0, [r1, #0]
 800ac70:	062e      	lsls	r6, r5, #24
 800ac72:	f100 0304 	add.w	r3, r0, #4
 800ac76:	d50a      	bpl.n	800ac8e <_printf_i+0xce>
 800ac78:	6805      	ldr	r5, [r0, #0]
 800ac7a:	600b      	str	r3, [r1, #0]
 800ac7c:	2d00      	cmp	r5, #0
 800ac7e:	da03      	bge.n	800ac88 <_printf_i+0xc8>
 800ac80:	232d      	movs	r3, #45	; 0x2d
 800ac82:	426d      	negs	r5, r5
 800ac84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac88:	230a      	movs	r3, #10
 800ac8a:	485e      	ldr	r0, [pc, #376]	; (800ae04 <_printf_i+0x244>)
 800ac8c:	e019      	b.n	800acc2 <_printf_i+0x102>
 800ac8e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ac92:	6805      	ldr	r5, [r0, #0]
 800ac94:	600b      	str	r3, [r1, #0]
 800ac96:	bf18      	it	ne
 800ac98:	b22d      	sxthne	r5, r5
 800ac9a:	e7ef      	b.n	800ac7c <_printf_i+0xbc>
 800ac9c:	680b      	ldr	r3, [r1, #0]
 800ac9e:	6825      	ldr	r5, [r4, #0]
 800aca0:	1d18      	adds	r0, r3, #4
 800aca2:	6008      	str	r0, [r1, #0]
 800aca4:	0628      	lsls	r0, r5, #24
 800aca6:	d501      	bpl.n	800acac <_printf_i+0xec>
 800aca8:	681d      	ldr	r5, [r3, #0]
 800acaa:	e002      	b.n	800acb2 <_printf_i+0xf2>
 800acac:	0669      	lsls	r1, r5, #25
 800acae:	d5fb      	bpl.n	800aca8 <_printf_i+0xe8>
 800acb0:	881d      	ldrh	r5, [r3, #0]
 800acb2:	2f6f      	cmp	r7, #111	; 0x6f
 800acb4:	bf0c      	ite	eq
 800acb6:	2308      	moveq	r3, #8
 800acb8:	230a      	movne	r3, #10
 800acba:	4852      	ldr	r0, [pc, #328]	; (800ae04 <_printf_i+0x244>)
 800acbc:	2100      	movs	r1, #0
 800acbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800acc2:	6866      	ldr	r6, [r4, #4]
 800acc4:	2e00      	cmp	r6, #0
 800acc6:	bfa8      	it	ge
 800acc8:	6821      	ldrge	r1, [r4, #0]
 800acca:	60a6      	str	r6, [r4, #8]
 800accc:	bfa4      	itt	ge
 800acce:	f021 0104 	bicge.w	r1, r1, #4
 800acd2:	6021      	strge	r1, [r4, #0]
 800acd4:	b90d      	cbnz	r5, 800acda <_printf_i+0x11a>
 800acd6:	2e00      	cmp	r6, #0
 800acd8:	d04d      	beq.n	800ad76 <_printf_i+0x1b6>
 800acda:	4616      	mov	r6, r2
 800acdc:	fbb5 f1f3 	udiv	r1, r5, r3
 800ace0:	fb03 5711 	mls	r7, r3, r1, r5
 800ace4:	5dc7      	ldrb	r7, [r0, r7]
 800ace6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800acea:	462f      	mov	r7, r5
 800acec:	42bb      	cmp	r3, r7
 800acee:	460d      	mov	r5, r1
 800acf0:	d9f4      	bls.n	800acdc <_printf_i+0x11c>
 800acf2:	2b08      	cmp	r3, #8
 800acf4:	d10b      	bne.n	800ad0e <_printf_i+0x14e>
 800acf6:	6823      	ldr	r3, [r4, #0]
 800acf8:	07df      	lsls	r7, r3, #31
 800acfa:	d508      	bpl.n	800ad0e <_printf_i+0x14e>
 800acfc:	6923      	ldr	r3, [r4, #16]
 800acfe:	6861      	ldr	r1, [r4, #4]
 800ad00:	4299      	cmp	r1, r3
 800ad02:	bfde      	ittt	le
 800ad04:	2330      	movle	r3, #48	; 0x30
 800ad06:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad0a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ad0e:	1b92      	subs	r2, r2, r6
 800ad10:	6122      	str	r2, [r4, #16]
 800ad12:	464b      	mov	r3, r9
 800ad14:	4621      	mov	r1, r4
 800ad16:	4640      	mov	r0, r8
 800ad18:	f8cd a000 	str.w	sl, [sp]
 800ad1c:	aa03      	add	r2, sp, #12
 800ad1e:	f7ff fedf 	bl	800aae0 <_printf_common>
 800ad22:	3001      	adds	r0, #1
 800ad24:	d14c      	bne.n	800adc0 <_printf_i+0x200>
 800ad26:	f04f 30ff 	mov.w	r0, #4294967295
 800ad2a:	b004      	add	sp, #16
 800ad2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad30:	4834      	ldr	r0, [pc, #208]	; (800ae04 <_printf_i+0x244>)
 800ad32:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ad36:	680e      	ldr	r6, [r1, #0]
 800ad38:	6823      	ldr	r3, [r4, #0]
 800ad3a:	f856 5b04 	ldr.w	r5, [r6], #4
 800ad3e:	061f      	lsls	r7, r3, #24
 800ad40:	600e      	str	r6, [r1, #0]
 800ad42:	d514      	bpl.n	800ad6e <_printf_i+0x1ae>
 800ad44:	07d9      	lsls	r1, r3, #31
 800ad46:	bf44      	itt	mi
 800ad48:	f043 0320 	orrmi.w	r3, r3, #32
 800ad4c:	6023      	strmi	r3, [r4, #0]
 800ad4e:	b91d      	cbnz	r5, 800ad58 <_printf_i+0x198>
 800ad50:	6823      	ldr	r3, [r4, #0]
 800ad52:	f023 0320 	bic.w	r3, r3, #32
 800ad56:	6023      	str	r3, [r4, #0]
 800ad58:	2310      	movs	r3, #16
 800ad5a:	e7af      	b.n	800acbc <_printf_i+0xfc>
 800ad5c:	6823      	ldr	r3, [r4, #0]
 800ad5e:	f043 0320 	orr.w	r3, r3, #32
 800ad62:	6023      	str	r3, [r4, #0]
 800ad64:	2378      	movs	r3, #120	; 0x78
 800ad66:	4828      	ldr	r0, [pc, #160]	; (800ae08 <_printf_i+0x248>)
 800ad68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad6c:	e7e3      	b.n	800ad36 <_printf_i+0x176>
 800ad6e:	065e      	lsls	r6, r3, #25
 800ad70:	bf48      	it	mi
 800ad72:	b2ad      	uxthmi	r5, r5
 800ad74:	e7e6      	b.n	800ad44 <_printf_i+0x184>
 800ad76:	4616      	mov	r6, r2
 800ad78:	e7bb      	b.n	800acf2 <_printf_i+0x132>
 800ad7a:	680b      	ldr	r3, [r1, #0]
 800ad7c:	6826      	ldr	r6, [r4, #0]
 800ad7e:	1d1d      	adds	r5, r3, #4
 800ad80:	6960      	ldr	r0, [r4, #20]
 800ad82:	600d      	str	r5, [r1, #0]
 800ad84:	0635      	lsls	r5, r6, #24
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	d501      	bpl.n	800ad8e <_printf_i+0x1ce>
 800ad8a:	6018      	str	r0, [r3, #0]
 800ad8c:	e002      	b.n	800ad94 <_printf_i+0x1d4>
 800ad8e:	0671      	lsls	r1, r6, #25
 800ad90:	d5fb      	bpl.n	800ad8a <_printf_i+0x1ca>
 800ad92:	8018      	strh	r0, [r3, #0]
 800ad94:	2300      	movs	r3, #0
 800ad96:	4616      	mov	r6, r2
 800ad98:	6123      	str	r3, [r4, #16]
 800ad9a:	e7ba      	b.n	800ad12 <_printf_i+0x152>
 800ad9c:	680b      	ldr	r3, [r1, #0]
 800ad9e:	1d1a      	adds	r2, r3, #4
 800ada0:	600a      	str	r2, [r1, #0]
 800ada2:	681e      	ldr	r6, [r3, #0]
 800ada4:	2100      	movs	r1, #0
 800ada6:	4630      	mov	r0, r6
 800ada8:	6862      	ldr	r2, [r4, #4]
 800adaa:	f000 f83f 	bl	800ae2c <memchr>
 800adae:	b108      	cbz	r0, 800adb4 <_printf_i+0x1f4>
 800adb0:	1b80      	subs	r0, r0, r6
 800adb2:	6060      	str	r0, [r4, #4]
 800adb4:	6863      	ldr	r3, [r4, #4]
 800adb6:	6123      	str	r3, [r4, #16]
 800adb8:	2300      	movs	r3, #0
 800adba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adbe:	e7a8      	b.n	800ad12 <_printf_i+0x152>
 800adc0:	4632      	mov	r2, r6
 800adc2:	4649      	mov	r1, r9
 800adc4:	4640      	mov	r0, r8
 800adc6:	6923      	ldr	r3, [r4, #16]
 800adc8:	47d0      	blx	sl
 800adca:	3001      	adds	r0, #1
 800adcc:	d0ab      	beq.n	800ad26 <_printf_i+0x166>
 800adce:	6823      	ldr	r3, [r4, #0]
 800add0:	079b      	lsls	r3, r3, #30
 800add2:	d413      	bmi.n	800adfc <_printf_i+0x23c>
 800add4:	68e0      	ldr	r0, [r4, #12]
 800add6:	9b03      	ldr	r3, [sp, #12]
 800add8:	4298      	cmp	r0, r3
 800adda:	bfb8      	it	lt
 800addc:	4618      	movlt	r0, r3
 800adde:	e7a4      	b.n	800ad2a <_printf_i+0x16a>
 800ade0:	2301      	movs	r3, #1
 800ade2:	4632      	mov	r2, r6
 800ade4:	4649      	mov	r1, r9
 800ade6:	4640      	mov	r0, r8
 800ade8:	47d0      	blx	sl
 800adea:	3001      	adds	r0, #1
 800adec:	d09b      	beq.n	800ad26 <_printf_i+0x166>
 800adee:	3501      	adds	r5, #1
 800adf0:	68e3      	ldr	r3, [r4, #12]
 800adf2:	9903      	ldr	r1, [sp, #12]
 800adf4:	1a5b      	subs	r3, r3, r1
 800adf6:	42ab      	cmp	r3, r5
 800adf8:	dcf2      	bgt.n	800ade0 <_printf_i+0x220>
 800adfa:	e7eb      	b.n	800add4 <_printf_i+0x214>
 800adfc:	2500      	movs	r5, #0
 800adfe:	f104 0619 	add.w	r6, r4, #25
 800ae02:	e7f5      	b.n	800adf0 <_printf_i+0x230>
 800ae04:	0800b085 	.word	0x0800b085
 800ae08:	0800b096 	.word	0x0800b096

0800ae0c <_sbrk_r>:
 800ae0c:	b538      	push	{r3, r4, r5, lr}
 800ae0e:	2300      	movs	r3, #0
 800ae10:	4d05      	ldr	r5, [pc, #20]	; (800ae28 <_sbrk_r+0x1c>)
 800ae12:	4604      	mov	r4, r0
 800ae14:	4608      	mov	r0, r1
 800ae16:	602b      	str	r3, [r5, #0]
 800ae18:	f7f7 fa16 	bl	8002248 <_sbrk>
 800ae1c:	1c43      	adds	r3, r0, #1
 800ae1e:	d102      	bne.n	800ae26 <_sbrk_r+0x1a>
 800ae20:	682b      	ldr	r3, [r5, #0]
 800ae22:	b103      	cbz	r3, 800ae26 <_sbrk_r+0x1a>
 800ae24:	6023      	str	r3, [r4, #0]
 800ae26:	bd38      	pop	{r3, r4, r5, pc}
 800ae28:	200016a8 	.word	0x200016a8

0800ae2c <memchr>:
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	b510      	push	{r4, lr}
 800ae30:	b2c9      	uxtb	r1, r1
 800ae32:	4402      	add	r2, r0
 800ae34:	4293      	cmp	r3, r2
 800ae36:	4618      	mov	r0, r3
 800ae38:	d101      	bne.n	800ae3e <memchr+0x12>
 800ae3a:	2000      	movs	r0, #0
 800ae3c:	e003      	b.n	800ae46 <memchr+0x1a>
 800ae3e:	7804      	ldrb	r4, [r0, #0]
 800ae40:	3301      	adds	r3, #1
 800ae42:	428c      	cmp	r4, r1
 800ae44:	d1f6      	bne.n	800ae34 <memchr+0x8>
 800ae46:	bd10      	pop	{r4, pc}

0800ae48 <memcpy>:
 800ae48:	440a      	add	r2, r1
 800ae4a:	4291      	cmp	r1, r2
 800ae4c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae50:	d100      	bne.n	800ae54 <memcpy+0xc>
 800ae52:	4770      	bx	lr
 800ae54:	b510      	push	{r4, lr}
 800ae56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae5a:	4291      	cmp	r1, r2
 800ae5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae60:	d1f9      	bne.n	800ae56 <memcpy+0xe>
 800ae62:	bd10      	pop	{r4, pc}

0800ae64 <memmove>:
 800ae64:	4288      	cmp	r0, r1
 800ae66:	b510      	push	{r4, lr}
 800ae68:	eb01 0402 	add.w	r4, r1, r2
 800ae6c:	d902      	bls.n	800ae74 <memmove+0x10>
 800ae6e:	4284      	cmp	r4, r0
 800ae70:	4623      	mov	r3, r4
 800ae72:	d807      	bhi.n	800ae84 <memmove+0x20>
 800ae74:	1e43      	subs	r3, r0, #1
 800ae76:	42a1      	cmp	r1, r4
 800ae78:	d008      	beq.n	800ae8c <memmove+0x28>
 800ae7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae82:	e7f8      	b.n	800ae76 <memmove+0x12>
 800ae84:	4601      	mov	r1, r0
 800ae86:	4402      	add	r2, r0
 800ae88:	428a      	cmp	r2, r1
 800ae8a:	d100      	bne.n	800ae8e <memmove+0x2a>
 800ae8c:	bd10      	pop	{r4, pc}
 800ae8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae96:	e7f7      	b.n	800ae88 <memmove+0x24>

0800ae98 <__malloc_lock>:
 800ae98:	4801      	ldr	r0, [pc, #4]	; (800aea0 <__malloc_lock+0x8>)
 800ae9a:	f7ff bc1d 	b.w	800a6d8 <__retarget_lock_acquire_recursive>
 800ae9e:	bf00      	nop
 800aea0:	200016a0 	.word	0x200016a0

0800aea4 <__malloc_unlock>:
 800aea4:	4801      	ldr	r0, [pc, #4]	; (800aeac <__malloc_unlock+0x8>)
 800aea6:	f7ff bc18 	b.w	800a6da <__retarget_lock_release_recursive>
 800aeaa:	bf00      	nop
 800aeac:	200016a0 	.word	0x200016a0

0800aeb0 <_realloc_r>:
 800aeb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeb2:	4607      	mov	r7, r0
 800aeb4:	4614      	mov	r4, r2
 800aeb6:	460e      	mov	r6, r1
 800aeb8:	b921      	cbnz	r1, 800aec4 <_realloc_r+0x14>
 800aeba:	4611      	mov	r1, r2
 800aebc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aec0:	f7ff bc58 	b.w	800a774 <_malloc_r>
 800aec4:	b922      	cbnz	r2, 800aed0 <_realloc_r+0x20>
 800aec6:	f7ff fc09 	bl	800a6dc <_free_r>
 800aeca:	4625      	mov	r5, r4
 800aecc:	4628      	mov	r0, r5
 800aece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aed0:	f000 f814 	bl	800aefc <_malloc_usable_size_r>
 800aed4:	42a0      	cmp	r0, r4
 800aed6:	d20f      	bcs.n	800aef8 <_realloc_r+0x48>
 800aed8:	4621      	mov	r1, r4
 800aeda:	4638      	mov	r0, r7
 800aedc:	f7ff fc4a 	bl	800a774 <_malloc_r>
 800aee0:	4605      	mov	r5, r0
 800aee2:	2800      	cmp	r0, #0
 800aee4:	d0f2      	beq.n	800aecc <_realloc_r+0x1c>
 800aee6:	4631      	mov	r1, r6
 800aee8:	4622      	mov	r2, r4
 800aeea:	f7ff ffad 	bl	800ae48 <memcpy>
 800aeee:	4631      	mov	r1, r6
 800aef0:	4638      	mov	r0, r7
 800aef2:	f7ff fbf3 	bl	800a6dc <_free_r>
 800aef6:	e7e9      	b.n	800aecc <_realloc_r+0x1c>
 800aef8:	4635      	mov	r5, r6
 800aefa:	e7e7      	b.n	800aecc <_realloc_r+0x1c>

0800aefc <_malloc_usable_size_r>:
 800aefc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af00:	1f18      	subs	r0, r3, #4
 800af02:	2b00      	cmp	r3, #0
 800af04:	bfbc      	itt	lt
 800af06:	580b      	ldrlt	r3, [r1, r0]
 800af08:	18c0      	addlt	r0, r0, r3
 800af0a:	4770      	bx	lr

0800af0c <_init>:
 800af0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af0e:	bf00      	nop
 800af10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af12:	bc08      	pop	{r3}
 800af14:	469e      	mov	lr, r3
 800af16:	4770      	bx	lr

0800af18 <_fini>:
 800af18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af1a:	bf00      	nop
 800af1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af1e:	bc08      	pop	{r3}
 800af20:	469e      	mov	lr, r3
 800af22:	4770      	bx	lr
