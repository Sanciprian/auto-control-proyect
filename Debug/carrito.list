
carrito.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e74  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08009f80  08009f80  00019f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a09c  0800a09c  000202b8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a09c  0800a09c  000202b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a09c  0800a09c  000202b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a09c  0800a09c  0001a09c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0a0  0800a0a0  0001a0a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b8  20000000  0800a0a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012b4  200002b8  0800a35c  000202b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000156c  0800a35c  0002156c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e3ea  00000000  00000000  000202e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041db  00000000  00000000  0003e6cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  000428a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e8  00000000  00000000  00043c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006f48  00000000  00000000  00044e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001959f  00000000  00000000  0004bd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000969be  00000000  00000000  000652ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fbcad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005608  00000000  00000000  000fbd00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002b8 	.word	0x200002b8
 8000128:	00000000 	.word	0x00000000
 800012c:	08009f68 	.word	0x08009f68

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002bc 	.word	0x200002bc
 8000148:	08009f68 	.word	0x08009f68

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <__aeabi_f2uiz>:
 8000740:	0042      	lsls	r2, r0, #1
 8000742:	d20e      	bcs.n	8000762 <__aeabi_f2uiz+0x22>
 8000744:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000748:	d30b      	bcc.n	8000762 <__aeabi_f2uiz+0x22>
 800074a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800074e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000752:	d409      	bmi.n	8000768 <__aeabi_f2uiz+0x28>
 8000754:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000758:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800075c:	fa23 f002 	lsr.w	r0, r3, r2
 8000760:	4770      	bx	lr
 8000762:	f04f 0000 	mov.w	r0, #0
 8000766:	4770      	bx	lr
 8000768:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800076c:	d101      	bne.n	8000772 <__aeabi_f2uiz+0x32>
 800076e:	0242      	lsls	r2, r0, #9
 8000770:	d102      	bne.n	8000778 <__aeabi_f2uiz+0x38>
 8000772:	f04f 30ff 	mov.w	r0, #4294967295
 8000776:	4770      	bx	lr
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop

08000780 <_Z9lcd_beginv>:
#include "lcd.h"


void lcd_begin(){
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
	uint8_t data;
	HAL_Delay(50);
 8000786:	2032      	movs	r0, #50	; 0x32
 8000788:	f001 f888 	bl	800189c <HAL_Delay>
	data=0b00111100;
 800078c:	233c      	movs	r3, #60	; 0x3c
 800078e:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(5,data);//Wait 4ms
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	4619      	mov	r1, r3
 8000794:	2005      	movs	r0, #5
 8000796:	f000 f851 	bl	800083c <_Z16send_lcd_commandhh>

	data=0b00111100;
 800079a:	233c      	movs	r3, #60	; 0x3c
 800079c:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1,data);//Wait 100us
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	4619      	mov	r1, r3
 80007a2:	2001      	movs	r0, #1
 80007a4:	f000 f84a 	bl	800083c <_Z16send_lcd_commandhh>

	data=0b00111100;
 80007a8:	233c      	movs	r3, #60	; 0x3c
 80007aa:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1,data);//Wait 100us
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	4619      	mov	r1, r3
 80007b0:	2001      	movs	r0, #1
 80007b2:	f000 f843 	bl	800083c <_Z16send_lcd_commandhh>

	data=0b00101100;
 80007b6:	232c      	movs	r3, #44	; 0x2c
 80007b8:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1,data);//Wait 100us
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	4619      	mov	r1, r3
 80007be:	2001      	movs	r0, #1
 80007c0:	f000 f83c 	bl	800083c <_Z16send_lcd_commandhh>

	data=0b00101100;
 80007c4:	232c      	movs	r3, #44	; 0x2c
 80007c6:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1,data);//Wait 100us
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	4619      	mov	r1, r3
 80007cc:	2001      	movs	r0, #1
 80007ce:	f000 f835 	bl	800083c <_Z16send_lcd_commandhh>

	data=0b10001100;
 80007d2:	238c      	movs	r3, #140	; 0x8c
 80007d4:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1,data);//NF
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	4619      	mov	r1, r3
 80007da:	2001      	movs	r0, #1
 80007dc:	f000 f82e 	bl	800083c <_Z16send_lcd_commandhh>

	data=0x0C;
 80007e0:	230c      	movs	r3, #12
 80007e2:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1,data);
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	4619      	mov	r1, r3
 80007e8:	2001      	movs	r0, #1
 80007ea:	f000 f827 	bl	800083c <_Z16send_lcd_commandhh>
	//-----------------------------------------------------------
	data=(0xC0)|(1<<2);
 80007ee:	23c4      	movs	r3, #196	; 0xc4
 80007f0:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(5,data);//6b
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	4619      	mov	r1, r3
 80007f6:	2005      	movs	r0, #5
 80007f8:	f000 f820 	bl	800083c <_Z16send_lcd_commandhh>

	data=(0x00)|(1<<2);
 80007fc:	2304      	movs	r3, #4
 80007fe:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1,data);//7a
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	4619      	mov	r1, r3
 8000804:	2001      	movs	r0, #1
 8000806:	f000 f819 	bl	800083c <_Z16send_lcd_commandhh>

	data=(0x10)|(1<<2);
 800080a:	2314      	movs	r3, #20
 800080c:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1,data);//7b
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	4619      	mov	r1, r3
 8000812:	2001      	movs	r0, #1
 8000814:	f000 f812 	bl	800083c <_Z16send_lcd_commandhh>

	data=(0x00)|(1<<2);
 8000818:	2304      	movs	r3, #4
 800081a:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1,data);//8a
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	4619      	mov	r1, r3
 8000820:	2001      	movs	r0, #1
 8000822:	f000 f80b 	bl	800083c <_Z16send_lcd_commandhh>

	data=(0x60)|(1<<2);
 8000826:	2364      	movs	r3, #100	; 0x64
 8000828:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(5,data);//8b
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	4619      	mov	r1, r3
 800082e:	2005      	movs	r0, #5
 8000830:	f000 f804 	bl	800083c <_Z16send_lcd_commandhh>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <_Z16send_lcd_commandhh>:

void send_lcd_command(uint8_t delay, uint8_t info){
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af02      	add	r7, sp, #8
 8000842:	4603      	mov	r3, r0
 8000844:	460a      	mov	r2, r1
 8000846:	71fb      	strb	r3, [r7, #7]
 8000848:	4613      	mov	r3, r2
 800084a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, 0x27<<1, &info, 1, 1000);
 800084c:	1dba      	adds	r2, r7, #6
 800084e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	2301      	movs	r3, #1
 8000856:	214e      	movs	r1, #78	; 0x4e
 8000858:	480d      	ldr	r0, [pc, #52]	; (8000890 <_Z16send_lcd_commandhh+0x54>)
 800085a:	f001 fc49 	bl	80020f0 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800085e:	2001      	movs	r0, #1
 8000860:	f001 f81c 	bl	800189c <HAL_Delay>
	info=info&~(1<<2);
 8000864:	79bb      	ldrb	r3, [r7, #6]
 8000866:	f023 0304 	bic.w	r3, r3, #4
 800086a:	b2db      	uxtb	r3, r3
 800086c:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, 0x27<<1, &info, 1, 1000);
 800086e:	1dba      	adds	r2, r7, #6
 8000870:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2301      	movs	r3, #1
 8000878:	214e      	movs	r1, #78	; 0x4e
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <_Z16send_lcd_commandhh+0x54>)
 800087c:	f001 fc38 	bl	80020f0 <HAL_I2C_Master_Transmit>
	HAL_Delay(delay);//Wait 100us
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	4618      	mov	r0, r3
 8000884:	f001 f80a 	bl	800189c <HAL_Delay>
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	200002d4 	.word	0x200002d4

08000894 <_Z8send_msgPc>:

void send_msg(char* text) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
    uint8_t data;

    while (*text) {
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d01d      	beq.n	80008e0 <_Z8send_msgPc+0x4c>
        data = (*text & 0xF0) | 0x0D | 0x08;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	f023 030f 	bic.w	r3, r3, #15
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	f043 030d 	orr.w	r3, r3, #13
 80008b2:	73fb      	strb	r3, [r7, #15]
        send_lcd_command(1, data);
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
 80008b6:	4619      	mov	r1, r3
 80008b8:	2001      	movs	r0, #1
 80008ba:	f7ff ffbf 	bl	800083c <_Z16send_lcd_commandhh>
        data = ((*text << 4) & 0xF0) | 0x0D | 0x08;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	011b      	lsls	r3, r3, #4
 80008c4:	b25b      	sxtb	r3, r3
 80008c6:	f043 030d 	orr.w	r3, r3, #13
 80008ca:	b25b      	sxtb	r3, r3
 80008cc:	73fb      	strb	r3, [r7, #15]
        send_lcd_command(1, data);
 80008ce:	7bfb      	ldrb	r3, [r7, #15]
 80008d0:	4619      	mov	r1, r3
 80008d2:	2001      	movs	r0, #1
 80008d4:	f7ff ffb2 	bl	800083c <_Z16send_lcd_commandhh>
        text++;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3301      	adds	r3, #1
 80008dc:	607b      	str	r3, [r7, #4]
    while (*text) {
 80008de:	e7dd      	b.n	800089c <_Z8send_msgPc+0x8>
    }
}
 80008e0:	bf00      	nop
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <_Z9lcd_cleanv>:

void lcd_clean(){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af02      	add	r7, sp, #8
	uint8_t data=(0x08)|(1<<2);
 80008ee:	230c      	movs	r3, #12
 80008f0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1,  0x27<<1 , &data, 1, 1000);
 80008f2:	1dfa      	adds	r2, r7, #7
 80008f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f8:	9300      	str	r3, [sp, #0]
 80008fa:	2301      	movs	r3, #1
 80008fc:	214e      	movs	r1, #78	; 0x4e
 80008fe:	4809      	ldr	r0, [pc, #36]	; (8000924 <_Z9lcd_cleanv+0x3c>)
 8000900:	f001 fbf6 	bl	80020f0 <HAL_I2C_Master_Transmit>
	send_lcd_command(5, data);
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4619      	mov	r1, r3
 8000908:	2005      	movs	r0, #5
 800090a:	f7ff ff97 	bl	800083c <_Z16send_lcd_commandhh>
	data=(0x18)|(1<<2);
 800090e:	231c      	movs	r3, #28
 8000910:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(5, data);
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	4619      	mov	r1, r3
 8000916:	2005      	movs	r0, #5
 8000918:	f7ff ff90 	bl	800083c <_Z16send_lcd_commandhh>
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	200002d4 	.word	0x200002d4

08000928 <_Z12update_motorR12MotorControlm3PinS1_S1_P17TIM_HandleTypeDefm>:
    // Enviar PWM
    HAL_TIM_PWM_Start(htim, channel);
    __HAL_TIM_SET_COMPARE(htim, channel, duty);
}

void update_motor(MotorControl& motor, uint32_t now_ms, Pin inA, Pin inB, Pin en, TIM_HandleTypeDef* htim, uint32_t channel) {
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b08b      	sub	sp, #44	; 0x2c
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	4639      	mov	r1, r7
 8000934:	e881 000c 	stmia.w	r1, {r2, r3}
    float dt = (now_ms - motor.last_time_ms) / 1000.0f;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093c:	68ba      	ldr	r2, [r7, #8]
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff fcb9 	bl	80002b8 <__aeabi_ui2f>
 8000946:	4603      	mov	r3, r0
 8000948:	4977      	ldr	r1, [pc, #476]	; (8000b28 <_Z12update_motorR12MotorControlm3PinS1_S1_P17TIM_HandleTypeDefm+0x200>)
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fdc0 	bl	80004d0 <__aeabi_fdiv>
 8000950:	4603      	mov	r3, r0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
    if (dt <= 0.0f) return;
 8000954:	f04f 0100 	mov.w	r1, #0
 8000958:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800095a:	f7ff fead 	bl	80006b8 <__aeabi_fcmple>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	f040 80dc 	bne.w	8000b1e <_Z12update_motorR12MotorControlm3PinS1_S1_P17TIM_HandleTypeDefm+0x1f6>

    motor.delta_ticks = motor.ticks - motor.last_ticks;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	1ad3      	subs	r3, r2, r3
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fca5 	bl	80002c0 <__aeabi_i2f>
 8000976:	4602      	mov	r2, r0
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	609a      	str	r2, [r3, #8]
    motor.distance_cm += motor.delta_ticks * Constants::kCMPerTick;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	68dc      	ldr	r4, [r3, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	689b      	ldr	r3, [r3, #8]
 8000984:	4969      	ldr	r1, [pc, #420]	; (8000b2c <_Z12update_motorR12MotorControlm3PinS1_S1_P17TIM_HandleTypeDefm+0x204>)
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff fcee 	bl	8000368 <__aeabi_fmul>
 800098c:	4603      	mov	r3, r0
 800098e:	4619      	mov	r1, r3
 8000990:	4620      	mov	r0, r4
 8000992:	f7ff fbe1 	bl	8000158 <__addsf3>
 8000996:	4603      	mov	r3, r0
 8000998:	461a      	mov	r2, r3
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	60da      	str	r2, [r3, #12]
    motor.actual_speed_cm_s = (motor.delta_ticks * Constants::kCMPerTick) / dt;
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	4962      	ldr	r1, [pc, #392]	; (8000b2c <_Z12update_motorR12MotorControlm3PinS1_S1_P17TIM_HandleTypeDefm+0x204>)
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fcdf 	bl	8000368 <__aeabi_fmul>
 80009aa:	4603      	mov	r3, r0
 80009ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff fd8e 	bl	80004d0 <__aeabi_fdiv>
 80009b4:	4603      	mov	r3, r0
 80009b6:	461a      	mov	r2, r3
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	615a      	str	r2, [r3, #20]

    float error = motor.target_speed_cm_s - motor.actual_speed_cm_s;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	691a      	ldr	r2, [r3, #16]
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	695b      	ldr	r3, [r3, #20]
 80009c4:	4619      	mov	r1, r3
 80009c6:	4610      	mov	r0, r2
 80009c8:	f7ff fbc4 	bl	8000154 <__aeabi_fsub>
 80009cc:	4603      	mov	r3, r0
 80009ce:	623b      	str	r3, [r7, #32]
    motor.integral += error * dt;
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80009d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80009d6:	6a38      	ldr	r0, [r7, #32]
 80009d8:	f7ff fcc6 	bl	8000368 <__aeabi_fmul>
 80009dc:	4603      	mov	r3, r0
 80009de:	4619      	mov	r1, r3
 80009e0:	4620      	mov	r0, r4
 80009e2:	f7ff fbb9 	bl	8000158 <__addsf3>
 80009e6:	4603      	mov	r3, r0
 80009e8:	461a      	mov	r2, r3
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	625a      	str	r2, [r3, #36]	; 0x24
    float derivative = (error - motor.last_error) / dt;
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009f2:	4619      	mov	r1, r3
 80009f4:	6a38      	ldr	r0, [r7, #32]
 80009f6:	f7ff fbad 	bl	8000154 <__aeabi_fsub>
 80009fa:	4603      	mov	r3, r0
 80009fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fd66 	bl	80004d0 <__aeabi_fdiv>
 8000a04:	4603      	mov	r3, r0
 8000a06:	61fb      	str	r3, [r7, #28]

    float output = motor.kp * error + motor.ki * motor.integral + motor.kd * derivative;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	6a39      	ldr	r1, [r7, #32]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fcaa 	bl	8000368 <__aeabi_fmul>
 8000a14:	4603      	mov	r3, r0
 8000a16:	461c      	mov	r4, r3
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	69da      	ldr	r2, [r3, #28]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a20:	4619      	mov	r1, r3
 8000a22:	4610      	mov	r0, r2
 8000a24:	f7ff fca0 	bl	8000368 <__aeabi_fmul>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4620      	mov	r0, r4
 8000a2e:	f7ff fb93 	bl	8000158 <__addsf3>
 8000a32:	4603      	mov	r3, r0
 8000a34:	461c      	mov	r4, r3
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	6a1b      	ldr	r3, [r3, #32]
 8000a3a:	69f9      	ldr	r1, [r7, #28]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fc93 	bl	8000368 <__aeabi_fmul>
 8000a42:	4603      	mov	r3, r0
 8000a44:	4619      	mov	r1, r3
 8000a46:	4620      	mov	r0, r4
 8000a48:	f7ff fb86 	bl	8000158 <__addsf3>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	613b      	str	r3, [r7, #16]
    motor.pwm_out = std::min(std::max(output, 0.0f), 50.0f); // PWM (0–50)
 8000a50:	f04f 0300 	mov.w	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]
 8000a56:	f107 0214 	add.w	r2, r7, #20
 8000a5a:	f107 0310 	add.w	r3, r7, #16
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 fcca 	bl	80013fa <_ZSt3maxIfERKT_S2_S2_>
 8000a66:	4602      	mov	r2, r0
 8000a68:	4b31      	ldr	r3, [pc, #196]	; (8000b30 <_Z12update_motorR12MotorControlm3PinS1_S1_P17TIM_HandleTypeDefm+0x208>)
 8000a6a:	61bb      	str	r3, [r7, #24]
 8000a6c:	f107 0318 	add.w	r3, r7, #24
 8000a70:	4619      	mov	r1, r3
 8000a72:	4610      	mov	r0, r2
 8000a74:	f000 fcd8 	bl	8001428 <_ZSt3minIfERKT_S2_S2_>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	62da      	str	r2, [r3, #44]	; 0x2c

    // Dirección hacia adelante
    HAL_GPIO_WritePin(inA.port, inA.pin, GPIO_PIN_SET);
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	88b9      	ldrh	r1, [r7, #4]
 8000a84:	2201      	movs	r2, #1
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 f9be 	bl	8001e08 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(inB.port, inB.pin, GPIO_PIN_RESET);
 8000a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a8e:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 8000a90:	2200      	movs	r2, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 f9b8 	bl	8001e08 <HAL_GPIO_WritePin>

    __HAL_TIM_SET_COMPARE(htim, channel, (uint16_t)motor.pwm_out);
 8000a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d10a      	bne.n	8000ab4 <_Z12update_motorR12MotorControlm3PinS1_S1_P17TIM_HandleTypeDefm+0x18c>
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fe4c 	bl	8000740 <__aeabi_f2uiz>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ab2:	e025      	b.n	8000b00 <_Z12update_motorR12MotorControlm3PinS1_S1_P17TIM_HandleTypeDefm+0x1d8>
 8000ab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ab6:	2b04      	cmp	r3, #4
 8000ab8:	d10a      	bne.n	8000ad0 <_Z12update_motorR12MotorControlm3PinS1_S1_P17TIM_HandleTypeDefm+0x1a8>
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff fe3e 	bl	8000740 <__aeabi_f2uiz>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	639a      	str	r2, [r3, #56]	; 0x38
 8000ace:	e017      	b.n	8000b00 <_Z12update_motorR12MotorControlm3PinS1_S1_P17TIM_HandleTypeDefm+0x1d8>
 8000ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ad2:	2b08      	cmp	r3, #8
 8000ad4:	d10a      	bne.n	8000aec <_Z12update_motorR12MotorControlm3PinS1_S1_P17TIM_HandleTypeDefm+0x1c4>
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fe30 	bl	8000740 <__aeabi_f2uiz>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	63da      	str	r2, [r3, #60]	; 0x3c
 8000aea:	e009      	b.n	8000b00 <_Z12update_motorR12MotorControlm3PinS1_S1_P17TIM_HandleTypeDefm+0x1d8>
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fe25 	bl	8000740 <__aeabi_f2uiz>
 8000af6:	4603      	mov	r3, r0
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_TIM_PWM_Start(htim, channel);
 8000b00:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000b02:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000b04:	f004 f8b0 	bl	8004c68 <HAL_TIM_PWM_Start>

    motor.last_error = error;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	6a3a      	ldr	r2, [r7, #32]
 8000b0c:	629a      	str	r2, [r3, #40]	; 0x28
    motor.last_ticks = motor.ticks;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	605a      	str	r2, [r3, #4]
    motor.last_time_ms = now_ms;
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	68ba      	ldr	r2, [r7, #8]
 8000b1a:	631a      	str	r2, [r3, #48]	; 0x30
 8000b1c:	e000      	b.n	8000b20 <_Z12update_motorR12MotorControlm3PinS1_S1_P17TIM_HandleTypeDefm+0x1f8>
    if (dt <= 0.0f) return;
 8000b1e:	bf00      	nop
}
 8000b20:	372c      	adds	r7, #44	; 0x2c
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd90      	pop	{r4, r7, pc}
 8000b26:	bf00      	nop
 8000b28:	447a0000 	.word	0x447a0000
 8000b2c:	3d14a20d 	.word	0x3d14a20d
 8000b30:	42480000 	.word	0x42480000

08000b34 <_Z10stop_motor3PinS_P17TIM_HandleTypeDefm>:

void stop_motor(Pin inA, Pin inB, TIM_HandleTypeDef* htim, uint32_t channel)
{
 8000b34:	b590      	push	{r4, r7, lr}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	f107 0408 	add.w	r4, r7, #8
 8000b3e:	e884 0003 	stmia.w	r4, {r0, r1}
 8000b42:	4639      	mov	r1, r7
 8000b44:	e881 000c 	stmia.w	r1, {r2, r3}
    // Active brake: both inputs HIGH
    HAL_GPIO_WritePin(inA.port, inA.pin, GPIO_PIN_SET);
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	89b9      	ldrh	r1, [r7, #12]
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 f95a 	bl	8001e08 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(inB.port, inB.pin, GPIO_PIN_SET);
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	88b9      	ldrh	r1, [r7, #4]
 8000b58:	2201      	movs	r2, #1
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f001 f954 	bl	8001e08 <HAL_GPIO_WritePin>

    // Stop PWM signal
    __HAL_TIM_SET_COMPARE(htim, channel, 0);
 8000b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d104      	bne.n	8000b70 <_Z10stop_motor3PinS_P17TIM_HandleTypeDefm+0x3c>
 8000b66:	6a3b      	ldr	r3, [r7, #32]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b6e:	e013      	b.n	8000b98 <_Z10stop_motor3PinS_P17TIM_HandleTypeDefm+0x64>
    __HAL_TIM_SET_COMPARE(htim, channel, 0);
 8000b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b72:	2b04      	cmp	r3, #4
 8000b74:	d104      	bne.n	8000b80 <_Z10stop_motor3PinS_P17TIM_HandleTypeDefm+0x4c>
 8000b76:	6a3b      	ldr	r3, [r7, #32]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000b7e:	e00b      	b.n	8000b98 <_Z10stop_motor3PinS_P17TIM_HandleTypeDefm+0x64>
    __HAL_TIM_SET_COMPARE(htim, channel, 0);
 8000b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b82:	2b08      	cmp	r3, #8
 8000b84:	d104      	bne.n	8000b90 <_Z10stop_motor3PinS_P17TIM_HandleTypeDefm+0x5c>
 8000b86:	6a3b      	ldr	r3, [r7, #32]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000b8e:	e003      	b.n	8000b98 <_Z10stop_motor3PinS_P17TIM_HandleTypeDefm+0x64>
    __HAL_TIM_SET_COMPARE(htim, channel, 0);
 8000b90:	6a3b      	ldr	r3, [r7, #32]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2200      	movs	r2, #0
 8000b96:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000b98:	bf00      	nop
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd90      	pop	{r4, r7, pc}

08000ba0 <_Z15stop_all_motorsv>:
void stop_all_motors() {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af02      	add	r7, sp, #8
    // Front Left
    stop_motor(Constants::kFrontLeftA, Constants::kFrontLeftB, &htim1, TIM_CHANNEL_1);
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <_Z15stop_all_motorsv+0x5c>)
 8000ba8:	4915      	ldr	r1, [pc, #84]	; (8000c00 <_Z15stop_all_motorsv+0x60>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	9201      	str	r2, [sp, #4]
 8000bae:	4a15      	ldr	r2, [pc, #84]	; (8000c04 <_Z15stop_all_motorsv+0x64>)
 8000bb0:	9200      	str	r2, [sp, #0]
 8000bb2:	cb0c      	ldmia	r3, {r2, r3}
 8000bb4:	c903      	ldmia	r1, {r0, r1}
 8000bb6:	f7ff ffbd 	bl	8000b34 <_Z10stop_motor3PinS_P17TIM_HandleTypeDefm>

    // Front Right
    stop_motor(Constants::kFrontRightA, Constants::kFrontRightB, &htim3, TIM_CHANNEL_1);
 8000bba:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <_Z15stop_all_motorsv+0x68>)
 8000bbc:	4913      	ldr	r1, [pc, #76]	; (8000c0c <_Z15stop_all_motorsv+0x6c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	9201      	str	r2, [sp, #4]
 8000bc2:	4a13      	ldr	r2, [pc, #76]	; (8000c10 <_Z15stop_all_motorsv+0x70>)
 8000bc4:	9200      	str	r2, [sp, #0]
 8000bc6:	cb0c      	ldmia	r3, {r2, r3}
 8000bc8:	c903      	ldmia	r1, {r0, r1}
 8000bca:	f7ff ffb3 	bl	8000b34 <_Z10stop_motor3PinS_P17TIM_HandleTypeDefm>

    // Back Left
    stop_motor(Constants::kBackLeftA, Constants::kBackLeftB, &htim3, TIM_CHANNEL_2);
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <_Z15stop_all_motorsv+0x74>)
 8000bd0:	4911      	ldr	r1, [pc, #68]	; (8000c18 <_Z15stop_all_motorsv+0x78>)
 8000bd2:	2204      	movs	r2, #4
 8000bd4:	9201      	str	r2, [sp, #4]
 8000bd6:	4a0e      	ldr	r2, [pc, #56]	; (8000c10 <_Z15stop_all_motorsv+0x70>)
 8000bd8:	9200      	str	r2, [sp, #0]
 8000bda:	cb0c      	ldmia	r3, {r2, r3}
 8000bdc:	c903      	ldmia	r1, {r0, r1}
 8000bde:	f7ff ffa9 	bl	8000b34 <_Z10stop_motor3PinS_P17TIM_HandleTypeDefm>

    // Back Right
    stop_motor(Constants::kBackRightA, Constants::kBackRightB, &htim3, TIM_CHANNEL_4);
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <_Z15stop_all_motorsv+0x7c>)
 8000be4:	490e      	ldr	r1, [pc, #56]	; (8000c20 <_Z15stop_all_motorsv+0x80>)
 8000be6:	220c      	movs	r2, #12
 8000be8:	9201      	str	r2, [sp, #4]
 8000bea:	4a09      	ldr	r2, [pc, #36]	; (8000c10 <_Z15stop_all_motorsv+0x70>)
 8000bec:	9200      	str	r2, [sp, #0]
 8000bee:	cb0c      	ldmia	r3, {r2, r3}
 8000bf0:	c903      	ldmia	r1, {r0, r1}
 8000bf2:	f7ff ff9f 	bl	8000b34 <_Z10stop_motor3PinS_P17TIM_HandleTypeDefm>
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	0800a004 	.word	0x0800a004
 8000c00:	08009ffc 	.word	0x08009ffc
 8000c04:	20000328 	.word	0x20000328
 8000c08:	0800a014 	.word	0x0800a014
 8000c0c:	0800a00c 	.word	0x0800a00c
 8000c10:	20000370 	.word	0x20000370
 8000c14:	0800a024 	.word	0x0800a024
 8000c18:	0800a01c 	.word	0x0800a01c
 8000c1c:	0800a034 	.word	0x0800a034
 8000c20:	0800a02c 	.word	0x0800a02c

08000c24 <HAL_GPIO_EXTI_Callback>:
static void MX_I2C1_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8000c2e:	88fb      	ldrh	r3, [r7, #6]
 8000c30:	3b01      	subs	r3, #1
 8000c32:	2b07      	cmp	r3, #7
 8000c34:	d82a      	bhi.n	8000c8c <HAL_GPIO_EXTI_Callback+0x68>
 8000c36:	a201      	add	r2, pc, #4	; (adr r2, 8000c3c <HAL_GPIO_EXTI_Callback+0x18>)
 8000c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3c:	08000c5d 	.word	0x08000c5d
 8000c40:	08000c69 	.word	0x08000c69
 8000c44:	08000c8d 	.word	0x08000c8d
 8000c48:	08000c75 	.word	0x08000c75
 8000c4c:	08000c8d 	.word	0x08000c8d
 8000c50:	08000c8d 	.word	0x08000c8d
 8000c54:	08000c8d 	.word	0x08000c8d
 8000c58:	08000c81 	.word	0x08000c81
		case GPIO_PIN_0: frontLeftMotor.ticks++; break;
 8000c5c:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <HAL_GPIO_EXTI_Callback+0x74>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	3301      	adds	r3, #1
 8000c62:	4a0d      	ldr	r2, [pc, #52]	; (8000c98 <HAL_GPIO_EXTI_Callback+0x74>)
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	e011      	b.n	8000c8c <HAL_GPIO_EXTI_Callback+0x68>
		case GPIO_PIN_1: frontRightMotor.ticks++; break;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <HAL_GPIO_EXTI_Callback+0x78>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	4a0b      	ldr	r2, [pc, #44]	; (8000c9c <HAL_GPIO_EXTI_Callback+0x78>)
 8000c70:	6013      	str	r3, [r2, #0]
 8000c72:	e00b      	b.n	8000c8c <HAL_GPIO_EXTI_Callback+0x68>
		case GPIO_PIN_2: backLeftMotor.ticks++; break;
 8000c74:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	4a09      	ldr	r2, [pc, #36]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000c7c:	6013      	str	r3, [r2, #0]
 8000c7e:	e005      	b.n	8000c8c <HAL_GPIO_EXTI_Callback+0x68>
		case GPIO_PIN_3: backRightMotor.ticks++; break;
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <HAL_GPIO_EXTI_Callback+0x80>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	3301      	adds	r3, #1
 8000c86:	4a07      	ldr	r2, [pc, #28]	; (8000ca4 <HAL_GPIO_EXTI_Callback+0x80>)
 8000c88:	6013      	str	r3, [r2, #0]
 8000c8a:	bf00      	nop
	}
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000008 	.word	0x20000008
 8000c9c:	2000003c 	.word	0x2000003c
 8000ca0:	20000070 	.word	0x20000070
 8000ca4:	200000a4 	.word	0x200000a4

08000ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b094      	sub	sp, #80	; 0x50
 8000cac:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cae:	f000 fd93 	bl	80017d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb2:	f000 f947 	bl	8000f44 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb6:	f000 fb01 	bl	80012bc <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 8000cba:	f000 f9ad 	bl	8001018 <_ZL12MX_I2C1_Initv>
  MX_USB_DEVICE_Init();
 8000cbe:	f008 f871 	bl	8008da4 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000cc2:	f000 f9dd 	bl	8001080 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8000cc6:	f000 fa71 	bl	80011ac <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */
  MX_GPIO_Init();
 8000cca:	f000 faf7 	bl	80012bc <_ZL12MX_GPIO_Initv>
    MX_I2C1_Init();
 8000cce:	f000 f9a3 	bl	8001018 <_ZL12MX_I2C1_Initv>
    MX_USB_DEVICE_Init();
 8000cd2:	f008 f867 	bl	8008da4 <MX_USB_DEVICE_Init>
    /* USER CODE BEGIN 2 */
    EXTI->RTSR |= (1 << 0);  // PA0
 8000cd6:	4b81      	ldr	r3, [pc, #516]	; (8000edc <main+0x234>)
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	4a80      	ldr	r2, [pc, #512]	; (8000edc <main+0x234>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6093      	str	r3, [r2, #8]
    EXTI->RTSR |= (1 << 1);  // PA1
 8000ce2:	4b7e      	ldr	r3, [pc, #504]	; (8000edc <main+0x234>)
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	4a7d      	ldr	r2, [pc, #500]	; (8000edc <main+0x234>)
 8000ce8:	f043 0302 	orr.w	r3, r3, #2
 8000cec:	6093      	str	r3, [r2, #8]
    EXTI->RTSR |= (1 << 2);  // PA2
 8000cee:	4b7b      	ldr	r3, [pc, #492]	; (8000edc <main+0x234>)
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	4a7a      	ldr	r2, [pc, #488]	; (8000edc <main+0x234>)
 8000cf4:	f043 0304 	orr.w	r3, r3, #4
 8000cf8:	6093      	str	r3, [r2, #8]
    EXTI->RTSR |= (1 << 3);  // PA3
 8000cfa:	4b78      	ldr	r3, [pc, #480]	; (8000edc <main+0x234>)
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	4a77      	ldr	r2, [pc, #476]	; (8000edc <main+0x234>)
 8000d00:	f043 0308 	orr.w	r3, r3, #8
 8000d04:	6093      	str	r3, [r2, #8]

    EXTI->FTSR &= ~(1 << 0); // Desactiva flanco de bajada (falling)
 8000d06:	4b75      	ldr	r3, [pc, #468]	; (8000edc <main+0x234>)
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	4a74      	ldr	r2, [pc, #464]	; (8000edc <main+0x234>)
 8000d0c:	f023 0301 	bic.w	r3, r3, #1
 8000d10:	60d3      	str	r3, [r2, #12]
    EXTI->FTSR &= ~(1 << 1);
 8000d12:	4b72      	ldr	r3, [pc, #456]	; (8000edc <main+0x234>)
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	4a71      	ldr	r2, [pc, #452]	; (8000edc <main+0x234>)
 8000d18:	f023 0302 	bic.w	r3, r3, #2
 8000d1c:	60d3      	str	r3, [r2, #12]
    EXTI->FTSR &= ~(1 << 2);
 8000d1e:	4b6f      	ldr	r3, [pc, #444]	; (8000edc <main+0x234>)
 8000d20:	68db      	ldr	r3, [r3, #12]
 8000d22:	4a6e      	ldr	r2, [pc, #440]	; (8000edc <main+0x234>)
 8000d24:	f023 0304 	bic.w	r3, r3, #4
 8000d28:	60d3      	str	r3, [r2, #12]
    EXTI->FTSR &= ~(1 << 3);
 8000d2a:	4b6c      	ldr	r3, [pc, #432]	; (8000edc <main+0x234>)
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	4a6b      	ldr	r2, [pc, #428]	; (8000edc <main+0x234>)
 8000d30:	f023 0308 	bic.w	r3, r3, #8
 8000d34:	60d3      	str	r3, [r2, #12]

    HAL_Init();
 8000d36:	f000 fd4f 	bl	80017d8 <HAL_Init>
    SystemClock_Config();
 8000d3a:	f000 f903 	bl	8000f44 <_Z18SystemClock_Configv>
    MX_GPIO_Init();
 8000d3e:	f000 fabd 	bl	80012bc <_ZL12MX_GPIO_Initv>
    MX_TIM1_Init();
 8000d42:	f000 f99d 	bl	8001080 <_ZL12MX_TIM1_Initv>
    MX_TIM3_Init();
 8000d46:	f000 fa31 	bl	80011ac <_ZL12MX_TIM3_Initv>

    lcd_begin();
 8000d4a:	f7ff fd19 	bl	8000780 <_Z9lcd_beginv>
    send_msg("Equipo4");
 8000d4e:	4864      	ldr	r0, [pc, #400]	; (8000ee0 <main+0x238>)
 8000d50:	f7ff fda0 	bl	8000894 <_Z8send_msgPc>

    // Rueda Derecha
    frontLeftMotor.target_speed_cm_s = 30;
 8000d54:	4b63      	ldr	r3, [pc, #396]	; (8000ee4 <main+0x23c>)
 8000d56:	4a64      	ldr	r2, [pc, #400]	; (8000ee8 <main+0x240>)
 8000d58:	611a      	str	r2, [r3, #16]
	frontRightMotor.target_speed_cm_s = speed;
 8000d5a:	4b64      	ldr	r3, [pc, #400]	; (8000eec <main+0x244>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff faae 	bl	80002c0 <__aeabi_i2f>
 8000d64:	4603      	mov	r3, r0
 8000d66:	4a62      	ldr	r2, [pc, #392]	; (8000ef0 <main+0x248>)
 8000d68:	6113      	str	r3, [r2, #16]
	backLeftMotor.target_speed_cm_s = speed;
 8000d6a:	4b60      	ldr	r3, [pc, #384]	; (8000eec <main+0x244>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff faa6 	bl	80002c0 <__aeabi_i2f>
 8000d74:	4603      	mov	r3, r0
 8000d76:	4a5f      	ldr	r2, [pc, #380]	; (8000ef4 <main+0x24c>)
 8000d78:	6113      	str	r3, [r2, #16]
	backRightMotor.target_speed_cm_s = speed;
 8000d7a:	4b5c      	ldr	r3, [pc, #368]	; (8000eec <main+0x244>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fa9e 	bl	80002c0 <__aeabi_i2f>
 8000d84:	4603      	mov	r3, r0
 8000d86:	4a5c      	ldr	r2, [pc, #368]	; (8000ef8 <main+0x250>)
 8000d88:	6113      	str	r3, [r2, #16]
	uint32_t last_average_time = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	637b      	str	r3, [r7, #52]	; 0x34
	float total_distance = 0;
 8000d8e:	f04f 0300 	mov.w	r3, #0
 8000d92:	633b      	str	r3, [r7, #48]	; 0x30
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  uint32_t now = HAL_GetTick();
 8000d94:	f000 fd78 	bl	8001888 <HAL_GetTick>
 8000d98:	62f8      	str	r0, [r7, #44]	; 0x2c
	  update_motor(frontLeftMotor,  now, Constants::kFrontLeftA,  Constants::kFrontLeftB,  Constants::kFrontLeftEnable,  &htim1, TIM_CHANNEL_1);
 8000d9a:	4a58      	ldr	r2, [pc, #352]	; (8000efc <main+0x254>)
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	9305      	str	r3, [sp, #20]
 8000da0:	4b57      	ldr	r3, [pc, #348]	; (8000f00 <main+0x258>)
 8000da2:	9304      	str	r3, [sp, #16]
 8000da4:	4957      	ldr	r1, [pc, #348]	; (8000f04 <main+0x25c>)
 8000da6:	ab02      	add	r3, sp, #8
 8000da8:	c903      	ldmia	r1, {r0, r1}
 8000daa:	e883 0003 	stmia.w	r3, {r0, r1}
 8000dae:	4956      	ldr	r1, [pc, #344]	; (8000f08 <main+0x260>)
 8000db0:	466b      	mov	r3, sp
 8000db2:	c903      	ldmia	r1, {r0, r1}
 8000db4:	e883 0003 	stmia.w	r3, {r0, r1}
 8000db8:	ca0c      	ldmia	r2, {r2, r3}
 8000dba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000dbc:	4849      	ldr	r0, [pc, #292]	; (8000ee4 <main+0x23c>)
 8000dbe:	f7ff fdb3 	bl	8000928 <_Z12update_motorR12MotorControlm3PinS1_S1_P17TIM_HandleTypeDefm>
	  update_motor(frontRightMotor, now, Constants::kFrontRightA, Constants::kFrontRightB, Constants::kFrontRightEnable, &htim3, TIM_CHANNEL_1);
 8000dc2:	4a52      	ldr	r2, [pc, #328]	; (8000f0c <main+0x264>)
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	9305      	str	r3, [sp, #20]
 8000dc8:	4b51      	ldr	r3, [pc, #324]	; (8000f10 <main+0x268>)
 8000dca:	9304      	str	r3, [sp, #16]
 8000dcc:	4951      	ldr	r1, [pc, #324]	; (8000f14 <main+0x26c>)
 8000dce:	ab02      	add	r3, sp, #8
 8000dd0:	c903      	ldmia	r1, {r0, r1}
 8000dd2:	e883 0003 	stmia.w	r3, {r0, r1}
 8000dd6:	4950      	ldr	r1, [pc, #320]	; (8000f18 <main+0x270>)
 8000dd8:	466b      	mov	r3, sp
 8000dda:	c903      	ldmia	r1, {r0, r1}
 8000ddc:	e883 0003 	stmia.w	r3, {r0, r1}
 8000de0:	ca0c      	ldmia	r2, {r2, r3}
 8000de2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000de4:	4842      	ldr	r0, [pc, #264]	; (8000ef0 <main+0x248>)
 8000de6:	f7ff fd9f 	bl	8000928 <_Z12update_motorR12MotorControlm3PinS1_S1_P17TIM_HandleTypeDefm>
	  update_motor(backLeftMotor,   now, Constants::kBackLeftA,   Constants::kBackLeftB,   Constants::kBackLeftEnable,   &htim3, TIM_CHANNEL_2);
 8000dea:	4a4c      	ldr	r2, [pc, #304]	; (8000f1c <main+0x274>)
 8000dec:	2304      	movs	r3, #4
 8000dee:	9305      	str	r3, [sp, #20]
 8000df0:	4b47      	ldr	r3, [pc, #284]	; (8000f10 <main+0x268>)
 8000df2:	9304      	str	r3, [sp, #16]
 8000df4:	494a      	ldr	r1, [pc, #296]	; (8000f20 <main+0x278>)
 8000df6:	ab02      	add	r3, sp, #8
 8000df8:	c903      	ldmia	r1, {r0, r1}
 8000dfa:	e883 0003 	stmia.w	r3, {r0, r1}
 8000dfe:	4949      	ldr	r1, [pc, #292]	; (8000f24 <main+0x27c>)
 8000e00:	466b      	mov	r3, sp
 8000e02:	c903      	ldmia	r1, {r0, r1}
 8000e04:	e883 0003 	stmia.w	r3, {r0, r1}
 8000e08:	ca0c      	ldmia	r2, {r2, r3}
 8000e0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000e0c:	4839      	ldr	r0, [pc, #228]	; (8000ef4 <main+0x24c>)
 8000e0e:	f7ff fd8b 	bl	8000928 <_Z12update_motorR12MotorControlm3PinS1_S1_P17TIM_HandleTypeDefm>
	  update_motor(backRightMotor,  now, Constants::kBackRightA,  Constants::kBackRightB,  Constants::kBackRightEnable,  &htim3, TIM_CHANNEL_4);
 8000e12:	4a45      	ldr	r2, [pc, #276]	; (8000f28 <main+0x280>)
 8000e14:	230c      	movs	r3, #12
 8000e16:	9305      	str	r3, [sp, #20]
 8000e18:	4b3d      	ldr	r3, [pc, #244]	; (8000f10 <main+0x268>)
 8000e1a:	9304      	str	r3, [sp, #16]
 8000e1c:	4943      	ldr	r1, [pc, #268]	; (8000f2c <main+0x284>)
 8000e1e:	ab02      	add	r3, sp, #8
 8000e20:	c903      	ldmia	r1, {r0, r1}
 8000e22:	e883 0003 	stmia.w	r3, {r0, r1}
 8000e26:	4942      	ldr	r1, [pc, #264]	; (8000f30 <main+0x288>)
 8000e28:	466b      	mov	r3, sp
 8000e2a:	c903      	ldmia	r1, {r0, r1}
 8000e2c:	e883 0003 	stmia.w	r3, {r0, r1}
 8000e30:	ca0c      	ldmia	r2, {r2, r3}
 8000e32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000e34:	4830      	ldr	r0, [pc, #192]	; (8000ef8 <main+0x250>)
 8000e36:	f7ff fd77 	bl	8000928 <_Z12update_motorR12MotorControlm3PinS1_S1_P17TIM_HandleTypeDefm>

		 float average_distance =
				    (frontLeftMotor.distance_cm +
 8000e3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ee4 <main+0x23c>)
 8000e3c:	68db      	ldr	r3, [r3, #12]
				     frontRightMotor.distance_cm +
 8000e3e:	4a2c      	ldr	r2, [pc, #176]	; (8000ef0 <main+0x248>)
 8000e40:	68d2      	ldr	r2, [r2, #12]
				    (frontLeftMotor.distance_cm +
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff f987 	bl	8000158 <__addsf3>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	461a      	mov	r2, r3
				     backRightMotor.distance_cm) / 3.0f;
 8000e4e:	4b2a      	ldr	r3, [pc, #168]	; (8000ef8 <main+0x250>)
 8000e50:	68db      	ldr	r3, [r3, #12]
				     frontRightMotor.distance_cm +
 8000e52:	4619      	mov	r1, r3
 8000e54:	4610      	mov	r0, r2
 8000e56:	f7ff f97f 	bl	8000158 <__addsf3>
 8000e5a:	4603      	mov	r3, r0
		 float average_distance =
 8000e5c:	4935      	ldr	r1, [pc, #212]	; (8000f34 <main+0x28c>)
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fb36 	bl	80004d0 <__aeabi_fdiv>
 8000e64:	4603      	mov	r3, r0
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
		 char buffer[32];
		 int distancia_entera = (int)average_distance;
 8000e68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e6a:	f7ff fc43 	bl	80006f4 <__aeabi_f2iz>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24

	 while (distancia_entera > target){
 8000e72:	4b31      	ldr	r3, [pc, #196]	; (8000f38 <main+0x290>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	dd18      	ble.n	8000eae <main+0x206>
		 if (a){
 8000e7c:	4b2f      	ldr	r3, [pc, #188]	; (8000f3c <main+0x294>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d011      	beq.n	8000ea8 <main+0x200>
		 sprintf(buffer,"Dist: %d cm", (int)backLeftMotor.ticks);
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <main+0x24c>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	492d      	ldr	r1, [pc, #180]	; (8000f40 <main+0x298>)
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f008 fc31 	bl	80096f4 <siprintf>
		 		 lcd_clean();
 8000e92:	f7ff fd29 	bl	80008e8 <_Z9lcd_cleanv>
		 		 send_msg(buffer);
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fcfb 	bl	8000894 <_Z8send_msgPc>
		 		 a = a -1;
 8000e9e:	4b27      	ldr	r3, [pc, #156]	; (8000f3c <main+0x294>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	4a25      	ldr	r2, [pc, #148]	; (8000f3c <main+0x294>)
 8000ea6:	6013      	str	r3, [r2, #0]
		 }
						 stop_all_motors();
 8000ea8:	f7ff fe7a 	bl	8000ba0 <_Z15stop_all_motorsv>
	 while (distancia_entera > target){
 8000eac:	e7e1      	b.n	8000e72 <main+0x1ca>
					 }
	  // Cada 1000 ms: calcular distancia promedio
	 if (now - last_average_time >= 500)
 8000eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000eb8:	f4ff af6c 	bcc.w	8000d94 <main+0xec>
	 {
		 sprintf(buffer,"Dist: %d cm", (int)backRightMotor.ticks);
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <main+0x250>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	491f      	ldr	r1, [pc, #124]	; (8000f40 <main+0x298>)
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f008 fc15 	bl	80096f4 <siprintf>
		 lcd_clean();
 8000eca:	f7ff fd0d 	bl	80008e8 <_Z9lcd_cleanv>
		 send_msg(buffer);
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fcdf 	bl	8000894 <_Z8send_msgPc>

		 last_average_time = now;
 8000ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ed8:	637b      	str	r3, [r7, #52]	; 0x34

	 }
//	  HAL_Delay(100);
    /* USER CODE BEGIN 3 */
  }
 8000eda:	e75b      	b.n	8000d94 <main+0xec>
 8000edc:	40010400 	.word	0x40010400
 8000ee0:	08009f80 	.word	0x08009f80
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	41f00000 	.word	0x41f00000
 8000eec:	200003b8 	.word	0x200003b8
 8000ef0:	2000003c 	.word	0x2000003c
 8000ef4:	20000070 	.word	0x20000070
 8000ef8:	200000a4 	.word	0x200000a4
 8000efc:	08009ffc 	.word	0x08009ffc
 8000f00:	20000328 	.word	0x20000328
 8000f04:	08009fdc 	.word	0x08009fdc
 8000f08:	0800a004 	.word	0x0800a004
 8000f0c:	0800a00c 	.word	0x0800a00c
 8000f10:	20000370 	.word	0x20000370
 8000f14:	08009fe4 	.word	0x08009fe4
 8000f18:	0800a014 	.word	0x0800a014
 8000f1c:	0800a01c 	.word	0x0800a01c
 8000f20:	08009fec 	.word	0x08009fec
 8000f24:	0800a024 	.word	0x0800a024
 8000f28:	0800a02c 	.word	0x0800a02c
 8000f2c:	08009ff4 	.word	0x08009ff4
 8000f30:	0800a034 	.word	0x0800a034
 8000f34:	40400000 	.word	0x40400000
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	20000004 	.word	0x20000004
 8000f40:	08009f88 	.word	0x08009f88

08000f44 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b094      	sub	sp, #80	; 0x50
 8000f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f4e:	2228      	movs	r2, #40	; 0x28
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f008 fbc6 	bl	80096e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f74:	2301      	movs	r3, #1
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f82:	2301      	movs	r3, #1
 8000f84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f86:	2302      	movs	r3, #2
 8000f88:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f90:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f94:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f003 f964 	bl	8004268 <HAL_RCC_OscConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	bf14      	ite	ne
 8000fa6:	2301      	movne	r3, #1
 8000fa8:	2300      	moveq	r3, #0
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8000fb0:	f000 fa1e 	bl	80013f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	2102      	movs	r1, #2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f003 fbc9 	bl	8004768 <HAL_RCC_ClockConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	bf14      	ite	ne
 8000fdc:	2301      	movne	r3, #1
 8000fde:	2300      	moveq	r3, #0
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8000fe6:	f000 fa03 	bl	80013f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000fea:	2310      	movs	r3, #16
 8000fec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f003 fd31 	bl	8004a5c <HAL_RCCEx_PeriphCLKConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	bf14      	ite	ne
 8001000:	2301      	movne	r3, #1
 8001002:	2300      	moveq	r3, #0
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 800100a:	f000 f9f1 	bl	80013f0 <Error_Handler>
  }
}
 800100e:	bf00      	nop
 8001010:	3750      	adds	r7, #80	; 0x50
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800101c:	4b15      	ldr	r3, [pc, #84]	; (8001074 <_ZL12MX_I2C1_Initv+0x5c>)
 800101e:	4a16      	ldr	r2, [pc, #88]	; (8001078 <_ZL12MX_I2C1_Initv+0x60>)
 8001020:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001022:	4b14      	ldr	r3, [pc, #80]	; (8001074 <_ZL12MX_I2C1_Initv+0x5c>)
 8001024:	4a15      	ldr	r2, [pc, #84]	; (800107c <_ZL12MX_I2C1_Initv+0x64>)
 8001026:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <_ZL12MX_I2C1_Initv+0x5c>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <_ZL12MX_I2C1_Initv+0x5c>)
 8001030:	2200      	movs	r2, #0
 8001032:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <_ZL12MX_I2C1_Initv+0x5c>)
 8001036:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800103a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800103c:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <_ZL12MX_I2C1_Initv+0x5c>)
 800103e:	2200      	movs	r2, #0
 8001040:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <_ZL12MX_I2C1_Initv+0x5c>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <_ZL12MX_I2C1_Initv+0x5c>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <_ZL12MX_I2C1_Initv+0x5c>)
 8001050:	2200      	movs	r2, #0
 8001052:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001054:	4807      	ldr	r0, [pc, #28]	; (8001074 <_ZL12MX_I2C1_Initv+0x5c>)
 8001056:	f000 ff07 	bl	8001e68 <HAL_I2C_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	bf14      	ite	ne
 8001060:	2301      	movne	r3, #1
 8001062:	2300      	moveq	r3, #0
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800106a:	f000 f9c1 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200002d4 	.word	0x200002d4
 8001078:	40005400 	.word	0x40005400
 800107c:	000186a0 	.word	0x000186a0

08001080 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b092      	sub	sp, #72	; 0x48
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001086:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
 80010a0:	615a      	str	r2, [r3, #20]
 80010a2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	2220      	movs	r2, #32
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f008 fb1a 	bl	80096e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010b0:	4b3c      	ldr	r3, [pc, #240]	; (80011a4 <_ZL12MX_TIM1_Initv+0x124>)
 80010b2:	4a3d      	ldr	r2, [pc, #244]	; (80011a8 <_ZL12MX_TIM1_Initv+0x128>)
 80010b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80010b6:	4b3b      	ldr	r3, [pc, #236]	; (80011a4 <_ZL12MX_TIM1_Initv+0x124>)
 80010b8:	2247      	movs	r2, #71	; 0x47
 80010ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010bc:	4b39      	ldr	r3, [pc, #228]	; (80011a4 <_ZL12MX_TIM1_Initv+0x124>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50;
 80010c2:	4b38      	ldr	r3, [pc, #224]	; (80011a4 <_ZL12MX_TIM1_Initv+0x124>)
 80010c4:	2232      	movs	r2, #50	; 0x32
 80010c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c8:	4b36      	ldr	r3, [pc, #216]	; (80011a4 <_ZL12MX_TIM1_Initv+0x124>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010ce:	4b35      	ldr	r3, [pc, #212]	; (80011a4 <_ZL12MX_TIM1_Initv+0x124>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d4:	4b33      	ldr	r3, [pc, #204]	; (80011a4 <_ZL12MX_TIM1_Initv+0x124>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010da:	4832      	ldr	r0, [pc, #200]	; (80011a4 <_ZL12MX_TIM1_Initv+0x124>)
 80010dc:	f003 fd74 	bl	8004bc8 <HAL_TIM_PWM_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	bf14      	ite	ne
 80010e6:	2301      	movne	r3, #1
 80010e8:	2300      	moveq	r3, #0
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <_ZL12MX_TIM1_Initv+0x74>
  {
    Error_Handler();
 80010f0:	f000 f97e 	bl	80013f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f4:	2300      	movs	r3, #0
 80010f6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001100:	4619      	mov	r1, r3
 8001102:	4828      	ldr	r0, [pc, #160]	; (80011a4 <_ZL12MX_TIM1_Initv+0x124>)
 8001104:	f004 f92e 	bl	8005364 <HAL_TIMEx_MasterConfigSynchronization>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	bf14      	ite	ne
 800110e:	2301      	movne	r3, #1
 8001110:	2300      	moveq	r3, #0
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <_ZL12MX_TIM1_Initv+0x9c>
  {
    Error_Handler();
 8001118:	f000 f96a 	bl	80013f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800111c:	2360      	movs	r3, #96	; 0x60
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001124:	2300      	movs	r3, #0
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001128:	2300      	movs	r3, #0
 800112a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001130:	2300      	movs	r3, #0
 8001132:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001134:	2300      	movs	r3, #0
 8001136:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113c:	2200      	movs	r2, #0
 800113e:	4619      	mov	r1, r3
 8001140:	4818      	ldr	r0, [pc, #96]	; (80011a4 <_ZL12MX_TIM1_Initv+0x124>)
 8001142:	f003 fe33 	bl	8004dac <HAL_TIM_PWM_ConfigChannel>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	bf14      	ite	ne
 800114c:	2301      	movne	r3, #1
 800114e:	2300      	moveq	r3, #0
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <_ZL12MX_TIM1_Initv+0xda>
  {
    Error_Handler();
 8001156:	f000 f94b 	bl	80013f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800116e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001172:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001174:	2300      	movs	r3, #0
 8001176:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	4619      	mov	r1, r3
 800117c:	4809      	ldr	r0, [pc, #36]	; (80011a4 <_ZL12MX_TIM1_Initv+0x124>)
 800117e:	f004 f94f 	bl	8005420 <HAL_TIMEx_ConfigBreakDeadTime>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	bf14      	ite	ne
 8001188:	2301      	movne	r3, #1
 800118a:	2300      	moveq	r3, #0
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <_ZL12MX_TIM1_Initv+0x116>
  {
    Error_Handler();
 8001192:	f000 f92d 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001196:	4803      	ldr	r0, [pc, #12]	; (80011a4 <_ZL12MX_TIM1_Initv+0x124>)
 8001198:	f000 fa00 	bl	800159c <HAL_TIM_MspPostInit>

}
 800119c:	bf00      	nop
 800119e:	3748      	adds	r7, #72	; 0x48
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000328 	.word	0x20000328
 80011a8:	40012c00 	.word	0x40012c00

080011ac <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b2:	f107 0320 	add.w	r3, r7, #32
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]
 80011ca:	615a      	str	r2, [r3, #20]
 80011cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011ce:	4b39      	ldr	r3, [pc, #228]	; (80012b4 <_ZL12MX_TIM3_Initv+0x108>)
 80011d0:	4a39      	ldr	r2, [pc, #228]	; (80012b8 <_ZL12MX_TIM3_Initv+0x10c>)
 80011d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80011d4:	4b37      	ldr	r3, [pc, #220]	; (80012b4 <_ZL12MX_TIM3_Initv+0x108>)
 80011d6:	2247      	movs	r2, #71	; 0x47
 80011d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011da:	4b36      	ldr	r3, [pc, #216]	; (80012b4 <_ZL12MX_TIM3_Initv+0x108>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50;
 80011e0:	4b34      	ldr	r3, [pc, #208]	; (80012b4 <_ZL12MX_TIM3_Initv+0x108>)
 80011e2:	2232      	movs	r2, #50	; 0x32
 80011e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e6:	4b33      	ldr	r3, [pc, #204]	; (80012b4 <_ZL12MX_TIM3_Initv+0x108>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ec:	4b31      	ldr	r3, [pc, #196]	; (80012b4 <_ZL12MX_TIM3_Initv+0x108>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011f2:	4830      	ldr	r0, [pc, #192]	; (80012b4 <_ZL12MX_TIM3_Initv+0x108>)
 80011f4:	f003 fce8 	bl	8004bc8 <HAL_TIM_PWM_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	bf14      	ite	ne
 80011fe:	2301      	movne	r3, #1
 8001200:	2300      	moveq	r3, #0
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <_ZL12MX_TIM3_Initv+0x60>
  {
    Error_Handler();
 8001208:	f000 f8f2 	bl	80013f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001214:	f107 0320 	add.w	r3, r7, #32
 8001218:	4619      	mov	r1, r3
 800121a:	4826      	ldr	r0, [pc, #152]	; (80012b4 <_ZL12MX_TIM3_Initv+0x108>)
 800121c:	f004 f8a2 	bl	8005364 <HAL_TIMEx_MasterConfigSynchronization>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	bf14      	ite	ne
 8001226:	2301      	movne	r3, #1
 8001228:	2300      	moveq	r3, #0
 800122a:	b2db      	uxtb	r3, r3
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <_ZL12MX_TIM3_Initv+0x88>
  {
    Error_Handler();
 8001230:	f000 f8de 	bl	80013f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001234:	2360      	movs	r3, #96	; 0x60
 8001236:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	2200      	movs	r2, #0
 8001248:	4619      	mov	r1, r3
 800124a:	481a      	ldr	r0, [pc, #104]	; (80012b4 <_ZL12MX_TIM3_Initv+0x108>)
 800124c:	f003 fdae 	bl	8004dac <HAL_TIM_PWM_ConfigChannel>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	bf14      	ite	ne
 8001256:	2301      	movne	r3, #1
 8001258:	2300      	moveq	r3, #0
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <_ZL12MX_TIM3_Initv+0xb8>
  {
    Error_Handler();
 8001260:	f000 f8c6 	bl	80013f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	2204      	movs	r2, #4
 8001268:	4619      	mov	r1, r3
 800126a:	4812      	ldr	r0, [pc, #72]	; (80012b4 <_ZL12MX_TIM3_Initv+0x108>)
 800126c:	f003 fd9e 	bl	8004dac <HAL_TIM_PWM_ConfigChannel>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	bf14      	ite	ne
 8001276:	2301      	movne	r3, #1
 8001278:	2300      	moveq	r3, #0
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8001280:	f000 f8b6 	bl	80013f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	220c      	movs	r2, #12
 8001288:	4619      	mov	r1, r3
 800128a:	480a      	ldr	r0, [pc, #40]	; (80012b4 <_ZL12MX_TIM3_Initv+0x108>)
 800128c:	f003 fd8e 	bl	8004dac <HAL_TIM_PWM_ConfigChannel>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	bf14      	ite	ne
 8001296:	2301      	movne	r3, #1
 8001298:	2300      	moveq	r3, #0
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <_ZL12MX_TIM3_Initv+0xf8>
  {
    Error_Handler();
 80012a0:	f000 f8a6 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012a4:	4803      	ldr	r0, [pc, #12]	; (80012b4 <_ZL12MX_TIM3_Initv+0x108>)
 80012a6:	f000 f979 	bl	800159c <HAL_TIM_MspPostInit>

}
 80012aa:	bf00      	nop
 80012ac:	3728      	adds	r7, #40	; 0x28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000370 	.word	0x20000370
 80012b8:	40000400 	.word	0x40000400

080012bc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c2:	f107 0310 	add.w	r3, r7, #16
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d0:	4b43      	ldr	r3, [pc, #268]	; (80013e0 <_ZL12MX_GPIO_Initv+0x124>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	4a42      	ldr	r2, [pc, #264]	; (80013e0 <_ZL12MX_GPIO_Initv+0x124>)
 80012d6:	f043 0310 	orr.w	r3, r3, #16
 80012da:	6193      	str	r3, [r2, #24]
 80012dc:	4b40      	ldr	r3, [pc, #256]	; (80013e0 <_ZL12MX_GPIO_Initv+0x124>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	f003 0310 	and.w	r3, r3, #16
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e8:	4b3d      	ldr	r3, [pc, #244]	; (80013e0 <_ZL12MX_GPIO_Initv+0x124>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	4a3c      	ldr	r2, [pc, #240]	; (80013e0 <_ZL12MX_GPIO_Initv+0x124>)
 80012ee:	f043 0320 	orr.w	r3, r3, #32
 80012f2:	6193      	str	r3, [r2, #24]
 80012f4:	4b3a      	ldr	r3, [pc, #232]	; (80013e0 <_ZL12MX_GPIO_Initv+0x124>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	f003 0320 	and.w	r3, r3, #32
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001300:	4b37      	ldr	r3, [pc, #220]	; (80013e0 <_ZL12MX_GPIO_Initv+0x124>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	4a36      	ldr	r2, [pc, #216]	; (80013e0 <_ZL12MX_GPIO_Initv+0x124>)
 8001306:	f043 0304 	orr.w	r3, r3, #4
 800130a:	6193      	str	r3, [r2, #24]
 800130c:	4b34      	ldr	r3, [pc, #208]	; (80013e0 <_ZL12MX_GPIO_Initv+0x124>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001318:	4b31      	ldr	r3, [pc, #196]	; (80013e0 <_ZL12MX_GPIO_Initv+0x124>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a30      	ldr	r2, [pc, #192]	; (80013e0 <_ZL12MX_GPIO_Initv+0x124>)
 800131e:	f043 0308 	orr.w	r3, r3, #8
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b2e      	ldr	r3, [pc, #184]	; (80013e0 <_ZL12MX_GPIO_Initv+0x124>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f003 0308 	and.w	r3, r3, #8
 800132c:	603b      	str	r3, [r7, #0]
 800132e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	2130      	movs	r1, #48	; 0x30
 8001334:	482b      	ldr	r0, [pc, #172]	; (80013e4 <_ZL12MX_GPIO_Initv+0x128>)
 8001336:	f000 fd67 	bl	8001e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13
 800133a:	2200      	movs	r2, #0
 800133c:	f64e 4101 	movw	r1, #60417	; 0xec01
 8001340:	4829      	ldr	r0, [pc, #164]	; (80013e8 <_ZL12MX_GPIO_Initv+0x12c>)
 8001342:	f000 fd61 	bl	8001e08 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001346:	230f      	movs	r3, #15
 8001348:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800134a:	4b28      	ldr	r3, [pc, #160]	; (80013ec <_ZL12MX_GPIO_Initv+0x130>)
 800134c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001352:	f107 0310 	add.w	r3, r7, #16
 8001356:	4619      	mov	r1, r3
 8001358:	4822      	ldr	r0, [pc, #136]	; (80013e4 <_ZL12MX_GPIO_Initv+0x128>)
 800135a:	f000 fbd1 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800135e:	2330      	movs	r3, #48	; 0x30
 8001360:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001362:	2301      	movs	r3, #1
 8001364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2302      	movs	r3, #2
 800136c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136e:	f107 0310 	add.w	r3, r7, #16
 8001372:	4619      	mov	r1, r3
 8001374:	481b      	ldr	r0, [pc, #108]	; (80013e4 <_ZL12MX_GPIO_Initv+0x128>)
 8001376:	f000 fbc3 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB11 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13
 800137a:	f64e 4301 	movw	r3, #60417	; 0xec01
 800137e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001380:	2301      	movs	r3, #1
 8001382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2302      	movs	r3, #2
 800138a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	4619      	mov	r1, r3
 8001392:	4815      	ldr	r0, [pc, #84]	; (80013e8 <_ZL12MX_GPIO_Initv+0x12c>)
 8001394:	f000 fbb4 	bl	8001b00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001398:	2200      	movs	r2, #0
 800139a:	2100      	movs	r1, #0
 800139c:	2006      	movs	r0, #6
 800139e:	f000 fb78 	bl	8001a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013a2:	2006      	movs	r0, #6
 80013a4:	f000 fb91 	bl	8001aca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80013a8:	2200      	movs	r2, #0
 80013aa:	2100      	movs	r1, #0
 80013ac:	2007      	movs	r0, #7
 80013ae:	f000 fb70 	bl	8001a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80013b2:	2007      	movs	r0, #7
 80013b4:	f000 fb89 	bl	8001aca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2100      	movs	r1, #0
 80013bc:	2008      	movs	r0, #8
 80013be:	f000 fb68 	bl	8001a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80013c2:	2008      	movs	r0, #8
 80013c4:	f000 fb81 	bl	8001aca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2100      	movs	r1, #0
 80013cc:	2009      	movs	r0, #9
 80013ce:	f000 fb60 	bl	8001a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80013d2:	2009      	movs	r0, #9
 80013d4:	f000 fb79 	bl	8001aca <HAL_NVIC_EnableIRQ>

}
 80013d8:	bf00      	nop
 80013da:	3720      	adds	r7, #32
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40010800 	.word	0x40010800
 80013e8:	40010c00 	.word	0x40010c00
 80013ec:	10110000 	.word	0x10110000

080013f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f4:	b672      	cpsid	i
}
 80013f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <Error_Handler+0x8>

080013fa <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4619      	mov	r1, r3
 800140e:	4610      	mov	r0, r2
 8001410:	f7ff f948 	bl	80006a4 <__aeabi_fcmplt>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	e000      	b.n	8001420 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 800141e:	687b      	ldr	r3, [r7, #4]
    }
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4619      	mov	r1, r3
 800143c:	4610      	mov	r0, r2
 800143e:	f7ff f931 	bl	80006a4 <__aeabi_fcmplt>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	e000      	b.n	800144e <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 800144c:	687b      	ldr	r3, [r7, #4]
    }
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <HAL_MspInit+0x5c>)
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	4a14      	ldr	r2, [pc, #80]	; (80014b4 <HAL_MspInit+0x5c>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6193      	str	r3, [r2, #24]
 800146a:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <HAL_MspInit+0x5c>)
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001476:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <HAL_MspInit+0x5c>)
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	4a0e      	ldr	r2, [pc, #56]	; (80014b4 <HAL_MspInit+0x5c>)
 800147c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001480:	61d3      	str	r3, [r2, #28]
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <HAL_MspInit+0x5c>)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <HAL_MspInit+0x60>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <HAL_MspInit+0x60>)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014aa:	bf00      	nop
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40010000 	.word	0x40010000

080014bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0310 	add.w	r3, r7, #16
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a15      	ldr	r2, [pc, #84]	; (800152c <HAL_I2C_MspInit+0x70>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d123      	bne.n	8001524 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <HAL_I2C_MspInit+0x74>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	4a13      	ldr	r2, [pc, #76]	; (8001530 <HAL_I2C_MspInit+0x74>)
 80014e2:	f043 0308 	orr.w	r3, r3, #8
 80014e6:	6193      	str	r3, [r2, #24]
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <HAL_I2C_MspInit+0x74>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	f003 0308 	and.w	r3, r3, #8
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014f4:	23c0      	movs	r3, #192	; 0xc0
 80014f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f8:	2312      	movs	r3, #18
 80014fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014fc:	2303      	movs	r3, #3
 80014fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001500:	f107 0310 	add.w	r3, r7, #16
 8001504:	4619      	mov	r1, r3
 8001506:	480b      	ldr	r0, [pc, #44]	; (8001534 <HAL_I2C_MspInit+0x78>)
 8001508:	f000 fafa 	bl	8001b00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <HAL_I2C_MspInit+0x74>)
 800150e:	69db      	ldr	r3, [r3, #28]
 8001510:	4a07      	ldr	r2, [pc, #28]	; (8001530 <HAL_I2C_MspInit+0x74>)
 8001512:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001516:	61d3      	str	r3, [r2, #28]
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <HAL_I2C_MspInit+0x74>)
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001524:	bf00      	nop
 8001526:	3720      	adds	r7, #32
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40005400 	.word	0x40005400
 8001530:	40021000 	.word	0x40021000
 8001534:	40010c00 	.word	0x40010c00

08001538 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a12      	ldr	r2, [pc, #72]	; (8001590 <HAL_TIM_PWM_MspInit+0x58>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d10c      	bne.n	8001564 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <HAL_TIM_PWM_MspInit+0x5c>)
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	4a11      	ldr	r2, [pc, #68]	; (8001594 <HAL_TIM_PWM_MspInit+0x5c>)
 8001550:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001554:	6193      	str	r3, [r2, #24]
 8001556:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <HAL_TIM_PWM_MspInit+0x5c>)
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001562:	e010      	b.n	8001586 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <HAL_TIM_PWM_MspInit+0x60>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d10b      	bne.n	8001586 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <HAL_TIM_PWM_MspInit+0x5c>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	4a08      	ldr	r2, [pc, #32]	; (8001594 <HAL_TIM_PWM_MspInit+0x5c>)
 8001574:	f043 0302 	orr.w	r3, r3, #2
 8001578:	61d3      	str	r3, [r2, #28]
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_TIM_PWM_MspInit+0x5c>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
}
 8001586:	bf00      	nop
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr
 8001590:	40012c00 	.word	0x40012c00
 8001594:	40021000 	.word	0x40021000
 8001598:	40000400 	.word	0x40000400

0800159c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0318 	add.w	r3, r7, #24
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a2b      	ldr	r2, [pc, #172]	; (8001664 <HAL_TIM_MspPostInit+0xc8>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d119      	bne.n	80015f0 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015bc:	4b2a      	ldr	r3, [pc, #168]	; (8001668 <HAL_TIM_MspPostInit+0xcc>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	4a29      	ldr	r2, [pc, #164]	; (8001668 <HAL_TIM_MspPostInit+0xcc>)
 80015c2:	f043 0304 	orr.w	r3, r3, #4
 80015c6:	6193      	str	r3, [r2, #24]
 80015c8:	4b27      	ldr	r3, [pc, #156]	; (8001668 <HAL_TIM_MspPostInit+0xcc>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2302      	movs	r3, #2
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f107 0318 	add.w	r3, r7, #24
 80015e6:	4619      	mov	r1, r3
 80015e8:	4820      	ldr	r0, [pc, #128]	; (800166c <HAL_TIM_MspPostInit+0xd0>)
 80015ea:	f000 fa89 	bl	8001b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015ee:	e034      	b.n	800165a <HAL_TIM_MspPostInit+0xbe>
  else if(htim->Instance==TIM3)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a1e      	ldr	r2, [pc, #120]	; (8001670 <HAL_TIM_MspPostInit+0xd4>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d12f      	bne.n	800165a <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <HAL_TIM_MspPostInit+0xcc>)
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	4a1a      	ldr	r2, [pc, #104]	; (8001668 <HAL_TIM_MspPostInit+0xcc>)
 8001600:	f043 0304 	orr.w	r3, r3, #4
 8001604:	6193      	str	r3, [r2, #24]
 8001606:	4b18      	ldr	r3, [pc, #96]	; (8001668 <HAL_TIM_MspPostInit+0xcc>)
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	f003 0304 	and.w	r3, r3, #4
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <HAL_TIM_MspPostInit+0xcc>)
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	4a14      	ldr	r2, [pc, #80]	; (8001668 <HAL_TIM_MspPostInit+0xcc>)
 8001618:	f043 0308 	orr.w	r3, r3, #8
 800161c:	6193      	str	r3, [r2, #24]
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_TIM_MspPostInit+0xcc>)
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800162a:	23c0      	movs	r3, #192	; 0xc0
 800162c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	2302      	movs	r3, #2
 8001630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2302      	movs	r3, #2
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001636:	f107 0318 	add.w	r3, r7, #24
 800163a:	4619      	mov	r1, r3
 800163c:	480b      	ldr	r0, [pc, #44]	; (800166c <HAL_TIM_MspPostInit+0xd0>)
 800163e:	f000 fa5f 	bl	8001b00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001642:	2302      	movs	r3, #2
 8001644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2302      	movs	r3, #2
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164e:	f107 0318 	add.w	r3, r7, #24
 8001652:	4619      	mov	r1, r3
 8001654:	4807      	ldr	r0, [pc, #28]	; (8001674 <HAL_TIM_MspPostInit+0xd8>)
 8001656:	f000 fa53 	bl	8001b00 <HAL_GPIO_Init>
}
 800165a:	bf00      	nop
 800165c:	3728      	adds	r7, #40	; 0x28
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40012c00 	.word	0x40012c00
 8001668:	40021000 	.word	0x40021000
 800166c:	40010800 	.word	0x40010800
 8001670:	40000400 	.word	0x40000400
 8001674:	40010c00 	.word	0x40010c00

08001678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800167c:	e7fe      	b.n	800167c <NMI_Handler+0x4>

0800167e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001682:	e7fe      	b.n	8001682 <HardFault_Handler+0x4>

08001684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <MemManage_Handler+0x4>

0800168a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800168e:	e7fe      	b.n	800168e <BusFault_Handler+0x4>

08001690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <UsageFault_Handler+0x4>

08001696 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr

080016a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr

080016ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr

080016ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016be:	f000 f8d1 	bl	8001864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80016ca:	2001      	movs	r0, #1
 80016cc:	f000 fbb4 	bl	8001e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80016d8:	2002      	movs	r0, #2
 80016da:	f000 fbad 	bl	8001e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80016e6:	2004      	movs	r0, #4
 80016e8:	f000 fba6 	bl	8001e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80016f4:	2008      	movs	r0, #8
 80016f6:	f000 fb9f 	bl	8001e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001706:	f001 f967 	bl	80029d8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20001284 	.word	0x20001284

08001714 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800171c:	4a14      	ldr	r2, [pc, #80]	; (8001770 <_sbrk+0x5c>)
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <_sbrk+0x60>)
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <_sbrk+0x64>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d102      	bne.n	8001736 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <_sbrk+0x64>)
 8001732:	4a12      	ldr	r2, [pc, #72]	; (800177c <_sbrk+0x68>)
 8001734:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <_sbrk+0x64>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	429a      	cmp	r2, r3
 8001742:	d207      	bcs.n	8001754 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001744:	f007 ffa4 	bl	8009690 <__errno>
 8001748:	4603      	mov	r3, r0
 800174a:	220c      	movs	r2, #12
 800174c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800174e:	f04f 33ff 	mov.w	r3, #4294967295
 8001752:	e009      	b.n	8001768 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <_sbrk+0x64>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800175a:	4b07      	ldr	r3, [pc, #28]	; (8001778 <_sbrk+0x64>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	4a05      	ldr	r2, [pc, #20]	; (8001778 <_sbrk+0x64>)
 8001764:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001766:	68fb      	ldr	r3, [r7, #12]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20005000 	.word	0x20005000
 8001774:	00000400 	.word	0x00000400
 8001778:	200003bc 	.word	0x200003bc
 800177c:	20001570 	.word	0x20001570

08001780 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr

0800178c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800178c:	f7ff fff8 	bl	8001780 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001790:	480b      	ldr	r0, [pc, #44]	; (80017c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001792:	490c      	ldr	r1, [pc, #48]	; (80017c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001794:	4a0c      	ldr	r2, [pc, #48]	; (80017c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001798:	e002      	b.n	80017a0 <LoopCopyDataInit>

0800179a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800179a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800179c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179e:	3304      	adds	r3, #4

080017a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a4:	d3f9      	bcc.n	800179a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a6:	4a09      	ldr	r2, [pc, #36]	; (80017cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017a8:	4c09      	ldr	r4, [pc, #36]	; (80017d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017ac:	e001      	b.n	80017b2 <LoopFillZerobss>

080017ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b0:	3204      	adds	r2, #4

080017b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b4:	d3fb      	bcc.n	80017ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017b6:	f007 ff71 	bl	800969c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ba:	f7ff fa75 	bl	8000ca8 <main>
  bx lr
 80017be:	4770      	bx	lr
  ldr r0, =_sdata
 80017c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c4:	200002b8 	.word	0x200002b8
  ldr r2, =_sidata
 80017c8:	0800a0a4 	.word	0x0800a0a4
  ldr r2, =_sbss
 80017cc:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 80017d0:	2000156c 	.word	0x2000156c

080017d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017d4:	e7fe      	b.n	80017d4 <ADC1_2_IRQHandler>
	...

080017d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <HAL_Init+0x28>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a07      	ldr	r2, [pc, #28]	; (8001800 <HAL_Init+0x28>)
 80017e2:	f043 0310 	orr.w	r3, r3, #16
 80017e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e8:	2003      	movs	r0, #3
 80017ea:	f000 f947 	bl	8001a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ee:	200f      	movs	r0, #15
 80017f0:	f000 f808 	bl	8001804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017f4:	f7ff fe30 	bl	8001458 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40022000 	.word	0x40022000

08001804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <HAL_InitTick+0x54>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_InitTick+0x58>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	4619      	mov	r1, r3
 8001816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800181a:	fbb3 f3f1 	udiv	r3, r3, r1
 800181e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001822:	4618      	mov	r0, r3
 8001824:	f000 f95f 	bl	8001ae6 <HAL_SYSTICK_Config>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e00e      	b.n	8001850 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b0f      	cmp	r3, #15
 8001836:	d80a      	bhi.n	800184e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001838:	2200      	movs	r2, #0
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	f04f 30ff 	mov.w	r0, #4294967295
 8001840:	f000 f927 	bl	8001a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001844:	4a06      	ldr	r2, [pc, #24]	; (8001860 <HAL_InitTick+0x5c>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
 800184c:	e000      	b.n	8001850 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	200000d8 	.word	0x200000d8
 800185c:	200000e0 	.word	0x200000e0
 8001860:	200000dc 	.word	0x200000dc

08001864 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <HAL_IncTick+0x1c>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	4b05      	ldr	r3, [pc, #20]	; (8001884 <HAL_IncTick+0x20>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4413      	add	r3, r2
 8001874:	4a03      	ldr	r2, [pc, #12]	; (8001884 <HAL_IncTick+0x20>)
 8001876:	6013      	str	r3, [r2, #0]
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr
 8001880:	200000e0 	.word	0x200000e0
 8001884:	200005ec 	.word	0x200005ec

08001888 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return uwTick;
 800188c:	4b02      	ldr	r3, [pc, #8]	; (8001898 <HAL_GetTick+0x10>)
 800188e:	681b      	ldr	r3, [r3, #0]
}
 8001890:	4618      	mov	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr
 8001898:	200005ec 	.word	0x200005ec

0800189c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a4:	f7ff fff0 	bl	8001888 <HAL_GetTick>
 80018a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b4:	d005      	beq.n	80018c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018b6:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <HAL_Delay+0x44>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	461a      	mov	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4413      	add	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018c2:	bf00      	nop
 80018c4:	f7ff ffe0 	bl	8001888 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d8f7      	bhi.n	80018c4 <HAL_Delay+0x28>
  {
  }
}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200000e0 	.word	0x200000e0

080018e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <__NVIC_SetPriorityGrouping+0x44>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001900:	4013      	ands	r3, r2
 8001902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800190c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001916:	4a04      	ldr	r2, [pc, #16]	; (8001928 <__NVIC_SetPriorityGrouping+0x44>)
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	60d3      	str	r3, [r2, #12]
}
 800191c:	bf00      	nop
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001930:	4b04      	ldr	r3, [pc, #16]	; (8001944 <__NVIC_GetPriorityGrouping+0x18>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	0a1b      	lsrs	r3, r3, #8
 8001936:	f003 0307 	and.w	r3, r3, #7
}
 800193a:	4618      	mov	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	2b00      	cmp	r3, #0
 8001958:	db0b      	blt.n	8001972 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	f003 021f 	and.w	r2, r3, #31
 8001960:	4906      	ldr	r1, [pc, #24]	; (800197c <__NVIC_EnableIRQ+0x34>)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	095b      	lsrs	r3, r3, #5
 8001968:	2001      	movs	r0, #1
 800196a:	fa00 f202 	lsl.w	r2, r0, r2
 800196e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	e000e100 	.word	0xe000e100

08001980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	6039      	str	r1, [r7, #0]
 800198a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	2b00      	cmp	r3, #0
 8001992:	db0a      	blt.n	80019aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	b2da      	uxtb	r2, r3
 8001998:	490c      	ldr	r1, [pc, #48]	; (80019cc <__NVIC_SetPriority+0x4c>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	0112      	lsls	r2, r2, #4
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	440b      	add	r3, r1
 80019a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a8:	e00a      	b.n	80019c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4908      	ldr	r1, [pc, #32]	; (80019d0 <__NVIC_SetPriority+0x50>)
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	3b04      	subs	r3, #4
 80019b8:	0112      	lsls	r2, r2, #4
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	440b      	add	r3, r1
 80019be:	761a      	strb	r2, [r3, #24]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000e100 	.word	0xe000e100
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b089      	sub	sp, #36	; 0x24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f1c3 0307 	rsb	r3, r3, #7
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	bf28      	it	cs
 80019f2:	2304      	movcs	r3, #4
 80019f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3304      	adds	r3, #4
 80019fa:	2b06      	cmp	r3, #6
 80019fc:	d902      	bls.n	8001a04 <NVIC_EncodePriority+0x30>
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3b03      	subs	r3, #3
 8001a02:	e000      	b.n	8001a06 <NVIC_EncodePriority+0x32>
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43da      	mvns	r2, r3
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	401a      	ands	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	fa01 f303 	lsl.w	r3, r1, r3
 8001a26:	43d9      	mvns	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	4313      	orrs	r3, r2
         );
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3724      	adds	r7, #36	; 0x24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a48:	d301      	bcc.n	8001a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e00f      	b.n	8001a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <SysTick_Config+0x40>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a56:	210f      	movs	r1, #15
 8001a58:	f04f 30ff 	mov.w	r0, #4294967295
 8001a5c:	f7ff ff90 	bl	8001980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <SysTick_Config+0x40>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a66:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <SysTick_Config+0x40>)
 8001a68:	2207      	movs	r2, #7
 8001a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	e000e010 	.word	0xe000e010

08001a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ff2d 	bl	80018e4 <__NVIC_SetPriorityGrouping>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa4:	f7ff ff42 	bl	800192c <__NVIC_GetPriorityGrouping>
 8001aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	6978      	ldr	r0, [r7, #20]
 8001ab0:	f7ff ff90 	bl	80019d4 <NVIC_EncodePriority>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aba:	4611      	mov	r1, r2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff5f 	bl	8001980 <__NVIC_SetPriority>
}
 8001ac2:	bf00      	nop
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff35 	bl	8001948 <__NVIC_EnableIRQ>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ffa2 	bl	8001a38 <SysTick_Config>
 8001af4:	4603      	mov	r3, r0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b08b      	sub	sp, #44	; 0x2c
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b12:	e169      	b.n	8001de8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b14:	2201      	movs	r2, #1
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	69fa      	ldr	r2, [r7, #28]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	f040 8158 	bne.w	8001de2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	4a9a      	ldr	r2, [pc, #616]	; (8001da0 <HAL_GPIO_Init+0x2a0>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d05e      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b3c:	4a98      	ldr	r2, [pc, #608]	; (8001da0 <HAL_GPIO_Init+0x2a0>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d875      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b42:	4a98      	ldr	r2, [pc, #608]	; (8001da4 <HAL_GPIO_Init+0x2a4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d058      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b48:	4a96      	ldr	r2, [pc, #600]	; (8001da4 <HAL_GPIO_Init+0x2a4>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d86f      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b4e:	4a96      	ldr	r2, [pc, #600]	; (8001da8 <HAL_GPIO_Init+0x2a8>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d052      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b54:	4a94      	ldr	r2, [pc, #592]	; (8001da8 <HAL_GPIO_Init+0x2a8>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d869      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b5a:	4a94      	ldr	r2, [pc, #592]	; (8001dac <HAL_GPIO_Init+0x2ac>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d04c      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b60:	4a92      	ldr	r2, [pc, #584]	; (8001dac <HAL_GPIO_Init+0x2ac>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d863      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b66:	4a92      	ldr	r2, [pc, #584]	; (8001db0 <HAL_GPIO_Init+0x2b0>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d046      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b6c:	4a90      	ldr	r2, [pc, #576]	; (8001db0 <HAL_GPIO_Init+0x2b0>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d85d      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b72:	2b12      	cmp	r3, #18
 8001b74:	d82a      	bhi.n	8001bcc <HAL_GPIO_Init+0xcc>
 8001b76:	2b12      	cmp	r3, #18
 8001b78:	d859      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b7a:	a201      	add	r2, pc, #4	; (adr r2, 8001b80 <HAL_GPIO_Init+0x80>)
 8001b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b80:	08001bfb 	.word	0x08001bfb
 8001b84:	08001bd5 	.word	0x08001bd5
 8001b88:	08001be7 	.word	0x08001be7
 8001b8c:	08001c29 	.word	0x08001c29
 8001b90:	08001c2f 	.word	0x08001c2f
 8001b94:	08001c2f 	.word	0x08001c2f
 8001b98:	08001c2f 	.word	0x08001c2f
 8001b9c:	08001c2f 	.word	0x08001c2f
 8001ba0:	08001c2f 	.word	0x08001c2f
 8001ba4:	08001c2f 	.word	0x08001c2f
 8001ba8:	08001c2f 	.word	0x08001c2f
 8001bac:	08001c2f 	.word	0x08001c2f
 8001bb0:	08001c2f 	.word	0x08001c2f
 8001bb4:	08001c2f 	.word	0x08001c2f
 8001bb8:	08001c2f 	.word	0x08001c2f
 8001bbc:	08001c2f 	.word	0x08001c2f
 8001bc0:	08001c2f 	.word	0x08001c2f
 8001bc4:	08001bdd 	.word	0x08001bdd
 8001bc8:	08001bf1 	.word	0x08001bf1
 8001bcc:	4a79      	ldr	r2, [pc, #484]	; (8001db4 <HAL_GPIO_Init+0x2b4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d013      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bd2:	e02c      	b.n	8001c2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	623b      	str	r3, [r7, #32]
          break;
 8001bda:	e029      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	3304      	adds	r3, #4
 8001be2:	623b      	str	r3, [r7, #32]
          break;
 8001be4:	e024      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	3308      	adds	r3, #8
 8001bec:	623b      	str	r3, [r7, #32]
          break;
 8001bee:	e01f      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	330c      	adds	r3, #12
 8001bf6:	623b      	str	r3, [r7, #32]
          break;
 8001bf8:	e01a      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d102      	bne.n	8001c08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c02:	2304      	movs	r3, #4
 8001c04:	623b      	str	r3, [r7, #32]
          break;
 8001c06:	e013      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d105      	bne.n	8001c1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c10:	2308      	movs	r3, #8
 8001c12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69fa      	ldr	r2, [r7, #28]
 8001c18:	611a      	str	r2, [r3, #16]
          break;
 8001c1a:	e009      	b.n	8001c30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c1c:	2308      	movs	r3, #8
 8001c1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69fa      	ldr	r2, [r7, #28]
 8001c24:	615a      	str	r2, [r3, #20]
          break;
 8001c26:	e003      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	623b      	str	r3, [r7, #32]
          break;
 8001c2c:	e000      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          break;
 8001c2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	2bff      	cmp	r3, #255	; 0xff
 8001c34:	d801      	bhi.n	8001c3a <HAL_GPIO_Init+0x13a>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	e001      	b.n	8001c3e <HAL_GPIO_Init+0x13e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	2bff      	cmp	r3, #255	; 0xff
 8001c44:	d802      	bhi.n	8001c4c <HAL_GPIO_Init+0x14c>
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	e002      	b.n	8001c52 <HAL_GPIO_Init+0x152>
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	3b08      	subs	r3, #8
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	210f      	movs	r1, #15
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	401a      	ands	r2, r3
 8001c64:	6a39      	ldr	r1, [r7, #32]
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 80b1 	beq.w	8001de2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c80:	4b4d      	ldr	r3, [pc, #308]	; (8001db8 <HAL_GPIO_Init+0x2b8>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	4a4c      	ldr	r2, [pc, #304]	; (8001db8 <HAL_GPIO_Init+0x2b8>)
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	6193      	str	r3, [r2, #24]
 8001c8c:	4b4a      	ldr	r3, [pc, #296]	; (8001db8 <HAL_GPIO_Init+0x2b8>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c98:	4a48      	ldr	r2, [pc, #288]	; (8001dbc <HAL_GPIO_Init+0x2bc>)
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	089b      	lsrs	r3, r3, #2
 8001c9e:	3302      	adds	r3, #2
 8001ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	220f      	movs	r2, #15
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a40      	ldr	r2, [pc, #256]	; (8001dc0 <HAL_GPIO_Init+0x2c0>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d013      	beq.n	8001cec <HAL_GPIO_Init+0x1ec>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a3f      	ldr	r2, [pc, #252]	; (8001dc4 <HAL_GPIO_Init+0x2c4>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d00d      	beq.n	8001ce8 <HAL_GPIO_Init+0x1e8>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a3e      	ldr	r2, [pc, #248]	; (8001dc8 <HAL_GPIO_Init+0x2c8>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d007      	beq.n	8001ce4 <HAL_GPIO_Init+0x1e4>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a3d      	ldr	r2, [pc, #244]	; (8001dcc <HAL_GPIO_Init+0x2cc>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d101      	bne.n	8001ce0 <HAL_GPIO_Init+0x1e0>
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e006      	b.n	8001cee <HAL_GPIO_Init+0x1ee>
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	e004      	b.n	8001cee <HAL_GPIO_Init+0x1ee>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e002      	b.n	8001cee <HAL_GPIO_Init+0x1ee>
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e000      	b.n	8001cee <HAL_GPIO_Init+0x1ee>
 8001cec:	2300      	movs	r3, #0
 8001cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf0:	f002 0203 	and.w	r2, r2, #3
 8001cf4:	0092      	lsls	r2, r2, #2
 8001cf6:	4093      	lsls	r3, r2
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cfe:	492f      	ldr	r1, [pc, #188]	; (8001dbc <HAL_GPIO_Init+0x2bc>)
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	089b      	lsrs	r3, r3, #2
 8001d04:	3302      	adds	r3, #2
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d006      	beq.n	8001d26 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d18:	4b2d      	ldr	r3, [pc, #180]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	492c      	ldr	r1, [pc, #176]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	608b      	str	r3, [r1, #8]
 8001d24:	e006      	b.n	8001d34 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d26:	4b2a      	ldr	r3, [pc, #168]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	4928      	ldr	r1, [pc, #160]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d006      	beq.n	8001d4e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d40:	4b23      	ldr	r3, [pc, #140]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d42:	68da      	ldr	r2, [r3, #12]
 8001d44:	4922      	ldr	r1, [pc, #136]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	60cb      	str	r3, [r1, #12]
 8001d4c:	e006      	b.n	8001d5c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d4e:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	43db      	mvns	r3, r3
 8001d56:	491e      	ldr	r1, [pc, #120]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d006      	beq.n	8001d76 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d68:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	4918      	ldr	r1, [pc, #96]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]
 8001d74:	e006      	b.n	8001d84 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d76:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	4914      	ldr	r1, [pc, #80]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d021      	beq.n	8001dd4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d90:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	490e      	ldr	r1, [pc, #56]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	600b      	str	r3, [r1, #0]
 8001d9c:	e021      	b.n	8001de2 <HAL_GPIO_Init+0x2e2>
 8001d9e:	bf00      	nop
 8001da0:	10320000 	.word	0x10320000
 8001da4:	10310000 	.word	0x10310000
 8001da8:	10220000 	.word	0x10220000
 8001dac:	10210000 	.word	0x10210000
 8001db0:	10120000 	.word	0x10120000
 8001db4:	10110000 	.word	0x10110000
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40010000 	.word	0x40010000
 8001dc0:	40010800 	.word	0x40010800
 8001dc4:	40010c00 	.word	0x40010c00
 8001dc8:	40011000 	.word	0x40011000
 8001dcc:	40011400 	.word	0x40011400
 8001dd0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_GPIO_Init+0x304>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	4909      	ldr	r1, [pc, #36]	; (8001e04 <HAL_GPIO_Init+0x304>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	3301      	adds	r3, #1
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	fa22 f303 	lsr.w	r3, r2, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f47f ae8e 	bne.w	8001b14 <HAL_GPIO_Init+0x14>
  }
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	372c      	adds	r7, #44	; 0x2c
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr
 8001e04:	40010400 	.word	0x40010400

08001e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	807b      	strh	r3, [r7, #2]
 8001e14:	4613      	mov	r3, r2
 8001e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e18:	787b      	ldrb	r3, [r7, #1]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e1e:	887a      	ldrh	r2, [r7, #2]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e24:	e003      	b.n	8001e2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e26:	887b      	ldrh	r3, [r7, #2]
 8001e28:	041a      	lsls	r2, r3, #16
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	611a      	str	r2, [r3, #16]
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr

08001e38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e42:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e44:	695a      	ldr	r2, [r3, #20]
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d006      	beq.n	8001e5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e4e:	4a05      	ldr	r2, [pc, #20]	; (8001e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e50:	88fb      	ldrh	r3, [r7, #6]
 8001e52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e54:	88fb      	ldrh	r3, [r7, #6]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe fee4 	bl	8000c24 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40010400 	.word	0x40010400

08001e68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e12b      	b.n	80020d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d106      	bne.n	8001e94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff fb14 	bl	80014bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2224      	movs	r2, #36	; 0x24
 8001e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0201 	bic.w	r2, r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ecc:	f002 fd94 	bl	80049f8 <HAL_RCC_GetPCLK1Freq>
 8001ed0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	4a81      	ldr	r2, [pc, #516]	; (80020dc <HAL_I2C_Init+0x274>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d807      	bhi.n	8001eec <HAL_I2C_Init+0x84>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4a80      	ldr	r2, [pc, #512]	; (80020e0 <HAL_I2C_Init+0x278>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	bf94      	ite	ls
 8001ee4:	2301      	movls	r3, #1
 8001ee6:	2300      	movhi	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	e006      	b.n	8001efa <HAL_I2C_Init+0x92>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4a7d      	ldr	r2, [pc, #500]	; (80020e4 <HAL_I2C_Init+0x27c>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	bf94      	ite	ls
 8001ef4:	2301      	movls	r3, #1
 8001ef6:	2300      	movhi	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e0e7      	b.n	80020d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4a78      	ldr	r2, [pc, #480]	; (80020e8 <HAL_I2C_Init+0x280>)
 8001f06:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0a:	0c9b      	lsrs	r3, r3, #18
 8001f0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68ba      	ldr	r2, [r7, #8]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	4a6a      	ldr	r2, [pc, #424]	; (80020dc <HAL_I2C_Init+0x274>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d802      	bhi.n	8001f3c <HAL_I2C_Init+0xd4>
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	e009      	b.n	8001f50 <HAL_I2C_Init+0xe8>
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f42:	fb02 f303 	mul.w	r3, r2, r3
 8001f46:	4a69      	ldr	r2, [pc, #420]	; (80020ec <HAL_I2C_Init+0x284>)
 8001f48:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4c:	099b      	lsrs	r3, r3, #6
 8001f4e:	3301      	adds	r3, #1
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	430b      	orrs	r3, r1
 8001f56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	495c      	ldr	r1, [pc, #368]	; (80020dc <HAL_I2C_Init+0x274>)
 8001f6c:	428b      	cmp	r3, r1
 8001f6e:	d819      	bhi.n	8001fa4 <HAL_I2C_Init+0x13c>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	1e59      	subs	r1, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f7e:	1c59      	adds	r1, r3, #1
 8001f80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f84:	400b      	ands	r3, r1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00a      	beq.n	8001fa0 <HAL_I2C_Init+0x138>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	1e59      	subs	r1, r3, #1
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f98:	3301      	adds	r3, #1
 8001f9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f9e:	e051      	b.n	8002044 <HAL_I2C_Init+0x1dc>
 8001fa0:	2304      	movs	r3, #4
 8001fa2:	e04f      	b.n	8002044 <HAL_I2C_Init+0x1dc>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d111      	bne.n	8001fd0 <HAL_I2C_Init+0x168>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	1e58      	subs	r0, r3, #1
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6859      	ldr	r1, [r3, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	440b      	add	r3, r1
 8001fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	bf0c      	ite	eq
 8001fc8:	2301      	moveq	r3, #1
 8001fca:	2300      	movne	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	e012      	b.n	8001ff6 <HAL_I2C_Init+0x18e>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	1e58      	subs	r0, r3, #1
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6859      	ldr	r1, [r3, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	440b      	add	r3, r1
 8001fde:	0099      	lsls	r1, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	bf0c      	ite	eq
 8001ff0:	2301      	moveq	r3, #1
 8001ff2:	2300      	movne	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_I2C_Init+0x196>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e022      	b.n	8002044 <HAL_I2C_Init+0x1dc>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10e      	bne.n	8002024 <HAL_I2C_Init+0x1bc>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	1e58      	subs	r0, r3, #1
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6859      	ldr	r1, [r3, #4]
 800200e:	460b      	mov	r3, r1
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	440b      	add	r3, r1
 8002014:	fbb0 f3f3 	udiv	r3, r0, r3
 8002018:	3301      	adds	r3, #1
 800201a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800201e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002022:	e00f      	b.n	8002044 <HAL_I2C_Init+0x1dc>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	1e58      	subs	r0, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6859      	ldr	r1, [r3, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	0099      	lsls	r1, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	fbb0 f3f3 	udiv	r3, r0, r3
 800203a:	3301      	adds	r3, #1
 800203c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002040:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	6809      	ldr	r1, [r1, #0]
 8002048:	4313      	orrs	r3, r2
 800204a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69da      	ldr	r2, [r3, #28]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002072:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6911      	ldr	r1, [r2, #16]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	68d2      	ldr	r2, [r2, #12]
 800207e:	4311      	orrs	r1, r2
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	430b      	orrs	r3, r1
 8002086:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695a      	ldr	r2, [r3, #20]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 0201 	orr.w	r2, r2, #1
 80020b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2220      	movs	r2, #32
 80020be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	000186a0 	.word	0x000186a0
 80020e0:	001e847f 	.word	0x001e847f
 80020e4:	003d08ff 	.word	0x003d08ff
 80020e8:	431bde83 	.word	0x431bde83
 80020ec:	10624dd3 	.word	0x10624dd3

080020f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af02      	add	r7, sp, #8
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	607a      	str	r2, [r7, #4]
 80020fa:	461a      	mov	r2, r3
 80020fc:	460b      	mov	r3, r1
 80020fe:	817b      	strh	r3, [r7, #10]
 8002100:	4613      	mov	r3, r2
 8002102:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002104:	f7ff fbc0 	bl	8001888 <HAL_GetTick>
 8002108:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b20      	cmp	r3, #32
 8002114:	f040 80e0 	bne.w	80022d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	2319      	movs	r3, #25
 800211e:	2201      	movs	r2, #1
 8002120:	4970      	ldr	r1, [pc, #448]	; (80022e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f000 f964 	bl	80023f0 <I2C_WaitOnFlagUntilTimeout>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800212e:	2302      	movs	r3, #2
 8002130:	e0d3      	b.n	80022da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002138:	2b01      	cmp	r3, #1
 800213a:	d101      	bne.n	8002140 <HAL_I2C_Master_Transmit+0x50>
 800213c:	2302      	movs	r3, #2
 800213e:	e0cc      	b.n	80022da <HAL_I2C_Master_Transmit+0x1ea>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b01      	cmp	r3, #1
 8002154:	d007      	beq.n	8002166 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f042 0201 	orr.w	r2, r2, #1
 8002164:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002174:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2221      	movs	r2, #33	; 0x21
 800217a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2210      	movs	r2, #16
 8002182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	893a      	ldrh	r2, [r7, #8]
 8002196:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219c:	b29a      	uxth	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	4a50      	ldr	r2, [pc, #320]	; (80022e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80021a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021a8:	8979      	ldrh	r1, [r7, #10]
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	6a3a      	ldr	r2, [r7, #32]
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 f89c 	bl	80022ec <I2C_MasterRequestWrite>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e08d      	b.n	80022da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021d4:	e066      	b.n	80022a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	6a39      	ldr	r1, [r7, #32]
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f000 fa22 	bl	8002624 <I2C_WaitOnTXEFlagUntilTimeout>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00d      	beq.n	8002202 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d107      	bne.n	80021fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e06b      	b.n	80022da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002206:	781a      	ldrb	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002212:	1c5a      	adds	r2, r3, #1
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221c:	b29b      	uxth	r3, r3
 800221e:	3b01      	subs	r3, #1
 8002220:	b29a      	uxth	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222a:	3b01      	subs	r3, #1
 800222c:	b29a      	uxth	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b04      	cmp	r3, #4
 800223e:	d11b      	bne.n	8002278 <HAL_I2C_Master_Transmit+0x188>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002244:	2b00      	cmp	r3, #0
 8002246:	d017      	beq.n	8002278 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	781a      	ldrb	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	1c5a      	adds	r2, r3, #1
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002262:	b29b      	uxth	r3, r3
 8002264:	3b01      	subs	r3, #1
 8002266:	b29a      	uxth	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002270:	3b01      	subs	r3, #1
 8002272:	b29a      	uxth	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	6a39      	ldr	r1, [r7, #32]
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 fa19 	bl	80026b4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00d      	beq.n	80022a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	2b04      	cmp	r3, #4
 800228e:	d107      	bne.n	80022a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800229e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e01a      	b.n	80022da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d194      	bne.n	80021d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2220      	movs	r2, #32
 80022c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	e000      	b.n	80022da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022d8:	2302      	movs	r3, #2
  }
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	00100002 	.word	0x00100002
 80022e8:	ffff0000 	.word	0xffff0000

080022ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af02      	add	r7, sp, #8
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	607a      	str	r2, [r7, #4]
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	460b      	mov	r3, r1
 80022fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	2b08      	cmp	r3, #8
 8002306:	d006      	beq.n	8002316 <I2C_MasterRequestWrite+0x2a>
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d003      	beq.n	8002316 <I2C_MasterRequestWrite+0x2a>
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002314:	d108      	bne.n	8002328 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	e00b      	b.n	8002340 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	2b12      	cmp	r3, #18
 800232e:	d107      	bne.n	8002340 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800233e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 f84f 	bl	80023f0 <I2C_WaitOnFlagUntilTimeout>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00d      	beq.n	8002374 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002366:	d103      	bne.n	8002370 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800236e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e035      	b.n	80023e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800237c:	d108      	bne.n	8002390 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800237e:	897b      	ldrh	r3, [r7, #10]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	461a      	mov	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800238c:	611a      	str	r2, [r3, #16]
 800238e:	e01b      	b.n	80023c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002390:	897b      	ldrh	r3, [r7, #10]
 8002392:	11db      	asrs	r3, r3, #7
 8002394:	b2db      	uxtb	r3, r3
 8002396:	f003 0306 	and.w	r3, r3, #6
 800239a:	b2db      	uxtb	r3, r3
 800239c:	f063 030f 	orn	r3, r3, #15
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	490e      	ldr	r1, [pc, #56]	; (80023e8 <I2C_MasterRequestWrite+0xfc>)
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 f898 	bl	80024e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e010      	b.n	80023e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023be:	897b      	ldrh	r3, [r7, #10]
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	4907      	ldr	r1, [pc, #28]	; (80023ec <I2C_MasterRequestWrite+0x100>)
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 f888 	bl	80024e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e000      	b.n	80023e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	00010008 	.word	0x00010008
 80023ec:	00010002 	.word	0x00010002

080023f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	603b      	str	r3, [r7, #0]
 80023fc:	4613      	mov	r3, r2
 80023fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002400:	e048      	b.n	8002494 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002408:	d044      	beq.n	8002494 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800240a:	f7ff fa3d 	bl	8001888 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d302      	bcc.n	8002420 <I2C_WaitOnFlagUntilTimeout+0x30>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d139      	bne.n	8002494 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	0c1b      	lsrs	r3, r3, #16
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b01      	cmp	r3, #1
 8002428:	d10d      	bne.n	8002446 <I2C_WaitOnFlagUntilTimeout+0x56>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	43da      	mvns	r2, r3
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	4013      	ands	r3, r2
 8002436:	b29b      	uxth	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	bf0c      	ite	eq
 800243c:	2301      	moveq	r3, #1
 800243e:	2300      	movne	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	461a      	mov	r2, r3
 8002444:	e00c      	b.n	8002460 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	43da      	mvns	r2, r3
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	4013      	ands	r3, r2
 8002452:	b29b      	uxth	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	bf0c      	ite	eq
 8002458:	2301      	moveq	r3, #1
 800245a:	2300      	movne	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	461a      	mov	r2, r3
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	429a      	cmp	r2, r3
 8002464:	d116      	bne.n	8002494 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2220      	movs	r2, #32
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	f043 0220 	orr.w	r2, r3, #32
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e023      	b.n	80024dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	0c1b      	lsrs	r3, r3, #16
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b01      	cmp	r3, #1
 800249c:	d10d      	bne.n	80024ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	43da      	mvns	r2, r3
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	4013      	ands	r3, r2
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	461a      	mov	r2, r3
 80024b8:	e00c      	b.n	80024d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	43da      	mvns	r2, r3
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	4013      	ands	r3, r2
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	bf0c      	ite	eq
 80024cc:	2301      	moveq	r3, #1
 80024ce:	2300      	movne	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	461a      	mov	r2, r3
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d093      	beq.n	8002402 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024f2:	e071      	b.n	80025d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002502:	d123      	bne.n	800254c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002512:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800251c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2220      	movs	r2, #32
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002538:	f043 0204 	orr.w	r2, r3, #4
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e067      	b.n	800261c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002552:	d041      	beq.n	80025d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002554:	f7ff f998 	bl	8001888 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	429a      	cmp	r2, r3
 8002562:	d302      	bcc.n	800256a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d136      	bne.n	80025d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	0c1b      	lsrs	r3, r3, #16
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b01      	cmp	r3, #1
 8002572:	d10c      	bne.n	800258e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	43da      	mvns	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	4013      	ands	r3, r2
 8002580:	b29b      	uxth	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	bf14      	ite	ne
 8002586:	2301      	movne	r3, #1
 8002588:	2300      	moveq	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	e00b      	b.n	80025a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	43da      	mvns	r2, r3
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	4013      	ands	r3, r2
 800259a:	b29b      	uxth	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	bf14      	ite	ne
 80025a0:	2301      	movne	r3, #1
 80025a2:	2300      	moveq	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d016      	beq.n	80025d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2220      	movs	r2, #32
 80025b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	f043 0220 	orr.w	r2, r3, #32
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e021      	b.n	800261c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	0c1b      	lsrs	r3, r3, #16
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d10c      	bne.n	80025fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	43da      	mvns	r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	4013      	ands	r3, r2
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	bf14      	ite	ne
 80025f4:	2301      	movne	r3, #1
 80025f6:	2300      	moveq	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	e00b      	b.n	8002614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	43da      	mvns	r2, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	4013      	ands	r3, r2
 8002608:	b29b      	uxth	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	bf14      	ite	ne
 800260e:	2301      	movne	r3, #1
 8002610:	2300      	moveq	r3, #0
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	f47f af6d 	bne.w	80024f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002630:	e034      	b.n	800269c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 f886 	bl	8002744 <I2C_IsAcknowledgeFailed>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e034      	b.n	80026ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002648:	d028      	beq.n	800269c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800264a:	f7ff f91d 	bl	8001888 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	429a      	cmp	r2, r3
 8002658:	d302      	bcc.n	8002660 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d11d      	bne.n	800269c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266a:	2b80      	cmp	r3, #128	; 0x80
 800266c:	d016      	beq.n	800269c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2220      	movs	r2, #32
 8002678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	f043 0220 	orr.w	r2, r3, #32
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e007      	b.n	80026ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a6:	2b80      	cmp	r3, #128	; 0x80
 80026a8:	d1c3      	bne.n	8002632 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026c0:	e034      	b.n	800272c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 f83e 	bl	8002744 <I2C_IsAcknowledgeFailed>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e034      	b.n	800273c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d8:	d028      	beq.n	800272c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026da:	f7ff f8d5 	bl	8001888 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d302      	bcc.n	80026f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d11d      	bne.n	800272c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d016      	beq.n	800272c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2220      	movs	r2, #32
 8002708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	f043 0220 	orr.w	r2, r3, #32
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e007      	b.n	800273c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	2b04      	cmp	r3, #4
 8002738:	d1c3      	bne.n	80026c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800275a:	d11b      	bne.n	8002794 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002764:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2220      	movs	r2, #32
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	f043 0204 	orr.w	r2, r3, #4
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e0e8      	b.n	8002984 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d106      	bne.n	80027cc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f006 fcb8 	bl	800913c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2203      	movs	r2, #3
 80027d0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f002 fe92 	bl	8005508 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6818      	ldr	r0, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3304      	adds	r3, #4
 80027ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027ee:	f002 fe68 	bl	80054c2 <USB_CoreInit>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2202      	movs	r2, #2
 80027fc:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0bf      	b.n	8002984 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2100      	movs	r1, #0
 800280a:	4618      	mov	r0, r3
 800280c:	f002 fe96 	bl	800553c <USB_SetCurrentMode>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d005      	beq.n	8002822 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2202      	movs	r2, #2
 800281a:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e0b0      	b.n	8002984 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002822:	2300      	movs	r3, #0
 8002824:	73fb      	strb	r3, [r7, #15]
 8002826:	e03e      	b.n	80028a6 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002828:	7bfa      	ldrb	r2, [r7, #15]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	440b      	add	r3, r1
 8002836:	3311      	adds	r3, #17
 8002838:	2201      	movs	r2, #1
 800283a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800283c:	7bfa      	ldrb	r2, [r7, #15]
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	440b      	add	r3, r1
 800284a:	3310      	adds	r3, #16
 800284c:	7bfa      	ldrb	r2, [r7, #15]
 800284e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002850:	7bfa      	ldrb	r2, [r7, #15]
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	440b      	add	r3, r1
 800285e:	3313      	adds	r3, #19
 8002860:	2200      	movs	r2, #0
 8002862:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002864:	7bfa      	ldrb	r2, [r7, #15]
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	440b      	add	r3, r1
 8002872:	3320      	adds	r3, #32
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002878:	7bfa      	ldrb	r2, [r7, #15]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	440b      	add	r3, r1
 8002886:	3324      	adds	r3, #36	; 0x24
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800288c:	7bfb      	ldrb	r3, [r7, #15]
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	440b      	add	r3, r1
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	3301      	adds	r3, #1
 80028a4:	73fb      	strb	r3, [r7, #15]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	791b      	ldrb	r3, [r3, #4]
 80028aa:	7bfa      	ldrb	r2, [r7, #15]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d3bb      	bcc.n	8002828 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028b0:	2300      	movs	r3, #0
 80028b2:	73fb      	strb	r3, [r7, #15]
 80028b4:	e044      	b.n	8002940 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028b6:	7bfa      	ldrb	r2, [r7, #15]
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	440b      	add	r3, r1
 80028c4:	f203 1351 	addw	r3, r3, #337	; 0x151
 80028c8:	2200      	movs	r2, #0
 80028ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028cc:	7bfa      	ldrb	r2, [r7, #15]
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	4613      	mov	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	440b      	add	r3, r1
 80028da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80028de:	7bfa      	ldrb	r2, [r7, #15]
 80028e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028e2:	7bfa      	ldrb	r2, [r7, #15]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	440b      	add	r3, r1
 80028f0:	f203 1353 	addw	r3, r3, #339	; 0x153
 80028f4:	2200      	movs	r2, #0
 80028f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028f8:	7bfa      	ldrb	r2, [r7, #15]
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	440b      	add	r3, r1
 8002906:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800290e:	7bfa      	ldrb	r2, [r7, #15]
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	440b      	add	r3, r1
 800291c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002924:	7bfa      	ldrb	r2, [r7, #15]
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	4613      	mov	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	440b      	add	r3, r1
 8002932:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800293a:	7bfb      	ldrb	r3, [r7, #15]
 800293c:	3301      	adds	r3, #1
 800293e:	73fb      	strb	r3, [r7, #15]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	791b      	ldrb	r3, [r3, #4]
 8002944:	7bfa      	ldrb	r2, [r7, #15]
 8002946:	429a      	cmp	r2, r3
 8002948:	d3b5      	bcc.n	80028b6 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3304      	adds	r3, #4
 8002952:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002954:	f002 fdfe 	bl	8005554 <USB_DevInit>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d005      	beq.n	800296a <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2202      	movs	r2, #2
 8002962:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e00c      	b.n	8002984 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f004 fe19 	bl	80075b4 <USB_DevDisconnect>

  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800299a:	2b01      	cmp	r3, #1
 800299c:	d101      	bne.n	80029a2 <HAL_PCD_Start+0x16>
 800299e:	2302      	movs	r3, #2
 80029a0:	e016      	b.n	80029d0 <HAL_PCD_Start+0x44>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f002 fd94 	bl	80054dc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80029b4:	2101      	movs	r1, #1
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f006 fe33 	bl	8009622 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f004 fded 	bl	80075a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f004 fdef 	bl	80075c8 <USB_ReadInterrupts>
 80029ea:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 fb1c 	bl	8003034 <PCD_EP_ISR_Handler>

    return;
 80029fc:	e11b      	b.n	8002c36 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d013      	beq.n	8002a30 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a1a:	b292      	uxth	r2, r2
 8002a1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f006 fc06 	bl	8009232 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002a26:	2100      	movs	r1, #0
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f907 	bl	8002c3c <HAL_PCD_SetAddress>

    return;
 8002a2e:	e102      	b.n	8002c36 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a4c:	b292      	uxth	r2, r2
 8002a4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002a52:	e0f0      	b.n	8002c36 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00c      	beq.n	8002a78 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a70:	b292      	uxth	r2, r2
 8002a72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002a76:	e0de      	b.n	8002c36 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d027      	beq.n	8002ad2 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0204 	bic.w	r2, r2, #4
 8002a94:	b292      	uxth	r2, r2
 8002a96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0208 	bic.w	r2, r2, #8
 8002aac:	b292      	uxth	r2, r2
 8002aae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f006 fbf6 	bl	80092a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002aca:	b292      	uxth	r2, r2
 8002acc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002ad0:	e0b1      	b.n	8002c36 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 8085 	beq.w	8002be8 <HAL_PCD_IRQHandler+0x210>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002ade:	2300      	movs	r3, #0
 8002ae0:	77fb      	strb	r3, [r7, #31]
 8002ae2:	e011      	b.n	8002b08 <HAL_PCD_IRQHandler+0x130>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	7ffb      	ldrb	r3, [r7, #31]
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	441a      	add	r2, r3
 8002af0:	7ffb      	ldrb	r3, [r7, #31]
 8002af2:	8812      	ldrh	r2, [r2, #0]
 8002af4:	b292      	uxth	r2, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	f107 0120 	add.w	r1, r7, #32
 8002afc:	440b      	add	r3, r1
 8002afe:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002b02:	7ffb      	ldrb	r3, [r7, #31]
 8002b04:	3301      	adds	r3, #1
 8002b06:	77fb      	strb	r3, [r7, #31]
 8002b08:	7ffb      	ldrb	r3, [r7, #31]
 8002b0a:	2b07      	cmp	r3, #7
 8002b0c:	d9ea      	bls.n	8002ae4 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0201 	orr.w	r2, r2, #1
 8002b20:	b292      	uxth	r2, r2
 8002b22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0201 	bic.w	r2, r2, #1
 8002b38:	b292      	uxth	r2, r2
 8002b3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002b3e:	bf00      	nop
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f6      	beq.n	8002b40 <HAL_PCD_IRQHandler+0x168>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b64:	b292      	uxth	r2, r2
 8002b66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	77fb      	strb	r3, [r7, #31]
 8002b6e:	e010      	b.n	8002b92 <HAL_PCD_IRQHandler+0x1ba>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002b70:	7ffb      	ldrb	r3, [r7, #31]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6812      	ldr	r2, [r2, #0]
 8002b76:	4611      	mov	r1, r2
 8002b78:	7ffa      	ldrb	r2, [r7, #31]
 8002b7a:	0092      	lsls	r2, r2, #2
 8002b7c:	440a      	add	r2, r1
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	f107 0120 	add.w	r1, r7, #32
 8002b84:	440b      	add	r3, r1
 8002b86:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002b8a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002b8c:	7ffb      	ldrb	r3, [r7, #31]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	77fb      	strb	r3, [r7, #31]
 8002b92:	7ffb      	ldrb	r3, [r7, #31]
 8002b94:	2b07      	cmp	r3, #7
 8002b96:	d9eb      	bls.n	8002b70 <HAL_PCD_IRQHandler+0x198>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0208 	orr.w	r2, r2, #8
 8002baa:	b292      	uxth	r2, r2
 8002bac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bc2:	b292      	uxth	r2, r2
 8002bc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0204 	orr.w	r2, r2, #4
 8002bda:	b292      	uxth	r2, r2
 8002bdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f006 fb45 	bl	8009270 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002be6:	e026      	b.n	8002c36 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00f      	beq.n	8002c12 <HAL_PCD_IRQHandler+0x23a>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c04:	b292      	uxth	r2, r2
 8002c06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f006 fb03 	bl	8009216 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002c10:	e011      	b.n	8002c36 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00c      	beq.n	8002c36 <HAL_PCD_IRQHandler+0x25e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c2e:	b292      	uxth	r2, r2
 8002c30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002c34:	bf00      	nop
  }
}
 8002c36:	3720      	adds	r7, #32
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d101      	bne.n	8002c56 <HAL_PCD_SetAddress+0x1a>
 8002c52:	2302      	movs	r3, #2
 8002c54:	e012      	b.n	8002c7c <HAL_PCD_SetAddress+0x40>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	78fa      	ldrb	r2, [r7, #3]
 8002c62:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	78fa      	ldrb	r2, [r7, #3]
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f004 fc84 	bl	800757a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	4608      	mov	r0, r1
 8002c8e:	4611      	mov	r1, r2
 8002c90:	461a      	mov	r2, r3
 8002c92:	4603      	mov	r3, r0
 8002c94:	70fb      	strb	r3, [r7, #3]
 8002c96:	460b      	mov	r3, r1
 8002c98:	803b      	strh	r3, [r7, #0]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ca2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	da0e      	bge.n	8002cc8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002caa:	78fb      	ldrb	r3, [r7, #3]
 8002cac:	f003 0207 	and.w	r2, r3, #7
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	3310      	adds	r3, #16
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	705a      	strb	r2, [r3, #1]
 8002cc6:	e00e      	b.n	8002ce6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	f003 0207 	and.w	r2, r3, #7
 8002cce:	4613      	mov	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	4413      	add	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ce6:	78fb      	ldrb	r3, [r7, #3]
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002cf2:	883a      	ldrh	r2, [r7, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	78ba      	ldrb	r2, [r7, #2]
 8002cfc:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cfe:	78bb      	ldrb	r3, [r7, #2]
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d102      	bne.n	8002d0a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_PCD_EP_Open+0x94>
 8002d14:	2302      	movs	r3, #2
 8002d16:	e00e      	b.n	8002d36 <HAL_PCD_EP_Open+0xb2>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68f9      	ldr	r1, [r7, #12]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f002 fc32 	bl	8005590 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8002d34:	7afb      	ldrb	r3, [r7, #11]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b084      	sub	sp, #16
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	460b      	mov	r3, r1
 8002d48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	da0e      	bge.n	8002d70 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d52:	78fb      	ldrb	r3, [r7, #3]
 8002d54:	f003 0207 	and.w	r2, r3, #7
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	3310      	adds	r3, #16
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	4413      	add	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	705a      	strb	r2, [r3, #1]
 8002d6e:	e00e      	b.n	8002d8e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d70:	78fb      	ldrb	r3, [r7, #3]
 8002d72:	f003 0207 	and.w	r2, r3, #7
 8002d76:	4613      	mov	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	4413      	add	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d8e:	78fb      	ldrb	r3, [r7, #3]
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_PCD_EP_Close+0x6a>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e00e      	b.n	8002dc6 <HAL_PCD_EP_Close+0x88>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68f9      	ldr	r1, [r7, #12]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f002 ffaa 	bl	8005d10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b086      	sub	sp, #24
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	607a      	str	r2, [r7, #4]
 8002dd8:	603b      	str	r3, [r7, #0]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dde:	7afb      	ldrb	r3, [r7, #11]
 8002de0:	f003 0207 	and.w	r2, r3, #7
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	4413      	add	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2200      	movs	r2, #0
 8002e06:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e0e:	7afb      	ldrb	r3, [r7, #11]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6979      	ldr	r1, [r7, #20]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f003 f961 	bl	80060e8 <USB_EPStartXfer>

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e3c:	78fb      	ldrb	r3, [r7, #3]
 8002e3e:	f003 0207 	and.w	r2, r3, #7
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	440b      	add	r3, r1
 8002e4e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8002e52:	681b      	ldr	r3, [r3, #0]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr

08002e5e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b086      	sub	sp, #24
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	60f8      	str	r0, [r7, #12]
 8002e66:	607a      	str	r2, [r7, #4]
 8002e68:	603b      	str	r3, [r7, #0]
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e6e:	7afb      	ldrb	r3, [r7, #11]
 8002e70:	f003 0207 	and.w	r2, r3, #7
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	3310      	adds	r3, #16
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	4413      	add	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eaa:	7afb      	ldrb	r3, [r7, #11]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6979      	ldr	r1, [r7, #20]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f003 f913 	bl	80060e8 <USB_EPStartXfer>

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ed8:	78fb      	ldrb	r3, [r7, #3]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	7912      	ldrb	r2, [r2, #4]
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d901      	bls.n	8002eea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e04c      	b.n	8002f84 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002eea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	da0e      	bge.n	8002f10 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ef2:	78fb      	ldrb	r3, [r7, #3]
 8002ef4:	f003 0207 	and.w	r2, r3, #7
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	3310      	adds	r3, #16
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	4413      	add	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	705a      	strb	r2, [r3, #1]
 8002f0e:	e00c      	b.n	8002f2a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f10:	78fa      	ldrb	r2, [r7, #3]
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f30:	78fb      	ldrb	r3, [r7, #3]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <HAL_PCD_EP_SetStall+0x7e>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e01c      	b.n	8002f84 <HAL_PCD_EP_SetStall+0xb8>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68f9      	ldr	r1, [r7, #12]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f004 fa11 	bl	8007380 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f5e:	78fb      	ldrb	r3, [r7, #3]
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d108      	bne.n	8002f7a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8002f72:	4619      	mov	r1, r3
 8002f74:	4610      	mov	r0, r2
 8002f76:	f004 fb36 	bl	80075e6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	7912      	ldrb	r2, [r2, #4]
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d901      	bls.n	8002faa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e040      	b.n	800302c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002faa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	da0e      	bge.n	8002fd0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fb2:	78fb      	ldrb	r3, [r7, #3]
 8002fb4:	f003 0207 	and.w	r2, r3, #7
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	3310      	adds	r3, #16
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	705a      	strb	r2, [r3, #1]
 8002fce:	e00e      	b.n	8002fee <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	f003 0207 	and.w	r2, r3, #7
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_PCD_EP_ClrStall+0x82>
 800300a:	2302      	movs	r3, #2
 800300c:	e00e      	b.n	800302c <HAL_PCD_EP_ClrStall+0xa0>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68f9      	ldr	r1, [r7, #12]
 800301c:	4618      	mov	r0, r3
 800301e:	f004 f9ff 	bl	8007420 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b096      	sub	sp, #88	; 0x58
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800303c:	e3bc      	b.n	80037b8 <PCD_EP_ISR_Handler+0x784>
  {
    wIstr = hpcd->Instance->ISTR;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003046:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800304a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800304e:	b2db      	uxtb	r3, r3
 8003050:	f003 030f 	and.w	r3, r3, #15
 8003054:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8003058:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800305c:	2b00      	cmp	r3, #0
 800305e:	f040 8176 	bne.w	800334e <PCD_EP_ISR_Handler+0x31a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003062:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003066:	f003 0310 	and.w	r3, r3, #16
 800306a:	2b00      	cmp	r3, #0
 800306c:	d14f      	bne.n	800310e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	b29b      	uxth	r3, r3
 8003076:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800307a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307e:	81fb      	strh	r3, [r7, #14]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	89fb      	ldrh	r3, [r7, #14]
 8003086:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800308a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800308e:	b29b      	uxth	r3, r3
 8003090:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3310      	adds	r3, #16
 8003096:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	461a      	mov	r2, r3
 80030a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	4413      	add	r3, r2
 80030ac:	3302      	adds	r3, #2
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	4413      	add	r3, r2
 80030b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030c2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80030c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030c6:	695a      	ldr	r2, [r3, #20]
 80030c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	441a      	add	r2, r3
 80030ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030d0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80030d2:	2100      	movs	r1, #0
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f006 f884 	bl	80091e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	7b5b      	ldrb	r3, [r3, #13]
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 8369 	beq.w	80037b8 <PCD_EP_ISR_Handler+0x784>
 80030e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f040 8364 	bne.w	80037b8 <PCD_EP_ISR_Handler+0x784>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	7b5b      	ldrb	r3, [r3, #13]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	b292      	uxth	r2, r2
 8003102:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	735a      	strb	r2, [r3, #13]
 800310c:	e354      	b.n	80037b8 <PCD_EP_ISR_Handler+0x784>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003114:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003120:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003128:	2b00      	cmp	r3, #0
 800312a:	d034      	beq.n	8003196 <PCD_EP_ISR_Handler+0x162>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003134:	b29b      	uxth	r3, r3
 8003136:	461a      	mov	r2, r3
 8003138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	4413      	add	r3, r2
 8003140:	3306      	adds	r3, #6
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6812      	ldr	r2, [r2, #0]
 8003148:	4413      	add	r3, r2
 800314a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003156:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6818      	ldr	r0, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8003162:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003164:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003168:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800316a:	b29b      	uxth	r3, r3
 800316c:	f004 fa8b 	bl	8007686 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	b29a      	uxth	r2, r3
 8003178:	f640 738f 	movw	r3, #3983	; 0xf8f
 800317c:	4013      	ands	r3, r2
 800317e:	823b      	strh	r3, [r7, #16]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	8a3a      	ldrh	r2, [r7, #16]
 8003186:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800318a:	b292      	uxth	r2, r2
 800318c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f005 fffa 	bl	8009188 <HAL_PCD_SetupStageCallback>
 8003194:	e310      	b.n	80037b8 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003196:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800319a:	2b00      	cmp	r3, #0
 800319c:	f280 830c 	bge.w	80037b8 <PCD_EP_ISR_Handler+0x784>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80031ac:	4013      	ands	r3, r2
 80031ae:	83fb      	strh	r3, [r7, #30]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	8bfa      	ldrh	r2, [r7, #30]
 80031b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031ba:	b292      	uxth	r2, r2
 80031bc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	461a      	mov	r2, r3
 80031ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	4413      	add	r3, r2
 80031d2:	3306      	adds	r3, #6
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6812      	ldr	r2, [r2, #0]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031e8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80031ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d019      	beq.n	8003226 <PCD_EP_ISR_Handler+0x1f2>
 80031f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d015      	beq.n	8003226 <PCD_EP_ISR_Handler+0x1f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003200:	6959      	ldr	r1, [r3, #20]
 8003202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003204:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003208:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800320a:	b29b      	uxth	r3, r3
 800320c:	f004 fa3b 	bl	8007686 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003210:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003212:	695a      	ldr	r2, [r3, #20]
 8003214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	441a      	add	r2, r3
 800321a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800321c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800321e:	2100      	movs	r1, #0
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f005 ffc3 	bl	80091ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003230:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003238:	2b00      	cmp	r3, #0
 800323a:	f040 82bd 	bne.w	80037b8 <PCD_EP_ISR_Handler+0x784>
 800323e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003242:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003246:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800324a:	f000 82b5 	beq.w	80037b8 <PCD_EP_ISR_Handler+0x784>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	61bb      	str	r3, [r7, #24]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800325c:	b29b      	uxth	r3, r3
 800325e:	461a      	mov	r2, r3
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	4413      	add	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	b29b      	uxth	r3, r3
 8003274:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003278:	b29a      	uxth	r2, r3
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	801a      	strh	r2, [r3, #0]
 800327e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	2b3e      	cmp	r3, #62	; 0x3e
 8003284:	d91d      	bls.n	80032c2 <PCD_EP_ISR_Handler+0x28e>
 8003286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	647b      	str	r3, [r7, #68]	; 0x44
 800328e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	f003 031f 	and.w	r3, r3, #31
 8003296:	2b00      	cmp	r3, #0
 8003298:	d102      	bne.n	80032a0 <PCD_EP_ISR_Handler+0x26c>
 800329a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800329c:	3b01      	subs	r3, #1
 800329e:	647b      	str	r3, [r7, #68]	; 0x44
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	029b      	lsls	r3, r3, #10
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	4313      	orrs	r3, r2
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	801a      	strh	r2, [r3, #0]
 80032c0:	e026      	b.n	8003310 <PCD_EP_ISR_Handler+0x2dc>
 80032c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10a      	bne.n	80032e0 <PCD_EP_ISR_Handler+0x2ac>
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032d8:	b29a      	uxth	r2, r3
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	801a      	strh	r2, [r3, #0]
 80032de:	e017      	b.n	8003310 <PCD_EP_ISR_Handler+0x2dc>
 80032e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	085b      	lsrs	r3, r3, #1
 80032e6:	647b      	str	r3, [r7, #68]	; 0x44
 80032e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d002      	beq.n	80032fa <PCD_EP_ISR_Handler+0x2c6>
 80032f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032f6:	3301      	adds	r3, #1
 80032f8:	647b      	str	r3, [r7, #68]	; 0x44
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	b29a      	uxth	r2, r3
 8003300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003302:	b29b      	uxth	r3, r3
 8003304:	029b      	lsls	r3, r3, #10
 8003306:	b29b      	uxth	r3, r3
 8003308:	4313      	orrs	r3, r2
 800330a:	b29a      	uxth	r2, r3
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	881b      	ldrh	r3, [r3, #0]
 8003316:	b29b      	uxth	r3, r3
 8003318:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800331c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003320:	827b      	strh	r3, [r7, #18]
 8003322:	8a7b      	ldrh	r3, [r7, #18]
 8003324:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003328:	827b      	strh	r3, [r7, #18]
 800332a:	8a7b      	ldrh	r3, [r7, #18]
 800332c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003330:	827b      	strh	r3, [r7, #18]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	8a7b      	ldrh	r3, [r7, #18]
 8003338:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800333c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003340:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003348:	b29b      	uxth	r3, r3
 800334a:	8013      	strh	r3, [r2, #0]
 800334c:	e234      	b.n	80037b8 <PCD_EP_ISR_Handler+0x784>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	461a      	mov	r2, r3
 8003354:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	881b      	ldrh	r3, [r3, #0]
 800335e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003362:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003366:	2b00      	cmp	r3, #0
 8003368:	f280 80fc 	bge.w	8003564 <PCD_EP_ISR_Handler+0x530>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	461a      	mov	r2, r3
 8003372:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	881b      	ldrh	r3, [r3, #0]
 800337c:	b29a      	uxth	r2, r3
 800337e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003382:	4013      	ands	r3, r2
 8003384:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	461a      	mov	r2, r3
 800338e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800339a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800339e:	b292      	uxth	r2, r2
 80033a0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80033a2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80033a6:	4613      	mov	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	4413      	add	r3, r2
 80033b6:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80033b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ba:	7b1b      	ldrb	r3, [r3, #12]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d125      	bne.n	800340c <PCD_EP_ISR_Handler+0x3d8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	461a      	mov	r2, r3
 80033cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	4413      	add	r3, r2
 80033d4:	3306      	adds	r3, #6
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6812      	ldr	r2, [r2, #0]
 80033dc:	4413      	add	r3, r2
 80033de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033e8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80033ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 8092 	beq.w	800351a <PCD_EP_ISR_Handler+0x4e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033fc:	6959      	ldr	r1, [r3, #20]
 80033fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003400:	88da      	ldrh	r2, [r3, #6]
 8003402:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003406:	f004 f93e 	bl	8007686 <USB_ReadPMA>
 800340a:	e086      	b.n	800351a <PCD_EP_ISR_Handler+0x4e6>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800340c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800340e:	78db      	ldrb	r3, [r3, #3]
 8003410:	2b02      	cmp	r3, #2
 8003412:	d10a      	bne.n	800342a <PCD_EP_ISR_Handler+0x3f6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003414:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003418:	461a      	mov	r2, r3
 800341a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f9d9 	bl	80037d4 <HAL_PCD_EP_DB_Receive>
 8003422:	4603      	mov	r3, r0
 8003424:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8003428:	e077      	b.n	800351a <PCD_EP_ISR_Handler+0x4e6>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	461a      	mov	r2, r3
 8003430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	b29b      	uxth	r3, r3
 800343c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003444:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	461a      	mov	r2, r3
 800344e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	441a      	add	r2, r3
 8003456:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800345a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800345e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003466:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800346a:	b29b      	uxth	r3, r3
 800346c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	461a      	mov	r2, r3
 8003474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	881b      	ldrh	r3, [r3, #0]
 800347e:	b29b      	uxth	r3, r3
 8003480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d024      	beq.n	80034d2 <PCD_EP_ISR_Handler+0x49e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003490:	b29b      	uxth	r3, r3
 8003492:	461a      	mov	r2, r3
 8003494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	4413      	add	r3, r2
 800349c:	3302      	adds	r3, #2
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6812      	ldr	r2, [r2, #0]
 80034a4:	4413      	add	r3, r2
 80034a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034b0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80034b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d02e      	beq.n	800351a <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6818      	ldr	r0, [r3, #0]
 80034c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c2:	6959      	ldr	r1, [r3, #20]
 80034c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c6:	891a      	ldrh	r2, [r3, #8]
 80034c8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80034cc:	f004 f8db 	bl	8007686 <USB_ReadPMA>
 80034d0:	e023      	b.n	800351a <PCD_EP_ISR_Handler+0x4e6>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034da:	b29b      	uxth	r3, r3
 80034dc:	461a      	mov	r2, r3
 80034de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4413      	add	r3, r2
 80034e6:	3306      	adds	r3, #6
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6812      	ldr	r2, [r2, #0]
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034fa:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80034fe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003502:	2b00      	cmp	r3, #0
 8003504:	d009      	beq.n	800351a <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800350c:	6959      	ldr	r1, [r3, #20]
 800350e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003510:	895a      	ldrh	r2, [r3, #10]
 8003512:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003516:	f004 f8b6 	bl	8007686 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800351a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800351c:	69da      	ldr	r2, [r3, #28]
 800351e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003522:	441a      	add	r2, r3
 8003524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003526:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003528:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800352a:	695a      	ldr	r2, [r3, #20]
 800352c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003530:	441a      	add	r2, r3
 8003532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003534:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d005      	beq.n	800354a <PCD_EP_ISR_Handler+0x516>
 800353e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	429a      	cmp	r2, r3
 8003548:	d206      	bcs.n	8003558 <PCD_EP_ISR_Handler+0x524>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800354a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	4619      	mov	r1, r3
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f005 fe2b 	bl	80091ac <HAL_PCD_DataOutStageCallback>
 8003556:	e005      	b.n	8003564 <PCD_EP_ISR_Handler+0x530>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800355e:	4618      	mov	r0, r3
 8003560:	f002 fdc2 	bl	80060e8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003564:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 8123 	beq.w	80037b8 <PCD_EP_ISR_Handler+0x784>
      {
        ep = &hpcd->IN_ep[epindex];
 8003572:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003576:	4613      	mov	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	3310      	adds	r3, #16
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	4413      	add	r3, r2
 8003584:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	461a      	mov	r2, r3
 800358c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4413      	add	r3, r2
 8003594:	881b      	ldrh	r3, [r3, #0]
 8003596:	b29b      	uxth	r3, r3
 8003598:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800359c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	461a      	mov	r2, r3
 80035aa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	441a      	add	r2, r3
 80035b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80035b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035be:	b29b      	uxth	r3, r3
 80035c0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80035c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035c4:	78db      	ldrb	r3, [r3, #3]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	f040 80a2 	bne.w	8003710 <PCD_EP_ISR_Handler+0x6dc>
        {
          ep->xfer_len = 0U;
 80035cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ce:	2200      	movs	r2, #0
 80035d0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80035d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035d4:	7b1b      	ldrb	r3, [r3, #12]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 8093 	beq.w	8003702 <PCD_EP_ISR_Handler+0x6ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80035dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80035e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d046      	beq.n	8003676 <PCD_EP_ISR_Handler+0x642>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ea:	785b      	ldrb	r3, [r3, #1]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d126      	bne.n	800363e <PCD_EP_ISR_Handler+0x60a>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	627b      	str	r3, [r7, #36]	; 0x24
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035fe:	b29b      	uxth	r3, r3
 8003600:	461a      	mov	r2, r3
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	4413      	add	r3, r2
 8003606:	627b      	str	r3, [r7, #36]	; 0x24
 8003608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	011a      	lsls	r2, r3, #4
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	4413      	add	r3, r2
 8003612:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003616:	623b      	str	r3, [r7, #32]
 8003618:	6a3b      	ldr	r3, [r7, #32]
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	b29b      	uxth	r3, r3
 800361e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003622:	b29a      	uxth	r2, r3
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	801a      	strh	r2, [r3, #0]
 8003628:	6a3b      	ldr	r3, [r7, #32]
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	b29b      	uxth	r3, r3
 800362e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003632:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003636:	b29a      	uxth	r2, r3
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	801a      	strh	r2, [r3, #0]
 800363c:	e061      	b.n	8003702 <PCD_EP_ISR_Handler+0x6ce>
 800363e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003640:	785b      	ldrb	r3, [r3, #1]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d15d      	bne.n	8003702 <PCD_EP_ISR_Handler+0x6ce>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003654:	b29b      	uxth	r3, r3
 8003656:	461a      	mov	r2, r3
 8003658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365a:	4413      	add	r3, r2
 800365c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800365e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	011a      	lsls	r2, r3, #4
 8003664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003666:	4413      	add	r3, r2
 8003668:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800366c:	62bb      	str	r3, [r7, #40]	; 0x28
 800366e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003670:	2200      	movs	r2, #0
 8003672:	801a      	strh	r2, [r3, #0]
 8003674:	e045      	b.n	8003702 <PCD_EP_ISR_Handler+0x6ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800367c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800367e:	785b      	ldrb	r3, [r3, #1]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d126      	bne.n	80036d2 <PCD_EP_ISR_Handler+0x69e>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	637b      	str	r3, [r7, #52]	; 0x34
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003692:	b29b      	uxth	r3, r3
 8003694:	461a      	mov	r2, r3
 8003696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003698:	4413      	add	r3, r2
 800369a:	637b      	str	r3, [r7, #52]	; 0x34
 800369c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	011a      	lsls	r2, r3, #4
 80036a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a4:	4413      	add	r3, r2
 80036a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80036aa:	633b      	str	r3, [r7, #48]	; 0x30
 80036ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ae:	881b      	ldrh	r3, [r3, #0]
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ba:	801a      	strh	r2, [r3, #0]
 80036bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	e017      	b.n	8003702 <PCD_EP_ISR_Handler+0x6ce>
 80036d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036d4:	785b      	ldrb	r3, [r3, #1]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d113      	bne.n	8003702 <PCD_EP_ISR_Handler+0x6ce>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	461a      	mov	r2, r3
 80036e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036e8:	4413      	add	r3, r2
 80036ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	011a      	lsls	r2, r3, #4
 80036f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036f4:	4413      	add	r3, r2
 80036f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80036fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80036fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fe:	2200      	movs	r2, #0
 8003700:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	4619      	mov	r1, r3
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f005 fd6a 	bl	80091e2 <HAL_PCD_DataInStageCallback>
 800370e:	e053      	b.n	80037b8 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003710:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003718:	2b00      	cmp	r3, #0
 800371a:	d146      	bne.n	80037aa <PCD_EP_ISR_Handler+0x776>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003724:	b29b      	uxth	r3, r3
 8003726:	461a      	mov	r2, r3
 8003728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	4413      	add	r3, r2
 8003730:	3302      	adds	r3, #2
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6812      	ldr	r2, [r2, #0]
 8003738:	4413      	add	r3, r2
 800373a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003744:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800374a:	699a      	ldr	r2, [r3, #24]
 800374c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003750:	429a      	cmp	r2, r3
 8003752:	d907      	bls.n	8003764 <PCD_EP_ISR_Handler+0x730>
            {
              ep->xfer_len -= TxPctSize;
 8003754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003756:	699a      	ldr	r2, [r3, #24]
 8003758:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800375c:	1ad2      	subs	r2, r2, r3
 800375e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003760:	619a      	str	r2, [r3, #24]
 8003762:	e002      	b.n	800376a <PCD_EP_ISR_Handler+0x736>
            }
            else
            {
              ep->xfer_len = 0U;
 8003764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003766:	2200      	movs	r2, #0
 8003768:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800376a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <PCD_EP_ISR_Handler+0x74c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	4619      	mov	r1, r3
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f005 fd32 	bl	80091e2 <HAL_PCD_DataInStageCallback>
 800377e:	e01b      	b.n	80037b8 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003788:	441a      	add	r2, r3
 800378a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800378c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800378e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003790:	69da      	ldr	r2, [r3, #28]
 8003792:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003796:	441a      	add	r2, r3
 8003798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800379a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80037a2:	4618      	mov	r0, r3
 80037a4:	f002 fca0 	bl	80060e8 <USB_EPStartXfer>
 80037a8:	e006      	b.n	80037b8 <PCD_EP_ISR_Handler+0x784>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80037aa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80037ae:	461a      	mov	r2, r3
 80037b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f91b 	bl	80039ee <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	b21b      	sxth	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f6ff ac3a 	blt.w	800303e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3758      	adds	r7, #88	; 0x58
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	4613      	mov	r3, r2
 80037e0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80037e2:	88fb      	ldrh	r3, [r7, #6]
 80037e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d07e      	beq.n	80038ea <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	461a      	mov	r2, r3
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	4413      	add	r3, r2
 8003800:	3302      	adds	r3, #2
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	6812      	ldr	r2, [r2, #0]
 8003808:	4413      	add	r3, r2
 800380a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003814:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	699a      	ldr	r2, [r3, #24]
 800381a:	8b7b      	ldrh	r3, [r7, #26]
 800381c:	429a      	cmp	r2, r3
 800381e:	d306      	bcc.n	800382e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	699a      	ldr	r2, [r3, #24]
 8003824:	8b7b      	ldrh	r3, [r7, #26]
 8003826:	1ad2      	subs	r2, r2, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	619a      	str	r2, [r3, #24]
 800382c:	e002      	b.n	8003834 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2200      	movs	r2, #0
 8003832:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d123      	bne.n	8003884 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	461a      	mov	r2, r3
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	881b      	ldrh	r3, [r3, #0]
 800384c:	b29b      	uxth	r3, r3
 800384e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003856:	833b      	strh	r3, [r7, #24]
 8003858:	8b3b      	ldrh	r3, [r7, #24]
 800385a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800385e:	833b      	strh	r3, [r7, #24]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	461a      	mov	r2, r3
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	441a      	add	r2, r3
 800386e:	8b3b      	ldrh	r3, [r7, #24]
 8003870:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003874:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003878:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800387c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003880:	b29b      	uxth	r3, r3
 8003882:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003884:	88fb      	ldrh	r3, [r7, #6]
 8003886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	d01f      	beq.n	80038ce <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4413      	add	r3, r2
 800389c:	881b      	ldrh	r3, [r3, #0]
 800389e:	b29b      	uxth	r3, r3
 80038a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a8:	82fb      	strh	r3, [r7, #22]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	461a      	mov	r2, r3
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	441a      	add	r2, r3
 80038b8:	8afb      	ldrh	r3, [r7, #22]
 80038ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80038ce:	8b7b      	ldrh	r3, [r7, #26]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 8087 	beq.w	80039e4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	6959      	ldr	r1, [r3, #20]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	891a      	ldrh	r2, [r3, #8]
 80038e2:	8b7b      	ldrh	r3, [r7, #26]
 80038e4:	f003 fecf 	bl	8007686 <USB_ReadPMA>
 80038e8:	e07c      	b.n	80039e4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	461a      	mov	r2, r3
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	4413      	add	r3, r2
 80038fe:	3306      	adds	r3, #6
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	6812      	ldr	r2, [r2, #0]
 8003906:	4413      	add	r3, r2
 8003908:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003912:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	699a      	ldr	r2, [r3, #24]
 8003918:	8b7b      	ldrh	r3, [r7, #26]
 800391a:	429a      	cmp	r2, r3
 800391c:	d306      	bcc.n	800392c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	699a      	ldr	r2, [r3, #24]
 8003922:	8b7b      	ldrh	r3, [r7, #26]
 8003924:	1ad2      	subs	r2, r2, r3
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	619a      	str	r2, [r3, #24]
 800392a:	e002      	b.n	8003932 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2200      	movs	r2, #0
 8003930:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d123      	bne.n	8003982 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	461a      	mov	r2, r3
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	881b      	ldrh	r3, [r3, #0]
 800394a:	b29b      	uxth	r3, r3
 800394c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003954:	83fb      	strh	r3, [r7, #30]
 8003956:	8bfb      	ldrh	r3, [r7, #30]
 8003958:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800395c:	83fb      	strh	r3, [r7, #30]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	441a      	add	r2, r3
 800396c:	8bfb      	ldrh	r3, [r7, #30]
 800396e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003972:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800397a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800397e:	b29b      	uxth	r3, r3
 8003980:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003982:	88fb      	ldrh	r3, [r7, #6]
 8003984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003988:	2b00      	cmp	r3, #0
 800398a:	d11f      	bne.n	80039cc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	461a      	mov	r2, r3
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	881b      	ldrh	r3, [r3, #0]
 800399c:	b29b      	uxth	r3, r3
 800399e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a6:	83bb      	strh	r3, [r7, #28]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	461a      	mov	r2, r3
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	441a      	add	r2, r3
 80039b6:	8bbb      	ldrh	r3, [r7, #28]
 80039b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80039cc:	8b7b      	ldrh	r3, [r7, #26]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d008      	beq.n	80039e4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6818      	ldr	r0, [r3, #0]
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	6959      	ldr	r1, [r3, #20]
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	895a      	ldrh	r2, [r3, #10]
 80039de:	8b7b      	ldrh	r3, [r7, #26]
 80039e0:	f003 fe51 	bl	8007686 <USB_ReadPMA>
    }
  }

  return count;
 80039e4:	8b7b      	ldrh	r3, [r7, #26]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3720      	adds	r7, #32
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b0a4      	sub	sp, #144	; 0x90
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	4613      	mov	r3, r2
 80039fa:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80039fc:	88fb      	ldrh	r3, [r7, #6]
 80039fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 81dd 	beq.w	8003dc2 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	461a      	mov	r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	4413      	add	r3, r2
 8003a1c:	3302      	adds	r3, #2
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	6812      	ldr	r2, [r2, #0]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a30:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	699a      	ldr	r2, [r3, #24]
 8003a38:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d907      	bls.n	8003a50 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	699a      	ldr	r2, [r3, #24]
 8003a44:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003a48:	1ad2      	subs	r2, r2, r3
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	619a      	str	r2, [r3, #24]
 8003a4e:	e002      	b.n	8003a56 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2200      	movs	r2, #0
 8003a54:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f040 80b9 	bne.w	8003bd2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	785b      	ldrb	r3, [r3, #1]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d126      	bne.n	8003ab6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	461a      	mov	r2, r3
 8003a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7c:	4413      	add	r3, r2
 8003a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	011a      	lsls	r2, r3, #4
 8003a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a88:	4413      	add	r3, r2
 8003a8a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a92:	881b      	ldrh	r3, [r3, #0]
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9e:	801a      	strh	r2, [r3, #0]
 8003aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa2:	881b      	ldrh	r3, [r3, #0]
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab2:	801a      	strh	r2, [r3, #0]
 8003ab4:	e01a      	b.n	8003aec <HAL_PCD_EP_DB_Transmit+0xfe>
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	785b      	ldrb	r3, [r3, #1]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d116      	bne.n	8003aec <HAL_PCD_EP_DB_Transmit+0xfe>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	461a      	mov	r2, r3
 8003ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad2:	4413      	add	r3, r2
 8003ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	011a      	lsls	r2, r3, #4
 8003adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ade:	4413      	add	r3, r2
 8003ae0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ae4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae8:	2200      	movs	r2, #0
 8003aea:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	627b      	str	r3, [r7, #36]	; 0x24
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	785b      	ldrb	r3, [r3, #1]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d126      	bne.n	8003b48 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	61fb      	str	r3, [r7, #28]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	4413      	add	r3, r2
 8003b10:	61fb      	str	r3, [r7, #28]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	011a      	lsls	r2, r3, #4
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b20:	61bb      	str	r3, [r7, #24]
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	801a      	strh	r2, [r3, #0]
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	881b      	ldrh	r3, [r3, #0]
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	801a      	strh	r2, [r3, #0]
 8003b46:	e017      	b.n	8003b78 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	785b      	ldrb	r3, [r3, #1]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d113      	bne.n	8003b78 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	4413      	add	r3, r2
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	011a      	lsls	r2, r3, #4
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b70:	623b      	str	r3, [r7, #32]
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	2200      	movs	r2, #0
 8003b76:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f005 fb2f 	bl	80091e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b84:	88fb      	ldrh	r3, [r7, #6]
 8003b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 82fc 	beq.w	8004188 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	461a      	mov	r2, r3
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	881b      	ldrh	r3, [r3, #0]
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003baa:	82fb      	strh	r3, [r7, #22]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	441a      	add	r2, r3
 8003bba:	8afb      	ldrh	r3, [r7, #22]
 8003bbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	8013      	strh	r3, [r2, #0]
 8003bd0:	e2da      	b.n	8004188 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003bd2:	88fb      	ldrh	r3, [r7, #6]
 8003bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d021      	beq.n	8003c20 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	461a      	mov	r2, r3
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4413      	add	r3, r2
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	441a      	add	r2, r3
 8003c08:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003c0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	f040 82ae 	bne.w	8004188 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	695a      	ldr	r2, [r3, #20]
 8003c30:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003c34:	441a      	add	r2, r3
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	69da      	ldr	r2, [r3, #28]
 8003c3e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003c42:	441a      	add	r2, r3
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	6a1a      	ldr	r2, [r3, #32]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d30b      	bcc.n	8003c6c <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	6a1a      	ldr	r2, [r3, #32]
 8003c60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c64:	1ad2      	subs	r2, r2, r3
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	621a      	str	r2, [r3, #32]
 8003c6a:	e017      	b.n	8003c9c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d108      	bne.n	8003c86 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003c74:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003c78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003c84:	e00a      	b.n	8003c9c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	785b      	ldrb	r3, [r3, #1]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d165      	bne.n	8003d70 <HAL_PCD_EP_DB_Transmit+0x382>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cb8:	4413      	add	r3, r2
 8003cba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	011a      	lsls	r2, r3, #4
 8003cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003cca:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cda:	801a      	strh	r2, [r3, #0]
 8003cdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ce0:	2b3e      	cmp	r3, #62	; 0x3e
 8003ce2:	d91d      	bls.n	8003d20 <HAL_PCD_EP_DB_Transmit+0x332>
 8003ce4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ce8:	095b      	lsrs	r3, r3, #5
 8003cea:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cf0:	f003 031f 	and.w	r3, r3, #31
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d102      	bne.n	8003cfe <HAL_PCD_EP_DB_Transmit+0x310>
 8003cf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	029b      	lsls	r3, r3, #10
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1c:	801a      	strh	r2, [r3, #0]
 8003d1e:	e044      	b.n	8003daa <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003d20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10a      	bne.n	8003d3e <HAL_PCD_EP_DB_Transmit+0x350>
 8003d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3a:	801a      	strh	r2, [r3, #0]
 8003d3c:	e035      	b.n	8003daa <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d42:	085b      	lsrs	r3, r3, #1
 8003d44:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d54:	3301      	adds	r3, #1
 8003d56:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	029b      	lsls	r3, r3, #10
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	4313      	orrs	r3, r2
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6c:	801a      	strh	r2, [r3, #0]
 8003d6e:	e01c      	b.n	8003daa <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	785b      	ldrb	r3, [r3, #1]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d118      	bne.n	8003daa <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	647b      	str	r3, [r7, #68]	; 0x44
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	461a      	mov	r2, r3
 8003d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d8c:	4413      	add	r3, r2
 8003d8e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	011a      	lsls	r2, r3, #4
 8003d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d98:	4413      	add	r3, r2
 8003d9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d9e:	643b      	str	r3, [r7, #64]	; 0x40
 8003da0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003da8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	6959      	ldr	r1, [r3, #20]
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	891a      	ldrh	r2, [r3, #8]
 8003db6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	f003 fc1e 	bl	80075fc <USB_WritePMA>
 8003dc0:	e1e2      	b.n	8004188 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	461a      	mov	r2, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	4413      	add	r3, r2
 8003dd6:	3306      	adds	r3, #6
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	6812      	ldr	r2, [r2, #0]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dea:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	699a      	ldr	r2, [r3, #24]
 8003df2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d307      	bcc.n	8003e0a <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	699a      	ldr	r2, [r3, #24]
 8003dfe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003e02:	1ad2      	subs	r2, r2, r3
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	619a      	str	r2, [r3, #24]
 8003e08:	e002      	b.n	8003e10 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f040 80c0 	bne.w	8003f9a <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	785b      	ldrb	r3, [r3, #1]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d126      	bne.n	8003e70 <HAL_PCD_EP_DB_Transmit+0x482>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	461a      	mov	r2, r3
 8003e34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e36:	4413      	add	r3, r2
 8003e38:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	011a      	lsls	r2, r3, #4
 8003e40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e42:	4413      	add	r3, r2
 8003e44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e48:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e58:	801a      	strh	r2, [r3, #0]
 8003e5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e6c:	801a      	strh	r2, [r3, #0]
 8003e6e:	e01a      	b.n	8003ea6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	785b      	ldrb	r3, [r3, #1]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d116      	bne.n	8003ea6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	667b      	str	r3, [r7, #100]	; 0x64
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	461a      	mov	r2, r3
 8003e8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e8c:	4413      	add	r3, r2
 8003e8e:	667b      	str	r3, [r7, #100]	; 0x64
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	011a      	lsls	r2, r3, #4
 8003e96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e98:	4413      	add	r3, r2
 8003e9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e9e:	663b      	str	r3, [r7, #96]	; 0x60
 8003ea0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	677b      	str	r3, [r7, #116]	; 0x74
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	785b      	ldrb	r3, [r3, #1]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d12b      	bne.n	8003f0c <HAL_PCD_EP_DB_Transmit+0x51e>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec8:	4413      	add	r3, r2
 8003eca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	011a      	lsls	r2, r3, #4
 8003ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003eda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ede:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ef0:	801a      	strh	r2, [r3, #0]
 8003ef2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003efe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f08:	801a      	strh	r2, [r3, #0]
 8003f0a:	e017      	b.n	8003f3c <HAL_PCD_EP_DB_Transmit+0x54e>
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	785b      	ldrb	r3, [r3, #1]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d113      	bne.n	8003f3c <HAL_PCD_EP_DB_Transmit+0x54e>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	461a      	mov	r2, r3
 8003f20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f22:	4413      	add	r3, r2
 8003f24:	677b      	str	r3, [r7, #116]	; 0x74
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	011a      	lsls	r2, r3, #4
 8003f2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f2e:	4413      	add	r3, r2
 8003f30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f34:	673b      	str	r3, [r7, #112]	; 0x70
 8003f36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f38:	2200      	movs	r2, #0
 8003f3a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	4619      	mov	r1, r3
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f005 f94d 	bl	80091e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f48:	88fb      	ldrh	r3, [r7, #6]
 8003f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f040 811a 	bne.w	8004188 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4413      	add	r3, r2
 8003f62:	881b      	ldrh	r3, [r3, #0]
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f6e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	461a      	mov	r2, r3
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	441a      	add	r2, r3
 8003f80:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003f84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	8013      	strh	r3, [r2, #0]
 8003f98:	e0f6      	b.n	8004188 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f9a:	88fb      	ldrh	r3, [r7, #6]
 8003f9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d121      	bne.n	8003fe8 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fbe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	441a      	add	r2, r3
 8003fd0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003fd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	f040 80ca 	bne.w	8004188 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	695a      	ldr	r2, [r3, #20]
 8003ff8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003ffc:	441a      	add	r2, r3
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	69da      	ldr	r2, [r3, #28]
 8004006:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800400a:	441a      	add	r2, r3
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	6a1a      	ldr	r2, [r3, #32]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	429a      	cmp	r2, r3
 800401a:	d30b      	bcc.n	8004034 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	6a1a      	ldr	r2, [r3, #32]
 8004028:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800402c:	1ad2      	subs	r2, r2, r3
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	621a      	str	r2, [r3, #32]
 8004032:	e017      	b.n	8004064 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d108      	bne.n	800404e <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800403c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004040:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800404c:	e00a      	b.n	8004064 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2200      	movs	r2, #0
 800405a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	657b      	str	r3, [r7, #84]	; 0x54
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	785b      	ldrb	r3, [r3, #1]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d165      	bne.n	800413e <HAL_PCD_EP_DB_Transmit+0x750>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004080:	b29b      	uxth	r3, r3
 8004082:	461a      	mov	r2, r3
 8004084:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004086:	4413      	add	r3, r2
 8004088:	65fb      	str	r3, [r7, #92]	; 0x5c
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	011a      	lsls	r2, r3, #4
 8004090:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004092:	4413      	add	r3, r2
 8004094:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004098:	65bb      	str	r3, [r7, #88]	; 0x58
 800409a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	b29b      	uxth	r3, r3
 80040a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040a8:	801a      	strh	r2, [r3, #0]
 80040aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040ae:	2b3e      	cmp	r3, #62	; 0x3e
 80040b0:	d91d      	bls.n	80040ee <HAL_PCD_EP_DB_Transmit+0x700>
 80040b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040b6:	095b      	lsrs	r3, r3, #5
 80040b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80040ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040be:	f003 031f 	and.w	r3, r3, #31
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d102      	bne.n	80040cc <HAL_PCD_EP_DB_Transmit+0x6de>
 80040c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040c8:	3b01      	subs	r3, #1
 80040ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80040cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	029b      	lsls	r3, r3, #10
 80040d8:	b29b      	uxth	r3, r3
 80040da:	4313      	orrs	r3, r2
 80040dc:	b29b      	uxth	r3, r3
 80040de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040ea:	801a      	strh	r2, [r3, #0]
 80040ec:	e041      	b.n	8004172 <HAL_PCD_EP_DB_Transmit+0x784>
 80040ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10a      	bne.n	800410c <HAL_PCD_EP_DB_Transmit+0x71e>
 80040f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004104:	b29a      	uxth	r2, r3
 8004106:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004108:	801a      	strh	r2, [r3, #0]
 800410a:	e032      	b.n	8004172 <HAL_PCD_EP_DB_Transmit+0x784>
 800410c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004110:	085b      	lsrs	r3, r3, #1
 8004112:	66bb      	str	r3, [r7, #104]	; 0x68
 8004114:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	d002      	beq.n	8004126 <HAL_PCD_EP_DB_Transmit+0x738>
 8004120:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004122:	3301      	adds	r3, #1
 8004124:	66bb      	str	r3, [r7, #104]	; 0x68
 8004126:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	b29a      	uxth	r2, r3
 800412c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800412e:	b29b      	uxth	r3, r3
 8004130:	029b      	lsls	r3, r3, #10
 8004132:	b29b      	uxth	r3, r3
 8004134:	4313      	orrs	r3, r2
 8004136:	b29a      	uxth	r2, r3
 8004138:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800413a:	801a      	strh	r2, [r3, #0]
 800413c:	e019      	b.n	8004172 <HAL_PCD_EP_DB_Transmit+0x784>
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	785b      	ldrb	r3, [r3, #1]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d115      	bne.n	8004172 <HAL_PCD_EP_DB_Transmit+0x784>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800414e:	b29b      	uxth	r3, r3
 8004150:	461a      	mov	r2, r3
 8004152:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004154:	4413      	add	r3, r2
 8004156:	657b      	str	r3, [r7, #84]	; 0x54
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	011a      	lsls	r2, r3, #4
 800415e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004160:	4413      	add	r3, r2
 8004162:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004166:	653b      	str	r3, [r7, #80]	; 0x50
 8004168:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800416c:	b29a      	uxth	r2, r3
 800416e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004170:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	6959      	ldr	r1, [r3, #20]
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	895a      	ldrh	r2, [r3, #10]
 800417e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004182:	b29b      	uxth	r3, r3
 8004184:	f003 fa3a 	bl	80075fc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4413      	add	r3, r2
 8004196:	881b      	ldrh	r3, [r3, #0]
 8004198:	b29b      	uxth	r3, r3
 800419a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800419e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041a2:	82bb      	strh	r3, [r7, #20]
 80041a4:	8abb      	ldrh	r3, [r7, #20]
 80041a6:	f083 0310 	eor.w	r3, r3, #16
 80041aa:	82bb      	strh	r3, [r7, #20]
 80041ac:	8abb      	ldrh	r3, [r7, #20]
 80041ae:	f083 0320 	eor.w	r3, r3, #32
 80041b2:	82bb      	strh	r3, [r7, #20]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	461a      	mov	r2, r3
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	441a      	add	r2, r3
 80041c2:	8abb      	ldrh	r3, [r7, #20]
 80041c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3790      	adds	r7, #144	; 0x90
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b087      	sub	sp, #28
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	60f8      	str	r0, [r7, #12]
 80041ea:	607b      	str	r3, [r7, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	817b      	strh	r3, [r7, #10]
 80041f0:	4613      	mov	r3, r2
 80041f2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80041f4:	897b      	ldrh	r3, [r7, #10]
 80041f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00b      	beq.n	8004218 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004200:	897b      	ldrh	r3, [r7, #10]
 8004202:	f003 0207 	and.w	r2, r3, #7
 8004206:	4613      	mov	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	3310      	adds	r3, #16
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	4413      	add	r3, r2
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	e009      	b.n	800422c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004218:	897a      	ldrh	r2, [r7, #10]
 800421a:	4613      	mov	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4413      	add	r3, r2
 800422a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800422c:	893b      	ldrh	r3, [r7, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d107      	bne.n	8004242 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	2200      	movs	r2, #0
 8004236:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	b29a      	uxth	r2, r3
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	80da      	strh	r2, [r3, #6]
 8004240:	e00b      	b.n	800425a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2201      	movs	r2, #1
 8004246:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	b29a      	uxth	r2, r3
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	0c1b      	lsrs	r3, r3, #16
 8004254:	b29a      	uxth	r2, r3
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	371c      	adds	r7, #28
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	4770      	bx	lr
	...

08004268 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e26c      	b.n	8004754 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 8087 	beq.w	8004396 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004288:	4b92      	ldr	r3, [pc, #584]	; (80044d4 <HAL_RCC_OscConfig+0x26c>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f003 030c 	and.w	r3, r3, #12
 8004290:	2b04      	cmp	r3, #4
 8004292:	d00c      	beq.n	80042ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004294:	4b8f      	ldr	r3, [pc, #572]	; (80044d4 <HAL_RCC_OscConfig+0x26c>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 030c 	and.w	r3, r3, #12
 800429c:	2b08      	cmp	r3, #8
 800429e:	d112      	bne.n	80042c6 <HAL_RCC_OscConfig+0x5e>
 80042a0:	4b8c      	ldr	r3, [pc, #560]	; (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ac:	d10b      	bne.n	80042c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ae:	4b89      	ldr	r3, [pc, #548]	; (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d06c      	beq.n	8004394 <HAL_RCC_OscConfig+0x12c>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d168      	bne.n	8004394 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e246      	b.n	8004754 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ce:	d106      	bne.n	80042de <HAL_RCC_OscConfig+0x76>
 80042d0:	4b80      	ldr	r3, [pc, #512]	; (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a7f      	ldr	r2, [pc, #508]	; (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80042d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	e02e      	b.n	800433c <HAL_RCC_OscConfig+0xd4>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10c      	bne.n	8004300 <HAL_RCC_OscConfig+0x98>
 80042e6:	4b7b      	ldr	r3, [pc, #492]	; (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a7a      	ldr	r2, [pc, #488]	; (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80042ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	4b78      	ldr	r3, [pc, #480]	; (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a77      	ldr	r2, [pc, #476]	; (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80042f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	e01d      	b.n	800433c <HAL_RCC_OscConfig+0xd4>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004308:	d10c      	bne.n	8004324 <HAL_RCC_OscConfig+0xbc>
 800430a:	4b72      	ldr	r3, [pc, #456]	; (80044d4 <HAL_RCC_OscConfig+0x26c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a71      	ldr	r2, [pc, #452]	; (80044d4 <HAL_RCC_OscConfig+0x26c>)
 8004310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	4b6f      	ldr	r3, [pc, #444]	; (80044d4 <HAL_RCC_OscConfig+0x26c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a6e      	ldr	r2, [pc, #440]	; (80044d4 <HAL_RCC_OscConfig+0x26c>)
 800431c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	e00b      	b.n	800433c <HAL_RCC_OscConfig+0xd4>
 8004324:	4b6b      	ldr	r3, [pc, #428]	; (80044d4 <HAL_RCC_OscConfig+0x26c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a6a      	ldr	r2, [pc, #424]	; (80044d4 <HAL_RCC_OscConfig+0x26c>)
 800432a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	4b68      	ldr	r3, [pc, #416]	; (80044d4 <HAL_RCC_OscConfig+0x26c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a67      	ldr	r2, [pc, #412]	; (80044d4 <HAL_RCC_OscConfig+0x26c>)
 8004336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800433a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d013      	beq.n	800436c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004344:	f7fd faa0 	bl	8001888 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800434c:	f7fd fa9c 	bl	8001888 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b64      	cmp	r3, #100	; 0x64
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e1fa      	b.n	8004754 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435e:	4b5d      	ldr	r3, [pc, #372]	; (80044d4 <HAL_RCC_OscConfig+0x26c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0f0      	beq.n	800434c <HAL_RCC_OscConfig+0xe4>
 800436a:	e014      	b.n	8004396 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800436c:	f7fd fa8c 	bl	8001888 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004374:	f7fd fa88 	bl	8001888 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b64      	cmp	r3, #100	; 0x64
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e1e6      	b.n	8004754 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004386:	4b53      	ldr	r3, [pc, #332]	; (80044d4 <HAL_RCC_OscConfig+0x26c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1f0      	bne.n	8004374 <HAL_RCC_OscConfig+0x10c>
 8004392:	e000      	b.n	8004396 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d063      	beq.n	800446a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043a2:	4b4c      	ldr	r3, [pc, #304]	; (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f003 030c 	and.w	r3, r3, #12
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00b      	beq.n	80043c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043ae:	4b49      	ldr	r3, [pc, #292]	; (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f003 030c 	and.w	r3, r3, #12
 80043b6:	2b08      	cmp	r3, #8
 80043b8:	d11c      	bne.n	80043f4 <HAL_RCC_OscConfig+0x18c>
 80043ba:	4b46      	ldr	r3, [pc, #280]	; (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d116      	bne.n	80043f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c6:	4b43      	ldr	r3, [pc, #268]	; (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d005      	beq.n	80043de <HAL_RCC_OscConfig+0x176>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d001      	beq.n	80043de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e1ba      	b.n	8004754 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043de:	4b3d      	ldr	r3, [pc, #244]	; (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	4939      	ldr	r1, [pc, #228]	; (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043f2:	e03a      	b.n	800446a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d020      	beq.n	800443e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043fc:	4b36      	ldr	r3, [pc, #216]	; (80044d8 <HAL_RCC_OscConfig+0x270>)
 80043fe:	2201      	movs	r2, #1
 8004400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004402:	f7fd fa41 	bl	8001888 <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004408:	e008      	b.n	800441c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800440a:	f7fd fa3d 	bl	8001888 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e19b      	b.n	8004754 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800441c:	4b2d      	ldr	r3, [pc, #180]	; (80044d4 <HAL_RCC_OscConfig+0x26c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0f0      	beq.n	800440a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004428:	4b2a      	ldr	r3, [pc, #168]	; (80044d4 <HAL_RCC_OscConfig+0x26c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	4927      	ldr	r1, [pc, #156]	; (80044d4 <HAL_RCC_OscConfig+0x26c>)
 8004438:	4313      	orrs	r3, r2
 800443a:	600b      	str	r3, [r1, #0]
 800443c:	e015      	b.n	800446a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800443e:	4b26      	ldr	r3, [pc, #152]	; (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004444:	f7fd fa20 	bl	8001888 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800444c:	f7fd fa1c 	bl	8001888 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e17a      	b.n	8004754 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800445e:	4b1d      	ldr	r3, [pc, #116]	; (80044d4 <HAL_RCC_OscConfig+0x26c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1f0      	bne.n	800444c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0308 	and.w	r3, r3, #8
 8004472:	2b00      	cmp	r3, #0
 8004474:	d03a      	beq.n	80044ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d019      	beq.n	80044b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800447e:	4b17      	ldr	r3, [pc, #92]	; (80044dc <HAL_RCC_OscConfig+0x274>)
 8004480:	2201      	movs	r2, #1
 8004482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004484:	f7fd fa00 	bl	8001888 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800448c:	f7fd f9fc 	bl	8001888 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e15a      	b.n	8004754 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800449e:	4b0d      	ldr	r3, [pc, #52]	; (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0f0      	beq.n	800448c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044aa:	2001      	movs	r0, #1
 80044ac:	f000 fab8 	bl	8004a20 <RCC_Delay>
 80044b0:	e01c      	b.n	80044ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044b2:	4b0a      	ldr	r3, [pc, #40]	; (80044dc <HAL_RCC_OscConfig+0x274>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044b8:	f7fd f9e6 	bl	8001888 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044be:	e00f      	b.n	80044e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044c0:	f7fd f9e2 	bl	8001888 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d908      	bls.n	80044e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e140      	b.n	8004754 <HAL_RCC_OscConfig+0x4ec>
 80044d2:	bf00      	nop
 80044d4:	40021000 	.word	0x40021000
 80044d8:	42420000 	.word	0x42420000
 80044dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044e0:	4b9e      	ldr	r3, [pc, #632]	; (800475c <HAL_RCC_OscConfig+0x4f4>)
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e9      	bne.n	80044c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0304 	and.w	r3, r3, #4
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 80a6 	beq.w	8004646 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044fa:	2300      	movs	r3, #0
 80044fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044fe:	4b97      	ldr	r3, [pc, #604]	; (800475c <HAL_RCC_OscConfig+0x4f4>)
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10d      	bne.n	8004526 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800450a:	4b94      	ldr	r3, [pc, #592]	; (800475c <HAL_RCC_OscConfig+0x4f4>)
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	4a93      	ldr	r2, [pc, #588]	; (800475c <HAL_RCC_OscConfig+0x4f4>)
 8004510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004514:	61d3      	str	r3, [r2, #28]
 8004516:	4b91      	ldr	r3, [pc, #580]	; (800475c <HAL_RCC_OscConfig+0x4f4>)
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451e:	60bb      	str	r3, [r7, #8]
 8004520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004522:	2301      	movs	r3, #1
 8004524:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004526:	4b8e      	ldr	r3, [pc, #568]	; (8004760 <HAL_RCC_OscConfig+0x4f8>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452e:	2b00      	cmp	r3, #0
 8004530:	d118      	bne.n	8004564 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004532:	4b8b      	ldr	r3, [pc, #556]	; (8004760 <HAL_RCC_OscConfig+0x4f8>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a8a      	ldr	r2, [pc, #552]	; (8004760 <HAL_RCC_OscConfig+0x4f8>)
 8004538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800453c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800453e:	f7fd f9a3 	bl	8001888 <HAL_GetTick>
 8004542:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004544:	e008      	b.n	8004558 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004546:	f7fd f99f 	bl	8001888 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b64      	cmp	r3, #100	; 0x64
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e0fd      	b.n	8004754 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004558:	4b81      	ldr	r3, [pc, #516]	; (8004760 <HAL_RCC_OscConfig+0x4f8>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0f0      	beq.n	8004546 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d106      	bne.n	800457a <HAL_RCC_OscConfig+0x312>
 800456c:	4b7b      	ldr	r3, [pc, #492]	; (800475c <HAL_RCC_OscConfig+0x4f4>)
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	4a7a      	ldr	r2, [pc, #488]	; (800475c <HAL_RCC_OscConfig+0x4f4>)
 8004572:	f043 0301 	orr.w	r3, r3, #1
 8004576:	6213      	str	r3, [r2, #32]
 8004578:	e02d      	b.n	80045d6 <HAL_RCC_OscConfig+0x36e>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10c      	bne.n	800459c <HAL_RCC_OscConfig+0x334>
 8004582:	4b76      	ldr	r3, [pc, #472]	; (800475c <HAL_RCC_OscConfig+0x4f4>)
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	4a75      	ldr	r2, [pc, #468]	; (800475c <HAL_RCC_OscConfig+0x4f4>)
 8004588:	f023 0301 	bic.w	r3, r3, #1
 800458c:	6213      	str	r3, [r2, #32]
 800458e:	4b73      	ldr	r3, [pc, #460]	; (800475c <HAL_RCC_OscConfig+0x4f4>)
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	4a72      	ldr	r2, [pc, #456]	; (800475c <HAL_RCC_OscConfig+0x4f4>)
 8004594:	f023 0304 	bic.w	r3, r3, #4
 8004598:	6213      	str	r3, [r2, #32]
 800459a:	e01c      	b.n	80045d6 <HAL_RCC_OscConfig+0x36e>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	2b05      	cmp	r3, #5
 80045a2:	d10c      	bne.n	80045be <HAL_RCC_OscConfig+0x356>
 80045a4:	4b6d      	ldr	r3, [pc, #436]	; (800475c <HAL_RCC_OscConfig+0x4f4>)
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	4a6c      	ldr	r2, [pc, #432]	; (800475c <HAL_RCC_OscConfig+0x4f4>)
 80045aa:	f043 0304 	orr.w	r3, r3, #4
 80045ae:	6213      	str	r3, [r2, #32]
 80045b0:	4b6a      	ldr	r3, [pc, #424]	; (800475c <HAL_RCC_OscConfig+0x4f4>)
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	4a69      	ldr	r2, [pc, #420]	; (800475c <HAL_RCC_OscConfig+0x4f4>)
 80045b6:	f043 0301 	orr.w	r3, r3, #1
 80045ba:	6213      	str	r3, [r2, #32]
 80045bc:	e00b      	b.n	80045d6 <HAL_RCC_OscConfig+0x36e>
 80045be:	4b67      	ldr	r3, [pc, #412]	; (800475c <HAL_RCC_OscConfig+0x4f4>)
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	4a66      	ldr	r2, [pc, #408]	; (800475c <HAL_RCC_OscConfig+0x4f4>)
 80045c4:	f023 0301 	bic.w	r3, r3, #1
 80045c8:	6213      	str	r3, [r2, #32]
 80045ca:	4b64      	ldr	r3, [pc, #400]	; (800475c <HAL_RCC_OscConfig+0x4f4>)
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	4a63      	ldr	r2, [pc, #396]	; (800475c <HAL_RCC_OscConfig+0x4f4>)
 80045d0:	f023 0304 	bic.w	r3, r3, #4
 80045d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d015      	beq.n	800460a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045de:	f7fd f953 	bl	8001888 <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e4:	e00a      	b.n	80045fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e6:	f7fd f94f 	bl	8001888 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e0ab      	b.n	8004754 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045fc:	4b57      	ldr	r3, [pc, #348]	; (800475c <HAL_RCC_OscConfig+0x4f4>)
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0ee      	beq.n	80045e6 <HAL_RCC_OscConfig+0x37e>
 8004608:	e014      	b.n	8004634 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800460a:	f7fd f93d 	bl	8001888 <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004610:	e00a      	b.n	8004628 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004612:	f7fd f939 	bl	8001888 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004620:	4293      	cmp	r3, r2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e095      	b.n	8004754 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004628:	4b4c      	ldr	r3, [pc, #304]	; (800475c <HAL_RCC_OscConfig+0x4f4>)
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1ee      	bne.n	8004612 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004634:	7dfb      	ldrb	r3, [r7, #23]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d105      	bne.n	8004646 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800463a:	4b48      	ldr	r3, [pc, #288]	; (800475c <HAL_RCC_OscConfig+0x4f4>)
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	4a47      	ldr	r2, [pc, #284]	; (800475c <HAL_RCC_OscConfig+0x4f4>)
 8004640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004644:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	2b00      	cmp	r3, #0
 800464c:	f000 8081 	beq.w	8004752 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004650:	4b42      	ldr	r3, [pc, #264]	; (800475c <HAL_RCC_OscConfig+0x4f4>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f003 030c 	and.w	r3, r3, #12
 8004658:	2b08      	cmp	r3, #8
 800465a:	d061      	beq.n	8004720 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	2b02      	cmp	r3, #2
 8004662:	d146      	bne.n	80046f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004664:	4b3f      	ldr	r3, [pc, #252]	; (8004764 <HAL_RCC_OscConfig+0x4fc>)
 8004666:	2200      	movs	r2, #0
 8004668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800466a:	f7fd f90d 	bl	8001888 <HAL_GetTick>
 800466e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004670:	e008      	b.n	8004684 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004672:	f7fd f909 	bl	8001888 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d901      	bls.n	8004684 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e067      	b.n	8004754 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004684:	4b35      	ldr	r3, [pc, #212]	; (800475c <HAL_RCC_OscConfig+0x4f4>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1f0      	bne.n	8004672 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004698:	d108      	bne.n	80046ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800469a:	4b30      	ldr	r3, [pc, #192]	; (800475c <HAL_RCC_OscConfig+0x4f4>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	492d      	ldr	r1, [pc, #180]	; (800475c <HAL_RCC_OscConfig+0x4f4>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046ac:	4b2b      	ldr	r3, [pc, #172]	; (800475c <HAL_RCC_OscConfig+0x4f4>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a19      	ldr	r1, [r3, #32]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	430b      	orrs	r3, r1
 80046be:	4927      	ldr	r1, [pc, #156]	; (800475c <HAL_RCC_OscConfig+0x4f4>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046c4:	4b27      	ldr	r3, [pc, #156]	; (8004764 <HAL_RCC_OscConfig+0x4fc>)
 80046c6:	2201      	movs	r2, #1
 80046c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ca:	f7fd f8dd 	bl	8001888 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d2:	f7fd f8d9 	bl	8001888 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e037      	b.n	8004754 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046e4:	4b1d      	ldr	r3, [pc, #116]	; (800475c <HAL_RCC_OscConfig+0x4f4>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0f0      	beq.n	80046d2 <HAL_RCC_OscConfig+0x46a>
 80046f0:	e02f      	b.n	8004752 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f2:	4b1c      	ldr	r3, [pc, #112]	; (8004764 <HAL_RCC_OscConfig+0x4fc>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f8:	f7fd f8c6 	bl	8001888 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004700:	f7fd f8c2 	bl	8001888 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e020      	b.n	8004754 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004712:	4b12      	ldr	r3, [pc, #72]	; (800475c <HAL_RCC_OscConfig+0x4f4>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1f0      	bne.n	8004700 <HAL_RCC_OscConfig+0x498>
 800471e:	e018      	b.n	8004752 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	69db      	ldr	r3, [r3, #28]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d101      	bne.n	800472c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e013      	b.n	8004754 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800472c:	4b0b      	ldr	r3, [pc, #44]	; (800475c <HAL_RCC_OscConfig+0x4f4>)
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	429a      	cmp	r2, r3
 800473e:	d106      	bne.n	800474e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800474a:	429a      	cmp	r2, r3
 800474c:	d001      	beq.n	8004752 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3718      	adds	r7, #24
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	40021000 	.word	0x40021000
 8004760:	40007000 	.word	0x40007000
 8004764:	42420060 	.word	0x42420060

08004768 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e0d0      	b.n	800491e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800477c:	4b6a      	ldr	r3, [pc, #424]	; (8004928 <HAL_RCC_ClockConfig+0x1c0>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0307 	and.w	r3, r3, #7
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	429a      	cmp	r2, r3
 8004788:	d910      	bls.n	80047ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478a:	4b67      	ldr	r3, [pc, #412]	; (8004928 <HAL_RCC_ClockConfig+0x1c0>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f023 0207 	bic.w	r2, r3, #7
 8004792:	4965      	ldr	r1, [pc, #404]	; (8004928 <HAL_RCC_ClockConfig+0x1c0>)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	4313      	orrs	r3, r2
 8004798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800479a:	4b63      	ldr	r3, [pc, #396]	; (8004928 <HAL_RCC_ClockConfig+0x1c0>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d001      	beq.n	80047ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e0b8      	b.n	800491e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d020      	beq.n	80047fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d005      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047c4:	4b59      	ldr	r3, [pc, #356]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	4a58      	ldr	r2, [pc, #352]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 80047ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0308 	and.w	r3, r3, #8
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047dc:	4b53      	ldr	r3, [pc, #332]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	4a52      	ldr	r2, [pc, #328]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 80047e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80047e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047e8:	4b50      	ldr	r3, [pc, #320]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	494d      	ldr	r1, [pc, #308]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d040      	beq.n	8004888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d107      	bne.n	800481e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800480e:	4b47      	ldr	r3, [pc, #284]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d115      	bne.n	8004846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e07f      	b.n	800491e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d107      	bne.n	8004836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004826:	4b41      	ldr	r3, [pc, #260]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d109      	bne.n	8004846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e073      	b.n	800491e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004836:	4b3d      	ldr	r3, [pc, #244]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e06b      	b.n	800491e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004846:	4b39      	ldr	r3, [pc, #228]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f023 0203 	bic.w	r2, r3, #3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	4936      	ldr	r1, [pc, #216]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 8004854:	4313      	orrs	r3, r2
 8004856:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004858:	f7fd f816 	bl	8001888 <HAL_GetTick>
 800485c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800485e:	e00a      	b.n	8004876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004860:	f7fd f812 	bl	8001888 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	f241 3288 	movw	r2, #5000	; 0x1388
 800486e:	4293      	cmp	r3, r2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e053      	b.n	800491e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004876:	4b2d      	ldr	r3, [pc, #180]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f003 020c 	and.w	r2, r3, #12
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	429a      	cmp	r2, r3
 8004886:	d1eb      	bne.n	8004860 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004888:	4b27      	ldr	r3, [pc, #156]	; (8004928 <HAL_RCC_ClockConfig+0x1c0>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0307 	and.w	r3, r3, #7
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d210      	bcs.n	80048b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004896:	4b24      	ldr	r3, [pc, #144]	; (8004928 <HAL_RCC_ClockConfig+0x1c0>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f023 0207 	bic.w	r2, r3, #7
 800489e:	4922      	ldr	r1, [pc, #136]	; (8004928 <HAL_RCC_ClockConfig+0x1c0>)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a6:	4b20      	ldr	r3, [pc, #128]	; (8004928 <HAL_RCC_ClockConfig+0x1c0>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0307 	and.w	r3, r3, #7
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d001      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e032      	b.n	800491e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d008      	beq.n	80048d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048c4:	4b19      	ldr	r3, [pc, #100]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	4916      	ldr	r1, [pc, #88]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0308 	and.w	r3, r3, #8
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d009      	beq.n	80048f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048e2:	4b12      	ldr	r3, [pc, #72]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	490e      	ldr	r1, [pc, #56]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048f6:	f000 f821 	bl	800493c <HAL_RCC_GetSysClockFreq>
 80048fa:	4602      	mov	r2, r0
 80048fc:	4b0b      	ldr	r3, [pc, #44]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	091b      	lsrs	r3, r3, #4
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	490a      	ldr	r1, [pc, #40]	; (8004930 <HAL_RCC_ClockConfig+0x1c8>)
 8004908:	5ccb      	ldrb	r3, [r1, r3]
 800490a:	fa22 f303 	lsr.w	r3, r2, r3
 800490e:	4a09      	ldr	r2, [pc, #36]	; (8004934 <HAL_RCC_ClockConfig+0x1cc>)
 8004910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004912:	4b09      	ldr	r3, [pc, #36]	; (8004938 <HAL_RCC_ClockConfig+0x1d0>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4618      	mov	r0, r3
 8004918:	f7fc ff74 	bl	8001804 <HAL_InitTick>

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	40022000 	.word	0x40022000
 800492c:	40021000 	.word	0x40021000
 8004930:	0800a03c 	.word	0x0800a03c
 8004934:	200000d8 	.word	0x200000d8
 8004938:	200000dc 	.word	0x200000dc

0800493c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800493c:	b480      	push	{r7}
 800493e:	b087      	sub	sp, #28
 8004940:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004942:	2300      	movs	r3, #0
 8004944:	60fb      	str	r3, [r7, #12]
 8004946:	2300      	movs	r3, #0
 8004948:	60bb      	str	r3, [r7, #8]
 800494a:	2300      	movs	r3, #0
 800494c:	617b      	str	r3, [r7, #20]
 800494e:	2300      	movs	r3, #0
 8004950:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004956:	4b1e      	ldr	r3, [pc, #120]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f003 030c 	and.w	r3, r3, #12
 8004962:	2b04      	cmp	r3, #4
 8004964:	d002      	beq.n	800496c <HAL_RCC_GetSysClockFreq+0x30>
 8004966:	2b08      	cmp	r3, #8
 8004968:	d003      	beq.n	8004972 <HAL_RCC_GetSysClockFreq+0x36>
 800496a:	e027      	b.n	80049bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800496c:	4b19      	ldr	r3, [pc, #100]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800496e:	613b      	str	r3, [r7, #16]
      break;
 8004970:	e027      	b.n	80049c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	0c9b      	lsrs	r3, r3, #18
 8004976:	f003 030f 	and.w	r3, r3, #15
 800497a:	4a17      	ldr	r2, [pc, #92]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800497c:	5cd3      	ldrb	r3, [r2, r3]
 800497e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d010      	beq.n	80049ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800498a:	4b11      	ldr	r3, [pc, #68]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	0c5b      	lsrs	r3, r3, #17
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	4a11      	ldr	r2, [pc, #68]	; (80049dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004996:	5cd3      	ldrb	r3, [r2, r3]
 8004998:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a0d      	ldr	r2, [pc, #52]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800499e:	fb02 f203 	mul.w	r2, r2, r3
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a8:	617b      	str	r3, [r7, #20]
 80049aa:	e004      	b.n	80049b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a0c      	ldr	r2, [pc, #48]	; (80049e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80049b0:	fb02 f303 	mul.w	r3, r2, r3
 80049b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	613b      	str	r3, [r7, #16]
      break;
 80049ba:	e002      	b.n	80049c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049bc:	4b05      	ldr	r3, [pc, #20]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80049be:	613b      	str	r3, [r7, #16]
      break;
 80049c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049c2:	693b      	ldr	r3, [r7, #16]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	371c      	adds	r7, #28
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bc80      	pop	{r7}
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40021000 	.word	0x40021000
 80049d4:	007a1200 	.word	0x007a1200
 80049d8:	0800a054 	.word	0x0800a054
 80049dc:	0800a064 	.word	0x0800a064
 80049e0:	003d0900 	.word	0x003d0900

080049e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049e8:	4b02      	ldr	r3, [pc, #8]	; (80049f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80049ea:	681b      	ldr	r3, [r3, #0]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bc80      	pop	{r7}
 80049f2:	4770      	bx	lr
 80049f4:	200000d8 	.word	0x200000d8

080049f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049fc:	f7ff fff2 	bl	80049e4 <HAL_RCC_GetHCLKFreq>
 8004a00:	4602      	mov	r2, r0
 8004a02:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	0a1b      	lsrs	r3, r3, #8
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	4903      	ldr	r1, [pc, #12]	; (8004a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a0e:	5ccb      	ldrb	r3, [r1, r3]
 8004a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	0800a04c 	.word	0x0800a04c

08004a20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a28:	4b0a      	ldr	r3, [pc, #40]	; (8004a54 <RCC_Delay+0x34>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a0a      	ldr	r2, [pc, #40]	; (8004a58 <RCC_Delay+0x38>)
 8004a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a32:	0a5b      	lsrs	r3, r3, #9
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	fb02 f303 	mul.w	r3, r2, r3
 8004a3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a3c:	bf00      	nop
  }
  while (Delay --);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	1e5a      	subs	r2, r3, #1
 8004a42:	60fa      	str	r2, [r7, #12]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1f9      	bne.n	8004a3c <RCC_Delay+0x1c>
}
 8004a48:	bf00      	nop
 8004a4a:	bf00      	nop
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bc80      	pop	{r7}
 8004a52:	4770      	bx	lr
 8004a54:	200000d8 	.word	0x200000d8
 8004a58:	10624dd3 	.word	0x10624dd3

08004a5c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004a64:	2300      	movs	r3, #0
 8004a66:	613b      	str	r3, [r7, #16]
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d07d      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a7c:	4b4f      	ldr	r3, [pc, #316]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10d      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a88:	4b4c      	ldr	r3, [pc, #304]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a8a:	69db      	ldr	r3, [r3, #28]
 8004a8c:	4a4b      	ldr	r2, [pc, #300]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a92:	61d3      	str	r3, [r2, #28]
 8004a94:	4b49      	ldr	r3, [pc, #292]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a9c:	60bb      	str	r3, [r7, #8]
 8004a9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aa4:	4b46      	ldr	r3, [pc, #280]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d118      	bne.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ab0:	4b43      	ldr	r3, [pc, #268]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a42      	ldr	r2, [pc, #264]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004abc:	f7fc fee4 	bl	8001888 <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ac4:	f7fc fee0 	bl	8001888 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b64      	cmp	r3, #100	; 0x64
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e06d      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad6:	4b3a      	ldr	r3, [pc, #232]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0f0      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ae2:	4b36      	ldr	r3, [pc, #216]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d02e      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d027      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b00:	4b2e      	ldr	r3, [pc, #184]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b08:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b0a:	4b2e      	ldr	r3, [pc, #184]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b10:	4b2c      	ldr	r3, [pc, #176]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b16:	4a29      	ldr	r2, [pc, #164]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d014      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b26:	f7fc feaf 	bl	8001888 <HAL_GetTick>
 8004b2a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b2c:	e00a      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b2e:	f7fc feab 	bl	8001888 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e036      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b44:	4b1d      	ldr	r3, [pc, #116]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0ee      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b50:	4b1a      	ldr	r3, [pc, #104]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	4917      	ldr	r1, [pc, #92]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b62:	7dfb      	ldrb	r3, [r7, #23]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d105      	bne.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b68:	4b14      	ldr	r3, [pc, #80]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	4a13      	ldr	r2, [pc, #76]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b72:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d008      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b80:	4b0e      	ldr	r3, [pc, #56]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	490b      	ldr	r1, [pc, #44]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0310 	and.w	r3, r3, #16
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d008      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b9e:	4b07      	ldr	r3, [pc, #28]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	4904      	ldr	r1, [pc, #16]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3718      	adds	r7, #24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	40007000 	.word	0x40007000
 8004bc4:	42420440 	.word	0x42420440

08004bc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e041      	b.n	8004c5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d106      	bne.n	8004bf4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fc fca2 	bl	8001538 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	3304      	adds	r3, #4
 8004c04:	4619      	mov	r1, r3
 8004c06:	4610      	mov	r0, r2
 8004c08:	f000 f992 	bl	8004f30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
	...

08004c68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d109      	bne.n	8004c8c <HAL_TIM_PWM_Start+0x24>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	bf14      	ite	ne
 8004c84:	2301      	movne	r3, #1
 8004c86:	2300      	moveq	r3, #0
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	e022      	b.n	8004cd2 <HAL_TIM_PWM_Start+0x6a>
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	2b04      	cmp	r3, #4
 8004c90:	d109      	bne.n	8004ca6 <HAL_TIM_PWM_Start+0x3e>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	bf14      	ite	ne
 8004c9e:	2301      	movne	r3, #1
 8004ca0:	2300      	moveq	r3, #0
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	e015      	b.n	8004cd2 <HAL_TIM_PWM_Start+0x6a>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d109      	bne.n	8004cc0 <HAL_TIM_PWM_Start+0x58>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	bf14      	ite	ne
 8004cb8:	2301      	movne	r3, #1
 8004cba:	2300      	moveq	r3, #0
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	e008      	b.n	8004cd2 <HAL_TIM_PWM_Start+0x6a>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	bf14      	ite	ne
 8004ccc:	2301      	movne	r3, #1
 8004cce:	2300      	moveq	r3, #0
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e05e      	b.n	8004d98 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d104      	bne.n	8004cea <HAL_TIM_PWM_Start+0x82>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ce8:	e013      	b.n	8004d12 <HAL_TIM_PWM_Start+0xaa>
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b04      	cmp	r3, #4
 8004cee:	d104      	bne.n	8004cfa <HAL_TIM_PWM_Start+0x92>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cf8:	e00b      	b.n	8004d12 <HAL_TIM_PWM_Start+0xaa>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b08      	cmp	r3, #8
 8004cfe:	d104      	bne.n	8004d0a <HAL_TIM_PWM_Start+0xa2>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2202      	movs	r2, #2
 8004d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d08:	e003      	b.n	8004d12 <HAL_TIM_PWM_Start+0xaa>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2202      	movs	r2, #2
 8004d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2201      	movs	r2, #1
 8004d18:	6839      	ldr	r1, [r7, #0]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 fafe 	bl	800531c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a1e      	ldr	r2, [pc, #120]	; (8004da0 <HAL_TIM_PWM_Start+0x138>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d107      	bne.n	8004d3a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a18      	ldr	r2, [pc, #96]	; (8004da0 <HAL_TIM_PWM_Start+0x138>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d00e      	beq.n	8004d62 <HAL_TIM_PWM_Start+0xfa>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d4c:	d009      	beq.n	8004d62 <HAL_TIM_PWM_Start+0xfa>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a14      	ldr	r2, [pc, #80]	; (8004da4 <HAL_TIM_PWM_Start+0x13c>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d004      	beq.n	8004d62 <HAL_TIM_PWM_Start+0xfa>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a12      	ldr	r2, [pc, #72]	; (8004da8 <HAL_TIM_PWM_Start+0x140>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d111      	bne.n	8004d86 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2b06      	cmp	r3, #6
 8004d72:	d010      	beq.n	8004d96 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f042 0201 	orr.w	r2, r2, #1
 8004d82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d84:	e007      	b.n	8004d96 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f042 0201 	orr.w	r2, r2, #1
 8004d94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	40012c00 	.word	0x40012c00
 8004da4:	40000400 	.word	0x40000400
 8004da8:	40000800 	.word	0x40000800

08004dac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004db8:	2300      	movs	r3, #0
 8004dba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d101      	bne.n	8004dca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	e0ae      	b.n	8004f28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b0c      	cmp	r3, #12
 8004dd6:	f200 809f 	bhi.w	8004f18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004dda:	a201      	add	r2, pc, #4	; (adr r2, 8004de0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de0:	08004e15 	.word	0x08004e15
 8004de4:	08004f19 	.word	0x08004f19
 8004de8:	08004f19 	.word	0x08004f19
 8004dec:	08004f19 	.word	0x08004f19
 8004df0:	08004e55 	.word	0x08004e55
 8004df4:	08004f19 	.word	0x08004f19
 8004df8:	08004f19 	.word	0x08004f19
 8004dfc:	08004f19 	.word	0x08004f19
 8004e00:	08004e97 	.word	0x08004e97
 8004e04:	08004f19 	.word	0x08004f19
 8004e08:	08004f19 	.word	0x08004f19
 8004e0c:	08004f19 	.word	0x08004f19
 8004e10:	08004ed7 	.word	0x08004ed7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68b9      	ldr	r1, [r7, #8]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 f8f6 	bl	800500c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	699a      	ldr	r2, [r3, #24]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f042 0208 	orr.w	r2, r2, #8
 8004e2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	699a      	ldr	r2, [r3, #24]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 0204 	bic.w	r2, r2, #4
 8004e3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6999      	ldr	r1, [r3, #24]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	691a      	ldr	r2, [r3, #16]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	619a      	str	r2, [r3, #24]
      break;
 8004e52:	e064      	b.n	8004f1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68b9      	ldr	r1, [r7, #8]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 f93c 	bl	80050d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	699a      	ldr	r2, [r3, #24]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699a      	ldr	r2, [r3, #24]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6999      	ldr	r1, [r3, #24]
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	021a      	lsls	r2, r3, #8
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	619a      	str	r2, [r3, #24]
      break;
 8004e94:	e043      	b.n	8004f1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68b9      	ldr	r1, [r7, #8]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 f985 	bl	80051ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	69da      	ldr	r2, [r3, #28]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f042 0208 	orr.w	r2, r2, #8
 8004eb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	69da      	ldr	r2, [r3, #28]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 0204 	bic.w	r2, r2, #4
 8004ec0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69d9      	ldr	r1, [r3, #28]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	691a      	ldr	r2, [r3, #16]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	61da      	str	r2, [r3, #28]
      break;
 8004ed4:	e023      	b.n	8004f1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68b9      	ldr	r1, [r7, #8]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 f9cf 	bl	8005280 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	69da      	ldr	r2, [r3, #28]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ef0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	69da      	ldr	r2, [r3, #28]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	69d9      	ldr	r1, [r3, #28]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	021a      	lsls	r2, r3, #8
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	61da      	str	r2, [r3, #28]
      break;
 8004f16:	e002      	b.n	8004f1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3718      	adds	r7, #24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a2f      	ldr	r2, [pc, #188]	; (8005000 <TIM_Base_SetConfig+0xd0>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00b      	beq.n	8004f60 <TIM_Base_SetConfig+0x30>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f4e:	d007      	beq.n	8004f60 <TIM_Base_SetConfig+0x30>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a2c      	ldr	r2, [pc, #176]	; (8005004 <TIM_Base_SetConfig+0xd4>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d003      	beq.n	8004f60 <TIM_Base_SetConfig+0x30>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a2b      	ldr	r2, [pc, #172]	; (8005008 <TIM_Base_SetConfig+0xd8>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d108      	bne.n	8004f72 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a22      	ldr	r2, [pc, #136]	; (8005000 <TIM_Base_SetConfig+0xd0>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d00b      	beq.n	8004f92 <TIM_Base_SetConfig+0x62>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f80:	d007      	beq.n	8004f92 <TIM_Base_SetConfig+0x62>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a1f      	ldr	r2, [pc, #124]	; (8005004 <TIM_Base_SetConfig+0xd4>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d003      	beq.n	8004f92 <TIM_Base_SetConfig+0x62>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a1e      	ldr	r2, [pc, #120]	; (8005008 <TIM_Base_SetConfig+0xd8>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d108      	bne.n	8004fa4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a0d      	ldr	r2, [pc, #52]	; (8005000 <TIM_Base_SetConfig+0xd0>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d103      	bne.n	8004fd8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	691a      	ldr	r2, [r3, #16]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d005      	beq.n	8004ff6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	f023 0201 	bic.w	r2, r3, #1
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	611a      	str	r2, [r3, #16]
  }
}
 8004ff6:	bf00      	nop
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bc80      	pop	{r7}
 8004ffe:	4770      	bx	lr
 8005000:	40012c00 	.word	0x40012c00
 8005004:	40000400 	.word	0x40000400
 8005008:	40000800 	.word	0x40000800

0800500c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800500c:	b480      	push	{r7}
 800500e:	b087      	sub	sp, #28
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	f023 0201 	bic.w	r2, r3, #1
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f023 0303 	bic.w	r3, r3, #3
 8005042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	4313      	orrs	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f023 0302 	bic.w	r3, r3, #2
 8005054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	4313      	orrs	r3, r2
 800505e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a1c      	ldr	r2, [pc, #112]	; (80050d4 <TIM_OC1_SetConfig+0xc8>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d10c      	bne.n	8005082 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f023 0308 	bic.w	r3, r3, #8
 800506e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	4313      	orrs	r3, r2
 8005078:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f023 0304 	bic.w	r3, r3, #4
 8005080:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a13      	ldr	r2, [pc, #76]	; (80050d4 <TIM_OC1_SetConfig+0xc8>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d111      	bne.n	80050ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005090:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005098:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	621a      	str	r2, [r3, #32]
}
 80050c8:	bf00      	nop
 80050ca:	371c      	adds	r7, #28
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bc80      	pop	{r7}
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	40012c00 	.word	0x40012c00

080050d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	f023 0210 	bic.w	r2, r3, #16
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800510e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	021b      	lsls	r3, r3, #8
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	4313      	orrs	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f023 0320 	bic.w	r3, r3, #32
 8005122:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	011b      	lsls	r3, r3, #4
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	4313      	orrs	r3, r2
 800512e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a1d      	ldr	r2, [pc, #116]	; (80051a8 <TIM_OC2_SetConfig+0xd0>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d10d      	bne.n	8005154 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800513e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	011b      	lsls	r3, r3, #4
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	4313      	orrs	r3, r2
 800514a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005152:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a14      	ldr	r2, [pc, #80]	; (80051a8 <TIM_OC2_SetConfig+0xd0>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d113      	bne.n	8005184 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005162:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800516a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	4313      	orrs	r3, r2
 8005176:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	4313      	orrs	r3, r2
 8005182:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	621a      	str	r2, [r3, #32]
}
 800519e:	bf00      	nop
 80051a0:	371c      	adds	r7, #28
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bc80      	pop	{r7}
 80051a6:	4770      	bx	lr
 80051a8:	40012c00 	.word	0x40012c00

080051ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a1b      	ldr	r3, [r3, #32]
 80051c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f023 0303 	bic.w	r3, r3, #3
 80051e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	021b      	lsls	r3, r3, #8
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	4313      	orrs	r3, r2
 8005200:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a1d      	ldr	r2, [pc, #116]	; (800527c <TIM_OC3_SetConfig+0xd0>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d10d      	bne.n	8005226 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005210:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	021b      	lsls	r3, r3, #8
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	4313      	orrs	r3, r2
 800521c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a14      	ldr	r2, [pc, #80]	; (800527c <TIM_OC3_SetConfig+0xd0>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d113      	bne.n	8005256 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005234:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800523c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	011b      	lsls	r3, r3, #4
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	4313      	orrs	r3, r2
 8005248:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	011b      	lsls	r3, r3, #4
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	4313      	orrs	r3, r2
 8005254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	621a      	str	r2, [r3, #32]
}
 8005270:	bf00      	nop
 8005272:	371c      	adds	r7, #28
 8005274:	46bd      	mov	sp, r7
 8005276:	bc80      	pop	{r7}
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	40012c00 	.word	0x40012c00

08005280 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	021b      	lsls	r3, r3, #8
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	031b      	lsls	r3, r3, #12
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a0f      	ldr	r2, [pc, #60]	; (8005318 <TIM_OC4_SetConfig+0x98>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d109      	bne.n	80052f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	019b      	lsls	r3, r3, #6
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	621a      	str	r2, [r3, #32]
}
 800530e:	bf00      	nop
 8005310:	371c      	adds	r7, #28
 8005312:	46bd      	mov	sp, r7
 8005314:	bc80      	pop	{r7}
 8005316:	4770      	bx	lr
 8005318:	40012c00 	.word	0x40012c00

0800531c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	f003 031f 	and.w	r3, r3, #31
 800532e:	2201      	movs	r2, #1
 8005330:	fa02 f303 	lsl.w	r3, r2, r3
 8005334:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6a1a      	ldr	r2, [r3, #32]
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	43db      	mvns	r3, r3
 800533e:	401a      	ands	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6a1a      	ldr	r2, [r3, #32]
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f003 031f 	and.w	r3, r3, #31
 800534e:	6879      	ldr	r1, [r7, #4]
 8005350:	fa01 f303 	lsl.w	r3, r1, r3
 8005354:	431a      	orrs	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	621a      	str	r2, [r3, #32]
}
 800535a:	bf00      	nop
 800535c:	371c      	adds	r7, #28
 800535e:	46bd      	mov	sp, r7
 8005360:	bc80      	pop	{r7}
 8005362:	4770      	bx	lr

08005364 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005374:	2b01      	cmp	r3, #1
 8005376:	d101      	bne.n	800537c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005378:	2302      	movs	r3, #2
 800537a:	e046      	b.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a16      	ldr	r2, [pc, #88]	; (8005414 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d00e      	beq.n	80053de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053c8:	d009      	beq.n	80053de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a12      	ldr	r2, [pc, #72]	; (8005418 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d004      	beq.n	80053de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a10      	ldr	r2, [pc, #64]	; (800541c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d10c      	bne.n	80053f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	bc80      	pop	{r7}
 8005412:	4770      	bx	lr
 8005414:	40012c00 	.word	0x40012c00
 8005418:	40000400 	.word	0x40000400
 800541c:	40000800 	.word	0x40000800

08005420 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800542a:	2300      	movs	r3, #0
 800542c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005438:	2302      	movs	r3, #2
 800543a:	e03d      	b.n	80054b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	4313      	orrs	r3, r2
 800545e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4313      	orrs	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	4313      	orrs	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	bc80      	pop	{r7}
 80054c0:	4770      	bx	lr

080054c2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b085      	sub	sp, #20
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	60f8      	str	r0, [r7, #12]
 80054ca:	4638      	mov	r0, r7
 80054cc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3714      	adds	r7, #20
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bc80      	pop	{r7}
 80054da:	4770      	bx	lr

080054dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80054ec:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80054f0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	bc80      	pop	{r7}
 8005506:	4770      	bx	lr

08005508 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005510:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005514:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800551c:	b29a      	uxth	r2, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	b29b      	uxth	r3, r3
 8005522:	43db      	mvns	r3, r3
 8005524:	b29b      	uxth	r3, r3
 8005526:	4013      	ands	r3, r2
 8005528:	b29a      	uxth	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	bc80      	pop	{r7}
 800553a:	4770      	bx	lr

0800553c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	460b      	mov	r3, r1
 8005546:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	bc80      	pop	{r7}
 8005552:	4770      	bx	lr

08005554 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	4638      	mov	r0, r7
 800555e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2201      	movs	r2, #1
 8005566:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	bc80      	pop	{r7}
 800558c:	4770      	bx	lr
	...

08005590 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005590:	b480      	push	{r7}
 8005592:	b09d      	sub	sp, #116	; 0x74
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800559a:	2300      	movs	r3, #0
 800559c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	881b      	ldrh	r3, [r3, #0]
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80055b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	78db      	ldrb	r3, [r3, #3]
 80055be:	2b03      	cmp	r3, #3
 80055c0:	d81f      	bhi.n	8005602 <USB_ActivateEndpoint+0x72>
 80055c2:	a201      	add	r2, pc, #4	; (adr r2, 80055c8 <USB_ActivateEndpoint+0x38>)
 80055c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c8:	080055d9 	.word	0x080055d9
 80055cc:	080055f5 	.word	0x080055f5
 80055d0:	0800560b 	.word	0x0800560b
 80055d4:	080055e7 	.word	0x080055e7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80055d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80055dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055e0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80055e4:	e012      	b.n	800560c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80055e6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80055ea:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80055ee:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80055f2:	e00b      	b.n	800560c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80055f4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80055f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055fc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005600:	e004      	b.n	800560c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005608:	e000      	b.n	800560c <USB_ActivateEndpoint+0x7c>
      break;
 800560a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	441a      	add	r2, r3
 8005616:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800561a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800561e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800562a:	b29b      	uxth	r3, r3
 800562c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4413      	add	r3, r2
 8005638:	881b      	ldrh	r3, [r3, #0]
 800563a:	b29b      	uxth	r3, r3
 800563c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005644:	b29a      	uxth	r2, r3
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	b29b      	uxth	r3, r3
 800564c:	4313      	orrs	r3, r2
 800564e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	441a      	add	r2, r3
 800565c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005660:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005664:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005668:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800566c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005670:	b29b      	uxth	r3, r3
 8005672:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	7b1b      	ldrb	r3, [r3, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	f040 8178 	bne.w	800596e <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	785b      	ldrb	r3, [r3, #1]
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 8084 	beq.w	8005790 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	61bb      	str	r3, [r7, #24]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005692:	b29b      	uxth	r3, r3
 8005694:	461a      	mov	r2, r3
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	4413      	add	r3, r2
 800569a:	61bb      	str	r3, [r7, #24]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	011a      	lsls	r2, r3, #4
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056aa:	617b      	str	r3, [r7, #20]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	88db      	ldrh	r3, [r3, #6]
 80056b0:	085b      	lsrs	r3, r3, #1
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	827b      	strh	r3, [r7, #18]
 80056ca:	8a7b      	ldrh	r3, [r7, #18]
 80056cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d01b      	beq.n	800570c <USB_ActivateEndpoint+0x17c>
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	881b      	ldrh	r3, [r3, #0]
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ea:	823b      	strh	r3, [r7, #16]
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	441a      	add	r2, r3
 80056f6:	8a3b      	ldrh	r3, [r7, #16]
 80056f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005704:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005708:	b29b      	uxth	r3, r3
 800570a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	78db      	ldrb	r3, [r3, #3]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d020      	beq.n	8005756 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	b29b      	uxth	r3, r3
 8005722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005726:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800572a:	81bb      	strh	r3, [r7, #12]
 800572c:	89bb      	ldrh	r3, [r7, #12]
 800572e:	f083 0320 	eor.w	r3, r3, #32
 8005732:	81bb      	strh	r3, [r7, #12]
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	441a      	add	r2, r3
 800573e:	89bb      	ldrh	r3, [r7, #12]
 8005740:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005744:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005748:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800574c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005750:	b29b      	uxth	r3, r3
 8005752:	8013      	strh	r3, [r2, #0]
 8005754:	e2d5      	b.n	8005d02 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	b29b      	uxth	r3, r3
 8005764:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800576c:	81fb      	strh	r3, [r7, #14]
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	441a      	add	r2, r3
 8005778:	89fb      	ldrh	r3, [r7, #14]
 800577a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800577e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800578a:	b29b      	uxth	r3, r3
 800578c:	8013      	strh	r3, [r2, #0]
 800578e:	e2b8      	b.n	8005d02 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	633b      	str	r3, [r7, #48]	; 0x30
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800579a:	b29b      	uxth	r3, r3
 800579c:	461a      	mov	r2, r3
 800579e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a0:	4413      	add	r3, r2
 80057a2:	633b      	str	r3, [r7, #48]	; 0x30
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	011a      	lsls	r2, r3, #4
 80057aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80057b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	88db      	ldrh	r3, [r3, #6]
 80057b8:	085b      	lsrs	r3, r3, #1
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	b29a      	uxth	r2, r3
 80057c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	461a      	mov	r2, r3
 80057d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d4:	4413      	add	r3, r2
 80057d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	011a      	lsls	r2, r3, #4
 80057de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e0:	4413      	add	r3, r2
 80057e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057e6:	627b      	str	r3, [r7, #36]	; 0x24
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	801a      	strh	r2, [r3, #0]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	2b3e      	cmp	r3, #62	; 0x3e
 80057fe:	d91d      	bls.n	800583c <USB_ActivateEndpoint+0x2ac>
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	095b      	lsrs	r3, r3, #5
 8005806:	66bb      	str	r3, [r7, #104]	; 0x68
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	f003 031f 	and.w	r3, r3, #31
 8005810:	2b00      	cmp	r3, #0
 8005812:	d102      	bne.n	800581a <USB_ActivateEndpoint+0x28a>
 8005814:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005816:	3b01      	subs	r3, #1
 8005818:	66bb      	str	r3, [r7, #104]	; 0x68
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	881b      	ldrh	r3, [r3, #0]
 800581e:	b29a      	uxth	r2, r3
 8005820:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005822:	b29b      	uxth	r3, r3
 8005824:	029b      	lsls	r3, r3, #10
 8005826:	b29b      	uxth	r3, r3
 8005828:	4313      	orrs	r3, r2
 800582a:	b29b      	uxth	r3, r3
 800582c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005830:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005834:	b29a      	uxth	r2, r3
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	801a      	strh	r2, [r3, #0]
 800583a:	e026      	b.n	800588a <USB_ActivateEndpoint+0x2fa>
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10a      	bne.n	800585a <USB_ActivateEndpoint+0x2ca>
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	881b      	ldrh	r3, [r3, #0]
 8005848:	b29b      	uxth	r3, r3
 800584a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800584e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005852:	b29a      	uxth	r2, r3
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	801a      	strh	r2, [r3, #0]
 8005858:	e017      	b.n	800588a <USB_ActivateEndpoint+0x2fa>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	085b      	lsrs	r3, r3, #1
 8005860:	66bb      	str	r3, [r7, #104]	; 0x68
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b00      	cmp	r3, #0
 800586c:	d002      	beq.n	8005874 <USB_ActivateEndpoint+0x2e4>
 800586e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005870:	3301      	adds	r3, #1
 8005872:	66bb      	str	r3, [r7, #104]	; 0x68
 8005874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005876:	881b      	ldrh	r3, [r3, #0]
 8005878:	b29a      	uxth	r2, r3
 800587a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800587c:	b29b      	uxth	r3, r3
 800587e:	029b      	lsls	r3, r3, #10
 8005880:	b29b      	uxth	r3, r3
 8005882:	4313      	orrs	r3, r2
 8005884:	b29a      	uxth	r2, r3
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	881b      	ldrh	r3, [r3, #0]
 8005896:	847b      	strh	r3, [r7, #34]	; 0x22
 8005898:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800589a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d01b      	beq.n	80058da <USB_ActivateEndpoint+0x34a>
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	881b      	ldrh	r3, [r3, #0]
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b8:	843b      	strh	r3, [r7, #32]
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	441a      	add	r2, r3
 80058c4:	8c3b      	ldrh	r3, [r7, #32]
 80058c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d124      	bne.n	800592c <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f8:	83bb      	strh	r3, [r7, #28]
 80058fa:	8bbb      	ldrh	r3, [r7, #28]
 80058fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005900:	83bb      	strh	r3, [r7, #28]
 8005902:	8bbb      	ldrh	r3, [r7, #28]
 8005904:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005908:	83bb      	strh	r3, [r7, #28]
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	441a      	add	r2, r3
 8005914:	8bbb      	ldrh	r3, [r7, #28]
 8005916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800591a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800591e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005926:	b29b      	uxth	r3, r3
 8005928:	8013      	strh	r3, [r2, #0]
 800592a:	e1ea      	b.n	8005d02 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	b29b      	uxth	r3, r3
 800593a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800593e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005942:	83fb      	strh	r3, [r7, #30]
 8005944:	8bfb      	ldrh	r3, [r7, #30]
 8005946:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800594a:	83fb      	strh	r3, [r7, #30]
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	441a      	add	r2, r3
 8005956:	8bfb      	ldrh	r3, [r7, #30]
 8005958:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800595c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005960:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005968:	b29b      	uxth	r3, r3
 800596a:	8013      	strh	r3, [r2, #0]
 800596c:	e1c9      	b.n	8005d02 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	78db      	ldrb	r3, [r3, #3]
 8005972:	2b02      	cmp	r3, #2
 8005974:	d11e      	bne.n	80059b4 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	4413      	add	r3, r2
 8005980:	881b      	ldrh	r3, [r3, #0]
 8005982:	b29b      	uxth	r3, r3
 8005984:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800598c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	441a      	add	r2, r3
 800599a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800599e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059a6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80059aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	8013      	strh	r3, [r2, #0]
 80059b2:	e01d      	b.n	80059f0 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	4413      	add	r3, r2
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80059c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ca:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	441a      	add	r2, r3
 80059d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80059dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	461a      	mov	r2, r3
 80059fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a00:	4413      	add	r3, r2
 8005a02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	011a      	lsls	r2, r3, #4
 8005a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a12:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	891b      	ldrh	r3, [r3, #8]
 8005a18:	085b      	lsrs	r3, r3, #1
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	005b      	lsls	r3, r3, #1
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a22:	801a      	strh	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	657b      	str	r3, [r7, #84]	; 0x54
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	461a      	mov	r2, r3
 8005a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a34:	4413      	add	r3, r2
 8005a36:	657b      	str	r3, [r7, #84]	; 0x54
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	011a      	lsls	r2, r3, #4
 8005a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005a46:	653b      	str	r3, [r7, #80]	; 0x50
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	895b      	ldrh	r3, [r3, #10]
 8005a4c:	085b      	lsrs	r3, r3, #1
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a56:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	785b      	ldrb	r3, [r3, #1]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f040 8093 	bne.w	8005b88 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4413      	add	r3, r2
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005a72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d01b      	beq.n	8005ab6 <USB_ActivateEndpoint+0x526>
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a94:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	441a      	add	r2, r3
 8005aa0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aaa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	881b      	ldrh	r3, [r3, #0]
 8005ac2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005ac4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d01b      	beq.n	8005b06 <USB_ActivateEndpoint+0x576>
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4413      	add	r3, r2
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	441a      	add	r2, r3
 8005af0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005af2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005af6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005afe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	881b      	ldrh	r3, [r3, #0]
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1c:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b1e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b20:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b24:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b26:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b2c:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	441a      	add	r2, r3
 8005b38:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b64:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	441a      	add	r2, r3
 8005b70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	8013      	strh	r3, [r2, #0]
 8005b86:	e0bc      	b.n	8005d02 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005b98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d01d      	beq.n	8005be0 <USB_ActivateEndpoint+0x650>
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bba:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	441a      	add	r2, r3
 8005bc8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005bcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4413      	add	r3, r2
 8005bea:	881b      	ldrh	r3, [r3, #0]
 8005bec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005bf0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d01d      	beq.n	8005c38 <USB_ActivateEndpoint+0x6a8>
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c12:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	441a      	add	r2, r3
 8005c20:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005c24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	78db      	ldrb	r3, [r3, #3]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d024      	beq.n	8005c8a <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4413      	add	r3, r2
 8005c4a:	881b      	ldrh	r3, [r3, #0]
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c56:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005c5a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005c5e:	f083 0320 	eor.w	r3, r3, #32
 8005c62:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	441a      	add	r2, r3
 8005c70:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005c74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	8013      	strh	r3, [r2, #0]
 8005c88:	e01d      	b.n	8005cc6 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4413      	add	r3, r2
 8005c94:	881b      	ldrh	r3, [r3, #0]
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ca0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	441a      	add	r2, r3
 8005cae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4413      	add	r3, r2
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cdc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	441a      	add	r2, r3
 8005cea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005cee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005d02:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3774      	adds	r7, #116	; 0x74
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bc80      	pop	{r7}
 8005d0e:	4770      	bx	lr

08005d10 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b08d      	sub	sp, #52	; 0x34
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	7b1b      	ldrb	r3, [r3, #12]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f040 808e 	bne.w	8005e40 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	785b      	ldrb	r3, [r3, #1]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d044      	beq.n	8005db6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	881b      	ldrh	r3, [r3, #0]
 8005d38:	81bb      	strh	r3, [r7, #12]
 8005d3a:	89bb      	ldrh	r3, [r7, #12]
 8005d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d01b      	beq.n	8005d7c <USB_DeactivateEndpoint+0x6c>
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	881b      	ldrh	r3, [r3, #0]
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d5a:	817b      	strh	r3, [r7, #10]
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	441a      	add	r2, r3
 8005d66:	897b      	ldrh	r3, [r7, #10]
 8005d68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4413      	add	r3, r2
 8005d86:	881b      	ldrh	r3, [r3, #0]
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d92:	813b      	strh	r3, [r7, #8]
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	441a      	add	r2, r3
 8005d9e:	893b      	ldrh	r3, [r7, #8]
 8005da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	8013      	strh	r3, [r2, #0]
 8005db4:	e192      	b.n	80060dc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	827b      	strh	r3, [r7, #18]
 8005dc4:	8a7b      	ldrh	r3, [r7, #18]
 8005dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d01b      	beq.n	8005e06 <USB_DeactivateEndpoint+0xf6>
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	881b      	ldrh	r3, [r3, #0]
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de4:	823b      	strh	r3, [r7, #16]
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	441a      	add	r2, r3
 8005df0:	8a3b      	ldrh	r3, [r7, #16]
 8005df2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005df6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1c:	81fb      	strh	r3, [r7, #14]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	441a      	add	r2, r3
 8005e28:	89fb      	ldrh	r3, [r7, #14]
 8005e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	8013      	strh	r3, [r2, #0]
 8005e3e:	e14d      	b.n	80060dc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	785b      	ldrb	r3, [r3, #1]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f040 80a5 	bne.w	8005f94 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	881b      	ldrh	r3, [r3, #0]
 8005e56:	843b      	strh	r3, [r7, #32]
 8005e58:	8c3b      	ldrh	r3, [r7, #32]
 8005e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d01b      	beq.n	8005e9a <USB_DeactivateEndpoint+0x18a>
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4413      	add	r3, r2
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e78:	83fb      	strh	r3, [r7, #30]
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	441a      	add	r2, r3
 8005e84:	8bfb      	ldrh	r3, [r7, #30]
 8005e86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4413      	add	r3, r2
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	83bb      	strh	r3, [r7, #28]
 8005ea8:	8bbb      	ldrh	r3, [r7, #28]
 8005eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d01b      	beq.n	8005eea <USB_DeactivateEndpoint+0x1da>
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	881b      	ldrh	r3, [r3, #0]
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec8:	837b      	strh	r3, [r7, #26]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	441a      	add	r2, r3
 8005ed4:	8b7b      	ldrh	r3, [r7, #26]
 8005ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ee2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	881b      	ldrh	r3, [r3, #0]
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f00:	833b      	strh	r3, [r7, #24]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	441a      	add	r2, r3
 8005f0c:	8b3b      	ldrh	r3, [r7, #24]
 8005f0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	4413      	add	r3, r2
 8005f2c:	881b      	ldrh	r3, [r3, #0]
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f38:	82fb      	strh	r3, [r7, #22]
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	441a      	add	r2, r3
 8005f44:	8afb      	ldrh	r3, [r7, #22]
 8005f46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4413      	add	r3, r2
 8005f64:	881b      	ldrh	r3, [r3, #0]
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f70:	82bb      	strh	r3, [r7, #20]
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	441a      	add	r2, r3
 8005f7c:	8abb      	ldrh	r3, [r7, #20]
 8005f7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	8013      	strh	r3, [r2, #0]
 8005f92:	e0a3      	b.n	80060dc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4413      	add	r3, r2
 8005f9e:	881b      	ldrh	r3, [r3, #0]
 8005fa0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005fa2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d01b      	beq.n	8005fe4 <USB_DeactivateEndpoint+0x2d4>
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fc2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	441a      	add	r2, r3
 8005fce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005fd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4413      	add	r3, r2
 8005fee:	881b      	ldrh	r3, [r3, #0]
 8005ff0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005ff2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d01b      	beq.n	8006034 <USB_DeactivateEndpoint+0x324>
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	881b      	ldrh	r3, [r3, #0]
 8006008:	b29b      	uxth	r3, r3
 800600a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800600e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006012:	853b      	strh	r3, [r7, #40]	; 0x28
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	441a      	add	r2, r3
 800601e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006020:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006024:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800602c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006030:	b29b      	uxth	r3, r3
 8006032:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4413      	add	r3, r2
 800603e:	881b      	ldrh	r3, [r3, #0]
 8006040:	b29b      	uxth	r3, r3
 8006042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	441a      	add	r2, r3
 8006056:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006058:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800605c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006060:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006068:	b29b      	uxth	r3, r3
 800606a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	881b      	ldrh	r3, [r3, #0]
 8006078:	b29b      	uxth	r3, r3
 800607a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800607e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006082:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	441a      	add	r2, r3
 800608e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006098:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800609c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ba:	847b      	strh	r3, [r7, #34]	; 0x22
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	441a      	add	r2, r3
 80060c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80060c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d8:	b29b      	uxth	r3, r3
 80060da:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3734      	adds	r7, #52	; 0x34
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bc80      	pop	{r7}
 80060e6:	4770      	bx	lr

080060e8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b0c2      	sub	sp, #264	; 0x108
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	1d3b      	adds	r3, r7, #4
 80060f0:	6018      	str	r0, [r3, #0]
 80060f2:	463b      	mov	r3, r7
 80060f4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060f6:	463b      	mov	r3, r7
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	785b      	ldrb	r3, [r3, #1]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	f040 8545 	bne.w	8006b8c <USB_EPStartXfer+0xaa4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006102:	463b      	mov	r3, r7
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	699a      	ldr	r2, [r3, #24]
 8006108:	463b      	mov	r3, r7
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	429a      	cmp	r2, r3
 8006110:	d905      	bls.n	800611e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006112:	463b      	mov	r3, r7
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800611c:	e004      	b.n	8006128 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800611e:	463b      	mov	r3, r7
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006128:	463b      	mov	r3, r7
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	7b1b      	ldrb	r3, [r3, #12]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d128      	bne.n	8006184 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006132:	463b      	mov	r3, r7
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	6959      	ldr	r1, [r3, #20]
 8006138:	463b      	mov	r3, r7
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	88da      	ldrh	r2, [r3, #6]
 800613e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006142:	b29b      	uxth	r3, r3
 8006144:	1d38      	adds	r0, r7, #4
 8006146:	6800      	ldr	r0, [r0, #0]
 8006148:	f001 fa58 	bl	80075fc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800614c:	1d3b      	adds	r3, r7, #4
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	613b      	str	r3, [r7, #16]
 8006152:	1d3b      	adds	r3, r7, #4
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800615a:	b29b      	uxth	r3, r3
 800615c:	461a      	mov	r2, r3
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	4413      	add	r3, r2
 8006162:	613b      	str	r3, [r7, #16]
 8006164:	463b      	mov	r3, r7
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	011a      	lsls	r2, r3, #4
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	4413      	add	r3, r2
 8006170:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006174:	60fb      	str	r3, [r7, #12]
 8006176:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800617a:	b29a      	uxth	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	801a      	strh	r2, [r3, #0]
 8006180:	f000 bcdb 	b.w	8006b3a <USB_EPStartXfer+0xa52>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006184:	463b      	mov	r3, r7
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	78db      	ldrb	r3, [r3, #3]
 800618a:	2b02      	cmp	r3, #2
 800618c:	f040 836f 	bne.w	800686e <USB_EPStartXfer+0x786>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006190:	463b      	mov	r3, r7
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6a1a      	ldr	r2, [r3, #32]
 8006196:	463b      	mov	r3, r7
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	429a      	cmp	r2, r3
 800619e:	f240 8313 	bls.w	80067c8 <USB_EPStartXfer+0x6e0>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80061a2:	1d3b      	adds	r3, r7, #4
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	463b      	mov	r3, r7
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4413      	add	r3, r2
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80061c0:	1d3b      	adds	r3, r7, #4
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	463b      	mov	r3, r7
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	441a      	add	r2, r3
 80061ce:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80061d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061da:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80061de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80061e6:	463b      	mov	r3, r7
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	6a1a      	ldr	r2, [r3, #32]
 80061ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061f0:	1ad2      	subs	r2, r2, r3
 80061f2:	463b      	mov	r3, r7
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80061f8:	1d3b      	adds	r3, r7, #4
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	463b      	mov	r3, r7
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	881b      	ldrh	r3, [r3, #0]
 8006208:	b29b      	uxth	r3, r3
 800620a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 816d 	beq.w	80064ee <USB_EPStartXfer+0x406>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006214:	1d3b      	adds	r3, r7, #4
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	633b      	str	r3, [r7, #48]	; 0x30
 800621a:	463b      	mov	r3, r7
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	785b      	ldrb	r3, [r3, #1]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d16e      	bne.n	8006302 <USB_EPStartXfer+0x21a>
 8006224:	1d3b      	adds	r3, r7, #4
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	62bb      	str	r3, [r7, #40]	; 0x28
 800622a:	1d3b      	adds	r3, r7, #4
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006232:	b29b      	uxth	r3, r3
 8006234:	461a      	mov	r2, r3
 8006236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006238:	4413      	add	r3, r2
 800623a:	62bb      	str	r3, [r7, #40]	; 0x28
 800623c:	463b      	mov	r3, r7
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	011a      	lsls	r2, r3, #4
 8006244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006246:	4413      	add	r3, r2
 8006248:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800624c:	627b      	str	r3, [r7, #36]	; 0x24
 800624e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006250:	881b      	ldrh	r3, [r3, #0]
 8006252:	b29b      	uxth	r3, r3
 8006254:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006258:	b29a      	uxth	r2, r3
 800625a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625c:	801a      	strh	r2, [r3, #0]
 800625e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006262:	2b3e      	cmp	r3, #62	; 0x3e
 8006264:	d921      	bls.n	80062aa <USB_EPStartXfer+0x1c2>
 8006266:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800626a:	095b      	lsrs	r3, r3, #5
 800626c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006274:	f003 031f 	and.w	r3, r3, #31
 8006278:	2b00      	cmp	r3, #0
 800627a:	d104      	bne.n	8006286 <USB_EPStartXfer+0x19e>
 800627c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006280:	3b01      	subs	r3, #1
 8006282:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006288:	881b      	ldrh	r3, [r3, #0]
 800628a:	b29a      	uxth	r2, r3
 800628c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006290:	b29b      	uxth	r3, r3
 8006292:	029b      	lsls	r3, r3, #10
 8006294:	b29b      	uxth	r3, r3
 8006296:	4313      	orrs	r3, r2
 8006298:	b29b      	uxth	r3, r3
 800629a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800629e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	801a      	strh	r2, [r3, #0]
 80062a8:	e047      	b.n	800633a <USB_EPStartXfer+0x252>
 80062aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10a      	bne.n	80062c8 <USB_EPStartXfer+0x1e0>
 80062b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b4:	881b      	ldrh	r3, [r3, #0]
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c4:	801a      	strh	r2, [r3, #0]
 80062c6:	e038      	b.n	800633a <USB_EPStartXfer+0x252>
 80062c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062cc:	085b      	lsrs	r3, r3, #1
 80062ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80062d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d004      	beq.n	80062e8 <USB_EPStartXfer+0x200>
 80062de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80062e2:	3301      	adds	r3, #1
 80062e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80062e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	029b      	lsls	r3, r3, #10
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	4313      	orrs	r3, r2
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	801a      	strh	r2, [r3, #0]
 8006300:	e01b      	b.n	800633a <USB_EPStartXfer+0x252>
 8006302:	463b      	mov	r3, r7
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	785b      	ldrb	r3, [r3, #1]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d116      	bne.n	800633a <USB_EPStartXfer+0x252>
 800630c:	1d3b      	adds	r3, r7, #4
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006314:	b29b      	uxth	r3, r3
 8006316:	461a      	mov	r2, r3
 8006318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631a:	4413      	add	r3, r2
 800631c:	633b      	str	r3, [r7, #48]	; 0x30
 800631e:	463b      	mov	r3, r7
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	011a      	lsls	r2, r3, #4
 8006326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006328:	4413      	add	r3, r2
 800632a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800632e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006334:	b29a      	uxth	r2, r3
 8006336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006338:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800633a:	463b      	mov	r3, r7
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	895b      	ldrh	r3, [r3, #10]
 8006340:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006344:	463b      	mov	r3, r7
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6959      	ldr	r1, [r3, #20]
 800634a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800634e:	b29b      	uxth	r3, r3
 8006350:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006354:	1d38      	adds	r0, r7, #4
 8006356:	6800      	ldr	r0, [r0, #0]
 8006358:	f001 f950 	bl	80075fc <USB_WritePMA>
            ep->xfer_buff += len;
 800635c:	463b      	mov	r3, r7
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	695a      	ldr	r2, [r3, #20]
 8006362:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006366:	441a      	add	r2, r3
 8006368:	463b      	mov	r3, r7
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800636e:	463b      	mov	r3, r7
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6a1a      	ldr	r2, [r3, #32]
 8006374:	463b      	mov	r3, r7
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	429a      	cmp	r2, r3
 800637c:	d909      	bls.n	8006392 <USB_EPStartXfer+0x2aa>
            {
              ep->xfer_len_db -= len;
 800637e:	463b      	mov	r3, r7
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6a1a      	ldr	r2, [r3, #32]
 8006384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006388:	1ad2      	subs	r2, r2, r3
 800638a:	463b      	mov	r3, r7
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	621a      	str	r2, [r3, #32]
 8006390:	e008      	b.n	80063a4 <USB_EPStartXfer+0x2bc>
            }
            else
            {
              len = ep->xfer_len_db;
 8006392:	463b      	mov	r3, r7
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800639c:	463b      	mov	r3, r7
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2200      	movs	r2, #0
 80063a2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80063a4:	463b      	mov	r3, r7
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	785b      	ldrb	r3, [r3, #1]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d16e      	bne.n	800648c <USB_EPStartXfer+0x3a4>
 80063ae:	1d3b      	adds	r3, r7, #4
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	61bb      	str	r3, [r7, #24]
 80063b4:	1d3b      	adds	r3, r7, #4
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063bc:	b29b      	uxth	r3, r3
 80063be:	461a      	mov	r2, r3
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	4413      	add	r3, r2
 80063c4:	61bb      	str	r3, [r7, #24]
 80063c6:	463b      	mov	r3, r7
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	011a      	lsls	r2, r3, #4
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	4413      	add	r3, r2
 80063d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063d6:	617b      	str	r3, [r7, #20]
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	881b      	ldrh	r3, [r3, #0]
 80063dc:	b29b      	uxth	r3, r3
 80063de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	801a      	strh	r2, [r3, #0]
 80063e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063ec:	2b3e      	cmp	r3, #62	; 0x3e
 80063ee:	d921      	bls.n	8006434 <USB_EPStartXfer+0x34c>
 80063f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063f4:	095b      	lsrs	r3, r3, #5
 80063f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80063fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063fe:	f003 031f 	and.w	r3, r3, #31
 8006402:	2b00      	cmp	r3, #0
 8006404:	d104      	bne.n	8006410 <USB_EPStartXfer+0x328>
 8006406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800640a:	3b01      	subs	r3, #1
 800640c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	881b      	ldrh	r3, [r3, #0]
 8006414:	b29a      	uxth	r2, r3
 8006416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800641a:	b29b      	uxth	r3, r3
 800641c:	029b      	lsls	r3, r3, #10
 800641e:	b29b      	uxth	r3, r3
 8006420:	4313      	orrs	r3, r2
 8006422:	b29b      	uxth	r3, r3
 8006424:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006428:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800642c:	b29a      	uxth	r2, r3
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	801a      	strh	r2, [r3, #0]
 8006432:	e04a      	b.n	80064ca <USB_EPStartXfer+0x3e2>
 8006434:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10a      	bne.n	8006452 <USB_EPStartXfer+0x36a>
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	881b      	ldrh	r3, [r3, #0]
 8006440:	b29b      	uxth	r3, r3
 8006442:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006446:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800644a:	b29a      	uxth	r2, r3
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	801a      	strh	r2, [r3, #0]
 8006450:	e03b      	b.n	80064ca <USB_EPStartXfer+0x3e2>
 8006452:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006456:	085b      	lsrs	r3, r3, #1
 8006458:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800645c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006460:	f003 0301 	and.w	r3, r3, #1
 8006464:	2b00      	cmp	r3, #0
 8006466:	d004      	beq.n	8006472 <USB_EPStartXfer+0x38a>
 8006468:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800646c:	3301      	adds	r3, #1
 800646e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	881b      	ldrh	r3, [r3, #0]
 8006476:	b29a      	uxth	r2, r3
 8006478:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800647c:	b29b      	uxth	r3, r3
 800647e:	029b      	lsls	r3, r3, #10
 8006480:	b29b      	uxth	r3, r3
 8006482:	4313      	orrs	r3, r2
 8006484:	b29a      	uxth	r2, r3
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	801a      	strh	r2, [r3, #0]
 800648a:	e01e      	b.n	80064ca <USB_EPStartXfer+0x3e2>
 800648c:	463b      	mov	r3, r7
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	785b      	ldrb	r3, [r3, #1]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d119      	bne.n	80064ca <USB_EPStartXfer+0x3e2>
 8006496:	1d3b      	adds	r3, r7, #4
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	623b      	str	r3, [r7, #32]
 800649c:	1d3b      	adds	r3, r7, #4
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	461a      	mov	r2, r3
 80064a8:	6a3b      	ldr	r3, [r7, #32]
 80064aa:	4413      	add	r3, r2
 80064ac:	623b      	str	r3, [r7, #32]
 80064ae:	463b      	mov	r3, r7
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	011a      	lsls	r2, r3, #4
 80064b6:	6a3b      	ldr	r3, [r7, #32]
 80064b8:	4413      	add	r3, r2
 80064ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064be:	61fb      	str	r3, [r7, #28]
 80064c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80064ca:	463b      	mov	r3, r7
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	891b      	ldrh	r3, [r3, #8]
 80064d0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064d4:	463b      	mov	r3, r7
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6959      	ldr	r1, [r3, #20]
 80064da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064de:	b29b      	uxth	r3, r3
 80064e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80064e4:	1d38      	adds	r0, r7, #4
 80064e6:	6800      	ldr	r0, [r0, #0]
 80064e8:	f001 f888 	bl	80075fc <USB_WritePMA>
 80064ec:	e325      	b.n	8006b3a <USB_EPStartXfer+0xa52>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80064ee:	463b      	mov	r3, r7
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	785b      	ldrb	r3, [r3, #1]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d16e      	bne.n	80065d6 <USB_EPStartXfer+0x4ee>
 80064f8:	1d3b      	adds	r3, r7, #4
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80064fe:	1d3b      	adds	r3, r7, #4
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006506:	b29b      	uxth	r3, r3
 8006508:	461a      	mov	r2, r3
 800650a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800650c:	4413      	add	r3, r2
 800650e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006510:	463b      	mov	r3, r7
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	011a      	lsls	r2, r3, #4
 8006518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800651a:	4413      	add	r3, r2
 800651c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006520:	647b      	str	r3, [r7, #68]	; 0x44
 8006522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006524:	881b      	ldrh	r3, [r3, #0]
 8006526:	b29b      	uxth	r3, r3
 8006528:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800652c:	b29a      	uxth	r2, r3
 800652e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006530:	801a      	strh	r2, [r3, #0]
 8006532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006536:	2b3e      	cmp	r3, #62	; 0x3e
 8006538:	d921      	bls.n	800657e <USB_EPStartXfer+0x496>
 800653a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800653e:	095b      	lsrs	r3, r3, #5
 8006540:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006548:	f003 031f 	and.w	r3, r3, #31
 800654c:	2b00      	cmp	r3, #0
 800654e:	d104      	bne.n	800655a <USB_EPStartXfer+0x472>
 8006550:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006554:	3b01      	subs	r3, #1
 8006556:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800655a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800655c:	881b      	ldrh	r3, [r3, #0]
 800655e:	b29a      	uxth	r2, r3
 8006560:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006564:	b29b      	uxth	r3, r3
 8006566:	029b      	lsls	r3, r3, #10
 8006568:	b29b      	uxth	r3, r3
 800656a:	4313      	orrs	r3, r2
 800656c:	b29b      	uxth	r3, r3
 800656e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006572:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006576:	b29a      	uxth	r2, r3
 8006578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800657a:	801a      	strh	r2, [r3, #0]
 800657c:	e04a      	b.n	8006614 <USB_EPStartXfer+0x52c>
 800657e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10a      	bne.n	800659c <USB_EPStartXfer+0x4b4>
 8006586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006588:	881b      	ldrh	r3, [r3, #0]
 800658a:	b29b      	uxth	r3, r3
 800658c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006594:	b29a      	uxth	r2, r3
 8006596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006598:	801a      	strh	r2, [r3, #0]
 800659a:	e03b      	b.n	8006614 <USB_EPStartXfer+0x52c>
 800659c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065a0:	085b      	lsrs	r3, r3, #1
 80065a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80065a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d004      	beq.n	80065bc <USB_EPStartXfer+0x4d4>
 80065b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80065b6:	3301      	adds	r3, #1
 80065b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80065bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065be:	881b      	ldrh	r3, [r3, #0]
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	029b      	lsls	r3, r3, #10
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	4313      	orrs	r3, r2
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065d2:	801a      	strh	r2, [r3, #0]
 80065d4:	e01e      	b.n	8006614 <USB_EPStartXfer+0x52c>
 80065d6:	463b      	mov	r3, r7
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	785b      	ldrb	r3, [r3, #1]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d119      	bne.n	8006614 <USB_EPStartXfer+0x52c>
 80065e0:	1d3b      	adds	r3, r7, #4
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	653b      	str	r3, [r7, #80]	; 0x50
 80065e6:	1d3b      	adds	r3, r7, #4
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	461a      	mov	r2, r3
 80065f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065f4:	4413      	add	r3, r2
 80065f6:	653b      	str	r3, [r7, #80]	; 0x50
 80065f8:	463b      	mov	r3, r7
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	011a      	lsls	r2, r3, #4
 8006600:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006602:	4413      	add	r3, r2
 8006604:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006608:	64fb      	str	r3, [r7, #76]	; 0x4c
 800660a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800660e:	b29a      	uxth	r2, r3
 8006610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006612:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006614:	463b      	mov	r3, r7
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	891b      	ldrh	r3, [r3, #8]
 800661a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800661e:	463b      	mov	r3, r7
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	6959      	ldr	r1, [r3, #20]
 8006624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006628:	b29b      	uxth	r3, r3
 800662a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800662e:	1d38      	adds	r0, r7, #4
 8006630:	6800      	ldr	r0, [r0, #0]
 8006632:	f000 ffe3 	bl	80075fc <USB_WritePMA>
            ep->xfer_buff += len;
 8006636:	463b      	mov	r3, r7
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	695a      	ldr	r2, [r3, #20]
 800663c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006640:	441a      	add	r2, r3
 8006642:	463b      	mov	r3, r7
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006648:	463b      	mov	r3, r7
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	6a1a      	ldr	r2, [r3, #32]
 800664e:	463b      	mov	r3, r7
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	429a      	cmp	r2, r3
 8006656:	d909      	bls.n	800666c <USB_EPStartXfer+0x584>
            {
              ep->xfer_len_db -= len;
 8006658:	463b      	mov	r3, r7
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	6a1a      	ldr	r2, [r3, #32]
 800665e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006662:	1ad2      	subs	r2, r2, r3
 8006664:	463b      	mov	r3, r7
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	621a      	str	r2, [r3, #32]
 800666a:	e008      	b.n	800667e <USB_EPStartXfer+0x596>
            }
            else
            {
              len = ep->xfer_len_db;
 800666c:	463b      	mov	r3, r7
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006676:	463b      	mov	r3, r7
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2200      	movs	r2, #0
 800667c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800667e:	1d3b      	adds	r3, r7, #4
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	643b      	str	r3, [r7, #64]	; 0x40
 8006684:	463b      	mov	r3, r7
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	785b      	ldrb	r3, [r3, #1]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d16e      	bne.n	800676c <USB_EPStartXfer+0x684>
 800668e:	1d3b      	adds	r3, r7, #4
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	63bb      	str	r3, [r7, #56]	; 0x38
 8006694:	1d3b      	adds	r3, r7, #4
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800669c:	b29b      	uxth	r3, r3
 800669e:	461a      	mov	r2, r3
 80066a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a2:	4413      	add	r3, r2
 80066a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80066a6:	463b      	mov	r3, r7
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	011a      	lsls	r2, r3, #4
 80066ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b0:	4413      	add	r3, r2
 80066b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066b6:	637b      	str	r3, [r7, #52]	; 0x34
 80066b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ba:	881b      	ldrh	r3, [r3, #0]
 80066bc:	b29b      	uxth	r3, r3
 80066be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c6:	801a      	strh	r2, [r3, #0]
 80066c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066cc:	2b3e      	cmp	r3, #62	; 0x3e
 80066ce:	d921      	bls.n	8006714 <USB_EPStartXfer+0x62c>
 80066d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066d4:	095b      	lsrs	r3, r3, #5
 80066d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80066da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066de:	f003 031f 	and.w	r3, r3, #31
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d104      	bne.n	80066f0 <USB_EPStartXfer+0x608>
 80066e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ea:	3b01      	subs	r3, #1
 80066ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80066f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f2:	881b      	ldrh	r3, [r3, #0]
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	029b      	lsls	r3, r3, #10
 80066fe:	b29b      	uxth	r3, r3
 8006700:	4313      	orrs	r3, r2
 8006702:	b29b      	uxth	r3, r3
 8006704:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006708:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800670c:	b29a      	uxth	r2, r3
 800670e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006710:	801a      	strh	r2, [r3, #0]
 8006712:	e047      	b.n	80067a4 <USB_EPStartXfer+0x6bc>
 8006714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10a      	bne.n	8006732 <USB_EPStartXfer+0x64a>
 800671c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800671e:	881b      	ldrh	r3, [r3, #0]
 8006720:	b29b      	uxth	r3, r3
 8006722:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006726:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800672a:	b29a      	uxth	r2, r3
 800672c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800672e:	801a      	strh	r2, [r3, #0]
 8006730:	e038      	b.n	80067a4 <USB_EPStartXfer+0x6bc>
 8006732:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006736:	085b      	lsrs	r3, r3, #1
 8006738:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800673c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006740:	f003 0301 	and.w	r3, r3, #1
 8006744:	2b00      	cmp	r3, #0
 8006746:	d004      	beq.n	8006752 <USB_EPStartXfer+0x66a>
 8006748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800674c:	3301      	adds	r3, #1
 800674e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006754:	881b      	ldrh	r3, [r3, #0]
 8006756:	b29a      	uxth	r2, r3
 8006758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800675c:	b29b      	uxth	r3, r3
 800675e:	029b      	lsls	r3, r3, #10
 8006760:	b29b      	uxth	r3, r3
 8006762:	4313      	orrs	r3, r2
 8006764:	b29a      	uxth	r2, r3
 8006766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006768:	801a      	strh	r2, [r3, #0]
 800676a:	e01b      	b.n	80067a4 <USB_EPStartXfer+0x6bc>
 800676c:	463b      	mov	r3, r7
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	785b      	ldrb	r3, [r3, #1]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d116      	bne.n	80067a4 <USB_EPStartXfer+0x6bc>
 8006776:	1d3b      	adds	r3, r7, #4
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800677e:	b29b      	uxth	r3, r3
 8006780:	461a      	mov	r2, r3
 8006782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006784:	4413      	add	r3, r2
 8006786:	643b      	str	r3, [r7, #64]	; 0x40
 8006788:	463b      	mov	r3, r7
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	011a      	lsls	r2, r3, #4
 8006790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006792:	4413      	add	r3, r2
 8006794:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006798:	63fb      	str	r3, [r7, #60]	; 0x3c
 800679a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800679e:	b29a      	uxth	r2, r3
 80067a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80067a4:	463b      	mov	r3, r7
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	895b      	ldrh	r3, [r3, #10]
 80067aa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067ae:	463b      	mov	r3, r7
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	6959      	ldr	r1, [r3, #20]
 80067b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80067be:	1d38      	adds	r0, r7, #4
 80067c0:	6800      	ldr	r0, [r0, #0]
 80067c2:	f000 ff1b 	bl	80075fc <USB_WritePMA>
 80067c6:	e1b8      	b.n	8006b3a <USB_EPStartXfer+0xa52>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80067c8:	463b      	mov	r3, r7
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80067d2:	1d3b      	adds	r3, r7, #4
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	463b      	mov	r3, r7
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80067e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ec:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80067f0:	1d3b      	adds	r3, r7, #4
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	463b      	mov	r3, r7
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	441a      	add	r2, r3
 80067fe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006802:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006806:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800680a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800680e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006812:	b29b      	uxth	r3, r3
 8006814:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006816:	1d3b      	adds	r3, r7, #4
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800681c:	1d3b      	adds	r3, r7, #4
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006824:	b29b      	uxth	r3, r3
 8006826:	461a      	mov	r2, r3
 8006828:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800682a:	4413      	add	r3, r2
 800682c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800682e:	463b      	mov	r3, r7
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	011a      	lsls	r2, r3, #4
 8006836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006838:	4413      	add	r3, r2
 800683a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800683e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006844:	b29a      	uxth	r2, r3
 8006846:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006848:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800684a:	463b      	mov	r3, r7
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	891b      	ldrh	r3, [r3, #8]
 8006850:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006854:	463b      	mov	r3, r7
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6959      	ldr	r1, [r3, #20]
 800685a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800685e:	b29b      	uxth	r3, r3
 8006860:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006864:	1d38      	adds	r0, r7, #4
 8006866:	6800      	ldr	r0, [r0, #0]
 8006868:	f000 fec8 	bl	80075fc <USB_WritePMA>
 800686c:	e165      	b.n	8006b3a <USB_EPStartXfer+0xa52>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800686e:	463b      	mov	r3, r7
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	6a1a      	ldr	r2, [r3, #32]
 8006874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006878:	1ad2      	subs	r2, r2, r3
 800687a:	463b      	mov	r3, r7
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006880:	1d3b      	adds	r3, r7, #4
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	463b      	mov	r3, r7
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	b29b      	uxth	r3, r3
 8006892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 80a5 	beq.w	80069e6 <USB_EPStartXfer+0x8fe>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800689c:	1d3b      	adds	r3, r7, #4
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	673b      	str	r3, [r7, #112]	; 0x70
 80068a2:	463b      	mov	r3, r7
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	785b      	ldrb	r3, [r3, #1]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d16e      	bne.n	800698a <USB_EPStartXfer+0x8a2>
 80068ac:	1d3b      	adds	r3, r7, #4
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80068b2:	1d3b      	adds	r3, r7, #4
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	461a      	mov	r2, r3
 80068be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068c0:	4413      	add	r3, r2
 80068c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80068c4:	463b      	mov	r3, r7
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	011a      	lsls	r2, r3, #4
 80068cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068ce:	4413      	add	r3, r2
 80068d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068d4:	667b      	str	r3, [r7, #100]	; 0x64
 80068d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068d8:	881b      	ldrh	r3, [r3, #0]
 80068da:	b29b      	uxth	r3, r3
 80068dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068e4:	801a      	strh	r2, [r3, #0]
 80068e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ea:	2b3e      	cmp	r3, #62	; 0x3e
 80068ec:	d921      	bls.n	8006932 <USB_EPStartXfer+0x84a>
 80068ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068f2:	095b      	lsrs	r3, r3, #5
 80068f4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80068f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068fc:	f003 031f 	and.w	r3, r3, #31
 8006900:	2b00      	cmp	r3, #0
 8006902:	d104      	bne.n	800690e <USB_EPStartXfer+0x826>
 8006904:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006908:	3b01      	subs	r3, #1
 800690a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800690e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006910:	881b      	ldrh	r3, [r3, #0]
 8006912:	b29a      	uxth	r2, r3
 8006914:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006918:	b29b      	uxth	r3, r3
 800691a:	029b      	lsls	r3, r3, #10
 800691c:	b29b      	uxth	r3, r3
 800691e:	4313      	orrs	r3, r2
 8006920:	b29b      	uxth	r3, r3
 8006922:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800692a:	b29a      	uxth	r2, r3
 800692c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800692e:	801a      	strh	r2, [r3, #0]
 8006930:	e047      	b.n	80069c2 <USB_EPStartXfer+0x8da>
 8006932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10a      	bne.n	8006950 <USB_EPStartXfer+0x868>
 800693a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800693c:	881b      	ldrh	r3, [r3, #0]
 800693e:	b29b      	uxth	r3, r3
 8006940:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006944:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006948:	b29a      	uxth	r2, r3
 800694a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800694c:	801a      	strh	r2, [r3, #0]
 800694e:	e038      	b.n	80069c2 <USB_EPStartXfer+0x8da>
 8006950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006954:	085b      	lsrs	r3, r3, #1
 8006956:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800695a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b00      	cmp	r3, #0
 8006964:	d004      	beq.n	8006970 <USB_EPStartXfer+0x888>
 8006966:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800696a:	3301      	adds	r3, #1
 800696c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006972:	881b      	ldrh	r3, [r3, #0]
 8006974:	b29a      	uxth	r2, r3
 8006976:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800697a:	b29b      	uxth	r3, r3
 800697c:	029b      	lsls	r3, r3, #10
 800697e:	b29b      	uxth	r3, r3
 8006980:	4313      	orrs	r3, r2
 8006982:	b29a      	uxth	r2, r3
 8006984:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006986:	801a      	strh	r2, [r3, #0]
 8006988:	e01b      	b.n	80069c2 <USB_EPStartXfer+0x8da>
 800698a:	463b      	mov	r3, r7
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	785b      	ldrb	r3, [r3, #1]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d116      	bne.n	80069c2 <USB_EPStartXfer+0x8da>
 8006994:	1d3b      	adds	r3, r7, #4
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800699c:	b29b      	uxth	r3, r3
 800699e:	461a      	mov	r2, r3
 80069a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069a2:	4413      	add	r3, r2
 80069a4:	673b      	str	r3, [r7, #112]	; 0x70
 80069a6:	463b      	mov	r3, r7
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	011a      	lsls	r2, r3, #4
 80069ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069b0:	4413      	add	r3, r2
 80069b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069bc:	b29a      	uxth	r2, r3
 80069be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069c0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80069c2:	463b      	mov	r3, r7
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	895b      	ldrh	r3, [r3, #10]
 80069c8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069cc:	463b      	mov	r3, r7
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	6959      	ldr	r1, [r3, #20]
 80069d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80069dc:	1d38      	adds	r0, r7, #4
 80069de:	6800      	ldr	r0, [r0, #0]
 80069e0:	f000 fe0c 	bl	80075fc <USB_WritePMA>
 80069e4:	e0a9      	b.n	8006b3a <USB_EPStartXfer+0xa52>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80069e6:	463b      	mov	r3, r7
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	785b      	ldrb	r3, [r3, #1]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d16e      	bne.n	8006ace <USB_EPStartXfer+0x9e6>
 80069f0:	1d3b      	adds	r3, r7, #4
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80069f6:	1d3b      	adds	r3, r7, #4
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	461a      	mov	r2, r3
 8006a02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a04:	4413      	add	r3, r2
 8006a06:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006a08:	463b      	mov	r3, r7
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	011a      	lsls	r2, r3, #4
 8006a10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a12:	4413      	add	r3, r2
 8006a14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a18:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a28:	801a      	strh	r2, [r3, #0]
 8006a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a2e:	2b3e      	cmp	r3, #62	; 0x3e
 8006a30:	d921      	bls.n	8006a76 <USB_EPStartXfer+0x98e>
 8006a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a36:	095b      	lsrs	r3, r3, #5
 8006a38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a40:	f003 031f 	and.w	r3, r3, #31
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d104      	bne.n	8006a52 <USB_EPStartXfer+0x96a>
 8006a48:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006a52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	029b      	lsls	r3, r3, #10
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	4313      	orrs	r3, r2
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a72:	801a      	strh	r2, [r3, #0]
 8006a74:	e050      	b.n	8006b18 <USB_EPStartXfer+0xa30>
 8006a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10a      	bne.n	8006a94 <USB_EPStartXfer+0x9ac>
 8006a7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a80:	881b      	ldrh	r3, [r3, #0]
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a90:	801a      	strh	r2, [r3, #0]
 8006a92:	e041      	b.n	8006b18 <USB_EPStartXfer+0xa30>
 8006a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a98:	085b      	lsrs	r3, r3, #1
 8006a9a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d004      	beq.n	8006ab4 <USB_EPStartXfer+0x9cc>
 8006aaa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006aae:	3301      	adds	r3, #1
 8006ab0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ab4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ab6:	881b      	ldrh	r3, [r3, #0]
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	029b      	lsls	r3, r3, #10
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006aca:	801a      	strh	r2, [r3, #0]
 8006acc:	e024      	b.n	8006b18 <USB_EPStartXfer+0xa30>
 8006ace:	463b      	mov	r3, r7
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	785b      	ldrb	r3, [r3, #1]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d11f      	bne.n	8006b18 <USB_EPStartXfer+0xa30>
 8006ad8:	1d3b      	adds	r3, r7, #4
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ae0:	1d3b      	adds	r3, r7, #4
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	461a      	mov	r2, r3
 8006aec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006af0:	4413      	add	r3, r2
 8006af2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006af6:	463b      	mov	r3, r7
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	011a      	lsls	r2, r3, #4
 8006afe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b02:	4413      	add	r3, r2
 8006b04:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b16:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006b18:	463b      	mov	r3, r7
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	891b      	ldrh	r3, [r3, #8]
 8006b1e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b22:	463b      	mov	r3, r7
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	6959      	ldr	r1, [r3, #20]
 8006b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006b32:	1d38      	adds	r0, r7, #4
 8006b34:	6800      	ldr	r0, [r0, #0]
 8006b36:	f000 fd61 	bl	80075fc <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006b3a:	1d3b      	adds	r3, r7, #4
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	463b      	mov	r3, r7
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	881b      	ldrh	r3, [r3, #0]
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b54:	817b      	strh	r3, [r7, #10]
 8006b56:	897b      	ldrh	r3, [r7, #10]
 8006b58:	f083 0310 	eor.w	r3, r3, #16
 8006b5c:	817b      	strh	r3, [r7, #10]
 8006b5e:	897b      	ldrh	r3, [r7, #10]
 8006b60:	f083 0320 	eor.w	r3, r3, #32
 8006b64:	817b      	strh	r3, [r7, #10]
 8006b66:	1d3b      	adds	r3, r7, #4
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	463b      	mov	r3, r7
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	441a      	add	r2, r3
 8006b74:	897b      	ldrh	r3, [r7, #10]
 8006b76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	8013      	strh	r3, [r2, #0]
 8006b8a:	e3f3      	b.n	8007374 <USB_EPStartXfer+0x128c>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006b8c:	463b      	mov	r3, r7
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	7b1b      	ldrb	r3, [r3, #12]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f040 809c 	bne.w	8006cd0 <USB_EPStartXfer+0xbe8>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006b98:	463b      	mov	r3, r7
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	699a      	ldr	r2, [r3, #24]
 8006b9e:	463b      	mov	r3, r7
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d90e      	bls.n	8006bc6 <USB_EPStartXfer+0xade>
      {
        len = ep->maxpacket;
 8006ba8:	463b      	mov	r3, r7
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006bb2:	463b      	mov	r3, r7
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	699a      	ldr	r2, [r3, #24]
 8006bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bbc:	1ad2      	subs	r2, r2, r3
 8006bbe:	463b      	mov	r3, r7
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	619a      	str	r2, [r3, #24]
 8006bc4:	e008      	b.n	8006bd8 <USB_EPStartXfer+0xaf0>
      }
      else
      {
        len = ep->xfer_len;
 8006bc6:	463b      	mov	r3, r7
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006bd0:	463b      	mov	r3, r7
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006bd8:	1d3b      	adds	r3, r7, #4
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006be0:	1d3b      	adds	r3, r7, #4
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	461a      	mov	r2, r3
 8006bec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006bf6:	463b      	mov	r3, r7
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	011a      	lsls	r2, r3, #4
 8006bfe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c02:	4413      	add	r3, r2
 8006c04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006c0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c10:	881b      	ldrh	r3, [r3, #0]
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c1e:	801a      	strh	r2, [r3, #0]
 8006c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c24:	2b3e      	cmp	r3, #62	; 0x3e
 8006c26:	d923      	bls.n	8006c70 <USB_EPStartXfer+0xb88>
 8006c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c2c:	095b      	lsrs	r3, r3, #5
 8006c2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c36:	f003 031f 	and.w	r3, r3, #31
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d104      	bne.n	8006c48 <USB_EPStartXfer+0xb60>
 8006c3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c42:	3b01      	subs	r3, #1
 8006c44:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c4c:	881b      	ldrh	r3, [r3, #0]
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	029b      	lsls	r3, r3, #10
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c6c:	801a      	strh	r2, [r3, #0]
 8006c6e:	e353      	b.n	8007318 <USB_EPStartXfer+0x1230>
 8006c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d10c      	bne.n	8006c92 <USB_EPStartXfer+0xbaa>
 8006c78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c7c:	881b      	ldrh	r3, [r3, #0]
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c8e:	801a      	strh	r2, [r3, #0]
 8006c90:	e342      	b.n	8007318 <USB_EPStartXfer+0x1230>
 8006c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c96:	085b      	lsrs	r3, r3, #1
 8006c98:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d004      	beq.n	8006cb2 <USB_EPStartXfer+0xbca>
 8006ca8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006cac:	3301      	adds	r3, #1
 8006cae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006cb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cb6:	881b      	ldrh	r3, [r3, #0]
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	029b      	lsls	r3, r3, #10
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ccc:	801a      	strh	r2, [r3, #0]
 8006cce:	e323      	b.n	8007318 <USB_EPStartXfer+0x1230>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006cd0:	463b      	mov	r3, r7
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	78db      	ldrb	r3, [r3, #3]
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	f040 81a9 	bne.w	800702e <USB_EPStartXfer+0xf46>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006cdc:	463b      	mov	r3, r7
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	785b      	ldrb	r3, [r3, #1]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f040 8082 	bne.w	8006dec <USB_EPStartXfer+0xd04>
 8006ce8:	1d3b      	adds	r3, r7, #4
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006cf0:	1d3b      	adds	r3, r7, #4
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d00:	4413      	add	r3, r2
 8006d02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d06:	463b      	mov	r3, r7
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	011a      	lsls	r2, r3, #4
 8006d0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d12:	4413      	add	r3, r2
 8006d14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d20:	881b      	ldrh	r3, [r3, #0]
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d2e:	801a      	strh	r2, [r3, #0]
 8006d30:	463b      	mov	r3, r7
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	2b3e      	cmp	r3, #62	; 0x3e
 8006d38:	d925      	bls.n	8006d86 <USB_EPStartXfer+0xc9e>
 8006d3a:	463b      	mov	r3, r7
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	095b      	lsrs	r3, r3, #5
 8006d42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d46:	463b      	mov	r3, r7
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	f003 031f 	and.w	r3, r3, #31
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d104      	bne.n	8006d5e <USB_EPStartXfer+0xc76>
 8006d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d62:	881b      	ldrh	r3, [r3, #0]
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	029b      	lsls	r3, r3, #10
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	4313      	orrs	r3, r2
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d82:	801a      	strh	r2, [r3, #0]
 8006d84:	e058      	b.n	8006e38 <USB_EPStartXfer+0xd50>
 8006d86:	463b      	mov	r3, r7
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10c      	bne.n	8006daa <USB_EPStartXfer+0xcc2>
 8006d90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d94:	881b      	ldrh	r3, [r3, #0]
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006da6:	801a      	strh	r2, [r3, #0]
 8006da8:	e046      	b.n	8006e38 <USB_EPStartXfer+0xd50>
 8006daa:	463b      	mov	r3, r7
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	085b      	lsrs	r3, r3, #1
 8006db2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006db6:	463b      	mov	r3, r7
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	f003 0301 	and.w	r3, r3, #1
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d004      	beq.n	8006dce <USB_EPStartXfer+0xce6>
 8006dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dc8:	3301      	adds	r3, #1
 8006dca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006dce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006dd2:	881b      	ldrh	r3, [r3, #0]
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	029b      	lsls	r3, r3, #10
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	4313      	orrs	r3, r2
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006de8:	801a      	strh	r2, [r3, #0]
 8006dea:	e025      	b.n	8006e38 <USB_EPStartXfer+0xd50>
 8006dec:	463b      	mov	r3, r7
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	785b      	ldrb	r3, [r3, #1]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d120      	bne.n	8006e38 <USB_EPStartXfer+0xd50>
 8006df6:	1d3b      	adds	r3, r7, #4
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006dfe:	1d3b      	adds	r3, r7, #4
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	461a      	mov	r2, r3
 8006e0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e0e:	4413      	add	r3, r2
 8006e10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e14:	463b      	mov	r3, r7
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	011a      	lsls	r2, r3, #4
 8006e1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e20:	4413      	add	r3, r2
 8006e22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e2a:	463b      	mov	r3, r7
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006e36:	801a      	strh	r2, [r3, #0]
 8006e38:	1d3b      	adds	r3, r7, #4
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006e40:	463b      	mov	r3, r7
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	785b      	ldrb	r3, [r3, #1]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	f040 8082 	bne.w	8006f50 <USB_EPStartXfer+0xe68>
 8006e4c:	1d3b      	adds	r3, r7, #4
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e54:	1d3b      	adds	r3, r7, #4
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	461a      	mov	r2, r3
 8006e60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e64:	4413      	add	r3, r2
 8006e66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e6a:	463b      	mov	r3, r7
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	011a      	lsls	r2, r3, #4
 8006e72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e76:	4413      	add	r3, r2
 8006e78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e84:	881b      	ldrh	r3, [r3, #0]
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e92:	801a      	strh	r2, [r3, #0]
 8006e94:	463b      	mov	r3, r7
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	2b3e      	cmp	r3, #62	; 0x3e
 8006e9c:	d925      	bls.n	8006eea <USB_EPStartXfer+0xe02>
 8006e9e:	463b      	mov	r3, r7
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	095b      	lsrs	r3, r3, #5
 8006ea6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006eaa:	463b      	mov	r3, r7
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	f003 031f 	and.w	r3, r3, #31
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d104      	bne.n	8006ec2 <USB_EPStartXfer+0xdda>
 8006eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ec2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ec6:	881b      	ldrh	r3, [r3, #0]
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	029b      	lsls	r3, r3, #10
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006edc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ee6:	801a      	strh	r2, [r3, #0]
 8006ee8:	e054      	b.n	8006f94 <USB_EPStartXfer+0xeac>
 8006eea:	463b      	mov	r3, r7
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d10c      	bne.n	8006f0e <USB_EPStartXfer+0xe26>
 8006ef4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ef8:	881b      	ldrh	r3, [r3, #0]
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f0a:	801a      	strh	r2, [r3, #0]
 8006f0c:	e042      	b.n	8006f94 <USB_EPStartXfer+0xeac>
 8006f0e:	463b      	mov	r3, r7
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	085b      	lsrs	r3, r3, #1
 8006f16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f1a:	463b      	mov	r3, r7
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	f003 0301 	and.w	r3, r3, #1
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d004      	beq.n	8006f32 <USB_EPStartXfer+0xe4a>
 8006f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	029b      	lsls	r3, r3, #10
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	4313      	orrs	r3, r2
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f4c:	801a      	strh	r2, [r3, #0]
 8006f4e:	e021      	b.n	8006f94 <USB_EPStartXfer+0xeac>
 8006f50:	463b      	mov	r3, r7
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	785b      	ldrb	r3, [r3, #1]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d11c      	bne.n	8006f94 <USB_EPStartXfer+0xeac>
 8006f5a:	1d3b      	adds	r3, r7, #4
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	461a      	mov	r2, r3
 8006f66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006f70:	463b      	mov	r3, r7
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	011a      	lsls	r2, r3, #4
 8006f78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f86:	463b      	mov	r3, r7
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f92:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006f94:	463b      	mov	r3, r7
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	69db      	ldr	r3, [r3, #28]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f000 81bc 	beq.w	8007318 <USB_EPStartXfer+0x1230>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006fa0:	1d3b      	adds	r3, r7, #4
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	463b      	mov	r3, r7
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	4413      	add	r3, r2
 8006fae:	881b      	ldrh	r3, [r3, #0]
 8006fb0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006fb4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006fb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d005      	beq.n	8006fcc <USB_EPStartXfer+0xee4>
 8006fc0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10d      	bne.n	8006fe8 <USB_EPStartXfer+0xf00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006fcc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f040 819f 	bne.w	8007318 <USB_EPStartXfer+0x1230>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006fda:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f040 8198 	bne.w	8007318 <USB_EPStartXfer+0x1230>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006fe8:	1d3b      	adds	r3, r7, #4
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	463b      	mov	r3, r7
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4413      	add	r3, r2
 8006ff6:	881b      	ldrh	r3, [r3, #0]
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007002:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007006:	1d3b      	adds	r3, r7, #4
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	463b      	mov	r3, r7
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	441a      	add	r2, r3
 8007014:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007018:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800701c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007024:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007028:	b29b      	uxth	r3, r3
 800702a:	8013      	strh	r3, [r2, #0]
 800702c:	e174      	b.n	8007318 <USB_EPStartXfer+0x1230>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800702e:	463b      	mov	r3, r7
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	78db      	ldrb	r3, [r3, #3]
 8007034:	2b01      	cmp	r3, #1
 8007036:	f040 816d 	bne.w	8007314 <USB_EPStartXfer+0x122c>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800703a:	463b      	mov	r3, r7
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	699a      	ldr	r2, [r3, #24]
 8007040:	463b      	mov	r3, r7
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	429a      	cmp	r2, r3
 8007048:	d90e      	bls.n	8007068 <USB_EPStartXfer+0xf80>
        {
          len = ep->maxpacket;
 800704a:	463b      	mov	r3, r7
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007054:	463b      	mov	r3, r7
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	699a      	ldr	r2, [r3, #24]
 800705a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800705e:	1ad2      	subs	r2, r2, r3
 8007060:	463b      	mov	r3, r7
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	619a      	str	r2, [r3, #24]
 8007066:	e008      	b.n	800707a <USB_EPStartXfer+0xf92>
        }
        else
        {
          len = ep->xfer_len;
 8007068:	463b      	mov	r3, r7
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007072:	463b      	mov	r3, r7
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2200      	movs	r2, #0
 8007078:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800707a:	463b      	mov	r3, r7
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	785b      	ldrb	r3, [r3, #1]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d17b      	bne.n	800717c <USB_EPStartXfer+0x1094>
 8007084:	1d3b      	adds	r3, r7, #4
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800708c:	1d3b      	adds	r3, r7, #4
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007094:	b29b      	uxth	r3, r3
 8007096:	461a      	mov	r2, r3
 8007098:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800709c:	4413      	add	r3, r2
 800709e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80070a2:	463b      	mov	r3, r7
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	011a      	lsls	r2, r3, #4
 80070aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80070ae:	4413      	add	r3, r2
 80070b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070bc:	881b      	ldrh	r3, [r3, #0]
 80070be:	b29b      	uxth	r3, r3
 80070c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070ca:	801a      	strh	r2, [r3, #0]
 80070cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070d0:	2b3e      	cmp	r3, #62	; 0x3e
 80070d2:	d923      	bls.n	800711c <USB_EPStartXfer+0x1034>
 80070d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070d8:	095b      	lsrs	r3, r3, #5
 80070da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80070de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070e2:	f003 031f 	and.w	r3, r3, #31
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d104      	bne.n	80070f4 <USB_EPStartXfer+0x100c>
 80070ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070ee:	3b01      	subs	r3, #1
 80070f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80070f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007100:	b29b      	uxth	r3, r3
 8007102:	029b      	lsls	r3, r3, #10
 8007104:	b29b      	uxth	r3, r3
 8007106:	4313      	orrs	r3, r2
 8007108:	b29b      	uxth	r3, r3
 800710a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800710e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007112:	b29a      	uxth	r2, r3
 8007114:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007118:	801a      	strh	r2, [r3, #0]
 800711a:	e054      	b.n	80071c6 <USB_EPStartXfer+0x10de>
 800711c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007120:	2b00      	cmp	r3, #0
 8007122:	d10c      	bne.n	800713e <USB_EPStartXfer+0x1056>
 8007124:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007128:	881b      	ldrh	r3, [r3, #0]
 800712a:	b29b      	uxth	r3, r3
 800712c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007130:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007134:	b29a      	uxth	r2, r3
 8007136:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800713a:	801a      	strh	r2, [r3, #0]
 800713c:	e043      	b.n	80071c6 <USB_EPStartXfer+0x10de>
 800713e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007142:	085b      	lsrs	r3, r3, #1
 8007144:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800714c:	f003 0301 	and.w	r3, r3, #1
 8007150:	2b00      	cmp	r3, #0
 8007152:	d004      	beq.n	800715e <USB_EPStartXfer+0x1076>
 8007154:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007158:	3301      	adds	r3, #1
 800715a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800715e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007162:	881b      	ldrh	r3, [r3, #0]
 8007164:	b29a      	uxth	r2, r3
 8007166:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800716a:	b29b      	uxth	r3, r3
 800716c:	029b      	lsls	r3, r3, #10
 800716e:	b29b      	uxth	r3, r3
 8007170:	4313      	orrs	r3, r2
 8007172:	b29a      	uxth	r2, r3
 8007174:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007178:	801a      	strh	r2, [r3, #0]
 800717a:	e024      	b.n	80071c6 <USB_EPStartXfer+0x10de>
 800717c:	463b      	mov	r3, r7
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	785b      	ldrb	r3, [r3, #1]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d11f      	bne.n	80071c6 <USB_EPStartXfer+0x10de>
 8007186:	1d3b      	adds	r3, r7, #4
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800718e:	1d3b      	adds	r3, r7, #4
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007196:	b29b      	uxth	r3, r3
 8007198:	461a      	mov	r2, r3
 800719a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800719e:	4413      	add	r3, r2
 80071a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80071a4:	463b      	mov	r3, r7
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	011a      	lsls	r2, r3, #4
 80071ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071b0:	4413      	add	r3, r2
 80071b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80071ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071be:	b29a      	uxth	r2, r3
 80071c0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80071c4:	801a      	strh	r2, [r3, #0]
 80071c6:	1d3b      	adds	r3, r7, #4
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80071ce:	463b      	mov	r3, r7
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	785b      	ldrb	r3, [r3, #1]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d17b      	bne.n	80072d0 <USB_EPStartXfer+0x11e8>
 80071d8:	1d3b      	adds	r3, r7, #4
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80071e0:	1d3b      	adds	r3, r7, #4
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	461a      	mov	r2, r3
 80071ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80071f0:	4413      	add	r3, r2
 80071f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80071f6:	463b      	mov	r3, r7
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	011a      	lsls	r2, r3, #4
 80071fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007202:	4413      	add	r3, r2
 8007204:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007208:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800720c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007210:	881b      	ldrh	r3, [r3, #0]
 8007212:	b29b      	uxth	r3, r3
 8007214:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007218:	b29a      	uxth	r2, r3
 800721a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800721e:	801a      	strh	r2, [r3, #0]
 8007220:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007224:	2b3e      	cmp	r3, #62	; 0x3e
 8007226:	d923      	bls.n	8007270 <USB_EPStartXfer+0x1188>
 8007228:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800722c:	095b      	lsrs	r3, r3, #5
 800722e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007232:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007236:	f003 031f 	and.w	r3, r3, #31
 800723a:	2b00      	cmp	r3, #0
 800723c:	d104      	bne.n	8007248 <USB_EPStartXfer+0x1160>
 800723e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007242:	3b01      	subs	r3, #1
 8007244:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007248:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800724c:	881b      	ldrh	r3, [r3, #0]
 800724e:	b29a      	uxth	r2, r3
 8007250:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007254:	b29b      	uxth	r3, r3
 8007256:	029b      	lsls	r3, r3, #10
 8007258:	b29b      	uxth	r3, r3
 800725a:	4313      	orrs	r3, r2
 800725c:	b29b      	uxth	r3, r3
 800725e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007262:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007266:	b29a      	uxth	r2, r3
 8007268:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800726c:	801a      	strh	r2, [r3, #0]
 800726e:	e053      	b.n	8007318 <USB_EPStartXfer+0x1230>
 8007270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10c      	bne.n	8007292 <USB_EPStartXfer+0x11aa>
 8007278:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800727c:	881b      	ldrh	r3, [r3, #0]
 800727e:	b29b      	uxth	r3, r3
 8007280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007288:	b29a      	uxth	r2, r3
 800728a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800728e:	801a      	strh	r2, [r3, #0]
 8007290:	e042      	b.n	8007318 <USB_EPStartXfer+0x1230>
 8007292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007296:	085b      	lsrs	r3, r3, #1
 8007298:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800729c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072a0:	f003 0301 	and.w	r3, r3, #1
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d004      	beq.n	80072b2 <USB_EPStartXfer+0x11ca>
 80072a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072ac:	3301      	adds	r3, #1
 80072ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80072b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072b6:	881b      	ldrh	r3, [r3, #0]
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072be:	b29b      	uxth	r3, r3
 80072c0:	029b      	lsls	r3, r3, #10
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	4313      	orrs	r3, r2
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072cc:	801a      	strh	r2, [r3, #0]
 80072ce:	e023      	b.n	8007318 <USB_EPStartXfer+0x1230>
 80072d0:	463b      	mov	r3, r7
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	785b      	ldrb	r3, [r3, #1]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d11e      	bne.n	8007318 <USB_EPStartXfer+0x1230>
 80072da:	1d3b      	adds	r3, r7, #4
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	461a      	mov	r2, r3
 80072e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80072ea:	4413      	add	r3, r2
 80072ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80072f0:	463b      	mov	r3, r7
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	011a      	lsls	r2, r3, #4
 80072f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80072fc:	4413      	add	r3, r2
 80072fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007302:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800730a:	b29a      	uxth	r2, r3
 800730c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007310:	801a      	strh	r2, [r3, #0]
 8007312:	e001      	b.n	8007318 <USB_EPStartXfer+0x1230>
      }
      else
      {
        return HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	e02e      	b.n	8007376 <USB_EPStartXfer+0x128e>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007318:	1d3b      	adds	r3, r7, #4
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	463b      	mov	r3, r7
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	4413      	add	r3, r2
 8007326:	881b      	ldrh	r3, [r3, #0]
 8007328:	b29b      	uxth	r3, r3
 800732a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800732e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007332:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007336:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800733a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800733e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007342:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007346:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800734a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800734e:	1d3b      	adds	r3, r7, #4
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	463b      	mov	r3, r7
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	441a      	add	r2, r3
 800735c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007360:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007364:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007368:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800736c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007370:	b29b      	uxth	r3, r3
 8007372:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	785b      	ldrb	r3, [r3, #1]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d020      	beq.n	80073d4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	4413      	add	r3, r2
 800739c:	881b      	ldrh	r3, [r3, #0]
 800739e:	b29b      	uxth	r3, r3
 80073a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073a8:	81bb      	strh	r3, [r7, #12]
 80073aa:	89bb      	ldrh	r3, [r7, #12]
 80073ac:	f083 0310 	eor.w	r3, r3, #16
 80073b0:	81bb      	strh	r3, [r7, #12]
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	441a      	add	r2, r3
 80073bc:	89bb      	ldrh	r3, [r7, #12]
 80073be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	8013      	strh	r3, [r2, #0]
 80073d2:	e01f      	b.n	8007414 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4413      	add	r3, r2
 80073de:	881b      	ldrh	r3, [r3, #0]
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ea:	81fb      	strh	r3, [r7, #14]
 80073ec:	89fb      	ldrh	r3, [r7, #14]
 80073ee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80073f2:	81fb      	strh	r3, [r7, #14]
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	441a      	add	r2, r3
 80073fe:	89fb      	ldrh	r3, [r7, #14]
 8007400:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007404:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007408:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800740c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007410:	b29b      	uxth	r3, r3
 8007412:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3714      	adds	r7, #20
 800741a:	46bd      	mov	sp, r7
 800741c:	bc80      	pop	{r7}
 800741e:	4770      	bx	lr

08007420 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007420:	b480      	push	{r7}
 8007422:	b087      	sub	sp, #28
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	7b1b      	ldrb	r3, [r3, #12]
 800742e:	2b00      	cmp	r3, #0
 8007430:	f040 809d 	bne.w	800756e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	785b      	ldrb	r3, [r3, #1]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d04c      	beq.n	80074d6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	4413      	add	r3, r2
 8007446:	881b      	ldrh	r3, [r3, #0]
 8007448:	823b      	strh	r3, [r7, #16]
 800744a:	8a3b      	ldrh	r3, [r7, #16]
 800744c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007450:	2b00      	cmp	r3, #0
 8007452:	d01b      	beq.n	800748c <USB_EPClearStall+0x6c>
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	4413      	add	r3, r2
 800745e:	881b      	ldrh	r3, [r3, #0]
 8007460:	b29b      	uxth	r3, r3
 8007462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800746a:	81fb      	strh	r3, [r7, #14]
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	441a      	add	r2, r3
 8007476:	89fb      	ldrh	r3, [r7, #14]
 8007478:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800747c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007480:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007484:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007488:	b29b      	uxth	r3, r3
 800748a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	78db      	ldrb	r3, [r3, #3]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d06c      	beq.n	800756e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	4413      	add	r3, r2
 800749e:	881b      	ldrh	r3, [r3, #0]
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074aa:	81bb      	strh	r3, [r7, #12]
 80074ac:	89bb      	ldrh	r3, [r7, #12]
 80074ae:	f083 0320 	eor.w	r3, r3, #32
 80074b2:	81bb      	strh	r3, [r7, #12]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	441a      	add	r2, r3
 80074be:	89bb      	ldrh	r3, [r7, #12]
 80074c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	8013      	strh	r3, [r2, #0]
 80074d4:	e04b      	b.n	800756e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4413      	add	r3, r2
 80074e0:	881b      	ldrh	r3, [r3, #0]
 80074e2:	82fb      	strh	r3, [r7, #22]
 80074e4:	8afb      	ldrh	r3, [r7, #22]
 80074e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d01b      	beq.n	8007526 <USB_EPClearStall+0x106>
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4413      	add	r3, r2
 80074f8:	881b      	ldrh	r3, [r3, #0]
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007504:	82bb      	strh	r3, [r7, #20]
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	441a      	add	r2, r3
 8007510:	8abb      	ldrh	r3, [r7, #20]
 8007512:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007516:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800751a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800751e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007522:	b29b      	uxth	r3, r3
 8007524:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	4413      	add	r3, r2
 8007530:	881b      	ldrh	r3, [r3, #0]
 8007532:	b29b      	uxth	r3, r3
 8007534:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800753c:	827b      	strh	r3, [r7, #18]
 800753e:	8a7b      	ldrh	r3, [r7, #18]
 8007540:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007544:	827b      	strh	r3, [r7, #18]
 8007546:	8a7b      	ldrh	r3, [r7, #18]
 8007548:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800754c:	827b      	strh	r3, [r7, #18]
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	441a      	add	r2, r3
 8007558:	8a7b      	ldrh	r3, [r7, #18]
 800755a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800755e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800756a:	b29b      	uxth	r3, r3
 800756c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	371c      	adds	r7, #28
 8007574:	46bd      	mov	sp, r7
 8007576:	bc80      	pop	{r7}
 8007578:	4770      	bx	lr

0800757a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800757a:	b480      	push	{r7}
 800757c:	b083      	sub	sp, #12
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
 8007582:	460b      	mov	r3, r1
 8007584:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007586:	78fb      	ldrb	r3, [r7, #3]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d103      	bne.n	8007594 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2280      	movs	r2, #128	; 0x80
 8007590:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	370c      	adds	r7, #12
 800759a:	46bd      	mov	sp, r7
 800759c:	bc80      	pop	{r7}
 800759e:	4770      	bx	lr

080075a0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	370c      	adds	r7, #12
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bc80      	pop	{r7}
 80075b2:	4770      	bx	lr

080075b4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	370c      	adds	r7, #12
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bc80      	pop	{r7}
 80075c6:	4770      	bx	lr

080075c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80075da:	68fb      	ldr	r3, [r7, #12]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3714      	adds	r7, #20
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bc80      	pop	{r7}
 80075e4:	4770      	bx	lr

080075e6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b083      	sub	sp, #12
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
 80075ee:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	370c      	adds	r7, #12
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bc80      	pop	{r7}
 80075fa:	4770      	bx	lr

080075fc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b08b      	sub	sp, #44	; 0x2c
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	4611      	mov	r1, r2
 8007608:	461a      	mov	r2, r3
 800760a:	460b      	mov	r3, r1
 800760c:	80fb      	strh	r3, [r7, #6]
 800760e:	4613      	mov	r3, r2
 8007610:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007612:	88bb      	ldrh	r3, [r7, #4]
 8007614:	3301      	adds	r3, #1
 8007616:	085b      	lsrs	r3, r3, #1
 8007618:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007622:	88fb      	ldrh	r3, [r7, #6]
 8007624:	005a      	lsls	r2, r3, #1
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	4413      	add	r3, r2
 800762a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800762e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	627b      	str	r3, [r7, #36]	; 0x24
 8007634:	e01e      	b.n	8007674 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	3301      	adds	r3, #1
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	021b      	lsls	r3, r3, #8
 8007644:	b21a      	sxth	r2, r3
 8007646:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800764a:	4313      	orrs	r3, r2
 800764c:	b21b      	sxth	r3, r3
 800764e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007650:	6a3b      	ldr	r3, [r7, #32]
 8007652:	8a7a      	ldrh	r2, [r7, #18]
 8007654:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007656:	6a3b      	ldr	r3, [r7, #32]
 8007658:	3302      	adds	r3, #2
 800765a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800765c:	6a3b      	ldr	r3, [r7, #32]
 800765e:	3302      	adds	r3, #2
 8007660:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	3301      	adds	r3, #1
 8007666:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	3301      	adds	r3, #1
 800766c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800766e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007670:	3b01      	subs	r3, #1
 8007672:	627b      	str	r3, [r7, #36]	; 0x24
 8007674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1dd      	bne.n	8007636 <USB_WritePMA+0x3a>
  }
}
 800767a:	bf00      	nop
 800767c:	bf00      	nop
 800767e:	372c      	adds	r7, #44	; 0x2c
 8007680:	46bd      	mov	sp, r7
 8007682:	bc80      	pop	{r7}
 8007684:	4770      	bx	lr

08007686 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007686:	b480      	push	{r7}
 8007688:	b08b      	sub	sp, #44	; 0x2c
 800768a:	af00      	add	r7, sp, #0
 800768c:	60f8      	str	r0, [r7, #12]
 800768e:	60b9      	str	r1, [r7, #8]
 8007690:	4611      	mov	r1, r2
 8007692:	461a      	mov	r2, r3
 8007694:	460b      	mov	r3, r1
 8007696:	80fb      	strh	r3, [r7, #6]
 8007698:	4613      	mov	r3, r2
 800769a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800769c:	88bb      	ldrh	r3, [r7, #4]
 800769e:	085b      	lsrs	r3, r3, #1
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80076ac:	88fb      	ldrh	r3, [r7, #6]
 80076ae:	005a      	lsls	r2, r3, #1
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	4413      	add	r3, r2
 80076b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076b8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	627b      	str	r3, [r7, #36]	; 0x24
 80076be:	e01b      	b.n	80076f8 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80076c0:	6a3b      	ldr	r3, [r7, #32]
 80076c2:	881b      	ldrh	r3, [r3, #0]
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80076c8:	6a3b      	ldr	r3, [r7, #32]
 80076ca:	3302      	adds	r3, #2
 80076cc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	b2da      	uxtb	r2, r3
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	3301      	adds	r3, #1
 80076da:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	0a1b      	lsrs	r3, r3, #8
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	3301      	adds	r3, #1
 80076ea:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80076ec:	6a3b      	ldr	r3, [r7, #32]
 80076ee:	3302      	adds	r3, #2
 80076f0:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80076f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f4:	3b01      	subs	r3, #1
 80076f6:	627b      	str	r3, [r7, #36]	; 0x24
 80076f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1e0      	bne.n	80076c0 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80076fe:	88bb      	ldrh	r3, [r7, #4]
 8007700:	f003 0301 	and.w	r3, r3, #1
 8007704:	b29b      	uxth	r3, r3
 8007706:	2b00      	cmp	r3, #0
 8007708:	d007      	beq.n	800771a <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	881b      	ldrh	r3, [r3, #0]
 800770e:	b29b      	uxth	r3, r3
 8007710:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	b2da      	uxtb	r2, r3
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	701a      	strb	r2, [r3, #0]
  }
}
 800771a:	bf00      	nop
 800771c:	372c      	adds	r7, #44	; 0x2c
 800771e:	46bd      	mov	sp, r7
 8007720:	bc80      	pop	{r7}
 8007722:	4770      	bx	lr

08007724 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	460b      	mov	r3, r1
 800772e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007730:	2300      	movs	r3, #0
 8007732:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	7c1b      	ldrb	r3, [r3, #16]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d115      	bne.n	8007768 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800773c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007740:	2202      	movs	r2, #2
 8007742:	2181      	movs	r1, #129	; 0x81
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f001 fe30 	bl	80093aa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2201      	movs	r2, #1
 800774e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007750:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007754:	2202      	movs	r2, #2
 8007756:	2101      	movs	r1, #1
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f001 fe26 	bl	80093aa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2201      	movs	r2, #1
 8007762:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007766:	e012      	b.n	800778e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007768:	2340      	movs	r3, #64	; 0x40
 800776a:	2202      	movs	r2, #2
 800776c:	2181      	movs	r1, #129	; 0x81
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f001 fe1b 	bl	80093aa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800777a:	2340      	movs	r3, #64	; 0x40
 800777c:	2202      	movs	r2, #2
 800777e:	2101      	movs	r1, #1
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f001 fe12 	bl	80093aa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800778e:	2308      	movs	r3, #8
 8007790:	2203      	movs	r2, #3
 8007792:	2182      	movs	r1, #130	; 0x82
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f001 fe08 	bl	80093aa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80077a0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80077a4:	f001 ff28 	bl	80095f8 <USBD_static_malloc>
 80077a8:	4602      	mov	r2, r0
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d102      	bne.n	80077c0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80077ba:	2301      	movs	r3, #1
 80077bc:	73fb      	strb	r3, [r7, #15]
 80077be:	e026      	b.n	800780e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077c6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	2200      	movs	r2, #0
 80077de:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	7c1b      	ldrb	r3, [r3, #16]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d109      	bne.n	80077fe <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077f4:	2101      	movs	r1, #1
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f001 fec7 	bl	800958a <USBD_LL_PrepareReceive>
 80077fc:	e007      	b.n	800780e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007804:	2340      	movs	r3, #64	; 0x40
 8007806:	2101      	movs	r1, #1
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f001 febe 	bl	800958a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800780e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007810:	4618      	mov	r0, r3
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	460b      	mov	r3, r1
 8007822:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007824:	2300      	movs	r3, #0
 8007826:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007828:	2181      	movs	r1, #129	; 0x81
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f001 fde3 	bl	80093f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007836:	2101      	movs	r1, #1
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f001 fddc 	bl	80093f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007846:	2182      	movs	r1, #130	; 0x82
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f001 fdd4 	bl	80093f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00e      	beq.n	800787c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800786e:	4618      	mov	r0, r3
 8007870:	f001 fece 	bl	8009610 <USBD_static_free>
    pdev->pClassData = NULL;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800787c:	7bfb      	ldrb	r3, [r7, #15]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b086      	sub	sp, #24
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
 800788e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007896:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007898:	2300      	movs	r3, #0
 800789a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800789c:	2300      	movs	r3, #0
 800789e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d039      	beq.n	8007924 <USBD_CDC_Setup+0x9e>
 80078b0:	2b20      	cmp	r3, #32
 80078b2:	d17f      	bne.n	80079b4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	88db      	ldrh	r3, [r3, #6]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d029      	beq.n	8007910 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	b25b      	sxtb	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	da11      	bge.n	80078ea <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80078d2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80078d4:	683a      	ldr	r2, [r7, #0]
 80078d6:	88d2      	ldrh	r2, [r2, #6]
 80078d8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80078da:	6939      	ldr	r1, [r7, #16]
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	88db      	ldrh	r3, [r3, #6]
 80078e0:	461a      	mov	r2, r3
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f001 f9d9 	bl	8008c9a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80078e8:	e06b      	b.n	80079c2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	785a      	ldrb	r2, [r3, #1]
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	88db      	ldrh	r3, [r3, #6]
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007900:	6939      	ldr	r1, [r7, #16]
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	88db      	ldrh	r3, [r3, #6]
 8007906:	461a      	mov	r2, r3
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f001 f9f4 	bl	8008cf6 <USBD_CtlPrepareRx>
      break;
 800790e:	e058      	b.n	80079c2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	683a      	ldr	r2, [r7, #0]
 800791a:	7850      	ldrb	r0, [r2, #1]
 800791c:	2200      	movs	r2, #0
 800791e:	6839      	ldr	r1, [r7, #0]
 8007920:	4798      	blx	r3
      break;
 8007922:	e04e      	b.n	80079c2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	785b      	ldrb	r3, [r3, #1]
 8007928:	2b0b      	cmp	r3, #11
 800792a:	d02e      	beq.n	800798a <USBD_CDC_Setup+0x104>
 800792c:	2b0b      	cmp	r3, #11
 800792e:	dc38      	bgt.n	80079a2 <USBD_CDC_Setup+0x11c>
 8007930:	2b00      	cmp	r3, #0
 8007932:	d002      	beq.n	800793a <USBD_CDC_Setup+0xb4>
 8007934:	2b0a      	cmp	r3, #10
 8007936:	d014      	beq.n	8007962 <USBD_CDC_Setup+0xdc>
 8007938:	e033      	b.n	80079a2 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007940:	2b03      	cmp	r3, #3
 8007942:	d107      	bne.n	8007954 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007944:	f107 030c 	add.w	r3, r7, #12
 8007948:	2202      	movs	r2, #2
 800794a:	4619      	mov	r1, r3
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f001 f9a4 	bl	8008c9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007952:	e02e      	b.n	80079b2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007954:	6839      	ldr	r1, [r7, #0]
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f001 f935 	bl	8008bc6 <USBD_CtlError>
            ret = USBD_FAIL;
 800795c:	2302      	movs	r3, #2
 800795e:	75fb      	strb	r3, [r7, #23]
          break;
 8007960:	e027      	b.n	80079b2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007968:	2b03      	cmp	r3, #3
 800796a:	d107      	bne.n	800797c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800796c:	f107 030f 	add.w	r3, r7, #15
 8007970:	2201      	movs	r2, #1
 8007972:	4619      	mov	r1, r3
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f001 f990 	bl	8008c9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800797a:	e01a      	b.n	80079b2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800797c:	6839      	ldr	r1, [r7, #0]
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f001 f921 	bl	8008bc6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007984:	2302      	movs	r3, #2
 8007986:	75fb      	strb	r3, [r7, #23]
          break;
 8007988:	e013      	b.n	80079b2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007990:	2b03      	cmp	r3, #3
 8007992:	d00d      	beq.n	80079b0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007994:	6839      	ldr	r1, [r7, #0]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f001 f915 	bl	8008bc6 <USBD_CtlError>
            ret = USBD_FAIL;
 800799c:	2302      	movs	r3, #2
 800799e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80079a0:	e006      	b.n	80079b0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80079a2:	6839      	ldr	r1, [r7, #0]
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f001 f90e 	bl	8008bc6 <USBD_CtlError>
          ret = USBD_FAIL;
 80079aa:	2302      	movs	r3, #2
 80079ac:	75fb      	strb	r3, [r7, #23]
          break;
 80079ae:	e000      	b.n	80079b2 <USBD_CDC_Setup+0x12c>
          break;
 80079b0:	bf00      	nop
      }
      break;
 80079b2:	e006      	b.n	80079c2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80079b4:	6839      	ldr	r1, [r7, #0]
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f001 f905 	bl	8008bc6 <USBD_CtlError>
      ret = USBD_FAIL;
 80079bc:	2302      	movs	r3, #2
 80079be:	75fb      	strb	r3, [r7, #23]
      break;
 80079c0:	bf00      	nop
  }

  return ret;
 80079c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3718      	adds	r7, #24
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	460b      	mov	r3, r1
 80079d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079de:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079e6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d03a      	beq.n	8007a68 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80079f2:	78fa      	ldrb	r2, [r7, #3]
 80079f4:	6879      	ldr	r1, [r7, #4]
 80079f6:	4613      	mov	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4413      	add	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	440b      	add	r3, r1
 8007a00:	331c      	adds	r3, #28
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d029      	beq.n	8007a5c <USBD_CDC_DataIn+0x90>
 8007a08:	78fa      	ldrb	r2, [r7, #3]
 8007a0a:	6879      	ldr	r1, [r7, #4]
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4413      	add	r3, r2
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	440b      	add	r3, r1
 8007a16:	331c      	adds	r3, #28
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	78f9      	ldrb	r1, [r7, #3]
 8007a1c:	68b8      	ldr	r0, [r7, #8]
 8007a1e:	460b      	mov	r3, r1
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	440b      	add	r3, r1
 8007a24:	00db      	lsls	r3, r3, #3
 8007a26:	4403      	add	r3, r0
 8007a28:	3320      	adds	r3, #32
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007a30:	fb03 f301 	mul.w	r3, r3, r1
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d110      	bne.n	8007a5c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007a3a:	78fa      	ldrb	r2, [r7, #3]
 8007a3c:	6879      	ldr	r1, [r7, #4]
 8007a3e:	4613      	mov	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	440b      	add	r3, r1
 8007a48:	331c      	adds	r3, #28
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007a4e:	78f9      	ldrb	r1, [r7, #3]
 8007a50:	2300      	movs	r3, #0
 8007a52:	2200      	movs	r2, #0
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f001 fd75 	bl	8009544 <USBD_LL_Transmit>
 8007a5a:	e003      	b.n	8007a64 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007a64:	2300      	movs	r3, #0
 8007a66:	e000      	b.n	8007a6a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007a68:	2302      	movs	r3, #2
  }
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b084      	sub	sp, #16
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a84:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007a86:	78fb      	ldrb	r3, [r7, #3]
 8007a88:	4619      	mov	r1, r3
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f001 fda0 	bl	80095d0 <USBD_LL_GetRxDataSize>
 8007a90:	4602      	mov	r2, r0
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00d      	beq.n	8007abe <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007ab6:	4611      	mov	r1, r2
 8007ab8:	4798      	blx	r3

    return USBD_OK;
 8007aba:	2300      	movs	r3, #0
 8007abc:	e000      	b.n	8007ac0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007abe:	2302      	movs	r3, #2
  }
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ad6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d015      	beq.n	8007b0e <USBD_CDC_EP0_RxReady+0x46>
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007ae8:	2bff      	cmp	r3, #255	; 0xff
 8007aea:	d010      	beq.n	8007b0e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007afa:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007afc:	68fa      	ldr	r2, [r7, #12]
 8007afe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007b02:	b292      	uxth	r2, r2
 8007b04:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	22ff      	movs	r2, #255	; 0xff
 8007b0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2243      	movs	r2, #67	; 0x43
 8007b24:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007b26:	4b03      	ldr	r3, [pc, #12]	; (8007b34 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bc80      	pop	{r7}
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	2000016c 	.word	0x2000016c

08007b38 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2243      	movs	r2, #67	; 0x43
 8007b44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007b46:	4b03      	ldr	r3, [pc, #12]	; (8007b54 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bc80      	pop	{r7}
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	20000128 	.word	0x20000128

08007b58 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2243      	movs	r2, #67	; 0x43
 8007b64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007b66:	4b03      	ldr	r3, [pc, #12]	; (8007b74 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bc80      	pop	{r7}
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	200001b0 	.word	0x200001b0

08007b78 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	220a      	movs	r2, #10
 8007b84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007b86:	4b03      	ldr	r3, [pc, #12]	; (8007b94 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bc80      	pop	{r7}
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	200000e4 	.word	0x200000e4

08007b98 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007ba2:	2302      	movs	r3, #2
 8007ba4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d005      	beq.n	8007bb8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3714      	adds	r7, #20
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bc80      	pop	{r7}
 8007bc2:	4770      	bx	lr

08007bc4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b087      	sub	sp, #28
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bd8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	68ba      	ldr	r2, [r7, #8]
 8007bde:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007be2:	88fa      	ldrh	r2, [r7, #6]
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	371c      	adds	r7, #28
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bc80      	pop	{r7}
 8007bf4:	4770      	bx	lr

08007bf6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b085      	sub	sp, #20
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c06:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	683a      	ldr	r2, [r7, #0]
 8007c0c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3714      	adds	r7, #20
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bc80      	pop	{r7}
 8007c1a:	4770      	bx	lr

08007c1c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c2a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d017      	beq.n	8007c66 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	7c1b      	ldrb	r3, [r3, #16]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d109      	bne.n	8007c52 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c48:	2101      	movs	r1, #1
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f001 fc9d 	bl	800958a <USBD_LL_PrepareReceive>
 8007c50:	e007      	b.n	8007c62 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c58:	2340      	movs	r3, #64	; 0x40
 8007c5a:	2101      	movs	r1, #1
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f001 fc94 	bl	800958a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007c62:	2300      	movs	r3, #0
 8007c64:	e000      	b.n	8007c68 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007c66:	2302      	movs	r3, #2
  }
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3710      	adds	r7, #16
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d101      	bne.n	8007c88 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007c84:	2302      	movs	r3, #2
 8007c86:	e01a      	b.n	8007cbe <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d003      	beq.n	8007c9a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d003      	beq.n	8007ca8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	68ba      	ldr	r2, [r7, #8]
 8007ca4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	79fa      	ldrb	r2, [r7, #7]
 8007cb4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f001 fb02 	bl	80092c0 <USBD_LL_Init>

  return USBD_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	b085      	sub	sp, #20
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
 8007cce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d006      	beq.n	8007ce8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	683a      	ldr	r2, [r7, #0]
 8007cde:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	73fb      	strb	r3, [r7, #15]
 8007ce6:	e001      	b.n	8007cec <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007ce8:	2302      	movs	r3, #2
 8007cea:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bc80      	pop	{r7}
 8007cf6:	4770      	bx	lr

08007cf8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f001 fb37 	bl	8009374 <USBD_LL_Start>

  return USBD_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	370c      	adds	r7, #12
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bc80      	pop	{r7}
 8007d22:	4770      	bx	lr

08007d24 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007d30:	2302      	movs	r3, #2
 8007d32:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00c      	beq.n	8007d58 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	78fa      	ldrb	r2, [r7, #3]
 8007d48:	4611      	mov	r1, r2
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	4798      	blx	r3
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d101      	bne.n	8007d58 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007d54:	2300      	movs	r3, #0
 8007d56:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b082      	sub	sp, #8
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	78fa      	ldrb	r2, [r7, #3]
 8007d78:	4611      	mov	r1, r2
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	4798      	blx	r3

  return USBD_OK;
 8007d7e:	2300      	movs	r3, #0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3708      	adds	r7, #8
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d98:	6839      	ldr	r1, [r7, #0]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f000 fed7 	bl	8008b4e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007dae:	461a      	mov	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007dbc:	f003 031f 	and.w	r3, r3, #31
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d016      	beq.n	8007df2 <USBD_LL_SetupStage+0x6a>
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d81c      	bhi.n	8007e02 <USBD_LL_SetupStage+0x7a>
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d002      	beq.n	8007dd2 <USBD_LL_SetupStage+0x4a>
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d008      	beq.n	8007de2 <USBD_LL_SetupStage+0x5a>
 8007dd0:	e017      	b.n	8007e02 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007dd8:	4619      	mov	r1, r3
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f9ca 	bl	8008174 <USBD_StdDevReq>
      break;
 8007de0:	e01a      	b.n	8007e18 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007de8:	4619      	mov	r1, r3
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fa2c 	bl	8008248 <USBD_StdItfReq>
      break;
 8007df0:	e012      	b.n	8007e18 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007df8:	4619      	mov	r1, r3
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fa6c 	bl	80082d8 <USBD_StdEPReq>
      break;
 8007e00:	e00a      	b.n	8007e18 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007e08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	4619      	mov	r1, r3
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f001 fb0f 	bl	8009434 <USBD_LL_StallEP>
      break;
 8007e16:	bf00      	nop
  }

  return USBD_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b086      	sub	sp, #24
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	60f8      	str	r0, [r7, #12]
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	607a      	str	r2, [r7, #4]
 8007e2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007e30:	7afb      	ldrb	r3, [r7, #11]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d14b      	bne.n	8007ece <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007e3c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e44:	2b03      	cmp	r3, #3
 8007e46:	d134      	bne.n	8007eb2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	68da      	ldr	r2, [r3, #12]
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d919      	bls.n	8007e88 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	68da      	ldr	r2, [r3, #12]
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	1ad2      	subs	r2, r2, r3
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	68da      	ldr	r2, [r3, #12]
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d203      	bcs.n	8007e76 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	e002      	b.n	8007e7c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	6879      	ldr	r1, [r7, #4]
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f000 ff56 	bl	8008d32 <USBD_CtlContinueRx>
 8007e86:	e038      	b.n	8007efa <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00a      	beq.n	8007eaa <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007e9a:	2b03      	cmp	r3, #3
 8007e9c:	d105      	bne.n	8007eaa <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f000 ff53 	bl	8008d56 <USBD_CtlSendStatus>
 8007eb0:	e023      	b.n	8007efa <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007eb8:	2b05      	cmp	r3, #5
 8007eba:	d11e      	bne.n	8007efa <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	68f8      	ldr	r0, [r7, #12]
 8007ec8:	f001 fab4 	bl	8009434 <USBD_LL_StallEP>
 8007ecc:	e015      	b.n	8007efa <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00d      	beq.n	8007ef6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007ee0:	2b03      	cmp	r3, #3
 8007ee2:	d108      	bne.n	8007ef6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eea:	699b      	ldr	r3, [r3, #24]
 8007eec:	7afa      	ldrb	r2, [r7, #11]
 8007eee:	4611      	mov	r1, r2
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	4798      	blx	r3
 8007ef4:	e001      	b.n	8007efa <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007ef6:	2302      	movs	r3, #2
 8007ef8:	e000      	b.n	8007efc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3718      	adds	r7, #24
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b086      	sub	sp, #24
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	607a      	str	r2, [r7, #4]
 8007f10:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007f12:	7afb      	ldrb	r3, [r7, #11]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d17f      	bne.n	8008018 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	3314      	adds	r3, #20
 8007f1c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d15c      	bne.n	8007fe2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	68da      	ldr	r2, [r3, #12]
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d915      	bls.n	8007f60 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	68da      	ldr	r2, [r3, #12]
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	1ad2      	subs	r2, r2, r3
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	461a      	mov	r2, r3
 8007f4a:	6879      	ldr	r1, [r7, #4]
 8007f4c:	68f8      	ldr	r0, [r7, #12]
 8007f4e:	f000 fec0 	bl	8008cd2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f52:	2300      	movs	r3, #0
 8007f54:	2200      	movs	r2, #0
 8007f56:	2100      	movs	r1, #0
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	f001 fb16 	bl	800958a <USBD_LL_PrepareReceive>
 8007f5e:	e04e      	b.n	8007ffe <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	697a      	ldr	r2, [r7, #20]
 8007f66:	6912      	ldr	r2, [r2, #16]
 8007f68:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f6c:	fb02 f201 	mul.w	r2, r2, r1
 8007f70:	1a9b      	subs	r3, r3, r2
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d11c      	bne.n	8007fb0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	689a      	ldr	r2, [r3, #8]
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d316      	bcc.n	8007fb0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	689a      	ldr	r2, [r3, #8]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d20f      	bcs.n	8007fb0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007f90:	2200      	movs	r2, #0
 8007f92:	2100      	movs	r1, #0
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f000 fe9c 	bl	8008cd2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	2100      	movs	r1, #0
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f001 faee 	bl	800958a <USBD_LL_PrepareReceive>
 8007fae:	e026      	b.n	8007ffe <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00a      	beq.n	8007fd2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007fc2:	2b03      	cmp	r3, #3
 8007fc4:	d105      	bne.n	8007fd2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007fd2:	2180      	movs	r1, #128	; 0x80
 8007fd4:	68f8      	ldr	r0, [r7, #12]
 8007fd6:	f001 fa2d 	bl	8009434 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f000 fece 	bl	8008d7c <USBD_CtlReceiveStatus>
 8007fe0:	e00d      	b.n	8007ffe <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007fe8:	2b04      	cmp	r3, #4
 8007fea:	d004      	beq.n	8007ff6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d103      	bne.n	8007ffe <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007ff6:	2180      	movs	r1, #128	; 0x80
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f001 fa1b 	bl	8009434 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008004:	2b01      	cmp	r3, #1
 8008006:	d11d      	bne.n	8008044 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f7ff fe81 	bl	8007d10 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2200      	movs	r2, #0
 8008012:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008016:	e015      	b.n	8008044 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800801e:	695b      	ldr	r3, [r3, #20]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00d      	beq.n	8008040 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800802a:	2b03      	cmp	r3, #3
 800802c:	d108      	bne.n	8008040 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008034:	695b      	ldr	r3, [r3, #20]
 8008036:	7afa      	ldrb	r2, [r7, #11]
 8008038:	4611      	mov	r1, r2
 800803a:	68f8      	ldr	r0, [r7, #12]
 800803c:	4798      	blx	r3
 800803e:	e001      	b.n	8008044 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008040:	2302      	movs	r3, #2
 8008042:	e000      	b.n	8008046 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3718      	adds	r7, #24
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b082      	sub	sp, #8
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008056:	2340      	movs	r3, #64	; 0x40
 8008058:	2200      	movs	r2, #0
 800805a:	2100      	movs	r1, #0
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f001 f9a4 	bl	80093aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2240      	movs	r2, #64	; 0x40
 800806e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008072:	2340      	movs	r3, #64	; 0x40
 8008074:	2200      	movs	r2, #0
 8008076:	2180      	movs	r1, #128	; 0x80
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f001 f996 	bl	80093aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2201      	movs	r2, #1
 8008082:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2240      	movs	r2, #64	; 0x40
 8008088:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2201      	movs	r2, #1
 800808e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d009      	beq.n	80080c6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	6852      	ldr	r2, [r2, #4]
 80080be:	b2d2      	uxtb	r2, r2
 80080c0:	4611      	mov	r1, r2
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	4798      	blx	r3
  }

  return USBD_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3708      	adds	r7, #8
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	460b      	mov	r3, r1
 80080da:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	78fa      	ldrb	r2, [r7, #3]
 80080e0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bc80      	pop	{r7}
 80080ec:	4770      	bx	lr

080080ee <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80080ee:	b480      	push	{r7}
 80080f0:	b083      	sub	sp, #12
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2204      	movs	r2, #4
 8008106:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	bc80      	pop	{r7}
 8008114:	4770      	bx	lr

08008116 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008116:	b480      	push	{r7}
 8008118:	b083      	sub	sp, #12
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008124:	2b04      	cmp	r3, #4
 8008126:	d105      	bne.n	8008134 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	370c      	adds	r7, #12
 800813a:	46bd      	mov	sp, r7
 800813c:	bc80      	pop	{r7}
 800813e:	4770      	bx	lr

08008140 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800814e:	2b03      	cmp	r3, #3
 8008150:	d10b      	bne.n	800816a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008158:	69db      	ldr	r3, [r3, #28]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d005      	beq.n	800816a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008164:	69db      	ldr	r3, [r3, #28]
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800817e:	2300      	movs	r3, #0
 8008180:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800818a:	2b40      	cmp	r3, #64	; 0x40
 800818c:	d005      	beq.n	800819a <USBD_StdDevReq+0x26>
 800818e:	2b40      	cmp	r3, #64	; 0x40
 8008190:	d84f      	bhi.n	8008232 <USBD_StdDevReq+0xbe>
 8008192:	2b00      	cmp	r3, #0
 8008194:	d009      	beq.n	80081aa <USBD_StdDevReq+0x36>
 8008196:	2b20      	cmp	r3, #32
 8008198:	d14b      	bne.n	8008232 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	6839      	ldr	r1, [r7, #0]
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	4798      	blx	r3
      break;
 80081a8:	e048      	b.n	800823c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	785b      	ldrb	r3, [r3, #1]
 80081ae:	2b09      	cmp	r3, #9
 80081b0:	d839      	bhi.n	8008226 <USBD_StdDevReq+0xb2>
 80081b2:	a201      	add	r2, pc, #4	; (adr r2, 80081b8 <USBD_StdDevReq+0x44>)
 80081b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b8:	08008209 	.word	0x08008209
 80081bc:	0800821d 	.word	0x0800821d
 80081c0:	08008227 	.word	0x08008227
 80081c4:	08008213 	.word	0x08008213
 80081c8:	08008227 	.word	0x08008227
 80081cc:	080081eb 	.word	0x080081eb
 80081d0:	080081e1 	.word	0x080081e1
 80081d4:	08008227 	.word	0x08008227
 80081d8:	080081ff 	.word	0x080081ff
 80081dc:	080081f5 	.word	0x080081f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80081e0:	6839      	ldr	r1, [r7, #0]
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f9dc 	bl	80085a0 <USBD_GetDescriptor>
          break;
 80081e8:	e022      	b.n	8008230 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80081ea:	6839      	ldr	r1, [r7, #0]
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 fb3f 	bl	8008870 <USBD_SetAddress>
          break;
 80081f2:	e01d      	b.n	8008230 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fb7e 	bl	80088f8 <USBD_SetConfig>
          break;
 80081fc:	e018      	b.n	8008230 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 fc07 	bl	8008a14 <USBD_GetConfig>
          break;
 8008206:	e013      	b.n	8008230 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008208:	6839      	ldr	r1, [r7, #0]
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fc37 	bl	8008a7e <USBD_GetStatus>
          break;
 8008210:	e00e      	b.n	8008230 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008212:	6839      	ldr	r1, [r7, #0]
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 fc65 	bl	8008ae4 <USBD_SetFeature>
          break;
 800821a:	e009      	b.n	8008230 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800821c:	6839      	ldr	r1, [r7, #0]
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 fc74 	bl	8008b0c <USBD_ClrFeature>
          break;
 8008224:	e004      	b.n	8008230 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008226:	6839      	ldr	r1, [r7, #0]
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 fccc 	bl	8008bc6 <USBD_CtlError>
          break;
 800822e:	bf00      	nop
      }
      break;
 8008230:	e004      	b.n	800823c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008232:	6839      	ldr	r1, [r7, #0]
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 fcc6 	bl	8008bc6 <USBD_CtlError>
      break;
 800823a:	bf00      	nop
  }

  return ret;
 800823c:	7bfb      	ldrb	r3, [r7, #15]
}
 800823e:	4618      	mov	r0, r3
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop

08008248 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008252:	2300      	movs	r3, #0
 8008254:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800825e:	2b40      	cmp	r3, #64	; 0x40
 8008260:	d005      	beq.n	800826e <USBD_StdItfReq+0x26>
 8008262:	2b40      	cmp	r3, #64	; 0x40
 8008264:	d82e      	bhi.n	80082c4 <USBD_StdItfReq+0x7c>
 8008266:	2b00      	cmp	r3, #0
 8008268:	d001      	beq.n	800826e <USBD_StdItfReq+0x26>
 800826a:	2b20      	cmp	r3, #32
 800826c:	d12a      	bne.n	80082c4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008274:	3b01      	subs	r3, #1
 8008276:	2b02      	cmp	r3, #2
 8008278:	d81d      	bhi.n	80082b6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	889b      	ldrh	r3, [r3, #4]
 800827e:	b2db      	uxtb	r3, r3
 8008280:	2b01      	cmp	r3, #1
 8008282:	d813      	bhi.n	80082ac <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	6839      	ldr	r1, [r7, #0]
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	4798      	blx	r3
 8008292:	4603      	mov	r3, r0
 8008294:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	88db      	ldrh	r3, [r3, #6]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d110      	bne.n	80082c0 <USBD_StdItfReq+0x78>
 800829e:	7bfb      	ldrb	r3, [r7, #15]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d10d      	bne.n	80082c0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fd56 	bl	8008d56 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80082aa:	e009      	b.n	80082c0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80082ac:	6839      	ldr	r1, [r7, #0]
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fc89 	bl	8008bc6 <USBD_CtlError>
          break;
 80082b4:	e004      	b.n	80082c0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 fc84 	bl	8008bc6 <USBD_CtlError>
          break;
 80082be:	e000      	b.n	80082c2 <USBD_StdItfReq+0x7a>
          break;
 80082c0:	bf00      	nop
      }
      break;
 80082c2:	e004      	b.n	80082ce <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80082c4:	6839      	ldr	r1, [r7, #0]
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 fc7d 	bl	8008bc6 <USBD_CtlError>
      break;
 80082cc:	bf00      	nop
  }

  return USBD_OK;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80082e2:	2300      	movs	r3, #0
 80082e4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	889b      	ldrh	r3, [r3, #4]
 80082ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082f4:	2b40      	cmp	r3, #64	; 0x40
 80082f6:	d007      	beq.n	8008308 <USBD_StdEPReq+0x30>
 80082f8:	2b40      	cmp	r3, #64	; 0x40
 80082fa:	f200 8146 	bhi.w	800858a <USBD_StdEPReq+0x2b2>
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00a      	beq.n	8008318 <USBD_StdEPReq+0x40>
 8008302:	2b20      	cmp	r3, #32
 8008304:	f040 8141 	bne.w	800858a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	6839      	ldr	r1, [r7, #0]
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	4798      	blx	r3
      break;
 8008316:	e13d      	b.n	8008594 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008320:	2b20      	cmp	r3, #32
 8008322:	d10a      	bne.n	800833a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	6839      	ldr	r1, [r7, #0]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	4798      	blx	r3
 8008332:	4603      	mov	r3, r0
 8008334:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008336:	7bfb      	ldrb	r3, [r7, #15]
 8008338:	e12d      	b.n	8008596 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	785b      	ldrb	r3, [r3, #1]
 800833e:	2b03      	cmp	r3, #3
 8008340:	d007      	beq.n	8008352 <USBD_StdEPReq+0x7a>
 8008342:	2b03      	cmp	r3, #3
 8008344:	f300 811b 	bgt.w	800857e <USBD_StdEPReq+0x2a6>
 8008348:	2b00      	cmp	r3, #0
 800834a:	d072      	beq.n	8008432 <USBD_StdEPReq+0x15a>
 800834c:	2b01      	cmp	r3, #1
 800834e:	d03a      	beq.n	80083c6 <USBD_StdEPReq+0xee>
 8008350:	e115      	b.n	800857e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008358:	2b02      	cmp	r3, #2
 800835a:	d002      	beq.n	8008362 <USBD_StdEPReq+0x8a>
 800835c:	2b03      	cmp	r3, #3
 800835e:	d015      	beq.n	800838c <USBD_StdEPReq+0xb4>
 8008360:	e02b      	b.n	80083ba <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008362:	7bbb      	ldrb	r3, [r7, #14]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00c      	beq.n	8008382 <USBD_StdEPReq+0xaa>
 8008368:	7bbb      	ldrb	r3, [r7, #14]
 800836a:	2b80      	cmp	r3, #128	; 0x80
 800836c:	d009      	beq.n	8008382 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800836e:	7bbb      	ldrb	r3, [r7, #14]
 8008370:	4619      	mov	r1, r3
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f001 f85e 	bl	8009434 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008378:	2180      	movs	r1, #128	; 0x80
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f001 f85a 	bl	8009434 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008380:	e020      	b.n	80083c4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008382:	6839      	ldr	r1, [r7, #0]
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fc1e 	bl	8008bc6 <USBD_CtlError>
              break;
 800838a:	e01b      	b.n	80083c4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	885b      	ldrh	r3, [r3, #2]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d10e      	bne.n	80083b2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008394:	7bbb      	ldrb	r3, [r7, #14]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d00b      	beq.n	80083b2 <USBD_StdEPReq+0xda>
 800839a:	7bbb      	ldrb	r3, [r7, #14]
 800839c:	2b80      	cmp	r3, #128	; 0x80
 800839e:	d008      	beq.n	80083b2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	88db      	ldrh	r3, [r3, #6]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d104      	bne.n	80083b2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80083a8:	7bbb      	ldrb	r3, [r7, #14]
 80083aa:	4619      	mov	r1, r3
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f001 f841 	bl	8009434 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 fccf 	bl	8008d56 <USBD_CtlSendStatus>

              break;
 80083b8:	e004      	b.n	80083c4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80083ba:	6839      	ldr	r1, [r7, #0]
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 fc02 	bl	8008bc6 <USBD_CtlError>
              break;
 80083c2:	bf00      	nop
          }
          break;
 80083c4:	e0e0      	b.n	8008588 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d002      	beq.n	80083d6 <USBD_StdEPReq+0xfe>
 80083d0:	2b03      	cmp	r3, #3
 80083d2:	d015      	beq.n	8008400 <USBD_StdEPReq+0x128>
 80083d4:	e026      	b.n	8008424 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083d6:	7bbb      	ldrb	r3, [r7, #14]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00c      	beq.n	80083f6 <USBD_StdEPReq+0x11e>
 80083dc:	7bbb      	ldrb	r3, [r7, #14]
 80083de:	2b80      	cmp	r3, #128	; 0x80
 80083e0:	d009      	beq.n	80083f6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80083e2:	7bbb      	ldrb	r3, [r7, #14]
 80083e4:	4619      	mov	r1, r3
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f001 f824 	bl	8009434 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80083ec:	2180      	movs	r1, #128	; 0x80
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f001 f820 	bl	8009434 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083f4:	e01c      	b.n	8008430 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80083f6:	6839      	ldr	r1, [r7, #0]
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 fbe4 	bl	8008bc6 <USBD_CtlError>
              break;
 80083fe:	e017      	b.n	8008430 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	885b      	ldrh	r3, [r3, #2]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d112      	bne.n	800842e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008408:	7bbb      	ldrb	r3, [r7, #14]
 800840a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800840e:	2b00      	cmp	r3, #0
 8008410:	d004      	beq.n	800841c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008412:	7bbb      	ldrb	r3, [r7, #14]
 8008414:	4619      	mov	r1, r3
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f001 f82b 	bl	8009472 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fc9a 	bl	8008d56 <USBD_CtlSendStatus>
              }
              break;
 8008422:	e004      	b.n	800842e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008424:	6839      	ldr	r1, [r7, #0]
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 fbcd 	bl	8008bc6 <USBD_CtlError>
              break;
 800842c:	e000      	b.n	8008430 <USBD_StdEPReq+0x158>
              break;
 800842e:	bf00      	nop
          }
          break;
 8008430:	e0aa      	b.n	8008588 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008438:	2b02      	cmp	r3, #2
 800843a:	d002      	beq.n	8008442 <USBD_StdEPReq+0x16a>
 800843c:	2b03      	cmp	r3, #3
 800843e:	d032      	beq.n	80084a6 <USBD_StdEPReq+0x1ce>
 8008440:	e097      	b.n	8008572 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008442:	7bbb      	ldrb	r3, [r7, #14]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d007      	beq.n	8008458 <USBD_StdEPReq+0x180>
 8008448:	7bbb      	ldrb	r3, [r7, #14]
 800844a:	2b80      	cmp	r3, #128	; 0x80
 800844c:	d004      	beq.n	8008458 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800844e:	6839      	ldr	r1, [r7, #0]
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 fbb8 	bl	8008bc6 <USBD_CtlError>
                break;
 8008456:	e091      	b.n	800857c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008458:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800845c:	2b00      	cmp	r3, #0
 800845e:	da0b      	bge.n	8008478 <USBD_StdEPReq+0x1a0>
 8008460:	7bbb      	ldrb	r3, [r7, #14]
 8008462:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008466:	4613      	mov	r3, r2
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	4413      	add	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	3310      	adds	r3, #16
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	4413      	add	r3, r2
 8008474:	3304      	adds	r3, #4
 8008476:	e00b      	b.n	8008490 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008478:	7bbb      	ldrb	r3, [r7, #14]
 800847a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800847e:	4613      	mov	r3, r2
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	4413      	add	r3, r2
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	4413      	add	r3, r2
 800848e:	3304      	adds	r3, #4
 8008490:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	2200      	movs	r2, #0
 8008496:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	2202      	movs	r2, #2
 800849c:	4619      	mov	r1, r3
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 fbfb 	bl	8008c9a <USBD_CtlSendData>
              break;
 80084a4:	e06a      	b.n	800857c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80084a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	da11      	bge.n	80084d2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80084ae:	7bbb      	ldrb	r3, [r7, #14]
 80084b0:	f003 020f 	and.w	r2, r3, #15
 80084b4:	6879      	ldr	r1, [r7, #4]
 80084b6:	4613      	mov	r3, r2
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	4413      	add	r3, r2
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	440b      	add	r3, r1
 80084c0:	3318      	adds	r3, #24
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d117      	bne.n	80084f8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 fb7b 	bl	8008bc6 <USBD_CtlError>
                  break;
 80084d0:	e054      	b.n	800857c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80084d2:	7bbb      	ldrb	r3, [r7, #14]
 80084d4:	f003 020f 	and.w	r2, r3, #15
 80084d8:	6879      	ldr	r1, [r7, #4]
 80084da:	4613      	mov	r3, r2
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	4413      	add	r3, r2
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	440b      	add	r3, r1
 80084e4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d104      	bne.n	80084f8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80084ee:	6839      	ldr	r1, [r7, #0]
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 fb68 	bl	8008bc6 <USBD_CtlError>
                  break;
 80084f6:	e041      	b.n	800857c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	da0b      	bge.n	8008518 <USBD_StdEPReq+0x240>
 8008500:	7bbb      	ldrb	r3, [r7, #14]
 8008502:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008506:	4613      	mov	r3, r2
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	4413      	add	r3, r2
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	3310      	adds	r3, #16
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	4413      	add	r3, r2
 8008514:	3304      	adds	r3, #4
 8008516:	e00b      	b.n	8008530 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008518:	7bbb      	ldrb	r3, [r7, #14]
 800851a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800851e:	4613      	mov	r3, r2
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	4413      	add	r3, r2
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	4413      	add	r3, r2
 800852e:	3304      	adds	r3, #4
 8008530:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008532:	7bbb      	ldrb	r3, [r7, #14]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d002      	beq.n	800853e <USBD_StdEPReq+0x266>
 8008538:	7bbb      	ldrb	r3, [r7, #14]
 800853a:	2b80      	cmp	r3, #128	; 0x80
 800853c:	d103      	bne.n	8008546 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	2200      	movs	r2, #0
 8008542:	601a      	str	r2, [r3, #0]
 8008544:	e00e      	b.n	8008564 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008546:	7bbb      	ldrb	r3, [r7, #14]
 8008548:	4619      	mov	r1, r3
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 ffb0 	bl	80094b0 <USBD_LL_IsStallEP>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d003      	beq.n	800855e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	2201      	movs	r2, #1
 800855a:	601a      	str	r2, [r3, #0]
 800855c:	e002      	b.n	8008564 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	2200      	movs	r2, #0
 8008562:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	2202      	movs	r2, #2
 8008568:	4619      	mov	r1, r3
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 fb95 	bl	8008c9a <USBD_CtlSendData>
              break;
 8008570:	e004      	b.n	800857c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008572:	6839      	ldr	r1, [r7, #0]
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 fb26 	bl	8008bc6 <USBD_CtlError>
              break;
 800857a:	bf00      	nop
          }
          break;
 800857c:	e004      	b.n	8008588 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800857e:	6839      	ldr	r1, [r7, #0]
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 fb20 	bl	8008bc6 <USBD_CtlError>
          break;
 8008586:	bf00      	nop
      }
      break;
 8008588:	e004      	b.n	8008594 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800858a:	6839      	ldr	r1, [r7, #0]
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 fb1a 	bl	8008bc6 <USBD_CtlError>
      break;
 8008592:	bf00      	nop
  }

  return ret;
 8008594:	7bfb      	ldrb	r3, [r7, #15]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
	...

080085a0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80085aa:	2300      	movs	r3, #0
 80085ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80085ae:	2300      	movs	r3, #0
 80085b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80085b2:	2300      	movs	r3, #0
 80085b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	885b      	ldrh	r3, [r3, #2]
 80085ba:	0a1b      	lsrs	r3, r3, #8
 80085bc:	b29b      	uxth	r3, r3
 80085be:	3b01      	subs	r3, #1
 80085c0:	2b06      	cmp	r3, #6
 80085c2:	f200 8128 	bhi.w	8008816 <USBD_GetDescriptor+0x276>
 80085c6:	a201      	add	r2, pc, #4	; (adr r2, 80085cc <USBD_GetDescriptor+0x2c>)
 80085c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085cc:	080085e9 	.word	0x080085e9
 80085d0:	08008601 	.word	0x08008601
 80085d4:	08008641 	.word	0x08008641
 80085d8:	08008817 	.word	0x08008817
 80085dc:	08008817 	.word	0x08008817
 80085e0:	080087b7 	.word	0x080087b7
 80085e4:	080087e3 	.word	0x080087e3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	7c12      	ldrb	r2, [r2, #16]
 80085f4:	f107 0108 	add.w	r1, r7, #8
 80085f8:	4610      	mov	r0, r2
 80085fa:	4798      	blx	r3
 80085fc:	60f8      	str	r0, [r7, #12]
      break;
 80085fe:	e112      	b.n	8008826 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	7c1b      	ldrb	r3, [r3, #16]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d10d      	bne.n	8008624 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800860e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008610:	f107 0208 	add.w	r2, r7, #8
 8008614:	4610      	mov	r0, r2
 8008616:	4798      	blx	r3
 8008618:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	3301      	adds	r3, #1
 800861e:	2202      	movs	r2, #2
 8008620:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008622:	e100      	b.n	8008826 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800862a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862c:	f107 0208 	add.w	r2, r7, #8
 8008630:	4610      	mov	r0, r2
 8008632:	4798      	blx	r3
 8008634:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	3301      	adds	r3, #1
 800863a:	2202      	movs	r2, #2
 800863c:	701a      	strb	r2, [r3, #0]
      break;
 800863e:	e0f2      	b.n	8008826 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	885b      	ldrh	r3, [r3, #2]
 8008644:	b2db      	uxtb	r3, r3
 8008646:	2b05      	cmp	r3, #5
 8008648:	f200 80ac 	bhi.w	80087a4 <USBD_GetDescriptor+0x204>
 800864c:	a201      	add	r2, pc, #4	; (adr r2, 8008654 <USBD_GetDescriptor+0xb4>)
 800864e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008652:	bf00      	nop
 8008654:	0800866d 	.word	0x0800866d
 8008658:	080086a1 	.word	0x080086a1
 800865c:	080086d5 	.word	0x080086d5
 8008660:	08008709 	.word	0x08008709
 8008664:	0800873d 	.word	0x0800873d
 8008668:	08008771 	.word	0x08008771
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00b      	beq.n	8008690 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	7c12      	ldrb	r2, [r2, #16]
 8008684:	f107 0108 	add.w	r1, r7, #8
 8008688:	4610      	mov	r0, r2
 800868a:	4798      	blx	r3
 800868c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800868e:	e091      	b.n	80087b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008690:	6839      	ldr	r1, [r7, #0]
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fa97 	bl	8008bc6 <USBD_CtlError>
            err++;
 8008698:	7afb      	ldrb	r3, [r7, #11]
 800869a:	3301      	adds	r3, #1
 800869c:	72fb      	strb	r3, [r7, #11]
          break;
 800869e:	e089      	b.n	80087b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00b      	beq.n	80086c4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	7c12      	ldrb	r2, [r2, #16]
 80086b8:	f107 0108 	add.w	r1, r7, #8
 80086bc:	4610      	mov	r0, r2
 80086be:	4798      	blx	r3
 80086c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086c2:	e077      	b.n	80087b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086c4:	6839      	ldr	r1, [r7, #0]
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 fa7d 	bl	8008bc6 <USBD_CtlError>
            err++;
 80086cc:	7afb      	ldrb	r3, [r7, #11]
 80086ce:	3301      	adds	r3, #1
 80086d0:	72fb      	strb	r3, [r7, #11]
          break;
 80086d2:	e06f      	b.n	80087b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d00b      	beq.n	80086f8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	7c12      	ldrb	r2, [r2, #16]
 80086ec:	f107 0108 	add.w	r1, r7, #8
 80086f0:	4610      	mov	r0, r2
 80086f2:	4798      	blx	r3
 80086f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086f6:	e05d      	b.n	80087b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086f8:	6839      	ldr	r1, [r7, #0]
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fa63 	bl	8008bc6 <USBD_CtlError>
            err++;
 8008700:	7afb      	ldrb	r3, [r7, #11]
 8008702:	3301      	adds	r3, #1
 8008704:	72fb      	strb	r3, [r7, #11]
          break;
 8008706:	e055      	b.n	80087b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800870e:	691b      	ldr	r3, [r3, #16]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d00b      	beq.n	800872c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	7c12      	ldrb	r2, [r2, #16]
 8008720:	f107 0108 	add.w	r1, r7, #8
 8008724:	4610      	mov	r0, r2
 8008726:	4798      	blx	r3
 8008728:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800872a:	e043      	b.n	80087b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800872c:	6839      	ldr	r1, [r7, #0]
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 fa49 	bl	8008bc6 <USBD_CtlError>
            err++;
 8008734:	7afb      	ldrb	r3, [r7, #11]
 8008736:	3301      	adds	r3, #1
 8008738:	72fb      	strb	r3, [r7, #11]
          break;
 800873a:	e03b      	b.n	80087b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008742:	695b      	ldr	r3, [r3, #20]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00b      	beq.n	8008760 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800874e:	695b      	ldr	r3, [r3, #20]
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	7c12      	ldrb	r2, [r2, #16]
 8008754:	f107 0108 	add.w	r1, r7, #8
 8008758:	4610      	mov	r0, r2
 800875a:	4798      	blx	r3
 800875c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800875e:	e029      	b.n	80087b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fa2f 	bl	8008bc6 <USBD_CtlError>
            err++;
 8008768:	7afb      	ldrb	r3, [r7, #11]
 800876a:	3301      	adds	r3, #1
 800876c:	72fb      	strb	r3, [r7, #11]
          break;
 800876e:	e021      	b.n	80087b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008776:	699b      	ldr	r3, [r3, #24]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d00b      	beq.n	8008794 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008782:	699b      	ldr	r3, [r3, #24]
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	7c12      	ldrb	r2, [r2, #16]
 8008788:	f107 0108 	add.w	r1, r7, #8
 800878c:	4610      	mov	r0, r2
 800878e:	4798      	blx	r3
 8008790:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008792:	e00f      	b.n	80087b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008794:	6839      	ldr	r1, [r7, #0]
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 fa15 	bl	8008bc6 <USBD_CtlError>
            err++;
 800879c:	7afb      	ldrb	r3, [r7, #11]
 800879e:	3301      	adds	r3, #1
 80087a0:	72fb      	strb	r3, [r7, #11]
          break;
 80087a2:	e007      	b.n	80087b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80087a4:	6839      	ldr	r1, [r7, #0]
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fa0d 	bl	8008bc6 <USBD_CtlError>
          err++;
 80087ac:	7afb      	ldrb	r3, [r7, #11]
 80087ae:	3301      	adds	r3, #1
 80087b0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80087b2:	e038      	b.n	8008826 <USBD_GetDescriptor+0x286>
 80087b4:	e037      	b.n	8008826 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	7c1b      	ldrb	r3, [r3, #16]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d109      	bne.n	80087d2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087c6:	f107 0208 	add.w	r2, r7, #8
 80087ca:	4610      	mov	r0, r2
 80087cc:	4798      	blx	r3
 80087ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087d0:	e029      	b.n	8008826 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80087d2:	6839      	ldr	r1, [r7, #0]
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 f9f6 	bl	8008bc6 <USBD_CtlError>
        err++;
 80087da:	7afb      	ldrb	r3, [r7, #11]
 80087dc:	3301      	adds	r3, #1
 80087de:	72fb      	strb	r3, [r7, #11]
      break;
 80087e0:	e021      	b.n	8008826 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	7c1b      	ldrb	r3, [r3, #16]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d10d      	bne.n	8008806 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f2:	f107 0208 	add.w	r2, r7, #8
 80087f6:	4610      	mov	r0, r2
 80087f8:	4798      	blx	r3
 80087fa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	3301      	adds	r3, #1
 8008800:	2207      	movs	r2, #7
 8008802:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008804:	e00f      	b.n	8008826 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008806:	6839      	ldr	r1, [r7, #0]
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 f9dc 	bl	8008bc6 <USBD_CtlError>
        err++;
 800880e:	7afb      	ldrb	r3, [r7, #11]
 8008810:	3301      	adds	r3, #1
 8008812:	72fb      	strb	r3, [r7, #11]
      break;
 8008814:	e007      	b.n	8008826 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008816:	6839      	ldr	r1, [r7, #0]
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 f9d4 	bl	8008bc6 <USBD_CtlError>
      err++;
 800881e:	7afb      	ldrb	r3, [r7, #11]
 8008820:	3301      	adds	r3, #1
 8008822:	72fb      	strb	r3, [r7, #11]
      break;
 8008824:	bf00      	nop
  }

  if (err != 0U)
 8008826:	7afb      	ldrb	r3, [r7, #11]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d11c      	bne.n	8008866 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800882c:	893b      	ldrh	r3, [r7, #8]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d011      	beq.n	8008856 <USBD_GetDescriptor+0x2b6>
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	88db      	ldrh	r3, [r3, #6]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00d      	beq.n	8008856 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	88da      	ldrh	r2, [r3, #6]
 800883e:	893b      	ldrh	r3, [r7, #8]
 8008840:	4293      	cmp	r3, r2
 8008842:	bf28      	it	cs
 8008844:	4613      	movcs	r3, r2
 8008846:	b29b      	uxth	r3, r3
 8008848:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800884a:	893b      	ldrh	r3, [r7, #8]
 800884c:	461a      	mov	r2, r3
 800884e:	68f9      	ldr	r1, [r7, #12]
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 fa22 	bl	8008c9a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	88db      	ldrh	r3, [r3, #6]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d104      	bne.n	8008868 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 fa79 	bl	8008d56 <USBD_CtlSendStatus>
 8008864:	e000      	b.n	8008868 <USBD_GetDescriptor+0x2c8>
    return;
 8008866:	bf00      	nop
    }
  }
}
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop

08008870 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	889b      	ldrh	r3, [r3, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d130      	bne.n	80088e4 <USBD_SetAddress+0x74>
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	88db      	ldrh	r3, [r3, #6]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d12c      	bne.n	80088e4 <USBD_SetAddress+0x74>
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	885b      	ldrh	r3, [r3, #2]
 800888e:	2b7f      	cmp	r3, #127	; 0x7f
 8008890:	d828      	bhi.n	80088e4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	885b      	ldrh	r3, [r3, #2]
 8008896:	b2db      	uxtb	r3, r3
 8008898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800889c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088a4:	2b03      	cmp	r3, #3
 80088a6:	d104      	bne.n	80088b2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80088a8:	6839      	ldr	r1, [r7, #0]
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 f98b 	bl	8008bc6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088b0:	e01d      	b.n	80088ee <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	7bfa      	ldrb	r2, [r7, #15]
 80088b6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80088ba:	7bfb      	ldrb	r3, [r7, #15]
 80088bc:	4619      	mov	r1, r3
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 fe21 	bl	8009506 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 fa46 	bl	8008d56 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80088ca:	7bfb      	ldrb	r3, [r7, #15]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d004      	beq.n	80088da <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2202      	movs	r2, #2
 80088d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088d8:	e009      	b.n	80088ee <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2201      	movs	r2, #1
 80088de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088e2:	e004      	b.n	80088ee <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80088e4:	6839      	ldr	r1, [r7, #0]
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f96d 	bl	8008bc6 <USBD_CtlError>
  }
}
 80088ec:	bf00      	nop
 80088ee:	bf00      	nop
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
	...

080088f8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	885b      	ldrh	r3, [r3, #2]
 8008906:	b2da      	uxtb	r2, r3
 8008908:	4b41      	ldr	r3, [pc, #260]	; (8008a10 <USBD_SetConfig+0x118>)
 800890a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800890c:	4b40      	ldr	r3, [pc, #256]	; (8008a10 <USBD_SetConfig+0x118>)
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	2b01      	cmp	r3, #1
 8008912:	d904      	bls.n	800891e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008914:	6839      	ldr	r1, [r7, #0]
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 f955 	bl	8008bc6 <USBD_CtlError>
 800891c:	e075      	b.n	8008a0a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008924:	2b02      	cmp	r3, #2
 8008926:	d002      	beq.n	800892e <USBD_SetConfig+0x36>
 8008928:	2b03      	cmp	r3, #3
 800892a:	d023      	beq.n	8008974 <USBD_SetConfig+0x7c>
 800892c:	e062      	b.n	80089f4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800892e:	4b38      	ldr	r3, [pc, #224]	; (8008a10 <USBD_SetConfig+0x118>)
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d01a      	beq.n	800896c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008936:	4b36      	ldr	r3, [pc, #216]	; (8008a10 <USBD_SetConfig+0x118>)
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	461a      	mov	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2203      	movs	r2, #3
 8008944:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008948:	4b31      	ldr	r3, [pc, #196]	; (8008a10 <USBD_SetConfig+0x118>)
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	4619      	mov	r1, r3
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f7ff f9e8 	bl	8007d24 <USBD_SetClassConfig>
 8008954:	4603      	mov	r3, r0
 8008956:	2b02      	cmp	r3, #2
 8008958:	d104      	bne.n	8008964 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800895a:	6839      	ldr	r1, [r7, #0]
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 f932 	bl	8008bc6 <USBD_CtlError>
            return;
 8008962:	e052      	b.n	8008a0a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 f9f6 	bl	8008d56 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800896a:	e04e      	b.n	8008a0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 f9f2 	bl	8008d56 <USBD_CtlSendStatus>
        break;
 8008972:	e04a      	b.n	8008a0a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008974:	4b26      	ldr	r3, [pc, #152]	; (8008a10 <USBD_SetConfig+0x118>)
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d112      	bne.n	80089a2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2202      	movs	r2, #2
 8008980:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008984:	4b22      	ldr	r3, [pc, #136]	; (8008a10 <USBD_SetConfig+0x118>)
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	461a      	mov	r2, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800898e:	4b20      	ldr	r3, [pc, #128]	; (8008a10 <USBD_SetConfig+0x118>)
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	4619      	mov	r1, r3
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f7ff f9e4 	bl	8007d62 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 f9db 	bl	8008d56 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80089a0:	e033      	b.n	8008a0a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80089a2:	4b1b      	ldr	r3, [pc, #108]	; (8008a10 <USBD_SetConfig+0x118>)
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	461a      	mov	r2, r3
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d01d      	beq.n	80089ec <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	4619      	mov	r1, r3
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f7ff f9d2 	bl	8007d62 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80089be:	4b14      	ldr	r3, [pc, #80]	; (8008a10 <USBD_SetConfig+0x118>)
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	461a      	mov	r2, r3
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80089c8:	4b11      	ldr	r3, [pc, #68]	; (8008a10 <USBD_SetConfig+0x118>)
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	4619      	mov	r1, r3
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f7ff f9a8 	bl	8007d24 <USBD_SetClassConfig>
 80089d4:	4603      	mov	r3, r0
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	d104      	bne.n	80089e4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80089da:	6839      	ldr	r1, [r7, #0]
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 f8f2 	bl	8008bc6 <USBD_CtlError>
            return;
 80089e2:	e012      	b.n	8008a0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 f9b6 	bl	8008d56 <USBD_CtlSendStatus>
        break;
 80089ea:	e00e      	b.n	8008a0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 f9b2 	bl	8008d56 <USBD_CtlSendStatus>
        break;
 80089f2:	e00a      	b.n	8008a0a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f8e5 	bl	8008bc6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80089fc:	4b04      	ldr	r3, [pc, #16]	; (8008a10 <USBD_SetConfig+0x118>)
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	4619      	mov	r1, r3
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f7ff f9ad 	bl	8007d62 <USBD_ClrClassConfig>
        break;
 8008a08:	bf00      	nop
    }
  }
}
 8008a0a:	3708      	adds	r7, #8
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	200003c0 	.word	0x200003c0

08008a14 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	88db      	ldrh	r3, [r3, #6]
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d004      	beq.n	8008a30 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008a26:	6839      	ldr	r1, [r7, #0]
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 f8cc 	bl	8008bc6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008a2e:	e022      	b.n	8008a76 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a36:	2b02      	cmp	r3, #2
 8008a38:	dc02      	bgt.n	8008a40 <USBD_GetConfig+0x2c>
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	dc03      	bgt.n	8008a46 <USBD_GetConfig+0x32>
 8008a3e:	e015      	b.n	8008a6c <USBD_GetConfig+0x58>
 8008a40:	2b03      	cmp	r3, #3
 8008a42:	d00b      	beq.n	8008a5c <USBD_GetConfig+0x48>
 8008a44:	e012      	b.n	8008a6c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	3308      	adds	r3, #8
 8008a50:	2201      	movs	r2, #1
 8008a52:	4619      	mov	r1, r3
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 f920 	bl	8008c9a <USBD_CtlSendData>
        break;
 8008a5a:	e00c      	b.n	8008a76 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	3304      	adds	r3, #4
 8008a60:	2201      	movs	r2, #1
 8008a62:	4619      	mov	r1, r3
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 f918 	bl	8008c9a <USBD_CtlSendData>
        break;
 8008a6a:	e004      	b.n	8008a76 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008a6c:	6839      	ldr	r1, [r7, #0]
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 f8a9 	bl	8008bc6 <USBD_CtlError>
        break;
 8008a74:	bf00      	nop
}
 8008a76:	bf00      	nop
 8008a78:	3708      	adds	r7, #8
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b082      	sub	sp, #8
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
 8008a86:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d81e      	bhi.n	8008ad2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	88db      	ldrh	r3, [r3, #6]
 8008a98:	2b02      	cmp	r3, #2
 8008a9a:	d004      	beq.n	8008aa6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008a9c:	6839      	ldr	r1, [r7, #0]
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 f891 	bl	8008bc6 <USBD_CtlError>
        break;
 8008aa4:	e01a      	b.n	8008adc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d005      	beq.n	8008ac2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	f043 0202 	orr.w	r2, r3, #2
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	330c      	adds	r3, #12
 8008ac6:	2202      	movs	r2, #2
 8008ac8:	4619      	mov	r1, r3
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f8e5 	bl	8008c9a <USBD_CtlSendData>
      break;
 8008ad0:	e004      	b.n	8008adc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008ad2:	6839      	ldr	r1, [r7, #0]
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 f876 	bl	8008bc6 <USBD_CtlError>
      break;
 8008ada:	bf00      	nop
  }
}
 8008adc:	bf00      	nop
 8008ade:	3708      	adds	r7, #8
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	885b      	ldrh	r3, [r3, #2]
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d106      	bne.n	8008b04 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2201      	movs	r2, #1
 8008afa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 f929 	bl	8008d56 <USBD_CtlSendStatus>
  }
}
 8008b04:	bf00      	nop
 8008b06:	3708      	adds	r7, #8
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	d80b      	bhi.n	8008b3a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	885b      	ldrh	r3, [r3, #2]
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d10c      	bne.n	8008b44 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 f90f 	bl	8008d56 <USBD_CtlSendStatus>
      }
      break;
 8008b38:	e004      	b.n	8008b44 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008b3a:	6839      	ldr	r1, [r7, #0]
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 f842 	bl	8008bc6 <USBD_CtlError>
      break;
 8008b42:	e000      	b.n	8008b46 <USBD_ClrFeature+0x3a>
      break;
 8008b44:	bf00      	nop
  }
}
 8008b46:	bf00      	nop
 8008b48:	3708      	adds	r7, #8
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b083      	sub	sp, #12
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
 8008b56:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	781a      	ldrb	r2, [r3, #0]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	785a      	ldrb	r2, [r3, #1]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	3302      	adds	r3, #2
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	b29a      	uxth	r2, r3
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	3303      	adds	r3, #3
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	021b      	lsls	r3, r3, #8
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	4413      	add	r3, r2
 8008b7e:	b29a      	uxth	r2, r3
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	3304      	adds	r3, #4
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	3305      	adds	r3, #5
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	021b      	lsls	r3, r3, #8
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	4413      	add	r3, r2
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	3306      	adds	r3, #6
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	b29a      	uxth	r2, r3
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	3307      	adds	r3, #7
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	021b      	lsls	r3, r3, #8
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	4413      	add	r3, r2
 8008bb6:	b29a      	uxth	r2, r3
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	80da      	strh	r2, [r3, #6]

}
 8008bbc:	bf00      	nop
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bc80      	pop	{r7}
 8008bc4:	4770      	bx	lr

08008bc6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b082      	sub	sp, #8
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
 8008bce:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008bd0:	2180      	movs	r1, #128	; 0x80
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 fc2e 	bl	8009434 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008bd8:	2100      	movs	r1, #0
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 fc2a 	bl	8009434 <USBD_LL_StallEP>
}
 8008be0:	bf00      	nop
 8008be2:	3708      	adds	r7, #8
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b086      	sub	sp, #24
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d032      	beq.n	8008c64 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f000 f834 	bl	8008c6c <USBD_GetLen>
 8008c04:	4603      	mov	r3, r0
 8008c06:	3301      	adds	r3, #1
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	005b      	lsls	r3, r3, #1
 8008c0c:	b29a      	uxth	r2, r3
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008c12:	7dfb      	ldrb	r3, [r7, #23]
 8008c14:	1c5a      	adds	r2, r3, #1
 8008c16:	75fa      	strb	r2, [r7, #23]
 8008c18:	461a      	mov	r2, r3
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	7812      	ldrb	r2, [r2, #0]
 8008c22:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008c24:	7dfb      	ldrb	r3, [r7, #23]
 8008c26:	1c5a      	adds	r2, r3, #1
 8008c28:	75fa      	strb	r2, [r7, #23]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	4413      	add	r3, r2
 8008c30:	2203      	movs	r2, #3
 8008c32:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008c34:	e012      	b.n	8008c5c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	1c5a      	adds	r2, r3, #1
 8008c3a:	60fa      	str	r2, [r7, #12]
 8008c3c:	7dfa      	ldrb	r2, [r7, #23]
 8008c3e:	1c51      	adds	r1, r2, #1
 8008c40:	75f9      	strb	r1, [r7, #23]
 8008c42:	4611      	mov	r1, r2
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	440a      	add	r2, r1
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008c4c:	7dfb      	ldrb	r3, [r7, #23]
 8008c4e:	1c5a      	adds	r2, r3, #1
 8008c50:	75fa      	strb	r2, [r7, #23]
 8008c52:	461a      	mov	r2, r3
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	4413      	add	r3, r2
 8008c58:	2200      	movs	r2, #0
 8008c5a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d1e8      	bne.n	8008c36 <USBD_GetString+0x4e>
    }
  }
}
 8008c64:	bf00      	nop
 8008c66:	3718      	adds	r7, #24
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008c74:	2300      	movs	r3, #0
 8008c76:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008c78:	e005      	b.n	8008c86 <USBD_GetLen+0x1a>
  {
    len++;
 8008c7a:	7bfb      	ldrb	r3, [r7, #15]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	3301      	adds	r3, #1
 8008c84:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1f5      	bne.n	8008c7a <USBD_GetLen+0xe>
  }

  return len;
 8008c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3714      	adds	r7, #20
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bc80      	pop	{r7}
 8008c98:	4770      	bx	lr

08008c9a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b084      	sub	sp, #16
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	60f8      	str	r0, [r7, #12]
 8008ca2:	60b9      	str	r1, [r7, #8]
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2202      	movs	r2, #2
 8008cac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008cb0:	88fa      	ldrh	r2, [r7, #6]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008cb6:	88fa      	ldrh	r2, [r7, #6]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008cbc:	88fb      	ldrh	r3, [r7, #6]
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	68f8      	ldr	r0, [r7, #12]
 8008cc4:	f000 fc3e 	bl	8009544 <USBD_LL_Transmit>

  return USBD_OK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b084      	sub	sp, #16
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	60f8      	str	r0, [r7, #12]
 8008cda:	60b9      	str	r1, [r7, #8]
 8008cdc:	4613      	mov	r3, r2
 8008cde:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ce0:	88fb      	ldrh	r3, [r7, #6]
 8008ce2:	68ba      	ldr	r2, [r7, #8]
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	68f8      	ldr	r0, [r7, #12]
 8008ce8:	f000 fc2c 	bl	8009544 <USBD_LL_Transmit>

  return USBD_OK;
 8008cec:	2300      	movs	r3, #0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3710      	adds	r7, #16
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b084      	sub	sp, #16
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	60f8      	str	r0, [r7, #12]
 8008cfe:	60b9      	str	r1, [r7, #8]
 8008d00:	4613      	mov	r3, r2
 8008d02:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2203      	movs	r2, #3
 8008d08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008d0c:	88fa      	ldrh	r2, [r7, #6]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008d14:	88fa      	ldrh	r2, [r7, #6]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d1c:	88fb      	ldrh	r3, [r7, #6]
 8008d1e:	68ba      	ldr	r2, [r7, #8]
 8008d20:	2100      	movs	r1, #0
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f000 fc31 	bl	800958a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b084      	sub	sp, #16
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	60f8      	str	r0, [r7, #12]
 8008d3a:	60b9      	str	r1, [r7, #8]
 8008d3c:	4613      	mov	r3, r2
 8008d3e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d40:	88fb      	ldrh	r3, [r7, #6]
 8008d42:	68ba      	ldr	r2, [r7, #8]
 8008d44:	2100      	movs	r1, #0
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f000 fc1f 	bl	800958a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b082      	sub	sp, #8
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2204      	movs	r2, #4
 8008d62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008d66:	2300      	movs	r3, #0
 8008d68:	2200      	movs	r2, #0
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 fbe9 	bl	8009544 <USBD_LL_Transmit>

  return USBD_OK;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3708      	adds	r7, #8
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2205      	movs	r2, #5
 8008d88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	2200      	movs	r2, #0
 8008d90:	2100      	movs	r1, #0
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fbf9 	bl	800958a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3708      	adds	r7, #8
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
	...

08008da4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008da8:	2200      	movs	r2, #0
 8008daa:	4912      	ldr	r1, [pc, #72]	; (8008df4 <MX_USB_DEVICE_Init+0x50>)
 8008dac:	4812      	ldr	r0, [pc, #72]	; (8008df8 <MX_USB_DEVICE_Init+0x54>)
 8008dae:	f7fe ff5f 	bl	8007c70 <USBD_Init>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d001      	beq.n	8008dbc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008db8:	f7f8 fb1a 	bl	80013f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008dbc:	490f      	ldr	r1, [pc, #60]	; (8008dfc <MX_USB_DEVICE_Init+0x58>)
 8008dbe:	480e      	ldr	r0, [pc, #56]	; (8008df8 <MX_USB_DEVICE_Init+0x54>)
 8008dc0:	f7fe ff81 	bl	8007cc6 <USBD_RegisterClass>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d001      	beq.n	8008dce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008dca:	f7f8 fb11 	bl	80013f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008dce:	490c      	ldr	r1, [pc, #48]	; (8008e00 <MX_USB_DEVICE_Init+0x5c>)
 8008dd0:	4809      	ldr	r0, [pc, #36]	; (8008df8 <MX_USB_DEVICE_Init+0x54>)
 8008dd2:	f7fe fee1 	bl	8007b98 <USBD_CDC_RegisterInterface>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d001      	beq.n	8008de0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008ddc:	f7f8 fb08 	bl	80013f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008de0:	4805      	ldr	r0, [pc, #20]	; (8008df8 <MX_USB_DEVICE_Init+0x54>)
 8008de2:	f7fe ff89 	bl	8007cf8 <USBD_Start>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d001      	beq.n	8008df0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008dec:	f7f8 fb00 	bl	80013f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008df0:	bf00      	nop
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	20000204 	.word	0x20000204
 8008df8:	200005f0 	.word	0x200005f0
 8008dfc:	200000f0 	.word	0x200000f0
 8008e00:	200001f4 	.word	0x200001f4

08008e04 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008e08:	2200      	movs	r2, #0
 8008e0a:	4905      	ldr	r1, [pc, #20]	; (8008e20 <CDC_Init_FS+0x1c>)
 8008e0c:	4805      	ldr	r0, [pc, #20]	; (8008e24 <CDC_Init_FS+0x20>)
 8008e0e:	f7fe fed9 	bl	8007bc4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008e12:	4905      	ldr	r1, [pc, #20]	; (8008e28 <CDC_Init_FS+0x24>)
 8008e14:	4803      	ldr	r0, [pc, #12]	; (8008e24 <CDC_Init_FS+0x20>)
 8008e16:	f7fe feee 	bl	8007bf6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008e1a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	20000c9c 	.word	0x20000c9c
 8008e24:	200005f0 	.word	0x200005f0
 8008e28:	200008b4 	.word	0x200008b4

08008e2c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008e30:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bc80      	pop	{r7}
 8008e38:	4770      	bx	lr
	...

08008e3c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	4603      	mov	r3, r0
 8008e44:	6039      	str	r1, [r7, #0]
 8008e46:	71fb      	strb	r3, [r7, #7]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008e4c:	79fb      	ldrb	r3, [r7, #7]
 8008e4e:	2b23      	cmp	r3, #35	; 0x23
 8008e50:	d84a      	bhi.n	8008ee8 <CDC_Control_FS+0xac>
 8008e52:	a201      	add	r2, pc, #4	; (adr r2, 8008e58 <CDC_Control_FS+0x1c>)
 8008e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e58:	08008ee9 	.word	0x08008ee9
 8008e5c:	08008ee9 	.word	0x08008ee9
 8008e60:	08008ee9 	.word	0x08008ee9
 8008e64:	08008ee9 	.word	0x08008ee9
 8008e68:	08008ee9 	.word	0x08008ee9
 8008e6c:	08008ee9 	.word	0x08008ee9
 8008e70:	08008ee9 	.word	0x08008ee9
 8008e74:	08008ee9 	.word	0x08008ee9
 8008e78:	08008ee9 	.word	0x08008ee9
 8008e7c:	08008ee9 	.word	0x08008ee9
 8008e80:	08008ee9 	.word	0x08008ee9
 8008e84:	08008ee9 	.word	0x08008ee9
 8008e88:	08008ee9 	.word	0x08008ee9
 8008e8c:	08008ee9 	.word	0x08008ee9
 8008e90:	08008ee9 	.word	0x08008ee9
 8008e94:	08008ee9 	.word	0x08008ee9
 8008e98:	08008ee9 	.word	0x08008ee9
 8008e9c:	08008ee9 	.word	0x08008ee9
 8008ea0:	08008ee9 	.word	0x08008ee9
 8008ea4:	08008ee9 	.word	0x08008ee9
 8008ea8:	08008ee9 	.word	0x08008ee9
 8008eac:	08008ee9 	.word	0x08008ee9
 8008eb0:	08008ee9 	.word	0x08008ee9
 8008eb4:	08008ee9 	.word	0x08008ee9
 8008eb8:	08008ee9 	.word	0x08008ee9
 8008ebc:	08008ee9 	.word	0x08008ee9
 8008ec0:	08008ee9 	.word	0x08008ee9
 8008ec4:	08008ee9 	.word	0x08008ee9
 8008ec8:	08008ee9 	.word	0x08008ee9
 8008ecc:	08008ee9 	.word	0x08008ee9
 8008ed0:	08008ee9 	.word	0x08008ee9
 8008ed4:	08008ee9 	.word	0x08008ee9
 8008ed8:	08008ee9 	.word	0x08008ee9
 8008edc:	08008ee9 	.word	0x08008ee9
 8008ee0:	08008ee9 	.word	0x08008ee9
 8008ee4:	08008ee9 	.word	0x08008ee9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008ee8:	bf00      	nop
  }

  return (USBD_OK);
 8008eea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	370c      	adds	r7, #12
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bc80      	pop	{r7}
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop

08008ef8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008f02:	6879      	ldr	r1, [r7, #4]
 8008f04:	4805      	ldr	r0, [pc, #20]	; (8008f1c <CDC_Receive_FS+0x24>)
 8008f06:	f7fe fe76 	bl	8007bf6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008f0a:	4804      	ldr	r0, [pc, #16]	; (8008f1c <CDC_Receive_FS+0x24>)
 8008f0c:	f7fe fe86 	bl	8007c1c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008f10:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3708      	adds	r7, #8
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	200005f0 	.word	0x200005f0

08008f20 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	4603      	mov	r3, r0
 8008f28:	6039      	str	r1, [r7, #0]
 8008f2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	2212      	movs	r2, #18
 8008f30:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008f32:	4b03      	ldr	r3, [pc, #12]	; (8008f40 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bc80      	pop	{r7}
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	20000220 	.word	0x20000220

08008f44 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	6039      	str	r1, [r7, #0]
 8008f4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	2204      	movs	r2, #4
 8008f54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008f56:	4b03      	ldr	r3, [pc, #12]	; (8008f64 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bc80      	pop	{r7}
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	20000234 	.word	0x20000234

08008f68 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	4603      	mov	r3, r0
 8008f70:	6039      	str	r1, [r7, #0]
 8008f72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f74:	79fb      	ldrb	r3, [r7, #7]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d105      	bne.n	8008f86 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f7a:	683a      	ldr	r2, [r7, #0]
 8008f7c:	4907      	ldr	r1, [pc, #28]	; (8008f9c <USBD_FS_ProductStrDescriptor+0x34>)
 8008f7e:	4808      	ldr	r0, [pc, #32]	; (8008fa0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f80:	f7ff fe32 	bl	8008be8 <USBD_GetString>
 8008f84:	e004      	b.n	8008f90 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f86:	683a      	ldr	r2, [r7, #0]
 8008f88:	4904      	ldr	r1, [pc, #16]	; (8008f9c <USBD_FS_ProductStrDescriptor+0x34>)
 8008f8a:	4805      	ldr	r0, [pc, #20]	; (8008fa0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f8c:	f7ff fe2c 	bl	8008be8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f90:	4b02      	ldr	r3, [pc, #8]	; (8008f9c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3708      	adds	r7, #8
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop
 8008f9c:	20001084 	.word	0x20001084
 8008fa0:	08009f94 	.word	0x08009f94

08008fa4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	4603      	mov	r3, r0
 8008fac:	6039      	str	r1, [r7, #0]
 8008fae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008fb0:	683a      	ldr	r2, [r7, #0]
 8008fb2:	4904      	ldr	r1, [pc, #16]	; (8008fc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008fb4:	4804      	ldr	r0, [pc, #16]	; (8008fc8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008fb6:	f7ff fe17 	bl	8008be8 <USBD_GetString>
  return USBD_StrDesc;
 8008fba:	4b02      	ldr	r3, [pc, #8]	; (8008fc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3708      	adds	r7, #8
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	20001084 	.word	0x20001084
 8008fc8:	08009fac 	.word	0x08009fac

08008fcc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	6039      	str	r1, [r7, #0]
 8008fd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	221a      	movs	r2, #26
 8008fdc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008fde:	f000 f843 	bl	8009068 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008fe2:	4b02      	ldr	r3, [pc, #8]	; (8008fec <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3708      	adds	r7, #8
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	20000238 	.word	0x20000238

08008ff0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	6039      	str	r1, [r7, #0]
 8008ffa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008ffc:	79fb      	ldrb	r3, [r7, #7]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d105      	bne.n	800900e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009002:	683a      	ldr	r2, [r7, #0]
 8009004:	4907      	ldr	r1, [pc, #28]	; (8009024 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009006:	4808      	ldr	r0, [pc, #32]	; (8009028 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009008:	f7ff fdee 	bl	8008be8 <USBD_GetString>
 800900c:	e004      	b.n	8009018 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800900e:	683a      	ldr	r2, [r7, #0]
 8009010:	4904      	ldr	r1, [pc, #16]	; (8009024 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009012:	4805      	ldr	r0, [pc, #20]	; (8009028 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009014:	f7ff fde8 	bl	8008be8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009018:	4b02      	ldr	r3, [pc, #8]	; (8009024 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800901a:	4618      	mov	r0, r3
 800901c:	3708      	adds	r7, #8
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	20001084 	.word	0x20001084
 8009028:	08009fc0 	.word	0x08009fc0

0800902c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	4603      	mov	r3, r0
 8009034:	6039      	str	r1, [r7, #0]
 8009036:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009038:	79fb      	ldrb	r3, [r7, #7]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d105      	bne.n	800904a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800903e:	683a      	ldr	r2, [r7, #0]
 8009040:	4907      	ldr	r1, [pc, #28]	; (8009060 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009042:	4808      	ldr	r0, [pc, #32]	; (8009064 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009044:	f7ff fdd0 	bl	8008be8 <USBD_GetString>
 8009048:	e004      	b.n	8009054 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800904a:	683a      	ldr	r2, [r7, #0]
 800904c:	4904      	ldr	r1, [pc, #16]	; (8009060 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800904e:	4805      	ldr	r0, [pc, #20]	; (8009064 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009050:	f7ff fdca 	bl	8008be8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009054:	4b02      	ldr	r3, [pc, #8]	; (8009060 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009056:	4618      	mov	r0, r3
 8009058:	3708      	adds	r7, #8
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	20001084 	.word	0x20001084
 8009064:	08009fcc 	.word	0x08009fcc

08009068 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800906e:	4b0f      	ldr	r3, [pc, #60]	; (80090ac <Get_SerialNum+0x44>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009074:	4b0e      	ldr	r3, [pc, #56]	; (80090b0 <Get_SerialNum+0x48>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800907a:	4b0e      	ldr	r3, [pc, #56]	; (80090b4 <Get_SerialNum+0x4c>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4413      	add	r3, r2
 8009086:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d009      	beq.n	80090a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800908e:	2208      	movs	r2, #8
 8009090:	4909      	ldr	r1, [pc, #36]	; (80090b8 <Get_SerialNum+0x50>)
 8009092:	68f8      	ldr	r0, [r7, #12]
 8009094:	f000 f814 	bl	80090c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009098:	2204      	movs	r2, #4
 800909a:	4908      	ldr	r1, [pc, #32]	; (80090bc <Get_SerialNum+0x54>)
 800909c:	68b8      	ldr	r0, [r7, #8]
 800909e:	f000 f80f 	bl	80090c0 <IntToUnicode>
  }
}
 80090a2:	bf00      	nop
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	1ffff7e8 	.word	0x1ffff7e8
 80090b0:	1ffff7ec 	.word	0x1ffff7ec
 80090b4:	1ffff7f0 	.word	0x1ffff7f0
 80090b8:	2000023a 	.word	0x2000023a
 80090bc:	2000024a 	.word	0x2000024a

080090c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b087      	sub	sp, #28
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	4613      	mov	r3, r2
 80090cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80090ce:	2300      	movs	r3, #0
 80090d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80090d2:	2300      	movs	r3, #0
 80090d4:	75fb      	strb	r3, [r7, #23]
 80090d6:	e027      	b.n	8009128 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	0f1b      	lsrs	r3, r3, #28
 80090dc:	2b09      	cmp	r3, #9
 80090de:	d80b      	bhi.n	80090f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	0f1b      	lsrs	r3, r3, #28
 80090e4:	b2da      	uxtb	r2, r3
 80090e6:	7dfb      	ldrb	r3, [r7, #23]
 80090e8:	005b      	lsls	r3, r3, #1
 80090ea:	4619      	mov	r1, r3
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	440b      	add	r3, r1
 80090f0:	3230      	adds	r2, #48	; 0x30
 80090f2:	b2d2      	uxtb	r2, r2
 80090f4:	701a      	strb	r2, [r3, #0]
 80090f6:	e00a      	b.n	800910e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	0f1b      	lsrs	r3, r3, #28
 80090fc:	b2da      	uxtb	r2, r3
 80090fe:	7dfb      	ldrb	r3, [r7, #23]
 8009100:	005b      	lsls	r3, r3, #1
 8009102:	4619      	mov	r1, r3
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	440b      	add	r3, r1
 8009108:	3237      	adds	r2, #55	; 0x37
 800910a:	b2d2      	uxtb	r2, r2
 800910c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	011b      	lsls	r3, r3, #4
 8009112:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009114:	7dfb      	ldrb	r3, [r7, #23]
 8009116:	005b      	lsls	r3, r3, #1
 8009118:	3301      	adds	r3, #1
 800911a:	68ba      	ldr	r2, [r7, #8]
 800911c:	4413      	add	r3, r2
 800911e:	2200      	movs	r2, #0
 8009120:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009122:	7dfb      	ldrb	r3, [r7, #23]
 8009124:	3301      	adds	r3, #1
 8009126:	75fb      	strb	r3, [r7, #23]
 8009128:	7dfa      	ldrb	r2, [r7, #23]
 800912a:	79fb      	ldrb	r3, [r7, #7]
 800912c:	429a      	cmp	r2, r3
 800912e:	d3d3      	bcc.n	80090d8 <IntToUnicode+0x18>
  }
}
 8009130:	bf00      	nop
 8009132:	bf00      	nop
 8009134:	371c      	adds	r7, #28
 8009136:	46bd      	mov	sp, r7
 8009138:	bc80      	pop	{r7}
 800913a:	4770      	bx	lr

0800913c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a0d      	ldr	r2, [pc, #52]	; (8009180 <HAL_PCD_MspInit+0x44>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d113      	bne.n	8009176 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800914e:	4b0d      	ldr	r3, [pc, #52]	; (8009184 <HAL_PCD_MspInit+0x48>)
 8009150:	69db      	ldr	r3, [r3, #28]
 8009152:	4a0c      	ldr	r2, [pc, #48]	; (8009184 <HAL_PCD_MspInit+0x48>)
 8009154:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009158:	61d3      	str	r3, [r2, #28]
 800915a:	4b0a      	ldr	r3, [pc, #40]	; (8009184 <HAL_PCD_MspInit+0x48>)
 800915c:	69db      	ldr	r3, [r3, #28]
 800915e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009162:	60fb      	str	r3, [r7, #12]
 8009164:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009166:	2200      	movs	r2, #0
 8009168:	2100      	movs	r1, #0
 800916a:	2014      	movs	r0, #20
 800916c:	f7f8 fc91 	bl	8001a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009170:	2014      	movs	r0, #20
 8009172:	f7f8 fcaa 	bl	8001aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009176:	bf00      	nop
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	40005c00 	.word	0x40005c00
 8009184:	40021000 	.word	0x40021000

08009188 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800919c:	4619      	mov	r1, r3
 800919e:	4610      	mov	r0, r2
 80091a0:	f7fe fdf2 	bl	8007d88 <USBD_LL_SetupStage>
}
 80091a4:	bf00      	nop
 80091a6:	3708      	adds	r7, #8
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	460b      	mov	r3, r1
 80091b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 80091be:	78fa      	ldrb	r2, [r7, #3]
 80091c0:	6879      	ldr	r1, [r7, #4]
 80091c2:	4613      	mov	r3, r2
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	4413      	add	r3, r2
 80091c8:	00db      	lsls	r3, r3, #3
 80091ca:	440b      	add	r3, r1
 80091cc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	78fb      	ldrb	r3, [r7, #3]
 80091d4:	4619      	mov	r1, r3
 80091d6:	f7fe fe24 	bl	8007e22 <USBD_LL_DataOutStage>
}
 80091da:	bf00      	nop
 80091dc:	3708      	adds	r7, #8
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b082      	sub	sp, #8
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
 80091ea:	460b      	mov	r3, r1
 80091ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 80091f4:	78fa      	ldrb	r2, [r7, #3]
 80091f6:	6879      	ldr	r1, [r7, #4]
 80091f8:	4613      	mov	r3, r2
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	4413      	add	r3, r2
 80091fe:	00db      	lsls	r3, r3, #3
 8009200:	440b      	add	r3, r1
 8009202:	3324      	adds	r3, #36	; 0x24
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	78fb      	ldrb	r3, [r7, #3]
 8009208:	4619      	mov	r1, r3
 800920a:	f7fe fe7b 	bl	8007f04 <USBD_LL_DataInStage>
}
 800920e:	bf00      	nop
 8009210:	3708      	adds	r7, #8
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009216:	b580      	push	{r7, lr}
 8009218:	b082      	sub	sp, #8
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009224:	4618      	mov	r0, r3
 8009226:	f7fe ff8b 	bl	8008140 <USBD_LL_SOF>
}
 800922a:	bf00      	nop
 800922c:	3708      	adds	r7, #8
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009232:	b580      	push	{r7, lr}
 8009234:	b084      	sub	sp, #16
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800923a:	2301      	movs	r3, #1
 800923c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	799b      	ldrb	r3, [r3, #6]
 8009242:	2b02      	cmp	r3, #2
 8009244:	d001      	beq.n	800924a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009246:	f7f8 f8d3 	bl	80013f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009250:	7bfa      	ldrb	r2, [r7, #15]
 8009252:	4611      	mov	r1, r2
 8009254:	4618      	mov	r0, r3
 8009256:	f7fe ff3b 	bl	80080d0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009260:	4618      	mov	r0, r3
 8009262:	f7fe fef4 	bl	800804e <USBD_LL_Reset>
}
 8009266:	bf00      	nop
 8009268:	3710      	adds	r7, #16
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
	...

08009270 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800927e:	4618      	mov	r0, r3
 8009280:	f7fe ff35 	bl	80080ee <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	7a9b      	ldrb	r3, [r3, #10]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d005      	beq.n	8009298 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800928c:	4b04      	ldr	r3, [pc, #16]	; (80092a0 <HAL_PCD_SuspendCallback+0x30>)
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	4a03      	ldr	r2, [pc, #12]	; (80092a0 <HAL_PCD_SuspendCallback+0x30>)
 8009292:	f043 0306 	orr.w	r3, r3, #6
 8009296:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009298:	bf00      	nop
 800929a:	3708      	adds	r7, #8
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}
 80092a0:	e000ed00 	.word	0xe000ed00

080092a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7fe ff2f 	bl	8008116 <USBD_LL_Resume>
}
 80092b8:	bf00      	nop
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80092c8:	4a28      	ldr	r2, [pc, #160]	; (800936c <USBD_LL_Init+0xac>)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8c2 32d4 	str.w	r3, [r2, #724]	; 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	4a26      	ldr	r2, [pc, #152]	; (800936c <USBD_LL_Init+0xac>)
 80092d4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80092d8:	4b24      	ldr	r3, [pc, #144]	; (800936c <USBD_LL_Init+0xac>)
 80092da:	4a25      	ldr	r2, [pc, #148]	; (8009370 <USBD_LL_Init+0xb0>)
 80092dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80092de:	4b23      	ldr	r3, [pc, #140]	; (800936c <USBD_LL_Init+0xac>)
 80092e0:	2208      	movs	r2, #8
 80092e2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80092e4:	4b21      	ldr	r3, [pc, #132]	; (800936c <USBD_LL_Init+0xac>)
 80092e6:	2202      	movs	r2, #2
 80092e8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80092ea:	4b20      	ldr	r3, [pc, #128]	; (800936c <USBD_LL_Init+0xac>)
 80092ec:	2200      	movs	r2, #0
 80092ee:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80092f0:	4b1e      	ldr	r3, [pc, #120]	; (800936c <USBD_LL_Init+0xac>)
 80092f2:	2200      	movs	r2, #0
 80092f4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80092f6:	4b1d      	ldr	r3, [pc, #116]	; (800936c <USBD_LL_Init+0xac>)
 80092f8:	2200      	movs	r2, #0
 80092fa:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80092fc:	481b      	ldr	r0, [pc, #108]	; (800936c <USBD_LL_Init+0xac>)
 80092fe:	f7f9 fa4f 	bl	80027a0 <HAL_PCD_Init>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d001      	beq.n	800930c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009308:	f7f8 f872 	bl	80013f0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009312:	2318      	movs	r3, #24
 8009314:	2200      	movs	r2, #0
 8009316:	2100      	movs	r1, #0
 8009318:	f7fa ff63 	bl	80041e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009322:	2358      	movs	r3, #88	; 0x58
 8009324:	2200      	movs	r2, #0
 8009326:	2180      	movs	r1, #128	; 0x80
 8009328:	f7fa ff5b 	bl	80041e2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009332:	23c0      	movs	r3, #192	; 0xc0
 8009334:	2200      	movs	r2, #0
 8009336:	2181      	movs	r1, #129	; 0x81
 8009338:	f7fa ff53 	bl	80041e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009342:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009346:	2200      	movs	r2, #0
 8009348:	2101      	movs	r1, #1
 800934a:	f7fa ff4a 	bl	80041e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009354:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009358:	2200      	movs	r2, #0
 800935a:	2182      	movs	r1, #130	; 0x82
 800935c:	f7fa ff41 	bl	80041e2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009360:	2300      	movs	r3, #0
}
 8009362:	4618      	mov	r0, r3
 8009364:	3708      	adds	r7, #8
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	20001284 	.word	0x20001284
 8009370:	40005c00 	.word	0x40005c00

08009374 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800937c:	2300      	movs	r3, #0
 800937e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009380:	2300      	movs	r3, #0
 8009382:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800938a:	4618      	mov	r0, r3
 800938c:	f7f9 fafe 	bl	800298c <HAL_PCD_Start>
 8009390:	4603      	mov	r3, r0
 8009392:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009394:	7bfb      	ldrb	r3, [r7, #15]
 8009396:	4618      	mov	r0, r3
 8009398:	f000 f94e 	bl	8009638 <USBD_Get_USB_Status>
 800939c:	4603      	mov	r3, r0
 800939e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3710      	adds	r7, #16
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b084      	sub	sp, #16
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
 80093b2:	4608      	mov	r0, r1
 80093b4:	4611      	mov	r1, r2
 80093b6:	461a      	mov	r2, r3
 80093b8:	4603      	mov	r3, r0
 80093ba:	70fb      	strb	r3, [r7, #3]
 80093bc:	460b      	mov	r3, r1
 80093be:	70bb      	strb	r3, [r7, #2]
 80093c0:	4613      	mov	r3, r2
 80093c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093c4:	2300      	movs	r3, #0
 80093c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093c8:	2300      	movs	r3, #0
 80093ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80093d2:	78bb      	ldrb	r3, [r7, #2]
 80093d4:	883a      	ldrh	r2, [r7, #0]
 80093d6:	78f9      	ldrb	r1, [r7, #3]
 80093d8:	f7f9 fc54 	bl	8002c84 <HAL_PCD_EP_Open>
 80093dc:	4603      	mov	r3, r0
 80093de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093e0:	7bfb      	ldrb	r3, [r7, #15]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f000 f928 	bl	8009638 <USBD_Get_USB_Status>
 80093e8:	4603      	mov	r3, r0
 80093ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b084      	sub	sp, #16
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
 80093fe:	460b      	mov	r3, r1
 8009400:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009402:	2300      	movs	r3, #0
 8009404:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009406:	2300      	movs	r3, #0
 8009408:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009410:	78fa      	ldrb	r2, [r7, #3]
 8009412:	4611      	mov	r1, r2
 8009414:	4618      	mov	r0, r3
 8009416:	f7f9 fc92 	bl	8002d3e <HAL_PCD_EP_Close>
 800941a:	4603      	mov	r3, r0
 800941c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800941e:	7bfb      	ldrb	r3, [r7, #15]
 8009420:	4618      	mov	r0, r3
 8009422:	f000 f909 	bl	8009638 <USBD_Get_USB_Status>
 8009426:	4603      	mov	r3, r0
 8009428:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800942a:	7bbb      	ldrb	r3, [r7, #14]
}
 800942c:	4618      	mov	r0, r3
 800942e:	3710      	adds	r7, #16
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	460b      	mov	r3, r1
 800943e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009440:	2300      	movs	r3, #0
 8009442:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009444:	2300      	movs	r3, #0
 8009446:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800944e:	78fa      	ldrb	r2, [r7, #3]
 8009450:	4611      	mov	r1, r2
 8009452:	4618      	mov	r0, r3
 8009454:	f7f9 fd3a 	bl	8002ecc <HAL_PCD_EP_SetStall>
 8009458:	4603      	mov	r3, r0
 800945a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800945c:	7bfb      	ldrb	r3, [r7, #15]
 800945e:	4618      	mov	r0, r3
 8009460:	f000 f8ea 	bl	8009638 <USBD_Get_USB_Status>
 8009464:	4603      	mov	r3, r0
 8009466:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009468:	7bbb      	ldrb	r3, [r7, #14]
}
 800946a:	4618      	mov	r0, r3
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}

08009472 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009472:	b580      	push	{r7, lr}
 8009474:	b084      	sub	sp, #16
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
 800947a:	460b      	mov	r3, r1
 800947c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800947e:	2300      	movs	r3, #0
 8009480:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009482:	2300      	movs	r3, #0
 8009484:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800948c:	78fa      	ldrb	r2, [r7, #3]
 800948e:	4611      	mov	r1, r2
 8009490:	4618      	mov	r0, r3
 8009492:	f7f9 fd7b 	bl	8002f8c <HAL_PCD_EP_ClrStall>
 8009496:	4603      	mov	r3, r0
 8009498:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800949a:	7bfb      	ldrb	r3, [r7, #15]
 800949c:	4618      	mov	r0, r3
 800949e:	f000 f8cb 	bl	8009638 <USBD_Get_USB_Status>
 80094a2:	4603      	mov	r3, r0
 80094a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3710      	adds	r7, #16
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b085      	sub	sp, #20
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	460b      	mov	r3, r1
 80094ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80094c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	da0b      	bge.n	80094e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80094cc:	78fb      	ldrb	r3, [r7, #3]
 80094ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094d2:	68f9      	ldr	r1, [r7, #12]
 80094d4:	4613      	mov	r3, r2
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	4413      	add	r3, r2
 80094da:	00db      	lsls	r3, r3, #3
 80094dc:	440b      	add	r3, r1
 80094de:	3312      	adds	r3, #18
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	e00b      	b.n	80094fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80094e4:	78fb      	ldrb	r3, [r7, #3]
 80094e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094ea:	68f9      	ldr	r1, [r7, #12]
 80094ec:	4613      	mov	r3, r2
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	4413      	add	r3, r2
 80094f2:	00db      	lsls	r3, r3, #3
 80094f4:	440b      	add	r3, r1
 80094f6:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 80094fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3714      	adds	r7, #20
 8009500:	46bd      	mov	sp, r7
 8009502:	bc80      	pop	{r7}
 8009504:	4770      	bx	lr

08009506 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b084      	sub	sp, #16
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
 800950e:	460b      	mov	r3, r1
 8009510:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009512:	2300      	movs	r3, #0
 8009514:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009516:	2300      	movs	r3, #0
 8009518:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009520:	78fa      	ldrb	r2, [r7, #3]
 8009522:	4611      	mov	r1, r2
 8009524:	4618      	mov	r0, r3
 8009526:	f7f9 fb89 	bl	8002c3c <HAL_PCD_SetAddress>
 800952a:	4603      	mov	r3, r0
 800952c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800952e:	7bfb      	ldrb	r3, [r7, #15]
 8009530:	4618      	mov	r0, r3
 8009532:	f000 f881 	bl	8009638 <USBD_Get_USB_Status>
 8009536:	4603      	mov	r3, r0
 8009538:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800953a:	7bbb      	ldrb	r3, [r7, #14]
}
 800953c:	4618      	mov	r0, r3
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b086      	sub	sp, #24
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	607a      	str	r2, [r7, #4]
 800954e:	461a      	mov	r2, r3
 8009550:	460b      	mov	r3, r1
 8009552:	72fb      	strb	r3, [r7, #11]
 8009554:	4613      	mov	r3, r2
 8009556:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009558:	2300      	movs	r3, #0
 800955a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800955c:	2300      	movs	r3, #0
 800955e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009566:	893b      	ldrh	r3, [r7, #8]
 8009568:	7af9      	ldrb	r1, [r7, #11]
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	f7f9 fc77 	bl	8002e5e <HAL_PCD_EP_Transmit>
 8009570:	4603      	mov	r3, r0
 8009572:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009574:	7dfb      	ldrb	r3, [r7, #23]
 8009576:	4618      	mov	r0, r3
 8009578:	f000 f85e 	bl	8009638 <USBD_Get_USB_Status>
 800957c:	4603      	mov	r3, r0
 800957e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009580:	7dbb      	ldrb	r3, [r7, #22]
}
 8009582:	4618      	mov	r0, r3
 8009584:	3718      	adds	r7, #24
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b086      	sub	sp, #24
 800958e:	af00      	add	r7, sp, #0
 8009590:	60f8      	str	r0, [r7, #12]
 8009592:	607a      	str	r2, [r7, #4]
 8009594:	461a      	mov	r2, r3
 8009596:	460b      	mov	r3, r1
 8009598:	72fb      	strb	r3, [r7, #11]
 800959a:	4613      	mov	r3, r2
 800959c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800959e:	2300      	movs	r3, #0
 80095a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095a2:	2300      	movs	r3, #0
 80095a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80095ac:	893b      	ldrh	r3, [r7, #8]
 80095ae:	7af9      	ldrb	r1, [r7, #11]
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	f7f9 fc0c 	bl	8002dce <HAL_PCD_EP_Receive>
 80095b6:	4603      	mov	r3, r0
 80095b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095ba:	7dfb      	ldrb	r3, [r7, #23]
 80095bc:	4618      	mov	r0, r3
 80095be:	f000 f83b 	bl	8009638 <USBD_Get_USB_Status>
 80095c2:	4603      	mov	r3, r0
 80095c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80095c6:	7dbb      	ldrb	r3, [r7, #22]
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3718      	adds	r7, #24
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	460b      	mov	r3, r1
 80095da:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095e2:	78fa      	ldrb	r2, [r7, #3]
 80095e4:	4611      	mov	r1, r2
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7f9 fc22 	bl	8002e30 <HAL_PCD_EP_GetRxCount>
 80095ec:	4603      	mov	r3, r0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3708      	adds	r7, #8
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
	...

080095f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009600:	4b02      	ldr	r3, [pc, #8]	; (800960c <USBD_static_malloc+0x14>)
}
 8009602:	4618      	mov	r0, r3
 8009604:	370c      	adds	r7, #12
 8009606:	46bd      	mov	sp, r7
 8009608:	bc80      	pop	{r7}
 800960a:	4770      	bx	lr
 800960c:	200003c4 	.word	0x200003c4

08009610 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]

}
 8009618:	bf00      	nop
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	bc80      	pop	{r7}
 8009620:	4770      	bx	lr

08009622 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009622:	b480      	push	{r7}
 8009624:	b083      	sub	sp, #12
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
 800962a:	460b      	mov	r3, r1
 800962c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800962e:	bf00      	nop
 8009630:	370c      	adds	r7, #12
 8009632:	46bd      	mov	sp, r7
 8009634:	bc80      	pop	{r7}
 8009636:	4770      	bx	lr

08009638 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009638:	b480      	push	{r7}
 800963a:	b085      	sub	sp, #20
 800963c:	af00      	add	r7, sp, #0
 800963e:	4603      	mov	r3, r0
 8009640:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009642:	2300      	movs	r3, #0
 8009644:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009646:	79fb      	ldrb	r3, [r7, #7]
 8009648:	2b03      	cmp	r3, #3
 800964a:	d817      	bhi.n	800967c <USBD_Get_USB_Status+0x44>
 800964c:	a201      	add	r2, pc, #4	; (adr r2, 8009654 <USBD_Get_USB_Status+0x1c>)
 800964e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009652:	bf00      	nop
 8009654:	08009665 	.word	0x08009665
 8009658:	0800966b 	.word	0x0800966b
 800965c:	08009671 	.word	0x08009671
 8009660:	08009677 	.word	0x08009677
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009664:	2300      	movs	r3, #0
 8009666:	73fb      	strb	r3, [r7, #15]
    break;
 8009668:	e00b      	b.n	8009682 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800966a:	2302      	movs	r3, #2
 800966c:	73fb      	strb	r3, [r7, #15]
    break;
 800966e:	e008      	b.n	8009682 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009670:	2301      	movs	r3, #1
 8009672:	73fb      	strb	r3, [r7, #15]
    break;
 8009674:	e005      	b.n	8009682 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009676:	2302      	movs	r3, #2
 8009678:	73fb      	strb	r3, [r7, #15]
    break;
 800967a:	e002      	b.n	8009682 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800967c:	2302      	movs	r3, #2
 800967e:	73fb      	strb	r3, [r7, #15]
    break;
 8009680:	bf00      	nop
  }
  return usb_status;
 8009682:	7bfb      	ldrb	r3, [r7, #15]
}
 8009684:	4618      	mov	r0, r3
 8009686:	3714      	adds	r7, #20
 8009688:	46bd      	mov	sp, r7
 800968a:	bc80      	pop	{r7}
 800968c:	4770      	bx	lr
 800968e:	bf00      	nop

08009690 <__errno>:
 8009690:	4b01      	ldr	r3, [pc, #4]	; (8009698 <__errno+0x8>)
 8009692:	6818      	ldr	r0, [r3, #0]
 8009694:	4770      	bx	lr
 8009696:	bf00      	nop
 8009698:	20000254 	.word	0x20000254

0800969c <__libc_init_array>:
 800969c:	b570      	push	{r4, r5, r6, lr}
 800969e:	2600      	movs	r6, #0
 80096a0:	4d0c      	ldr	r5, [pc, #48]	; (80096d4 <__libc_init_array+0x38>)
 80096a2:	4c0d      	ldr	r4, [pc, #52]	; (80096d8 <__libc_init_array+0x3c>)
 80096a4:	1b64      	subs	r4, r4, r5
 80096a6:	10a4      	asrs	r4, r4, #2
 80096a8:	42a6      	cmp	r6, r4
 80096aa:	d109      	bne.n	80096c0 <__libc_init_array+0x24>
 80096ac:	f000 fc5c 	bl	8009f68 <_init>
 80096b0:	2600      	movs	r6, #0
 80096b2:	4d0a      	ldr	r5, [pc, #40]	; (80096dc <__libc_init_array+0x40>)
 80096b4:	4c0a      	ldr	r4, [pc, #40]	; (80096e0 <__libc_init_array+0x44>)
 80096b6:	1b64      	subs	r4, r4, r5
 80096b8:	10a4      	asrs	r4, r4, #2
 80096ba:	42a6      	cmp	r6, r4
 80096bc:	d105      	bne.n	80096ca <__libc_init_array+0x2e>
 80096be:	bd70      	pop	{r4, r5, r6, pc}
 80096c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80096c4:	4798      	blx	r3
 80096c6:	3601      	adds	r6, #1
 80096c8:	e7ee      	b.n	80096a8 <__libc_init_array+0xc>
 80096ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80096ce:	4798      	blx	r3
 80096d0:	3601      	adds	r6, #1
 80096d2:	e7f2      	b.n	80096ba <__libc_init_array+0x1e>
 80096d4:	0800a09c 	.word	0x0800a09c
 80096d8:	0800a09c 	.word	0x0800a09c
 80096dc:	0800a09c 	.word	0x0800a09c
 80096e0:	0800a0a0 	.word	0x0800a0a0

080096e4 <memset>:
 80096e4:	4603      	mov	r3, r0
 80096e6:	4402      	add	r2, r0
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d100      	bne.n	80096ee <memset+0xa>
 80096ec:	4770      	bx	lr
 80096ee:	f803 1b01 	strb.w	r1, [r3], #1
 80096f2:	e7f9      	b.n	80096e8 <memset+0x4>

080096f4 <siprintf>:
 80096f4:	b40e      	push	{r1, r2, r3}
 80096f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80096fa:	b500      	push	{lr}
 80096fc:	b09c      	sub	sp, #112	; 0x70
 80096fe:	ab1d      	add	r3, sp, #116	; 0x74
 8009700:	9002      	str	r0, [sp, #8]
 8009702:	9006      	str	r0, [sp, #24]
 8009704:	9107      	str	r1, [sp, #28]
 8009706:	9104      	str	r1, [sp, #16]
 8009708:	4808      	ldr	r0, [pc, #32]	; (800972c <siprintf+0x38>)
 800970a:	4909      	ldr	r1, [pc, #36]	; (8009730 <siprintf+0x3c>)
 800970c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009710:	9105      	str	r1, [sp, #20]
 8009712:	6800      	ldr	r0, [r0, #0]
 8009714:	a902      	add	r1, sp, #8
 8009716:	9301      	str	r3, [sp, #4]
 8009718:	f000 f868 	bl	80097ec <_svfiprintf_r>
 800971c:	2200      	movs	r2, #0
 800971e:	9b02      	ldr	r3, [sp, #8]
 8009720:	701a      	strb	r2, [r3, #0]
 8009722:	b01c      	add	sp, #112	; 0x70
 8009724:	f85d eb04 	ldr.w	lr, [sp], #4
 8009728:	b003      	add	sp, #12
 800972a:	4770      	bx	lr
 800972c:	20000254 	.word	0x20000254
 8009730:	ffff0208 	.word	0xffff0208

08009734 <__ssputs_r>:
 8009734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009738:	688e      	ldr	r6, [r1, #8]
 800973a:	4682      	mov	sl, r0
 800973c:	429e      	cmp	r6, r3
 800973e:	460c      	mov	r4, r1
 8009740:	4690      	mov	r8, r2
 8009742:	461f      	mov	r7, r3
 8009744:	d838      	bhi.n	80097b8 <__ssputs_r+0x84>
 8009746:	898a      	ldrh	r2, [r1, #12]
 8009748:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800974c:	d032      	beq.n	80097b4 <__ssputs_r+0x80>
 800974e:	6825      	ldr	r5, [r4, #0]
 8009750:	6909      	ldr	r1, [r1, #16]
 8009752:	3301      	adds	r3, #1
 8009754:	eba5 0901 	sub.w	r9, r5, r1
 8009758:	6965      	ldr	r5, [r4, #20]
 800975a:	444b      	add	r3, r9
 800975c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009760:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009764:	106d      	asrs	r5, r5, #1
 8009766:	429d      	cmp	r5, r3
 8009768:	bf38      	it	cc
 800976a:	461d      	movcc	r5, r3
 800976c:	0553      	lsls	r3, r2, #21
 800976e:	d531      	bpl.n	80097d4 <__ssputs_r+0xa0>
 8009770:	4629      	mov	r1, r5
 8009772:	f000 fb53 	bl	8009e1c <_malloc_r>
 8009776:	4606      	mov	r6, r0
 8009778:	b950      	cbnz	r0, 8009790 <__ssputs_r+0x5c>
 800977a:	230c      	movs	r3, #12
 800977c:	f04f 30ff 	mov.w	r0, #4294967295
 8009780:	f8ca 3000 	str.w	r3, [sl]
 8009784:	89a3      	ldrh	r3, [r4, #12]
 8009786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800978a:	81a3      	strh	r3, [r4, #12]
 800978c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009790:	464a      	mov	r2, r9
 8009792:	6921      	ldr	r1, [r4, #16]
 8009794:	f000 face 	bl	8009d34 <memcpy>
 8009798:	89a3      	ldrh	r3, [r4, #12]
 800979a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800979e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097a2:	81a3      	strh	r3, [r4, #12]
 80097a4:	6126      	str	r6, [r4, #16]
 80097a6:	444e      	add	r6, r9
 80097a8:	6026      	str	r6, [r4, #0]
 80097aa:	463e      	mov	r6, r7
 80097ac:	6165      	str	r5, [r4, #20]
 80097ae:	eba5 0509 	sub.w	r5, r5, r9
 80097b2:	60a5      	str	r5, [r4, #8]
 80097b4:	42be      	cmp	r6, r7
 80097b6:	d900      	bls.n	80097ba <__ssputs_r+0x86>
 80097b8:	463e      	mov	r6, r7
 80097ba:	4632      	mov	r2, r6
 80097bc:	4641      	mov	r1, r8
 80097be:	6820      	ldr	r0, [r4, #0]
 80097c0:	f000 fac6 	bl	8009d50 <memmove>
 80097c4:	68a3      	ldr	r3, [r4, #8]
 80097c6:	6822      	ldr	r2, [r4, #0]
 80097c8:	1b9b      	subs	r3, r3, r6
 80097ca:	4432      	add	r2, r6
 80097cc:	2000      	movs	r0, #0
 80097ce:	60a3      	str	r3, [r4, #8]
 80097d0:	6022      	str	r2, [r4, #0]
 80097d2:	e7db      	b.n	800978c <__ssputs_r+0x58>
 80097d4:	462a      	mov	r2, r5
 80097d6:	f000 fb7b 	bl	8009ed0 <_realloc_r>
 80097da:	4606      	mov	r6, r0
 80097dc:	2800      	cmp	r0, #0
 80097de:	d1e1      	bne.n	80097a4 <__ssputs_r+0x70>
 80097e0:	4650      	mov	r0, sl
 80097e2:	6921      	ldr	r1, [r4, #16]
 80097e4:	f000 face 	bl	8009d84 <_free_r>
 80097e8:	e7c7      	b.n	800977a <__ssputs_r+0x46>
	...

080097ec <_svfiprintf_r>:
 80097ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f0:	4698      	mov	r8, r3
 80097f2:	898b      	ldrh	r3, [r1, #12]
 80097f4:	4607      	mov	r7, r0
 80097f6:	061b      	lsls	r3, r3, #24
 80097f8:	460d      	mov	r5, r1
 80097fa:	4614      	mov	r4, r2
 80097fc:	b09d      	sub	sp, #116	; 0x74
 80097fe:	d50e      	bpl.n	800981e <_svfiprintf_r+0x32>
 8009800:	690b      	ldr	r3, [r1, #16]
 8009802:	b963      	cbnz	r3, 800981e <_svfiprintf_r+0x32>
 8009804:	2140      	movs	r1, #64	; 0x40
 8009806:	f000 fb09 	bl	8009e1c <_malloc_r>
 800980a:	6028      	str	r0, [r5, #0]
 800980c:	6128      	str	r0, [r5, #16]
 800980e:	b920      	cbnz	r0, 800981a <_svfiprintf_r+0x2e>
 8009810:	230c      	movs	r3, #12
 8009812:	603b      	str	r3, [r7, #0]
 8009814:	f04f 30ff 	mov.w	r0, #4294967295
 8009818:	e0d1      	b.n	80099be <_svfiprintf_r+0x1d2>
 800981a:	2340      	movs	r3, #64	; 0x40
 800981c:	616b      	str	r3, [r5, #20]
 800981e:	2300      	movs	r3, #0
 8009820:	9309      	str	r3, [sp, #36]	; 0x24
 8009822:	2320      	movs	r3, #32
 8009824:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009828:	2330      	movs	r3, #48	; 0x30
 800982a:	f04f 0901 	mov.w	r9, #1
 800982e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009832:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80099d8 <_svfiprintf_r+0x1ec>
 8009836:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800983a:	4623      	mov	r3, r4
 800983c:	469a      	mov	sl, r3
 800983e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009842:	b10a      	cbz	r2, 8009848 <_svfiprintf_r+0x5c>
 8009844:	2a25      	cmp	r2, #37	; 0x25
 8009846:	d1f9      	bne.n	800983c <_svfiprintf_r+0x50>
 8009848:	ebba 0b04 	subs.w	fp, sl, r4
 800984c:	d00b      	beq.n	8009866 <_svfiprintf_r+0x7a>
 800984e:	465b      	mov	r3, fp
 8009850:	4622      	mov	r2, r4
 8009852:	4629      	mov	r1, r5
 8009854:	4638      	mov	r0, r7
 8009856:	f7ff ff6d 	bl	8009734 <__ssputs_r>
 800985a:	3001      	adds	r0, #1
 800985c:	f000 80aa 	beq.w	80099b4 <_svfiprintf_r+0x1c8>
 8009860:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009862:	445a      	add	r2, fp
 8009864:	9209      	str	r2, [sp, #36]	; 0x24
 8009866:	f89a 3000 	ldrb.w	r3, [sl]
 800986a:	2b00      	cmp	r3, #0
 800986c:	f000 80a2 	beq.w	80099b4 <_svfiprintf_r+0x1c8>
 8009870:	2300      	movs	r3, #0
 8009872:	f04f 32ff 	mov.w	r2, #4294967295
 8009876:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800987a:	f10a 0a01 	add.w	sl, sl, #1
 800987e:	9304      	str	r3, [sp, #16]
 8009880:	9307      	str	r3, [sp, #28]
 8009882:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009886:	931a      	str	r3, [sp, #104]	; 0x68
 8009888:	4654      	mov	r4, sl
 800988a:	2205      	movs	r2, #5
 800988c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009890:	4851      	ldr	r0, [pc, #324]	; (80099d8 <_svfiprintf_r+0x1ec>)
 8009892:	f000 fa41 	bl	8009d18 <memchr>
 8009896:	9a04      	ldr	r2, [sp, #16]
 8009898:	b9d8      	cbnz	r0, 80098d2 <_svfiprintf_r+0xe6>
 800989a:	06d0      	lsls	r0, r2, #27
 800989c:	bf44      	itt	mi
 800989e:	2320      	movmi	r3, #32
 80098a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098a4:	0711      	lsls	r1, r2, #28
 80098a6:	bf44      	itt	mi
 80098a8:	232b      	movmi	r3, #43	; 0x2b
 80098aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098ae:	f89a 3000 	ldrb.w	r3, [sl]
 80098b2:	2b2a      	cmp	r3, #42	; 0x2a
 80098b4:	d015      	beq.n	80098e2 <_svfiprintf_r+0xf6>
 80098b6:	4654      	mov	r4, sl
 80098b8:	2000      	movs	r0, #0
 80098ba:	f04f 0c0a 	mov.w	ip, #10
 80098be:	9a07      	ldr	r2, [sp, #28]
 80098c0:	4621      	mov	r1, r4
 80098c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098c6:	3b30      	subs	r3, #48	; 0x30
 80098c8:	2b09      	cmp	r3, #9
 80098ca:	d94e      	bls.n	800996a <_svfiprintf_r+0x17e>
 80098cc:	b1b0      	cbz	r0, 80098fc <_svfiprintf_r+0x110>
 80098ce:	9207      	str	r2, [sp, #28]
 80098d0:	e014      	b.n	80098fc <_svfiprintf_r+0x110>
 80098d2:	eba0 0308 	sub.w	r3, r0, r8
 80098d6:	fa09 f303 	lsl.w	r3, r9, r3
 80098da:	4313      	orrs	r3, r2
 80098dc:	46a2      	mov	sl, r4
 80098de:	9304      	str	r3, [sp, #16]
 80098e0:	e7d2      	b.n	8009888 <_svfiprintf_r+0x9c>
 80098e2:	9b03      	ldr	r3, [sp, #12]
 80098e4:	1d19      	adds	r1, r3, #4
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	9103      	str	r1, [sp, #12]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	bfbb      	ittet	lt
 80098ee:	425b      	neglt	r3, r3
 80098f0:	f042 0202 	orrlt.w	r2, r2, #2
 80098f4:	9307      	strge	r3, [sp, #28]
 80098f6:	9307      	strlt	r3, [sp, #28]
 80098f8:	bfb8      	it	lt
 80098fa:	9204      	strlt	r2, [sp, #16]
 80098fc:	7823      	ldrb	r3, [r4, #0]
 80098fe:	2b2e      	cmp	r3, #46	; 0x2e
 8009900:	d10c      	bne.n	800991c <_svfiprintf_r+0x130>
 8009902:	7863      	ldrb	r3, [r4, #1]
 8009904:	2b2a      	cmp	r3, #42	; 0x2a
 8009906:	d135      	bne.n	8009974 <_svfiprintf_r+0x188>
 8009908:	9b03      	ldr	r3, [sp, #12]
 800990a:	3402      	adds	r4, #2
 800990c:	1d1a      	adds	r2, r3, #4
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	9203      	str	r2, [sp, #12]
 8009912:	2b00      	cmp	r3, #0
 8009914:	bfb8      	it	lt
 8009916:	f04f 33ff 	movlt.w	r3, #4294967295
 800991a:	9305      	str	r3, [sp, #20]
 800991c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80099e8 <_svfiprintf_r+0x1fc>
 8009920:	2203      	movs	r2, #3
 8009922:	4650      	mov	r0, sl
 8009924:	7821      	ldrb	r1, [r4, #0]
 8009926:	f000 f9f7 	bl	8009d18 <memchr>
 800992a:	b140      	cbz	r0, 800993e <_svfiprintf_r+0x152>
 800992c:	2340      	movs	r3, #64	; 0x40
 800992e:	eba0 000a 	sub.w	r0, r0, sl
 8009932:	fa03 f000 	lsl.w	r0, r3, r0
 8009936:	9b04      	ldr	r3, [sp, #16]
 8009938:	3401      	adds	r4, #1
 800993a:	4303      	orrs	r3, r0
 800993c:	9304      	str	r3, [sp, #16]
 800993e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009942:	2206      	movs	r2, #6
 8009944:	4825      	ldr	r0, [pc, #148]	; (80099dc <_svfiprintf_r+0x1f0>)
 8009946:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800994a:	f000 f9e5 	bl	8009d18 <memchr>
 800994e:	2800      	cmp	r0, #0
 8009950:	d038      	beq.n	80099c4 <_svfiprintf_r+0x1d8>
 8009952:	4b23      	ldr	r3, [pc, #140]	; (80099e0 <_svfiprintf_r+0x1f4>)
 8009954:	bb1b      	cbnz	r3, 800999e <_svfiprintf_r+0x1b2>
 8009956:	9b03      	ldr	r3, [sp, #12]
 8009958:	3307      	adds	r3, #7
 800995a:	f023 0307 	bic.w	r3, r3, #7
 800995e:	3308      	adds	r3, #8
 8009960:	9303      	str	r3, [sp, #12]
 8009962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009964:	4433      	add	r3, r6
 8009966:	9309      	str	r3, [sp, #36]	; 0x24
 8009968:	e767      	b.n	800983a <_svfiprintf_r+0x4e>
 800996a:	460c      	mov	r4, r1
 800996c:	2001      	movs	r0, #1
 800996e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009972:	e7a5      	b.n	80098c0 <_svfiprintf_r+0xd4>
 8009974:	2300      	movs	r3, #0
 8009976:	f04f 0c0a 	mov.w	ip, #10
 800997a:	4619      	mov	r1, r3
 800997c:	3401      	adds	r4, #1
 800997e:	9305      	str	r3, [sp, #20]
 8009980:	4620      	mov	r0, r4
 8009982:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009986:	3a30      	subs	r2, #48	; 0x30
 8009988:	2a09      	cmp	r2, #9
 800998a:	d903      	bls.n	8009994 <_svfiprintf_r+0x1a8>
 800998c:	2b00      	cmp	r3, #0
 800998e:	d0c5      	beq.n	800991c <_svfiprintf_r+0x130>
 8009990:	9105      	str	r1, [sp, #20]
 8009992:	e7c3      	b.n	800991c <_svfiprintf_r+0x130>
 8009994:	4604      	mov	r4, r0
 8009996:	2301      	movs	r3, #1
 8009998:	fb0c 2101 	mla	r1, ip, r1, r2
 800999c:	e7f0      	b.n	8009980 <_svfiprintf_r+0x194>
 800999e:	ab03      	add	r3, sp, #12
 80099a0:	9300      	str	r3, [sp, #0]
 80099a2:	462a      	mov	r2, r5
 80099a4:	4638      	mov	r0, r7
 80099a6:	4b0f      	ldr	r3, [pc, #60]	; (80099e4 <_svfiprintf_r+0x1f8>)
 80099a8:	a904      	add	r1, sp, #16
 80099aa:	f3af 8000 	nop.w
 80099ae:	1c42      	adds	r2, r0, #1
 80099b0:	4606      	mov	r6, r0
 80099b2:	d1d6      	bne.n	8009962 <_svfiprintf_r+0x176>
 80099b4:	89ab      	ldrh	r3, [r5, #12]
 80099b6:	065b      	lsls	r3, r3, #25
 80099b8:	f53f af2c 	bmi.w	8009814 <_svfiprintf_r+0x28>
 80099bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099be:	b01d      	add	sp, #116	; 0x74
 80099c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099c4:	ab03      	add	r3, sp, #12
 80099c6:	9300      	str	r3, [sp, #0]
 80099c8:	462a      	mov	r2, r5
 80099ca:	4638      	mov	r0, r7
 80099cc:	4b05      	ldr	r3, [pc, #20]	; (80099e4 <_svfiprintf_r+0x1f8>)
 80099ce:	a904      	add	r1, sp, #16
 80099d0:	f000 f87c 	bl	8009acc <_printf_i>
 80099d4:	e7eb      	b.n	80099ae <_svfiprintf_r+0x1c2>
 80099d6:	bf00      	nop
 80099d8:	0800a066 	.word	0x0800a066
 80099dc:	0800a070 	.word	0x0800a070
 80099e0:	00000000 	.word	0x00000000
 80099e4:	08009735 	.word	0x08009735
 80099e8:	0800a06c 	.word	0x0800a06c

080099ec <_printf_common>:
 80099ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099f0:	4616      	mov	r6, r2
 80099f2:	4699      	mov	r9, r3
 80099f4:	688a      	ldr	r2, [r1, #8]
 80099f6:	690b      	ldr	r3, [r1, #16]
 80099f8:	4607      	mov	r7, r0
 80099fa:	4293      	cmp	r3, r2
 80099fc:	bfb8      	it	lt
 80099fe:	4613      	movlt	r3, r2
 8009a00:	6033      	str	r3, [r6, #0]
 8009a02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a06:	460c      	mov	r4, r1
 8009a08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a0c:	b10a      	cbz	r2, 8009a12 <_printf_common+0x26>
 8009a0e:	3301      	adds	r3, #1
 8009a10:	6033      	str	r3, [r6, #0]
 8009a12:	6823      	ldr	r3, [r4, #0]
 8009a14:	0699      	lsls	r1, r3, #26
 8009a16:	bf42      	ittt	mi
 8009a18:	6833      	ldrmi	r3, [r6, #0]
 8009a1a:	3302      	addmi	r3, #2
 8009a1c:	6033      	strmi	r3, [r6, #0]
 8009a1e:	6825      	ldr	r5, [r4, #0]
 8009a20:	f015 0506 	ands.w	r5, r5, #6
 8009a24:	d106      	bne.n	8009a34 <_printf_common+0x48>
 8009a26:	f104 0a19 	add.w	sl, r4, #25
 8009a2a:	68e3      	ldr	r3, [r4, #12]
 8009a2c:	6832      	ldr	r2, [r6, #0]
 8009a2e:	1a9b      	subs	r3, r3, r2
 8009a30:	42ab      	cmp	r3, r5
 8009a32:	dc28      	bgt.n	8009a86 <_printf_common+0x9a>
 8009a34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a38:	1e13      	subs	r3, r2, #0
 8009a3a:	6822      	ldr	r2, [r4, #0]
 8009a3c:	bf18      	it	ne
 8009a3e:	2301      	movne	r3, #1
 8009a40:	0692      	lsls	r2, r2, #26
 8009a42:	d42d      	bmi.n	8009aa0 <_printf_common+0xb4>
 8009a44:	4649      	mov	r1, r9
 8009a46:	4638      	mov	r0, r7
 8009a48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a4c:	47c0      	blx	r8
 8009a4e:	3001      	adds	r0, #1
 8009a50:	d020      	beq.n	8009a94 <_printf_common+0xa8>
 8009a52:	6823      	ldr	r3, [r4, #0]
 8009a54:	68e5      	ldr	r5, [r4, #12]
 8009a56:	f003 0306 	and.w	r3, r3, #6
 8009a5a:	2b04      	cmp	r3, #4
 8009a5c:	bf18      	it	ne
 8009a5e:	2500      	movne	r5, #0
 8009a60:	6832      	ldr	r2, [r6, #0]
 8009a62:	f04f 0600 	mov.w	r6, #0
 8009a66:	68a3      	ldr	r3, [r4, #8]
 8009a68:	bf08      	it	eq
 8009a6a:	1aad      	subeq	r5, r5, r2
 8009a6c:	6922      	ldr	r2, [r4, #16]
 8009a6e:	bf08      	it	eq
 8009a70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a74:	4293      	cmp	r3, r2
 8009a76:	bfc4      	itt	gt
 8009a78:	1a9b      	subgt	r3, r3, r2
 8009a7a:	18ed      	addgt	r5, r5, r3
 8009a7c:	341a      	adds	r4, #26
 8009a7e:	42b5      	cmp	r5, r6
 8009a80:	d11a      	bne.n	8009ab8 <_printf_common+0xcc>
 8009a82:	2000      	movs	r0, #0
 8009a84:	e008      	b.n	8009a98 <_printf_common+0xac>
 8009a86:	2301      	movs	r3, #1
 8009a88:	4652      	mov	r2, sl
 8009a8a:	4649      	mov	r1, r9
 8009a8c:	4638      	mov	r0, r7
 8009a8e:	47c0      	blx	r8
 8009a90:	3001      	adds	r0, #1
 8009a92:	d103      	bne.n	8009a9c <_printf_common+0xb0>
 8009a94:	f04f 30ff 	mov.w	r0, #4294967295
 8009a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a9c:	3501      	adds	r5, #1
 8009a9e:	e7c4      	b.n	8009a2a <_printf_common+0x3e>
 8009aa0:	2030      	movs	r0, #48	; 0x30
 8009aa2:	18e1      	adds	r1, r4, r3
 8009aa4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009aa8:	1c5a      	adds	r2, r3, #1
 8009aaa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009aae:	4422      	add	r2, r4
 8009ab0:	3302      	adds	r3, #2
 8009ab2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ab6:	e7c5      	b.n	8009a44 <_printf_common+0x58>
 8009ab8:	2301      	movs	r3, #1
 8009aba:	4622      	mov	r2, r4
 8009abc:	4649      	mov	r1, r9
 8009abe:	4638      	mov	r0, r7
 8009ac0:	47c0      	blx	r8
 8009ac2:	3001      	adds	r0, #1
 8009ac4:	d0e6      	beq.n	8009a94 <_printf_common+0xa8>
 8009ac6:	3601      	adds	r6, #1
 8009ac8:	e7d9      	b.n	8009a7e <_printf_common+0x92>
	...

08009acc <_printf_i>:
 8009acc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ad0:	460c      	mov	r4, r1
 8009ad2:	7e27      	ldrb	r7, [r4, #24]
 8009ad4:	4691      	mov	r9, r2
 8009ad6:	2f78      	cmp	r7, #120	; 0x78
 8009ad8:	4680      	mov	r8, r0
 8009ada:	469a      	mov	sl, r3
 8009adc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009ade:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ae2:	d807      	bhi.n	8009af4 <_printf_i+0x28>
 8009ae4:	2f62      	cmp	r7, #98	; 0x62
 8009ae6:	d80a      	bhi.n	8009afe <_printf_i+0x32>
 8009ae8:	2f00      	cmp	r7, #0
 8009aea:	f000 80d9 	beq.w	8009ca0 <_printf_i+0x1d4>
 8009aee:	2f58      	cmp	r7, #88	; 0x58
 8009af0:	f000 80a4 	beq.w	8009c3c <_printf_i+0x170>
 8009af4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009af8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009afc:	e03a      	b.n	8009b74 <_printf_i+0xa8>
 8009afe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b02:	2b15      	cmp	r3, #21
 8009b04:	d8f6      	bhi.n	8009af4 <_printf_i+0x28>
 8009b06:	a001      	add	r0, pc, #4	; (adr r0, 8009b0c <_printf_i+0x40>)
 8009b08:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009b0c:	08009b65 	.word	0x08009b65
 8009b10:	08009b79 	.word	0x08009b79
 8009b14:	08009af5 	.word	0x08009af5
 8009b18:	08009af5 	.word	0x08009af5
 8009b1c:	08009af5 	.word	0x08009af5
 8009b20:	08009af5 	.word	0x08009af5
 8009b24:	08009b79 	.word	0x08009b79
 8009b28:	08009af5 	.word	0x08009af5
 8009b2c:	08009af5 	.word	0x08009af5
 8009b30:	08009af5 	.word	0x08009af5
 8009b34:	08009af5 	.word	0x08009af5
 8009b38:	08009c87 	.word	0x08009c87
 8009b3c:	08009ba9 	.word	0x08009ba9
 8009b40:	08009c69 	.word	0x08009c69
 8009b44:	08009af5 	.word	0x08009af5
 8009b48:	08009af5 	.word	0x08009af5
 8009b4c:	08009ca9 	.word	0x08009ca9
 8009b50:	08009af5 	.word	0x08009af5
 8009b54:	08009ba9 	.word	0x08009ba9
 8009b58:	08009af5 	.word	0x08009af5
 8009b5c:	08009af5 	.word	0x08009af5
 8009b60:	08009c71 	.word	0x08009c71
 8009b64:	680b      	ldr	r3, [r1, #0]
 8009b66:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009b6a:	1d1a      	adds	r2, r3, #4
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	600a      	str	r2, [r1, #0]
 8009b70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b74:	2301      	movs	r3, #1
 8009b76:	e0a4      	b.n	8009cc2 <_printf_i+0x1f6>
 8009b78:	6825      	ldr	r5, [r4, #0]
 8009b7a:	6808      	ldr	r0, [r1, #0]
 8009b7c:	062e      	lsls	r6, r5, #24
 8009b7e:	f100 0304 	add.w	r3, r0, #4
 8009b82:	d50a      	bpl.n	8009b9a <_printf_i+0xce>
 8009b84:	6805      	ldr	r5, [r0, #0]
 8009b86:	600b      	str	r3, [r1, #0]
 8009b88:	2d00      	cmp	r5, #0
 8009b8a:	da03      	bge.n	8009b94 <_printf_i+0xc8>
 8009b8c:	232d      	movs	r3, #45	; 0x2d
 8009b8e:	426d      	negs	r5, r5
 8009b90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b94:	230a      	movs	r3, #10
 8009b96:	485e      	ldr	r0, [pc, #376]	; (8009d10 <_printf_i+0x244>)
 8009b98:	e019      	b.n	8009bce <_printf_i+0x102>
 8009b9a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009b9e:	6805      	ldr	r5, [r0, #0]
 8009ba0:	600b      	str	r3, [r1, #0]
 8009ba2:	bf18      	it	ne
 8009ba4:	b22d      	sxthne	r5, r5
 8009ba6:	e7ef      	b.n	8009b88 <_printf_i+0xbc>
 8009ba8:	680b      	ldr	r3, [r1, #0]
 8009baa:	6825      	ldr	r5, [r4, #0]
 8009bac:	1d18      	adds	r0, r3, #4
 8009bae:	6008      	str	r0, [r1, #0]
 8009bb0:	0628      	lsls	r0, r5, #24
 8009bb2:	d501      	bpl.n	8009bb8 <_printf_i+0xec>
 8009bb4:	681d      	ldr	r5, [r3, #0]
 8009bb6:	e002      	b.n	8009bbe <_printf_i+0xf2>
 8009bb8:	0669      	lsls	r1, r5, #25
 8009bba:	d5fb      	bpl.n	8009bb4 <_printf_i+0xe8>
 8009bbc:	881d      	ldrh	r5, [r3, #0]
 8009bbe:	2f6f      	cmp	r7, #111	; 0x6f
 8009bc0:	bf0c      	ite	eq
 8009bc2:	2308      	moveq	r3, #8
 8009bc4:	230a      	movne	r3, #10
 8009bc6:	4852      	ldr	r0, [pc, #328]	; (8009d10 <_printf_i+0x244>)
 8009bc8:	2100      	movs	r1, #0
 8009bca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009bce:	6866      	ldr	r6, [r4, #4]
 8009bd0:	2e00      	cmp	r6, #0
 8009bd2:	bfa8      	it	ge
 8009bd4:	6821      	ldrge	r1, [r4, #0]
 8009bd6:	60a6      	str	r6, [r4, #8]
 8009bd8:	bfa4      	itt	ge
 8009bda:	f021 0104 	bicge.w	r1, r1, #4
 8009bde:	6021      	strge	r1, [r4, #0]
 8009be0:	b90d      	cbnz	r5, 8009be6 <_printf_i+0x11a>
 8009be2:	2e00      	cmp	r6, #0
 8009be4:	d04d      	beq.n	8009c82 <_printf_i+0x1b6>
 8009be6:	4616      	mov	r6, r2
 8009be8:	fbb5 f1f3 	udiv	r1, r5, r3
 8009bec:	fb03 5711 	mls	r7, r3, r1, r5
 8009bf0:	5dc7      	ldrb	r7, [r0, r7]
 8009bf2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009bf6:	462f      	mov	r7, r5
 8009bf8:	42bb      	cmp	r3, r7
 8009bfa:	460d      	mov	r5, r1
 8009bfc:	d9f4      	bls.n	8009be8 <_printf_i+0x11c>
 8009bfe:	2b08      	cmp	r3, #8
 8009c00:	d10b      	bne.n	8009c1a <_printf_i+0x14e>
 8009c02:	6823      	ldr	r3, [r4, #0]
 8009c04:	07df      	lsls	r7, r3, #31
 8009c06:	d508      	bpl.n	8009c1a <_printf_i+0x14e>
 8009c08:	6923      	ldr	r3, [r4, #16]
 8009c0a:	6861      	ldr	r1, [r4, #4]
 8009c0c:	4299      	cmp	r1, r3
 8009c0e:	bfde      	ittt	le
 8009c10:	2330      	movle	r3, #48	; 0x30
 8009c12:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c16:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009c1a:	1b92      	subs	r2, r2, r6
 8009c1c:	6122      	str	r2, [r4, #16]
 8009c1e:	464b      	mov	r3, r9
 8009c20:	4621      	mov	r1, r4
 8009c22:	4640      	mov	r0, r8
 8009c24:	f8cd a000 	str.w	sl, [sp]
 8009c28:	aa03      	add	r2, sp, #12
 8009c2a:	f7ff fedf 	bl	80099ec <_printf_common>
 8009c2e:	3001      	adds	r0, #1
 8009c30:	d14c      	bne.n	8009ccc <_printf_i+0x200>
 8009c32:	f04f 30ff 	mov.w	r0, #4294967295
 8009c36:	b004      	add	sp, #16
 8009c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c3c:	4834      	ldr	r0, [pc, #208]	; (8009d10 <_printf_i+0x244>)
 8009c3e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009c42:	680e      	ldr	r6, [r1, #0]
 8009c44:	6823      	ldr	r3, [r4, #0]
 8009c46:	f856 5b04 	ldr.w	r5, [r6], #4
 8009c4a:	061f      	lsls	r7, r3, #24
 8009c4c:	600e      	str	r6, [r1, #0]
 8009c4e:	d514      	bpl.n	8009c7a <_printf_i+0x1ae>
 8009c50:	07d9      	lsls	r1, r3, #31
 8009c52:	bf44      	itt	mi
 8009c54:	f043 0320 	orrmi.w	r3, r3, #32
 8009c58:	6023      	strmi	r3, [r4, #0]
 8009c5a:	b91d      	cbnz	r5, 8009c64 <_printf_i+0x198>
 8009c5c:	6823      	ldr	r3, [r4, #0]
 8009c5e:	f023 0320 	bic.w	r3, r3, #32
 8009c62:	6023      	str	r3, [r4, #0]
 8009c64:	2310      	movs	r3, #16
 8009c66:	e7af      	b.n	8009bc8 <_printf_i+0xfc>
 8009c68:	6823      	ldr	r3, [r4, #0]
 8009c6a:	f043 0320 	orr.w	r3, r3, #32
 8009c6e:	6023      	str	r3, [r4, #0]
 8009c70:	2378      	movs	r3, #120	; 0x78
 8009c72:	4828      	ldr	r0, [pc, #160]	; (8009d14 <_printf_i+0x248>)
 8009c74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c78:	e7e3      	b.n	8009c42 <_printf_i+0x176>
 8009c7a:	065e      	lsls	r6, r3, #25
 8009c7c:	bf48      	it	mi
 8009c7e:	b2ad      	uxthmi	r5, r5
 8009c80:	e7e6      	b.n	8009c50 <_printf_i+0x184>
 8009c82:	4616      	mov	r6, r2
 8009c84:	e7bb      	b.n	8009bfe <_printf_i+0x132>
 8009c86:	680b      	ldr	r3, [r1, #0]
 8009c88:	6826      	ldr	r6, [r4, #0]
 8009c8a:	1d1d      	adds	r5, r3, #4
 8009c8c:	6960      	ldr	r0, [r4, #20]
 8009c8e:	600d      	str	r5, [r1, #0]
 8009c90:	0635      	lsls	r5, r6, #24
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	d501      	bpl.n	8009c9a <_printf_i+0x1ce>
 8009c96:	6018      	str	r0, [r3, #0]
 8009c98:	e002      	b.n	8009ca0 <_printf_i+0x1d4>
 8009c9a:	0671      	lsls	r1, r6, #25
 8009c9c:	d5fb      	bpl.n	8009c96 <_printf_i+0x1ca>
 8009c9e:	8018      	strh	r0, [r3, #0]
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	4616      	mov	r6, r2
 8009ca4:	6123      	str	r3, [r4, #16]
 8009ca6:	e7ba      	b.n	8009c1e <_printf_i+0x152>
 8009ca8:	680b      	ldr	r3, [r1, #0]
 8009caa:	1d1a      	adds	r2, r3, #4
 8009cac:	600a      	str	r2, [r1, #0]
 8009cae:	681e      	ldr	r6, [r3, #0]
 8009cb0:	2100      	movs	r1, #0
 8009cb2:	4630      	mov	r0, r6
 8009cb4:	6862      	ldr	r2, [r4, #4]
 8009cb6:	f000 f82f 	bl	8009d18 <memchr>
 8009cba:	b108      	cbz	r0, 8009cc0 <_printf_i+0x1f4>
 8009cbc:	1b80      	subs	r0, r0, r6
 8009cbe:	6060      	str	r0, [r4, #4]
 8009cc0:	6863      	ldr	r3, [r4, #4]
 8009cc2:	6123      	str	r3, [r4, #16]
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cca:	e7a8      	b.n	8009c1e <_printf_i+0x152>
 8009ccc:	4632      	mov	r2, r6
 8009cce:	4649      	mov	r1, r9
 8009cd0:	4640      	mov	r0, r8
 8009cd2:	6923      	ldr	r3, [r4, #16]
 8009cd4:	47d0      	blx	sl
 8009cd6:	3001      	adds	r0, #1
 8009cd8:	d0ab      	beq.n	8009c32 <_printf_i+0x166>
 8009cda:	6823      	ldr	r3, [r4, #0]
 8009cdc:	079b      	lsls	r3, r3, #30
 8009cde:	d413      	bmi.n	8009d08 <_printf_i+0x23c>
 8009ce0:	68e0      	ldr	r0, [r4, #12]
 8009ce2:	9b03      	ldr	r3, [sp, #12]
 8009ce4:	4298      	cmp	r0, r3
 8009ce6:	bfb8      	it	lt
 8009ce8:	4618      	movlt	r0, r3
 8009cea:	e7a4      	b.n	8009c36 <_printf_i+0x16a>
 8009cec:	2301      	movs	r3, #1
 8009cee:	4632      	mov	r2, r6
 8009cf0:	4649      	mov	r1, r9
 8009cf2:	4640      	mov	r0, r8
 8009cf4:	47d0      	blx	sl
 8009cf6:	3001      	adds	r0, #1
 8009cf8:	d09b      	beq.n	8009c32 <_printf_i+0x166>
 8009cfa:	3501      	adds	r5, #1
 8009cfc:	68e3      	ldr	r3, [r4, #12]
 8009cfe:	9903      	ldr	r1, [sp, #12]
 8009d00:	1a5b      	subs	r3, r3, r1
 8009d02:	42ab      	cmp	r3, r5
 8009d04:	dcf2      	bgt.n	8009cec <_printf_i+0x220>
 8009d06:	e7eb      	b.n	8009ce0 <_printf_i+0x214>
 8009d08:	2500      	movs	r5, #0
 8009d0a:	f104 0619 	add.w	r6, r4, #25
 8009d0e:	e7f5      	b.n	8009cfc <_printf_i+0x230>
 8009d10:	0800a077 	.word	0x0800a077
 8009d14:	0800a088 	.word	0x0800a088

08009d18 <memchr>:
 8009d18:	4603      	mov	r3, r0
 8009d1a:	b510      	push	{r4, lr}
 8009d1c:	b2c9      	uxtb	r1, r1
 8009d1e:	4402      	add	r2, r0
 8009d20:	4293      	cmp	r3, r2
 8009d22:	4618      	mov	r0, r3
 8009d24:	d101      	bne.n	8009d2a <memchr+0x12>
 8009d26:	2000      	movs	r0, #0
 8009d28:	e003      	b.n	8009d32 <memchr+0x1a>
 8009d2a:	7804      	ldrb	r4, [r0, #0]
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	428c      	cmp	r4, r1
 8009d30:	d1f6      	bne.n	8009d20 <memchr+0x8>
 8009d32:	bd10      	pop	{r4, pc}

08009d34 <memcpy>:
 8009d34:	440a      	add	r2, r1
 8009d36:	4291      	cmp	r1, r2
 8009d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d3c:	d100      	bne.n	8009d40 <memcpy+0xc>
 8009d3e:	4770      	bx	lr
 8009d40:	b510      	push	{r4, lr}
 8009d42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d46:	4291      	cmp	r1, r2
 8009d48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d4c:	d1f9      	bne.n	8009d42 <memcpy+0xe>
 8009d4e:	bd10      	pop	{r4, pc}

08009d50 <memmove>:
 8009d50:	4288      	cmp	r0, r1
 8009d52:	b510      	push	{r4, lr}
 8009d54:	eb01 0402 	add.w	r4, r1, r2
 8009d58:	d902      	bls.n	8009d60 <memmove+0x10>
 8009d5a:	4284      	cmp	r4, r0
 8009d5c:	4623      	mov	r3, r4
 8009d5e:	d807      	bhi.n	8009d70 <memmove+0x20>
 8009d60:	1e43      	subs	r3, r0, #1
 8009d62:	42a1      	cmp	r1, r4
 8009d64:	d008      	beq.n	8009d78 <memmove+0x28>
 8009d66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d6e:	e7f8      	b.n	8009d62 <memmove+0x12>
 8009d70:	4601      	mov	r1, r0
 8009d72:	4402      	add	r2, r0
 8009d74:	428a      	cmp	r2, r1
 8009d76:	d100      	bne.n	8009d7a <memmove+0x2a>
 8009d78:	bd10      	pop	{r4, pc}
 8009d7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d82:	e7f7      	b.n	8009d74 <memmove+0x24>

08009d84 <_free_r>:
 8009d84:	b538      	push	{r3, r4, r5, lr}
 8009d86:	4605      	mov	r5, r0
 8009d88:	2900      	cmp	r1, #0
 8009d8a:	d043      	beq.n	8009e14 <_free_r+0x90>
 8009d8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d90:	1f0c      	subs	r4, r1, #4
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	bfb8      	it	lt
 8009d96:	18e4      	addlt	r4, r4, r3
 8009d98:	f000 f8d0 	bl	8009f3c <__malloc_lock>
 8009d9c:	4a1e      	ldr	r2, [pc, #120]	; (8009e18 <_free_r+0x94>)
 8009d9e:	6813      	ldr	r3, [r2, #0]
 8009da0:	4610      	mov	r0, r2
 8009da2:	b933      	cbnz	r3, 8009db2 <_free_r+0x2e>
 8009da4:	6063      	str	r3, [r4, #4]
 8009da6:	6014      	str	r4, [r2, #0]
 8009da8:	4628      	mov	r0, r5
 8009daa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dae:	f000 b8cb 	b.w	8009f48 <__malloc_unlock>
 8009db2:	42a3      	cmp	r3, r4
 8009db4:	d90a      	bls.n	8009dcc <_free_r+0x48>
 8009db6:	6821      	ldr	r1, [r4, #0]
 8009db8:	1862      	adds	r2, r4, r1
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	bf01      	itttt	eq
 8009dbe:	681a      	ldreq	r2, [r3, #0]
 8009dc0:	685b      	ldreq	r3, [r3, #4]
 8009dc2:	1852      	addeq	r2, r2, r1
 8009dc4:	6022      	streq	r2, [r4, #0]
 8009dc6:	6063      	str	r3, [r4, #4]
 8009dc8:	6004      	str	r4, [r0, #0]
 8009dca:	e7ed      	b.n	8009da8 <_free_r+0x24>
 8009dcc:	461a      	mov	r2, r3
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	b10b      	cbz	r3, 8009dd6 <_free_r+0x52>
 8009dd2:	42a3      	cmp	r3, r4
 8009dd4:	d9fa      	bls.n	8009dcc <_free_r+0x48>
 8009dd6:	6811      	ldr	r1, [r2, #0]
 8009dd8:	1850      	adds	r0, r2, r1
 8009dda:	42a0      	cmp	r0, r4
 8009ddc:	d10b      	bne.n	8009df6 <_free_r+0x72>
 8009dde:	6820      	ldr	r0, [r4, #0]
 8009de0:	4401      	add	r1, r0
 8009de2:	1850      	adds	r0, r2, r1
 8009de4:	4283      	cmp	r3, r0
 8009de6:	6011      	str	r1, [r2, #0]
 8009de8:	d1de      	bne.n	8009da8 <_free_r+0x24>
 8009dea:	6818      	ldr	r0, [r3, #0]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	4401      	add	r1, r0
 8009df0:	6011      	str	r1, [r2, #0]
 8009df2:	6053      	str	r3, [r2, #4]
 8009df4:	e7d8      	b.n	8009da8 <_free_r+0x24>
 8009df6:	d902      	bls.n	8009dfe <_free_r+0x7a>
 8009df8:	230c      	movs	r3, #12
 8009dfa:	602b      	str	r3, [r5, #0]
 8009dfc:	e7d4      	b.n	8009da8 <_free_r+0x24>
 8009dfe:	6820      	ldr	r0, [r4, #0]
 8009e00:	1821      	adds	r1, r4, r0
 8009e02:	428b      	cmp	r3, r1
 8009e04:	bf01      	itttt	eq
 8009e06:	6819      	ldreq	r1, [r3, #0]
 8009e08:	685b      	ldreq	r3, [r3, #4]
 8009e0a:	1809      	addeq	r1, r1, r0
 8009e0c:	6021      	streq	r1, [r4, #0]
 8009e0e:	6063      	str	r3, [r4, #4]
 8009e10:	6054      	str	r4, [r2, #4]
 8009e12:	e7c9      	b.n	8009da8 <_free_r+0x24>
 8009e14:	bd38      	pop	{r3, r4, r5, pc}
 8009e16:	bf00      	nop
 8009e18:	200005e4 	.word	0x200005e4

08009e1c <_malloc_r>:
 8009e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e1e:	1ccd      	adds	r5, r1, #3
 8009e20:	f025 0503 	bic.w	r5, r5, #3
 8009e24:	3508      	adds	r5, #8
 8009e26:	2d0c      	cmp	r5, #12
 8009e28:	bf38      	it	cc
 8009e2a:	250c      	movcc	r5, #12
 8009e2c:	2d00      	cmp	r5, #0
 8009e2e:	4606      	mov	r6, r0
 8009e30:	db01      	blt.n	8009e36 <_malloc_r+0x1a>
 8009e32:	42a9      	cmp	r1, r5
 8009e34:	d903      	bls.n	8009e3e <_malloc_r+0x22>
 8009e36:	230c      	movs	r3, #12
 8009e38:	6033      	str	r3, [r6, #0]
 8009e3a:	2000      	movs	r0, #0
 8009e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e3e:	f000 f87d 	bl	8009f3c <__malloc_lock>
 8009e42:	4921      	ldr	r1, [pc, #132]	; (8009ec8 <_malloc_r+0xac>)
 8009e44:	680a      	ldr	r2, [r1, #0]
 8009e46:	4614      	mov	r4, r2
 8009e48:	b99c      	cbnz	r4, 8009e72 <_malloc_r+0x56>
 8009e4a:	4f20      	ldr	r7, [pc, #128]	; (8009ecc <_malloc_r+0xb0>)
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	b923      	cbnz	r3, 8009e5a <_malloc_r+0x3e>
 8009e50:	4621      	mov	r1, r4
 8009e52:	4630      	mov	r0, r6
 8009e54:	f000 f862 	bl	8009f1c <_sbrk_r>
 8009e58:	6038      	str	r0, [r7, #0]
 8009e5a:	4629      	mov	r1, r5
 8009e5c:	4630      	mov	r0, r6
 8009e5e:	f000 f85d 	bl	8009f1c <_sbrk_r>
 8009e62:	1c43      	adds	r3, r0, #1
 8009e64:	d123      	bne.n	8009eae <_malloc_r+0x92>
 8009e66:	230c      	movs	r3, #12
 8009e68:	4630      	mov	r0, r6
 8009e6a:	6033      	str	r3, [r6, #0]
 8009e6c:	f000 f86c 	bl	8009f48 <__malloc_unlock>
 8009e70:	e7e3      	b.n	8009e3a <_malloc_r+0x1e>
 8009e72:	6823      	ldr	r3, [r4, #0]
 8009e74:	1b5b      	subs	r3, r3, r5
 8009e76:	d417      	bmi.n	8009ea8 <_malloc_r+0x8c>
 8009e78:	2b0b      	cmp	r3, #11
 8009e7a:	d903      	bls.n	8009e84 <_malloc_r+0x68>
 8009e7c:	6023      	str	r3, [r4, #0]
 8009e7e:	441c      	add	r4, r3
 8009e80:	6025      	str	r5, [r4, #0]
 8009e82:	e004      	b.n	8009e8e <_malloc_r+0x72>
 8009e84:	6863      	ldr	r3, [r4, #4]
 8009e86:	42a2      	cmp	r2, r4
 8009e88:	bf0c      	ite	eq
 8009e8a:	600b      	streq	r3, [r1, #0]
 8009e8c:	6053      	strne	r3, [r2, #4]
 8009e8e:	4630      	mov	r0, r6
 8009e90:	f000 f85a 	bl	8009f48 <__malloc_unlock>
 8009e94:	f104 000b 	add.w	r0, r4, #11
 8009e98:	1d23      	adds	r3, r4, #4
 8009e9a:	f020 0007 	bic.w	r0, r0, #7
 8009e9e:	1ac2      	subs	r2, r0, r3
 8009ea0:	d0cc      	beq.n	8009e3c <_malloc_r+0x20>
 8009ea2:	1a1b      	subs	r3, r3, r0
 8009ea4:	50a3      	str	r3, [r4, r2]
 8009ea6:	e7c9      	b.n	8009e3c <_malloc_r+0x20>
 8009ea8:	4622      	mov	r2, r4
 8009eaa:	6864      	ldr	r4, [r4, #4]
 8009eac:	e7cc      	b.n	8009e48 <_malloc_r+0x2c>
 8009eae:	1cc4      	adds	r4, r0, #3
 8009eb0:	f024 0403 	bic.w	r4, r4, #3
 8009eb4:	42a0      	cmp	r0, r4
 8009eb6:	d0e3      	beq.n	8009e80 <_malloc_r+0x64>
 8009eb8:	1a21      	subs	r1, r4, r0
 8009eba:	4630      	mov	r0, r6
 8009ebc:	f000 f82e 	bl	8009f1c <_sbrk_r>
 8009ec0:	3001      	adds	r0, #1
 8009ec2:	d1dd      	bne.n	8009e80 <_malloc_r+0x64>
 8009ec4:	e7cf      	b.n	8009e66 <_malloc_r+0x4a>
 8009ec6:	bf00      	nop
 8009ec8:	200005e4 	.word	0x200005e4
 8009ecc:	200005e8 	.word	0x200005e8

08009ed0 <_realloc_r>:
 8009ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ed2:	4607      	mov	r7, r0
 8009ed4:	4614      	mov	r4, r2
 8009ed6:	460e      	mov	r6, r1
 8009ed8:	b921      	cbnz	r1, 8009ee4 <_realloc_r+0x14>
 8009eda:	4611      	mov	r1, r2
 8009edc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009ee0:	f7ff bf9c 	b.w	8009e1c <_malloc_r>
 8009ee4:	b922      	cbnz	r2, 8009ef0 <_realloc_r+0x20>
 8009ee6:	f7ff ff4d 	bl	8009d84 <_free_r>
 8009eea:	4625      	mov	r5, r4
 8009eec:	4628      	mov	r0, r5
 8009eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ef0:	f000 f830 	bl	8009f54 <_malloc_usable_size_r>
 8009ef4:	42a0      	cmp	r0, r4
 8009ef6:	d20f      	bcs.n	8009f18 <_realloc_r+0x48>
 8009ef8:	4621      	mov	r1, r4
 8009efa:	4638      	mov	r0, r7
 8009efc:	f7ff ff8e 	bl	8009e1c <_malloc_r>
 8009f00:	4605      	mov	r5, r0
 8009f02:	2800      	cmp	r0, #0
 8009f04:	d0f2      	beq.n	8009eec <_realloc_r+0x1c>
 8009f06:	4631      	mov	r1, r6
 8009f08:	4622      	mov	r2, r4
 8009f0a:	f7ff ff13 	bl	8009d34 <memcpy>
 8009f0e:	4631      	mov	r1, r6
 8009f10:	4638      	mov	r0, r7
 8009f12:	f7ff ff37 	bl	8009d84 <_free_r>
 8009f16:	e7e9      	b.n	8009eec <_realloc_r+0x1c>
 8009f18:	4635      	mov	r5, r6
 8009f1a:	e7e7      	b.n	8009eec <_realloc_r+0x1c>

08009f1c <_sbrk_r>:
 8009f1c:	b538      	push	{r3, r4, r5, lr}
 8009f1e:	2300      	movs	r3, #0
 8009f20:	4d05      	ldr	r5, [pc, #20]	; (8009f38 <_sbrk_r+0x1c>)
 8009f22:	4604      	mov	r4, r0
 8009f24:	4608      	mov	r0, r1
 8009f26:	602b      	str	r3, [r5, #0]
 8009f28:	f7f7 fbf4 	bl	8001714 <_sbrk>
 8009f2c:	1c43      	adds	r3, r0, #1
 8009f2e:	d102      	bne.n	8009f36 <_sbrk_r+0x1a>
 8009f30:	682b      	ldr	r3, [r5, #0]
 8009f32:	b103      	cbz	r3, 8009f36 <_sbrk_r+0x1a>
 8009f34:	6023      	str	r3, [r4, #0]
 8009f36:	bd38      	pop	{r3, r4, r5, pc}
 8009f38:	2000155c 	.word	0x2000155c

08009f3c <__malloc_lock>:
 8009f3c:	4801      	ldr	r0, [pc, #4]	; (8009f44 <__malloc_lock+0x8>)
 8009f3e:	f000 b811 	b.w	8009f64 <__retarget_lock_acquire_recursive>
 8009f42:	bf00      	nop
 8009f44:	20001564 	.word	0x20001564

08009f48 <__malloc_unlock>:
 8009f48:	4801      	ldr	r0, [pc, #4]	; (8009f50 <__malloc_unlock+0x8>)
 8009f4a:	f000 b80c 	b.w	8009f66 <__retarget_lock_release_recursive>
 8009f4e:	bf00      	nop
 8009f50:	20001564 	.word	0x20001564

08009f54 <_malloc_usable_size_r>:
 8009f54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f58:	1f18      	subs	r0, r3, #4
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	bfbc      	itt	lt
 8009f5e:	580b      	ldrlt	r3, [r1, r0]
 8009f60:	18c0      	addlt	r0, r0, r3
 8009f62:	4770      	bx	lr

08009f64 <__retarget_lock_acquire_recursive>:
 8009f64:	4770      	bx	lr

08009f66 <__retarget_lock_release_recursive>:
 8009f66:	4770      	bx	lr

08009f68 <_init>:
 8009f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f6a:	bf00      	nop
 8009f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f6e:	bc08      	pop	{r3}
 8009f70:	469e      	mov	lr, r3
 8009f72:	4770      	bx	lr

08009f74 <_fini>:
 8009f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f76:	bf00      	nop
 8009f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f7a:	bc08      	pop	{r3}
 8009f7c:	469e      	mov	lr, r3
 8009f7e:	4770      	bx	lr
