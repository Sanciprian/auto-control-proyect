
carrito.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a21c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800a328  0800a328  0001a328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a430  0800a430  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a430  0800a430  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a430  0800a430  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800a430  0800a430  0001a430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a43c  0800a43c  0001a43c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014b0  200001e4  0800a624  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001694  0800a624  00021694  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022bfd  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ed1  00000000  00000000  00042e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  00047ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001268  00000000  00000000  000490f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eb84  00000000  00000000  0004a360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b7cb  00000000  00000000  00068ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096866  00000000  00000000  000846af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011af15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005830  00000000  00000000  0011af68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e4 	.word	0x200001e4
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a310 	.word	0x0800a310

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e8 	.word	0x200001e8
 8000148:	0800a310 	.word	0x0800a310

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <__aeabi_f2uiz>:
 8000740:	0042      	lsls	r2, r0, #1
 8000742:	d20e      	bcs.n	8000762 <__aeabi_f2uiz+0x22>
 8000744:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000748:	d30b      	bcc.n	8000762 <__aeabi_f2uiz+0x22>
 800074a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800074e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000752:	d409      	bmi.n	8000768 <__aeabi_f2uiz+0x28>
 8000754:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000758:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800075c:	fa23 f002 	lsr.w	r0, r3, r2
 8000760:	4770      	bx	lr
 8000762:	f04f 0000 	mov.w	r0, #0
 8000766:	4770      	bx	lr
 8000768:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800076c:	d101      	bne.n	8000772 <__aeabi_f2uiz+0x32>
 800076e:	0242      	lsls	r2, r0, #9
 8000770:	d102      	bne.n	8000778 <__aeabi_f2uiz+0x38>
 8000772:	f04f 30ff 	mov.w	r0, #4294967295
 8000776:	4770      	bx	lr
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop

08000780 <_ZN5MotorC1Ev>:
 *      Author: Sanci
 */

#include "Motor.h"

Motor::Motor()
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af04      	add	r7, sp, #16
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	331c      	adds	r3, #28
 800078c:	4618      	mov	r0, r3
 800078e:	f000 fb83 	bl	8000e98 <_ZN3PIDC1Ev>
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2200      	movs	r2, #0
 8000796:	645a      	str	r2, [r3, #68]	; 0x44
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2200      	movs	r2, #0
 800079c:	64da      	str	r2, [r3, #76]	; 0x4c
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2200      	movs	r2, #0
 80007a2:	651a      	str	r2, [r3, #80]	; 0x50
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	f04f 0200 	mov.w	r2, #0
 80007aa:	655a      	str	r2, [r3, #84]	; 0x54
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f04f 0200 	mov.w	r2, #0
 80007b2:	659a      	str	r2, [r3, #88]	; 0x58
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f04f 0200 	mov.w	r2, #0
 80007ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	f04f 0200 	mov.w	r2, #0
 80007c2:	661a      	str	r2, [r3, #96]	; 0x60
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80007ca:	665a      	str	r2, [r3, #100]	; 0x64
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4a14      	ldr	r2, [pc, #80]	; (8000820 <_ZN5MotorC1Ev+0xa0>)
 80007d0:	669a      	str	r2, [r3, #104]	; 0x68
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	f04f 0200 	mov.w	r2, #0
 80007d8:	66da      	str	r2, [r3, #108]	; 0x6c
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f04f 0200 	mov.w	r2, #0
 80007e0:	671a      	str	r2, [r3, #112]	; 0x70
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	f04f 0200 	mov.w	r2, #0
 80007e8:	675a      	str	r2, [r3, #116]	; 0x74
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	f04f 0200 	mov.w	r2, #0
 80007f0:	679a      	str	r2, [r3, #120]	; 0x78
{
    pidController.set(Constants::kMotorKP, Constants::kMotorKI, Constants::kMotorKD, Constants::kMotorKImax, Constants::kMotorMinOut, Constants::kMotorMaxOut);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	f103 001c 	add.w	r0, r3, #28
 80007f8:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <_ZN5MotorC1Ev+0xa4>)
 80007fa:	9302      	str	r3, [sp, #8]
 80007fc:	f04f 0300 	mov.w	r3, #0
 8000800:	9301      	str	r3, [sp, #4]
 8000802:	f04f 0300 	mov.w	r3, #0
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	f04f 0300 	mov.w	r3, #0
 800080c:	4a04      	ldr	r2, [pc, #16]	; (8000820 <_ZN5MotorC1Ev+0xa0>)
 800080e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000812:	f000 fb53 	bl	8000ebc <_ZN3PID3setEffffff>
}
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4618      	mov	r0, r3
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	3fe66666 	.word	0x3fe66666
 8000824:	41200000 	.word	0x41200000

08000828 <_ZN5Motor4initE3PinS0_tmP17TIM_HandleTypeDef>:
void Motor::init(Pin _pinA, Pin _pinB, uint16_t _encoder, uint32_t _pwm_channel, TIM_HandleTypeDef *_htim)
{
 8000828:	b082      	sub	sp, #8
 800082a:	b580      	push	{r7, lr}
 800082c:	b088      	sub	sp, #32
 800082e:	af04      	add	r7, sp, #16
 8000830:	60f8      	str	r0, [r7, #12]
 8000832:	1d38      	adds	r0, r7, #4
 8000834:	e880 0006 	stmia.w	r0, {r1, r2}
 8000838:	61fb      	str	r3, [r7, #28]
    this->pinA = _pinA;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	3308      	adds	r3, #8
 800083e:	1d3a      	adds	r2, r7, #4
 8000840:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000844:	e883 0003 	stmia.w	r3, {r0, r1}
    this->pinB = _pinB;
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	3310      	adds	r3, #16
 800084c:	f107 021c 	add.w	r2, r7, #28
 8000850:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000854:	e883 0003 	stmia.w	r3, {r0, r1}
    this->encoder = _encoder;
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800085c:	831a      	strh	r2, [r3, #24]
    this->pwm_channel = _pwm_channel;
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000862:	641a      	str	r2, [r3, #64]	; 0x40
    this->htim = _htim;
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000868:	63da      	str	r2, [r3, #60]	; 0x3c
    pidController.set(Constants::kMotorKP, Constants::kMotorKI, Constants::kMotorKD, Constants::kMotorKImax, Constants::kMotorMinOut, Constants::kMotorMaxOut);
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	f103 001c 	add.w	r0, r3, #28
 8000870:	4b0a      	ldr	r3, [pc, #40]	; (800089c <_ZN5Motor4initE3PinS0_tmP17TIM_HandleTypeDef+0x74>)
 8000872:	9302      	str	r3, [sp, #8]
 8000874:	f04f 0300 	mov.w	r3, #0
 8000878:	9301      	str	r3, [sp, #4]
 800087a:	f04f 0300 	mov.w	r3, #0
 800087e:	9300      	str	r3, [sp, #0]
 8000880:	f04f 0300 	mov.w	r3, #0
 8000884:	4a06      	ldr	r2, [pc, #24]	; (80008a0 <_ZN5Motor4initE3PinS0_tmP17TIM_HandleTypeDef+0x78>)
 8000886:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800088a:	f000 fb17 	bl	8000ebc <_ZN3PID3setEffffff>
}
 800088e:	bf00      	nop
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000898:	b002      	add	sp, #8
 800089a:	4770      	bx	lr
 800089c:	41200000 	.word	0x41200000
 80008a0:	3fe66666 	.word	0x3fe66666

080008a4 <_ZN5Motor12update_motorEm>:
    // Enviar PWM
    HAL_TIM_PWM_Start(htim, pwm_channel);
    __HAL_TIM_SET_COMPARE(htim, pwm_channel, duty);
}
void Motor::update_motor(uint32_t current_time)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b089      	sub	sp, #36	; 0x24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]
    float dt = (current_time - last_time_ms) / 1000.0f;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b2:	683a      	ldr	r2, [r7, #0]
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fcfe 	bl	80002b8 <__aeabi_ui2f>
 80008bc:	4603      	mov	r3, r0
 80008be:	4989      	ldr	r1, [pc, #548]	; (8000ae4 <_ZN5Motor12update_motorEm+0x240>)
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fe05 	bl	80004d0 <__aeabi_fdiv>
 80008c6:	4603      	mov	r3, r0
 80008c8:	61fb      	str	r3, [r7, #28]
    if (dt <= 0.0f)
 80008ca:	f04f 0100 	mov.w	r1, #0
 80008ce:	69f8      	ldr	r0, [r7, #28]
 80008d0:	f7ff fef2 	bl	80006b8 <__aeabi_fcmple>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	f040 80ff 	bne.w	8000ada <_ZN5Motor12update_motorEm+0x236>
        return;

    delta_ticks = ticks - last_ticks;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff fce6 	bl	80002b8 <__aeabi_ui2f>
 80008ec:	4602      	mov	r2, r0
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	655a      	str	r2, [r3, #84]	; 0x54
    distance_cm += delta_ticks * Constants::kCMPerTick;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80008fa:	497b      	ldr	r1, [pc, #492]	; (8000ae8 <_ZN5Motor12update_motorEm+0x244>)
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fd33 	bl	8000368 <__aeabi_fmul>
 8000902:	4603      	mov	r3, r0
 8000904:	4619      	mov	r1, r3
 8000906:	4620      	mov	r0, r4
 8000908:	f7ff fc26 	bl	8000158 <__addsf3>
 800090c:	4603      	mov	r3, r0
 800090e:	461a      	mov	r2, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	659a      	str	r2, [r3, #88]	; 0x58
    actual_speed_cm_s = (delta_ticks * Constants::kCMPerTick) / dt;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000918:	4973      	ldr	r1, [pc, #460]	; (8000ae8 <_ZN5Motor12update_motorEm+0x244>)
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fd24 	bl	8000368 <__aeabi_fmul>
 8000920:	4603      	mov	r3, r0
 8000922:	69f9      	ldr	r1, [r7, #28]
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fdd3 	bl	80004d0 <__aeabi_fdiv>
 800092a:	4603      	mov	r3, r0
 800092c:	461a      	mov	r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	661a      	str	r2, [r3, #96]	; 0x60

    // Convert cm/s to PWM equivalent
    float max_cm_s = (Constants::kMotorsRPM * 3.14159f * Constants::kWheelDiameter) / 60.0f;
 8000932:	4b6e      	ldr	r3, [pc, #440]	; (8000aec <_ZN5Motor12update_motorEm+0x248>)
 8000934:	61bb      	str	r3, [r7, #24]

    float error = ((target_speed_cm_s - actual_speed_cm_s) / max_cm_s) * Constants::kMaxPWM;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800093e:	4619      	mov	r1, r3
 8000940:	4610      	mov	r0, r2
 8000942:	f7ff fc07 	bl	8000154 <__aeabi_fsub>
 8000946:	4603      	mov	r3, r0
 8000948:	69b9      	ldr	r1, [r7, #24]
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fdc0 	bl	80004d0 <__aeabi_fdiv>
 8000950:	4603      	mov	r3, r0
 8000952:	4967      	ldr	r1, [pc, #412]	; (8000af0 <_ZN5Motor12update_motorEm+0x24c>)
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fd07 	bl	8000368 <__aeabi_fmul>
 800095a:	4603      	mov	r3, r0
 800095c:	617b      	str	r3, [r7, #20]
    integral += error * dt;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 8000962:	69f9      	ldr	r1, [r7, #28]
 8000964:	6978      	ldr	r0, [r7, #20]
 8000966:	f7ff fcff 	bl	8000368 <__aeabi_fmul>
 800096a:	4603      	mov	r3, r0
 800096c:	4619      	mov	r1, r3
 800096e:	4620      	mov	r0, r4
 8000970:	f7ff fbf2 	bl	8000158 <__addsf3>
 8000974:	4603      	mov	r3, r0
 8000976:	461a      	mov	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	671a      	str	r2, [r3, #112]	; 0x70
    float derivative = (error - last_error) / dt;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000980:	4619      	mov	r1, r3
 8000982:	6978      	ldr	r0, [r7, #20]
 8000984:	f7ff fbe6 	bl	8000154 <__aeabi_fsub>
 8000988:	4603      	mov	r3, r0
 800098a:	69f9      	ldr	r1, [r7, #28]
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fd9f 	bl	80004d0 <__aeabi_fdiv>
 8000992:	4603      	mov	r3, r0
 8000994:	613b      	str	r3, [r7, #16]

    float output = kp * error + ki * integral + kd * derivative;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800099a:	6979      	ldr	r1, [r7, #20]
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fce3 	bl	8000368 <__aeabi_fmul>
 80009a2:	4603      	mov	r3, r0
 80009a4:	461c      	mov	r4, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80009ae:	4619      	mov	r1, r3
 80009b0:	4610      	mov	r0, r2
 80009b2:	f7ff fcd9 	bl	8000368 <__aeabi_fmul>
 80009b6:	4603      	mov	r3, r0
 80009b8:	4619      	mov	r1, r3
 80009ba:	4620      	mov	r0, r4
 80009bc:	f7ff fbcc 	bl	8000158 <__addsf3>
 80009c0:	4603      	mov	r3, r0
 80009c2:	461c      	mov	r4, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80009c8:	6939      	ldr	r1, [r7, #16]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fccc 	bl	8000368 <__aeabi_fmul>
 80009d0:	4603      	mov	r3, r0
 80009d2:	4619      	mov	r1, r3
 80009d4:	4620      	mov	r0, r4
 80009d6:	f7ff fbbf 	bl	8000158 <__addsf3>
 80009da:	4603      	mov	r3, r0
 80009dc:	60fb      	str	r3, [r7, #12]
    if (target_speed_cm_s - actual_speed_cm_s > 2)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009e6:	4619      	mov	r1, r3
 80009e8:	4610      	mov	r0, r2
 80009ea:	f7ff fbb3 	bl	8000154 <__aeabi_fsub>
 80009ee:	4603      	mov	r3, r0
 80009f0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fe73 	bl	80006e0 <__aeabi_fcmpgt>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d00e      	beq.n	8000a1e <_ZN5Motor12update_motorEm+0x17a>
    {
        pwm_out = std::min(std::max(output, Constants::kMinPWM), Constants::kMaxPWM); // Clamp to 0–50
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	493b      	ldr	r1, [pc, #236]	; (8000af4 <_ZN5Motor12update_motorEm+0x250>)
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 f8e4 	bl	8000bd4 <_ZSt3maxIfERKT_S2_S2_>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	493a      	ldr	r1, [pc, #232]	; (8000af8 <_ZN5Motor12update_motorEm+0x254>)
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 f8f6 	bl	8000c02 <_ZSt3minIfERKT_S2_S2_>
 8000a16:	4603      	mov	r3, r0
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	679a      	str	r2, [r3, #120]	; 0x78
    }

    // Dirección hacia adelante
    HAL_GPIO_WritePin(pinA.port, pinA.pin, GPIO_PIN_SET);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6898      	ldr	r0, [r3, #8]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	899b      	ldrh	r3, [r3, #12]
 8000a26:	2201      	movs	r2, #1
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f001 fbc1 	bl	80021b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pinB.port, pinB.pin, GPIO_PIN_RESET);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6918      	ldr	r0, [r3, #16]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	8a9b      	ldrh	r3, [r3, #20]
 8000a36:	2200      	movs	r2, #0
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f001 fbb9 	bl	80021b0 <HAL_GPIO_WritePin>

    __HAL_TIM_SET_COMPARE(htim, pwm_channel, (uint16_t)pwm_out);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d10b      	bne.n	8000a5e <_ZN5Motor12update_motorEm+0x1ba>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fe78 	bl	8000740 <__aeabi_f2uiz>
 8000a50:	4603      	mov	r3, r0
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	635a      	str	r2, [r3, #52]	; 0x34
 8000a5c:	e02a      	b.n	8000ab4 <_ZN5Motor12update_motorEm+0x210>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	2b04      	cmp	r3, #4
 8000a64:	d10b      	bne.n	8000a7e <_ZN5Motor12update_motorEm+0x1da>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fe68 	bl	8000740 <__aeabi_f2uiz>
 8000a70:	4603      	mov	r3, r0
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	639a      	str	r2, [r3, #56]	; 0x38
 8000a7c:	e01a      	b.n	8000ab4 <_ZN5Motor12update_motorEm+0x210>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	2b08      	cmp	r3, #8
 8000a84:	d10b      	bne.n	8000a9e <_ZN5Motor12update_motorEm+0x1fa>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff fe58 	bl	8000740 <__aeabi_f2uiz>
 8000a90:	4603      	mov	r3, r0
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a9c:	e00a      	b.n	8000ab4 <_ZN5Motor12update_motorEm+0x210>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fe4c 	bl	8000740 <__aeabi_f2uiz>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_TIM_PWM_Start(htim, pwm_channel);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	4619      	mov	r1, r3
 8000abe:	4610      	mov	r0, r2
 8000ac0:	f004 faa6 	bl	8005010 <HAL_TIM_PWM_Start>

    last_error = error;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	697a      	ldr	r2, [r7, #20]
 8000ac8:	675a      	str	r2, [r3, #116]	; 0x74
    last_ticks = ticks;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	651a      	str	r2, [r3, #80]	; 0x50
    last_time_ms = current_time;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	645a      	str	r2, [r3, #68]	; 0x44
 8000ad8:	e000      	b.n	8000adc <_ZN5Motor12update_motorEm+0x238>
        return;
 8000ada:	bf00      	nop
}
 8000adc:	3724      	adds	r7, #36	; 0x24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd90      	pop	{r4, r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	447a0000 	.word	0x447a0000
 8000ae8:	3d14a20d 	.word	0x3d14a20d
 8000aec:	4218e406 	.word	0x4218e406
 8000af0:	437f0000 	.word	0x437f0000
 8000af4:	0800a38c 	.word	0x0800a38c
 8000af8:	0800a388 	.word	0x0800a388

08000afc <_ZN5Motor10stop_motorEv>:
void Motor::stop_motor()
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
    // Active brake: both inputs HIGH
    HAL_GPIO_WritePin(pinA.port, pinA.pin, GPIO_PIN_SET);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6898      	ldr	r0, [r3, #8]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	899b      	ldrh	r3, [r3, #12]
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	4619      	mov	r1, r3
 8000b10:	f001 fb4e 	bl	80021b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pinB.port, pinB.pin, GPIO_PIN_SET);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6918      	ldr	r0, [r3, #16]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	8a9b      	ldrh	r3, [r3, #20]
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	4619      	mov	r1, r3
 8000b20:	f001 fb46 	bl	80021b0 <HAL_GPIO_WritePin>

    // Stop PWM signal
    __HAL_TIM_SET_COMPARE(htim, pwm_channel, 0);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d105      	bne.n	8000b38 <_ZN5Motor10stop_motorEv+0x3c>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2200      	movs	r2, #0
 8000b34:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b36:	e018      	b.n	8000b6a <_ZN5Motor10stop_motorEv+0x6e>
    __HAL_TIM_SET_COMPARE(htim, pwm_channel, 0);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3c:	2b04      	cmp	r3, #4
 8000b3e:	d105      	bne.n	8000b4c <_ZN5Motor10stop_motorEv+0x50>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2200      	movs	r2, #0
 8000b48:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000b4a:	e00e      	b.n	8000b6a <_ZN5Motor10stop_motorEv+0x6e>
    __HAL_TIM_SET_COMPARE(htim, pwm_channel, 0);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	2b08      	cmp	r3, #8
 8000b52:	d105      	bne.n	8000b60 <_ZN5Motor10stop_motorEv+0x64>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000b5e:	e004      	b.n	8000b6a <_ZN5Motor10stop_motorEv+0x6e>
    __HAL_TIM_SET_COMPARE(htim, pwm_channel, 0);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2200      	movs	r2, #0
 8000b68:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <_ZN5Motor9setTargetEf>:

void Motor::setTarget(float _target_speed_cm_s)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
 8000b7a:	6039      	str	r1, [r7, #0]
    target_speed_cm_s = _target_speed_cm_s;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	683a      	ldr	r2, [r7, #0]
 8000b80:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr

08000b8c <_ZN5Motor11getDistanceEv>:

float Motor::getDistance()
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
    return distance_cm;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr

08000ba2 <_ZN5Motor8addTicksEv>:

void Motor::addTicks()
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
    ticks++;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	1c5a      	adds	r2, r3, #1
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr

08000bbe <_ZN5Motor8getSpeedEv>:
{
    return pwm_out;
}

float Motor::getSpeed()
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
    return actual_speed_cm_s;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr

08000bd4 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4619      	mov	r1, r3
 8000be8:	4610      	mov	r0, r2
 8000bea:	f7ff fd5b 	bl	80006a4 <__aeabi_fcmplt>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	e000      	b.n	8000bfa <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8000bf8:	687b      	ldr	r3, [r7, #4]
    }
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
 8000c0a:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	4610      	mov	r0, r2
 8000c18:	f7ff fd44 	bl	80006a4 <__aeabi_fcmplt>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	e000      	b.n	8000c28 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8000c26:	687b      	ldr	r3, [r7, #4]
    }
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <_Z12movementInitv>:
 */

#include "Movement.h"

void movementInit()
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af04      	add	r7, sp, #16
    // Motores (Checar que los canales sean los correctos)
    frontLeftMotor.init(
 8000c36:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <_Z12movementInitv+0x84>)
 8000c38:	491f      	ldr	r1, [pc, #124]	; (8000cb8 <_Z12movementInitv+0x88>)
 8000c3a:	4a20      	ldr	r2, [pc, #128]	; (8000cbc <_Z12movementInitv+0x8c>)
 8000c3c:	9203      	str	r2, [sp, #12]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	9202      	str	r2, [sp, #8]
 8000c42:	2202      	movs	r2, #2
 8000c44:	9201      	str	r2, [sp, #4]
 8000c46:	685a      	ldr	r2, [r3, #4]
 8000c48:	9200      	str	r2, [sp, #0]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	c906      	ldmia	r1, {r1, r2}
 8000c4e:	481c      	ldr	r0, [pc, #112]	; (8000cc0 <_Z12movementInitv+0x90>)
 8000c50:	f7ff fdea 	bl	8000828 <_ZN5Motor4initE3PinS0_tmP17TIM_HandleTypeDef>
        Constants::kFrontLeftA,
        Constants::kFrontLeftB,
        Constants::kFrontLeftEncoder,
        TIM_CHANNEL_1,
        &htim3);
    frontRightMotor.init(
 8000c54:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <_Z12movementInitv+0x94>)
 8000c56:	491c      	ldr	r1, [pc, #112]	; (8000cc8 <_Z12movementInitv+0x98>)
 8000c58:	4a1c      	ldr	r2, [pc, #112]	; (8000ccc <_Z12movementInitv+0x9c>)
 8000c5a:	9203      	str	r2, [sp, #12]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	9202      	str	r2, [sp, #8]
 8000c60:	2201      	movs	r2, #1
 8000c62:	9201      	str	r2, [sp, #4]
 8000c64:	685a      	ldr	r2, [r3, #4]
 8000c66:	9200      	str	r2, [sp, #0]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	c906      	ldmia	r1, {r1, r2}
 8000c6c:	4818      	ldr	r0, [pc, #96]	; (8000cd0 <_Z12movementInitv+0xa0>)
 8000c6e:	f7ff fddb 	bl	8000828 <_ZN5Motor4initE3PinS0_tmP17TIM_HandleTypeDef>
        Constants::kFrontRightB,
        Constants::kFrontRightEncoder,
        TIM_CHANNEL_1,
        &htim1);

    backRightMotor.init(
 8000c72:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <_Z12movementInitv+0xa4>)
 8000c74:	4918      	ldr	r1, [pc, #96]	; (8000cd8 <_Z12movementInitv+0xa8>)
 8000c76:	4a11      	ldr	r2, [pc, #68]	; (8000cbc <_Z12movementInitv+0x8c>)
 8000c78:	9203      	str	r2, [sp, #12]
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	9202      	str	r2, [sp, #8]
 8000c7e:	2208      	movs	r2, #8
 8000c80:	9201      	str	r2, [sp, #4]
 8000c82:	685a      	ldr	r2, [r3, #4]
 8000c84:	9200      	str	r2, [sp, #0]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	c906      	ldmia	r1, {r1, r2}
 8000c8a:	4814      	ldr	r0, [pc, #80]	; (8000cdc <_Z12movementInitv+0xac>)
 8000c8c:	f7ff fdcc 	bl	8000828 <_ZN5Motor4initE3PinS0_tmP17TIM_HandleTypeDef>
        Constants::kBackRightB,
        Constants::kBackRightEncoder,
        TIM_CHANNEL_4,
        &htim3);

    backLeftMotor.init(
 8000c90:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <_Z12movementInitv+0xb0>)
 8000c92:	4914      	ldr	r1, [pc, #80]	; (8000ce4 <_Z12movementInitv+0xb4>)
 8000c94:	4a09      	ldr	r2, [pc, #36]	; (8000cbc <_Z12movementInitv+0x8c>)
 8000c96:	9203      	str	r2, [sp, #12]
 8000c98:	2204      	movs	r2, #4
 8000c9a:	9202      	str	r2, [sp, #8]
 8000c9c:	2204      	movs	r2, #4
 8000c9e:	9201      	str	r2, [sp, #4]
 8000ca0:	685a      	ldr	r2, [r3, #4]
 8000ca2:	9200      	str	r2, [sp, #0]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	c906      	ldmia	r1, {r1, r2}
 8000ca8:	480f      	ldr	r0, [pc, #60]	; (8000ce8 <_Z12movementInitv+0xb8>)
 8000caa:	f7ff fdbd 	bl	8000828 <_ZN5Motor4initE3PinS0_tmP17TIM_HandleTypeDef>
        Constants::kBackLeftA,
        Constants::kBackLeftB,
        Constants::kBackLeftEncoder,
        TIM_CHANNEL_2,
        &htim3);
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	0800a398 	.word	0x0800a398
 8000cb8:	0800a390 	.word	0x0800a390
 8000cbc:	20000248 	.word	0x20000248
 8000cc0:	20000290 	.word	0x20000290
 8000cc4:	0800a3a8 	.word	0x0800a3a8
 8000cc8:	0800a3a0 	.word	0x0800a3a0
 8000ccc:	20000200 	.word	0x20000200
 8000cd0:	2000030c 	.word	0x2000030c
 8000cd4:	0800a3c8 	.word	0x0800a3c8
 8000cd8:	0800a3c0 	.word	0x0800a3c0
 8000cdc:	20000404 	.word	0x20000404
 8000ce0:	0800a3b8 	.word	0x0800a3b8
 8000ce4:	0800a3b0 	.word	0x0800a3b0
 8000ce8:	20000388 	.word	0x20000388

08000cec <_Z8setSpeedi>:
void distance() {}
void setSpeed(int speed)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
    frontLeftMotor.setTarget(speed);
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff fae3 	bl	80002c0 <__aeabi_i2f>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	480f      	ldr	r0, [pc, #60]	; (8000d3c <_Z8setSpeedi+0x50>)
 8000d00:	f7ff ff37 	bl	8000b72 <_ZN5Motor9setTargetEf>
    frontRightMotor.setTarget(speed);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff fadb 	bl	80002c0 <__aeabi_i2f>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	480c      	ldr	r0, [pc, #48]	; (8000d40 <_Z8setSpeedi+0x54>)
 8000d10:	f7ff ff2f 	bl	8000b72 <_ZN5Motor9setTargetEf>
    backLeftMotor.setTarget(speed);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff fad3 	bl	80002c0 <__aeabi_i2f>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4809      	ldr	r0, [pc, #36]	; (8000d44 <_Z8setSpeedi+0x58>)
 8000d20:	f7ff ff27 	bl	8000b72 <_ZN5Motor9setTargetEf>
    backRightMotor.setTarget(speed);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff facb 	bl	80002c0 <__aeabi_i2f>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4806      	ldr	r0, [pc, #24]	; (8000d48 <_Z8setSpeedi+0x5c>)
 8000d30:	f7ff ff1f 	bl	8000b72 <_ZN5Motor9setTargetEf>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000290 	.word	0x20000290
 8000d40:	2000030c 	.word	0x2000030c
 8000d44:	20000388 	.word	0x20000388
 8000d48:	20000404 	.word	0x20000404

08000d4c <_Z4stopv>:
void stop()
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
    frontLeftMotor.stop_motor();
 8000d50:	4806      	ldr	r0, [pc, #24]	; (8000d6c <_Z4stopv+0x20>)
 8000d52:	f7ff fed3 	bl	8000afc <_ZN5Motor10stop_motorEv>
    frontRightMotor.stop_motor();
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <_Z4stopv+0x24>)
 8000d58:	f7ff fed0 	bl	8000afc <_ZN5Motor10stop_motorEv>
    backLeftMotor.stop_motor();
 8000d5c:	4805      	ldr	r0, [pc, #20]	; (8000d74 <_Z4stopv+0x28>)
 8000d5e:	f7ff fecd 	bl	8000afc <_ZN5Motor10stop_motorEv>
    backRightMotor.stop_motor();
 8000d62:	4805      	ldr	r0, [pc, #20]	; (8000d78 <_Z4stopv+0x2c>)
 8000d64:	f7ff feca 	bl	8000afc <_ZN5Motor10stop_motorEv>
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000290 	.word	0x20000290
 8000d70:	2000030c 	.word	0x2000030c
 8000d74:	20000388 	.word	0x20000388
 8000d78:	20000404 	.word	0x20000404

08000d7c <_Z14updateMovementm>:
void updateMovement(uint32_t current_time)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
    frontLeftMotor.update_motor(current_time);
 8000d84:	6879      	ldr	r1, [r7, #4]
 8000d86:	4809      	ldr	r0, [pc, #36]	; (8000dac <_Z14updateMovementm+0x30>)
 8000d88:	f7ff fd8c 	bl	80008a4 <_ZN5Motor12update_motorEm>
    frontRightMotor.update_motor(current_time);
 8000d8c:	6879      	ldr	r1, [r7, #4]
 8000d8e:	4808      	ldr	r0, [pc, #32]	; (8000db0 <_Z14updateMovementm+0x34>)
 8000d90:	f7ff fd88 	bl	80008a4 <_ZN5Motor12update_motorEm>
    backLeftMotor.update_motor(current_time);
 8000d94:	6879      	ldr	r1, [r7, #4]
 8000d96:	4807      	ldr	r0, [pc, #28]	; (8000db4 <_Z14updateMovementm+0x38>)
 8000d98:	f7ff fd84 	bl	80008a4 <_ZN5Motor12update_motorEm>
    backRightMotor.update_motor(current_time);
 8000d9c:	6879      	ldr	r1, [r7, #4]
 8000d9e:	4806      	ldr	r0, [pc, #24]	; (8000db8 <_Z14updateMovementm+0x3c>)
 8000da0:	f7ff fd80 	bl	80008a4 <_ZN5Motor12update_motorEm>
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000290 	.word	0x20000290
 8000db0:	2000030c 	.word	0x2000030c
 8000db4:	20000388 	.word	0x20000388
 8000db8:	20000404 	.word	0x20000404

08000dbc <_Z41__static_initialization_and_destruction_0ii>:
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d148      	bne.n	8000e5e <_Z41__static_initialization_and_destruction_0ii+0xa2>
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d143      	bne.n	8000e5e <_Z41__static_initialization_and_destruction_0ii+0xa2>
void setSpeed(int speed);
void stop();
void updateMovement(uint32_t current_time);

// Motors
inline Motor frontLeftMotor;
 8000dd6:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	4a22      	ldr	r2, [pc, #136]	; (8000e68 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	4b21      	ldr	r3, [pc, #132]	; (8000e68 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	bf0c      	ite	eq
 8000de8:	2301      	moveq	r3, #1
 8000dea:	2300      	movne	r3, #0
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d002      	beq.n	8000df8 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8000df2:	481e      	ldr	r0, [pc, #120]	; (8000e6c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8000df4:	f7ff fcc4 	bl	8000780 <_ZN5MotorC1Ev>
inline Motor frontRightMotor;
 8000df8:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	4a1c      	ldr	r2, [pc, #112]	; (8000e70 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8000e00:	6013      	str	r3, [r2, #0]
 8000e02:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	bf0c      	ite	eq
 8000e0a:	2301      	moveq	r3, #1
 8000e0c:	2300      	movne	r3, #0
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d002      	beq.n	8000e1a <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8000e14:	4817      	ldr	r0, [pc, #92]	; (8000e74 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8000e16:	f7ff fcb3 	bl	8000780 <_ZN5MotorC1Ev>
inline Motor backLeftMotor;
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	4a15      	ldr	r2, [pc, #84]	; (8000e78 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000e22:	6013      	str	r3, [r2, #0]
 8000e24:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	bf0c      	ite	eq
 8000e2c:	2301      	moveq	r3, #1
 8000e2e:	2300      	movne	r3, #0
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d002      	beq.n	8000e3c <_Z41__static_initialization_and_destruction_0ii+0x80>
 8000e36:	4811      	ldr	r0, [pc, #68]	; (8000e7c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8000e38:	f7ff fca2 	bl	8000780 <_ZN5MotorC1Ev>
inline Motor backRightMotor;
 8000e3c:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	3301      	adds	r3, #1
 8000e42:	4a0f      	ldr	r2, [pc, #60]	; (8000e80 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	bf0c      	ite	eq
 8000e4e:	2301      	moveq	r3, #1
 8000e50:	2300      	movne	r3, #0
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d002      	beq.n	8000e5e <_Z41__static_initialization_and_destruction_0ii+0xa2>
 8000e58:	480a      	ldr	r0, [pc, #40]	; (8000e84 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8000e5a:	f7ff fc91 	bl	8000780 <_ZN5MotorC1Ev>
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000480 	.word	0x20000480
 8000e6c:	20000290 	.word	0x20000290
 8000e70:	20000484 	.word	0x20000484
 8000e74:	2000030c 	.word	0x2000030c
 8000e78:	20000488 	.word	0x20000488
 8000e7c:	20000388 	.word	0x20000388
 8000e80:	2000048c 	.word	0x2000048c
 8000e84:	20000404 	.word	0x20000404

08000e88 <_GLOBAL__sub_I__Z12movementInitv>:
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e90:	2001      	movs	r0, #1
 8000e92:	f7ff ff93 	bl	8000dbc <_Z41__static_initialization_and_destruction_0ii>
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <_ZN3PIDC1Ev>:
 *      Author: Sanci
 */

#include "PID.h"

PID::PID(){
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f04f 0200 	mov.w	r2, #0
 8000eae:	605a      	str	r2, [r3, #4]
}
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr

08000ebc <_ZN3PID3setEffffff>:

void PID::set(float kP, float kI, float kD, float kImax, float out_min, float out_max){
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
 8000ec8:	603b      	str	r3, [r7, #0]
    this->kP = kP;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	68ba      	ldr	r2, [r7, #8]
 8000ece:	609a      	str	r2, [r3, #8]
    this->kI = kI;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	60da      	str	r2, [r3, #12]
    this->kD = kD;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	683a      	ldr	r2, [r7, #0]
 8000eda:	611a      	str	r2, [r3, #16]
    this->kImax = kImax;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	615a      	str	r2, [r3, #20]
    this->out_min = out_min;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	69fa      	ldr	r2, [r7, #28]
 8000ee6:	61da      	str	r2, [r3, #28]
    this->out_max = out_max;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	6a3a      	ldr	r2, [r7, #32]
 8000eec:	619a      	str	r2, [r3, #24]
}
 8000eee:	bf00      	nop
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr

08000ef8 <_Z9lcd_beginv>:
#include "lcd.h"

void lcd_begin()
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
	uint8_t data;
	HAL_Delay(50);
 8000efe:	2032      	movs	r0, #50	; 0x32
 8000f00:	f000 fea0 	bl	8001c44 <HAL_Delay>
	data = 0b00111100;
 8000f04:	233c      	movs	r3, #60	; 0x3c
 8000f06:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(5, data); // Wait 4ms
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	2005      	movs	r0, #5
 8000f0e:	f000 f851 	bl	8000fb4 <_Z16send_lcd_commandhh>

	data = 0b00111100;
 8000f12:	233c      	movs	r3, #60	; 0x3c
 8000f14:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // Wait 100us
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	f000 f84a 	bl	8000fb4 <_Z16send_lcd_commandhh>

	data = 0b00111100;
 8000f20:	233c      	movs	r3, #60	; 0x3c
 8000f22:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // Wait 100us
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	4619      	mov	r1, r3
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f000 f843 	bl	8000fb4 <_Z16send_lcd_commandhh>

	data = 0b00101100;
 8000f2e:	232c      	movs	r3, #44	; 0x2c
 8000f30:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // Wait 100us
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	4619      	mov	r1, r3
 8000f36:	2001      	movs	r0, #1
 8000f38:	f000 f83c 	bl	8000fb4 <_Z16send_lcd_commandhh>

	data = 0b00101100;
 8000f3c:	232c      	movs	r3, #44	; 0x2c
 8000f3e:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // Wait 100us
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	4619      	mov	r1, r3
 8000f44:	2001      	movs	r0, #1
 8000f46:	f000 f835 	bl	8000fb4 <_Z16send_lcd_commandhh>

	data = 0b10001100;
 8000f4a:	238c      	movs	r3, #140	; 0x8c
 8000f4c:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // NF
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	4619      	mov	r1, r3
 8000f52:	2001      	movs	r0, #1
 8000f54:	f000 f82e 	bl	8000fb4 <_Z16send_lcd_commandhh>

	data = 0x0C;
 8000f58:	230c      	movs	r3, #12
 8000f5a:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data);
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	4619      	mov	r1, r3
 8000f60:	2001      	movs	r0, #1
 8000f62:	f000 f827 	bl	8000fb4 <_Z16send_lcd_commandhh>
	//-----------------------------------------------------------
	data = (0xC0) | (1 << 2);
 8000f66:	23c4      	movs	r3, #196	; 0xc4
 8000f68:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(5, data); // 6b
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	2005      	movs	r0, #5
 8000f70:	f000 f820 	bl	8000fb4 <_Z16send_lcd_commandhh>

	data = (0x00) | (1 << 2);
 8000f74:	2304      	movs	r3, #4
 8000f76:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // 7a
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f000 f819 	bl	8000fb4 <_Z16send_lcd_commandhh>

	data = (0x10) | (1 << 2);
 8000f82:	2314      	movs	r3, #20
 8000f84:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // 7b
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	f000 f812 	bl	8000fb4 <_Z16send_lcd_commandhh>

	data = (0x00) | (1 << 2);
 8000f90:	2304      	movs	r3, #4
 8000f92:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // 8a
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	4619      	mov	r1, r3
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f000 f80b 	bl	8000fb4 <_Z16send_lcd_commandhh>

	data = (0x60) | (1 << 2);
 8000f9e:	2364      	movs	r3, #100	; 0x64
 8000fa0:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(5, data); // 8b
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	2005      	movs	r0, #5
 8000fa8:	f000 f804 	bl	8000fb4 <_Z16send_lcd_commandhh>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <_Z16send_lcd_commandhh>:

void send_lcd_command(uint8_t delay, uint8_t info)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	4603      	mov	r3, r0
 8000fbc:	460a      	mov	r2, r1
 8000fbe:	71fb      	strb	r3, [r7, #7]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, 0x27 << 1, &info, 1, 1000);
 8000fc4:	1dba      	adds	r2, r7, #6
 8000fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	2301      	movs	r3, #1
 8000fce:	214e      	movs	r1, #78	; 0x4e
 8000fd0:	480d      	ldr	r0, [pc, #52]	; (8001008 <_Z16send_lcd_commandhh+0x54>)
 8000fd2:	f001 fa61 	bl	8002498 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	f000 fe34 	bl	8001c44 <HAL_Delay>
	info = info & ~(1 << 2);
 8000fdc:	79bb      	ldrb	r3, [r7, #6]
 8000fde:	f023 0304 	bic.w	r3, r3, #4
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, 0x27 << 1, &info, 1, 1000);
 8000fe6:	1dba      	adds	r2, r7, #6
 8000fe8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	2301      	movs	r3, #1
 8000ff0:	214e      	movs	r1, #78	; 0x4e
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <_Z16send_lcd_commandhh+0x54>)
 8000ff4:	f001 fa50 	bl	8002498 <HAL_I2C_Master_Transmit>
	HAL_Delay(delay); // Wait 100us
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 fe22 	bl	8001c44 <HAL_Delay>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000490 	.word	0x20000490

0800100c <_Z8send_msgPc>:

void send_msg(char *text)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	uint8_t data;

	while (*text)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d01d      	beq.n	8001058 <_Z8send_msgPc+0x4c>
	{
		data = (*text & 0xF0) | 0x0D | 0x08;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	f023 030f 	bic.w	r3, r3, #15
 8001024:	b2db      	uxtb	r3, r3
 8001026:	f043 030d 	orr.w	r3, r3, #13
 800102a:	73fb      	strb	r3, [r7, #15]
		send_lcd_command(1, data);
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	4619      	mov	r1, r3
 8001030:	2001      	movs	r0, #1
 8001032:	f7ff ffbf 	bl	8000fb4 <_Z16send_lcd_commandhh>
		data = ((*text << 4) & 0xF0) | 0x0D | 0x08;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	011b      	lsls	r3, r3, #4
 800103c:	b25b      	sxtb	r3, r3
 800103e:	f043 030d 	orr.w	r3, r3, #13
 8001042:	b25b      	sxtb	r3, r3
 8001044:	73fb      	strb	r3, [r7, #15]
		send_lcd_command(1, data);
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	4619      	mov	r1, r3
 800104a:	2001      	movs	r0, #1
 800104c:	f7ff ffb2 	bl	8000fb4 <_Z16send_lcd_commandhh>
		text++;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3301      	adds	r3, #1
 8001054:	607b      	str	r3, [r7, #4]
	while (*text)
 8001056:	e7dd      	b.n	8001014 <_Z8send_msgPc+0x8>
	}
}
 8001058:	bf00      	nop
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <_Z9lcd_cleanv>:

void lcd_clean()
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af02      	add	r7, sp, #8
	uint8_t data = (0x08) | (1 << 2);
 8001066:	230c      	movs	r3, #12
 8001068:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, 0x27 << 1, &data, 1, 1000);
 800106a:	1dfa      	adds	r2, r7, #7
 800106c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2301      	movs	r3, #1
 8001074:	214e      	movs	r1, #78	; 0x4e
 8001076:	4809      	ldr	r0, [pc, #36]	; (800109c <_Z9lcd_cleanv+0x3c>)
 8001078:	f001 fa0e 	bl	8002498 <HAL_I2C_Master_Transmit>
	send_lcd_command(5, data);
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	4619      	mov	r1, r3
 8001080:	2005      	movs	r0, #5
 8001082:	f7ff ff97 	bl	8000fb4 <_Z16send_lcd_commandhh>
	data = (0x18) | (1 << 2) | 0x08;
 8001086:	231c      	movs	r3, #28
 8001088:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(5, data);
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	4619      	mov	r1, r3
 800108e:	2005      	movs	r0, #5
 8001090:	f7ff ff90 	bl	8000fb4 <_Z16send_lcd_commandhh>
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000490 	.word	0x20000490

080010a0 <HAL_GPIO_EXTI_Callback>:
static void MX_TIM1_Init(void);
static void MX_TIM3_Init(void);

/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80010aa:	88fb      	ldrh	r3, [r7, #6]
 80010ac:	3b01      	subs	r3, #1
 80010ae:	2b07      	cmp	r3, #7
 80010b0:	d822      	bhi.n	80010f8 <HAL_GPIO_EXTI_Callback+0x58>
 80010b2:	a201      	add	r2, pc, #4	; (adr r2, 80010b8 <HAL_GPIO_EXTI_Callback+0x18>)
 80010b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b8:	080010e1 	.word	0x080010e1
 80010bc:	080010d9 	.word	0x080010d9
 80010c0:	080010f9 	.word	0x080010f9
 80010c4:	080010e9 	.word	0x080010e9
 80010c8:	080010f9 	.word	0x080010f9
 80010cc:	080010f9 	.word	0x080010f9
 80010d0:	080010f9 	.word	0x080010f9
 80010d4:	080010f1 	.word	0x080010f1
  {
  case Constants::kFrontLeftEncoder:
    frontLeftMotor.addTicks();
 80010d8:	4809      	ldr	r0, [pc, #36]	; (8001100 <HAL_GPIO_EXTI_Callback+0x60>)
 80010da:	f7ff fd62 	bl	8000ba2 <_ZN5Motor8addTicksEv>
    break;
 80010de:	e00b      	b.n	80010f8 <HAL_GPIO_EXTI_Callback+0x58>
  case Constants::kFrontRightEncoder:
    frontRightMotor.addTicks();
 80010e0:	4808      	ldr	r0, [pc, #32]	; (8001104 <HAL_GPIO_EXTI_Callback+0x64>)
 80010e2:	f7ff fd5e 	bl	8000ba2 <_ZN5Motor8addTicksEv>
    break;
 80010e6:	e007      	b.n	80010f8 <HAL_GPIO_EXTI_Callback+0x58>
  case Constants::kBackLeftEncoder:
    backLeftMotor.addTicks();
 80010e8:	4807      	ldr	r0, [pc, #28]	; (8001108 <HAL_GPIO_EXTI_Callback+0x68>)
 80010ea:	f7ff fd5a 	bl	8000ba2 <_ZN5Motor8addTicksEv>
    break;
 80010ee:	e003      	b.n	80010f8 <HAL_GPIO_EXTI_Callback+0x58>
  case Constants::kBackRightEncoder:
    backRightMotor.addTicks();
 80010f0:	4806      	ldr	r0, [pc, #24]	; (800110c <HAL_GPIO_EXTI_Callback+0x6c>)
 80010f2:	f7ff fd56 	bl	8000ba2 <_ZN5Motor8addTicksEv>
    break;
 80010f6:	bf00      	nop
  }
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000290 	.word	0x20000290
 8001104:	2000030c 	.word	0x2000030c
 8001108:	20000388 	.word	0x20000388
 800110c:	20000404 	.word	0x20000404

08001110 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b08f      	sub	sp, #60	; 0x3c
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001116:	f000 fd33 	bl	8001b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800111a:	f000 f8a7 	bl	800126c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111e:	f000 fa61 	bl	80015e4 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 8001122:	f000 f90d 	bl	8001340 <_ZL12MX_I2C1_Initv>
  MX_USB_DEVICE_Init();
 8001126:	f008 f811 	bl	800914c <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 800112a:	f000 f93d 	bl	80013a8 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 800112e:	f000 f9d1 	bl	80014d4 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */
  MX_GPIO_Init();
 8001132:	f000 fa57 	bl	80015e4 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 8001136:	f000 f903 	bl	8001340 <_ZL12MX_I2C1_Initv>
  MX_USB_DEVICE_Init();
 800113a:	f008 f807 	bl	800914c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_Init();
 800113e:	f000 fd1f 	bl	8001b80 <HAL_Init>
  SystemClock_Config();
 8001142:	f000 f893 	bl	800126c <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 8001146:	f000 fa4d 	bl	80015e4 <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 800114a:	f000 f92d 	bl	80013a8 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 800114e:	f000 f9c1 	bl	80014d4 <_ZL12MX_TIM3_Initv>

  lcd_begin();
 8001152:	f7ff fed1 	bl	8000ef8 <_Z9lcd_beginv>
  send_msg("Equipo4");
 8001156:	483d      	ldr	r0, [pc, #244]	; (800124c <main+0x13c>)
 8001158:	f7ff ff58 	bl	800100c <_Z8send_msgPc>

  movementInit();
 800115c:	f7ff fd68 	bl	8000c30 <_Z12movementInitv>

  /// SPEED
  setSpeed(speed);
 8001160:	4b3b      	ldr	r3, [pc, #236]	; (8001250 <main+0x140>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fdc1 	bl	8000cec <_Z8setSpeedi>
  uint32_t last_average_time = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	633b      	str	r3, [r7, #48]	; 0x30
  float total_distance = 0;
 800116e:	f04f 0300 	mov.w	r3, #0
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
  float last_time_print = HAL_GetTick();
 8001174:	f000 fd5c 	bl	8001c30 <HAL_GetTick>
 8001178:	4603      	mov	r3, r0
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f89c 	bl	80002b8 <__aeabi_ui2f>
 8001180:	4603      	mov	r3, r0
 8001182:	637b      	str	r3, [r7, #52]	; 0x34
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    uint32_t now = HAL_GetTick();
 8001184:	f000 fd54 	bl	8001c30 <HAL_GetTick>
 8001188:	62b8      	str	r0, [r7, #40]	; 0x28
    updateMovement(now);
 800118a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800118c:	f7ff fdf6 	bl	8000d7c <_Z14updateMovementm>

    int distancia_entera = (int)((backLeftMotor.getDistance() + backRightMotor.getDistance() + frontLeftMotor.getDistance() + frontRightMotor.getDistance()) / 4);
 8001190:	4830      	ldr	r0, [pc, #192]	; (8001254 <main+0x144>)
 8001192:	f7ff fcfb 	bl	8000b8c <_ZN5Motor11getDistanceEv>
 8001196:	4604      	mov	r4, r0
 8001198:	482f      	ldr	r0, [pc, #188]	; (8001258 <main+0x148>)
 800119a:	f7ff fcf7 	bl	8000b8c <_ZN5Motor11getDistanceEv>
 800119e:	4603      	mov	r3, r0
 80011a0:	4619      	mov	r1, r3
 80011a2:	4620      	mov	r0, r4
 80011a4:	f7fe ffd8 	bl	8000158 <__addsf3>
 80011a8:	4603      	mov	r3, r0
 80011aa:	461c      	mov	r4, r3
 80011ac:	482b      	ldr	r0, [pc, #172]	; (800125c <main+0x14c>)
 80011ae:	f7ff fced 	bl	8000b8c <_ZN5Motor11getDistanceEv>
 80011b2:	4603      	mov	r3, r0
 80011b4:	4619      	mov	r1, r3
 80011b6:	4620      	mov	r0, r4
 80011b8:	f7fe ffce 	bl	8000158 <__addsf3>
 80011bc:	4603      	mov	r3, r0
 80011be:	461c      	mov	r4, r3
 80011c0:	4827      	ldr	r0, [pc, #156]	; (8001260 <main+0x150>)
 80011c2:	f7ff fce3 	bl	8000b8c <_ZN5Motor11getDistanceEv>
 80011c6:	4603      	mov	r3, r0
 80011c8:	4619      	mov	r1, r3
 80011ca:	4620      	mov	r0, r4
 80011cc:	f7fe ffc4 	bl	8000158 <__addsf3>
 80011d0:	4603      	mov	r3, r0
 80011d2:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f97a 	bl	80004d0 <__aeabi_fdiv>
 80011dc:	4603      	mov	r3, r0
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fa88 	bl	80006f4 <__aeabi_f2iz>
 80011e4:	4603      	mov	r3, r0
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
    if (now - last_time_print > 10)
 80011e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011ea:	f7ff f865 	bl	80002b8 <__aeabi_ui2f>
 80011ee:	4603      	mov	r3, r0
 80011f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7fe ffae 	bl	8000154 <__aeabi_fsub>
 80011f8:	4603      	mov	r3, r0
 80011fa:	491a      	ldr	r1, [pc, #104]	; (8001264 <main+0x154>)
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fa6f 	bl	80006e0 <__aeabi_fcmpgt>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d017      	beq.n	8001238 <main+0x128>
    {
      char buffer[32];
      sprintf(buffer, "Vel %d Dis  %d", (int)frontLeftMotor.getSpeed(), distancia_entera);
 8001208:	4814      	ldr	r0, [pc, #80]	; (800125c <main+0x14c>)
 800120a:	f7ff fcd8 	bl	8000bbe <_ZN5Motor8getSpeedEv>
 800120e:	4603      	mov	r3, r0
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fa6f 	bl	80006f4 <__aeabi_f2iz>
 8001216:	4602      	mov	r2, r0
 8001218:	1d38      	adds	r0, r7, #4
 800121a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121c:	4912      	ldr	r1, [pc, #72]	; (8001268 <main+0x158>)
 800121e:	f008 fc3d 	bl	8009a9c <siprintf>
      lcd_clean();
 8001222:	f7ff ff1d 	bl	8001060 <_Z9lcd_cleanv>
      send_msg(buffer);
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff feef 	bl	800100c <_Z8send_msgPc>
      last_time_print = now;
 800122e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001230:	f7ff f842 	bl	80002b8 <__aeabi_ui2f>
 8001234:	4603      	mov	r3, r0
 8001236:	637b      	str	r3, [r7, #52]	; 0x34
    }
    HAL_Delay(100);
 8001238:	2064      	movs	r0, #100	; 0x64
 800123a:	f000 fd03 	bl	8001c44 <HAL_Delay>
    while (distancia_entera > 300)
 800123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001240:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001244:	dd9e      	ble.n	8001184 <main+0x74>
    {
      stop();
 8001246:	f7ff fd81 	bl	8000d4c <_Z4stopv>
    while (distancia_entera > 300)
 800124a:	e7f8      	b.n	800123e <main+0x12e>
 800124c:	0800a328 	.word	0x0800a328
 8001250:	20000000 	.word	0x20000000
 8001254:	20000388 	.word	0x20000388
 8001258:	20000404 	.word	0x20000404
 800125c:	20000290 	.word	0x20000290
 8001260:	2000030c 	.word	0x2000030c
 8001264:	41200000 	.word	0x41200000
 8001268:	0800a330 	.word	0x0800a330

0800126c <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b094      	sub	sp, #80	; 0x50
 8001270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001272:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001276:	2228      	movs	r2, #40	; 0x28
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f008 fc06 	bl	8009a8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800129c:	2301      	movs	r3, #1
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012aa:	2301      	movs	r3, #1
 80012ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ae:	2302      	movs	r3, #2
 80012b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012c2:	4618      	mov	r0, r3
 80012c4:	f003 f9a4 	bl	8004610 <HAL_RCC_OscConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	bf14      	ite	ne
 80012ce:	2301      	movne	r3, #1
 80012d0:	2300      	moveq	r3, #0
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 80012d8:	f000 fa1e 	bl	8001718 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012dc:	230f      	movs	r3, #15
 80012de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012e0:	2302      	movs	r3, #2
 80012e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ec:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	2102      	movs	r1, #2
 80012f8:	4618      	mov	r0, r3
 80012fa:	f003 fc09 	bl	8004b10 <HAL_RCC_ClockConfig>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	bf14      	ite	ne
 8001304:	2301      	movne	r3, #1
 8001306:	2300      	moveq	r3, #0
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800130e:	f000 fa03 	bl	8001718 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001312:	2310      	movs	r3, #16
 8001314:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	4618      	mov	r0, r3
 800131e:	f003 fd71 	bl	8004e04 <HAL_RCCEx_PeriphCLKConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	bf14      	ite	ne
 8001328:	2301      	movne	r3, #1
 800132a:	2300      	moveq	r3, #0
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 8001332:	f000 f9f1 	bl	8001718 <Error_Handler>
  }
}
 8001336:	bf00      	nop
 8001338:	3750      	adds	r7, #80	; 0x50
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <_ZL12MX_I2C1_Initv>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001344:	4b15      	ldr	r3, [pc, #84]	; (800139c <_ZL12MX_I2C1_Initv+0x5c>)
 8001346:	4a16      	ldr	r2, [pc, #88]	; (80013a0 <_ZL12MX_I2C1_Initv+0x60>)
 8001348:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800134a:	4b14      	ldr	r3, [pc, #80]	; (800139c <_ZL12MX_I2C1_Initv+0x5c>)
 800134c:	4a15      	ldr	r2, [pc, #84]	; (80013a4 <_ZL12MX_I2C1_Initv+0x64>)
 800134e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <_ZL12MX_I2C1_Initv+0x5c>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <_ZL12MX_I2C1_Initv+0x5c>)
 8001358:	2200      	movs	r2, #0
 800135a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <_ZL12MX_I2C1_Initv+0x5c>)
 800135e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001362:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001364:	4b0d      	ldr	r3, [pc, #52]	; (800139c <_ZL12MX_I2C1_Initv+0x5c>)
 8001366:	2200      	movs	r2, #0
 8001368:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <_ZL12MX_I2C1_Initv+0x5c>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001370:	4b0a      	ldr	r3, [pc, #40]	; (800139c <_ZL12MX_I2C1_Initv+0x5c>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <_ZL12MX_I2C1_Initv+0x5c>)
 8001378:	2200      	movs	r2, #0
 800137a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800137c:	4807      	ldr	r0, [pc, #28]	; (800139c <_ZL12MX_I2C1_Initv+0x5c>)
 800137e:	f000 ff47 	bl	8002210 <HAL_I2C_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	bf14      	ite	ne
 8001388:	2301      	movne	r3, #1
 800138a:	2300      	moveq	r3, #0
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001392:	f000 f9c1 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000490 	.word	0x20000490
 80013a0:	40005400 	.word	0x40005400
 80013a4:	000186a0 	.word	0x000186a0

080013a8 <_ZL12MX_TIM1_Initv>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b092      	sub	sp, #72	; 0x48
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
 80013c8:	615a      	str	r2, [r3, #20]
 80013ca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2220      	movs	r2, #32
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f008 fb5a 	bl	8009a8c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013d8:	4b3c      	ldr	r3, [pc, #240]	; (80014cc <_ZL12MX_TIM1_Initv+0x124>)
 80013da:	4a3d      	ldr	r2, [pc, #244]	; (80014d0 <_ZL12MX_TIM1_Initv+0x128>)
 80013dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 13;
 80013de:	4b3b      	ldr	r3, [pc, #236]	; (80014cc <_ZL12MX_TIM1_Initv+0x124>)
 80013e0:	220d      	movs	r2, #13
 80013e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e4:	4b39      	ldr	r3, [pc, #228]	; (80014cc <_ZL12MX_TIM1_Initv+0x124>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 80013ea:	4b38      	ldr	r3, [pc, #224]	; (80014cc <_ZL12MX_TIM1_Initv+0x124>)
 80013ec:	22ff      	movs	r2, #255	; 0xff
 80013ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f0:	4b36      	ldr	r3, [pc, #216]	; (80014cc <_ZL12MX_TIM1_Initv+0x124>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013f6:	4b35      	ldr	r3, [pc, #212]	; (80014cc <_ZL12MX_TIM1_Initv+0x124>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fc:	4b33      	ldr	r3, [pc, #204]	; (80014cc <_ZL12MX_TIM1_Initv+0x124>)
 80013fe:	2200      	movs	r2, #0
 8001400:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001402:	4832      	ldr	r0, [pc, #200]	; (80014cc <_ZL12MX_TIM1_Initv+0x124>)
 8001404:	f003 fdb4 	bl	8004f70 <HAL_TIM_PWM_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	bf14      	ite	ne
 800140e:	2301      	movne	r3, #1
 8001410:	2300      	moveq	r3, #0
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <_ZL12MX_TIM1_Initv+0x74>
  {
    Error_Handler();
 8001418:	f000 f97e 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800141c:	2300      	movs	r3, #0
 800141e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001420:	2300      	movs	r3, #0
 8001422:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001424:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001428:	4619      	mov	r1, r3
 800142a:	4828      	ldr	r0, [pc, #160]	; (80014cc <_ZL12MX_TIM1_Initv+0x124>)
 800142c:	f004 f96e 	bl	800570c <HAL_TIMEx_MasterConfigSynchronization>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	bf14      	ite	ne
 8001436:	2301      	movne	r3, #1
 8001438:	2300      	moveq	r3, #0
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <_ZL12MX_TIM1_Initv+0x9c>
  {
    Error_Handler();
 8001440:	f000 f96a 	bl	8001718 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001444:	2360      	movs	r3, #96	; 0x60
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800144c:	2300      	movs	r3, #0
 800144e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001450:	2300      	movs	r3, #0
 8001452:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001454:	2300      	movs	r3, #0
 8001456:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001458:	2300      	movs	r3, #0
 800145a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800145c:	2300      	movs	r3, #0
 800145e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001464:	2200      	movs	r2, #0
 8001466:	4619      	mov	r1, r3
 8001468:	4818      	ldr	r0, [pc, #96]	; (80014cc <_ZL12MX_TIM1_Initv+0x124>)
 800146a:	f003 fe73 	bl	8005154 <HAL_TIM_PWM_ConfigChannel>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	bf14      	ite	ne
 8001474:	2301      	movne	r3, #1
 8001476:	2300      	moveq	r3, #0
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <_ZL12MX_TIM1_Initv+0xda>
  {
    Error_Handler();
 800147e:	f000 f94b 	bl	8001718 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001496:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800149a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	4619      	mov	r1, r3
 80014a4:	4809      	ldr	r0, [pc, #36]	; (80014cc <_ZL12MX_TIM1_Initv+0x124>)
 80014a6:	f004 f98f 	bl	80057c8 <HAL_TIMEx_ConfigBreakDeadTime>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	bf14      	ite	ne
 80014b0:	2301      	movne	r3, #1
 80014b2:	2300      	moveq	r3, #0
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <_ZL12MX_TIM1_Initv+0x116>
  {
    Error_Handler();
 80014ba:	f000 f92d 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014be:	4803      	ldr	r0, [pc, #12]	; (80014cc <_ZL12MX_TIM1_Initv+0x124>)
 80014c0:	f000 fa40 	bl	8001944 <HAL_TIM_MspPostInit>
}
 80014c4:	bf00      	nop
 80014c6:	3748      	adds	r7, #72	; 0x48
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000200 	.word	0x20000200
 80014d0:	40012c00 	.word	0x40012c00

080014d4 <_ZL12MX_TIM3_Initv>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	; 0x28
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014da:	f107 0320 	add.w	r3, r7, #32
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]
 80014f2:	615a      	str	r2, [r3, #20]
 80014f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014f6:	4b39      	ldr	r3, [pc, #228]	; (80015dc <_ZL12MX_TIM3_Initv+0x108>)
 80014f8:	4a39      	ldr	r2, [pc, #228]	; (80015e0 <_ZL12MX_TIM3_Initv+0x10c>)
 80014fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 13;
 80014fc:	4b37      	ldr	r3, [pc, #220]	; (80015dc <_ZL12MX_TIM3_Initv+0x108>)
 80014fe:	220d      	movs	r2, #13
 8001500:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001502:	4b36      	ldr	r3, [pc, #216]	; (80015dc <_ZL12MX_TIM3_Initv+0x108>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8001508:	4b34      	ldr	r3, [pc, #208]	; (80015dc <_ZL12MX_TIM3_Initv+0x108>)
 800150a:	22ff      	movs	r2, #255	; 0xff
 800150c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150e:	4b33      	ldr	r3, [pc, #204]	; (80015dc <_ZL12MX_TIM3_Initv+0x108>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001514:	4b31      	ldr	r3, [pc, #196]	; (80015dc <_ZL12MX_TIM3_Initv+0x108>)
 8001516:	2200      	movs	r2, #0
 8001518:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800151a:	4830      	ldr	r0, [pc, #192]	; (80015dc <_ZL12MX_TIM3_Initv+0x108>)
 800151c:	f003 fd28 	bl	8004f70 <HAL_TIM_PWM_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	bf14      	ite	ne
 8001526:	2301      	movne	r3, #1
 8001528:	2300      	moveq	r3, #0
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <_ZL12MX_TIM3_Initv+0x60>
  {
    Error_Handler();
 8001530:	f000 f8f2 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001534:	2300      	movs	r3, #0
 8001536:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800153c:	f107 0320 	add.w	r3, r7, #32
 8001540:	4619      	mov	r1, r3
 8001542:	4826      	ldr	r0, [pc, #152]	; (80015dc <_ZL12MX_TIM3_Initv+0x108>)
 8001544:	f004 f8e2 	bl	800570c <HAL_TIMEx_MasterConfigSynchronization>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	bf14      	ite	ne
 800154e:	2301      	movne	r3, #1
 8001550:	2300      	moveq	r3, #0
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <_ZL12MX_TIM3_Initv+0x88>
  {
    Error_Handler();
 8001558:	f000 f8de 	bl	8001718 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800155c:	2360      	movs	r3, #96	; 0x60
 800155e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	2200      	movs	r2, #0
 8001570:	4619      	mov	r1, r3
 8001572:	481a      	ldr	r0, [pc, #104]	; (80015dc <_ZL12MX_TIM3_Initv+0x108>)
 8001574:	f003 fdee 	bl	8005154 <HAL_TIM_PWM_ConfigChannel>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	bf14      	ite	ne
 800157e:	2301      	movne	r3, #1
 8001580:	2300      	moveq	r3, #0
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <_ZL12MX_TIM3_Initv+0xb8>
  {
    Error_Handler();
 8001588:	f000 f8c6 	bl	8001718 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	2204      	movs	r2, #4
 8001590:	4619      	mov	r1, r3
 8001592:	4812      	ldr	r0, [pc, #72]	; (80015dc <_ZL12MX_TIM3_Initv+0x108>)
 8001594:	f003 fdde 	bl	8005154 <HAL_TIM_PWM_ConfigChannel>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	bf14      	ite	ne
 800159e:	2301      	movne	r3, #1
 80015a0:	2300      	moveq	r3, #0
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 80015a8:	f000 f8b6 	bl	8001718 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	220c      	movs	r2, #12
 80015b0:	4619      	mov	r1, r3
 80015b2:	480a      	ldr	r0, [pc, #40]	; (80015dc <_ZL12MX_TIM3_Initv+0x108>)
 80015b4:	f003 fdce 	bl	8005154 <HAL_TIM_PWM_ConfigChannel>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	bf14      	ite	ne
 80015be:	2301      	movne	r3, #1
 80015c0:	2300      	moveq	r3, #0
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <_ZL12MX_TIM3_Initv+0xf8>
  {
    Error_Handler();
 80015c8:	f000 f8a6 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015cc:	4803      	ldr	r0, [pc, #12]	; (80015dc <_ZL12MX_TIM3_Initv+0x108>)
 80015ce:	f000 f9b9 	bl	8001944 <HAL_TIM_MspPostInit>
}
 80015d2:	bf00      	nop
 80015d4:	3728      	adds	r7, #40	; 0x28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000248 	.word	0x20000248
 80015e0:	40000400 	.word	0x40000400

080015e4 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b088      	sub	sp, #32
 80015e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ea:	f107 0310 	add.w	r3, r7, #16
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f8:	4b43      	ldr	r3, [pc, #268]	; (8001708 <_ZL12MX_GPIO_Initv+0x124>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	4a42      	ldr	r2, [pc, #264]	; (8001708 <_ZL12MX_GPIO_Initv+0x124>)
 80015fe:	f043 0310 	orr.w	r3, r3, #16
 8001602:	6193      	str	r3, [r2, #24]
 8001604:	4b40      	ldr	r3, [pc, #256]	; (8001708 <_ZL12MX_GPIO_Initv+0x124>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	f003 0310 	and.w	r3, r3, #16
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001610:	4b3d      	ldr	r3, [pc, #244]	; (8001708 <_ZL12MX_GPIO_Initv+0x124>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	4a3c      	ldr	r2, [pc, #240]	; (8001708 <_ZL12MX_GPIO_Initv+0x124>)
 8001616:	f043 0320 	orr.w	r3, r3, #32
 800161a:	6193      	str	r3, [r2, #24]
 800161c:	4b3a      	ldr	r3, [pc, #232]	; (8001708 <_ZL12MX_GPIO_Initv+0x124>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	f003 0320 	and.w	r3, r3, #32
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001628:	4b37      	ldr	r3, [pc, #220]	; (8001708 <_ZL12MX_GPIO_Initv+0x124>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	4a36      	ldr	r2, [pc, #216]	; (8001708 <_ZL12MX_GPIO_Initv+0x124>)
 800162e:	f043 0304 	orr.w	r3, r3, #4
 8001632:	6193      	str	r3, [r2, #24]
 8001634:	4b34      	ldr	r3, [pc, #208]	; (8001708 <_ZL12MX_GPIO_Initv+0x124>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001640:	4b31      	ldr	r3, [pc, #196]	; (8001708 <_ZL12MX_GPIO_Initv+0x124>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	4a30      	ldr	r2, [pc, #192]	; (8001708 <_ZL12MX_GPIO_Initv+0x124>)
 8001646:	f043 0308 	orr.w	r3, r3, #8
 800164a:	6193      	str	r3, [r2, #24]
 800164c:	4b2e      	ldr	r3, [pc, #184]	; (8001708 <_ZL12MX_GPIO_Initv+0x124>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	603b      	str	r3, [r7, #0]
 8001656:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8001658:	2200      	movs	r2, #0
 800165a:	2130      	movs	r1, #48	; 0x30
 800165c:	482b      	ldr	r0, [pc, #172]	; (800170c <_ZL12MX_GPIO_Initv+0x128>)
 800165e:	f000 fda7 	bl	80021b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	f64e 4101 	movw	r1, #60417	; 0xec01
 8001668:	4829      	ldr	r0, [pc, #164]	; (8001710 <_ZL12MX_GPIO_Initv+0x12c>)
 800166a:	f000 fda1 	bl	80021b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 PA4*/
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4;
 800166e:	231f      	movs	r3, #31
 8001670:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001672:	4b28      	ldr	r3, [pc, #160]	; (8001714 <_ZL12MX_GPIO_Initv+0x130>)
 8001674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001676:	2301      	movs	r3, #1
 8001678:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167a:	f107 0310 	add.w	r3, r7, #16
 800167e:	4619      	mov	r1, r3
 8001680:	4822      	ldr	r0, [pc, #136]	; (800170c <_ZL12MX_GPIO_Initv+0x128>)
 8001682:	f000 fc11 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8001686:	2330      	movs	r3, #48	; 0x30
 8001688:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168a:	2301      	movs	r3, #1
 800168c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2302      	movs	r3, #2
 8001694:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001696:	f107 0310 	add.w	r3, r7, #16
 800169a:	4619      	mov	r1, r3
 800169c:	481b      	ldr	r0, [pc, #108]	; (800170c <_ZL12MX_GPIO_Initv+0x128>)
 800169e:	f000 fc03 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB11 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80016a2:	f64f 4301 	movw	r3, #64513	; 0xfc01
 80016a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a8:	2301      	movs	r3, #1
 80016aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b0:	2302      	movs	r3, #2
 80016b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b4:	f107 0310 	add.w	r3, r7, #16
 80016b8:	4619      	mov	r1, r3
 80016ba:	4815      	ldr	r0, [pc, #84]	; (8001710 <_ZL12MX_GPIO_Initv+0x12c>)
 80016bc:	f000 fbf4 	bl	8001ea8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80016c0:	2200      	movs	r2, #0
 80016c2:	2100      	movs	r1, #0
 80016c4:	2006      	movs	r0, #6
 80016c6:	f000 fbb8 	bl	8001e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80016ca:	2006      	movs	r0, #6
 80016cc:	f000 fbd1 	bl	8001e72 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2100      	movs	r1, #0
 80016d4:	2007      	movs	r0, #7
 80016d6:	f000 fbb0 	bl	8001e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80016da:	2007      	movs	r0, #7
 80016dc:	f000 fbc9 	bl	8001e72 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2100      	movs	r1, #0
 80016e4:	2008      	movs	r0, #8
 80016e6:	f000 fba8 	bl	8001e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80016ea:	2008      	movs	r0, #8
 80016ec:	f000 fbc1 	bl	8001e72 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2100      	movs	r1, #0
 80016f4:	2009      	movs	r0, #9
 80016f6:	f000 fba0 	bl	8001e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80016fa:	2009      	movs	r0, #9
 80016fc:	f000 fbb9 	bl	8001e72 <HAL_NVIC_EnableIRQ>
}
 8001700:	bf00      	nop
 8001702:	3720      	adds	r7, #32
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40021000 	.word	0x40021000
 800170c:	40010800 	.word	0x40010800
 8001710:	40010c00 	.word	0x40010c00
 8001714:	10110000 	.word	0x10110000

08001718 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800171c:	b672      	cpsid	i
}
 800171e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001720:	e7fe      	b.n	8001720 <Error_Handler+0x8>
	...

08001724 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d148      	bne.n	80017c6 <_Z41__static_initialization_and_destruction_0ii+0xa2>
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800173a:	4293      	cmp	r3, r2
 800173c:	d143      	bne.n	80017c6 <_Z41__static_initialization_and_destruction_0ii+0xa2>
inline Motor frontLeftMotor;
 800173e:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	3301      	adds	r3, #1
 8001744:	4a22      	ldr	r2, [pc, #136]	; (80017d0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	4b21      	ldr	r3, [pc, #132]	; (80017d0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b01      	cmp	r3, #1
 800174e:	bf0c      	ite	eq
 8001750:	2301      	moveq	r3, #1
 8001752:	2300      	movne	r3, #0
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d002      	beq.n	8001760 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800175a:	481e      	ldr	r0, [pc, #120]	; (80017d4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800175c:	f7ff f810 	bl	8000780 <_ZN5MotorC1Ev>
inline Motor frontRightMotor;
 8001760:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	3301      	adds	r3, #1
 8001766:	4a1c      	ldr	r2, [pc, #112]	; (80017d8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b01      	cmp	r3, #1
 8001770:	bf0c      	ite	eq
 8001772:	2301      	moveq	r3, #1
 8001774:	2300      	movne	r3, #0
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b00      	cmp	r3, #0
 800177a:	d002      	beq.n	8001782 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 800177c:	4817      	ldr	r0, [pc, #92]	; (80017dc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800177e:	f7fe ffff 	bl	8000780 <_ZN5MotorC1Ev>
inline Motor backLeftMotor;
 8001782:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	3301      	adds	r3, #1
 8001788:	4a15      	ldr	r2, [pc, #84]	; (80017e0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b01      	cmp	r3, #1
 8001792:	bf0c      	ite	eq
 8001794:	2301      	moveq	r3, #1
 8001796:	2300      	movne	r3, #0
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d002      	beq.n	80017a4 <_Z41__static_initialization_and_destruction_0ii+0x80>
 800179e:	4811      	ldr	r0, [pc, #68]	; (80017e4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80017a0:	f7fe ffee 	bl	8000780 <_ZN5MotorC1Ev>
inline Motor backRightMotor;
 80017a4:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	3301      	adds	r3, #1
 80017aa:	4a0f      	ldr	r2, [pc, #60]	; (80017e8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	bf0c      	ite	eq
 80017b6:	2301      	moveq	r3, #1
 80017b8:	2300      	movne	r3, #0
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d002      	beq.n	80017c6 <_Z41__static_initialization_and_destruction_0ii+0xa2>
 80017c0:	480a      	ldr	r0, [pc, #40]	; (80017ec <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80017c2:	f7fe ffdd 	bl	8000780 <_ZN5MotorC1Ev>
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000480 	.word	0x20000480
 80017d4:	20000290 	.word	0x20000290
 80017d8:	20000484 	.word	0x20000484
 80017dc:	2000030c 	.word	0x2000030c
 80017e0:	20000488 	.word	0x20000488
 80017e4:	20000388 	.word	0x20000388
 80017e8:	2000048c 	.word	0x2000048c
 80017ec:	20000404 	.word	0x20000404

080017f0 <_GLOBAL__sub_I_hi2c1>:
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80017f8:	2001      	movs	r0, #1
 80017fa:	f7ff ff93 	bl	8001724 <_Z41__static_initialization_and_destruction_0ii>
 80017fe:	bd80      	pop	{r7, pc}

08001800 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <HAL_MspInit+0x5c>)
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	4a14      	ldr	r2, [pc, #80]	; (800185c <HAL_MspInit+0x5c>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6193      	str	r3, [r2, #24]
 8001812:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_MspInit+0x5c>)
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	4b0f      	ldr	r3, [pc, #60]	; (800185c <HAL_MspInit+0x5c>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	4a0e      	ldr	r2, [pc, #56]	; (800185c <HAL_MspInit+0x5c>)
 8001824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001828:	61d3      	str	r3, [r2, #28]
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <HAL_MspInit+0x5c>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001836:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <HAL_MspInit+0x60>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	4a04      	ldr	r2, [pc, #16]	; (8001860 <HAL_MspInit+0x60>)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001852:	bf00      	nop
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	40021000 	.word	0x40021000
 8001860:	40010000 	.word	0x40010000

08001864 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 0310 	add.w	r3, r7, #16
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a15      	ldr	r2, [pc, #84]	; (80018d4 <HAL_I2C_MspInit+0x70>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d123      	bne.n	80018cc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001884:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <HAL_I2C_MspInit+0x74>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	4a13      	ldr	r2, [pc, #76]	; (80018d8 <HAL_I2C_MspInit+0x74>)
 800188a:	f043 0308 	orr.w	r3, r3, #8
 800188e:	6193      	str	r3, [r2, #24]
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <HAL_I2C_MspInit+0x74>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800189c:	23c0      	movs	r3, #192	; 0xc0
 800189e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018a0:	2312      	movs	r3, #18
 80018a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a4:	2303      	movs	r3, #3
 80018a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a8:	f107 0310 	add.w	r3, r7, #16
 80018ac:	4619      	mov	r1, r3
 80018ae:	480b      	ldr	r0, [pc, #44]	; (80018dc <HAL_I2C_MspInit+0x78>)
 80018b0:	f000 fafa 	bl	8001ea8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <HAL_I2C_MspInit+0x74>)
 80018b6:	69db      	ldr	r3, [r3, #28]
 80018b8:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <HAL_I2C_MspInit+0x74>)
 80018ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018be:	61d3      	str	r3, [r2, #28]
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <HAL_I2C_MspInit+0x74>)
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018cc:	bf00      	nop
 80018ce:	3720      	adds	r7, #32
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40005400 	.word	0x40005400
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40010c00 	.word	0x40010c00

080018e0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a12      	ldr	r2, [pc, #72]	; (8001938 <HAL_TIM_PWM_MspInit+0x58>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d10c      	bne.n	800190c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018f2:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_TIM_PWM_MspInit+0x5c>)
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	4a11      	ldr	r2, [pc, #68]	; (800193c <HAL_TIM_PWM_MspInit+0x5c>)
 80018f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018fc:	6193      	str	r3, [r2, #24]
 80018fe:	4b0f      	ldr	r3, [pc, #60]	; (800193c <HAL_TIM_PWM_MspInit+0x5c>)
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800190a:	e010      	b.n	800192e <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a0b      	ldr	r2, [pc, #44]	; (8001940 <HAL_TIM_PWM_MspInit+0x60>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d10b      	bne.n	800192e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <HAL_TIM_PWM_MspInit+0x5c>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	4a08      	ldr	r2, [pc, #32]	; (800193c <HAL_TIM_PWM_MspInit+0x5c>)
 800191c:	f043 0302 	orr.w	r3, r3, #2
 8001920:	61d3      	str	r3, [r2, #28]
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_TIM_PWM_MspInit+0x5c>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
}
 800192e:	bf00      	nop
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr
 8001938:	40012c00 	.word	0x40012c00
 800193c:	40021000 	.word	0x40021000
 8001940:	40000400 	.word	0x40000400

08001944 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08a      	sub	sp, #40	; 0x28
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194c:	f107 0318 	add.w	r3, r7, #24
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a2b      	ldr	r2, [pc, #172]	; (8001a0c <HAL_TIM_MspPostInit+0xc8>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d119      	bne.n	8001998 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001964:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <HAL_TIM_MspPostInit+0xcc>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	4a29      	ldr	r2, [pc, #164]	; (8001a10 <HAL_TIM_MspPostInit+0xcc>)
 800196a:	f043 0304 	orr.w	r3, r3, #4
 800196e:	6193      	str	r3, [r2, #24]
 8001970:	4b27      	ldr	r3, [pc, #156]	; (8001a10 <HAL_TIM_MspPostInit+0xcc>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800197c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001982:	2302      	movs	r3, #2
 8001984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001986:	2302      	movs	r3, #2
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 0318 	add.w	r3, r7, #24
 800198e:	4619      	mov	r1, r3
 8001990:	4820      	ldr	r0, [pc, #128]	; (8001a14 <HAL_TIM_MspPostInit+0xd0>)
 8001992:	f000 fa89 	bl	8001ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001996:	e034      	b.n	8001a02 <HAL_TIM_MspPostInit+0xbe>
  else if(htim->Instance==TIM3)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a1e      	ldr	r2, [pc, #120]	; (8001a18 <HAL_TIM_MspPostInit+0xd4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d12f      	bne.n	8001a02 <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a2:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <HAL_TIM_MspPostInit+0xcc>)
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	4a1a      	ldr	r2, [pc, #104]	; (8001a10 <HAL_TIM_MspPostInit+0xcc>)
 80019a8:	f043 0304 	orr.w	r3, r3, #4
 80019ac:	6193      	str	r3, [r2, #24]
 80019ae:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <HAL_TIM_MspPostInit+0xcc>)
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <HAL_TIM_MspPostInit+0xcc>)
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	4a14      	ldr	r2, [pc, #80]	; (8001a10 <HAL_TIM_MspPostInit+0xcc>)
 80019c0:	f043 0308 	orr.w	r3, r3, #8
 80019c4:	6193      	str	r3, [r2, #24]
 80019c6:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_TIM_MspPostInit+0xcc>)
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019d2:	23c0      	movs	r3, #192	; 0xc0
 80019d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d6:	2302      	movs	r3, #2
 80019d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2302      	movs	r3, #2
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019de:	f107 0318 	add.w	r3, r7, #24
 80019e2:	4619      	mov	r1, r3
 80019e4:	480b      	ldr	r0, [pc, #44]	; (8001a14 <HAL_TIM_MspPostInit+0xd0>)
 80019e6:	f000 fa5f 	bl	8001ea8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019ea:	2302      	movs	r3, #2
 80019ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ee:	2302      	movs	r3, #2
 80019f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f2:	2302      	movs	r3, #2
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f6:	f107 0318 	add.w	r3, r7, #24
 80019fa:	4619      	mov	r1, r3
 80019fc:	4807      	ldr	r0, [pc, #28]	; (8001a1c <HAL_TIM_MspPostInit+0xd8>)
 80019fe:	f000 fa53 	bl	8001ea8 <HAL_GPIO_Init>
}
 8001a02:	bf00      	nop
 8001a04:	3728      	adds	r7, #40	; 0x28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40012c00 	.word	0x40012c00
 8001a10:	40021000 	.word	0x40021000
 8001a14:	40010800 	.word	0x40010800
 8001a18:	40000400 	.word	0x40000400
 8001a1c:	40010c00 	.word	0x40010c00

08001a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <NMI_Handler+0x4>

08001a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2a:	e7fe      	b.n	8001a2a <HardFault_Handler+0x4>

08001a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <MemManage_Handler+0x4>

08001a32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <BusFault_Handler+0x4>

08001a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <UsageFault_Handler+0x4>

08001a3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr

08001a4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr

08001a56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr

08001a62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a66:	f000 f8d1 	bl	8001c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001a72:	2001      	movs	r0, #1
 8001a74:	f000 fbb4 	bl	80021e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001a80:	2002      	movs	r0, #2
 8001a82:	f000 fbad 	bl	80021e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001a8e:	2004      	movs	r0, #4
 8001a90:	f000 fba6 	bl	80021e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001a9c:	2008      	movs	r0, #8
 8001a9e:	f000 fb9f 	bl	80021e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001aae:	f001 f967 	bl	8002d80 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200013ac 	.word	0x200013ac

08001abc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ac4:	4a14      	ldr	r2, [pc, #80]	; (8001b18 <_sbrk+0x5c>)
 8001ac6:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <_sbrk+0x60>)
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad0:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <_sbrk+0x64>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d102      	bne.n	8001ade <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <_sbrk+0x64>)
 8001ada:	4a12      	ldr	r2, [pc, #72]	; (8001b24 <_sbrk+0x68>)
 8001adc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ade:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <_sbrk+0x64>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d207      	bcs.n	8001afc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aec:	f007 ffa4 	bl	8009a38 <__errno>
 8001af0:	4603      	mov	r3, r0
 8001af2:	220c      	movs	r2, #12
 8001af4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001af6:	f04f 33ff 	mov.w	r3, #4294967295
 8001afa:	e009      	b.n	8001b10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <_sbrk+0x64>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b02:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <_sbrk+0x64>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	4a05      	ldr	r2, [pc, #20]	; (8001b20 <_sbrk+0x64>)
 8001b0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20005000 	.word	0x20005000
 8001b1c:	00000400 	.word	0x00000400
 8001b20:	200004e4 	.word	0x200004e4
 8001b24:	20001698 	.word	0x20001698

08001b28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b34:	f7ff fff8 	bl	8001b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b38:	480b      	ldr	r0, [pc, #44]	; (8001b68 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b3a:	490c      	ldr	r1, [pc, #48]	; (8001b6c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b3c:	4a0c      	ldr	r2, [pc, #48]	; (8001b70 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b40:	e002      	b.n	8001b48 <LoopCopyDataInit>

08001b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b46:	3304      	adds	r3, #4

08001b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b4c:	d3f9      	bcc.n	8001b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b4e:	4a09      	ldr	r2, [pc, #36]	; (8001b74 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b50:	4c09      	ldr	r4, [pc, #36]	; (8001b78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b54:	e001      	b.n	8001b5a <LoopFillZerobss>

08001b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b58:	3204      	adds	r2, #4

08001b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b5c:	d3fb      	bcc.n	8001b56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b5e:	f007 ff71 	bl	8009a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b62:	f7ff fad5 	bl	8001110 <main>
  bx lr
 8001b66:	4770      	bx	lr
  ldr r0, =_sdata
 8001b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b6c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001b70:	0800a440 	.word	0x0800a440
  ldr r2, =_sbss
 8001b74:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001b78:	20001694 	.word	0x20001694

08001b7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b7c:	e7fe      	b.n	8001b7c <ADC1_2_IRQHandler>
	...

08001b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b84:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <HAL_Init+0x28>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a07      	ldr	r2, [pc, #28]	; (8001ba8 <HAL_Init+0x28>)
 8001b8a:	f043 0310 	orr.w	r3, r3, #16
 8001b8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b90:	2003      	movs	r0, #3
 8001b92:	f000 f947 	bl	8001e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b96:	200f      	movs	r0, #15
 8001b98:	f000 f808 	bl	8001bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b9c:	f7ff fe30 	bl	8001800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40022000 	.word	0x40022000

08001bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_InitTick+0x54>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_InitTick+0x58>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 f95f 	bl	8001e8e <HAL_SYSTICK_Config>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00e      	b.n	8001bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b0f      	cmp	r3, #15
 8001bde:	d80a      	bhi.n	8001bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be0:	2200      	movs	r2, #0
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
 8001be8:	f000 f927 	bl	8001e3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bec:	4a06      	ldr	r2, [pc, #24]	; (8001c08 <HAL_InitTick+0x5c>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e000      	b.n	8001bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000004 	.word	0x20000004
 8001c04:	2000000c 	.word	0x2000000c
 8001c08:	20000008 	.word	0x20000008

08001c0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HAL_IncTick+0x1c>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_IncTick+0x20>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	4a03      	ldr	r2, [pc, #12]	; (8001c2c <HAL_IncTick+0x20>)
 8001c1e:	6013      	str	r3, [r2, #0]
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr
 8001c28:	2000000c 	.word	0x2000000c
 8001c2c:	20000714 	.word	0x20000714

08001c30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return uwTick;
 8001c34:	4b02      	ldr	r3, [pc, #8]	; (8001c40 <HAL_GetTick+0x10>)
 8001c36:	681b      	ldr	r3, [r3, #0]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr
 8001c40:	20000714 	.word	0x20000714

08001c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c4c:	f7ff fff0 	bl	8001c30 <HAL_GetTick>
 8001c50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c5c:	d005      	beq.n	8001c6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <HAL_Delay+0x44>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4413      	add	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c6a:	bf00      	nop
 8001c6c:	f7ff ffe0 	bl	8001c30 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d8f7      	bhi.n	8001c6c <HAL_Delay+0x28>
  {
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	2000000c 	.word	0x2000000c

08001c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ca8:	4013      	ands	r3, r2
 8001caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cbe:	4a04      	ldr	r2, [pc, #16]	; (8001cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	60d3      	str	r3, [r2, #12]
}
 8001cc4:	bf00      	nop
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd8:	4b04      	ldr	r3, [pc, #16]	; (8001cec <__NVIC_GetPriorityGrouping+0x18>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	0a1b      	lsrs	r3, r3, #8
 8001cde:	f003 0307 	and.w	r3, r3, #7
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	db0b      	blt.n	8001d1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	f003 021f 	and.w	r2, r3, #31
 8001d08:	4906      	ldr	r1, [pc, #24]	; (8001d24 <__NVIC_EnableIRQ+0x34>)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	095b      	lsrs	r3, r3, #5
 8001d10:	2001      	movs	r0, #1
 8001d12:	fa00 f202 	lsl.w	r2, r0, r2
 8001d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr
 8001d24:	e000e100 	.word	0xe000e100

08001d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	6039      	str	r1, [r7, #0]
 8001d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	db0a      	blt.n	8001d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	490c      	ldr	r1, [pc, #48]	; (8001d74 <__NVIC_SetPriority+0x4c>)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	0112      	lsls	r2, r2, #4
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d50:	e00a      	b.n	8001d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4908      	ldr	r1, [pc, #32]	; (8001d78 <__NVIC_SetPriority+0x50>)
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	3b04      	subs	r3, #4
 8001d60:	0112      	lsls	r2, r2, #4
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	440b      	add	r3, r1
 8001d66:	761a      	strb	r2, [r3, #24]
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e000e100 	.word	0xe000e100
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b089      	sub	sp, #36	; 0x24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f1c3 0307 	rsb	r3, r3, #7
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	bf28      	it	cs
 8001d9a:	2304      	movcs	r3, #4
 8001d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3304      	adds	r3, #4
 8001da2:	2b06      	cmp	r3, #6
 8001da4:	d902      	bls.n	8001dac <NVIC_EncodePriority+0x30>
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	3b03      	subs	r3, #3
 8001daa:	e000      	b.n	8001dae <NVIC_EncodePriority+0x32>
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db0:	f04f 32ff 	mov.w	r2, #4294967295
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43da      	mvns	r2, r3
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	fa01 f303 	lsl.w	r3, r1, r3
 8001dce:	43d9      	mvns	r1, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd4:	4313      	orrs	r3, r2
         );
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3724      	adds	r7, #36	; 0x24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr

08001de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001df0:	d301      	bcc.n	8001df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001df2:	2301      	movs	r3, #1
 8001df4:	e00f      	b.n	8001e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001df6:	4a0a      	ldr	r2, [pc, #40]	; (8001e20 <SysTick_Config+0x40>)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dfe:	210f      	movs	r1, #15
 8001e00:	f04f 30ff 	mov.w	r0, #4294967295
 8001e04:	f7ff ff90 	bl	8001d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <SysTick_Config+0x40>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e0e:	4b04      	ldr	r3, [pc, #16]	; (8001e20 <SysTick_Config+0x40>)
 8001e10:	2207      	movs	r2, #7
 8001e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	e000e010 	.word	0xe000e010

08001e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff ff2d 	bl	8001c8c <__NVIC_SetPriorityGrouping>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b086      	sub	sp, #24
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	4603      	mov	r3, r0
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
 8001e46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e4c:	f7ff ff42 	bl	8001cd4 <__NVIC_GetPriorityGrouping>
 8001e50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	68b9      	ldr	r1, [r7, #8]
 8001e56:	6978      	ldr	r0, [r7, #20]
 8001e58:	f7ff ff90 	bl	8001d7c <NVIC_EncodePriority>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e62:	4611      	mov	r1, r2
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ff5f 	bl	8001d28 <__NVIC_SetPriority>
}
 8001e6a:	bf00      	nop
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	4603      	mov	r3, r0
 8001e7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff ff35 	bl	8001cf0 <__NVIC_EnableIRQ>
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff ffa2 	bl	8001de0 <SysTick_Config>
 8001e9c:	4603      	mov	r3, r0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b08b      	sub	sp, #44	; 0x2c
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eba:	e169      	b.n	8002190 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	69fa      	ldr	r2, [r7, #28]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	f040 8158 	bne.w	800218a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	4a9a      	ldr	r2, [pc, #616]	; (8002148 <HAL_GPIO_Init+0x2a0>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d05e      	beq.n	8001fa2 <HAL_GPIO_Init+0xfa>
 8001ee4:	4a98      	ldr	r2, [pc, #608]	; (8002148 <HAL_GPIO_Init+0x2a0>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d875      	bhi.n	8001fd6 <HAL_GPIO_Init+0x12e>
 8001eea:	4a98      	ldr	r2, [pc, #608]	; (800214c <HAL_GPIO_Init+0x2a4>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d058      	beq.n	8001fa2 <HAL_GPIO_Init+0xfa>
 8001ef0:	4a96      	ldr	r2, [pc, #600]	; (800214c <HAL_GPIO_Init+0x2a4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d86f      	bhi.n	8001fd6 <HAL_GPIO_Init+0x12e>
 8001ef6:	4a96      	ldr	r2, [pc, #600]	; (8002150 <HAL_GPIO_Init+0x2a8>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d052      	beq.n	8001fa2 <HAL_GPIO_Init+0xfa>
 8001efc:	4a94      	ldr	r2, [pc, #592]	; (8002150 <HAL_GPIO_Init+0x2a8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d869      	bhi.n	8001fd6 <HAL_GPIO_Init+0x12e>
 8001f02:	4a94      	ldr	r2, [pc, #592]	; (8002154 <HAL_GPIO_Init+0x2ac>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d04c      	beq.n	8001fa2 <HAL_GPIO_Init+0xfa>
 8001f08:	4a92      	ldr	r2, [pc, #584]	; (8002154 <HAL_GPIO_Init+0x2ac>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d863      	bhi.n	8001fd6 <HAL_GPIO_Init+0x12e>
 8001f0e:	4a92      	ldr	r2, [pc, #584]	; (8002158 <HAL_GPIO_Init+0x2b0>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d046      	beq.n	8001fa2 <HAL_GPIO_Init+0xfa>
 8001f14:	4a90      	ldr	r2, [pc, #576]	; (8002158 <HAL_GPIO_Init+0x2b0>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d85d      	bhi.n	8001fd6 <HAL_GPIO_Init+0x12e>
 8001f1a:	2b12      	cmp	r3, #18
 8001f1c:	d82a      	bhi.n	8001f74 <HAL_GPIO_Init+0xcc>
 8001f1e:	2b12      	cmp	r3, #18
 8001f20:	d859      	bhi.n	8001fd6 <HAL_GPIO_Init+0x12e>
 8001f22:	a201      	add	r2, pc, #4	; (adr r2, 8001f28 <HAL_GPIO_Init+0x80>)
 8001f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f28:	08001fa3 	.word	0x08001fa3
 8001f2c:	08001f7d 	.word	0x08001f7d
 8001f30:	08001f8f 	.word	0x08001f8f
 8001f34:	08001fd1 	.word	0x08001fd1
 8001f38:	08001fd7 	.word	0x08001fd7
 8001f3c:	08001fd7 	.word	0x08001fd7
 8001f40:	08001fd7 	.word	0x08001fd7
 8001f44:	08001fd7 	.word	0x08001fd7
 8001f48:	08001fd7 	.word	0x08001fd7
 8001f4c:	08001fd7 	.word	0x08001fd7
 8001f50:	08001fd7 	.word	0x08001fd7
 8001f54:	08001fd7 	.word	0x08001fd7
 8001f58:	08001fd7 	.word	0x08001fd7
 8001f5c:	08001fd7 	.word	0x08001fd7
 8001f60:	08001fd7 	.word	0x08001fd7
 8001f64:	08001fd7 	.word	0x08001fd7
 8001f68:	08001fd7 	.word	0x08001fd7
 8001f6c:	08001f85 	.word	0x08001f85
 8001f70:	08001f99 	.word	0x08001f99
 8001f74:	4a79      	ldr	r2, [pc, #484]	; (800215c <HAL_GPIO_Init+0x2b4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d013      	beq.n	8001fa2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f7a:	e02c      	b.n	8001fd6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	623b      	str	r3, [r7, #32]
          break;
 8001f82:	e029      	b.n	8001fd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	3304      	adds	r3, #4
 8001f8a:	623b      	str	r3, [r7, #32]
          break;
 8001f8c:	e024      	b.n	8001fd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	3308      	adds	r3, #8
 8001f94:	623b      	str	r3, [r7, #32]
          break;
 8001f96:	e01f      	b.n	8001fd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	330c      	adds	r3, #12
 8001f9e:	623b      	str	r3, [r7, #32]
          break;
 8001fa0:	e01a      	b.n	8001fd8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d102      	bne.n	8001fb0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001faa:	2304      	movs	r3, #4
 8001fac:	623b      	str	r3, [r7, #32]
          break;
 8001fae:	e013      	b.n	8001fd8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d105      	bne.n	8001fc4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fb8:	2308      	movs	r3, #8
 8001fba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69fa      	ldr	r2, [r7, #28]
 8001fc0:	611a      	str	r2, [r3, #16]
          break;
 8001fc2:	e009      	b.n	8001fd8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fc4:	2308      	movs	r3, #8
 8001fc6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69fa      	ldr	r2, [r7, #28]
 8001fcc:	615a      	str	r2, [r3, #20]
          break;
 8001fce:	e003      	b.n	8001fd8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	623b      	str	r3, [r7, #32]
          break;
 8001fd4:	e000      	b.n	8001fd8 <HAL_GPIO_Init+0x130>
          break;
 8001fd6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	2bff      	cmp	r3, #255	; 0xff
 8001fdc:	d801      	bhi.n	8001fe2 <HAL_GPIO_Init+0x13a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	e001      	b.n	8001fe6 <HAL_GPIO_Init+0x13e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	2bff      	cmp	r3, #255	; 0xff
 8001fec:	d802      	bhi.n	8001ff4 <HAL_GPIO_Init+0x14c>
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	e002      	b.n	8001ffa <HAL_GPIO_Init+0x152>
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	3b08      	subs	r3, #8
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	210f      	movs	r1, #15
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	fa01 f303 	lsl.w	r3, r1, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	401a      	ands	r2, r3
 800200c:	6a39      	ldr	r1, [r7, #32]
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	fa01 f303 	lsl.w	r3, r1, r3
 8002014:	431a      	orrs	r2, r3
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 80b1 	beq.w	800218a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002028:	4b4d      	ldr	r3, [pc, #308]	; (8002160 <HAL_GPIO_Init+0x2b8>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	4a4c      	ldr	r2, [pc, #304]	; (8002160 <HAL_GPIO_Init+0x2b8>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6193      	str	r3, [r2, #24]
 8002034:	4b4a      	ldr	r3, [pc, #296]	; (8002160 <HAL_GPIO_Init+0x2b8>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002040:	4a48      	ldr	r2, [pc, #288]	; (8002164 <HAL_GPIO_Init+0x2bc>)
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	089b      	lsrs	r3, r3, #2
 8002046:	3302      	adds	r3, #2
 8002048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	f003 0303 	and.w	r3, r3, #3
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	220f      	movs	r2, #15
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	4013      	ands	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a40      	ldr	r2, [pc, #256]	; (8002168 <HAL_GPIO_Init+0x2c0>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d013      	beq.n	8002094 <HAL_GPIO_Init+0x1ec>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a3f      	ldr	r2, [pc, #252]	; (800216c <HAL_GPIO_Init+0x2c4>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d00d      	beq.n	8002090 <HAL_GPIO_Init+0x1e8>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a3e      	ldr	r2, [pc, #248]	; (8002170 <HAL_GPIO_Init+0x2c8>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d007      	beq.n	800208c <HAL_GPIO_Init+0x1e4>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a3d      	ldr	r2, [pc, #244]	; (8002174 <HAL_GPIO_Init+0x2cc>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d101      	bne.n	8002088 <HAL_GPIO_Init+0x1e0>
 8002084:	2303      	movs	r3, #3
 8002086:	e006      	b.n	8002096 <HAL_GPIO_Init+0x1ee>
 8002088:	2304      	movs	r3, #4
 800208a:	e004      	b.n	8002096 <HAL_GPIO_Init+0x1ee>
 800208c:	2302      	movs	r3, #2
 800208e:	e002      	b.n	8002096 <HAL_GPIO_Init+0x1ee>
 8002090:	2301      	movs	r3, #1
 8002092:	e000      	b.n	8002096 <HAL_GPIO_Init+0x1ee>
 8002094:	2300      	movs	r3, #0
 8002096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002098:	f002 0203 	and.w	r2, r2, #3
 800209c:	0092      	lsls	r2, r2, #2
 800209e:	4093      	lsls	r3, r2
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020a6:	492f      	ldr	r1, [pc, #188]	; (8002164 <HAL_GPIO_Init+0x2bc>)
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	089b      	lsrs	r3, r3, #2
 80020ac:	3302      	adds	r3, #2
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d006      	beq.n	80020ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020c0:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <HAL_GPIO_Init+0x2d0>)
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	492c      	ldr	r1, [pc, #176]	; (8002178 <HAL_GPIO_Init+0x2d0>)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	608b      	str	r3, [r1, #8]
 80020cc:	e006      	b.n	80020dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020ce:	4b2a      	ldr	r3, [pc, #168]	; (8002178 <HAL_GPIO_Init+0x2d0>)
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	4928      	ldr	r1, [pc, #160]	; (8002178 <HAL_GPIO_Init+0x2d0>)
 80020d8:	4013      	ands	r3, r2
 80020da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d006      	beq.n	80020f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020e8:	4b23      	ldr	r3, [pc, #140]	; (8002178 <HAL_GPIO_Init+0x2d0>)
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	4922      	ldr	r1, [pc, #136]	; (8002178 <HAL_GPIO_Init+0x2d0>)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	60cb      	str	r3, [r1, #12]
 80020f4:	e006      	b.n	8002104 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020f6:	4b20      	ldr	r3, [pc, #128]	; (8002178 <HAL_GPIO_Init+0x2d0>)
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	491e      	ldr	r1, [pc, #120]	; (8002178 <HAL_GPIO_Init+0x2d0>)
 8002100:	4013      	ands	r3, r2
 8002102:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d006      	beq.n	800211e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002110:	4b19      	ldr	r3, [pc, #100]	; (8002178 <HAL_GPIO_Init+0x2d0>)
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	4918      	ldr	r1, [pc, #96]	; (8002178 <HAL_GPIO_Init+0x2d0>)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	4313      	orrs	r3, r2
 800211a:	604b      	str	r3, [r1, #4]
 800211c:	e006      	b.n	800212c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800211e:	4b16      	ldr	r3, [pc, #88]	; (8002178 <HAL_GPIO_Init+0x2d0>)
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	43db      	mvns	r3, r3
 8002126:	4914      	ldr	r1, [pc, #80]	; (8002178 <HAL_GPIO_Init+0x2d0>)
 8002128:	4013      	ands	r3, r2
 800212a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d021      	beq.n	800217c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002138:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <HAL_GPIO_Init+0x2d0>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	490e      	ldr	r1, [pc, #56]	; (8002178 <HAL_GPIO_Init+0x2d0>)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	4313      	orrs	r3, r2
 8002142:	600b      	str	r3, [r1, #0]
 8002144:	e021      	b.n	800218a <HAL_GPIO_Init+0x2e2>
 8002146:	bf00      	nop
 8002148:	10320000 	.word	0x10320000
 800214c:	10310000 	.word	0x10310000
 8002150:	10220000 	.word	0x10220000
 8002154:	10210000 	.word	0x10210000
 8002158:	10120000 	.word	0x10120000
 800215c:	10110000 	.word	0x10110000
 8002160:	40021000 	.word	0x40021000
 8002164:	40010000 	.word	0x40010000
 8002168:	40010800 	.word	0x40010800
 800216c:	40010c00 	.word	0x40010c00
 8002170:	40011000 	.word	0x40011000
 8002174:	40011400 	.word	0x40011400
 8002178:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <HAL_GPIO_Init+0x304>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	43db      	mvns	r3, r3
 8002184:	4909      	ldr	r1, [pc, #36]	; (80021ac <HAL_GPIO_Init+0x304>)
 8002186:	4013      	ands	r3, r2
 8002188:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	3301      	adds	r3, #1
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	fa22 f303 	lsr.w	r3, r2, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	f47f ae8e 	bne.w	8001ebc <HAL_GPIO_Init+0x14>
  }
}
 80021a0:	bf00      	nop
 80021a2:	bf00      	nop
 80021a4:	372c      	adds	r7, #44	; 0x2c
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr
 80021ac:	40010400 	.word	0x40010400

080021b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	807b      	strh	r3, [r7, #2]
 80021bc:	4613      	mov	r3, r2
 80021be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021c0:	787b      	ldrb	r3, [r7, #1]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021c6:	887a      	ldrh	r2, [r7, #2]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021cc:	e003      	b.n	80021d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021ce:	887b      	ldrh	r3, [r7, #2]
 80021d0:	041a      	lsls	r2, r3, #16
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	611a      	str	r2, [r3, #16]
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021ea:	4b08      	ldr	r3, [pc, #32]	; (800220c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021ec:	695a      	ldr	r2, [r3, #20]
 80021ee:	88fb      	ldrh	r3, [r7, #6]
 80021f0:	4013      	ands	r3, r2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d006      	beq.n	8002204 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021f6:	4a05      	ldr	r2, [pc, #20]	; (800220c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021f8:	88fb      	ldrh	r3, [r7, #6]
 80021fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021fc:	88fb      	ldrh	r3, [r7, #6]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7fe ff4e 	bl	80010a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002204:	bf00      	nop
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40010400 	.word	0x40010400

08002210 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e12b      	b.n	800247a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d106      	bne.n	800223c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff fb14 	bl	8001864 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2224      	movs	r2, #36	; 0x24
 8002240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0201 	bic.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002262:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002272:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002274:	f002 fd94 	bl	8004da0 <HAL_RCC_GetPCLK1Freq>
 8002278:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	4a81      	ldr	r2, [pc, #516]	; (8002484 <HAL_I2C_Init+0x274>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d807      	bhi.n	8002294 <HAL_I2C_Init+0x84>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4a80      	ldr	r2, [pc, #512]	; (8002488 <HAL_I2C_Init+0x278>)
 8002288:	4293      	cmp	r3, r2
 800228a:	bf94      	ite	ls
 800228c:	2301      	movls	r3, #1
 800228e:	2300      	movhi	r3, #0
 8002290:	b2db      	uxtb	r3, r3
 8002292:	e006      	b.n	80022a2 <HAL_I2C_Init+0x92>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4a7d      	ldr	r2, [pc, #500]	; (800248c <HAL_I2C_Init+0x27c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	bf94      	ite	ls
 800229c:	2301      	movls	r3, #1
 800229e:	2300      	movhi	r3, #0
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e0e7      	b.n	800247a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	4a78      	ldr	r2, [pc, #480]	; (8002490 <HAL_I2C_Init+0x280>)
 80022ae:	fba2 2303 	umull	r2, r3, r2, r3
 80022b2:	0c9b      	lsrs	r3, r3, #18
 80022b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	4a6a      	ldr	r2, [pc, #424]	; (8002484 <HAL_I2C_Init+0x274>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d802      	bhi.n	80022e4 <HAL_I2C_Init+0xd4>
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	3301      	adds	r3, #1
 80022e2:	e009      	b.n	80022f8 <HAL_I2C_Init+0xe8>
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022ea:	fb02 f303 	mul.w	r3, r2, r3
 80022ee:	4a69      	ldr	r2, [pc, #420]	; (8002494 <HAL_I2C_Init+0x284>)
 80022f0:	fba2 2303 	umull	r2, r3, r2, r3
 80022f4:	099b      	lsrs	r3, r3, #6
 80022f6:	3301      	adds	r3, #1
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	430b      	orrs	r3, r1
 80022fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800230a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	495c      	ldr	r1, [pc, #368]	; (8002484 <HAL_I2C_Init+0x274>)
 8002314:	428b      	cmp	r3, r1
 8002316:	d819      	bhi.n	800234c <HAL_I2C_Init+0x13c>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	1e59      	subs	r1, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	fbb1 f3f3 	udiv	r3, r1, r3
 8002326:	1c59      	adds	r1, r3, #1
 8002328:	f640 73fc 	movw	r3, #4092	; 0xffc
 800232c:	400b      	ands	r3, r1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00a      	beq.n	8002348 <HAL_I2C_Init+0x138>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	1e59      	subs	r1, r3, #1
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002340:	3301      	adds	r3, #1
 8002342:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002346:	e051      	b.n	80023ec <HAL_I2C_Init+0x1dc>
 8002348:	2304      	movs	r3, #4
 800234a:	e04f      	b.n	80023ec <HAL_I2C_Init+0x1dc>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d111      	bne.n	8002378 <HAL_I2C_Init+0x168>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	1e58      	subs	r0, r3, #1
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6859      	ldr	r1, [r3, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	440b      	add	r3, r1
 8002362:	fbb0 f3f3 	udiv	r3, r0, r3
 8002366:	3301      	adds	r3, #1
 8002368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800236c:	2b00      	cmp	r3, #0
 800236e:	bf0c      	ite	eq
 8002370:	2301      	moveq	r3, #1
 8002372:	2300      	movne	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	e012      	b.n	800239e <HAL_I2C_Init+0x18e>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1e58      	subs	r0, r3, #1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6859      	ldr	r1, [r3, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	0099      	lsls	r1, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	fbb0 f3f3 	udiv	r3, r0, r3
 800238e:	3301      	adds	r3, #1
 8002390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002394:	2b00      	cmp	r3, #0
 8002396:	bf0c      	ite	eq
 8002398:	2301      	moveq	r3, #1
 800239a:	2300      	movne	r3, #0
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_I2C_Init+0x196>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e022      	b.n	80023ec <HAL_I2C_Init+0x1dc>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10e      	bne.n	80023cc <HAL_I2C_Init+0x1bc>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	1e58      	subs	r0, r3, #1
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6859      	ldr	r1, [r3, #4]
 80023b6:	460b      	mov	r3, r1
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	440b      	add	r3, r1
 80023bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80023c0:	3301      	adds	r3, #1
 80023c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ca:	e00f      	b.n	80023ec <HAL_I2C_Init+0x1dc>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	1e58      	subs	r0, r3, #1
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6859      	ldr	r1, [r3, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	0099      	lsls	r1, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	fbb0 f3f3 	udiv	r3, r0, r3
 80023e2:	3301      	adds	r3, #1
 80023e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	6809      	ldr	r1, [r1, #0]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69da      	ldr	r2, [r3, #28]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800241a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6911      	ldr	r1, [r2, #16]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	68d2      	ldr	r2, [r2, #12]
 8002426:	4311      	orrs	r1, r2
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6812      	ldr	r2, [r2, #0]
 800242c:	430b      	orrs	r3, r1
 800242e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	695a      	ldr	r2, [r3, #20]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	430a      	orrs	r2, r1
 800244a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 0201 	orr.w	r2, r2, #1
 800245a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2220      	movs	r2, #32
 8002466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	000186a0 	.word	0x000186a0
 8002488:	001e847f 	.word	0x001e847f
 800248c:	003d08ff 	.word	0x003d08ff
 8002490:	431bde83 	.word	0x431bde83
 8002494:	10624dd3 	.word	0x10624dd3

08002498 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af02      	add	r7, sp, #8
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	607a      	str	r2, [r7, #4]
 80024a2:	461a      	mov	r2, r3
 80024a4:	460b      	mov	r3, r1
 80024a6:	817b      	strh	r3, [r7, #10]
 80024a8:	4613      	mov	r3, r2
 80024aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024ac:	f7ff fbc0 	bl	8001c30 <HAL_GetTick>
 80024b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b20      	cmp	r3, #32
 80024bc:	f040 80e0 	bne.w	8002680 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	2319      	movs	r3, #25
 80024c6:	2201      	movs	r2, #1
 80024c8:	4970      	ldr	r1, [pc, #448]	; (800268c <HAL_I2C_Master_Transmit+0x1f4>)
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 f964 	bl	8002798 <I2C_WaitOnFlagUntilTimeout>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80024d6:	2302      	movs	r3, #2
 80024d8:	e0d3      	b.n	8002682 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_I2C_Master_Transmit+0x50>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e0cc      	b.n	8002682 <HAL_I2C_Master_Transmit+0x1ea>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d007      	beq.n	800250e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f042 0201 	orr.w	r2, r2, #1
 800250c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800251c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2221      	movs	r2, #33	; 0x21
 8002522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2210      	movs	r2, #16
 800252a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	893a      	ldrh	r2, [r7, #8]
 800253e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002544:	b29a      	uxth	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	4a50      	ldr	r2, [pc, #320]	; (8002690 <HAL_I2C_Master_Transmit+0x1f8>)
 800254e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002550:	8979      	ldrh	r1, [r7, #10]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	6a3a      	ldr	r2, [r7, #32]
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 f89c 	bl	8002694 <I2C_MasterRequestWrite>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e08d      	b.n	8002682 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800257c:	e066      	b.n	800264c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	6a39      	ldr	r1, [r7, #32]
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 fa22 	bl	80029cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00d      	beq.n	80025aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	2b04      	cmp	r3, #4
 8002594:	d107      	bne.n	80025a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e06b      	b.n	8002682 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	781a      	ldrb	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	1c5a      	adds	r2, r3, #1
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d11b      	bne.n	8002620 <HAL_I2C_Master_Transmit+0x188>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d017      	beq.n	8002620 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	781a      	ldrb	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	1c5a      	adds	r2, r3, #1
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260a:	b29b      	uxth	r3, r3
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002618:	3b01      	subs	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	6a39      	ldr	r1, [r7, #32]
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 fa19 	bl	8002a5c <I2C_WaitOnBTFFlagUntilTimeout>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00d      	beq.n	800264c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	2b04      	cmp	r3, #4
 8002636:	d107      	bne.n	8002648 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002646:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e01a      	b.n	8002682 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002650:	2b00      	cmp	r3, #0
 8002652:	d194      	bne.n	800257e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002662:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2220      	movs	r2, #32
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	e000      	b.n	8002682 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002680:	2302      	movs	r3, #2
  }
}
 8002682:	4618      	mov	r0, r3
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	00100002 	.word	0x00100002
 8002690:	ffff0000 	.word	0xffff0000

08002694 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b088      	sub	sp, #32
 8002698:	af02      	add	r7, sp, #8
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	607a      	str	r2, [r7, #4]
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	460b      	mov	r3, r1
 80026a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d006      	beq.n	80026be <I2C_MasterRequestWrite+0x2a>
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d003      	beq.n	80026be <I2C_MasterRequestWrite+0x2a>
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026bc:	d108      	bne.n	80026d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	e00b      	b.n	80026e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d4:	2b12      	cmp	r3, #18
 80026d6:	d107      	bne.n	80026e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 f84f 	bl	8002798 <I2C_WaitOnFlagUntilTimeout>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00d      	beq.n	800271c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800270e:	d103      	bne.n	8002718 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002716:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e035      	b.n	8002788 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002724:	d108      	bne.n	8002738 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002726:	897b      	ldrh	r3, [r7, #10]
 8002728:	b2db      	uxtb	r3, r3
 800272a:	461a      	mov	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002734:	611a      	str	r2, [r3, #16]
 8002736:	e01b      	b.n	8002770 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002738:	897b      	ldrh	r3, [r7, #10]
 800273a:	11db      	asrs	r3, r3, #7
 800273c:	b2db      	uxtb	r3, r3
 800273e:	f003 0306 	and.w	r3, r3, #6
 8002742:	b2db      	uxtb	r3, r3
 8002744:	f063 030f 	orn	r3, r3, #15
 8002748:	b2da      	uxtb	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	490e      	ldr	r1, [pc, #56]	; (8002790 <I2C_MasterRequestWrite+0xfc>)
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 f898 	bl	800288c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e010      	b.n	8002788 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002766:	897b      	ldrh	r3, [r7, #10]
 8002768:	b2da      	uxtb	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	4907      	ldr	r1, [pc, #28]	; (8002794 <I2C_MasterRequestWrite+0x100>)
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 f888 	bl	800288c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3718      	adds	r7, #24
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	00010008 	.word	0x00010008
 8002794:	00010002 	.word	0x00010002

08002798 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	4613      	mov	r3, r2
 80027a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027a8:	e048      	b.n	800283c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b0:	d044      	beq.n	800283c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027b2:	f7ff fa3d 	bl	8001c30 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d302      	bcc.n	80027c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d139      	bne.n	800283c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	0c1b      	lsrs	r3, r3, #16
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d10d      	bne.n	80027ee <I2C_WaitOnFlagUntilTimeout+0x56>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	43da      	mvns	r2, r3
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	4013      	ands	r3, r2
 80027de:	b29b      	uxth	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	bf0c      	ite	eq
 80027e4:	2301      	moveq	r3, #1
 80027e6:	2300      	movne	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	461a      	mov	r2, r3
 80027ec:	e00c      	b.n	8002808 <I2C_WaitOnFlagUntilTimeout+0x70>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	43da      	mvns	r2, r3
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	4013      	ands	r3, r2
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	bf0c      	ite	eq
 8002800:	2301      	moveq	r3, #1
 8002802:	2300      	movne	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	429a      	cmp	r2, r3
 800280c:	d116      	bne.n	800283c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2220      	movs	r2, #32
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	f043 0220 	orr.w	r2, r3, #32
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e023      	b.n	8002884 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	0c1b      	lsrs	r3, r3, #16
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b01      	cmp	r3, #1
 8002844:	d10d      	bne.n	8002862 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	43da      	mvns	r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	4013      	ands	r3, r2
 8002852:	b29b      	uxth	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	bf0c      	ite	eq
 8002858:	2301      	moveq	r3, #1
 800285a:	2300      	movne	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	461a      	mov	r2, r3
 8002860:	e00c      	b.n	800287c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	43da      	mvns	r2, r3
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	4013      	ands	r3, r2
 800286e:	b29b      	uxth	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	bf0c      	ite	eq
 8002874:	2301      	moveq	r3, #1
 8002876:	2300      	movne	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	461a      	mov	r2, r3
 800287c:	79fb      	ldrb	r3, [r7, #7]
 800287e:	429a      	cmp	r2, r3
 8002880:	d093      	beq.n	80027aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
 8002898:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800289a:	e071      	b.n	8002980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028aa:	d123      	bne.n	80028f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2220      	movs	r2, #32
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	f043 0204 	orr.w	r2, r3, #4
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e067      	b.n	80029c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fa:	d041      	beq.n	8002980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028fc:	f7ff f998 	bl	8001c30 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	429a      	cmp	r2, r3
 800290a:	d302      	bcc.n	8002912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d136      	bne.n	8002980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	0c1b      	lsrs	r3, r3, #16
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b01      	cmp	r3, #1
 800291a:	d10c      	bne.n	8002936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	43da      	mvns	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	4013      	ands	r3, r2
 8002928:	b29b      	uxth	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	bf14      	ite	ne
 800292e:	2301      	movne	r3, #1
 8002930:	2300      	moveq	r3, #0
 8002932:	b2db      	uxtb	r3, r3
 8002934:	e00b      	b.n	800294e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	43da      	mvns	r2, r3
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	4013      	ands	r3, r2
 8002942:	b29b      	uxth	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	bf14      	ite	ne
 8002948:	2301      	movne	r3, #1
 800294a:	2300      	moveq	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d016      	beq.n	8002980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	f043 0220 	orr.w	r2, r3, #32
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e021      	b.n	80029c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	0c1b      	lsrs	r3, r3, #16
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b01      	cmp	r3, #1
 8002988:	d10c      	bne.n	80029a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	43da      	mvns	r2, r3
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	4013      	ands	r3, r2
 8002996:	b29b      	uxth	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	bf14      	ite	ne
 800299c:	2301      	movne	r3, #1
 800299e:	2300      	moveq	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	e00b      	b.n	80029bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	43da      	mvns	r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	4013      	ands	r3, r2
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	bf14      	ite	ne
 80029b6:	2301      	movne	r3, #1
 80029b8:	2300      	moveq	r3, #0
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f47f af6d 	bne.w	800289c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029d8:	e034      	b.n	8002a44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f886 	bl	8002aec <I2C_IsAcknowledgeFailed>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e034      	b.n	8002a54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f0:	d028      	beq.n	8002a44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029f2:	f7ff f91d 	bl	8001c30 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d302      	bcc.n	8002a08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d11d      	bne.n	8002a44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a12:	2b80      	cmp	r3, #128	; 0x80
 8002a14:	d016      	beq.n	8002a44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	f043 0220 	orr.w	r2, r3, #32
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e007      	b.n	8002a54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4e:	2b80      	cmp	r3, #128	; 0x80
 8002a50:	d1c3      	bne.n	80029da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a68:	e034      	b.n	8002ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 f83e 	bl	8002aec <I2C_IsAcknowledgeFailed>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e034      	b.n	8002ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a80:	d028      	beq.n	8002ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a82:	f7ff f8d5 	bl	8001c30 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d302      	bcc.n	8002a98 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d11d      	bne.n	8002ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d016      	beq.n	8002ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	f043 0220 	orr.w	r2, r3, #32
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e007      	b.n	8002ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	f003 0304 	and.w	r3, r3, #4
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d1c3      	bne.n	8002a6a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b02:	d11b      	bne.n	8002b3c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b0c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	f043 0204 	orr.w	r2, r3, #4
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e000      	b.n	8002b3e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr

08002b48 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e0e8      	b.n	8002d2c <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d106      	bne.n	8002b74 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f006 fcb8 	bl	80094e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2203      	movs	r2, #3
 8002b78:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f002 fe92 	bl	80058b0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6818      	ldr	r0, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3304      	adds	r3, #4
 8002b94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b96:	f002 fe68 	bl	800586a <USB_CoreInit>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d005      	beq.n	8002bac <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e0bf      	b.n	8002d2c <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f002 fe96 	bl	80058e4 <USB_SetCurrentMode>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d005      	beq.n	8002bca <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e0b0      	b.n	8002d2c <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bca:	2300      	movs	r3, #0
 8002bcc:	73fb      	strb	r3, [r7, #15]
 8002bce:	e03e      	b.n	8002c4e <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bd0:	7bfa      	ldrb	r2, [r7, #15]
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	440b      	add	r3, r1
 8002bde:	3311      	adds	r3, #17
 8002be0:	2201      	movs	r2, #1
 8002be2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002be4:	7bfa      	ldrb	r2, [r7, #15]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	440b      	add	r3, r1
 8002bf2:	3310      	adds	r3, #16
 8002bf4:	7bfa      	ldrb	r2, [r7, #15]
 8002bf6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bf8:	7bfa      	ldrb	r2, [r7, #15]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	440b      	add	r3, r1
 8002c06:	3313      	adds	r3, #19
 8002c08:	2200      	movs	r2, #0
 8002c0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c0c:	7bfa      	ldrb	r2, [r7, #15]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	440b      	add	r3, r1
 8002c1a:	3320      	adds	r3, #32
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c20:	7bfa      	ldrb	r2, [r7, #15]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	440b      	add	r3, r1
 8002c2e:	3324      	adds	r3, #36	; 0x24
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	440b      	add	r3, r1
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	73fb      	strb	r3, [r7, #15]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	791b      	ldrb	r3, [r3, #4]
 8002c52:	7bfa      	ldrb	r2, [r7, #15]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d3bb      	bcc.n	8002bd0 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c58:	2300      	movs	r3, #0
 8002c5a:	73fb      	strb	r3, [r7, #15]
 8002c5c:	e044      	b.n	8002ce8 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c5e:	7bfa      	ldrb	r2, [r7, #15]
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	440b      	add	r3, r1
 8002c6c:	f203 1351 	addw	r3, r3, #337	; 0x151
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c74:	7bfa      	ldrb	r2, [r7, #15]
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	440b      	add	r3, r1
 8002c82:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002c86:	7bfa      	ldrb	r2, [r7, #15]
 8002c88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c8a:	7bfa      	ldrb	r2, [r7, #15]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	440b      	add	r3, r1
 8002c98:	f203 1353 	addw	r3, r3, #339	; 0x153
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ca0:	7bfa      	ldrb	r2, [r7, #15]
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	440b      	add	r3, r1
 8002cae:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cb6:	7bfa      	ldrb	r2, [r7, #15]
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	440b      	add	r3, r1
 8002cc4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ccc:	7bfa      	ldrb	r2, [r7, #15]
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	440b      	add	r3, r1
 8002cda:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	73fb      	strb	r3, [r7, #15]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	791b      	ldrb	r3, [r3, #4]
 8002cec:	7bfa      	ldrb	r2, [r7, #15]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d3b5      	bcc.n	8002c5e <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6818      	ldr	r0, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cfc:	f002 fdfe 	bl	80058fc <USB_DevInit>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d005      	beq.n	8002d12 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2202      	movs	r2, #2
 8002d0a:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e00c      	b.n	8002d2c <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f004 fe19 	bl	800795c <USB_DevDisconnect>

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d101      	bne.n	8002d4a <HAL_PCD_Start+0x16>
 8002d46:	2302      	movs	r3, #2
 8002d48:	e016      	b.n	8002d78 <HAL_PCD_Start+0x44>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f002 fd94 	bl	8005884 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f006 fe33 	bl	80099ca <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f004 fded 	bl	8007948 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b088      	sub	sp, #32
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f004 fdef 	bl	8007970 <USB_ReadInterrupts>
 8002d92:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 fb1c 	bl	80033dc <PCD_EP_ISR_Handler>

    return;
 8002da4:	e11b      	b.n	8002fde <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d013      	beq.n	8002dd8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dc2:	b292      	uxth	r2, r2
 8002dc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f006 fc06 	bl	80095da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002dce:	2100      	movs	r1, #0
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f907 	bl	8002fe4 <HAL_PCD_SetAddress>

    return;
 8002dd6:	e102      	b.n	8002fde <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00c      	beq.n	8002dfc <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002df4:	b292      	uxth	r2, r2
 8002df6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002dfa:	e0f0      	b.n	8002fde <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00c      	beq.n	8002e20 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e18:	b292      	uxth	r2, r2
 8002e1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002e1e:	e0de      	b.n	8002fde <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d027      	beq.n	8002e7a <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0204 	bic.w	r2, r2, #4
 8002e3c:	b292      	uxth	r2, r2
 8002e3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0208 	bic.w	r2, r2, #8
 8002e54:	b292      	uxth	r2, r2
 8002e56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f006 fbf6 	bl	800964c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e72:	b292      	uxth	r2, r2
 8002e74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002e78:	e0b1      	b.n	8002fde <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 8085 	beq.w	8002f90 <HAL_PCD_IRQHandler+0x210>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002e86:	2300      	movs	r3, #0
 8002e88:	77fb      	strb	r3, [r7, #31]
 8002e8a:	e011      	b.n	8002eb0 <HAL_PCD_IRQHandler+0x130>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	461a      	mov	r2, r3
 8002e92:	7ffb      	ldrb	r3, [r7, #31]
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	441a      	add	r2, r3
 8002e98:	7ffb      	ldrb	r3, [r7, #31]
 8002e9a:	8812      	ldrh	r2, [r2, #0]
 8002e9c:	b292      	uxth	r2, r2
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	f107 0120 	add.w	r1, r7, #32
 8002ea4:	440b      	add	r3, r1
 8002ea6:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002eaa:	7ffb      	ldrb	r3, [r7, #31]
 8002eac:	3301      	adds	r3, #1
 8002eae:	77fb      	strb	r3, [r7, #31]
 8002eb0:	7ffb      	ldrb	r3, [r7, #31]
 8002eb2:	2b07      	cmp	r3, #7
 8002eb4:	d9ea      	bls.n	8002e8c <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f042 0201 	orr.w	r2, r2, #1
 8002ec8:	b292      	uxth	r2, r2
 8002eca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0201 	bic.w	r2, r2, #1
 8002ee0:	b292      	uxth	r2, r2
 8002ee2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002ee6:	bf00      	nop
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f6      	beq.n	8002ee8 <HAL_PCD_IRQHandler+0x168>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f0c:	b292      	uxth	r2, r2
 8002f0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002f12:	2300      	movs	r3, #0
 8002f14:	77fb      	strb	r3, [r7, #31]
 8002f16:	e010      	b.n	8002f3a <HAL_PCD_IRQHandler+0x1ba>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002f18:	7ffb      	ldrb	r3, [r7, #31]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	4611      	mov	r1, r2
 8002f20:	7ffa      	ldrb	r2, [r7, #31]
 8002f22:	0092      	lsls	r2, r2, #2
 8002f24:	440a      	add	r2, r1
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	f107 0120 	add.w	r1, r7, #32
 8002f2c:	440b      	add	r3, r1
 8002f2e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002f32:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002f34:	7ffb      	ldrb	r3, [r7, #31]
 8002f36:	3301      	adds	r3, #1
 8002f38:	77fb      	strb	r3, [r7, #31]
 8002f3a:	7ffb      	ldrb	r3, [r7, #31]
 8002f3c:	2b07      	cmp	r3, #7
 8002f3e:	d9eb      	bls.n	8002f18 <HAL_PCD_IRQHandler+0x198>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0208 	orr.w	r2, r2, #8
 8002f52:	b292      	uxth	r2, r2
 8002f54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f6a:	b292      	uxth	r2, r2
 8002f6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0204 	orr.w	r2, r2, #4
 8002f82:	b292      	uxth	r2, r2
 8002f84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f006 fb45 	bl	8009618 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002f8e:	e026      	b.n	8002fde <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00f      	beq.n	8002fba <HAL_PCD_IRQHandler+0x23a>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fac:	b292      	uxth	r2, r2
 8002fae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f006 fb03 	bl	80095be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002fb8:	e011      	b.n	8002fde <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00c      	beq.n	8002fde <HAL_PCD_IRQHandler+0x25e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fd6:	b292      	uxth	r2, r2
 8002fd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002fdc:	bf00      	nop
  }
}
 8002fde:	3720      	adds	r7, #32
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	460b      	mov	r3, r1
 8002fee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d101      	bne.n	8002ffe <HAL_PCD_SetAddress+0x1a>
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	e012      	b.n	8003024 <HAL_PCD_SetAddress+0x40>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	78fa      	ldrb	r2, [r7, #3]
 800300a:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	78fa      	ldrb	r2, [r7, #3]
 8003012:	4611      	mov	r1, r2
 8003014:	4618      	mov	r0, r3
 8003016:	f004 fc84 	bl	8007922 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	4608      	mov	r0, r1
 8003036:	4611      	mov	r1, r2
 8003038:	461a      	mov	r2, r3
 800303a:	4603      	mov	r3, r0
 800303c:	70fb      	strb	r3, [r7, #3]
 800303e:	460b      	mov	r3, r1
 8003040:	803b      	strh	r3, [r7, #0]
 8003042:	4613      	mov	r3, r2
 8003044:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800304a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800304e:	2b00      	cmp	r3, #0
 8003050:	da0e      	bge.n	8003070 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003052:	78fb      	ldrb	r3, [r7, #3]
 8003054:	f003 0207 	and.w	r2, r3, #7
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	3310      	adds	r3, #16
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	4413      	add	r3, r2
 8003066:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2201      	movs	r2, #1
 800306c:	705a      	strb	r2, [r3, #1]
 800306e:	e00e      	b.n	800308e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003070:	78fb      	ldrb	r3, [r7, #3]
 8003072:	f003 0207 	and.w	r2, r3, #7
 8003076:	4613      	mov	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	4413      	add	r3, r2
 8003086:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800308e:	78fb      	ldrb	r3, [r7, #3]
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	b2da      	uxtb	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800309a:	883a      	ldrh	r2, [r7, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	78ba      	ldrb	r2, [r7, #2]
 80030a4:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80030a6:	78bb      	ldrb	r3, [r7, #2]
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d102      	bne.n	80030b2 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_PCD_EP_Open+0x94>
 80030bc:	2302      	movs	r3, #2
 80030be:	e00e      	b.n	80030de <HAL_PCD_EP_Open+0xb2>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68f9      	ldr	r1, [r7, #12]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f002 fc32 	bl	8005938 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 80030dc:	7afb      	ldrb	r3, [r7, #11]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b084      	sub	sp, #16
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
 80030ee:	460b      	mov	r3, r1
 80030f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	da0e      	bge.n	8003118 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030fa:	78fb      	ldrb	r3, [r7, #3]
 80030fc:	f003 0207 	and.w	r2, r3, #7
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	3310      	adds	r3, #16
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	4413      	add	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2201      	movs	r2, #1
 8003114:	705a      	strb	r2, [r3, #1]
 8003116:	e00e      	b.n	8003136 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003118:	78fb      	ldrb	r3, [r7, #3]
 800311a:	f003 0207 	and.w	r2, r3, #7
 800311e:	4613      	mov	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	4413      	add	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003136:	78fb      	ldrb	r3, [r7, #3]
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	b2da      	uxtb	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003148:	2b01      	cmp	r3, #1
 800314a:	d101      	bne.n	8003150 <HAL_PCD_EP_Close+0x6a>
 800314c:	2302      	movs	r3, #2
 800314e:	e00e      	b.n	800316e <HAL_PCD_EP_Close+0x88>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68f9      	ldr	r1, [r7, #12]
 800315e:	4618      	mov	r0, r3
 8003160:	f002 ffaa 	bl	80060b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b086      	sub	sp, #24
 800317a:	af00      	add	r7, sp, #0
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	603b      	str	r3, [r7, #0]
 8003182:	460b      	mov	r3, r1
 8003184:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003186:	7afb      	ldrb	r3, [r7, #11]
 8003188:	f003 0207 	and.w	r2, r3, #7
 800318c:	4613      	mov	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	4413      	add	r3, r2
 800319c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	2200      	movs	r2, #0
 80031ae:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2200      	movs	r2, #0
 80031b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031b6:	7afb      	ldrb	r3, [r7, #11]
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6979      	ldr	r1, [r7, #20]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f003 f961 	bl	8006490 <USB_EPStartXfer>

  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80031e4:	78fb      	ldrb	r3, [r7, #3]
 80031e6:	f003 0207 	and.w	r2, r3, #7
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	440b      	add	r3, r1
 80031f6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80031fa:	681b      	ldr	r3, [r3, #0]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	bc80      	pop	{r7}
 8003204:	4770      	bx	lr

08003206 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b086      	sub	sp, #24
 800320a:	af00      	add	r7, sp, #0
 800320c:	60f8      	str	r0, [r7, #12]
 800320e:	607a      	str	r2, [r7, #4]
 8003210:	603b      	str	r3, [r7, #0]
 8003212:	460b      	mov	r3, r1
 8003214:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003216:	7afb      	ldrb	r3, [r7, #11]
 8003218:	f003 0207 	and.w	r2, r3, #7
 800321c:	4613      	mov	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	3310      	adds	r3, #16
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	4413      	add	r3, r2
 800322a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	2200      	movs	r2, #0
 800324a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	2201      	movs	r2, #1
 8003250:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003252:	7afb      	ldrb	r3, [r7, #11]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	b2da      	uxtb	r2, r3
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6979      	ldr	r1, [r7, #20]
 8003264:	4618      	mov	r0, r3
 8003266:	f003 f913 	bl	8006490 <USB_EPStartXfer>

  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	460b      	mov	r3, r1
 800327e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	7912      	ldrb	r2, [r2, #4]
 800328a:	4293      	cmp	r3, r2
 800328c:	d901      	bls.n	8003292 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e04c      	b.n	800332c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003292:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003296:	2b00      	cmp	r3, #0
 8003298:	da0e      	bge.n	80032b8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800329a:	78fb      	ldrb	r3, [r7, #3]
 800329c:	f003 0207 	and.w	r2, r3, #7
 80032a0:	4613      	mov	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	3310      	adds	r3, #16
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	4413      	add	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2201      	movs	r2, #1
 80032b4:	705a      	strb	r2, [r3, #1]
 80032b6:	e00c      	b.n	80032d2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	4413      	add	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2201      	movs	r2, #1
 80032d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032d8:	78fb      	ldrb	r3, [r7, #3]
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d101      	bne.n	80032f2 <HAL_PCD_EP_SetStall+0x7e>
 80032ee:	2302      	movs	r3, #2
 80032f0:	e01c      	b.n	800332c <HAL_PCD_EP_SetStall+0xb8>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68f9      	ldr	r1, [r7, #12]
 8003300:	4618      	mov	r0, r3
 8003302:	f004 fa11 	bl	8007728 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003306:	78fb      	ldrb	r3, [r7, #3]
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	2b00      	cmp	r3, #0
 800330e:	d108      	bne.n	8003322 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800331a:	4619      	mov	r1, r3
 800331c:	4610      	mov	r0, r2
 800331e:	f004 fb36 	bl	800798e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	460b      	mov	r3, r1
 800333e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	7912      	ldrb	r2, [r2, #4]
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e040      	b.n	80033d4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003352:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003356:	2b00      	cmp	r3, #0
 8003358:	da0e      	bge.n	8003378 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800335a:	78fb      	ldrb	r3, [r7, #3]
 800335c:	f003 0207 	and.w	r2, r3, #7
 8003360:	4613      	mov	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	3310      	adds	r3, #16
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	4413      	add	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2201      	movs	r2, #1
 8003374:	705a      	strb	r2, [r3, #1]
 8003376:	e00e      	b.n	8003396 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003378:	78fb      	ldrb	r3, [r7, #3]
 800337a:	f003 0207 	and.w	r2, r3, #7
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	4413      	add	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800339c:	78fb      	ldrb	r3, [r7, #3]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d101      	bne.n	80033b6 <HAL_PCD_EP_ClrStall+0x82>
 80033b2:	2302      	movs	r3, #2
 80033b4:	e00e      	b.n	80033d4 <HAL_PCD_EP_ClrStall+0xa0>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68f9      	ldr	r1, [r7, #12]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f004 f9ff 	bl	80077c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b096      	sub	sp, #88	; 0x58
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80033e4:	e3bc      	b.n	8003b60 <PCD_EP_ISR_Handler+0x784>
  {
    wIstr = hpcd->Instance->ISTR;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033ee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80033f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	f003 030f 	and.w	r3, r3, #15
 80033fc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8003400:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003404:	2b00      	cmp	r3, #0
 8003406:	f040 8176 	bne.w	80036f6 <PCD_EP_ISR_Handler+0x31a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800340a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	2b00      	cmp	r3, #0
 8003414:	d14f      	bne.n	80034b6 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	881b      	ldrh	r3, [r3, #0]
 800341c:	b29b      	uxth	r3, r3
 800341e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003426:	81fb      	strh	r3, [r7, #14]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	89fb      	ldrh	r3, [r7, #14]
 800342e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003436:	b29b      	uxth	r3, r3
 8003438:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	3310      	adds	r3, #16
 800343e:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003448:	b29b      	uxth	r3, r3
 800344a:	461a      	mov	r2, r3
 800344c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	4413      	add	r3, r2
 8003454:	3302      	adds	r3, #2
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6812      	ldr	r2, [r2, #0]
 800345c:	4413      	add	r3, r2
 800345e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800346a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800346c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800346e:	695a      	ldr	r2, [r3, #20]
 8003470:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	441a      	add	r2, r3
 8003476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003478:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800347a:	2100      	movs	r1, #0
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f006 f884 	bl	800958a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	7b5b      	ldrb	r3, [r3, #13]
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 8369 	beq.w	8003b60 <PCD_EP_ISR_Handler+0x784>
 800348e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	2b00      	cmp	r3, #0
 8003494:	f040 8364 	bne.w	8003b60 <PCD_EP_ISR_Handler+0x784>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	7b5b      	ldrb	r3, [r3, #13]
 800349c:	b2db      	uxtb	r3, r3
 800349e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034a2:	b2da      	uxtb	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	b292      	uxth	r2, r2
 80034aa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	735a      	strb	r2, [r3, #13]
 80034b4:	e354      	b.n	8003b60 <PCD_EP_ISR_Handler+0x784>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80034bc:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80034c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80034cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d034      	beq.n	800353e <PCD_EP_ISR_Handler+0x162>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034dc:	b29b      	uxth	r3, r3
 80034de:	461a      	mov	r2, r3
 80034e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	4413      	add	r3, r2
 80034e8:	3306      	adds	r3, #6
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6812      	ldr	r2, [r2, #0]
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034f6:	881b      	ldrh	r3, [r3, #0]
 80034f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034fe:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6818      	ldr	r0, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f503 7126 	add.w	r1, r3, #664	; 0x298
 800350a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800350c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800350e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003510:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003512:	b29b      	uxth	r3, r3
 8003514:	f004 fa8b 	bl	8007a2e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	b29a      	uxth	r2, r3
 8003520:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003524:	4013      	ands	r3, r2
 8003526:	823b      	strh	r3, [r7, #16]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	8a3a      	ldrh	r2, [r7, #16]
 800352e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003532:	b292      	uxth	r2, r2
 8003534:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f005 fffa 	bl	8009530 <HAL_PCD_SetupStageCallback>
 800353c:	e310      	b.n	8003b60 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800353e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003542:	2b00      	cmp	r3, #0
 8003544:	f280 830c 	bge.w	8003b60 <PCD_EP_ISR_Handler+0x784>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	b29a      	uxth	r2, r3
 8003550:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003554:	4013      	ands	r3, r2
 8003556:	83fb      	strh	r3, [r7, #30]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	8bfa      	ldrh	r2, [r7, #30]
 800355e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003562:	b292      	uxth	r2, r2
 8003564:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800356e:	b29b      	uxth	r3, r3
 8003570:	461a      	mov	r2, r3
 8003572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	4413      	add	r3, r2
 800357a:	3306      	adds	r3, #6
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	6812      	ldr	r2, [r2, #0]
 8003582:	4413      	add	r3, r2
 8003584:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800358e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003590:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d019      	beq.n	80035ce <PCD_EP_ISR_Handler+0x1f2>
 800359a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d015      	beq.n	80035ce <PCD_EP_ISR_Handler+0x1f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6818      	ldr	r0, [r3, #0]
 80035a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a8:	6959      	ldr	r1, [r3, #20]
 80035aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ac:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80035ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035b0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	f004 fa3b 	bl	8007a2e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80035b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ba:	695a      	ldr	r2, [r3, #20]
 80035bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	441a      	add	r2, r3
 80035c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035c4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80035c6:	2100      	movs	r1, #0
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f005 ffc3 	bl	8009554 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	881b      	ldrh	r3, [r3, #0]
 80035d4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80035d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80035dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f040 82bd 	bne.w	8003b60 <PCD_EP_ISR_Handler+0x784>
 80035e6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80035ea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80035ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80035f2:	f000 82b5 	beq.w	8003b60 <PCD_EP_ISR_Handler+0x784>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	61bb      	str	r3, [r7, #24]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003604:	b29b      	uxth	r3, r3
 8003606:	461a      	mov	r2, r3
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	4413      	add	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	881b      	ldrh	r3, [r3, #0]
 800361a:	b29b      	uxth	r3, r3
 800361c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003620:	b29a      	uxth	r2, r3
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	801a      	strh	r2, [r3, #0]
 8003626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	2b3e      	cmp	r3, #62	; 0x3e
 800362c:	d91d      	bls.n	800366a <PCD_EP_ISR_Handler+0x28e>
 800362e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	095b      	lsrs	r3, r3, #5
 8003634:	647b      	str	r3, [r7, #68]	; 0x44
 8003636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	f003 031f 	and.w	r3, r3, #31
 800363e:	2b00      	cmp	r3, #0
 8003640:	d102      	bne.n	8003648 <PCD_EP_ISR_Handler+0x26c>
 8003642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003644:	3b01      	subs	r3, #1
 8003646:	647b      	str	r3, [r7, #68]	; 0x44
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	b29a      	uxth	r2, r3
 800364e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003650:	b29b      	uxth	r3, r3
 8003652:	029b      	lsls	r3, r3, #10
 8003654:	b29b      	uxth	r3, r3
 8003656:	4313      	orrs	r3, r2
 8003658:	b29b      	uxth	r3, r3
 800365a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800365e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003662:	b29a      	uxth	r2, r3
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	801a      	strh	r2, [r3, #0]
 8003668:	e026      	b.n	80036b8 <PCD_EP_ISR_Handler+0x2dc>
 800366a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10a      	bne.n	8003688 <PCD_EP_ISR_Handler+0x2ac>
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	b29b      	uxth	r3, r3
 8003678:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800367c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003680:	b29a      	uxth	r2, r3
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	801a      	strh	r2, [r3, #0]
 8003686:	e017      	b.n	80036b8 <PCD_EP_ISR_Handler+0x2dc>
 8003688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	085b      	lsrs	r3, r3, #1
 800368e:	647b      	str	r3, [r7, #68]	; 0x44
 8003690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <PCD_EP_ISR_Handler+0x2c6>
 800369c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800369e:	3301      	adds	r3, #1
 80036a0:	647b      	str	r3, [r7, #68]	; 0x44
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	029b      	lsls	r3, r3, #10
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	4313      	orrs	r3, r2
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	b29b      	uxth	r3, r3
 80036c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c8:	827b      	strh	r3, [r7, #18]
 80036ca:	8a7b      	ldrh	r3, [r7, #18]
 80036cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80036d0:	827b      	strh	r3, [r7, #18]
 80036d2:	8a7b      	ldrh	r3, [r7, #18]
 80036d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80036d8:	827b      	strh	r3, [r7, #18]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	8a7b      	ldrh	r3, [r7, #18]
 80036e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	8013      	strh	r3, [r2, #0]
 80036f4:	e234      	b.n	8003b60 <PCD_EP_ISR_Handler+0x784>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800370a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800370e:	2b00      	cmp	r3, #0
 8003710:	f280 80fc 	bge.w	800390c <PCD_EP_ISR_Handler+0x530>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	461a      	mov	r2, r3
 800371a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	b29a      	uxth	r2, r3
 8003726:	f640 738f 	movw	r3, #3983	; 0xf8f
 800372a:	4013      	ands	r3, r2
 800372c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	461a      	mov	r2, r3
 8003736:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003742:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003746:	b292      	uxth	r2, r2
 8003748:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800374a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800374e:	4613      	mov	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4413      	add	r3, r2
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	4413      	add	r3, r2
 800375e:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003760:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003762:	7b1b      	ldrb	r3, [r3, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d125      	bne.n	80037b4 <PCD_EP_ISR_Handler+0x3d8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003770:	b29b      	uxth	r3, r3
 8003772:	461a      	mov	r2, r3
 8003774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4413      	add	r3, r2
 800377c:	3306      	adds	r3, #6
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6812      	ldr	r2, [r2, #0]
 8003784:	4413      	add	r3, r2
 8003786:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003790:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8003794:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 8092 	beq.w	80038c2 <PCD_EP_ISR_Handler+0x4e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6818      	ldr	r0, [r3, #0]
 80037a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a4:	6959      	ldr	r1, [r3, #20]
 80037a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a8:	88da      	ldrh	r2, [r3, #6]
 80037aa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80037ae:	f004 f93e 	bl	8007a2e <USB_ReadPMA>
 80037b2:	e086      	b.n	80038c2 <PCD_EP_ISR_Handler+0x4e6>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80037b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037b6:	78db      	ldrb	r3, [r3, #3]
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d10a      	bne.n	80037d2 <PCD_EP_ISR_Handler+0x3f6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80037bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80037c0:	461a      	mov	r2, r3
 80037c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f9d9 	bl	8003b7c <HAL_PCD_EP_DB_Receive>
 80037ca:	4603      	mov	r3, r0
 80037cc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80037d0:	e077      	b.n	80038c2 <PCD_EP_ISR_Handler+0x4e6>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	461a      	mov	r2, r3
 80037d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ec:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	461a      	mov	r2, r3
 80037f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	441a      	add	r2, r3
 80037fe:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003802:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003806:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800380a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800380e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003812:	b29b      	uxth	r3, r3
 8003814:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	461a      	mov	r2, r3
 800381c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	b29b      	uxth	r3, r3
 8003828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d024      	beq.n	800387a <PCD_EP_ISR_Handler+0x49e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003838:	b29b      	uxth	r3, r3
 800383a:	461a      	mov	r2, r3
 800383c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	4413      	add	r3, r2
 8003844:	3302      	adds	r3, #2
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	4413      	add	r3, r2
 800384e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003852:	881b      	ldrh	r3, [r3, #0]
 8003854:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003858:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800385c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003860:	2b00      	cmp	r3, #0
 8003862:	d02e      	beq.n	80038c2 <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6818      	ldr	r0, [r3, #0]
 8003868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800386a:	6959      	ldr	r1, [r3, #20]
 800386c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800386e:	891a      	ldrh	r2, [r3, #8]
 8003870:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003874:	f004 f8db 	bl	8007a2e <USB_ReadPMA>
 8003878:	e023      	b.n	80038c2 <PCD_EP_ISR_Handler+0x4e6>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003882:	b29b      	uxth	r3, r3
 8003884:	461a      	mov	r2, r3
 8003886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4413      	add	r3, r2
 800388e:	3306      	adds	r3, #6
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6812      	ldr	r2, [r2, #0]
 8003896:	4413      	add	r3, r2
 8003898:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800389c:	881b      	ldrh	r3, [r3, #0]
 800389e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038a2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80038a6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d009      	beq.n	80038c2 <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6818      	ldr	r0, [r3, #0]
 80038b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038b4:	6959      	ldr	r1, [r3, #20]
 80038b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038b8:	895a      	ldrh	r2, [r3, #10]
 80038ba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038be:	f004 f8b6 	bl	8007a2e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80038c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038c4:	69da      	ldr	r2, [r3, #28]
 80038c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038ca:	441a      	add	r2, r3
 80038cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038ce:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80038d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038d2:	695a      	ldr	r2, [r3, #20]
 80038d4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038d8:	441a      	add	r2, r3
 80038da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038dc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80038de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d005      	beq.n	80038f2 <PCD_EP_ISR_Handler+0x516>
 80038e6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80038ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d206      	bcs.n	8003900 <PCD_EP_ISR_Handler+0x524>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80038f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	4619      	mov	r1, r3
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f005 fe2b 	bl	8009554 <HAL_PCD_DataOutStageCallback>
 80038fe:	e005      	b.n	800390c <PCD_EP_ISR_Handler+0x530>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003906:	4618      	mov	r0, r3
 8003908:	f002 fdc2 	bl	8006490 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800390c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 8123 	beq.w	8003b60 <PCD_EP_ISR_Handler+0x784>
      {
        ep = &hpcd->IN_ep[epindex];
 800391a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800391e:	4613      	mov	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	3310      	adds	r3, #16
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	4413      	add	r3, r2
 800392c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	461a      	mov	r2, r3
 8003934:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	b29b      	uxth	r3, r3
 8003940:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003948:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	461a      	mov	r2, r3
 8003952:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	441a      	add	r2, r3
 800395a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800395e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003962:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003966:	b29b      	uxth	r3, r3
 8003968:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800396a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800396c:	78db      	ldrb	r3, [r3, #3]
 800396e:	2b01      	cmp	r3, #1
 8003970:	f040 80a2 	bne.w	8003ab8 <PCD_EP_ISR_Handler+0x6dc>
        {
          ep->xfer_len = 0U;
 8003974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003976:	2200      	movs	r2, #0
 8003978:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800397a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800397c:	7b1b      	ldrb	r3, [r3, #12]
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 8093 	beq.w	8003aaa <PCD_EP_ISR_Handler+0x6ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003984:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398c:	2b00      	cmp	r3, #0
 800398e:	d046      	beq.n	8003a1e <PCD_EP_ISR_Handler+0x642>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003992:	785b      	ldrb	r3, [r3, #1]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d126      	bne.n	80039e6 <PCD_EP_ISR_Handler+0x60a>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	461a      	mov	r2, r3
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	4413      	add	r3, r2
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
 80039b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	011a      	lsls	r2, r3, #4
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	4413      	add	r3, r2
 80039ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039be:	623b      	str	r3, [r7, #32]
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	881b      	ldrh	r3, [r3, #0]
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	801a      	strh	r2, [r3, #0]
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	881b      	ldrh	r3, [r3, #0]
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039de:	b29a      	uxth	r2, r3
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	801a      	strh	r2, [r3, #0]
 80039e4:	e061      	b.n	8003aaa <PCD_EP_ISR_Handler+0x6ce>
 80039e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039e8:	785b      	ldrb	r3, [r3, #1]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d15d      	bne.n	8003aaa <PCD_EP_ISR_Handler+0x6ce>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	461a      	mov	r2, r3
 8003a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a02:	4413      	add	r3, r2
 8003a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	011a      	lsls	r2, r3, #4
 8003a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0e:	4413      	add	r3, r2
 8003a10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a14:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a18:	2200      	movs	r2, #0
 8003a1a:	801a      	strh	r2, [r3, #0]
 8003a1c:	e045      	b.n	8003aaa <PCD_EP_ISR_Handler+0x6ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a26:	785b      	ldrb	r3, [r3, #1]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d126      	bne.n	8003a7a <PCD_EP_ISR_Handler+0x69e>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	637b      	str	r3, [r7, #52]	; 0x34
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a40:	4413      	add	r3, r2
 8003a42:	637b      	str	r3, [r7, #52]	; 0x34
 8003a44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	011a      	lsls	r2, r3, #4
 8003a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a52:	633b      	str	r3, [r7, #48]	; 0x30
 8003a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a56:	881b      	ldrh	r3, [r3, #0]
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a62:	801a      	strh	r2, [r3, #0]
 8003a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a66:	881b      	ldrh	r3, [r3, #0]
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a76:	801a      	strh	r2, [r3, #0]
 8003a78:	e017      	b.n	8003aaa <PCD_EP_ISR_Handler+0x6ce>
 8003a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a7c:	785b      	ldrb	r3, [r3, #1]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d113      	bne.n	8003aaa <PCD_EP_ISR_Handler+0x6ce>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a90:	4413      	add	r3, r2
 8003a92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	011a      	lsls	r2, r3, #4
 8003a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003aa2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	4619      	mov	r1, r3
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f005 fd6a 	bl	800958a <HAL_PCD_DataInStageCallback>
 8003ab6:	e053      	b.n	8003b60 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003ab8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d146      	bne.n	8003b52 <PCD_EP_ISR_Handler+0x776>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	461a      	mov	r2, r3
 8003ad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	4413      	add	r3, r2
 8003ad8:	3302      	adds	r3, #2
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6812      	ldr	r2, [r2, #0]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ae6:	881b      	ldrh	r3, [r3, #0]
 8003ae8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003aec:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003af2:	699a      	ldr	r2, [r3, #24]
 8003af4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d907      	bls.n	8003b0c <PCD_EP_ISR_Handler+0x730>
            {
              ep->xfer_len -= TxPctSize;
 8003afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003afe:	699a      	ldr	r2, [r3, #24]
 8003b00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b04:	1ad2      	subs	r2, r2, r3
 8003b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b08:	619a      	str	r2, [r3, #24]
 8003b0a:	e002      	b.n	8003b12 <PCD_EP_ISR_Handler+0x736>
            }
            else
            {
              ep->xfer_len = 0U;
 8003b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b0e:	2200      	movs	r2, #0
 8003b10:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003b12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d106      	bne.n	8003b28 <PCD_EP_ISR_Handler+0x74c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	4619      	mov	r1, r3
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f005 fd32 	bl	800958a <HAL_PCD_DataInStageCallback>
 8003b26:	e01b      	b.n	8003b60 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b2a:	695a      	ldr	r2, [r3, #20]
 8003b2c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b30:	441a      	add	r2, r3
 8003b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b34:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b38:	69da      	ldr	r2, [r3, #28]
 8003b3a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b3e:	441a      	add	r2, r3
 8003b40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b42:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f002 fca0 	bl	8006490 <USB_EPStartXfer>
 8003b50:	e006      	b.n	8003b60 <PCD_EP_ISR_Handler+0x784>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003b52:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003b56:	461a      	mov	r2, r3
 8003b58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f91b 	bl	8003d96 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	b21b      	sxth	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f6ff ac3a 	blt.w	80033e6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3758      	adds	r7, #88	; 0x58
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	4613      	mov	r3, r2
 8003b88:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b8a:	88fb      	ldrh	r3, [r7, #6]
 8003b8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d07e      	beq.n	8003c92 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3302      	adds	r3, #2
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	6812      	ldr	r2, [r2, #0]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bbc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	699a      	ldr	r2, [r3, #24]
 8003bc2:	8b7b      	ldrh	r3, [r7, #26]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d306      	bcc.n	8003bd6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	699a      	ldr	r2, [r3, #24]
 8003bcc:	8b7b      	ldrh	r3, [r7, #26]
 8003bce:	1ad2      	subs	r2, r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	619a      	str	r2, [r3, #24]
 8003bd4:	e002      	b.n	8003bdc <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d123      	bne.n	8003c2c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	461a      	mov	r2, r3
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	881b      	ldrh	r3, [r3, #0]
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfe:	833b      	strh	r3, [r7, #24]
 8003c00:	8b3b      	ldrh	r3, [r7, #24]
 8003c02:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c06:	833b      	strh	r3, [r7, #24]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	441a      	add	r2, r3
 8003c16:	8b3b      	ldrh	r3, [r7, #24]
 8003c18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c2c:	88fb      	ldrh	r3, [r7, #6]
 8003c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d01f      	beq.n	8003c76 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c50:	82fb      	strh	r3, [r7, #22]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	461a      	mov	r2, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	441a      	add	r2, r3
 8003c60:	8afb      	ldrh	r3, [r7, #22]
 8003c62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c6e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c76:	8b7b      	ldrh	r3, [r7, #26]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 8087 	beq.w	8003d8c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	6959      	ldr	r1, [r3, #20]
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	891a      	ldrh	r2, [r3, #8]
 8003c8a:	8b7b      	ldrh	r3, [r7, #26]
 8003c8c:	f003 fecf 	bl	8007a2e <USB_ReadPMA>
 8003c90:	e07c      	b.n	8003d8c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	4413      	add	r3, r2
 8003ca6:	3306      	adds	r3, #6
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	6812      	ldr	r2, [r2, #0]
 8003cae:	4413      	add	r3, r2
 8003cb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cba:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	699a      	ldr	r2, [r3, #24]
 8003cc0:	8b7b      	ldrh	r3, [r7, #26]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d306      	bcc.n	8003cd4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	699a      	ldr	r2, [r3, #24]
 8003cca:	8b7b      	ldrh	r3, [r7, #26]
 8003ccc:	1ad2      	subs	r2, r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	619a      	str	r2, [r3, #24]
 8003cd2:	e002      	b.n	8003cda <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d123      	bne.n	8003d2a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	4413      	add	r3, r2
 8003cf0:	881b      	ldrh	r3, [r3, #0]
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cfc:	83fb      	strh	r3, [r7, #30]
 8003cfe:	8bfb      	ldrh	r3, [r7, #30]
 8003d00:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d04:	83fb      	strh	r3, [r7, #30]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	441a      	add	r2, r3
 8003d14:	8bfb      	ldrh	r3, [r7, #30]
 8003d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003d2a:	88fb      	ldrh	r3, [r7, #6]
 8003d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d11f      	bne.n	8003d74 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	461a      	mov	r2, r3
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	881b      	ldrh	r3, [r3, #0]
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d4e:	83bb      	strh	r3, [r7, #28]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	461a      	mov	r2, r3
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	441a      	add	r2, r3
 8003d5e:	8bbb      	ldrh	r3, [r7, #28]
 8003d60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003d74:	8b7b      	ldrh	r3, [r7, #26]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d008      	beq.n	8003d8c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6818      	ldr	r0, [r3, #0]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	6959      	ldr	r1, [r3, #20]
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	895a      	ldrh	r2, [r3, #10]
 8003d86:	8b7b      	ldrh	r3, [r7, #26]
 8003d88:	f003 fe51 	bl	8007a2e <USB_ReadPMA>
    }
  }

  return count;
 8003d8c:	8b7b      	ldrh	r3, [r7, #26]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3720      	adds	r7, #32
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b0a4      	sub	sp, #144	; 0x90
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	60f8      	str	r0, [r7, #12]
 8003d9e:	60b9      	str	r1, [r7, #8]
 8003da0:	4613      	mov	r3, r2
 8003da2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003da4:	88fb      	ldrh	r3, [r7, #6]
 8003da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 81dd 	beq.w	800416a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	461a      	mov	r2, r3
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	4413      	add	r3, r2
 8003dc4:	3302      	adds	r3, #2
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	6812      	ldr	r2, [r2, #0]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dd2:	881b      	ldrh	r3, [r3, #0]
 8003dd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dd8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	699a      	ldr	r2, [r3, #24]
 8003de0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d907      	bls.n	8003df8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	699a      	ldr	r2, [r3, #24]
 8003dec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003df0:	1ad2      	subs	r2, r2, r3
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	619a      	str	r2, [r3, #24]
 8003df6:	e002      	b.n	8003dfe <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f040 80b9 	bne.w	8003f7a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	785b      	ldrb	r3, [r3, #1]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d126      	bne.n	8003e5e <HAL_PCD_EP_DB_Transmit+0xc8>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	461a      	mov	r2, r3
 8003e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e24:	4413      	add	r3, r2
 8003e26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	011a      	lsls	r2, r3, #4
 8003e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e30:	4413      	add	r3, r2
 8003e32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e36:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3a:	881b      	ldrh	r3, [r3, #0]
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e46:	801a      	strh	r2, [r3, #0]
 8003e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4a:	881b      	ldrh	r3, [r3, #0]
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5a:	801a      	strh	r2, [r3, #0]
 8003e5c:	e01a      	b.n	8003e94 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	785b      	ldrb	r3, [r3, #1]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d116      	bne.n	8003e94 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	461a      	mov	r2, r3
 8003e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7a:	4413      	add	r3, r2
 8003e7c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	011a      	lsls	r2, r3, #4
 8003e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e86:	4413      	add	r3, r2
 8003e88:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e8c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e90:	2200      	movs	r2, #0
 8003e92:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	785b      	ldrb	r3, [r3, #1]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d126      	bne.n	8003ef0 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	61fb      	str	r3, [r7, #28]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	61fb      	str	r3, [r7, #28]
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	011a      	lsls	r2, r3, #4
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ec8:	61bb      	str	r3, [r7, #24]
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	881b      	ldrh	r3, [r3, #0]
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	801a      	strh	r2, [r3, #0]
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	881b      	ldrh	r3, [r3, #0]
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ee4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	801a      	strh	r2, [r3, #0]
 8003eee:	e017      	b.n	8003f20 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	785b      	ldrb	r3, [r3, #1]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d113      	bne.n	8003f20 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	461a      	mov	r2, r3
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	4413      	add	r3, r2
 8003f08:	627b      	str	r3, [r7, #36]	; 0x24
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	011a      	lsls	r2, r3, #4
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	4413      	add	r3, r2
 8003f14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f18:	623b      	str	r3, [r7, #32]
 8003f1a:	6a3b      	ldr	r3, [r7, #32]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	4619      	mov	r1, r3
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f005 fb2f 	bl	800958a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f2c:	88fb      	ldrh	r3, [r7, #6]
 8003f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 82fc 	beq.w	8004530 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	881b      	ldrh	r3, [r3, #0]
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f52:	82fb      	strh	r3, [r7, #22]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	441a      	add	r2, r3
 8003f62:	8afb      	ldrh	r3, [r7, #22]
 8003f64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	8013      	strh	r3, [r2, #0]
 8003f78:	e2da      	b.n	8004530 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f7a:	88fb      	ldrh	r3, [r7, #6]
 8003f7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d021      	beq.n	8003fc8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4413      	add	r3, r2
 8003f92:	881b      	ldrh	r3, [r3, #0]
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f9e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	441a      	add	r2, r3
 8003fb0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003fb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	f040 82ae 	bne.w	8004530 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	695a      	ldr	r2, [r3, #20]
 8003fd8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003fdc:	441a      	add	r2, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	69da      	ldr	r2, [r3, #28]
 8003fe6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003fea:	441a      	add	r2, r3
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	6a1a      	ldr	r2, [r3, #32]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d30b      	bcc.n	8004014 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	6a1a      	ldr	r2, [r3, #32]
 8004008:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800400c:	1ad2      	subs	r2, r2, r3
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	621a      	str	r2, [r3, #32]
 8004012:	e017      	b.n	8004044 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d108      	bne.n	800402e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800401c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004020:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800402c:	e00a      	b.n	8004044 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2200      	movs	r2, #0
 8004042:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	785b      	ldrb	r3, [r3, #1]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d165      	bne.n	8004118 <HAL_PCD_EP_DB_Transmit+0x382>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800405a:	b29b      	uxth	r3, r3
 800405c:	461a      	mov	r2, r3
 800405e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004060:	4413      	add	r3, r2
 8004062:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	011a      	lsls	r2, r3, #4
 800406a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800406c:	4413      	add	r3, r2
 800406e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004072:	63bb      	str	r3, [r7, #56]	; 0x38
 8004074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	b29b      	uxth	r3, r3
 800407a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800407e:	b29a      	uxth	r2, r3
 8004080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004082:	801a      	strh	r2, [r3, #0]
 8004084:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004088:	2b3e      	cmp	r3, #62	; 0x3e
 800408a:	d91d      	bls.n	80040c8 <HAL_PCD_EP_DB_Transmit+0x332>
 800408c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004090:	095b      	lsrs	r3, r3, #5
 8004092:	64bb      	str	r3, [r7, #72]	; 0x48
 8004094:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004098:	f003 031f 	and.w	r3, r3, #31
 800409c:	2b00      	cmp	r3, #0
 800409e:	d102      	bne.n	80040a6 <HAL_PCD_EP_DB_Transmit+0x310>
 80040a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040a2:	3b01      	subs	r3, #1
 80040a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80040a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	029b      	lsls	r3, r3, #10
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	4313      	orrs	r3, r2
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c4:	801a      	strh	r2, [r3, #0]
 80040c6:	e044      	b.n	8004152 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80040c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10a      	bne.n	80040e6 <HAL_PCD_EP_DB_Transmit+0x350>
 80040d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d2:	881b      	ldrh	r3, [r3, #0]
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040de:	b29a      	uxth	r2, r3
 80040e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e2:	801a      	strh	r2, [r3, #0]
 80040e4:	e035      	b.n	8004152 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80040e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040ea:	085b      	lsrs	r3, r3, #1
 80040ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80040ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <HAL_PCD_EP_DB_Transmit+0x36a>
 80040fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040fc:	3301      	adds	r3, #1
 80040fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004102:	881b      	ldrh	r3, [r3, #0]
 8004104:	b29a      	uxth	r2, r3
 8004106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004108:	b29b      	uxth	r3, r3
 800410a:	029b      	lsls	r3, r3, #10
 800410c:	b29b      	uxth	r3, r3
 800410e:	4313      	orrs	r3, r2
 8004110:	b29a      	uxth	r2, r3
 8004112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004114:	801a      	strh	r2, [r3, #0]
 8004116:	e01c      	b.n	8004152 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	785b      	ldrb	r3, [r3, #1]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d118      	bne.n	8004152 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	647b      	str	r3, [r7, #68]	; 0x44
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800412e:	b29b      	uxth	r3, r3
 8004130:	461a      	mov	r2, r3
 8004132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004134:	4413      	add	r3, r2
 8004136:	647b      	str	r3, [r7, #68]	; 0x44
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	011a      	lsls	r2, r3, #4
 800413e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004140:	4413      	add	r3, r2
 8004142:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004146:	643b      	str	r3, [r7, #64]	; 0x40
 8004148:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800414c:	b29a      	uxth	r2, r3
 800414e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004150:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6818      	ldr	r0, [r3, #0]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	6959      	ldr	r1, [r3, #20]
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	891a      	ldrh	r2, [r3, #8]
 800415e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004162:	b29b      	uxth	r3, r3
 8004164:	f003 fc1e 	bl	80079a4 <USB_WritePMA>
 8004168:	e1e2      	b.n	8004530 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004172:	b29b      	uxth	r3, r3
 8004174:	461a      	mov	r2, r3
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	4413      	add	r3, r2
 800417e:	3306      	adds	r3, #6
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	6812      	ldr	r2, [r2, #0]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004192:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	699a      	ldr	r2, [r3, #24]
 800419a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800419e:	429a      	cmp	r2, r3
 80041a0:	d307      	bcc.n	80041b2 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	699a      	ldr	r2, [r3, #24]
 80041a6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80041aa:	1ad2      	subs	r2, r2, r3
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	619a      	str	r2, [r3, #24]
 80041b0:	e002      	b.n	80041b8 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2200      	movs	r2, #0
 80041b6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f040 80c0 	bne.w	8004342 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	785b      	ldrb	r3, [r3, #1]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d126      	bne.n	8004218 <HAL_PCD_EP_DB_Transmit+0x482>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041d8:	b29b      	uxth	r3, r3
 80041da:	461a      	mov	r2, r3
 80041dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041de:	4413      	add	r3, r2
 80041e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	011a      	lsls	r2, r3, #4
 80041e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041ea:	4413      	add	r3, r2
 80041ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80041f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80041f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004200:	801a      	strh	r2, [r3, #0]
 8004202:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	b29b      	uxth	r3, r3
 8004208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800420c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004210:	b29a      	uxth	r2, r3
 8004212:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004214:	801a      	strh	r2, [r3, #0]
 8004216:	e01a      	b.n	800424e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	785b      	ldrb	r3, [r3, #1]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d116      	bne.n	800424e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	667b      	str	r3, [r7, #100]	; 0x64
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800422e:	b29b      	uxth	r3, r3
 8004230:	461a      	mov	r2, r3
 8004232:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004234:	4413      	add	r3, r2
 8004236:	667b      	str	r3, [r7, #100]	; 0x64
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	011a      	lsls	r2, r3, #4
 800423e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004240:	4413      	add	r3, r2
 8004242:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004246:	663b      	str	r3, [r7, #96]	; 0x60
 8004248:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800424a:	2200      	movs	r2, #0
 800424c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	677b      	str	r3, [r7, #116]	; 0x74
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	785b      	ldrb	r3, [r3, #1]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d12b      	bne.n	80042b4 <HAL_PCD_EP_DB_Transmit+0x51e>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800426a:	b29b      	uxth	r3, r3
 800426c:	461a      	mov	r2, r3
 800426e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004270:	4413      	add	r3, r2
 8004272:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	011a      	lsls	r2, r3, #4
 800427a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800427c:	4413      	add	r3, r2
 800427e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004282:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004286:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800428a:	881b      	ldrh	r3, [r3, #0]
 800428c:	b29b      	uxth	r3, r3
 800428e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004292:	b29a      	uxth	r2, r3
 8004294:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004298:	801a      	strh	r2, [r3, #0]
 800429a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800429e:	881b      	ldrh	r3, [r3, #0]
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042b0:	801a      	strh	r2, [r3, #0]
 80042b2:	e017      	b.n	80042e4 <HAL_PCD_EP_DB_Transmit+0x54e>
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	785b      	ldrb	r3, [r3, #1]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d113      	bne.n	80042e4 <HAL_PCD_EP_DB_Transmit+0x54e>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	461a      	mov	r2, r3
 80042c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042ca:	4413      	add	r3, r2
 80042cc:	677b      	str	r3, [r7, #116]	; 0x74
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	011a      	lsls	r2, r3, #4
 80042d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042d6:	4413      	add	r3, r2
 80042d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042dc:	673b      	str	r3, [r7, #112]	; 0x70
 80042de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042e0:	2200      	movs	r2, #0
 80042e2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	4619      	mov	r1, r3
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f005 f94d 	bl	800958a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80042f0:	88fb      	ldrh	r3, [r7, #6]
 80042f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f040 811a 	bne.w	8004530 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	461a      	mov	r2, r3
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	881b      	ldrh	r3, [r3, #0]
 800430c:	b29b      	uxth	r3, r3
 800430e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004316:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	461a      	mov	r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	441a      	add	r2, r3
 8004328:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800432c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004330:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004334:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800433c:	b29b      	uxth	r3, r3
 800433e:	8013      	strh	r3, [r2, #0]
 8004340:	e0f6      	b.n	8004530 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004342:	88fb      	ldrh	r3, [r7, #6]
 8004344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d121      	bne.n	8004390 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	461a      	mov	r2, r3
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	b29b      	uxth	r3, r3
 800435e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004366:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	461a      	mov	r2, r3
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	441a      	add	r2, r3
 8004378:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800437c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004384:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800438c:	b29b      	uxth	r3, r3
 800438e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004396:	2b01      	cmp	r3, #1
 8004398:	f040 80ca 	bne.w	8004530 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	695a      	ldr	r2, [r3, #20]
 80043a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80043a4:	441a      	add	r2, r3
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	69da      	ldr	r2, [r3, #28]
 80043ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80043b2:	441a      	add	r2, r3
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	6a1a      	ldr	r2, [r3, #32]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d30b      	bcc.n	80043dc <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	6a1a      	ldr	r2, [r3, #32]
 80043d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043d4:	1ad2      	subs	r2, r2, r3
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	621a      	str	r2, [r3, #32]
 80043da:	e017      	b.n	800440c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d108      	bne.n	80043f6 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80043e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80043e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80043f4:	e00a      	b.n	800440c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	2200      	movs	r2, #0
 8004402:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	657b      	str	r3, [r7, #84]	; 0x54
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	785b      	ldrb	r3, [r3, #1]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d165      	bne.n	80044e6 <HAL_PCD_EP_DB_Transmit+0x750>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004428:	b29b      	uxth	r3, r3
 800442a:	461a      	mov	r2, r3
 800442c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800442e:	4413      	add	r3, r2
 8004430:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	011a      	lsls	r2, r3, #4
 8004438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800443a:	4413      	add	r3, r2
 800443c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004440:	65bb      	str	r3, [r7, #88]	; 0x58
 8004442:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	b29b      	uxth	r3, r3
 8004448:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800444c:	b29a      	uxth	r2, r3
 800444e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004450:	801a      	strh	r2, [r3, #0]
 8004452:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004456:	2b3e      	cmp	r3, #62	; 0x3e
 8004458:	d91d      	bls.n	8004496 <HAL_PCD_EP_DB_Transmit+0x700>
 800445a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	66bb      	str	r3, [r7, #104]	; 0x68
 8004462:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004466:	f003 031f 	and.w	r3, r3, #31
 800446a:	2b00      	cmp	r3, #0
 800446c:	d102      	bne.n	8004474 <HAL_PCD_EP_DB_Transmit+0x6de>
 800446e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004470:	3b01      	subs	r3, #1
 8004472:	66bb      	str	r3, [r7, #104]	; 0x68
 8004474:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	b29a      	uxth	r2, r3
 800447a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800447c:	b29b      	uxth	r3, r3
 800447e:	029b      	lsls	r3, r3, #10
 8004480:	b29b      	uxth	r3, r3
 8004482:	4313      	orrs	r3, r2
 8004484:	b29b      	uxth	r3, r3
 8004486:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800448a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800448e:	b29a      	uxth	r2, r3
 8004490:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004492:	801a      	strh	r2, [r3, #0]
 8004494:	e041      	b.n	800451a <HAL_PCD_EP_DB_Transmit+0x784>
 8004496:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10a      	bne.n	80044b4 <HAL_PCD_EP_DB_Transmit+0x71e>
 800449e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044a0:	881b      	ldrh	r3, [r3, #0]
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044b0:	801a      	strh	r2, [r3, #0]
 80044b2:	e032      	b.n	800451a <HAL_PCD_EP_DB_Transmit+0x784>
 80044b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044b8:	085b      	lsrs	r3, r3, #1
 80044ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80044bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d002      	beq.n	80044ce <HAL_PCD_EP_DB_Transmit+0x738>
 80044c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044ca:	3301      	adds	r3, #1
 80044cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80044ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044d0:	881b      	ldrh	r3, [r3, #0]
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	029b      	lsls	r3, r3, #10
 80044da:	b29b      	uxth	r3, r3
 80044dc:	4313      	orrs	r3, r2
 80044de:	b29a      	uxth	r2, r3
 80044e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044e2:	801a      	strh	r2, [r3, #0]
 80044e4:	e019      	b.n	800451a <HAL_PCD_EP_DB_Transmit+0x784>
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	785b      	ldrb	r3, [r3, #1]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d115      	bne.n	800451a <HAL_PCD_EP_DB_Transmit+0x784>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	461a      	mov	r2, r3
 80044fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044fc:	4413      	add	r3, r2
 80044fe:	657b      	str	r3, [r7, #84]	; 0x54
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	011a      	lsls	r2, r3, #4
 8004506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004508:	4413      	add	r3, r2
 800450a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800450e:	653b      	str	r3, [r7, #80]	; 0x50
 8004510:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004514:	b29a      	uxth	r2, r3
 8004516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004518:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6818      	ldr	r0, [r3, #0]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	6959      	ldr	r1, [r3, #20]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	895a      	ldrh	r2, [r3, #10]
 8004526:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800452a:	b29b      	uxth	r3, r3
 800452c:	f003 fa3a 	bl	80079a4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	461a      	mov	r2, r3
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	881b      	ldrh	r3, [r3, #0]
 8004540:	b29b      	uxth	r3, r3
 8004542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004546:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800454a:	82bb      	strh	r3, [r7, #20]
 800454c:	8abb      	ldrh	r3, [r7, #20]
 800454e:	f083 0310 	eor.w	r3, r3, #16
 8004552:	82bb      	strh	r3, [r7, #20]
 8004554:	8abb      	ldrh	r3, [r7, #20]
 8004556:	f083 0320 	eor.w	r3, r3, #32
 800455a:	82bb      	strh	r3, [r7, #20]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	461a      	mov	r2, r3
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	441a      	add	r2, r3
 800456a:	8abb      	ldrh	r3, [r7, #20]
 800456c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004570:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004574:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800457c:	b29b      	uxth	r3, r3
 800457e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3790      	adds	r7, #144	; 0x90
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800458a:	b480      	push	{r7}
 800458c:	b087      	sub	sp, #28
 800458e:	af00      	add	r7, sp, #0
 8004590:	60f8      	str	r0, [r7, #12]
 8004592:	607b      	str	r3, [r7, #4]
 8004594:	460b      	mov	r3, r1
 8004596:	817b      	strh	r3, [r7, #10]
 8004598:	4613      	mov	r3, r2
 800459a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800459c:	897b      	ldrh	r3, [r7, #10]
 800459e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00b      	beq.n	80045c0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045a8:	897b      	ldrh	r3, [r7, #10]
 80045aa:	f003 0207 	and.w	r2, r3, #7
 80045ae:	4613      	mov	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4413      	add	r3, r2
 80045b4:	00db      	lsls	r3, r3, #3
 80045b6:	3310      	adds	r3, #16
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	4413      	add	r3, r2
 80045bc:	617b      	str	r3, [r7, #20]
 80045be:	e009      	b.n	80045d4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045c0:	897a      	ldrh	r2, [r7, #10]
 80045c2:	4613      	mov	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	4413      	add	r3, r2
 80045d2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80045d4:	893b      	ldrh	r3, [r7, #8]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d107      	bne.n	80045ea <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2200      	movs	r2, #0
 80045de:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	80da      	strh	r2, [r3, #6]
 80045e8:	e00b      	b.n	8004602 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2201      	movs	r2, #1
 80045ee:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	0c1b      	lsrs	r3, r3, #16
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	371c      	adds	r7, #28
 8004608:	46bd      	mov	sp, r7
 800460a:	bc80      	pop	{r7}
 800460c:	4770      	bx	lr
	...

08004610 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e26c      	b.n	8004afc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 8087 	beq.w	800473e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004630:	4b92      	ldr	r3, [pc, #584]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f003 030c 	and.w	r3, r3, #12
 8004638:	2b04      	cmp	r3, #4
 800463a:	d00c      	beq.n	8004656 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800463c:	4b8f      	ldr	r3, [pc, #572]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f003 030c 	and.w	r3, r3, #12
 8004644:	2b08      	cmp	r3, #8
 8004646:	d112      	bne.n	800466e <HAL_RCC_OscConfig+0x5e>
 8004648:	4b8c      	ldr	r3, [pc, #560]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004654:	d10b      	bne.n	800466e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004656:	4b89      	ldr	r3, [pc, #548]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d06c      	beq.n	800473c <HAL_RCC_OscConfig+0x12c>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d168      	bne.n	800473c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e246      	b.n	8004afc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004676:	d106      	bne.n	8004686 <HAL_RCC_OscConfig+0x76>
 8004678:	4b80      	ldr	r3, [pc, #512]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a7f      	ldr	r2, [pc, #508]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 800467e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004682:	6013      	str	r3, [r2, #0]
 8004684:	e02e      	b.n	80046e4 <HAL_RCC_OscConfig+0xd4>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10c      	bne.n	80046a8 <HAL_RCC_OscConfig+0x98>
 800468e:	4b7b      	ldr	r3, [pc, #492]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a7a      	ldr	r2, [pc, #488]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 8004694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	4b78      	ldr	r3, [pc, #480]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a77      	ldr	r2, [pc, #476]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 80046a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	e01d      	b.n	80046e4 <HAL_RCC_OscConfig+0xd4>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046b0:	d10c      	bne.n	80046cc <HAL_RCC_OscConfig+0xbc>
 80046b2:	4b72      	ldr	r3, [pc, #456]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a71      	ldr	r2, [pc, #452]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 80046b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	4b6f      	ldr	r3, [pc, #444]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a6e      	ldr	r2, [pc, #440]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 80046c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	e00b      	b.n	80046e4 <HAL_RCC_OscConfig+0xd4>
 80046cc:	4b6b      	ldr	r3, [pc, #428]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a6a      	ldr	r2, [pc, #424]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 80046d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046d6:	6013      	str	r3, [r2, #0]
 80046d8:	4b68      	ldr	r3, [pc, #416]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a67      	ldr	r2, [pc, #412]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 80046de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d013      	beq.n	8004714 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ec:	f7fd faa0 	bl	8001c30 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046f4:	f7fd fa9c 	bl	8001c30 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b64      	cmp	r3, #100	; 0x64
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e1fa      	b.n	8004afc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004706:	4b5d      	ldr	r3, [pc, #372]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0f0      	beq.n	80046f4 <HAL_RCC_OscConfig+0xe4>
 8004712:	e014      	b.n	800473e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004714:	f7fd fa8c 	bl	8001c30 <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800471a:	e008      	b.n	800472e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800471c:	f7fd fa88 	bl	8001c30 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b64      	cmp	r3, #100	; 0x64
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e1e6      	b.n	8004afc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800472e:	4b53      	ldr	r3, [pc, #332]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1f0      	bne.n	800471c <HAL_RCC_OscConfig+0x10c>
 800473a:	e000      	b.n	800473e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800473c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d063      	beq.n	8004812 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800474a:	4b4c      	ldr	r3, [pc, #304]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f003 030c 	and.w	r3, r3, #12
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00b      	beq.n	800476e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004756:	4b49      	ldr	r3, [pc, #292]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f003 030c 	and.w	r3, r3, #12
 800475e:	2b08      	cmp	r3, #8
 8004760:	d11c      	bne.n	800479c <HAL_RCC_OscConfig+0x18c>
 8004762:	4b46      	ldr	r3, [pc, #280]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d116      	bne.n	800479c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800476e:	4b43      	ldr	r3, [pc, #268]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d005      	beq.n	8004786 <HAL_RCC_OscConfig+0x176>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d001      	beq.n	8004786 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e1ba      	b.n	8004afc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004786:	4b3d      	ldr	r3, [pc, #244]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	4939      	ldr	r1, [pc, #228]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 8004796:	4313      	orrs	r3, r2
 8004798:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800479a:	e03a      	b.n	8004812 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d020      	beq.n	80047e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047a4:	4b36      	ldr	r3, [pc, #216]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 80047a6:	2201      	movs	r2, #1
 80047a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047aa:	f7fd fa41 	bl	8001c30 <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047b2:	f7fd fa3d 	bl	8001c30 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e19b      	b.n	8004afc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c4:	4b2d      	ldr	r3, [pc, #180]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0f0      	beq.n	80047b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d0:	4b2a      	ldr	r3, [pc, #168]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	4927      	ldr	r1, [pc, #156]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	600b      	str	r3, [r1, #0]
 80047e4:	e015      	b.n	8004812 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047e6:	4b26      	ldr	r3, [pc, #152]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ec:	f7fd fa20 	bl	8001c30 <HAL_GetTick>
 80047f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047f4:	f7fd fa1c 	bl	8001c30 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e17a      	b.n	8004afc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004806:	4b1d      	ldr	r3, [pc, #116]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1f0      	bne.n	80047f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0308 	and.w	r3, r3, #8
 800481a:	2b00      	cmp	r3, #0
 800481c:	d03a      	beq.n	8004894 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d019      	beq.n	800485a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004826:	4b17      	ldr	r3, [pc, #92]	; (8004884 <HAL_RCC_OscConfig+0x274>)
 8004828:	2201      	movs	r2, #1
 800482a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800482c:	f7fd fa00 	bl	8001c30 <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004834:	f7fd f9fc 	bl	8001c30 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b02      	cmp	r3, #2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e15a      	b.n	8004afc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004846:	4b0d      	ldr	r3, [pc, #52]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0f0      	beq.n	8004834 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004852:	2001      	movs	r0, #1
 8004854:	f000 fab8 	bl	8004dc8 <RCC_Delay>
 8004858:	e01c      	b.n	8004894 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800485a:	4b0a      	ldr	r3, [pc, #40]	; (8004884 <HAL_RCC_OscConfig+0x274>)
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004860:	f7fd f9e6 	bl	8001c30 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004866:	e00f      	b.n	8004888 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004868:	f7fd f9e2 	bl	8001c30 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d908      	bls.n	8004888 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e140      	b.n	8004afc <HAL_RCC_OscConfig+0x4ec>
 800487a:	bf00      	nop
 800487c:	40021000 	.word	0x40021000
 8004880:	42420000 	.word	0x42420000
 8004884:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004888:	4b9e      	ldr	r3, [pc, #632]	; (8004b04 <HAL_RCC_OscConfig+0x4f4>)
 800488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1e9      	bne.n	8004868 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 80a6 	beq.w	80049ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048a2:	2300      	movs	r3, #0
 80048a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048a6:	4b97      	ldr	r3, [pc, #604]	; (8004b04 <HAL_RCC_OscConfig+0x4f4>)
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10d      	bne.n	80048ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048b2:	4b94      	ldr	r3, [pc, #592]	; (8004b04 <HAL_RCC_OscConfig+0x4f4>)
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	4a93      	ldr	r2, [pc, #588]	; (8004b04 <HAL_RCC_OscConfig+0x4f4>)
 80048b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048bc:	61d3      	str	r3, [r2, #28]
 80048be:	4b91      	ldr	r3, [pc, #580]	; (8004b04 <HAL_RCC_OscConfig+0x4f4>)
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c6:	60bb      	str	r3, [r7, #8]
 80048c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048ca:	2301      	movs	r3, #1
 80048cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ce:	4b8e      	ldr	r3, [pc, #568]	; (8004b08 <HAL_RCC_OscConfig+0x4f8>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d118      	bne.n	800490c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048da:	4b8b      	ldr	r3, [pc, #556]	; (8004b08 <HAL_RCC_OscConfig+0x4f8>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a8a      	ldr	r2, [pc, #552]	; (8004b08 <HAL_RCC_OscConfig+0x4f8>)
 80048e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048e6:	f7fd f9a3 	bl	8001c30 <HAL_GetTick>
 80048ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ec:	e008      	b.n	8004900 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ee:	f7fd f99f 	bl	8001c30 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b64      	cmp	r3, #100	; 0x64
 80048fa:	d901      	bls.n	8004900 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e0fd      	b.n	8004afc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004900:	4b81      	ldr	r3, [pc, #516]	; (8004b08 <HAL_RCC_OscConfig+0x4f8>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004908:	2b00      	cmp	r3, #0
 800490a:	d0f0      	beq.n	80048ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d106      	bne.n	8004922 <HAL_RCC_OscConfig+0x312>
 8004914:	4b7b      	ldr	r3, [pc, #492]	; (8004b04 <HAL_RCC_OscConfig+0x4f4>)
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	4a7a      	ldr	r2, [pc, #488]	; (8004b04 <HAL_RCC_OscConfig+0x4f4>)
 800491a:	f043 0301 	orr.w	r3, r3, #1
 800491e:	6213      	str	r3, [r2, #32]
 8004920:	e02d      	b.n	800497e <HAL_RCC_OscConfig+0x36e>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10c      	bne.n	8004944 <HAL_RCC_OscConfig+0x334>
 800492a:	4b76      	ldr	r3, [pc, #472]	; (8004b04 <HAL_RCC_OscConfig+0x4f4>)
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	4a75      	ldr	r2, [pc, #468]	; (8004b04 <HAL_RCC_OscConfig+0x4f4>)
 8004930:	f023 0301 	bic.w	r3, r3, #1
 8004934:	6213      	str	r3, [r2, #32]
 8004936:	4b73      	ldr	r3, [pc, #460]	; (8004b04 <HAL_RCC_OscConfig+0x4f4>)
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	4a72      	ldr	r2, [pc, #456]	; (8004b04 <HAL_RCC_OscConfig+0x4f4>)
 800493c:	f023 0304 	bic.w	r3, r3, #4
 8004940:	6213      	str	r3, [r2, #32]
 8004942:	e01c      	b.n	800497e <HAL_RCC_OscConfig+0x36e>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	2b05      	cmp	r3, #5
 800494a:	d10c      	bne.n	8004966 <HAL_RCC_OscConfig+0x356>
 800494c:	4b6d      	ldr	r3, [pc, #436]	; (8004b04 <HAL_RCC_OscConfig+0x4f4>)
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	4a6c      	ldr	r2, [pc, #432]	; (8004b04 <HAL_RCC_OscConfig+0x4f4>)
 8004952:	f043 0304 	orr.w	r3, r3, #4
 8004956:	6213      	str	r3, [r2, #32]
 8004958:	4b6a      	ldr	r3, [pc, #424]	; (8004b04 <HAL_RCC_OscConfig+0x4f4>)
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	4a69      	ldr	r2, [pc, #420]	; (8004b04 <HAL_RCC_OscConfig+0x4f4>)
 800495e:	f043 0301 	orr.w	r3, r3, #1
 8004962:	6213      	str	r3, [r2, #32]
 8004964:	e00b      	b.n	800497e <HAL_RCC_OscConfig+0x36e>
 8004966:	4b67      	ldr	r3, [pc, #412]	; (8004b04 <HAL_RCC_OscConfig+0x4f4>)
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	4a66      	ldr	r2, [pc, #408]	; (8004b04 <HAL_RCC_OscConfig+0x4f4>)
 800496c:	f023 0301 	bic.w	r3, r3, #1
 8004970:	6213      	str	r3, [r2, #32]
 8004972:	4b64      	ldr	r3, [pc, #400]	; (8004b04 <HAL_RCC_OscConfig+0x4f4>)
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	4a63      	ldr	r2, [pc, #396]	; (8004b04 <HAL_RCC_OscConfig+0x4f4>)
 8004978:	f023 0304 	bic.w	r3, r3, #4
 800497c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d015      	beq.n	80049b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004986:	f7fd f953 	bl	8001c30 <HAL_GetTick>
 800498a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800498c:	e00a      	b.n	80049a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800498e:	f7fd f94f 	bl	8001c30 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	f241 3288 	movw	r2, #5000	; 0x1388
 800499c:	4293      	cmp	r3, r2
 800499e:	d901      	bls.n	80049a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e0ab      	b.n	8004afc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049a4:	4b57      	ldr	r3, [pc, #348]	; (8004b04 <HAL_RCC_OscConfig+0x4f4>)
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d0ee      	beq.n	800498e <HAL_RCC_OscConfig+0x37e>
 80049b0:	e014      	b.n	80049dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049b2:	f7fd f93d 	bl	8001c30 <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049b8:	e00a      	b.n	80049d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ba:	f7fd f939 	bl	8001c30 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e095      	b.n	8004afc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049d0:	4b4c      	ldr	r3, [pc, #304]	; (8004b04 <HAL_RCC_OscConfig+0x4f4>)
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1ee      	bne.n	80049ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80049dc:	7dfb      	ldrb	r3, [r7, #23]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d105      	bne.n	80049ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049e2:	4b48      	ldr	r3, [pc, #288]	; (8004b04 <HAL_RCC_OscConfig+0x4f4>)
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	4a47      	ldr	r2, [pc, #284]	; (8004b04 <HAL_RCC_OscConfig+0x4f4>)
 80049e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 8081 	beq.w	8004afa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049f8:	4b42      	ldr	r3, [pc, #264]	; (8004b04 <HAL_RCC_OscConfig+0x4f4>)
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f003 030c 	and.w	r3, r3, #12
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d061      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	69db      	ldr	r3, [r3, #28]
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d146      	bne.n	8004a9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a0c:	4b3f      	ldr	r3, [pc, #252]	; (8004b0c <HAL_RCC_OscConfig+0x4fc>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a12:	f7fd f90d 	bl	8001c30 <HAL_GetTick>
 8004a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a18:	e008      	b.n	8004a2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a1a:	f7fd f909 	bl	8001c30 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d901      	bls.n	8004a2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e067      	b.n	8004afc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a2c:	4b35      	ldr	r3, [pc, #212]	; (8004b04 <HAL_RCC_OscConfig+0x4f4>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1f0      	bne.n	8004a1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a40:	d108      	bne.n	8004a54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a42:	4b30      	ldr	r3, [pc, #192]	; (8004b04 <HAL_RCC_OscConfig+0x4f4>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	492d      	ldr	r1, [pc, #180]	; (8004b04 <HAL_RCC_OscConfig+0x4f4>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a54:	4b2b      	ldr	r3, [pc, #172]	; (8004b04 <HAL_RCC_OscConfig+0x4f4>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a19      	ldr	r1, [r3, #32]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	430b      	orrs	r3, r1
 8004a66:	4927      	ldr	r1, [pc, #156]	; (8004b04 <HAL_RCC_OscConfig+0x4f4>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a6c:	4b27      	ldr	r3, [pc, #156]	; (8004b0c <HAL_RCC_OscConfig+0x4fc>)
 8004a6e:	2201      	movs	r2, #1
 8004a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a72:	f7fd f8dd 	bl	8001c30 <HAL_GetTick>
 8004a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a78:	e008      	b.n	8004a8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a7a:	f7fd f8d9 	bl	8001c30 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e037      	b.n	8004afc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a8c:	4b1d      	ldr	r3, [pc, #116]	; (8004b04 <HAL_RCC_OscConfig+0x4f4>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0f0      	beq.n	8004a7a <HAL_RCC_OscConfig+0x46a>
 8004a98:	e02f      	b.n	8004afa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a9a:	4b1c      	ldr	r3, [pc, #112]	; (8004b0c <HAL_RCC_OscConfig+0x4fc>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa0:	f7fd f8c6 	bl	8001c30 <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa8:	f7fd f8c2 	bl	8001c30 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e020      	b.n	8004afc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aba:	4b12      	ldr	r3, [pc, #72]	; (8004b04 <HAL_RCC_OscConfig+0x4f4>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1f0      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x498>
 8004ac6:	e018      	b.n	8004afa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e013      	b.n	8004afc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ad4:	4b0b      	ldr	r3, [pc, #44]	; (8004b04 <HAL_RCC_OscConfig+0x4f4>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d106      	bne.n	8004af6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d001      	beq.n	8004afa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e000      	b.n	8004afc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3718      	adds	r7, #24
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	40021000 	.word	0x40021000
 8004b08:	40007000 	.word	0x40007000
 8004b0c:	42420060 	.word	0x42420060

08004b10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e0d0      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b24:	4b6a      	ldr	r3, [pc, #424]	; (8004cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d910      	bls.n	8004b54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b32:	4b67      	ldr	r3, [pc, #412]	; (8004cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f023 0207 	bic.w	r2, r3, #7
 8004b3a:	4965      	ldr	r1, [pc, #404]	; (8004cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b42:	4b63      	ldr	r3, [pc, #396]	; (8004cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d001      	beq.n	8004b54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e0b8      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d020      	beq.n	8004ba2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d005      	beq.n	8004b78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b6c:	4b59      	ldr	r3, [pc, #356]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	4a58      	ldr	r2, [pc, #352]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004b76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0308 	and.w	r3, r3, #8
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d005      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b84:	4b53      	ldr	r3, [pc, #332]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	4a52      	ldr	r2, [pc, #328]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b8a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004b8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b90:	4b50      	ldr	r3, [pc, #320]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	494d      	ldr	r1, [pc, #308]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d040      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d107      	bne.n	8004bc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb6:	4b47      	ldr	r3, [pc, #284]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d115      	bne.n	8004bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e07f      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d107      	bne.n	8004bde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bce:	4b41      	ldr	r3, [pc, #260]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d109      	bne.n	8004bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e073      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bde:	4b3d      	ldr	r3, [pc, #244]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e06b      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bee:	4b39      	ldr	r3, [pc, #228]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f023 0203 	bic.w	r2, r3, #3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	4936      	ldr	r1, [pc, #216]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c00:	f7fd f816 	bl	8001c30 <HAL_GetTick>
 8004c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c06:	e00a      	b.n	8004c1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c08:	f7fd f812 	bl	8001c30 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e053      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c1e:	4b2d      	ldr	r3, [pc, #180]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f003 020c 	and.w	r2, r3, #12
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d1eb      	bne.n	8004c08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c30:	4b27      	ldr	r3, [pc, #156]	; (8004cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0307 	and.w	r3, r3, #7
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d210      	bcs.n	8004c60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c3e:	4b24      	ldr	r3, [pc, #144]	; (8004cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f023 0207 	bic.w	r2, r3, #7
 8004c46:	4922      	ldr	r1, [pc, #136]	; (8004cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c4e:	4b20      	ldr	r3, [pc, #128]	; (8004cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d001      	beq.n	8004c60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e032      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0304 	and.w	r3, r3, #4
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d008      	beq.n	8004c7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c6c:	4b19      	ldr	r3, [pc, #100]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	4916      	ldr	r1, [pc, #88]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0308 	and.w	r3, r3, #8
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d009      	beq.n	8004c9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c8a:	4b12      	ldr	r3, [pc, #72]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	490e      	ldr	r1, [pc, #56]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c9e:	f000 f821 	bl	8004ce4 <HAL_RCC_GetSysClockFreq>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	4b0b      	ldr	r3, [pc, #44]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	091b      	lsrs	r3, r3, #4
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	490a      	ldr	r1, [pc, #40]	; (8004cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004cb0:	5ccb      	ldrb	r3, [r1, r3]
 8004cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb6:	4a09      	ldr	r2, [pc, #36]	; (8004cdc <HAL_RCC_ClockConfig+0x1cc>)
 8004cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004cba:	4b09      	ldr	r3, [pc, #36]	; (8004ce0 <HAL_RCC_ClockConfig+0x1d0>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fc ff74 	bl	8001bac <HAL_InitTick>

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	40022000 	.word	0x40022000
 8004cd4:	40021000 	.word	0x40021000
 8004cd8:	0800a3d0 	.word	0x0800a3d0
 8004cdc:	20000004 	.word	0x20000004
 8004ce0:	20000008 	.word	0x20000008

08004ce4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004cea:	2300      	movs	r3, #0
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	2300      	movs	r3, #0
 8004cf0:	60bb      	str	r3, [r7, #8]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	617b      	str	r3, [r7, #20]
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004cfe:	4b1e      	ldr	r3, [pc, #120]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x94>)
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f003 030c 	and.w	r3, r3, #12
 8004d0a:	2b04      	cmp	r3, #4
 8004d0c:	d002      	beq.n	8004d14 <HAL_RCC_GetSysClockFreq+0x30>
 8004d0e:	2b08      	cmp	r3, #8
 8004d10:	d003      	beq.n	8004d1a <HAL_RCC_GetSysClockFreq+0x36>
 8004d12:	e027      	b.n	8004d64 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d14:	4b19      	ldr	r3, [pc, #100]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x98>)
 8004d16:	613b      	str	r3, [r7, #16]
      break;
 8004d18:	e027      	b.n	8004d6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	0c9b      	lsrs	r3, r3, #18
 8004d1e:	f003 030f 	and.w	r3, r3, #15
 8004d22:	4a17      	ldr	r2, [pc, #92]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004d24:	5cd3      	ldrb	r3, [r2, r3]
 8004d26:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d010      	beq.n	8004d54 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d32:	4b11      	ldr	r3, [pc, #68]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x94>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	0c5b      	lsrs	r3, r3, #17
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	4a11      	ldr	r2, [pc, #68]	; (8004d84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004d3e:	5cd3      	ldrb	r3, [r2, r3]
 8004d40:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a0d      	ldr	r2, [pc, #52]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x98>)
 8004d46:	fb02 f203 	mul.w	r2, r2, r3
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d50:	617b      	str	r3, [r7, #20]
 8004d52:	e004      	b.n	8004d5e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a0c      	ldr	r2, [pc, #48]	; (8004d88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004d58:	fb02 f303 	mul.w	r3, r2, r3
 8004d5c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	613b      	str	r3, [r7, #16]
      break;
 8004d62:	e002      	b.n	8004d6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d64:	4b05      	ldr	r3, [pc, #20]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x98>)
 8004d66:	613b      	str	r3, [r7, #16]
      break;
 8004d68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d6a:	693b      	ldr	r3, [r7, #16]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	371c      	adds	r7, #28
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc80      	pop	{r7}
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	40021000 	.word	0x40021000
 8004d7c:	007a1200 	.word	0x007a1200
 8004d80:	0800a3e8 	.word	0x0800a3e8
 8004d84:	0800a3f8 	.word	0x0800a3f8
 8004d88:	003d0900 	.word	0x003d0900

08004d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d90:	4b02      	ldr	r3, [pc, #8]	; (8004d9c <HAL_RCC_GetHCLKFreq+0x10>)
 8004d92:	681b      	ldr	r3, [r3, #0]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bc80      	pop	{r7}
 8004d9a:	4770      	bx	lr
 8004d9c:	20000004 	.word	0x20000004

08004da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004da4:	f7ff fff2 	bl	8004d8c <HAL_RCC_GetHCLKFreq>
 8004da8:	4602      	mov	r2, r0
 8004daa:	4b05      	ldr	r3, [pc, #20]	; (8004dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	0a1b      	lsrs	r3, r3, #8
 8004db0:	f003 0307 	and.w	r3, r3, #7
 8004db4:	4903      	ldr	r1, [pc, #12]	; (8004dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004db6:	5ccb      	ldrb	r3, [r1, r3]
 8004db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	0800a3e0 	.word	0x0800a3e0

08004dc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004dd0:	4b0a      	ldr	r3, [pc, #40]	; (8004dfc <RCC_Delay+0x34>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a0a      	ldr	r2, [pc, #40]	; (8004e00 <RCC_Delay+0x38>)
 8004dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dda:	0a5b      	lsrs	r3, r3, #9
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	fb02 f303 	mul.w	r3, r2, r3
 8004de2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004de4:	bf00      	nop
  }
  while (Delay --);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	1e5a      	subs	r2, r3, #1
 8004dea:	60fa      	str	r2, [r7, #12]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1f9      	bne.n	8004de4 <RCC_Delay+0x1c>
}
 8004df0:	bf00      	nop
 8004df2:	bf00      	nop
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bc80      	pop	{r7}
 8004dfa:	4770      	bx	lr
 8004dfc:	20000004 	.word	0x20000004
 8004e00:	10624dd3 	.word	0x10624dd3

08004e04 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	613b      	str	r3, [r7, #16]
 8004e10:	2300      	movs	r3, #0
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d07d      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004e20:	2300      	movs	r3, #0
 8004e22:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e24:	4b4f      	ldr	r3, [pc, #316]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e26:	69db      	ldr	r3, [r3, #28]
 8004e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10d      	bne.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e30:	4b4c      	ldr	r3, [pc, #304]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e32:	69db      	ldr	r3, [r3, #28]
 8004e34:	4a4b      	ldr	r2, [pc, #300]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e3a:	61d3      	str	r3, [r2, #28]
 8004e3c:	4b49      	ldr	r3, [pc, #292]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e3e:	69db      	ldr	r3, [r3, #28]
 8004e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e44:	60bb      	str	r3, [r7, #8]
 8004e46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e4c:	4b46      	ldr	r3, [pc, #280]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d118      	bne.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e58:	4b43      	ldr	r3, [pc, #268]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a42      	ldr	r2, [pc, #264]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e64:	f7fc fee4 	bl	8001c30 <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e6a:	e008      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e6c:	f7fc fee0 	bl	8001c30 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b64      	cmp	r3, #100	; 0x64
 8004e78:	d901      	bls.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e06d      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e7e:	4b3a      	ldr	r3, [pc, #232]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0f0      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e8a:	4b36      	ldr	r3, [pc, #216]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e92:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d02e      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d027      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ea8:	4b2e      	ldr	r3, [pc, #184]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eb0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004eb2:	4b2e      	ldr	r3, [pc, #184]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004eb8:	4b2c      	ldr	r3, [pc, #176]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004ebe:	4a29      	ldr	r2, [pc, #164]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d014      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ece:	f7fc feaf 	bl	8001c30 <HAL_GetTick>
 8004ed2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed4:	e00a      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ed6:	f7fc feab 	bl	8001c30 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d901      	bls.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e036      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eec:	4b1d      	ldr	r3, [pc, #116]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d0ee      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ef8:	4b1a      	ldr	r3, [pc, #104]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	4917      	ldr	r1, [pc, #92]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f0a:	7dfb      	ldrb	r3, [r7, #23]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d105      	bne.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f10:	4b14      	ldr	r3, [pc, #80]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f12:	69db      	ldr	r3, [r3, #28]
 8004f14:	4a13      	ldr	r2, [pc, #76]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d008      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f28:	4b0e      	ldr	r3, [pc, #56]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	490b      	ldr	r1, [pc, #44]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0310 	and.w	r3, r3, #16
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d008      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f46:	4b07      	ldr	r3, [pc, #28]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	4904      	ldr	r1, [pc, #16]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3718      	adds	r7, #24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	40021000 	.word	0x40021000
 8004f68:	40007000 	.word	0x40007000
 8004f6c:	42420440 	.word	0x42420440

08004f70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e041      	b.n	8005006 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d106      	bne.n	8004f9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7fc fca2 	bl	80018e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3304      	adds	r3, #4
 8004fac:	4619      	mov	r1, r3
 8004fae:	4610      	mov	r0, r2
 8004fb0:	f000 f992 	bl	80052d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
	...

08005010 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d109      	bne.n	8005034 <HAL_TIM_PWM_Start+0x24>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b01      	cmp	r3, #1
 800502a:	bf14      	ite	ne
 800502c:	2301      	movne	r3, #1
 800502e:	2300      	moveq	r3, #0
 8005030:	b2db      	uxtb	r3, r3
 8005032:	e022      	b.n	800507a <HAL_TIM_PWM_Start+0x6a>
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	2b04      	cmp	r3, #4
 8005038:	d109      	bne.n	800504e <HAL_TIM_PWM_Start+0x3e>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b01      	cmp	r3, #1
 8005044:	bf14      	ite	ne
 8005046:	2301      	movne	r3, #1
 8005048:	2300      	moveq	r3, #0
 800504a:	b2db      	uxtb	r3, r3
 800504c:	e015      	b.n	800507a <HAL_TIM_PWM_Start+0x6a>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b08      	cmp	r3, #8
 8005052:	d109      	bne.n	8005068 <HAL_TIM_PWM_Start+0x58>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b01      	cmp	r3, #1
 800505e:	bf14      	ite	ne
 8005060:	2301      	movne	r3, #1
 8005062:	2300      	moveq	r3, #0
 8005064:	b2db      	uxtb	r3, r3
 8005066:	e008      	b.n	800507a <HAL_TIM_PWM_Start+0x6a>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b01      	cmp	r3, #1
 8005072:	bf14      	ite	ne
 8005074:	2301      	movne	r3, #1
 8005076:	2300      	moveq	r3, #0
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e05e      	b.n	8005140 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d104      	bne.n	8005092 <HAL_TIM_PWM_Start+0x82>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005090:	e013      	b.n	80050ba <HAL_TIM_PWM_Start+0xaa>
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b04      	cmp	r3, #4
 8005096:	d104      	bne.n	80050a2 <HAL_TIM_PWM_Start+0x92>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050a0:	e00b      	b.n	80050ba <HAL_TIM_PWM_Start+0xaa>
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b08      	cmp	r3, #8
 80050a6:	d104      	bne.n	80050b2 <HAL_TIM_PWM_Start+0xa2>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050b0:	e003      	b.n	80050ba <HAL_TIM_PWM_Start+0xaa>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2202      	movs	r2, #2
 80050b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2201      	movs	r2, #1
 80050c0:	6839      	ldr	r1, [r7, #0]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 fafe 	bl	80056c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a1e      	ldr	r2, [pc, #120]	; (8005148 <HAL_TIM_PWM_Start+0x138>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d107      	bne.n	80050e2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a18      	ldr	r2, [pc, #96]	; (8005148 <HAL_TIM_PWM_Start+0x138>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d00e      	beq.n	800510a <HAL_TIM_PWM_Start+0xfa>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f4:	d009      	beq.n	800510a <HAL_TIM_PWM_Start+0xfa>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a14      	ldr	r2, [pc, #80]	; (800514c <HAL_TIM_PWM_Start+0x13c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d004      	beq.n	800510a <HAL_TIM_PWM_Start+0xfa>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a12      	ldr	r2, [pc, #72]	; (8005150 <HAL_TIM_PWM_Start+0x140>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d111      	bne.n	800512e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2b06      	cmp	r3, #6
 800511a:	d010      	beq.n	800513e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0201 	orr.w	r2, r2, #1
 800512a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800512c:	e007      	b.n	800513e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 0201 	orr.w	r2, r2, #1
 800513c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	40012c00 	.word	0x40012c00
 800514c:	40000400 	.word	0x40000400
 8005150:	40000800 	.word	0x40000800

08005154 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005160:	2300      	movs	r3, #0
 8005162:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800516a:	2b01      	cmp	r3, #1
 800516c:	d101      	bne.n	8005172 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800516e:	2302      	movs	r3, #2
 8005170:	e0ae      	b.n	80052d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b0c      	cmp	r3, #12
 800517e:	f200 809f 	bhi.w	80052c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005182:	a201      	add	r2, pc, #4	; (adr r2, 8005188 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005188:	080051bd 	.word	0x080051bd
 800518c:	080052c1 	.word	0x080052c1
 8005190:	080052c1 	.word	0x080052c1
 8005194:	080052c1 	.word	0x080052c1
 8005198:	080051fd 	.word	0x080051fd
 800519c:	080052c1 	.word	0x080052c1
 80051a0:	080052c1 	.word	0x080052c1
 80051a4:	080052c1 	.word	0x080052c1
 80051a8:	0800523f 	.word	0x0800523f
 80051ac:	080052c1 	.word	0x080052c1
 80051b0:	080052c1 	.word	0x080052c1
 80051b4:	080052c1 	.word	0x080052c1
 80051b8:	0800527f 	.word	0x0800527f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68b9      	ldr	r1, [r7, #8]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 f8f6 	bl	80053b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	699a      	ldr	r2, [r3, #24]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f042 0208 	orr.w	r2, r2, #8
 80051d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699a      	ldr	r2, [r3, #24]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 0204 	bic.w	r2, r2, #4
 80051e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6999      	ldr	r1, [r3, #24]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	691a      	ldr	r2, [r3, #16]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	619a      	str	r2, [r3, #24]
      break;
 80051fa:	e064      	b.n	80052c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68b9      	ldr	r1, [r7, #8]
 8005202:	4618      	mov	r0, r3
 8005204:	f000 f93c 	bl	8005480 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	699a      	ldr	r2, [r3, #24]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	699a      	ldr	r2, [r3, #24]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6999      	ldr	r1, [r3, #24]
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	021a      	lsls	r2, r3, #8
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	430a      	orrs	r2, r1
 800523a:	619a      	str	r2, [r3, #24]
      break;
 800523c:	e043      	b.n	80052c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68b9      	ldr	r1, [r7, #8]
 8005244:	4618      	mov	r0, r3
 8005246:	f000 f985 	bl	8005554 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	69da      	ldr	r2, [r3, #28]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f042 0208 	orr.w	r2, r2, #8
 8005258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	69da      	ldr	r2, [r3, #28]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 0204 	bic.w	r2, r2, #4
 8005268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	69d9      	ldr	r1, [r3, #28]
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	691a      	ldr	r2, [r3, #16]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	430a      	orrs	r2, r1
 800527a:	61da      	str	r2, [r3, #28]
      break;
 800527c:	e023      	b.n	80052c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68b9      	ldr	r1, [r7, #8]
 8005284:	4618      	mov	r0, r3
 8005286:	f000 f9cf 	bl	8005628 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	69da      	ldr	r2, [r3, #28]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	69da      	ldr	r2, [r3, #28]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	69d9      	ldr	r1, [r3, #28]
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	021a      	lsls	r2, r3, #8
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	61da      	str	r2, [r3, #28]
      break;
 80052be:	e002      	b.n	80052c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	75fb      	strb	r3, [r7, #23]
      break;
 80052c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3718      	adds	r7, #24
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a2f      	ldr	r2, [pc, #188]	; (80053a8 <TIM_Base_SetConfig+0xd0>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d00b      	beq.n	8005308 <TIM_Base_SetConfig+0x30>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f6:	d007      	beq.n	8005308 <TIM_Base_SetConfig+0x30>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a2c      	ldr	r2, [pc, #176]	; (80053ac <TIM_Base_SetConfig+0xd4>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d003      	beq.n	8005308 <TIM_Base_SetConfig+0x30>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a2b      	ldr	r2, [pc, #172]	; (80053b0 <TIM_Base_SetConfig+0xd8>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d108      	bne.n	800531a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	4313      	orrs	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a22      	ldr	r2, [pc, #136]	; (80053a8 <TIM_Base_SetConfig+0xd0>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d00b      	beq.n	800533a <TIM_Base_SetConfig+0x62>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005328:	d007      	beq.n	800533a <TIM_Base_SetConfig+0x62>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a1f      	ldr	r2, [pc, #124]	; (80053ac <TIM_Base_SetConfig+0xd4>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d003      	beq.n	800533a <TIM_Base_SetConfig+0x62>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a1e      	ldr	r2, [pc, #120]	; (80053b0 <TIM_Base_SetConfig+0xd8>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d108      	bne.n	800534c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	4313      	orrs	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	4313      	orrs	r3, r2
 8005358:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	689a      	ldr	r2, [r3, #8]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a0d      	ldr	r2, [pc, #52]	; (80053a8 <TIM_Base_SetConfig+0xd0>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d103      	bne.n	8005380 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	691a      	ldr	r2, [r3, #16]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d005      	beq.n	800539e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	f023 0201 	bic.w	r2, r3, #1
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	611a      	str	r2, [r3, #16]
  }
}
 800539e:	bf00      	nop
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bc80      	pop	{r7}
 80053a6:	4770      	bx	lr
 80053a8:	40012c00 	.word	0x40012c00
 80053ac:	40000400 	.word	0x40000400
 80053b0:	40000800 	.word	0x40000800

080053b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b087      	sub	sp, #28
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	f023 0201 	bic.w	r2, r3, #1
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 0303 	bic.w	r3, r3, #3
 80053ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f023 0302 	bic.w	r3, r3, #2
 80053fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	4313      	orrs	r3, r2
 8005406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a1c      	ldr	r2, [pc, #112]	; (800547c <TIM_OC1_SetConfig+0xc8>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d10c      	bne.n	800542a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	f023 0308 	bic.w	r3, r3, #8
 8005416:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	4313      	orrs	r3, r2
 8005420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f023 0304 	bic.w	r3, r3, #4
 8005428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a13      	ldr	r2, [pc, #76]	; (800547c <TIM_OC1_SetConfig+0xc8>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d111      	bne.n	8005456 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005438:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005440:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	4313      	orrs	r3, r2
 800544a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	4313      	orrs	r3, r2
 8005454:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	621a      	str	r2, [r3, #32]
}
 8005470:	bf00      	nop
 8005472:	371c      	adds	r7, #28
 8005474:	46bd      	mov	sp, r7
 8005476:	bc80      	pop	{r7}
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	40012c00 	.word	0x40012c00

08005480 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	f023 0210 	bic.w	r2, r3, #16
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	021b      	lsls	r3, r3, #8
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f023 0320 	bic.w	r3, r3, #32
 80054ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	011b      	lsls	r3, r3, #4
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a1d      	ldr	r2, [pc, #116]	; (8005550 <TIM_OC2_SetConfig+0xd0>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d10d      	bne.n	80054fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a14      	ldr	r2, [pc, #80]	; (8005550 <TIM_OC2_SetConfig+0xd0>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d113      	bne.n	800552c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800550a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005512:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	4313      	orrs	r3, r2
 800551e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	4313      	orrs	r3, r2
 800552a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	621a      	str	r2, [r3, #32]
}
 8005546:	bf00      	nop
 8005548:	371c      	adds	r7, #28
 800554a:	46bd      	mov	sp, r7
 800554c:	bc80      	pop	{r7}
 800554e:	4770      	bx	lr
 8005550:	40012c00 	.word	0x40012c00

08005554 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005554:	b480      	push	{r7}
 8005556:	b087      	sub	sp, #28
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	69db      	ldr	r3, [r3, #28]
 800557a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 0303 	bic.w	r3, r3, #3
 800558a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	4313      	orrs	r3, r2
 8005594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800559c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	021b      	lsls	r3, r3, #8
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a1d      	ldr	r2, [pc, #116]	; (8005624 <TIM_OC3_SetConfig+0xd0>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d10d      	bne.n	80055ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	021b      	lsls	r3, r3, #8
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a14      	ldr	r2, [pc, #80]	; (8005624 <TIM_OC3_SetConfig+0xd0>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d113      	bne.n	80055fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	011b      	lsls	r3, r3, #4
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	011b      	lsls	r3, r3, #4
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	685a      	ldr	r2, [r3, #4]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	621a      	str	r2, [r3, #32]
}
 8005618:	bf00      	nop
 800561a:	371c      	adds	r7, #28
 800561c:	46bd      	mov	sp, r7
 800561e:	bc80      	pop	{r7}
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	40012c00 	.word	0x40012c00

08005628 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005628:	b480      	push	{r7}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800565e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	021b      	lsls	r3, r3, #8
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	4313      	orrs	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005672:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	031b      	lsls	r3, r3, #12
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	4313      	orrs	r3, r2
 800567e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a0f      	ldr	r2, [pc, #60]	; (80056c0 <TIM_OC4_SetConfig+0x98>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d109      	bne.n	800569c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800568e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	019b      	lsls	r3, r3, #6
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	4313      	orrs	r3, r2
 800569a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	621a      	str	r2, [r3, #32]
}
 80056b6:	bf00      	nop
 80056b8:	371c      	adds	r7, #28
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bc80      	pop	{r7}
 80056be:	4770      	bx	lr
 80056c0:	40012c00 	.word	0x40012c00

080056c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f003 031f 	and.w	r3, r3, #31
 80056d6:	2201      	movs	r2, #1
 80056d8:	fa02 f303 	lsl.w	r3, r2, r3
 80056dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6a1a      	ldr	r2, [r3, #32]
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	43db      	mvns	r3, r3
 80056e6:	401a      	ands	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6a1a      	ldr	r2, [r3, #32]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	f003 031f 	and.w	r3, r3, #31
 80056f6:	6879      	ldr	r1, [r7, #4]
 80056f8:	fa01 f303 	lsl.w	r3, r1, r3
 80056fc:	431a      	orrs	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	621a      	str	r2, [r3, #32]
}
 8005702:	bf00      	nop
 8005704:	371c      	adds	r7, #28
 8005706:	46bd      	mov	sp, r7
 8005708:	bc80      	pop	{r7}
 800570a:	4770      	bx	lr

0800570c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800571c:	2b01      	cmp	r3, #1
 800571e:	d101      	bne.n	8005724 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005720:	2302      	movs	r3, #2
 8005722:	e046      	b.n	80057b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	4313      	orrs	r3, r2
 8005754:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a16      	ldr	r2, [pc, #88]	; (80057bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d00e      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005770:	d009      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a12      	ldr	r2, [pc, #72]	; (80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d004      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a10      	ldr	r2, [pc, #64]	; (80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d10c      	bne.n	80057a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800578c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	4313      	orrs	r3, r2
 8005796:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bc80      	pop	{r7}
 80057ba:	4770      	bx	lr
 80057bc:	40012c00 	.word	0x40012c00
 80057c0:	40000400 	.word	0x40000400
 80057c4:	40000800 	.word	0x40000800

080057c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80057d2:	2300      	movs	r3, #0
 80057d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d101      	bne.n	80057e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80057e0:	2302      	movs	r3, #2
 80057e2:	e03d      	b.n	8005860 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	4313      	orrs	r3, r2
 8005806:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	4313      	orrs	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4313      	orrs	r3, r2
 8005822:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	695b      	ldr	r3, [r3, #20]
 800583c:	4313      	orrs	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	4313      	orrs	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3714      	adds	r7, #20
 8005864:	46bd      	mov	sp, r7
 8005866:	bc80      	pop	{r7}
 8005868:	4770      	bx	lr

0800586a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800586a:	b480      	push	{r7}
 800586c:	b085      	sub	sp, #20
 800586e:	af00      	add	r7, sp, #0
 8005870:	60f8      	str	r0, [r7, #12]
 8005872:	4638      	mov	r0, r7
 8005874:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3714      	adds	r7, #20
 800587e:	46bd      	mov	sp, r7
 8005880:	bc80      	pop	{r7}
 8005882:	4770      	bx	lr

08005884 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005894:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005898:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	b29a      	uxth	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bc80      	pop	{r7}
 80058ae:	4770      	bx	lr

080058b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80058b8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80058bc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	43db      	mvns	r3, r3
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	4013      	ands	r3, r2
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	bc80      	pop	{r7}
 80058e2:	4770      	bx	lr

080058e4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	460b      	mov	r3, r1
 80058ee:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bc80      	pop	{r7}
 80058fa:	4770      	bx	lr

080058fc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	4638      	mov	r0, r7
 8005906:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2201      	movs	r2, #1
 800590e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	bc80      	pop	{r7}
 8005934:	4770      	bx	lr
	...

08005938 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005938:	b480      	push	{r7}
 800593a:	b09d      	sub	sp, #116	; 0x74
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005942:	2300      	movs	r3, #0
 8005944:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4413      	add	r3, r2
 8005952:	881b      	ldrh	r3, [r3, #0]
 8005954:	b29b      	uxth	r3, r3
 8005956:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800595a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	78db      	ldrb	r3, [r3, #3]
 8005966:	2b03      	cmp	r3, #3
 8005968:	d81f      	bhi.n	80059aa <USB_ActivateEndpoint+0x72>
 800596a:	a201      	add	r2, pc, #4	; (adr r2, 8005970 <USB_ActivateEndpoint+0x38>)
 800596c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005970:	08005981 	.word	0x08005981
 8005974:	0800599d 	.word	0x0800599d
 8005978:	080059b3 	.word	0x080059b3
 800597c:	0800598f 	.word	0x0800598f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005980:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005984:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005988:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800598c:	e012      	b.n	80059b4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800598e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005992:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005996:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800599a:	e00b      	b.n	80059b4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800599c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80059a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80059a4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80059a8:	e004      	b.n	80059b4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80059b0:	e000      	b.n	80059b4 <USB_ActivateEndpoint+0x7c>
      break;
 80059b2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	441a      	add	r2, r3
 80059be:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80059c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4413      	add	r3, r2
 80059e0:	881b      	ldrh	r3, [r3, #0]
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	4313      	orrs	r3, r2
 80059f6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	441a      	add	r2, r3
 8005a04:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	7b1b      	ldrb	r3, [r3, #12]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f040 8178 	bne.w	8005d16 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	785b      	ldrb	r3, [r3, #1]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f000 8084 	beq.w	8005b38 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	61bb      	str	r3, [r7, #24]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	4413      	add	r3, r2
 8005a42:	61bb      	str	r3, [r7, #24]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	011a      	lsls	r2, r3, #4
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a52:	617b      	str	r3, [r7, #20]
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	88db      	ldrh	r3, [r3, #6]
 8005a58:	085b      	lsrs	r3, r3, #1
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	005b      	lsls	r3, r3, #1
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	881b      	ldrh	r3, [r3, #0]
 8005a70:	827b      	strh	r3, [r7, #18]
 8005a72:	8a7b      	ldrh	r3, [r7, #18]
 8005a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d01b      	beq.n	8005ab4 <USB_ActivateEndpoint+0x17c>
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4413      	add	r3, r2
 8005a86:	881b      	ldrh	r3, [r3, #0]
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a92:	823b      	strh	r3, [r7, #16]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	441a      	add	r2, r3
 8005a9e:	8a3b      	ldrh	r3, [r7, #16]
 8005aa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	78db      	ldrb	r3, [r3, #3]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d020      	beq.n	8005afe <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4413      	add	r3, r2
 8005ac6:	881b      	ldrh	r3, [r3, #0]
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ad2:	81bb      	strh	r3, [r7, #12]
 8005ad4:	89bb      	ldrh	r3, [r7, #12]
 8005ad6:	f083 0320 	eor.w	r3, r3, #32
 8005ada:	81bb      	strh	r3, [r7, #12]
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	441a      	add	r2, r3
 8005ae6:	89bb      	ldrh	r3, [r7, #12]
 8005ae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005af0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	8013      	strh	r3, [r2, #0]
 8005afc:	e2d5      	b.n	80060aa <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b14:	81fb      	strh	r3, [r7, #14]
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	441a      	add	r2, r3
 8005b20:	89fb      	ldrh	r3, [r7, #14]
 8005b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	8013      	strh	r3, [r2, #0]
 8005b36:	e2b8      	b.n	80060aa <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	633b      	str	r3, [r7, #48]	; 0x30
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	461a      	mov	r2, r3
 8005b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b48:	4413      	add	r3, r2
 8005b4a:	633b      	str	r3, [r7, #48]	; 0x30
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	011a      	lsls	r2, r3, #4
 8005b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	88db      	ldrh	r3, [r3, #6]
 8005b60:	085b      	lsrs	r3, r3, #1
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	005b      	lsls	r3, r3, #1
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	461a      	mov	r2, r3
 8005b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7c:	4413      	add	r3, r2
 8005b7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	011a      	lsls	r2, r3, #4
 8005b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b88:	4413      	add	r3, r2
 8005b8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	801a      	strh	r2, [r3, #0]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	2b3e      	cmp	r3, #62	; 0x3e
 8005ba6:	d91d      	bls.n	8005be4 <USB_ActivateEndpoint+0x2ac>
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	095b      	lsrs	r3, r3, #5
 8005bae:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	f003 031f 	and.w	r3, r3, #31
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d102      	bne.n	8005bc2 <USB_ActivateEndpoint+0x28a>
 8005bbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	881b      	ldrh	r3, [r3, #0]
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	029b      	lsls	r3, r3, #10
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	801a      	strh	r2, [r3, #0]
 8005be2:	e026      	b.n	8005c32 <USB_ActivateEndpoint+0x2fa>
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10a      	bne.n	8005c02 <USB_ActivateEndpoint+0x2ca>
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfe:	801a      	strh	r2, [r3, #0]
 8005c00:	e017      	b.n	8005c32 <USB_ActivateEndpoint+0x2fa>
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	085b      	lsrs	r3, r3, #1
 8005c08:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d002      	beq.n	8005c1c <USB_ActivateEndpoint+0x2e4>
 8005c16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c18:	3301      	adds	r3, #1
 8005c1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	881b      	ldrh	r3, [r3, #0]
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	029b      	lsls	r3, r3, #10
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4413      	add	r3, r2
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005c40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d01b      	beq.n	8005c82 <USB_ActivateEndpoint+0x34a>
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	881b      	ldrh	r3, [r3, #0]
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c60:	843b      	strh	r3, [r7, #32]
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	441a      	add	r2, r3
 8005c6c:	8c3b      	ldrh	r3, [r7, #32]
 8005c6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d124      	bne.n	8005cd4 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4413      	add	r3, r2
 8005c94:	881b      	ldrh	r3, [r3, #0]
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca0:	83bb      	strh	r3, [r7, #28]
 8005ca2:	8bbb      	ldrh	r3, [r7, #28]
 8005ca4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005ca8:	83bb      	strh	r3, [r7, #28]
 8005caa:	8bbb      	ldrh	r3, [r7, #28]
 8005cac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005cb0:	83bb      	strh	r3, [r7, #28]
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	441a      	add	r2, r3
 8005cbc:	8bbb      	ldrh	r3, [r7, #28]
 8005cbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	8013      	strh	r3, [r2, #0]
 8005cd2:	e1ea      	b.n	80060aa <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4413      	add	r3, r2
 8005cde:	881b      	ldrh	r3, [r3, #0]
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cea:	83fb      	strh	r3, [r7, #30]
 8005cec:	8bfb      	ldrh	r3, [r7, #30]
 8005cee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005cf2:	83fb      	strh	r3, [r7, #30]
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	441a      	add	r2, r3
 8005cfe:	8bfb      	ldrh	r3, [r7, #30]
 8005d00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	8013      	strh	r3, [r2, #0]
 8005d14:	e1c9      	b.n	80060aa <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	78db      	ldrb	r3, [r3, #3]
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d11e      	bne.n	8005d5c <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	881b      	ldrh	r3, [r3, #0]
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d34:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	441a      	add	r2, r3
 8005d42:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005d46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d4e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	8013      	strh	r3, [r2, #0]
 8005d5a:	e01d      	b.n	8005d98 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	881b      	ldrh	r3, [r3, #0]
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d72:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	441a      	add	r2, r3
 8005d80:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005d84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	461a      	mov	r2, r3
 8005da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005da8:	4413      	add	r3, r2
 8005daa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	011a      	lsls	r2, r3, #4
 8005db2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dba:	65bb      	str	r3, [r7, #88]	; 0x58
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	891b      	ldrh	r3, [r3, #8]
 8005dc0:	085b      	lsrs	r3, r3, #1
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	005b      	lsls	r3, r3, #1
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dca:	801a      	strh	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	657b      	str	r3, [r7, #84]	; 0x54
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	461a      	mov	r2, r3
 8005dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ddc:	4413      	add	r3, r2
 8005dde:	657b      	str	r3, [r7, #84]	; 0x54
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	011a      	lsls	r2, r3, #4
 8005de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005dee:	653b      	str	r3, [r7, #80]	; 0x50
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	895b      	ldrh	r3, [r3, #10]
 8005df4:	085b      	lsrs	r3, r3, #1
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	005b      	lsls	r3, r3, #1
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dfe:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	785b      	ldrb	r3, [r3, #1]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f040 8093 	bne.w	8005f30 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	881b      	ldrh	r3, [r3, #0]
 8005e16:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005e1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d01b      	beq.n	8005e5e <USB_ActivateEndpoint+0x526>
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4413      	add	r3, r2
 8005e30:	881b      	ldrh	r3, [r3, #0]
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e3c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	441a      	add	r2, r3
 8005e48:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005e4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005e6c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d01b      	beq.n	8005eae <USB_ActivateEndpoint+0x576>
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	441a      	add	r2, r3
 8005e98:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005e9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ea6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4413      	add	r3, r2
 8005eb8:	881b      	ldrh	r3, [r3, #0]
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec4:	873b      	strh	r3, [r7, #56]	; 0x38
 8005ec6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ec8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005ecc:	873b      	strh	r3, [r7, #56]	; 0x38
 8005ece:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ed0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ed4:	873b      	strh	r3, [r7, #56]	; 0x38
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	441a      	add	r2, r3
 8005ee0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ee2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ee6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4413      	add	r3, r2
 8005f00:	881b      	ldrh	r3, [r3, #0]
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f0c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	441a      	add	r2, r3
 8005f18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	8013      	strh	r3, [r2, #0]
 8005f2e:	e0bc      	b.n	80060aa <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	4413      	add	r3, r2
 8005f3a:	881b      	ldrh	r3, [r3, #0]
 8005f3c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005f40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d01d      	beq.n	8005f88 <USB_ActivateEndpoint+0x650>
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	881b      	ldrh	r3, [r3, #0]
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f62:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	441a      	add	r2, r3
 8005f70:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005f74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	881b      	ldrh	r3, [r3, #0]
 8005f94:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005f98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d01d      	beq.n	8005fe0 <USB_ActivateEndpoint+0x6a8>
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	881b      	ldrh	r3, [r3, #0]
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	441a      	add	r2, r3
 8005fc8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005fcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	78db      	ldrb	r3, [r3, #3]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d024      	beq.n	8006032 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4413      	add	r3, r2
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ffa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ffe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006002:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006006:	f083 0320 	eor.w	r3, r3, #32
 800600a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	441a      	add	r2, r3
 8006018:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800601c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006020:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800602c:	b29b      	uxth	r3, r3
 800602e:	8013      	strh	r3, [r2, #0]
 8006030:	e01d      	b.n	800606e <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	881b      	ldrh	r3, [r3, #0]
 800603e:	b29b      	uxth	r3, r3
 8006040:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006048:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	441a      	add	r2, r3
 8006056:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800605a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800605e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800606a:	b29b      	uxth	r3, r3
 800606c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4413      	add	r3, r2
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	b29b      	uxth	r3, r3
 800607c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006084:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	441a      	add	r2, r3
 8006092:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800609a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800609e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80060aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3774      	adds	r7, #116	; 0x74
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bc80      	pop	{r7}
 80060b6:	4770      	bx	lr

080060b8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b08d      	sub	sp, #52	; 0x34
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	7b1b      	ldrb	r3, [r3, #12]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f040 808e 	bne.w	80061e8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	785b      	ldrb	r3, [r3, #1]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d044      	beq.n	800615e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	881b      	ldrh	r3, [r3, #0]
 80060e0:	81bb      	strh	r3, [r7, #12]
 80060e2:	89bb      	ldrh	r3, [r7, #12]
 80060e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d01b      	beq.n	8006124 <USB_DeactivateEndpoint+0x6c>
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4413      	add	r3, r2
 80060f6:	881b      	ldrh	r3, [r3, #0]
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006102:	817b      	strh	r3, [r7, #10]
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	441a      	add	r2, r3
 800610e:	897b      	ldrh	r3, [r7, #10]
 8006110:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006114:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006118:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800611c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006120:	b29b      	uxth	r3, r3
 8006122:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4413      	add	r3, r2
 800612e:	881b      	ldrh	r3, [r3, #0]
 8006130:	b29b      	uxth	r3, r3
 8006132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006136:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800613a:	813b      	strh	r3, [r7, #8]
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	441a      	add	r2, r3
 8006146:	893b      	ldrh	r3, [r7, #8]
 8006148:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800614c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006158:	b29b      	uxth	r3, r3
 800615a:	8013      	strh	r3, [r2, #0]
 800615c:	e192      	b.n	8006484 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	827b      	strh	r3, [r7, #18]
 800616c:	8a7b      	ldrh	r3, [r7, #18]
 800616e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d01b      	beq.n	80061ae <USB_DeactivateEndpoint+0xf6>
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	b29b      	uxth	r3, r3
 8006184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800618c:	823b      	strh	r3, [r7, #16]
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	441a      	add	r2, r3
 8006198:	8a3b      	ldrh	r3, [r7, #16]
 800619a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800619e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4413      	add	r3, r2
 80061b8:	881b      	ldrh	r3, [r3, #0]
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c4:	81fb      	strh	r3, [r7, #14]
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	441a      	add	r2, r3
 80061d0:	89fb      	ldrh	r3, [r7, #14]
 80061d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	8013      	strh	r3, [r2, #0]
 80061e6:	e14d      	b.n	8006484 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	785b      	ldrb	r3, [r3, #1]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f040 80a5 	bne.w	800633c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	881b      	ldrh	r3, [r3, #0]
 80061fe:	843b      	strh	r3, [r7, #32]
 8006200:	8c3b      	ldrh	r3, [r7, #32]
 8006202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d01b      	beq.n	8006242 <USB_DeactivateEndpoint+0x18a>
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	881b      	ldrh	r3, [r3, #0]
 8006216:	b29b      	uxth	r3, r3
 8006218:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800621c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006220:	83fb      	strh	r3, [r7, #30]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	441a      	add	r2, r3
 800622c:	8bfb      	ldrh	r3, [r7, #30]
 800622e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006232:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006236:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800623a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800623e:	b29b      	uxth	r3, r3
 8006240:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	881b      	ldrh	r3, [r3, #0]
 800624e:	83bb      	strh	r3, [r7, #28]
 8006250:	8bbb      	ldrh	r3, [r7, #28]
 8006252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006256:	2b00      	cmp	r3, #0
 8006258:	d01b      	beq.n	8006292 <USB_DeactivateEndpoint+0x1da>
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	881b      	ldrh	r3, [r3, #0]
 8006266:	b29b      	uxth	r3, r3
 8006268:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800626c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006270:	837b      	strh	r3, [r7, #26]
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	441a      	add	r2, r3
 800627c:	8b7b      	ldrh	r3, [r7, #26]
 800627e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006282:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800628a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800628e:	b29b      	uxth	r3, r3
 8006290:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	b29b      	uxth	r3, r3
 80062a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a8:	833b      	strh	r3, [r7, #24]
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	441a      	add	r2, r3
 80062b4:	8b3b      	ldrh	r3, [r7, #24]
 80062b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4413      	add	r3, r2
 80062d4:	881b      	ldrh	r3, [r3, #0]
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e0:	82fb      	strh	r3, [r7, #22]
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	441a      	add	r2, r3
 80062ec:	8afb      	ldrh	r3, [r7, #22]
 80062ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062fe:	b29b      	uxth	r3, r3
 8006300:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4413      	add	r3, r2
 800630c:	881b      	ldrh	r3, [r3, #0]
 800630e:	b29b      	uxth	r3, r3
 8006310:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006318:	82bb      	strh	r3, [r7, #20]
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	441a      	add	r2, r3
 8006324:	8abb      	ldrh	r3, [r7, #20]
 8006326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800632a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800632e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006336:	b29b      	uxth	r3, r3
 8006338:	8013      	strh	r3, [r2, #0]
 800633a:	e0a3      	b.n	8006484 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4413      	add	r3, r2
 8006346:	881b      	ldrh	r3, [r3, #0]
 8006348:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800634a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800634c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d01b      	beq.n	800638c <USB_DeactivateEndpoint+0x2d4>
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4413      	add	r3, r2
 800635e:	881b      	ldrh	r3, [r3, #0]
 8006360:	b29b      	uxth	r3, r3
 8006362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800636a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	441a      	add	r2, r3
 8006376:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006378:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800637c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006380:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006388:	b29b      	uxth	r3, r3
 800638a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4413      	add	r3, r2
 8006396:	881b      	ldrh	r3, [r3, #0]
 8006398:	857b      	strh	r3, [r7, #42]	; 0x2a
 800639a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800639c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d01b      	beq.n	80063dc <USB_DeactivateEndpoint+0x324>
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	881b      	ldrh	r3, [r3, #0]
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ba:	853b      	strh	r3, [r7, #40]	; 0x28
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	441a      	add	r2, r3
 80063c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80063c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063d8:	b29b      	uxth	r3, r3
 80063da:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	881b      	ldrh	r3, [r3, #0]
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	441a      	add	r2, r3
 80063fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006400:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006404:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006408:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800640c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006410:	b29b      	uxth	r3, r3
 8006412:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4413      	add	r3, r2
 800641e:	881b      	ldrh	r3, [r3, #0]
 8006420:	b29b      	uxth	r3, r3
 8006422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800642a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	441a      	add	r2, r3
 8006436:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006438:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800643c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006440:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006448:	b29b      	uxth	r3, r3
 800644a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	881b      	ldrh	r3, [r3, #0]
 8006458:	b29b      	uxth	r3, r3
 800645a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800645e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006462:	847b      	strh	r3, [r7, #34]	; 0x22
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	441a      	add	r2, r3
 800646e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006470:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006474:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006478:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800647c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006480:	b29b      	uxth	r3, r3
 8006482:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3734      	adds	r7, #52	; 0x34
 800648a:	46bd      	mov	sp, r7
 800648c:	bc80      	pop	{r7}
 800648e:	4770      	bx	lr

08006490 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b0c2      	sub	sp, #264	; 0x108
 8006494:	af00      	add	r7, sp, #0
 8006496:	1d3b      	adds	r3, r7, #4
 8006498:	6018      	str	r0, [r3, #0]
 800649a:	463b      	mov	r3, r7
 800649c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800649e:	463b      	mov	r3, r7
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	785b      	ldrb	r3, [r3, #1]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	f040 8545 	bne.w	8006f34 <USB_EPStartXfer+0xaa4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80064aa:	463b      	mov	r3, r7
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	699a      	ldr	r2, [r3, #24]
 80064b0:	463b      	mov	r3, r7
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d905      	bls.n	80064c6 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80064ba:	463b      	mov	r3, r7
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064c4:	e004      	b.n	80064d0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80064c6:	463b      	mov	r3, r7
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80064d0:	463b      	mov	r3, r7
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	7b1b      	ldrb	r3, [r3, #12]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d128      	bne.n	800652c <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80064da:	463b      	mov	r3, r7
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6959      	ldr	r1, [r3, #20]
 80064e0:	463b      	mov	r3, r7
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	88da      	ldrh	r2, [r3, #6]
 80064e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	1d38      	adds	r0, r7, #4
 80064ee:	6800      	ldr	r0, [r0, #0]
 80064f0:	f001 fa58 	bl	80079a4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80064f4:	1d3b      	adds	r3, r7, #4
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	613b      	str	r3, [r7, #16]
 80064fa:	1d3b      	adds	r3, r7, #4
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006502:	b29b      	uxth	r3, r3
 8006504:	461a      	mov	r2, r3
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	4413      	add	r3, r2
 800650a:	613b      	str	r3, [r7, #16]
 800650c:	463b      	mov	r3, r7
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	011a      	lsls	r2, r3, #4
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	4413      	add	r3, r2
 8006518:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800651c:	60fb      	str	r3, [r7, #12]
 800651e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006522:	b29a      	uxth	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	801a      	strh	r2, [r3, #0]
 8006528:	f000 bcdb 	b.w	8006ee2 <USB_EPStartXfer+0xa52>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800652c:	463b      	mov	r3, r7
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	78db      	ldrb	r3, [r3, #3]
 8006532:	2b02      	cmp	r3, #2
 8006534:	f040 836f 	bne.w	8006c16 <USB_EPStartXfer+0x786>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006538:	463b      	mov	r3, r7
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6a1a      	ldr	r2, [r3, #32]
 800653e:	463b      	mov	r3, r7
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	429a      	cmp	r2, r3
 8006546:	f240 8313 	bls.w	8006b70 <USB_EPStartXfer+0x6e0>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800654a:	1d3b      	adds	r3, r7, #4
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	463b      	mov	r3, r7
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4413      	add	r3, r2
 8006558:	881b      	ldrh	r3, [r3, #0]
 800655a:	b29b      	uxth	r3, r3
 800655c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006564:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006568:	1d3b      	adds	r3, r7, #4
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	463b      	mov	r3, r7
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	441a      	add	r2, r3
 8006576:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800657a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800657e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006582:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800658a:	b29b      	uxth	r3, r3
 800658c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800658e:	463b      	mov	r3, r7
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6a1a      	ldr	r2, [r3, #32]
 8006594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006598:	1ad2      	subs	r2, r2, r3
 800659a:	463b      	mov	r3, r7
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80065a0:	1d3b      	adds	r3, r7, #4
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	463b      	mov	r3, r7
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	881b      	ldrh	r3, [r3, #0]
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f000 816d 	beq.w	8006896 <USB_EPStartXfer+0x406>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80065bc:	1d3b      	adds	r3, r7, #4
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	633b      	str	r3, [r7, #48]	; 0x30
 80065c2:	463b      	mov	r3, r7
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	785b      	ldrb	r3, [r3, #1]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d16e      	bne.n	80066aa <USB_EPStartXfer+0x21a>
 80065cc:	1d3b      	adds	r3, r7, #4
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80065d2:	1d3b      	adds	r3, r7, #4
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065da:	b29b      	uxth	r3, r3
 80065dc:	461a      	mov	r2, r3
 80065de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e0:	4413      	add	r3, r2
 80065e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80065e4:	463b      	mov	r3, r7
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	011a      	lsls	r2, r3, #4
 80065ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ee:	4413      	add	r3, r2
 80065f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065f4:	627b      	str	r3, [r7, #36]	; 0x24
 80065f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f8:	881b      	ldrh	r3, [r3, #0]
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006600:	b29a      	uxth	r2, r3
 8006602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006604:	801a      	strh	r2, [r3, #0]
 8006606:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800660a:	2b3e      	cmp	r3, #62	; 0x3e
 800660c:	d921      	bls.n	8006652 <USB_EPStartXfer+0x1c2>
 800660e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006612:	095b      	lsrs	r3, r3, #5
 8006614:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800661c:	f003 031f 	and.w	r3, r3, #31
 8006620:	2b00      	cmp	r3, #0
 8006622:	d104      	bne.n	800662e <USB_EPStartXfer+0x19e>
 8006624:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006628:	3b01      	subs	r3, #1
 800662a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	881b      	ldrh	r3, [r3, #0]
 8006632:	b29a      	uxth	r2, r3
 8006634:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006638:	b29b      	uxth	r3, r3
 800663a:	029b      	lsls	r3, r3, #10
 800663c:	b29b      	uxth	r3, r3
 800663e:	4313      	orrs	r3, r2
 8006640:	b29b      	uxth	r3, r3
 8006642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800664a:	b29a      	uxth	r2, r3
 800664c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664e:	801a      	strh	r2, [r3, #0]
 8006650:	e047      	b.n	80066e2 <USB_EPStartXfer+0x252>
 8006652:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10a      	bne.n	8006670 <USB_EPStartXfer+0x1e0>
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	b29b      	uxth	r3, r3
 8006660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006668:	b29a      	uxth	r2, r3
 800666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666c:	801a      	strh	r2, [r3, #0]
 800666e:	e038      	b.n	80066e2 <USB_EPStartXfer+0x252>
 8006670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006674:	085b      	lsrs	r3, r3, #1
 8006676:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800667a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b00      	cmp	r3, #0
 8006684:	d004      	beq.n	8006690 <USB_EPStartXfer+0x200>
 8006686:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800668a:	3301      	adds	r3, #1
 800668c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	b29a      	uxth	r2, r3
 8006696:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800669a:	b29b      	uxth	r3, r3
 800669c:	029b      	lsls	r3, r3, #10
 800669e:	b29b      	uxth	r3, r3
 80066a0:	4313      	orrs	r3, r2
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	801a      	strh	r2, [r3, #0]
 80066a8:	e01b      	b.n	80066e2 <USB_EPStartXfer+0x252>
 80066aa:	463b      	mov	r3, r7
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	785b      	ldrb	r3, [r3, #1]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d116      	bne.n	80066e2 <USB_EPStartXfer+0x252>
 80066b4:	1d3b      	adds	r3, r7, #4
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066bc:	b29b      	uxth	r3, r3
 80066be:	461a      	mov	r2, r3
 80066c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c2:	4413      	add	r3, r2
 80066c4:	633b      	str	r3, [r7, #48]	; 0x30
 80066c6:	463b      	mov	r3, r7
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	011a      	lsls	r2, r3, #4
 80066ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d0:	4413      	add	r3, r2
 80066d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066dc:	b29a      	uxth	r2, r3
 80066de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80066e2:	463b      	mov	r3, r7
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	895b      	ldrh	r3, [r3, #10]
 80066e8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066ec:	463b      	mov	r3, r7
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6959      	ldr	r1, [r3, #20]
 80066f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80066fc:	1d38      	adds	r0, r7, #4
 80066fe:	6800      	ldr	r0, [r0, #0]
 8006700:	f001 f950 	bl	80079a4 <USB_WritePMA>
            ep->xfer_buff += len;
 8006704:	463b      	mov	r3, r7
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	695a      	ldr	r2, [r3, #20]
 800670a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800670e:	441a      	add	r2, r3
 8006710:	463b      	mov	r3, r7
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006716:	463b      	mov	r3, r7
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	6a1a      	ldr	r2, [r3, #32]
 800671c:	463b      	mov	r3, r7
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	429a      	cmp	r2, r3
 8006724:	d909      	bls.n	800673a <USB_EPStartXfer+0x2aa>
            {
              ep->xfer_len_db -= len;
 8006726:	463b      	mov	r3, r7
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	6a1a      	ldr	r2, [r3, #32]
 800672c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006730:	1ad2      	subs	r2, r2, r3
 8006732:	463b      	mov	r3, r7
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	621a      	str	r2, [r3, #32]
 8006738:	e008      	b.n	800674c <USB_EPStartXfer+0x2bc>
            }
            else
            {
              len = ep->xfer_len_db;
 800673a:	463b      	mov	r3, r7
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006744:	463b      	mov	r3, r7
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2200      	movs	r2, #0
 800674a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800674c:	463b      	mov	r3, r7
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	785b      	ldrb	r3, [r3, #1]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d16e      	bne.n	8006834 <USB_EPStartXfer+0x3a4>
 8006756:	1d3b      	adds	r3, r7, #4
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	61bb      	str	r3, [r7, #24]
 800675c:	1d3b      	adds	r3, r7, #4
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006764:	b29b      	uxth	r3, r3
 8006766:	461a      	mov	r2, r3
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	4413      	add	r3, r2
 800676c:	61bb      	str	r3, [r7, #24]
 800676e:	463b      	mov	r3, r7
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	011a      	lsls	r2, r3, #4
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	4413      	add	r3, r2
 800677a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800677e:	617b      	str	r3, [r7, #20]
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	881b      	ldrh	r3, [r3, #0]
 8006784:	b29b      	uxth	r3, r3
 8006786:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800678a:	b29a      	uxth	r2, r3
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	801a      	strh	r2, [r3, #0]
 8006790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006794:	2b3e      	cmp	r3, #62	; 0x3e
 8006796:	d921      	bls.n	80067dc <USB_EPStartXfer+0x34c>
 8006798:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800679c:	095b      	lsrs	r3, r3, #5
 800679e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067a6:	f003 031f 	and.w	r3, r3, #31
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d104      	bne.n	80067b8 <USB_EPStartXfer+0x328>
 80067ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067b2:	3b01      	subs	r3, #1
 80067b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	b29a      	uxth	r2, r3
 80067be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	029b      	lsls	r3, r3, #10
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	4313      	orrs	r3, r2
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	801a      	strh	r2, [r3, #0]
 80067da:	e04a      	b.n	8006872 <USB_EPStartXfer+0x3e2>
 80067dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10a      	bne.n	80067fa <USB_EPStartXfer+0x36a>
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	881b      	ldrh	r3, [r3, #0]
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	801a      	strh	r2, [r3, #0]
 80067f8:	e03b      	b.n	8006872 <USB_EPStartXfer+0x3e2>
 80067fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067fe:	085b      	lsrs	r3, r3, #1
 8006800:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	2b00      	cmp	r3, #0
 800680e:	d004      	beq.n	800681a <USB_EPStartXfer+0x38a>
 8006810:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006814:	3301      	adds	r3, #1
 8006816:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	881b      	ldrh	r3, [r3, #0]
 800681e:	b29a      	uxth	r2, r3
 8006820:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006824:	b29b      	uxth	r3, r3
 8006826:	029b      	lsls	r3, r3, #10
 8006828:	b29b      	uxth	r3, r3
 800682a:	4313      	orrs	r3, r2
 800682c:	b29a      	uxth	r2, r3
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	801a      	strh	r2, [r3, #0]
 8006832:	e01e      	b.n	8006872 <USB_EPStartXfer+0x3e2>
 8006834:	463b      	mov	r3, r7
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	785b      	ldrb	r3, [r3, #1]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d119      	bne.n	8006872 <USB_EPStartXfer+0x3e2>
 800683e:	1d3b      	adds	r3, r7, #4
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	623b      	str	r3, [r7, #32]
 8006844:	1d3b      	adds	r3, r7, #4
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800684c:	b29b      	uxth	r3, r3
 800684e:	461a      	mov	r2, r3
 8006850:	6a3b      	ldr	r3, [r7, #32]
 8006852:	4413      	add	r3, r2
 8006854:	623b      	str	r3, [r7, #32]
 8006856:	463b      	mov	r3, r7
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	011a      	lsls	r2, r3, #4
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	4413      	add	r3, r2
 8006862:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006866:	61fb      	str	r3, [r7, #28]
 8006868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800686c:	b29a      	uxth	r2, r3
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006872:	463b      	mov	r3, r7
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	891b      	ldrh	r3, [r3, #8]
 8006878:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800687c:	463b      	mov	r3, r7
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	6959      	ldr	r1, [r3, #20]
 8006882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006886:	b29b      	uxth	r3, r3
 8006888:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800688c:	1d38      	adds	r0, r7, #4
 800688e:	6800      	ldr	r0, [r0, #0]
 8006890:	f001 f888 	bl	80079a4 <USB_WritePMA>
 8006894:	e325      	b.n	8006ee2 <USB_EPStartXfer+0xa52>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006896:	463b      	mov	r3, r7
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	785b      	ldrb	r3, [r3, #1]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d16e      	bne.n	800697e <USB_EPStartXfer+0x4ee>
 80068a0:	1d3b      	adds	r3, r7, #4
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80068a6:	1d3b      	adds	r3, r7, #4
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	461a      	mov	r2, r3
 80068b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068b4:	4413      	add	r3, r2
 80068b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80068b8:	463b      	mov	r3, r7
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	011a      	lsls	r2, r3, #4
 80068c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068c2:	4413      	add	r3, r2
 80068c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068c8:	647b      	str	r3, [r7, #68]	; 0x44
 80068ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068cc:	881b      	ldrh	r3, [r3, #0]
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068d8:	801a      	strh	r2, [r3, #0]
 80068da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068de:	2b3e      	cmp	r3, #62	; 0x3e
 80068e0:	d921      	bls.n	8006926 <USB_EPStartXfer+0x496>
 80068e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068e6:	095b      	lsrs	r3, r3, #5
 80068e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068f0:	f003 031f 	and.w	r3, r3, #31
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d104      	bne.n	8006902 <USB_EPStartXfer+0x472>
 80068f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068fc:	3b01      	subs	r3, #1
 80068fe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006902:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006904:	881b      	ldrh	r3, [r3, #0]
 8006906:	b29a      	uxth	r2, r3
 8006908:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800690c:	b29b      	uxth	r3, r3
 800690e:	029b      	lsls	r3, r3, #10
 8006910:	b29b      	uxth	r3, r3
 8006912:	4313      	orrs	r3, r2
 8006914:	b29b      	uxth	r3, r3
 8006916:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800691a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800691e:	b29a      	uxth	r2, r3
 8006920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006922:	801a      	strh	r2, [r3, #0]
 8006924:	e04a      	b.n	80069bc <USB_EPStartXfer+0x52c>
 8006926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10a      	bne.n	8006944 <USB_EPStartXfer+0x4b4>
 800692e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006930:	881b      	ldrh	r3, [r3, #0]
 8006932:	b29b      	uxth	r3, r3
 8006934:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006938:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800693c:	b29a      	uxth	r2, r3
 800693e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006940:	801a      	strh	r2, [r3, #0]
 8006942:	e03b      	b.n	80069bc <USB_EPStartXfer+0x52c>
 8006944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006948:	085b      	lsrs	r3, r3, #1
 800694a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800694e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	2b00      	cmp	r3, #0
 8006958:	d004      	beq.n	8006964 <USB_EPStartXfer+0x4d4>
 800695a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800695e:	3301      	adds	r3, #1
 8006960:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006966:	881b      	ldrh	r3, [r3, #0]
 8006968:	b29a      	uxth	r2, r3
 800696a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800696e:	b29b      	uxth	r3, r3
 8006970:	029b      	lsls	r3, r3, #10
 8006972:	b29b      	uxth	r3, r3
 8006974:	4313      	orrs	r3, r2
 8006976:	b29a      	uxth	r2, r3
 8006978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800697a:	801a      	strh	r2, [r3, #0]
 800697c:	e01e      	b.n	80069bc <USB_EPStartXfer+0x52c>
 800697e:	463b      	mov	r3, r7
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	785b      	ldrb	r3, [r3, #1]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d119      	bne.n	80069bc <USB_EPStartXfer+0x52c>
 8006988:	1d3b      	adds	r3, r7, #4
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	653b      	str	r3, [r7, #80]	; 0x50
 800698e:	1d3b      	adds	r3, r7, #4
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006996:	b29b      	uxth	r3, r3
 8006998:	461a      	mov	r2, r3
 800699a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800699c:	4413      	add	r3, r2
 800699e:	653b      	str	r3, [r7, #80]	; 0x50
 80069a0:	463b      	mov	r3, r7
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	011a      	lsls	r2, r3, #4
 80069a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069aa:	4413      	add	r3, r2
 80069ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80069bc:	463b      	mov	r3, r7
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	891b      	ldrh	r3, [r3, #8]
 80069c2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069c6:	463b      	mov	r3, r7
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	6959      	ldr	r1, [r3, #20]
 80069cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80069d6:	1d38      	adds	r0, r7, #4
 80069d8:	6800      	ldr	r0, [r0, #0]
 80069da:	f000 ffe3 	bl	80079a4 <USB_WritePMA>
            ep->xfer_buff += len;
 80069de:	463b      	mov	r3, r7
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	695a      	ldr	r2, [r3, #20]
 80069e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069e8:	441a      	add	r2, r3
 80069ea:	463b      	mov	r3, r7
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80069f0:	463b      	mov	r3, r7
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	6a1a      	ldr	r2, [r3, #32]
 80069f6:	463b      	mov	r3, r7
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d909      	bls.n	8006a14 <USB_EPStartXfer+0x584>
            {
              ep->xfer_len_db -= len;
 8006a00:	463b      	mov	r3, r7
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6a1a      	ldr	r2, [r3, #32]
 8006a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a0a:	1ad2      	subs	r2, r2, r3
 8006a0c:	463b      	mov	r3, r7
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	621a      	str	r2, [r3, #32]
 8006a12:	e008      	b.n	8006a26 <USB_EPStartXfer+0x596>
            }
            else
            {
              len = ep->xfer_len_db;
 8006a14:	463b      	mov	r3, r7
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006a1e:	463b      	mov	r3, r7
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2200      	movs	r2, #0
 8006a24:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a26:	1d3b      	adds	r3, r7, #4
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	643b      	str	r3, [r7, #64]	; 0x40
 8006a2c:	463b      	mov	r3, r7
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	785b      	ldrb	r3, [r3, #1]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d16e      	bne.n	8006b14 <USB_EPStartXfer+0x684>
 8006a36:	1d3b      	adds	r3, r7, #4
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a3c:	1d3b      	adds	r3, r7, #4
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	461a      	mov	r2, r3
 8006a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4a:	4413      	add	r3, r2
 8006a4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a4e:	463b      	mov	r3, r7
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	011a      	lsls	r2, r3, #4
 8006a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a58:	4413      	add	r3, r2
 8006a5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a5e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a62:	881b      	ldrh	r3, [r3, #0]
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a6e:	801a      	strh	r2, [r3, #0]
 8006a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a74:	2b3e      	cmp	r3, #62	; 0x3e
 8006a76:	d921      	bls.n	8006abc <USB_EPStartXfer+0x62c>
 8006a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a7c:	095b      	lsrs	r3, r3, #5
 8006a7e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a86:	f003 031f 	and.w	r3, r3, #31
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d104      	bne.n	8006a98 <USB_EPStartXfer+0x608>
 8006a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a92:	3b01      	subs	r3, #1
 8006a94:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	029b      	lsls	r3, r3, #10
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ab0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab8:	801a      	strh	r2, [r3, #0]
 8006aba:	e047      	b.n	8006b4c <USB_EPStartXfer+0x6bc>
 8006abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d10a      	bne.n	8006ada <USB_EPStartXfer+0x64a>
 8006ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ac6:	881b      	ldrh	r3, [r3, #0]
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ace:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ad6:	801a      	strh	r2, [r3, #0]
 8006ad8:	e038      	b.n	8006b4c <USB_EPStartXfer+0x6bc>
 8006ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ade:	085b      	lsrs	r3, r3, #1
 8006ae0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ae8:	f003 0301 	and.w	r3, r3, #1
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d004      	beq.n	8006afa <USB_EPStartXfer+0x66a>
 8006af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af4:	3301      	adds	r3, #1
 8006af6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006afc:	881b      	ldrh	r3, [r3, #0]
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	029b      	lsls	r3, r3, #10
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b10:	801a      	strh	r2, [r3, #0]
 8006b12:	e01b      	b.n	8006b4c <USB_EPStartXfer+0x6bc>
 8006b14:	463b      	mov	r3, r7
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	785b      	ldrb	r3, [r3, #1]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d116      	bne.n	8006b4c <USB_EPStartXfer+0x6bc>
 8006b1e:	1d3b      	adds	r3, r7, #4
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	461a      	mov	r2, r3
 8006b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b2c:	4413      	add	r3, r2
 8006b2e:	643b      	str	r3, [r7, #64]	; 0x40
 8006b30:	463b      	mov	r3, r7
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	011a      	lsls	r2, r3, #4
 8006b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b4a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006b4c:	463b      	mov	r3, r7
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	895b      	ldrh	r3, [r3, #10]
 8006b52:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b56:	463b      	mov	r3, r7
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	6959      	ldr	r1, [r3, #20]
 8006b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006b66:	1d38      	adds	r0, r7, #4
 8006b68:	6800      	ldr	r0, [r0, #0]
 8006b6a:	f000 ff1b 	bl	80079a4 <USB_WritePMA>
 8006b6e:	e1b8      	b.n	8006ee2 <USB_EPStartXfer+0xa52>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006b70:	463b      	mov	r3, r7
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	6a1b      	ldr	r3, [r3, #32]
 8006b76:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006b7a:	1d3b      	adds	r3, r7, #4
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	463b      	mov	r3, r7
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	4413      	add	r3, r2
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b94:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006b98:	1d3b      	adds	r3, r7, #4
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	463b      	mov	r3, r7
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	441a      	add	r2, r3
 8006ba6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006baa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006bbe:	1d3b      	adds	r3, r7, #4
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bc4:	1d3b      	adds	r3, r7, #4
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	461a      	mov	r2, r3
 8006bd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bd2:	4413      	add	r3, r2
 8006bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bd6:	463b      	mov	r3, r7
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	011a      	lsls	r2, r3, #4
 8006bde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006be0:	4413      	add	r3, r2
 8006be2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006be6:	65bb      	str	r3, [r7, #88]	; 0x58
 8006be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bf0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006bf2:	463b      	mov	r3, r7
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	891b      	ldrh	r3, [r3, #8]
 8006bf8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006bfc:	463b      	mov	r3, r7
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6959      	ldr	r1, [r3, #20]
 8006c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006c0c:	1d38      	adds	r0, r7, #4
 8006c0e:	6800      	ldr	r0, [r0, #0]
 8006c10:	f000 fec8 	bl	80079a4 <USB_WritePMA>
 8006c14:	e165      	b.n	8006ee2 <USB_EPStartXfer+0xa52>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006c16:	463b      	mov	r3, r7
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	6a1a      	ldr	r2, [r3, #32]
 8006c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c20:	1ad2      	subs	r2, r2, r3
 8006c22:	463b      	mov	r3, r7
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006c28:	1d3b      	adds	r3, r7, #4
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	463b      	mov	r3, r7
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4413      	add	r3, r2
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f000 80a5 	beq.w	8006d8e <USB_EPStartXfer+0x8fe>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006c44:	1d3b      	adds	r3, r7, #4
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	673b      	str	r3, [r7, #112]	; 0x70
 8006c4a:	463b      	mov	r3, r7
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	785b      	ldrb	r3, [r3, #1]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d16e      	bne.n	8006d32 <USB_EPStartXfer+0x8a2>
 8006c54:	1d3b      	adds	r3, r7, #4
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c5a:	1d3b      	adds	r3, r7, #4
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	461a      	mov	r2, r3
 8006c66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c68:	4413      	add	r3, r2
 8006c6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c6c:	463b      	mov	r3, r7
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	011a      	lsls	r2, r3, #4
 8006c74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c76:	4413      	add	r3, r2
 8006c78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c7c:	667b      	str	r3, [r7, #100]	; 0x64
 8006c7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c80:	881b      	ldrh	r3, [r3, #0]
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c8c:	801a      	strh	r2, [r3, #0]
 8006c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c92:	2b3e      	cmp	r3, #62	; 0x3e
 8006c94:	d921      	bls.n	8006cda <USB_EPStartXfer+0x84a>
 8006c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c9a:	095b      	lsrs	r3, r3, #5
 8006c9c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ca4:	f003 031f 	and.w	r3, r3, #31
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d104      	bne.n	8006cb6 <USB_EPStartXfer+0x826>
 8006cac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006cb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cb8:	881b      	ldrh	r3, [r3, #0]
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	029b      	lsls	r3, r3, #10
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cd6:	801a      	strh	r2, [r3, #0]
 8006cd8:	e047      	b.n	8006d6a <USB_EPStartXfer+0x8da>
 8006cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10a      	bne.n	8006cf8 <USB_EPStartXfer+0x868>
 8006ce2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ce4:	881b      	ldrh	r3, [r3, #0]
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cf4:	801a      	strh	r2, [r3, #0]
 8006cf6:	e038      	b.n	8006d6a <USB_EPStartXfer+0x8da>
 8006cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cfc:	085b      	lsrs	r3, r3, #1
 8006cfe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d06:	f003 0301 	and.w	r3, r3, #1
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d004      	beq.n	8006d18 <USB_EPStartXfer+0x888>
 8006d0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006d12:	3301      	adds	r3, #1
 8006d14:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d1a:	881b      	ldrh	r3, [r3, #0]
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	029b      	lsls	r3, r3, #10
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d2e:	801a      	strh	r2, [r3, #0]
 8006d30:	e01b      	b.n	8006d6a <USB_EPStartXfer+0x8da>
 8006d32:	463b      	mov	r3, r7
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	785b      	ldrb	r3, [r3, #1]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d116      	bne.n	8006d6a <USB_EPStartXfer+0x8da>
 8006d3c:	1d3b      	adds	r3, r7, #4
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	461a      	mov	r2, r3
 8006d48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d4a:	4413      	add	r3, r2
 8006d4c:	673b      	str	r3, [r7, #112]	; 0x70
 8006d4e:	463b      	mov	r3, r7
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	011a      	lsls	r2, r3, #4
 8006d56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d58:	4413      	add	r3, r2
 8006d5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d68:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006d6a:	463b      	mov	r3, r7
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	895b      	ldrh	r3, [r3, #10]
 8006d70:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d74:	463b      	mov	r3, r7
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	6959      	ldr	r1, [r3, #20]
 8006d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006d84:	1d38      	adds	r0, r7, #4
 8006d86:	6800      	ldr	r0, [r0, #0]
 8006d88:	f000 fe0c 	bl	80079a4 <USB_WritePMA>
 8006d8c:	e0a9      	b.n	8006ee2 <USB_EPStartXfer+0xa52>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006d8e:	463b      	mov	r3, r7
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	785b      	ldrb	r3, [r3, #1]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d16e      	bne.n	8006e76 <USB_EPStartXfer+0x9e6>
 8006d98:	1d3b      	adds	r3, r7, #4
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d9e:	1d3b      	adds	r3, r7, #4
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	461a      	mov	r2, r3
 8006daa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006dac:	4413      	add	r3, r2
 8006dae:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006db0:	463b      	mov	r3, r7
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	011a      	lsls	r2, r3, #4
 8006db8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006dba:	4413      	add	r3, r2
 8006dbc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006dc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006dc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dc4:	881b      	ldrh	r3, [r3, #0]
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dd0:	801a      	strh	r2, [r3, #0]
 8006dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dd6:	2b3e      	cmp	r3, #62	; 0x3e
 8006dd8:	d921      	bls.n	8006e1e <USB_EPStartXfer+0x98e>
 8006dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dde:	095b      	lsrs	r3, r3, #5
 8006de0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006de8:	f003 031f 	and.w	r3, r3, #31
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d104      	bne.n	8006dfa <USB_EPStartXfer+0x96a>
 8006df0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006df4:	3b01      	subs	r3, #1
 8006df6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006dfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dfc:	881b      	ldrh	r3, [r3, #0]
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	029b      	lsls	r3, r3, #10
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e1a:	801a      	strh	r2, [r3, #0]
 8006e1c:	e050      	b.n	8006ec0 <USB_EPStartXfer+0xa30>
 8006e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10a      	bne.n	8006e3c <USB_EPStartXfer+0x9ac>
 8006e26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e28:	881b      	ldrh	r3, [r3, #0]
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e38:	801a      	strh	r2, [r3, #0]
 8006e3a:	e041      	b.n	8006ec0 <USB_EPStartXfer+0xa30>
 8006e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e40:	085b      	lsrs	r3, r3, #1
 8006e42:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d004      	beq.n	8006e5c <USB_EPStartXfer+0x9cc>
 8006e52:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e56:	3301      	adds	r3, #1
 8006e58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e5e:	881b      	ldrh	r3, [r3, #0]
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	029b      	lsls	r3, r3, #10
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e72:	801a      	strh	r2, [r3, #0]
 8006e74:	e024      	b.n	8006ec0 <USB_EPStartXfer+0xa30>
 8006e76:	463b      	mov	r3, r7
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	785b      	ldrb	r3, [r3, #1]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d11f      	bne.n	8006ec0 <USB_EPStartXfer+0xa30>
 8006e80:	1d3b      	adds	r3, r7, #4
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e88:	1d3b      	adds	r3, r7, #4
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	461a      	mov	r2, r3
 8006e94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e98:	4413      	add	r3, r2
 8006e9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e9e:	463b      	mov	r3, r7
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	011a      	lsls	r2, r3, #4
 8006ea6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006eaa:	4413      	add	r3, r2
 8006eac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006eb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ebe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006ec0:	463b      	mov	r3, r7
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	891b      	ldrh	r3, [r3, #8]
 8006ec6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006eca:	463b      	mov	r3, r7
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	6959      	ldr	r1, [r3, #20]
 8006ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006eda:	1d38      	adds	r0, r7, #4
 8006edc:	6800      	ldr	r0, [r0, #0]
 8006ede:	f000 fd61 	bl	80079a4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006ee2:	1d3b      	adds	r3, r7, #4
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	463b      	mov	r3, r7
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4413      	add	r3, r2
 8006ef0:	881b      	ldrh	r3, [r3, #0]
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006efc:	817b      	strh	r3, [r7, #10]
 8006efe:	897b      	ldrh	r3, [r7, #10]
 8006f00:	f083 0310 	eor.w	r3, r3, #16
 8006f04:	817b      	strh	r3, [r7, #10]
 8006f06:	897b      	ldrh	r3, [r7, #10]
 8006f08:	f083 0320 	eor.w	r3, r3, #32
 8006f0c:	817b      	strh	r3, [r7, #10]
 8006f0e:	1d3b      	adds	r3, r7, #4
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	463b      	mov	r3, r7
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	441a      	add	r2, r3
 8006f1c:	897b      	ldrh	r3, [r7, #10]
 8006f1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	8013      	strh	r3, [r2, #0]
 8006f32:	e3f3      	b.n	800771c <USB_EPStartXfer+0x128c>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006f34:	463b      	mov	r3, r7
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	7b1b      	ldrb	r3, [r3, #12]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f040 809c 	bne.w	8007078 <USB_EPStartXfer+0xbe8>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006f40:	463b      	mov	r3, r7
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	699a      	ldr	r2, [r3, #24]
 8006f46:	463b      	mov	r3, r7
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d90e      	bls.n	8006f6e <USB_EPStartXfer+0xade>
      {
        len = ep->maxpacket;
 8006f50:	463b      	mov	r3, r7
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006f5a:	463b      	mov	r3, r7
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	699a      	ldr	r2, [r3, #24]
 8006f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f64:	1ad2      	subs	r2, r2, r3
 8006f66:	463b      	mov	r3, r7
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	619a      	str	r2, [r3, #24]
 8006f6c:	e008      	b.n	8006f80 <USB_EPStartXfer+0xaf0>
      }
      else
      {
        len = ep->xfer_len;
 8006f6e:	463b      	mov	r3, r7
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	699b      	ldr	r3, [r3, #24]
 8006f74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006f78:	463b      	mov	r3, r7
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006f80:	1d3b      	adds	r3, r7, #4
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f88:	1d3b      	adds	r3, r7, #4
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	461a      	mov	r2, r3
 8006f94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f98:	4413      	add	r3, r2
 8006f9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f9e:	463b      	mov	r3, r7
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	011a      	lsls	r2, r3, #4
 8006fa6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006faa:	4413      	add	r3, r2
 8006fac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006fb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006fb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fc6:	801a      	strh	r2, [r3, #0]
 8006fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fcc:	2b3e      	cmp	r3, #62	; 0x3e
 8006fce:	d923      	bls.n	8007018 <USB_EPStartXfer+0xb88>
 8006fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fd4:	095b      	lsrs	r3, r3, #5
 8006fd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fde:	f003 031f 	and.w	r3, r3, #31
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d104      	bne.n	8006ff0 <USB_EPStartXfer+0xb60>
 8006fe6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fea:	3b01      	subs	r3, #1
 8006fec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ff0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ff4:	881b      	ldrh	r3, [r3, #0]
 8006ff6:	b29a      	uxth	r2, r3
 8006ff8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	029b      	lsls	r3, r3, #10
 8007000:	b29b      	uxth	r3, r3
 8007002:	4313      	orrs	r3, r2
 8007004:	b29b      	uxth	r3, r3
 8007006:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800700a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800700e:	b29a      	uxth	r2, r3
 8007010:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007014:	801a      	strh	r2, [r3, #0]
 8007016:	e353      	b.n	80076c0 <USB_EPStartXfer+0x1230>
 8007018:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800701c:	2b00      	cmp	r3, #0
 800701e:	d10c      	bne.n	800703a <USB_EPStartXfer+0xbaa>
 8007020:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007024:	881b      	ldrh	r3, [r3, #0]
 8007026:	b29b      	uxth	r3, r3
 8007028:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800702c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007030:	b29a      	uxth	r2, r3
 8007032:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007036:	801a      	strh	r2, [r3, #0]
 8007038:	e342      	b.n	80076c0 <USB_EPStartXfer+0x1230>
 800703a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800703e:	085b      	lsrs	r3, r3, #1
 8007040:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007044:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007048:	f003 0301 	and.w	r3, r3, #1
 800704c:	2b00      	cmp	r3, #0
 800704e:	d004      	beq.n	800705a <USB_EPStartXfer+0xbca>
 8007050:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007054:	3301      	adds	r3, #1
 8007056:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800705a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800705e:	881b      	ldrh	r3, [r3, #0]
 8007060:	b29a      	uxth	r2, r3
 8007062:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007066:	b29b      	uxth	r3, r3
 8007068:	029b      	lsls	r3, r3, #10
 800706a:	b29b      	uxth	r3, r3
 800706c:	4313      	orrs	r3, r2
 800706e:	b29a      	uxth	r2, r3
 8007070:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007074:	801a      	strh	r2, [r3, #0]
 8007076:	e323      	b.n	80076c0 <USB_EPStartXfer+0x1230>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007078:	463b      	mov	r3, r7
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	78db      	ldrb	r3, [r3, #3]
 800707e:	2b02      	cmp	r3, #2
 8007080:	f040 81a9 	bne.w	80073d6 <USB_EPStartXfer+0xf46>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007084:	463b      	mov	r3, r7
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	785b      	ldrb	r3, [r3, #1]
 800708a:	2b00      	cmp	r3, #0
 800708c:	f040 8082 	bne.w	8007194 <USB_EPStartXfer+0xd04>
 8007090:	1d3b      	adds	r3, r7, #4
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007098:	1d3b      	adds	r3, r7, #4
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	461a      	mov	r2, r3
 80070a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070a8:	4413      	add	r3, r2
 80070aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80070ae:	463b      	mov	r3, r7
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	011a      	lsls	r2, r3, #4
 80070b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070ba:	4413      	add	r3, r2
 80070bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80070c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070c8:	881b      	ldrh	r3, [r3, #0]
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070d6:	801a      	strh	r2, [r3, #0]
 80070d8:	463b      	mov	r3, r7
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	2b3e      	cmp	r3, #62	; 0x3e
 80070e0:	d925      	bls.n	800712e <USB_EPStartXfer+0xc9e>
 80070e2:	463b      	mov	r3, r7
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	095b      	lsrs	r3, r3, #5
 80070ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070ee:	463b      	mov	r3, r7
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	f003 031f 	and.w	r3, r3, #31
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d104      	bne.n	8007106 <USB_EPStartXfer+0xc76>
 80070fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007100:	3b01      	subs	r3, #1
 8007102:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007106:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800710a:	881b      	ldrh	r3, [r3, #0]
 800710c:	b29a      	uxth	r2, r3
 800710e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007112:	b29b      	uxth	r3, r3
 8007114:	029b      	lsls	r3, r3, #10
 8007116:	b29b      	uxth	r3, r3
 8007118:	4313      	orrs	r3, r2
 800711a:	b29b      	uxth	r3, r3
 800711c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007120:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007124:	b29a      	uxth	r2, r3
 8007126:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800712a:	801a      	strh	r2, [r3, #0]
 800712c:	e058      	b.n	80071e0 <USB_EPStartXfer+0xd50>
 800712e:	463b      	mov	r3, r7
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10c      	bne.n	8007152 <USB_EPStartXfer+0xcc2>
 8007138:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800713c:	881b      	ldrh	r3, [r3, #0]
 800713e:	b29b      	uxth	r3, r3
 8007140:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007144:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007148:	b29a      	uxth	r2, r3
 800714a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800714e:	801a      	strh	r2, [r3, #0]
 8007150:	e046      	b.n	80071e0 <USB_EPStartXfer+0xd50>
 8007152:	463b      	mov	r3, r7
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	085b      	lsrs	r3, r3, #1
 800715a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800715e:	463b      	mov	r3, r7
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	f003 0301 	and.w	r3, r3, #1
 8007168:	2b00      	cmp	r3, #0
 800716a:	d004      	beq.n	8007176 <USB_EPStartXfer+0xce6>
 800716c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007170:	3301      	adds	r3, #1
 8007172:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007176:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800717a:	881b      	ldrh	r3, [r3, #0]
 800717c:	b29a      	uxth	r2, r3
 800717e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007182:	b29b      	uxth	r3, r3
 8007184:	029b      	lsls	r3, r3, #10
 8007186:	b29b      	uxth	r3, r3
 8007188:	4313      	orrs	r3, r2
 800718a:	b29a      	uxth	r2, r3
 800718c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007190:	801a      	strh	r2, [r3, #0]
 8007192:	e025      	b.n	80071e0 <USB_EPStartXfer+0xd50>
 8007194:	463b      	mov	r3, r7
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	785b      	ldrb	r3, [r3, #1]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d120      	bne.n	80071e0 <USB_EPStartXfer+0xd50>
 800719e:	1d3b      	adds	r3, r7, #4
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071a6:	1d3b      	adds	r3, r7, #4
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	461a      	mov	r2, r3
 80071b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071b6:	4413      	add	r3, r2
 80071b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071bc:	463b      	mov	r3, r7
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	011a      	lsls	r2, r3, #4
 80071c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071c8:	4413      	add	r3, r2
 80071ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071d2:	463b      	mov	r3, r7
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	b29a      	uxth	r2, r3
 80071da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80071de:	801a      	strh	r2, [r3, #0]
 80071e0:	1d3b      	adds	r3, r7, #4
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80071e8:	463b      	mov	r3, r7
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	785b      	ldrb	r3, [r3, #1]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f040 8082 	bne.w	80072f8 <USB_EPStartXfer+0xe68>
 80071f4:	1d3b      	adds	r3, r7, #4
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80071fc:	1d3b      	adds	r3, r7, #4
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007204:	b29b      	uxth	r3, r3
 8007206:	461a      	mov	r2, r3
 8007208:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800720c:	4413      	add	r3, r2
 800720e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007212:	463b      	mov	r3, r7
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	011a      	lsls	r2, r3, #4
 800721a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800721e:	4413      	add	r3, r2
 8007220:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007224:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007228:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800722c:	881b      	ldrh	r3, [r3, #0]
 800722e:	b29b      	uxth	r3, r3
 8007230:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007234:	b29a      	uxth	r2, r3
 8007236:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800723a:	801a      	strh	r2, [r3, #0]
 800723c:	463b      	mov	r3, r7
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	2b3e      	cmp	r3, #62	; 0x3e
 8007244:	d925      	bls.n	8007292 <USB_EPStartXfer+0xe02>
 8007246:	463b      	mov	r3, r7
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	095b      	lsrs	r3, r3, #5
 800724e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007252:	463b      	mov	r3, r7
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	f003 031f 	and.w	r3, r3, #31
 800725c:	2b00      	cmp	r3, #0
 800725e:	d104      	bne.n	800726a <USB_EPStartXfer+0xdda>
 8007260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007264:	3b01      	subs	r3, #1
 8007266:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800726a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800726e:	881b      	ldrh	r3, [r3, #0]
 8007270:	b29a      	uxth	r2, r3
 8007272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007276:	b29b      	uxth	r3, r3
 8007278:	029b      	lsls	r3, r3, #10
 800727a:	b29b      	uxth	r3, r3
 800727c:	4313      	orrs	r3, r2
 800727e:	b29b      	uxth	r3, r3
 8007280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007288:	b29a      	uxth	r2, r3
 800728a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800728e:	801a      	strh	r2, [r3, #0]
 8007290:	e054      	b.n	800733c <USB_EPStartXfer+0xeac>
 8007292:	463b      	mov	r3, r7
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d10c      	bne.n	80072b6 <USB_EPStartXfer+0xe26>
 800729c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072a0:	881b      	ldrh	r3, [r3, #0]
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072b2:	801a      	strh	r2, [r3, #0]
 80072b4:	e042      	b.n	800733c <USB_EPStartXfer+0xeac>
 80072b6:	463b      	mov	r3, r7
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	085b      	lsrs	r3, r3, #1
 80072be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072c2:	463b      	mov	r3, r7
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	f003 0301 	and.w	r3, r3, #1
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d004      	beq.n	80072da <USB_EPStartXfer+0xe4a>
 80072d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072d4:	3301      	adds	r3, #1
 80072d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072de:	881b      	ldrh	r3, [r3, #0]
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	029b      	lsls	r3, r3, #10
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	4313      	orrs	r3, r2
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072f4:	801a      	strh	r2, [r3, #0]
 80072f6:	e021      	b.n	800733c <USB_EPStartXfer+0xeac>
 80072f8:	463b      	mov	r3, r7
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	785b      	ldrb	r3, [r3, #1]
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d11c      	bne.n	800733c <USB_EPStartXfer+0xeac>
 8007302:	1d3b      	adds	r3, r7, #4
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800730a:	b29b      	uxth	r3, r3
 800730c:	461a      	mov	r2, r3
 800730e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007312:	4413      	add	r3, r2
 8007314:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007318:	463b      	mov	r3, r7
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	011a      	lsls	r2, r3, #4
 8007320:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007324:	4413      	add	r3, r2
 8007326:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800732a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800732e:	463b      	mov	r3, r7
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	b29a      	uxth	r2, r3
 8007336:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800733a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800733c:	463b      	mov	r3, r7
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	69db      	ldr	r3, [r3, #28]
 8007342:	2b00      	cmp	r3, #0
 8007344:	f000 81bc 	beq.w	80076c0 <USB_EPStartXfer+0x1230>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007348:	1d3b      	adds	r3, r7, #4
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	463b      	mov	r3, r7
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	4413      	add	r3, r2
 8007356:	881b      	ldrh	r3, [r3, #0]
 8007358:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800735c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007364:	2b00      	cmp	r3, #0
 8007366:	d005      	beq.n	8007374 <USB_EPStartXfer+0xee4>
 8007368:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800736c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007370:	2b00      	cmp	r3, #0
 8007372:	d10d      	bne.n	8007390 <USB_EPStartXfer+0xf00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007374:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800737c:	2b00      	cmp	r3, #0
 800737e:	f040 819f 	bne.w	80076c0 <USB_EPStartXfer+0x1230>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007382:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800738a:	2b00      	cmp	r3, #0
 800738c:	f040 8198 	bne.w	80076c0 <USB_EPStartXfer+0x1230>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007390:	1d3b      	adds	r3, r7, #4
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	463b      	mov	r3, r7
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	4413      	add	r3, r2
 800739e:	881b      	ldrh	r3, [r3, #0]
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073aa:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80073ae:	1d3b      	adds	r3, r7, #4
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	463b      	mov	r3, r7
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	441a      	add	r2, r3
 80073bc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80073c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	8013      	strh	r3, [r2, #0]
 80073d4:	e174      	b.n	80076c0 <USB_EPStartXfer+0x1230>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80073d6:	463b      	mov	r3, r7
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	78db      	ldrb	r3, [r3, #3]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	f040 816d 	bne.w	80076bc <USB_EPStartXfer+0x122c>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80073e2:	463b      	mov	r3, r7
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	699a      	ldr	r2, [r3, #24]
 80073e8:	463b      	mov	r3, r7
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d90e      	bls.n	8007410 <USB_EPStartXfer+0xf80>
        {
          len = ep->maxpacket;
 80073f2:	463b      	mov	r3, r7
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80073fc:	463b      	mov	r3, r7
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	699a      	ldr	r2, [r3, #24]
 8007402:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007406:	1ad2      	subs	r2, r2, r3
 8007408:	463b      	mov	r3, r7
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	619a      	str	r2, [r3, #24]
 800740e:	e008      	b.n	8007422 <USB_EPStartXfer+0xf92>
        }
        else
        {
          len = ep->xfer_len;
 8007410:	463b      	mov	r3, r7
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	699b      	ldr	r3, [r3, #24]
 8007416:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800741a:	463b      	mov	r3, r7
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2200      	movs	r2, #0
 8007420:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007422:	463b      	mov	r3, r7
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	785b      	ldrb	r3, [r3, #1]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d17b      	bne.n	8007524 <USB_EPStartXfer+0x1094>
 800742c:	1d3b      	adds	r3, r7, #4
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007434:	1d3b      	adds	r3, r7, #4
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800743c:	b29b      	uxth	r3, r3
 800743e:	461a      	mov	r2, r3
 8007440:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007444:	4413      	add	r3, r2
 8007446:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800744a:	463b      	mov	r3, r7
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	011a      	lsls	r2, r3, #4
 8007452:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007456:	4413      	add	r3, r2
 8007458:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800745c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007460:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007464:	881b      	ldrh	r3, [r3, #0]
 8007466:	b29b      	uxth	r3, r3
 8007468:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800746c:	b29a      	uxth	r2, r3
 800746e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007472:	801a      	strh	r2, [r3, #0]
 8007474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007478:	2b3e      	cmp	r3, #62	; 0x3e
 800747a:	d923      	bls.n	80074c4 <USB_EPStartXfer+0x1034>
 800747c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007480:	095b      	lsrs	r3, r3, #5
 8007482:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800748a:	f003 031f 	and.w	r3, r3, #31
 800748e:	2b00      	cmp	r3, #0
 8007490:	d104      	bne.n	800749c <USB_EPStartXfer+0x100c>
 8007492:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007496:	3b01      	subs	r3, #1
 8007498:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800749c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074a0:	881b      	ldrh	r3, [r3, #0]
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	029b      	lsls	r3, r3, #10
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	4313      	orrs	r3, r2
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074c0:	801a      	strh	r2, [r3, #0]
 80074c2:	e054      	b.n	800756e <USB_EPStartXfer+0x10de>
 80074c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10c      	bne.n	80074e6 <USB_EPStartXfer+0x1056>
 80074cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074d0:	881b      	ldrh	r3, [r3, #0]
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074dc:	b29a      	uxth	r2, r3
 80074de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074e2:	801a      	strh	r2, [r3, #0]
 80074e4:	e043      	b.n	800756e <USB_EPStartXfer+0x10de>
 80074e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ea:	085b      	lsrs	r3, r3, #1
 80074ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80074f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074f4:	f003 0301 	and.w	r3, r3, #1
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d004      	beq.n	8007506 <USB_EPStartXfer+0x1076>
 80074fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007500:	3301      	adds	r3, #1
 8007502:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007506:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800750a:	881b      	ldrh	r3, [r3, #0]
 800750c:	b29a      	uxth	r2, r3
 800750e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007512:	b29b      	uxth	r3, r3
 8007514:	029b      	lsls	r3, r3, #10
 8007516:	b29b      	uxth	r3, r3
 8007518:	4313      	orrs	r3, r2
 800751a:	b29a      	uxth	r2, r3
 800751c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007520:	801a      	strh	r2, [r3, #0]
 8007522:	e024      	b.n	800756e <USB_EPStartXfer+0x10de>
 8007524:	463b      	mov	r3, r7
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	785b      	ldrb	r3, [r3, #1]
 800752a:	2b01      	cmp	r3, #1
 800752c:	d11f      	bne.n	800756e <USB_EPStartXfer+0x10de>
 800752e:	1d3b      	adds	r3, r7, #4
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007536:	1d3b      	adds	r3, r7, #4
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800753e:	b29b      	uxth	r3, r3
 8007540:	461a      	mov	r2, r3
 8007542:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007546:	4413      	add	r3, r2
 8007548:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800754c:	463b      	mov	r3, r7
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	011a      	lsls	r2, r3, #4
 8007554:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007558:	4413      	add	r3, r2
 800755a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800755e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007562:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007566:	b29a      	uxth	r2, r3
 8007568:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800756c:	801a      	strh	r2, [r3, #0]
 800756e:	1d3b      	adds	r3, r7, #4
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007576:	463b      	mov	r3, r7
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	785b      	ldrb	r3, [r3, #1]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d17b      	bne.n	8007678 <USB_EPStartXfer+0x11e8>
 8007580:	1d3b      	adds	r3, r7, #4
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007588:	1d3b      	adds	r3, r7, #4
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007590:	b29b      	uxth	r3, r3
 8007592:	461a      	mov	r2, r3
 8007594:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007598:	4413      	add	r3, r2
 800759a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800759e:	463b      	mov	r3, r7
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	011a      	lsls	r2, r3, #4
 80075a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80075aa:	4413      	add	r3, r2
 80075ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80075b8:	881b      	ldrh	r3, [r3, #0]
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80075c6:	801a      	strh	r2, [r3, #0]
 80075c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075cc:	2b3e      	cmp	r3, #62	; 0x3e
 80075ce:	d923      	bls.n	8007618 <USB_EPStartXfer+0x1188>
 80075d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075d4:	095b      	lsrs	r3, r3, #5
 80075d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80075da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075de:	f003 031f 	and.w	r3, r3, #31
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d104      	bne.n	80075f0 <USB_EPStartXfer+0x1160>
 80075e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075ea:	3b01      	subs	r3, #1
 80075ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80075f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80075f4:	881b      	ldrh	r3, [r3, #0]
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	029b      	lsls	r3, r3, #10
 8007600:	b29b      	uxth	r3, r3
 8007602:	4313      	orrs	r3, r2
 8007604:	b29b      	uxth	r3, r3
 8007606:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800760a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800760e:	b29a      	uxth	r2, r3
 8007610:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007614:	801a      	strh	r2, [r3, #0]
 8007616:	e053      	b.n	80076c0 <USB_EPStartXfer+0x1230>
 8007618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10c      	bne.n	800763a <USB_EPStartXfer+0x11aa>
 8007620:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007624:	881b      	ldrh	r3, [r3, #0]
 8007626:	b29b      	uxth	r3, r3
 8007628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800762c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007630:	b29a      	uxth	r2, r3
 8007632:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007636:	801a      	strh	r2, [r3, #0]
 8007638:	e042      	b.n	80076c0 <USB_EPStartXfer+0x1230>
 800763a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800763e:	085b      	lsrs	r3, r3, #1
 8007640:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007644:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007648:	f003 0301 	and.w	r3, r3, #1
 800764c:	2b00      	cmp	r3, #0
 800764e:	d004      	beq.n	800765a <USB_EPStartXfer+0x11ca>
 8007650:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007654:	3301      	adds	r3, #1
 8007656:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800765a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800765e:	881b      	ldrh	r3, [r3, #0]
 8007660:	b29a      	uxth	r2, r3
 8007662:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007666:	b29b      	uxth	r3, r3
 8007668:	029b      	lsls	r3, r3, #10
 800766a:	b29b      	uxth	r3, r3
 800766c:	4313      	orrs	r3, r2
 800766e:	b29a      	uxth	r2, r3
 8007670:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007674:	801a      	strh	r2, [r3, #0]
 8007676:	e023      	b.n	80076c0 <USB_EPStartXfer+0x1230>
 8007678:	463b      	mov	r3, r7
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	785b      	ldrb	r3, [r3, #1]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d11e      	bne.n	80076c0 <USB_EPStartXfer+0x1230>
 8007682:	1d3b      	adds	r3, r7, #4
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800768a:	b29b      	uxth	r3, r3
 800768c:	461a      	mov	r2, r3
 800768e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007692:	4413      	add	r3, r2
 8007694:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007698:	463b      	mov	r3, r7
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	011a      	lsls	r2, r3, #4
 80076a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80076a4:	4413      	add	r3, r2
 80076a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80076aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80076b8:	801a      	strh	r2, [r3, #0]
 80076ba:	e001      	b.n	80076c0 <USB_EPStartXfer+0x1230>
      }
      else
      {
        return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e02e      	b.n	800771e <USB_EPStartXfer+0x128e>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80076c0:	1d3b      	adds	r3, r7, #4
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	463b      	mov	r3, r7
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4413      	add	r3, r2
 80076ce:	881b      	ldrh	r3, [r3, #0]
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076da:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80076de:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80076e2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80076e6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80076ea:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80076ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80076f2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80076f6:	1d3b      	adds	r3, r7, #4
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	463b      	mov	r3, r7
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	441a      	add	r2, r3
 8007704:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007708:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800770c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007710:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007718:	b29b      	uxth	r3, r3
 800771a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	785b      	ldrb	r3, [r3, #1]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d020      	beq.n	800777c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4413      	add	r3, r2
 8007744:	881b      	ldrh	r3, [r3, #0]
 8007746:	b29b      	uxth	r3, r3
 8007748:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800774c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007750:	81bb      	strh	r3, [r7, #12]
 8007752:	89bb      	ldrh	r3, [r7, #12]
 8007754:	f083 0310 	eor.w	r3, r3, #16
 8007758:	81bb      	strh	r3, [r7, #12]
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	441a      	add	r2, r3
 8007764:	89bb      	ldrh	r3, [r7, #12]
 8007766:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800776a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800776e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007776:	b29b      	uxth	r3, r3
 8007778:	8013      	strh	r3, [r2, #0]
 800777a:	e01f      	b.n	80077bc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	4413      	add	r3, r2
 8007786:	881b      	ldrh	r3, [r3, #0]
 8007788:	b29b      	uxth	r3, r3
 800778a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800778e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007792:	81fb      	strh	r3, [r7, #14]
 8007794:	89fb      	ldrh	r3, [r7, #14]
 8007796:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800779a:	81fb      	strh	r3, [r7, #14]
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	441a      	add	r2, r3
 80077a6:	89fb      	ldrh	r3, [r7, #14]
 80077a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bc80      	pop	{r7}
 80077c6:	4770      	bx	lr

080077c8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b087      	sub	sp, #28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	7b1b      	ldrb	r3, [r3, #12]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f040 809d 	bne.w	8007916 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	785b      	ldrb	r3, [r3, #1]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d04c      	beq.n	800787e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	4413      	add	r3, r2
 80077ee:	881b      	ldrh	r3, [r3, #0]
 80077f0:	823b      	strh	r3, [r7, #16]
 80077f2:	8a3b      	ldrh	r3, [r7, #16]
 80077f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d01b      	beq.n	8007834 <USB_EPClearStall+0x6c>
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	4413      	add	r3, r2
 8007806:	881b      	ldrh	r3, [r3, #0]
 8007808:	b29b      	uxth	r3, r3
 800780a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800780e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007812:	81fb      	strh	r3, [r7, #14]
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	441a      	add	r2, r3
 800781e:	89fb      	ldrh	r3, [r7, #14]
 8007820:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007824:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007828:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800782c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007830:	b29b      	uxth	r3, r3
 8007832:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	78db      	ldrb	r3, [r3, #3]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d06c      	beq.n	8007916 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	4413      	add	r3, r2
 8007846:	881b      	ldrh	r3, [r3, #0]
 8007848:	b29b      	uxth	r3, r3
 800784a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800784e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007852:	81bb      	strh	r3, [r7, #12]
 8007854:	89bb      	ldrh	r3, [r7, #12]
 8007856:	f083 0320 	eor.w	r3, r3, #32
 800785a:	81bb      	strh	r3, [r7, #12]
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	441a      	add	r2, r3
 8007866:	89bb      	ldrh	r3, [r7, #12]
 8007868:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800786c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007878:	b29b      	uxth	r3, r3
 800787a:	8013      	strh	r3, [r2, #0]
 800787c:	e04b      	b.n	8007916 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	4413      	add	r3, r2
 8007888:	881b      	ldrh	r3, [r3, #0]
 800788a:	82fb      	strh	r3, [r7, #22]
 800788c:	8afb      	ldrh	r3, [r7, #22]
 800788e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007892:	2b00      	cmp	r3, #0
 8007894:	d01b      	beq.n	80078ce <USB_EPClearStall+0x106>
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	4413      	add	r3, r2
 80078a0:	881b      	ldrh	r3, [r3, #0]
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ac:	82bb      	strh	r3, [r7, #20]
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	441a      	add	r2, r3
 80078b8:	8abb      	ldrh	r3, [r7, #20]
 80078ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80078c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	4413      	add	r3, r2
 80078d8:	881b      	ldrh	r3, [r3, #0]
 80078da:	b29b      	uxth	r3, r3
 80078dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078e4:	827b      	strh	r3, [r7, #18]
 80078e6:	8a7b      	ldrh	r3, [r7, #18]
 80078e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80078ec:	827b      	strh	r3, [r7, #18]
 80078ee:	8a7b      	ldrh	r3, [r7, #18]
 80078f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80078f4:	827b      	strh	r3, [r7, #18]
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	441a      	add	r2, r3
 8007900:	8a7b      	ldrh	r3, [r7, #18]
 8007902:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007906:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800790a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800790e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007912:	b29b      	uxth	r3, r3
 8007914:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	371c      	adds	r7, #28
 800791c:	46bd      	mov	sp, r7
 800791e:	bc80      	pop	{r7}
 8007920:	4770      	bx	lr

08007922 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007922:	b480      	push	{r7}
 8007924:	b083      	sub	sp, #12
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
 800792a:	460b      	mov	r3, r1
 800792c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800792e:	78fb      	ldrb	r3, [r7, #3]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d103      	bne.n	800793c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2280      	movs	r2, #128	; 0x80
 8007938:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	370c      	adds	r7, #12
 8007942:	46bd      	mov	sp, r7
 8007944:	bc80      	pop	{r7}
 8007946:	4770      	bx	lr

08007948 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	370c      	adds	r7, #12
 8007956:	46bd      	mov	sp, r7
 8007958:	bc80      	pop	{r7}
 800795a:	4770      	bx	lr

0800795c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	bc80      	pop	{r7}
 800796e:	4770      	bx	lr

08007970 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800797e:	b29b      	uxth	r3, r3
 8007980:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007982:	68fb      	ldr	r3, [r7, #12]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3714      	adds	r7, #20
 8007988:	46bd      	mov	sp, r7
 800798a:	bc80      	pop	{r7}
 800798c:	4770      	bx	lr

0800798e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800798e:	b480      	push	{r7}
 8007990:	b083      	sub	sp, #12
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
 8007996:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	370c      	adds	r7, #12
 800799e:	46bd      	mov	sp, r7
 80079a0:	bc80      	pop	{r7}
 80079a2:	4770      	bx	lr

080079a4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b08b      	sub	sp, #44	; 0x2c
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	4611      	mov	r1, r2
 80079b0:	461a      	mov	r2, r3
 80079b2:	460b      	mov	r3, r1
 80079b4:	80fb      	strh	r3, [r7, #6]
 80079b6:	4613      	mov	r3, r2
 80079b8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80079ba:	88bb      	ldrh	r3, [r7, #4]
 80079bc:	3301      	adds	r3, #1
 80079be:	085b      	lsrs	r3, r3, #1
 80079c0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80079ca:	88fb      	ldrh	r3, [r7, #6]
 80079cc:	005a      	lsls	r2, r3, #1
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	4413      	add	r3, r2
 80079d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079d6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	627b      	str	r3, [r7, #36]	; 0x24
 80079dc:	e01e      	b.n	8007a1c <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	3301      	adds	r3, #1
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	021b      	lsls	r3, r3, #8
 80079ec:	b21a      	sxth	r2, r3
 80079ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	b21b      	sxth	r3, r3
 80079f6:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80079f8:	6a3b      	ldr	r3, [r7, #32]
 80079fa:	8a7a      	ldrh	r2, [r7, #18]
 80079fc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80079fe:	6a3b      	ldr	r3, [r7, #32]
 8007a00:	3302      	adds	r3, #2
 8007a02:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007a04:	6a3b      	ldr	r3, [r7, #32]
 8007a06:	3302      	adds	r3, #2
 8007a08:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	3301      	adds	r3, #1
 8007a14:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8007a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1dd      	bne.n	80079de <USB_WritePMA+0x3a>
  }
}
 8007a22:	bf00      	nop
 8007a24:	bf00      	nop
 8007a26:	372c      	adds	r7, #44	; 0x2c
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bc80      	pop	{r7}
 8007a2c:	4770      	bx	lr

08007a2e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007a2e:	b480      	push	{r7}
 8007a30:	b08b      	sub	sp, #44	; 0x2c
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	60f8      	str	r0, [r7, #12]
 8007a36:	60b9      	str	r1, [r7, #8]
 8007a38:	4611      	mov	r1, r2
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	80fb      	strh	r3, [r7, #6]
 8007a40:	4613      	mov	r3, r2
 8007a42:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007a44:	88bb      	ldrh	r3, [r7, #4]
 8007a46:	085b      	lsrs	r3, r3, #1
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007a54:	88fb      	ldrh	r3, [r7, #6]
 8007a56:	005a      	lsls	r2, r3, #1
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a60:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	627b      	str	r3, [r7, #36]	; 0x24
 8007a66:	e01b      	b.n	8007aa0 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007a68:	6a3b      	ldr	r3, [r7, #32]
 8007a6a:	881b      	ldrh	r3, [r3, #0]
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007a70:	6a3b      	ldr	r3, [r7, #32]
 8007a72:	3302      	adds	r3, #2
 8007a74:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	3301      	adds	r3, #1
 8007a82:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	0a1b      	lsrs	r3, r3, #8
 8007a88:	b2da      	uxtb	r2, r3
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	3301      	adds	r3, #1
 8007a92:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007a94:	6a3b      	ldr	r3, [r7, #32]
 8007a96:	3302      	adds	r3, #2
 8007a98:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1e0      	bne.n	8007a68 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007aa6:	88bb      	ldrh	r3, [r7, #4]
 8007aa8:	f003 0301 	and.w	r3, r3, #1
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d007      	beq.n	8007ac2 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007ab2:	6a3b      	ldr	r3, [r7, #32]
 8007ab4:	881b      	ldrh	r3, [r3, #0]
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	b2da      	uxtb	r2, r3
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	701a      	strb	r2, [r3, #0]
  }
}
 8007ac2:	bf00      	nop
 8007ac4:	372c      	adds	r7, #44	; 0x2c
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bc80      	pop	{r7}
 8007aca:	4770      	bx	lr

08007acc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	7c1b      	ldrb	r3, [r3, #16]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d115      	bne.n	8007b10 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007ae4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ae8:	2202      	movs	r2, #2
 8007aea:	2181      	movs	r1, #129	; 0x81
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f001 fe30 	bl	8009752 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007af8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007afc:	2202      	movs	r2, #2
 8007afe:	2101      	movs	r1, #1
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f001 fe26 	bl	8009752 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007b0e:	e012      	b.n	8007b36 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007b10:	2340      	movs	r3, #64	; 0x40
 8007b12:	2202      	movs	r2, #2
 8007b14:	2181      	movs	r1, #129	; 0x81
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f001 fe1b 	bl	8009752 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007b22:	2340      	movs	r3, #64	; 0x40
 8007b24:	2202      	movs	r2, #2
 8007b26:	2101      	movs	r1, #1
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f001 fe12 	bl	8009752 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2201      	movs	r2, #1
 8007b32:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007b36:	2308      	movs	r3, #8
 8007b38:	2203      	movs	r2, #3
 8007b3a:	2182      	movs	r1, #130	; 0x82
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f001 fe08 	bl	8009752 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2201      	movs	r2, #1
 8007b46:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007b48:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007b4c:	f001 ff28 	bl	80099a0 <USBD_static_malloc>
 8007b50:	4602      	mov	r2, r0
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d102      	bne.n	8007b68 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007b62:	2301      	movs	r3, #1
 8007b64:	73fb      	strb	r3, [r7, #15]
 8007b66:	e026      	b.n	8007bb6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b6e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	7c1b      	ldrb	r3, [r3, #16]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d109      	bne.n	8007ba6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b9c:	2101      	movs	r1, #1
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f001 fec7 	bl	8009932 <USBD_LL_PrepareReceive>
 8007ba4:	e007      	b.n	8007bb6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007bac:	2340      	movs	r3, #64	; 0x40
 8007bae:	2101      	movs	r1, #1
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f001 febe 	bl	8009932 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007bd0:	2181      	movs	r1, #129	; 0x81
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f001 fde3 	bl	800979e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007bde:	2101      	movs	r1, #1
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f001 fddc 	bl	800979e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007bee:	2182      	movs	r1, #130	; 0x82
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f001 fdd4 	bl	800979e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00e      	beq.n	8007c24 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c16:	4618      	mov	r0, r3
 8007c18:	f001 fece 	bl	80099b8 <USBD_static_free>
    pdev->pClassData = NULL;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b086      	sub	sp, #24
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c3e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007c40:	2300      	movs	r3, #0
 8007c42:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007c44:	2300      	movs	r3, #0
 8007c46:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d039      	beq.n	8007ccc <USBD_CDC_Setup+0x9e>
 8007c58:	2b20      	cmp	r3, #32
 8007c5a:	d17f      	bne.n	8007d5c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	88db      	ldrh	r3, [r3, #6]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d029      	beq.n	8007cb8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	b25b      	sxtb	r3, r3
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	da11      	bge.n	8007c92 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	683a      	ldr	r2, [r7, #0]
 8007c78:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007c7a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c7c:	683a      	ldr	r2, [r7, #0]
 8007c7e:	88d2      	ldrh	r2, [r2, #6]
 8007c80:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007c82:	6939      	ldr	r1, [r7, #16]
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	88db      	ldrh	r3, [r3, #6]
 8007c88:	461a      	mov	r2, r3
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f001 f9d9 	bl	8009042 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007c90:	e06b      	b.n	8007d6a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	785a      	ldrb	r2, [r3, #1]
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	88db      	ldrh	r3, [r3, #6]
 8007ca0:	b2da      	uxtb	r2, r3
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007ca8:	6939      	ldr	r1, [r7, #16]
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	88db      	ldrh	r3, [r3, #6]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f001 f9f4 	bl	800909e <USBD_CtlPrepareRx>
      break;
 8007cb6:	e058      	b.n	8007d6a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	683a      	ldr	r2, [r7, #0]
 8007cc2:	7850      	ldrb	r0, [r2, #1]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	6839      	ldr	r1, [r7, #0]
 8007cc8:	4798      	blx	r3
      break;
 8007cca:	e04e      	b.n	8007d6a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	785b      	ldrb	r3, [r3, #1]
 8007cd0:	2b0b      	cmp	r3, #11
 8007cd2:	d02e      	beq.n	8007d32 <USBD_CDC_Setup+0x104>
 8007cd4:	2b0b      	cmp	r3, #11
 8007cd6:	dc38      	bgt.n	8007d4a <USBD_CDC_Setup+0x11c>
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d002      	beq.n	8007ce2 <USBD_CDC_Setup+0xb4>
 8007cdc:	2b0a      	cmp	r3, #10
 8007cde:	d014      	beq.n	8007d0a <USBD_CDC_Setup+0xdc>
 8007ce0:	e033      	b.n	8007d4a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ce8:	2b03      	cmp	r3, #3
 8007cea:	d107      	bne.n	8007cfc <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007cec:	f107 030c 	add.w	r3, r7, #12
 8007cf0:	2202      	movs	r2, #2
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f001 f9a4 	bl	8009042 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007cfa:	e02e      	b.n	8007d5a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007cfc:	6839      	ldr	r1, [r7, #0]
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f001 f935 	bl	8008f6e <USBD_CtlError>
            ret = USBD_FAIL;
 8007d04:	2302      	movs	r3, #2
 8007d06:	75fb      	strb	r3, [r7, #23]
          break;
 8007d08:	e027      	b.n	8007d5a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d10:	2b03      	cmp	r3, #3
 8007d12:	d107      	bne.n	8007d24 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007d14:	f107 030f 	add.w	r3, r7, #15
 8007d18:	2201      	movs	r2, #1
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f001 f990 	bl	8009042 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d22:	e01a      	b.n	8007d5a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007d24:	6839      	ldr	r1, [r7, #0]
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f001 f921 	bl	8008f6e <USBD_CtlError>
            ret = USBD_FAIL;
 8007d2c:	2302      	movs	r3, #2
 8007d2e:	75fb      	strb	r3, [r7, #23]
          break;
 8007d30:	e013      	b.n	8007d5a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d38:	2b03      	cmp	r3, #3
 8007d3a:	d00d      	beq.n	8007d58 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007d3c:	6839      	ldr	r1, [r7, #0]
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f001 f915 	bl	8008f6e <USBD_CtlError>
            ret = USBD_FAIL;
 8007d44:	2302      	movs	r3, #2
 8007d46:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007d48:	e006      	b.n	8007d58 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f001 f90e 	bl	8008f6e <USBD_CtlError>
          ret = USBD_FAIL;
 8007d52:	2302      	movs	r3, #2
 8007d54:	75fb      	strb	r3, [r7, #23]
          break;
 8007d56:	e000      	b.n	8007d5a <USBD_CDC_Setup+0x12c>
          break;
 8007d58:	bf00      	nop
      }
      break;
 8007d5a:	e006      	b.n	8007d6a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007d5c:	6839      	ldr	r1, [r7, #0]
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f001 f905 	bl	8008f6e <USBD_CtlError>
      ret = USBD_FAIL;
 8007d64:	2302      	movs	r3, #2
 8007d66:	75fb      	strb	r3, [r7, #23]
      break;
 8007d68:	bf00      	nop
  }

  return ret;
 8007d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3718      	adds	r7, #24
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d86:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d8e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d03a      	beq.n	8007e10 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007d9a:	78fa      	ldrb	r2, [r7, #3]
 8007d9c:	6879      	ldr	r1, [r7, #4]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4413      	add	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	440b      	add	r3, r1
 8007da8:	331c      	adds	r3, #28
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d029      	beq.n	8007e04 <USBD_CDC_DataIn+0x90>
 8007db0:	78fa      	ldrb	r2, [r7, #3]
 8007db2:	6879      	ldr	r1, [r7, #4]
 8007db4:	4613      	mov	r3, r2
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4413      	add	r3, r2
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	440b      	add	r3, r1
 8007dbe:	331c      	adds	r3, #28
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	78f9      	ldrb	r1, [r7, #3]
 8007dc4:	68b8      	ldr	r0, [r7, #8]
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	440b      	add	r3, r1
 8007dcc:	00db      	lsls	r3, r3, #3
 8007dce:	4403      	add	r3, r0
 8007dd0:	3320      	adds	r3, #32
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	fbb2 f1f3 	udiv	r1, r2, r3
 8007dd8:	fb03 f301 	mul.w	r3, r3, r1
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d110      	bne.n	8007e04 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007de2:	78fa      	ldrb	r2, [r7, #3]
 8007de4:	6879      	ldr	r1, [r7, #4]
 8007de6:	4613      	mov	r3, r2
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	4413      	add	r3, r2
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	440b      	add	r3, r1
 8007df0:	331c      	adds	r3, #28
 8007df2:	2200      	movs	r2, #0
 8007df4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007df6:	78f9      	ldrb	r1, [r7, #3]
 8007df8:	2300      	movs	r3, #0
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f001 fd75 	bl	80098ec <USBD_LL_Transmit>
 8007e02:	e003      	b.n	8007e0c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	e000      	b.n	8007e12 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007e10:	2302      	movs	r3, #2
  }
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b084      	sub	sp, #16
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
 8007e22:	460b      	mov	r3, r1
 8007e24:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e2c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007e2e:	78fb      	ldrb	r3, [r7, #3]
 8007e30:	4619      	mov	r1, r3
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f001 fda0 	bl	8009978 <USBD_LL_GetRxDataSize>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00d      	beq.n	8007e66 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007e5e:	4611      	mov	r1, r2
 8007e60:	4798      	blx	r3

    return USBD_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	e000      	b.n	8007e68 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007e66:	2302      	movs	r3, #2
  }
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3710      	adds	r7, #16
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e7e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d015      	beq.n	8007eb6 <USBD_CDC_EP0_RxReady+0x46>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007e90:	2bff      	cmp	r3, #255	; 0xff
 8007e92:	d010      	beq.n	8007eb6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007ea2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007eaa:	b292      	uxth	r2, r2
 8007eac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	22ff      	movs	r2, #255	; 0xff
 8007eb2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2243      	movs	r2, #67	; 0x43
 8007ecc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007ece:	4b03      	ldr	r3, [pc, #12]	; (8007edc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bc80      	pop	{r7}
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	20000098 	.word	0x20000098

08007ee0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2243      	movs	r2, #67	; 0x43
 8007eec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007eee:	4b03      	ldr	r3, [pc, #12]	; (8007efc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bc80      	pop	{r7}
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	20000054 	.word	0x20000054

08007f00 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2243      	movs	r2, #67	; 0x43
 8007f0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007f0e:	4b03      	ldr	r3, [pc, #12]	; (8007f1c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bc80      	pop	{r7}
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	200000dc 	.word	0x200000dc

08007f20 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	220a      	movs	r2, #10
 8007f2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007f2e:	4b03      	ldr	r3, [pc, #12]	; (8007f3c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bc80      	pop	{r7}
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	20000010 	.word	0x20000010

08007f40 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007f4a:	2302      	movs	r3, #2
 8007f4c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d005      	beq.n	8007f60 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3714      	adds	r7, #20
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bc80      	pop	{r7}
 8007f6a:	4770      	bx	lr

08007f6c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b087      	sub	sp, #28
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	4613      	mov	r3, r2
 8007f78:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f80:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	68ba      	ldr	r2, [r7, #8]
 8007f86:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007f8a:	88fa      	ldrh	r2, [r7, #6]
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	371c      	adds	r7, #28
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bc80      	pop	{r7}
 8007f9c:	4770      	bx	lr

08007f9e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	b085      	sub	sp, #20
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
 8007fa6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fae:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	683a      	ldr	r2, [r7, #0]
 8007fb4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3714      	adds	r7, #20
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bc80      	pop	{r7}
 8007fc2:	4770      	bx	lr

08007fc4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fd2:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d017      	beq.n	800800e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	7c1b      	ldrb	r3, [r3, #16]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d109      	bne.n	8007ffa <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ff0:	2101      	movs	r1, #1
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f001 fc9d 	bl	8009932 <USBD_LL_PrepareReceive>
 8007ff8:	e007      	b.n	800800a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008000:	2340      	movs	r3, #64	; 0x40
 8008002:	2101      	movs	r1, #1
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f001 fc94 	bl	8009932 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800800a:	2300      	movs	r3, #0
 800800c:	e000      	b.n	8008010 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800800e:	2302      	movs	r3, #2
  }
}
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	4613      	mov	r3, r2
 8008024:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d101      	bne.n	8008030 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800802c:	2302      	movs	r3, #2
 800802e:	e01a      	b.n	8008066 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008036:	2b00      	cmp	r3, #0
 8008038:	d003      	beq.n	8008042 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d003      	beq.n	8008050 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	79fa      	ldrb	r2, [r7, #7]
 800805c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f001 fb02 	bl	8009668 <USBD_LL_Init>

  return USBD_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800806e:	b480      	push	{r7}
 8008070:	b085      	sub	sp, #20
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
 8008076:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008078:	2300      	movs	r3, #0
 800807a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d006      	beq.n	8008090 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	683a      	ldr	r2, [r7, #0]
 8008086:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800808a:	2300      	movs	r3, #0
 800808c:	73fb      	strb	r3, [r7, #15]
 800808e:	e001      	b.n	8008094 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008090:	2302      	movs	r3, #2
 8008092:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008094:	7bfb      	ldrb	r3, [r7, #15]
}
 8008096:	4618      	mov	r0, r3
 8008098:	3714      	adds	r7, #20
 800809a:	46bd      	mov	sp, r7
 800809c:	bc80      	pop	{r7}
 800809e:	4770      	bx	lr

080080a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f001 fb37 	bl	800971c <USBD_LL_Start>

  return USBD_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3708      	adds	r7, #8
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	370c      	adds	r7, #12
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bc80      	pop	{r7}
 80080ca:	4770      	bx	lr

080080cc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	460b      	mov	r3, r1
 80080d6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80080d8:	2302      	movs	r3, #2
 80080da:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00c      	beq.n	8008100 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	78fa      	ldrb	r2, [r7, #3]
 80080f0:	4611      	mov	r1, r2
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	4798      	blx	r3
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d101      	bne.n	8008100 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008100:	7bfb      	ldrb	r3, [r7, #15]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b082      	sub	sp, #8
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
 8008112:	460b      	mov	r3, r1
 8008114:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	78fa      	ldrb	r2, [r7, #3]
 8008120:	4611      	mov	r1, r2
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	4798      	blx	r3

  return USBD_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008140:	6839      	ldr	r1, [r7, #0]
 8008142:	4618      	mov	r0, r3
 8008144:	f000 fed7 	bl	8008ef6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008156:	461a      	mov	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008164:	f003 031f 	and.w	r3, r3, #31
 8008168:	2b02      	cmp	r3, #2
 800816a:	d016      	beq.n	800819a <USBD_LL_SetupStage+0x6a>
 800816c:	2b02      	cmp	r3, #2
 800816e:	d81c      	bhi.n	80081aa <USBD_LL_SetupStage+0x7a>
 8008170:	2b00      	cmp	r3, #0
 8008172:	d002      	beq.n	800817a <USBD_LL_SetupStage+0x4a>
 8008174:	2b01      	cmp	r3, #1
 8008176:	d008      	beq.n	800818a <USBD_LL_SetupStage+0x5a>
 8008178:	e017      	b.n	80081aa <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008180:	4619      	mov	r1, r3
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 f9ca 	bl	800851c <USBD_StdDevReq>
      break;
 8008188:	e01a      	b.n	80081c0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008190:	4619      	mov	r1, r3
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 fa2c 	bl	80085f0 <USBD_StdItfReq>
      break;
 8008198:	e012      	b.n	80081c0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80081a0:	4619      	mov	r1, r3
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fa6c 	bl	8008680 <USBD_StdEPReq>
      break;
 80081a8:	e00a      	b.n	80081c0 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80081b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	4619      	mov	r1, r3
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f001 fb0f 	bl	80097dc <USBD_LL_StallEP>
      break;
 80081be:	bf00      	nop
  }

  return USBD_OK;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3708      	adds	r7, #8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b086      	sub	sp, #24
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	60f8      	str	r0, [r7, #12]
 80081d2:	460b      	mov	r3, r1
 80081d4:	607a      	str	r2, [r7, #4]
 80081d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80081d8:	7afb      	ldrb	r3, [r7, #11]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d14b      	bne.n	8008276 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80081e4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80081ec:	2b03      	cmp	r3, #3
 80081ee:	d134      	bne.n	800825a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	68da      	ldr	r2, [r3, #12]
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d919      	bls.n	8008230 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	68da      	ldr	r2, [r3, #12]
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	691b      	ldr	r3, [r3, #16]
 8008204:	1ad2      	subs	r2, r2, r3
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	68da      	ldr	r2, [r3, #12]
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008212:	429a      	cmp	r2, r3
 8008214:	d203      	bcs.n	800821e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800821a:	b29b      	uxth	r3, r3
 800821c:	e002      	b.n	8008224 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008222:	b29b      	uxth	r3, r3
 8008224:	461a      	mov	r2, r3
 8008226:	6879      	ldr	r1, [r7, #4]
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f000 ff56 	bl	80090da <USBD_CtlContinueRx>
 800822e:	e038      	b.n	80082a2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008236:	691b      	ldr	r3, [r3, #16]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00a      	beq.n	8008252 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008242:	2b03      	cmp	r3, #3
 8008244:	d105      	bne.n	8008252 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f000 ff53 	bl	80090fe <USBD_CtlSendStatus>
 8008258:	e023      	b.n	80082a2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008260:	2b05      	cmp	r3, #5
 8008262:	d11e      	bne.n	80082a2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2200      	movs	r2, #0
 8008268:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800826c:	2100      	movs	r1, #0
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f001 fab4 	bl	80097dc <USBD_LL_StallEP>
 8008274:	e015      	b.n	80082a2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800827c:	699b      	ldr	r3, [r3, #24]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d00d      	beq.n	800829e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008288:	2b03      	cmp	r3, #3
 800828a:	d108      	bne.n	800829e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	7afa      	ldrb	r2, [r7, #11]
 8008296:	4611      	mov	r1, r2
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	4798      	blx	r3
 800829c:	e001      	b.n	80082a2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800829e:	2302      	movs	r3, #2
 80082a0:	e000      	b.n	80082a4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3718      	adds	r7, #24
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b086      	sub	sp, #24
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	460b      	mov	r3, r1
 80082b6:	607a      	str	r2, [r7, #4]
 80082b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80082ba:	7afb      	ldrb	r3, [r7, #11]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d17f      	bne.n	80083c0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	3314      	adds	r3, #20
 80082c4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	d15c      	bne.n	800838a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	68da      	ldr	r2, [r3, #12]
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	429a      	cmp	r2, r3
 80082da:	d915      	bls.n	8008308 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	68da      	ldr	r2, [r3, #12]
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	1ad2      	subs	r2, r2, r3
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	461a      	mov	r2, r3
 80082f2:	6879      	ldr	r1, [r7, #4]
 80082f4:	68f8      	ldr	r0, [r7, #12]
 80082f6:	f000 fec0 	bl	800907a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082fa:	2300      	movs	r3, #0
 80082fc:	2200      	movs	r2, #0
 80082fe:	2100      	movs	r1, #0
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f001 fb16 	bl	8009932 <USBD_LL_PrepareReceive>
 8008306:	e04e      	b.n	80083a6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	697a      	ldr	r2, [r7, #20]
 800830e:	6912      	ldr	r2, [r2, #16]
 8008310:	fbb3 f1f2 	udiv	r1, r3, r2
 8008314:	fb02 f201 	mul.w	r2, r2, r1
 8008318:	1a9b      	subs	r3, r3, r2
 800831a:	2b00      	cmp	r3, #0
 800831c:	d11c      	bne.n	8008358 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	689a      	ldr	r2, [r3, #8]
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008326:	429a      	cmp	r2, r3
 8008328:	d316      	bcc.n	8008358 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	689a      	ldr	r2, [r3, #8]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008334:	429a      	cmp	r2, r3
 8008336:	d20f      	bcs.n	8008358 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008338:	2200      	movs	r2, #0
 800833a:	2100      	movs	r1, #0
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f000 fe9c 	bl	800907a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800834a:	2300      	movs	r3, #0
 800834c:	2200      	movs	r2, #0
 800834e:	2100      	movs	r1, #0
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f001 faee 	bl	8009932 <USBD_LL_PrepareReceive>
 8008356:	e026      	b.n	80083a6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00a      	beq.n	800837a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800836a:	2b03      	cmp	r3, #3
 800836c:	d105      	bne.n	800837a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800837a:	2180      	movs	r1, #128	; 0x80
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f001 fa2d 	bl	80097dc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	f000 fece 	bl	8009124 <USBD_CtlReceiveStatus>
 8008388:	e00d      	b.n	80083a6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008390:	2b04      	cmp	r3, #4
 8008392:	d004      	beq.n	800839e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800839a:	2b00      	cmp	r3, #0
 800839c:	d103      	bne.n	80083a6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800839e:	2180      	movs	r1, #128	; 0x80
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f001 fa1b 	bl	80097dc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d11d      	bne.n	80083ec <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	f7ff fe81 	bl	80080b8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80083be:	e015      	b.n	80083ec <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083c6:	695b      	ldr	r3, [r3, #20]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d00d      	beq.n	80083e8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80083d2:	2b03      	cmp	r3, #3
 80083d4:	d108      	bne.n	80083e8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083dc:	695b      	ldr	r3, [r3, #20]
 80083de:	7afa      	ldrb	r2, [r7, #11]
 80083e0:	4611      	mov	r1, r2
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	4798      	blx	r3
 80083e6:	e001      	b.n	80083ec <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80083e8:	2302      	movs	r3, #2
 80083ea:	e000      	b.n	80083ee <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3718      	adds	r7, #24
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b082      	sub	sp, #8
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80083fe:	2340      	movs	r3, #64	; 0x40
 8008400:	2200      	movs	r2, #0
 8008402:	2100      	movs	r1, #0
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f001 f9a4 	bl	8009752 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2201      	movs	r2, #1
 800840e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2240      	movs	r2, #64	; 0x40
 8008416:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800841a:	2340      	movs	r3, #64	; 0x40
 800841c:	2200      	movs	r2, #0
 800841e:	2180      	movs	r1, #128	; 0x80
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f001 f996 	bl	8009752 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2201      	movs	r2, #1
 800842a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2240      	movs	r2, #64	; 0x40
 8008430:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2201      	movs	r2, #1
 8008436:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008456:	2b00      	cmp	r3, #0
 8008458:	d009      	beq.n	800846e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	6852      	ldr	r2, [r2, #4]
 8008466:	b2d2      	uxtb	r2, r2
 8008468:	4611      	mov	r1, r2
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	4798      	blx	r3
  }

  return USBD_OK;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3708      	adds	r7, #8
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	460b      	mov	r3, r1
 8008482:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	78fa      	ldrb	r2, [r7, #3]
 8008488:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	bc80      	pop	{r7}
 8008494:	4770      	bx	lr

08008496 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008496:	b480      	push	{r7}
 8008498:	b083      	sub	sp, #12
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2204      	movs	r2, #4
 80084ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80084b2:	2300      	movs	r3, #0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bc80      	pop	{r7}
 80084bc:	4770      	bx	lr

080084be <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80084be:	b480      	push	{r7}
 80084c0:	b083      	sub	sp, #12
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084cc:	2b04      	cmp	r3, #4
 80084ce:	d105      	bne.n	80084dc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	370c      	adds	r7, #12
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bc80      	pop	{r7}
 80084e6:	4770      	bx	lr

080084e8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084f6:	2b03      	cmp	r3, #3
 80084f8:	d10b      	bne.n	8008512 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008500:	69db      	ldr	r3, [r3, #28]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d005      	beq.n	8008512 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800850c:	69db      	ldr	r3, [r3, #28]
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008512:	2300      	movs	r3, #0
}
 8008514:	4618      	mov	r0, r3
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008526:	2300      	movs	r3, #0
 8008528:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008532:	2b40      	cmp	r3, #64	; 0x40
 8008534:	d005      	beq.n	8008542 <USBD_StdDevReq+0x26>
 8008536:	2b40      	cmp	r3, #64	; 0x40
 8008538:	d84f      	bhi.n	80085da <USBD_StdDevReq+0xbe>
 800853a:	2b00      	cmp	r3, #0
 800853c:	d009      	beq.n	8008552 <USBD_StdDevReq+0x36>
 800853e:	2b20      	cmp	r3, #32
 8008540:	d14b      	bne.n	80085da <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	4798      	blx	r3
      break;
 8008550:	e048      	b.n	80085e4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	785b      	ldrb	r3, [r3, #1]
 8008556:	2b09      	cmp	r3, #9
 8008558:	d839      	bhi.n	80085ce <USBD_StdDevReq+0xb2>
 800855a:	a201      	add	r2, pc, #4	; (adr r2, 8008560 <USBD_StdDevReq+0x44>)
 800855c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008560:	080085b1 	.word	0x080085b1
 8008564:	080085c5 	.word	0x080085c5
 8008568:	080085cf 	.word	0x080085cf
 800856c:	080085bb 	.word	0x080085bb
 8008570:	080085cf 	.word	0x080085cf
 8008574:	08008593 	.word	0x08008593
 8008578:	08008589 	.word	0x08008589
 800857c:	080085cf 	.word	0x080085cf
 8008580:	080085a7 	.word	0x080085a7
 8008584:	0800859d 	.word	0x0800859d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008588:	6839      	ldr	r1, [r7, #0]
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 f9dc 	bl	8008948 <USBD_GetDescriptor>
          break;
 8008590:	e022      	b.n	80085d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008592:	6839      	ldr	r1, [r7, #0]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 fb3f 	bl	8008c18 <USBD_SetAddress>
          break;
 800859a:	e01d      	b.n	80085d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800859c:	6839      	ldr	r1, [r7, #0]
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 fb7e 	bl	8008ca0 <USBD_SetConfig>
          break;
 80085a4:	e018      	b.n	80085d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80085a6:	6839      	ldr	r1, [r7, #0]
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 fc07 	bl	8008dbc <USBD_GetConfig>
          break;
 80085ae:	e013      	b.n	80085d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80085b0:	6839      	ldr	r1, [r7, #0]
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fc37 	bl	8008e26 <USBD_GetStatus>
          break;
 80085b8:	e00e      	b.n	80085d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80085ba:	6839      	ldr	r1, [r7, #0]
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 fc65 	bl	8008e8c <USBD_SetFeature>
          break;
 80085c2:	e009      	b.n	80085d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80085c4:	6839      	ldr	r1, [r7, #0]
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 fc74 	bl	8008eb4 <USBD_ClrFeature>
          break;
 80085cc:	e004      	b.n	80085d8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80085ce:	6839      	ldr	r1, [r7, #0]
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 fccc 	bl	8008f6e <USBD_CtlError>
          break;
 80085d6:	bf00      	nop
      }
      break;
 80085d8:	e004      	b.n	80085e4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80085da:	6839      	ldr	r1, [r7, #0]
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 fcc6 	bl	8008f6e <USBD_CtlError>
      break;
 80085e2:	bf00      	nop
  }

  return ret;
 80085e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop

080085f0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085fa:	2300      	movs	r3, #0
 80085fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008606:	2b40      	cmp	r3, #64	; 0x40
 8008608:	d005      	beq.n	8008616 <USBD_StdItfReq+0x26>
 800860a:	2b40      	cmp	r3, #64	; 0x40
 800860c:	d82e      	bhi.n	800866c <USBD_StdItfReq+0x7c>
 800860e:	2b00      	cmp	r3, #0
 8008610:	d001      	beq.n	8008616 <USBD_StdItfReq+0x26>
 8008612:	2b20      	cmp	r3, #32
 8008614:	d12a      	bne.n	800866c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800861c:	3b01      	subs	r3, #1
 800861e:	2b02      	cmp	r3, #2
 8008620:	d81d      	bhi.n	800865e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	889b      	ldrh	r3, [r3, #4]
 8008626:	b2db      	uxtb	r3, r3
 8008628:	2b01      	cmp	r3, #1
 800862a:	d813      	bhi.n	8008654 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	6839      	ldr	r1, [r7, #0]
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	4798      	blx	r3
 800863a:	4603      	mov	r3, r0
 800863c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	88db      	ldrh	r3, [r3, #6]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d110      	bne.n	8008668 <USBD_StdItfReq+0x78>
 8008646:	7bfb      	ldrb	r3, [r7, #15]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d10d      	bne.n	8008668 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 fd56 	bl	80090fe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008652:	e009      	b.n	8008668 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008654:	6839      	ldr	r1, [r7, #0]
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 fc89 	bl	8008f6e <USBD_CtlError>
          break;
 800865c:	e004      	b.n	8008668 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800865e:	6839      	ldr	r1, [r7, #0]
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 fc84 	bl	8008f6e <USBD_CtlError>
          break;
 8008666:	e000      	b.n	800866a <USBD_StdItfReq+0x7a>
          break;
 8008668:	bf00      	nop
      }
      break;
 800866a:	e004      	b.n	8008676 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800866c:	6839      	ldr	r1, [r7, #0]
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 fc7d 	bl	8008f6e <USBD_CtlError>
      break;
 8008674:	bf00      	nop
  }

  return USBD_OK;
 8008676:	2300      	movs	r3, #0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3710      	adds	r7, #16
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800868a:	2300      	movs	r3, #0
 800868c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	889b      	ldrh	r3, [r3, #4]
 8008692:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800869c:	2b40      	cmp	r3, #64	; 0x40
 800869e:	d007      	beq.n	80086b0 <USBD_StdEPReq+0x30>
 80086a0:	2b40      	cmp	r3, #64	; 0x40
 80086a2:	f200 8146 	bhi.w	8008932 <USBD_StdEPReq+0x2b2>
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00a      	beq.n	80086c0 <USBD_StdEPReq+0x40>
 80086aa:	2b20      	cmp	r3, #32
 80086ac:	f040 8141 	bne.w	8008932 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	6839      	ldr	r1, [r7, #0]
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	4798      	blx	r3
      break;
 80086be:	e13d      	b.n	800893c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086c8:	2b20      	cmp	r3, #32
 80086ca:	d10a      	bne.n	80086e2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	6839      	ldr	r1, [r7, #0]
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	4798      	blx	r3
 80086da:	4603      	mov	r3, r0
 80086dc:	73fb      	strb	r3, [r7, #15]

        return ret;
 80086de:	7bfb      	ldrb	r3, [r7, #15]
 80086e0:	e12d      	b.n	800893e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	785b      	ldrb	r3, [r3, #1]
 80086e6:	2b03      	cmp	r3, #3
 80086e8:	d007      	beq.n	80086fa <USBD_StdEPReq+0x7a>
 80086ea:	2b03      	cmp	r3, #3
 80086ec:	f300 811b 	bgt.w	8008926 <USBD_StdEPReq+0x2a6>
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d072      	beq.n	80087da <USBD_StdEPReq+0x15a>
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d03a      	beq.n	800876e <USBD_StdEPReq+0xee>
 80086f8:	e115      	b.n	8008926 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008700:	2b02      	cmp	r3, #2
 8008702:	d002      	beq.n	800870a <USBD_StdEPReq+0x8a>
 8008704:	2b03      	cmp	r3, #3
 8008706:	d015      	beq.n	8008734 <USBD_StdEPReq+0xb4>
 8008708:	e02b      	b.n	8008762 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800870a:	7bbb      	ldrb	r3, [r7, #14]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00c      	beq.n	800872a <USBD_StdEPReq+0xaa>
 8008710:	7bbb      	ldrb	r3, [r7, #14]
 8008712:	2b80      	cmp	r3, #128	; 0x80
 8008714:	d009      	beq.n	800872a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008716:	7bbb      	ldrb	r3, [r7, #14]
 8008718:	4619      	mov	r1, r3
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f001 f85e 	bl	80097dc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008720:	2180      	movs	r1, #128	; 0x80
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f001 f85a 	bl	80097dc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008728:	e020      	b.n	800876c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800872a:	6839      	ldr	r1, [r7, #0]
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 fc1e 	bl	8008f6e <USBD_CtlError>
              break;
 8008732:	e01b      	b.n	800876c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	885b      	ldrh	r3, [r3, #2]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d10e      	bne.n	800875a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800873c:	7bbb      	ldrb	r3, [r7, #14]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00b      	beq.n	800875a <USBD_StdEPReq+0xda>
 8008742:	7bbb      	ldrb	r3, [r7, #14]
 8008744:	2b80      	cmp	r3, #128	; 0x80
 8008746:	d008      	beq.n	800875a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	88db      	ldrh	r3, [r3, #6]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d104      	bne.n	800875a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008750:	7bbb      	ldrb	r3, [r7, #14]
 8008752:	4619      	mov	r1, r3
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f001 f841 	bl	80097dc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 fccf 	bl	80090fe <USBD_CtlSendStatus>

              break;
 8008760:	e004      	b.n	800876c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008762:	6839      	ldr	r1, [r7, #0]
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 fc02 	bl	8008f6e <USBD_CtlError>
              break;
 800876a:	bf00      	nop
          }
          break;
 800876c:	e0e0      	b.n	8008930 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008774:	2b02      	cmp	r3, #2
 8008776:	d002      	beq.n	800877e <USBD_StdEPReq+0xfe>
 8008778:	2b03      	cmp	r3, #3
 800877a:	d015      	beq.n	80087a8 <USBD_StdEPReq+0x128>
 800877c:	e026      	b.n	80087cc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800877e:	7bbb      	ldrb	r3, [r7, #14]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00c      	beq.n	800879e <USBD_StdEPReq+0x11e>
 8008784:	7bbb      	ldrb	r3, [r7, #14]
 8008786:	2b80      	cmp	r3, #128	; 0x80
 8008788:	d009      	beq.n	800879e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800878a:	7bbb      	ldrb	r3, [r7, #14]
 800878c:	4619      	mov	r1, r3
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f001 f824 	bl	80097dc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008794:	2180      	movs	r1, #128	; 0x80
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f001 f820 	bl	80097dc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800879c:	e01c      	b.n	80087d8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800879e:	6839      	ldr	r1, [r7, #0]
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 fbe4 	bl	8008f6e <USBD_CtlError>
              break;
 80087a6:	e017      	b.n	80087d8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	885b      	ldrh	r3, [r3, #2]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d112      	bne.n	80087d6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80087b0:	7bbb      	ldrb	r3, [r7, #14]
 80087b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d004      	beq.n	80087c4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80087ba:	7bbb      	ldrb	r3, [r7, #14]
 80087bc:	4619      	mov	r1, r3
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f001 f82b 	bl	800981a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 fc9a 	bl	80090fe <USBD_CtlSendStatus>
              }
              break;
 80087ca:	e004      	b.n	80087d6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80087cc:	6839      	ldr	r1, [r7, #0]
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fbcd 	bl	8008f6e <USBD_CtlError>
              break;
 80087d4:	e000      	b.n	80087d8 <USBD_StdEPReq+0x158>
              break;
 80087d6:	bf00      	nop
          }
          break;
 80087d8:	e0aa      	b.n	8008930 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	d002      	beq.n	80087ea <USBD_StdEPReq+0x16a>
 80087e4:	2b03      	cmp	r3, #3
 80087e6:	d032      	beq.n	800884e <USBD_StdEPReq+0x1ce>
 80087e8:	e097      	b.n	800891a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087ea:	7bbb      	ldrb	r3, [r7, #14]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d007      	beq.n	8008800 <USBD_StdEPReq+0x180>
 80087f0:	7bbb      	ldrb	r3, [r7, #14]
 80087f2:	2b80      	cmp	r3, #128	; 0x80
 80087f4:	d004      	beq.n	8008800 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80087f6:	6839      	ldr	r1, [r7, #0]
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 fbb8 	bl	8008f6e <USBD_CtlError>
                break;
 80087fe:	e091      	b.n	8008924 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008800:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008804:	2b00      	cmp	r3, #0
 8008806:	da0b      	bge.n	8008820 <USBD_StdEPReq+0x1a0>
 8008808:	7bbb      	ldrb	r3, [r7, #14]
 800880a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800880e:	4613      	mov	r3, r2
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	4413      	add	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	3310      	adds	r3, #16
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	4413      	add	r3, r2
 800881c:	3304      	adds	r3, #4
 800881e:	e00b      	b.n	8008838 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008820:	7bbb      	ldrb	r3, [r7, #14]
 8008822:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008826:	4613      	mov	r3, r2
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	4413      	add	r3, r2
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	4413      	add	r3, r2
 8008836:	3304      	adds	r3, #4
 8008838:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	2200      	movs	r2, #0
 800883e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	2202      	movs	r2, #2
 8008844:	4619      	mov	r1, r3
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fbfb 	bl	8009042 <USBD_CtlSendData>
              break;
 800884c:	e06a      	b.n	8008924 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800884e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008852:	2b00      	cmp	r3, #0
 8008854:	da11      	bge.n	800887a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008856:	7bbb      	ldrb	r3, [r7, #14]
 8008858:	f003 020f 	and.w	r2, r3, #15
 800885c:	6879      	ldr	r1, [r7, #4]
 800885e:	4613      	mov	r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	4413      	add	r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	440b      	add	r3, r1
 8008868:	3318      	adds	r3, #24
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d117      	bne.n	80088a0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008870:	6839      	ldr	r1, [r7, #0]
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 fb7b 	bl	8008f6e <USBD_CtlError>
                  break;
 8008878:	e054      	b.n	8008924 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800887a:	7bbb      	ldrb	r3, [r7, #14]
 800887c:	f003 020f 	and.w	r2, r3, #15
 8008880:	6879      	ldr	r1, [r7, #4]
 8008882:	4613      	mov	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	4413      	add	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	440b      	add	r3, r1
 800888c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d104      	bne.n	80088a0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008896:	6839      	ldr	r1, [r7, #0]
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 fb68 	bl	8008f6e <USBD_CtlError>
                  break;
 800889e:	e041      	b.n	8008924 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	da0b      	bge.n	80088c0 <USBD_StdEPReq+0x240>
 80088a8:	7bbb      	ldrb	r3, [r7, #14]
 80088aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088ae:	4613      	mov	r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4413      	add	r3, r2
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	3310      	adds	r3, #16
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	4413      	add	r3, r2
 80088bc:	3304      	adds	r3, #4
 80088be:	e00b      	b.n	80088d8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80088c0:	7bbb      	ldrb	r3, [r7, #14]
 80088c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088c6:	4613      	mov	r3, r2
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	4413      	add	r3, r2
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	4413      	add	r3, r2
 80088d6:	3304      	adds	r3, #4
 80088d8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80088da:	7bbb      	ldrb	r3, [r7, #14]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d002      	beq.n	80088e6 <USBD_StdEPReq+0x266>
 80088e0:	7bbb      	ldrb	r3, [r7, #14]
 80088e2:	2b80      	cmp	r3, #128	; 0x80
 80088e4:	d103      	bne.n	80088ee <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	2200      	movs	r2, #0
 80088ea:	601a      	str	r2, [r3, #0]
 80088ec:	e00e      	b.n	800890c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80088ee:	7bbb      	ldrb	r3, [r7, #14]
 80088f0:	4619      	mov	r1, r3
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 ffb0 	bl	8009858 <USBD_LL_IsStallEP>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d003      	beq.n	8008906 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	2201      	movs	r2, #1
 8008902:	601a      	str	r2, [r3, #0]
 8008904:	e002      	b.n	800890c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	2200      	movs	r2, #0
 800890a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	2202      	movs	r2, #2
 8008910:	4619      	mov	r1, r3
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 fb95 	bl	8009042 <USBD_CtlSendData>
              break;
 8008918:	e004      	b.n	8008924 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800891a:	6839      	ldr	r1, [r7, #0]
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 fb26 	bl	8008f6e <USBD_CtlError>
              break;
 8008922:	bf00      	nop
          }
          break;
 8008924:	e004      	b.n	8008930 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008926:	6839      	ldr	r1, [r7, #0]
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 fb20 	bl	8008f6e <USBD_CtlError>
          break;
 800892e:	bf00      	nop
      }
      break;
 8008930:	e004      	b.n	800893c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008932:	6839      	ldr	r1, [r7, #0]
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 fb1a 	bl	8008f6e <USBD_CtlError>
      break;
 800893a:	bf00      	nop
  }

  return ret;
 800893c:	7bfb      	ldrb	r3, [r7, #15]
}
 800893e:	4618      	mov	r0, r3
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
	...

08008948 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008952:	2300      	movs	r3, #0
 8008954:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008956:	2300      	movs	r3, #0
 8008958:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800895a:	2300      	movs	r3, #0
 800895c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	885b      	ldrh	r3, [r3, #2]
 8008962:	0a1b      	lsrs	r3, r3, #8
 8008964:	b29b      	uxth	r3, r3
 8008966:	3b01      	subs	r3, #1
 8008968:	2b06      	cmp	r3, #6
 800896a:	f200 8128 	bhi.w	8008bbe <USBD_GetDescriptor+0x276>
 800896e:	a201      	add	r2, pc, #4	; (adr r2, 8008974 <USBD_GetDescriptor+0x2c>)
 8008970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008974:	08008991 	.word	0x08008991
 8008978:	080089a9 	.word	0x080089a9
 800897c:	080089e9 	.word	0x080089e9
 8008980:	08008bbf 	.word	0x08008bbf
 8008984:	08008bbf 	.word	0x08008bbf
 8008988:	08008b5f 	.word	0x08008b5f
 800898c:	08008b8b 	.word	0x08008b8b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	7c12      	ldrb	r2, [r2, #16]
 800899c:	f107 0108 	add.w	r1, r7, #8
 80089a0:	4610      	mov	r0, r2
 80089a2:	4798      	blx	r3
 80089a4:	60f8      	str	r0, [r7, #12]
      break;
 80089a6:	e112      	b.n	8008bce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	7c1b      	ldrb	r3, [r3, #16]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d10d      	bne.n	80089cc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b8:	f107 0208 	add.w	r2, r7, #8
 80089bc:	4610      	mov	r0, r2
 80089be:	4798      	blx	r3
 80089c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	3301      	adds	r3, #1
 80089c6:	2202      	movs	r2, #2
 80089c8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80089ca:	e100      	b.n	8008bce <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d4:	f107 0208 	add.w	r2, r7, #8
 80089d8:	4610      	mov	r0, r2
 80089da:	4798      	blx	r3
 80089dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	3301      	adds	r3, #1
 80089e2:	2202      	movs	r2, #2
 80089e4:	701a      	strb	r2, [r3, #0]
      break;
 80089e6:	e0f2      	b.n	8008bce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	885b      	ldrh	r3, [r3, #2]
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	2b05      	cmp	r3, #5
 80089f0:	f200 80ac 	bhi.w	8008b4c <USBD_GetDescriptor+0x204>
 80089f4:	a201      	add	r2, pc, #4	; (adr r2, 80089fc <USBD_GetDescriptor+0xb4>)
 80089f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089fa:	bf00      	nop
 80089fc:	08008a15 	.word	0x08008a15
 8008a00:	08008a49 	.word	0x08008a49
 8008a04:	08008a7d 	.word	0x08008a7d
 8008a08:	08008ab1 	.word	0x08008ab1
 8008a0c:	08008ae5 	.word	0x08008ae5
 8008a10:	08008b19 	.word	0x08008b19
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d00b      	beq.n	8008a38 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	7c12      	ldrb	r2, [r2, #16]
 8008a2c:	f107 0108 	add.w	r1, r7, #8
 8008a30:	4610      	mov	r0, r2
 8008a32:	4798      	blx	r3
 8008a34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a36:	e091      	b.n	8008b5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a38:	6839      	ldr	r1, [r7, #0]
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 fa97 	bl	8008f6e <USBD_CtlError>
            err++;
 8008a40:	7afb      	ldrb	r3, [r7, #11]
 8008a42:	3301      	adds	r3, #1
 8008a44:	72fb      	strb	r3, [r7, #11]
          break;
 8008a46:	e089      	b.n	8008b5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d00b      	beq.n	8008a6c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	7c12      	ldrb	r2, [r2, #16]
 8008a60:	f107 0108 	add.w	r1, r7, #8
 8008a64:	4610      	mov	r0, r2
 8008a66:	4798      	blx	r3
 8008a68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a6a:	e077      	b.n	8008b5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a6c:	6839      	ldr	r1, [r7, #0]
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 fa7d 	bl	8008f6e <USBD_CtlError>
            err++;
 8008a74:	7afb      	ldrb	r3, [r7, #11]
 8008a76:	3301      	adds	r3, #1
 8008a78:	72fb      	strb	r3, [r7, #11]
          break;
 8008a7a:	e06f      	b.n	8008b5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d00b      	beq.n	8008aa0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	7c12      	ldrb	r2, [r2, #16]
 8008a94:	f107 0108 	add.w	r1, r7, #8
 8008a98:	4610      	mov	r0, r2
 8008a9a:	4798      	blx	r3
 8008a9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a9e:	e05d      	b.n	8008b5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008aa0:	6839      	ldr	r1, [r7, #0]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 fa63 	bl	8008f6e <USBD_CtlError>
            err++;
 8008aa8:	7afb      	ldrb	r3, [r7, #11]
 8008aaa:	3301      	adds	r3, #1
 8008aac:	72fb      	strb	r3, [r7, #11]
          break;
 8008aae:	e055      	b.n	8008b5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ab6:	691b      	ldr	r3, [r3, #16]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d00b      	beq.n	8008ad4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	7c12      	ldrb	r2, [r2, #16]
 8008ac8:	f107 0108 	add.w	r1, r7, #8
 8008acc:	4610      	mov	r0, r2
 8008ace:	4798      	blx	r3
 8008ad0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ad2:	e043      	b.n	8008b5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ad4:	6839      	ldr	r1, [r7, #0]
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 fa49 	bl	8008f6e <USBD_CtlError>
            err++;
 8008adc:	7afb      	ldrb	r3, [r7, #11]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ae2:	e03b      	b.n	8008b5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008aea:	695b      	ldr	r3, [r3, #20]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00b      	beq.n	8008b08 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008af6:	695b      	ldr	r3, [r3, #20]
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	7c12      	ldrb	r2, [r2, #16]
 8008afc:	f107 0108 	add.w	r1, r7, #8
 8008b00:	4610      	mov	r0, r2
 8008b02:	4798      	blx	r3
 8008b04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b06:	e029      	b.n	8008b5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b08:	6839      	ldr	r1, [r7, #0]
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 fa2f 	bl	8008f6e <USBD_CtlError>
            err++;
 8008b10:	7afb      	ldrb	r3, [r7, #11]
 8008b12:	3301      	adds	r3, #1
 8008b14:	72fb      	strb	r3, [r7, #11]
          break;
 8008b16:	e021      	b.n	8008b5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00b      	beq.n	8008b3c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b2a:	699b      	ldr	r3, [r3, #24]
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	7c12      	ldrb	r2, [r2, #16]
 8008b30:	f107 0108 	add.w	r1, r7, #8
 8008b34:	4610      	mov	r0, r2
 8008b36:	4798      	blx	r3
 8008b38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b3a:	e00f      	b.n	8008b5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b3c:	6839      	ldr	r1, [r7, #0]
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 fa15 	bl	8008f6e <USBD_CtlError>
            err++;
 8008b44:	7afb      	ldrb	r3, [r7, #11]
 8008b46:	3301      	adds	r3, #1
 8008b48:	72fb      	strb	r3, [r7, #11]
          break;
 8008b4a:	e007      	b.n	8008b5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008b4c:	6839      	ldr	r1, [r7, #0]
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 fa0d 	bl	8008f6e <USBD_CtlError>
          err++;
 8008b54:	7afb      	ldrb	r3, [r7, #11]
 8008b56:	3301      	adds	r3, #1
 8008b58:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008b5a:	e038      	b.n	8008bce <USBD_GetDescriptor+0x286>
 8008b5c:	e037      	b.n	8008bce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	7c1b      	ldrb	r3, [r3, #16]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d109      	bne.n	8008b7a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b6e:	f107 0208 	add.w	r2, r7, #8
 8008b72:	4610      	mov	r0, r2
 8008b74:	4798      	blx	r3
 8008b76:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b78:	e029      	b.n	8008bce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b7a:	6839      	ldr	r1, [r7, #0]
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 f9f6 	bl	8008f6e <USBD_CtlError>
        err++;
 8008b82:	7afb      	ldrb	r3, [r7, #11]
 8008b84:	3301      	adds	r3, #1
 8008b86:	72fb      	strb	r3, [r7, #11]
      break;
 8008b88:	e021      	b.n	8008bce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	7c1b      	ldrb	r3, [r3, #16]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d10d      	bne.n	8008bae <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b9a:	f107 0208 	add.w	r2, r7, #8
 8008b9e:	4610      	mov	r0, r2
 8008ba0:	4798      	blx	r3
 8008ba2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	2207      	movs	r2, #7
 8008baa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bac:	e00f      	b.n	8008bce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008bae:	6839      	ldr	r1, [r7, #0]
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 f9dc 	bl	8008f6e <USBD_CtlError>
        err++;
 8008bb6:	7afb      	ldrb	r3, [r7, #11]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	72fb      	strb	r3, [r7, #11]
      break;
 8008bbc:	e007      	b.n	8008bce <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008bbe:	6839      	ldr	r1, [r7, #0]
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 f9d4 	bl	8008f6e <USBD_CtlError>
      err++;
 8008bc6:	7afb      	ldrb	r3, [r7, #11]
 8008bc8:	3301      	adds	r3, #1
 8008bca:	72fb      	strb	r3, [r7, #11]
      break;
 8008bcc:	bf00      	nop
  }

  if (err != 0U)
 8008bce:	7afb      	ldrb	r3, [r7, #11]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d11c      	bne.n	8008c0e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008bd4:	893b      	ldrh	r3, [r7, #8]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d011      	beq.n	8008bfe <USBD_GetDescriptor+0x2b6>
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	88db      	ldrh	r3, [r3, #6]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d00d      	beq.n	8008bfe <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	88da      	ldrh	r2, [r3, #6]
 8008be6:	893b      	ldrh	r3, [r7, #8]
 8008be8:	4293      	cmp	r3, r2
 8008bea:	bf28      	it	cs
 8008bec:	4613      	movcs	r3, r2
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008bf2:	893b      	ldrh	r3, [r7, #8]
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	68f9      	ldr	r1, [r7, #12]
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 fa22 	bl	8009042 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	88db      	ldrh	r3, [r3, #6]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d104      	bne.n	8008c10 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 fa79 	bl	80090fe <USBD_CtlSendStatus>
 8008c0c:	e000      	b.n	8008c10 <USBD_GetDescriptor+0x2c8>
    return;
 8008c0e:	bf00      	nop
    }
  }
}
 8008c10:	3710      	adds	r7, #16
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop

08008c18 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	889b      	ldrh	r3, [r3, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d130      	bne.n	8008c8c <USBD_SetAddress+0x74>
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	88db      	ldrh	r3, [r3, #6]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d12c      	bne.n	8008c8c <USBD_SetAddress+0x74>
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	885b      	ldrh	r3, [r3, #2]
 8008c36:	2b7f      	cmp	r3, #127	; 0x7f
 8008c38:	d828      	bhi.n	8008c8c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	885b      	ldrh	r3, [r3, #2]
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c44:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c4c:	2b03      	cmp	r3, #3
 8008c4e:	d104      	bne.n	8008c5a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008c50:	6839      	ldr	r1, [r7, #0]
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f98b 	bl	8008f6e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c58:	e01d      	b.n	8008c96 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	7bfa      	ldrb	r2, [r7, #15]
 8008c5e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008c62:	7bfb      	ldrb	r3, [r7, #15]
 8008c64:	4619      	mov	r1, r3
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 fe21 	bl	80098ae <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 fa46 	bl	80090fe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008c72:	7bfb      	ldrb	r3, [r7, #15]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d004      	beq.n	8008c82 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2202      	movs	r2, #2
 8008c7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c80:	e009      	b.n	8008c96 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2201      	movs	r2, #1
 8008c86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c8a:	e004      	b.n	8008c96 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008c8c:	6839      	ldr	r1, [r7, #0]
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 f96d 	bl	8008f6e <USBD_CtlError>
  }
}
 8008c94:	bf00      	nop
 8008c96:	bf00      	nop
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
	...

08008ca0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	885b      	ldrh	r3, [r3, #2]
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	4b41      	ldr	r3, [pc, #260]	; (8008db8 <USBD_SetConfig+0x118>)
 8008cb2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008cb4:	4b40      	ldr	r3, [pc, #256]	; (8008db8 <USBD_SetConfig+0x118>)
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d904      	bls.n	8008cc6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008cbc:	6839      	ldr	r1, [r7, #0]
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 f955 	bl	8008f6e <USBD_CtlError>
 8008cc4:	e075      	b.n	8008db2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ccc:	2b02      	cmp	r3, #2
 8008cce:	d002      	beq.n	8008cd6 <USBD_SetConfig+0x36>
 8008cd0:	2b03      	cmp	r3, #3
 8008cd2:	d023      	beq.n	8008d1c <USBD_SetConfig+0x7c>
 8008cd4:	e062      	b.n	8008d9c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008cd6:	4b38      	ldr	r3, [pc, #224]	; (8008db8 <USBD_SetConfig+0x118>)
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d01a      	beq.n	8008d14 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008cde:	4b36      	ldr	r3, [pc, #216]	; (8008db8 <USBD_SetConfig+0x118>)
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2203      	movs	r2, #3
 8008cec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008cf0:	4b31      	ldr	r3, [pc, #196]	; (8008db8 <USBD_SetConfig+0x118>)
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f7ff f9e8 	bl	80080cc <USBD_SetClassConfig>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b02      	cmp	r3, #2
 8008d00:	d104      	bne.n	8008d0c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008d02:	6839      	ldr	r1, [r7, #0]
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 f932 	bl	8008f6e <USBD_CtlError>
            return;
 8008d0a:	e052      	b.n	8008db2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 f9f6 	bl	80090fe <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008d12:	e04e      	b.n	8008db2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 f9f2 	bl	80090fe <USBD_CtlSendStatus>
        break;
 8008d1a:	e04a      	b.n	8008db2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008d1c:	4b26      	ldr	r3, [pc, #152]	; (8008db8 <USBD_SetConfig+0x118>)
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d112      	bne.n	8008d4a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2202      	movs	r2, #2
 8008d28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008d2c:	4b22      	ldr	r3, [pc, #136]	; (8008db8 <USBD_SetConfig+0x118>)
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	461a      	mov	r2, r3
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008d36:	4b20      	ldr	r3, [pc, #128]	; (8008db8 <USBD_SetConfig+0x118>)
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f7ff f9e4 	bl	800810a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 f9db 	bl	80090fe <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008d48:	e033      	b.n	8008db2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008d4a:	4b1b      	ldr	r3, [pc, #108]	; (8008db8 <USBD_SetConfig+0x118>)
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	461a      	mov	r2, r3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d01d      	beq.n	8008d94 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	4619      	mov	r1, r3
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f7ff f9d2 	bl	800810a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008d66:	4b14      	ldr	r3, [pc, #80]	; (8008db8 <USBD_SetConfig+0x118>)
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008d70:	4b11      	ldr	r3, [pc, #68]	; (8008db8 <USBD_SetConfig+0x118>)
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	4619      	mov	r1, r3
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f7ff f9a8 	bl	80080cc <USBD_SetClassConfig>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b02      	cmp	r3, #2
 8008d80:	d104      	bne.n	8008d8c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008d82:	6839      	ldr	r1, [r7, #0]
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 f8f2 	bl	8008f6e <USBD_CtlError>
            return;
 8008d8a:	e012      	b.n	8008db2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 f9b6 	bl	80090fe <USBD_CtlSendStatus>
        break;
 8008d92:	e00e      	b.n	8008db2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 f9b2 	bl	80090fe <USBD_CtlSendStatus>
        break;
 8008d9a:	e00a      	b.n	8008db2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008d9c:	6839      	ldr	r1, [r7, #0]
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f8e5 	bl	8008f6e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008da4:	4b04      	ldr	r3, [pc, #16]	; (8008db8 <USBD_SetConfig+0x118>)
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	4619      	mov	r1, r3
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f7ff f9ad 	bl	800810a <USBD_ClrClassConfig>
        break;
 8008db0:	bf00      	nop
    }
  }
}
 8008db2:	3708      	adds	r7, #8
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	200004e8 	.word	0x200004e8

08008dbc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	88db      	ldrh	r3, [r3, #6]
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d004      	beq.n	8008dd8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 f8cc 	bl	8008f6e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008dd6:	e022      	b.n	8008e1e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dde:	2b02      	cmp	r3, #2
 8008de0:	dc02      	bgt.n	8008de8 <USBD_GetConfig+0x2c>
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	dc03      	bgt.n	8008dee <USBD_GetConfig+0x32>
 8008de6:	e015      	b.n	8008e14 <USBD_GetConfig+0x58>
 8008de8:	2b03      	cmp	r3, #3
 8008dea:	d00b      	beq.n	8008e04 <USBD_GetConfig+0x48>
 8008dec:	e012      	b.n	8008e14 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2200      	movs	r2, #0
 8008df2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	3308      	adds	r3, #8
 8008df8:	2201      	movs	r2, #1
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 f920 	bl	8009042 <USBD_CtlSendData>
        break;
 8008e02:	e00c      	b.n	8008e1e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	3304      	adds	r3, #4
 8008e08:	2201      	movs	r2, #1
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f918 	bl	8009042 <USBD_CtlSendData>
        break;
 8008e12:	e004      	b.n	8008e1e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008e14:	6839      	ldr	r1, [r7, #0]
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 f8a9 	bl	8008f6e <USBD_CtlError>
        break;
 8008e1c:	bf00      	nop
}
 8008e1e:	bf00      	nop
 8008e20:	3708      	adds	r7, #8
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b082      	sub	sp, #8
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
 8008e2e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e36:	3b01      	subs	r3, #1
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d81e      	bhi.n	8008e7a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	88db      	ldrh	r3, [r3, #6]
 8008e40:	2b02      	cmp	r3, #2
 8008e42:	d004      	beq.n	8008e4e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008e44:	6839      	ldr	r1, [r7, #0]
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 f891 	bl	8008f6e <USBD_CtlError>
        break;
 8008e4c:	e01a      	b.n	8008e84 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2201      	movs	r2, #1
 8008e52:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d005      	beq.n	8008e6a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	f043 0202 	orr.w	r2, r3, #2
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	330c      	adds	r3, #12
 8008e6e:	2202      	movs	r2, #2
 8008e70:	4619      	mov	r1, r3
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 f8e5 	bl	8009042 <USBD_CtlSendData>
      break;
 8008e78:	e004      	b.n	8008e84 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008e7a:	6839      	ldr	r1, [r7, #0]
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 f876 	bl	8008f6e <USBD_CtlError>
      break;
 8008e82:	bf00      	nop
  }
}
 8008e84:	bf00      	nop
 8008e86:	3708      	adds	r7, #8
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	885b      	ldrh	r3, [r3, #2]
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d106      	bne.n	8008eac <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 f929 	bl	80090fe <USBD_CtlSendStatus>
  }
}
 8008eac:	bf00      	nop
 8008eae:	3708      	adds	r7, #8
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	d80b      	bhi.n	8008ee2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	885b      	ldrh	r3, [r3, #2]
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d10c      	bne.n	8008eec <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 f90f 	bl	80090fe <USBD_CtlSendStatus>
      }
      break;
 8008ee0:	e004      	b.n	8008eec <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008ee2:	6839      	ldr	r1, [r7, #0]
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 f842 	bl	8008f6e <USBD_CtlError>
      break;
 8008eea:	e000      	b.n	8008eee <USBD_ClrFeature+0x3a>
      break;
 8008eec:	bf00      	nop
  }
}
 8008eee:	bf00      	nop
 8008ef0:	3708      	adds	r7, #8
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008ef6:	b480      	push	{r7}
 8008ef8:	b083      	sub	sp, #12
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
 8008efe:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	781a      	ldrb	r2, [r3, #0]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	785a      	ldrb	r2, [r3, #1]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	3302      	adds	r3, #2
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	b29a      	uxth	r2, r3
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	3303      	adds	r3, #3
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	021b      	lsls	r3, r3, #8
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	4413      	add	r3, r2
 8008f26:	b29a      	uxth	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	3304      	adds	r3, #4
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	b29a      	uxth	r2, r3
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	3305      	adds	r3, #5
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	021b      	lsls	r3, r3, #8
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	4413      	add	r3, r2
 8008f42:	b29a      	uxth	r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	3306      	adds	r3, #6
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	3307      	adds	r3, #7
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	021b      	lsls	r3, r3, #8
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	4413      	add	r3, r2
 8008f5e:	b29a      	uxth	r2, r3
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	80da      	strh	r2, [r3, #6]

}
 8008f64:	bf00      	nop
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bc80      	pop	{r7}
 8008f6c:	4770      	bx	lr

08008f6e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b082      	sub	sp, #8
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
 8008f76:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008f78:	2180      	movs	r1, #128	; 0x80
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fc2e 	bl	80097dc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008f80:	2100      	movs	r1, #0
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 fc2a 	bl	80097dc <USBD_LL_StallEP>
}
 8008f88:	bf00      	nop
 8008f8a:	3708      	adds	r7, #8
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b086      	sub	sp, #24
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d032      	beq.n	800900c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008fa6:	68f8      	ldr	r0, [r7, #12]
 8008fa8:	f000 f834 	bl	8009014 <USBD_GetLen>
 8008fac:	4603      	mov	r3, r0
 8008fae:	3301      	adds	r3, #1
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	005b      	lsls	r3, r3, #1
 8008fb4:	b29a      	uxth	r2, r3
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008fba:	7dfb      	ldrb	r3, [r7, #23]
 8008fbc:	1c5a      	adds	r2, r3, #1
 8008fbe:	75fa      	strb	r2, [r7, #23]
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	7812      	ldrb	r2, [r2, #0]
 8008fca:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008fcc:	7dfb      	ldrb	r3, [r7, #23]
 8008fce:	1c5a      	adds	r2, r3, #1
 8008fd0:	75fa      	strb	r2, [r7, #23]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	2203      	movs	r2, #3
 8008fda:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008fdc:	e012      	b.n	8009004 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	1c5a      	adds	r2, r3, #1
 8008fe2:	60fa      	str	r2, [r7, #12]
 8008fe4:	7dfa      	ldrb	r2, [r7, #23]
 8008fe6:	1c51      	adds	r1, r2, #1
 8008fe8:	75f9      	strb	r1, [r7, #23]
 8008fea:	4611      	mov	r1, r2
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	440a      	add	r2, r1
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008ff4:	7dfb      	ldrb	r3, [r7, #23]
 8008ff6:	1c5a      	adds	r2, r3, #1
 8008ff8:	75fa      	strb	r2, [r7, #23]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	4413      	add	r3, r2
 8009000:	2200      	movs	r2, #0
 8009002:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d1e8      	bne.n	8008fde <USBD_GetString+0x4e>
    }
  }
}
 800900c:	bf00      	nop
 800900e:	3718      	adds	r7, #24
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009014:	b480      	push	{r7}
 8009016:	b085      	sub	sp, #20
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800901c:	2300      	movs	r3, #0
 800901e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009020:	e005      	b.n	800902e <USBD_GetLen+0x1a>
  {
    len++;
 8009022:	7bfb      	ldrb	r3, [r7, #15]
 8009024:	3301      	adds	r3, #1
 8009026:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	3301      	adds	r3, #1
 800902c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1f5      	bne.n	8009022 <USBD_GetLen+0xe>
  }

  return len;
 8009036:	7bfb      	ldrb	r3, [r7, #15]
}
 8009038:	4618      	mov	r0, r3
 800903a:	3714      	adds	r7, #20
 800903c:	46bd      	mov	sp, r7
 800903e:	bc80      	pop	{r7}
 8009040:	4770      	bx	lr

08009042 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b084      	sub	sp, #16
 8009046:	af00      	add	r7, sp, #0
 8009048:	60f8      	str	r0, [r7, #12]
 800904a:	60b9      	str	r1, [r7, #8]
 800904c:	4613      	mov	r3, r2
 800904e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2202      	movs	r2, #2
 8009054:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009058:	88fa      	ldrh	r2, [r7, #6]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800905e:	88fa      	ldrh	r2, [r7, #6]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009064:	88fb      	ldrh	r3, [r7, #6]
 8009066:	68ba      	ldr	r2, [r7, #8]
 8009068:	2100      	movs	r1, #0
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f000 fc3e 	bl	80098ec <USBD_LL_Transmit>

  return USBD_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b084      	sub	sp, #16
 800907e:	af00      	add	r7, sp, #0
 8009080:	60f8      	str	r0, [r7, #12]
 8009082:	60b9      	str	r1, [r7, #8]
 8009084:	4613      	mov	r3, r2
 8009086:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009088:	88fb      	ldrh	r3, [r7, #6]
 800908a:	68ba      	ldr	r2, [r7, #8]
 800908c:	2100      	movs	r1, #0
 800908e:	68f8      	ldr	r0, [r7, #12]
 8009090:	f000 fc2c 	bl	80098ec <USBD_LL_Transmit>

  return USBD_OK;
 8009094:	2300      	movs	r3, #0
}
 8009096:	4618      	mov	r0, r3
 8009098:	3710      	adds	r7, #16
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b084      	sub	sp, #16
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	60f8      	str	r0, [r7, #12]
 80090a6:	60b9      	str	r1, [r7, #8]
 80090a8:	4613      	mov	r3, r2
 80090aa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2203      	movs	r2, #3
 80090b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80090b4:	88fa      	ldrh	r2, [r7, #6]
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80090bc:	88fa      	ldrh	r2, [r7, #6]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80090c4:	88fb      	ldrh	r3, [r7, #6]
 80090c6:	68ba      	ldr	r2, [r7, #8]
 80090c8:	2100      	movs	r1, #0
 80090ca:	68f8      	ldr	r0, [r7, #12]
 80090cc:	f000 fc31 	bl	8009932 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090d0:	2300      	movs	r3, #0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}

080090da <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80090da:	b580      	push	{r7, lr}
 80090dc:	b084      	sub	sp, #16
 80090de:	af00      	add	r7, sp, #0
 80090e0:	60f8      	str	r0, [r7, #12]
 80090e2:	60b9      	str	r1, [r7, #8]
 80090e4:	4613      	mov	r3, r2
 80090e6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80090e8:	88fb      	ldrh	r3, [r7, #6]
 80090ea:	68ba      	ldr	r2, [r7, #8]
 80090ec:	2100      	movs	r1, #0
 80090ee:	68f8      	ldr	r0, [r7, #12]
 80090f0:	f000 fc1f 	bl	8009932 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b082      	sub	sp, #8
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2204      	movs	r2, #4
 800910a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800910e:	2300      	movs	r3, #0
 8009110:	2200      	movs	r2, #0
 8009112:	2100      	movs	r1, #0
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 fbe9 	bl	80098ec <USBD_LL_Transmit>

  return USBD_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	3708      	adds	r7, #8
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2205      	movs	r2, #5
 8009130:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009134:	2300      	movs	r3, #0
 8009136:	2200      	movs	r2, #0
 8009138:	2100      	movs	r1, #0
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 fbf9 	bl	8009932 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009140:	2300      	movs	r3, #0
}
 8009142:	4618      	mov	r0, r3
 8009144:	3708      	adds	r7, #8
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
	...

0800914c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009150:	2200      	movs	r2, #0
 8009152:	4912      	ldr	r1, [pc, #72]	; (800919c <MX_USB_DEVICE_Init+0x50>)
 8009154:	4812      	ldr	r0, [pc, #72]	; (80091a0 <MX_USB_DEVICE_Init+0x54>)
 8009156:	f7fe ff5f 	bl	8008018 <USBD_Init>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d001      	beq.n	8009164 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009160:	f7f8 fada 	bl	8001718 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009164:	490f      	ldr	r1, [pc, #60]	; (80091a4 <MX_USB_DEVICE_Init+0x58>)
 8009166:	480e      	ldr	r0, [pc, #56]	; (80091a0 <MX_USB_DEVICE_Init+0x54>)
 8009168:	f7fe ff81 	bl	800806e <USBD_RegisterClass>
 800916c:	4603      	mov	r3, r0
 800916e:	2b00      	cmp	r3, #0
 8009170:	d001      	beq.n	8009176 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009172:	f7f8 fad1 	bl	8001718 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009176:	490c      	ldr	r1, [pc, #48]	; (80091a8 <MX_USB_DEVICE_Init+0x5c>)
 8009178:	4809      	ldr	r0, [pc, #36]	; (80091a0 <MX_USB_DEVICE_Init+0x54>)
 800917a:	f7fe fee1 	bl	8007f40 <USBD_CDC_RegisterInterface>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d001      	beq.n	8009188 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009184:	f7f8 fac8 	bl	8001718 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009188:	4805      	ldr	r0, [pc, #20]	; (80091a0 <MX_USB_DEVICE_Init+0x54>)
 800918a:	f7fe ff89 	bl	80080a0 <USBD_Start>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d001      	beq.n	8009198 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009194:	f7f8 fac0 	bl	8001718 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009198:	bf00      	nop
 800919a:	bd80      	pop	{r7, pc}
 800919c:	20000130 	.word	0x20000130
 80091a0:	20000718 	.word	0x20000718
 80091a4:	2000001c 	.word	0x2000001c
 80091a8:	20000120 	.word	0x20000120

080091ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80091b0:	2200      	movs	r2, #0
 80091b2:	4905      	ldr	r1, [pc, #20]	; (80091c8 <CDC_Init_FS+0x1c>)
 80091b4:	4805      	ldr	r0, [pc, #20]	; (80091cc <CDC_Init_FS+0x20>)
 80091b6:	f7fe fed9 	bl	8007f6c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80091ba:	4905      	ldr	r1, [pc, #20]	; (80091d0 <CDC_Init_FS+0x24>)
 80091bc:	4803      	ldr	r0, [pc, #12]	; (80091cc <CDC_Init_FS+0x20>)
 80091be:	f7fe feee 	bl	8007f9e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80091c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	20000dc4 	.word	0x20000dc4
 80091cc:	20000718 	.word	0x20000718
 80091d0:	200009dc 	.word	0x200009dc

080091d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80091d4:	b480      	push	{r7}
 80091d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80091d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80091da:	4618      	mov	r0, r3
 80091dc:	46bd      	mov	sp, r7
 80091de:	bc80      	pop	{r7}
 80091e0:	4770      	bx	lr
	...

080091e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	4603      	mov	r3, r0
 80091ec:	6039      	str	r1, [r7, #0]
 80091ee:	71fb      	strb	r3, [r7, #7]
 80091f0:	4613      	mov	r3, r2
 80091f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80091f4:	79fb      	ldrb	r3, [r7, #7]
 80091f6:	2b23      	cmp	r3, #35	; 0x23
 80091f8:	d84a      	bhi.n	8009290 <CDC_Control_FS+0xac>
 80091fa:	a201      	add	r2, pc, #4	; (adr r2, 8009200 <CDC_Control_FS+0x1c>)
 80091fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009200:	08009291 	.word	0x08009291
 8009204:	08009291 	.word	0x08009291
 8009208:	08009291 	.word	0x08009291
 800920c:	08009291 	.word	0x08009291
 8009210:	08009291 	.word	0x08009291
 8009214:	08009291 	.word	0x08009291
 8009218:	08009291 	.word	0x08009291
 800921c:	08009291 	.word	0x08009291
 8009220:	08009291 	.word	0x08009291
 8009224:	08009291 	.word	0x08009291
 8009228:	08009291 	.word	0x08009291
 800922c:	08009291 	.word	0x08009291
 8009230:	08009291 	.word	0x08009291
 8009234:	08009291 	.word	0x08009291
 8009238:	08009291 	.word	0x08009291
 800923c:	08009291 	.word	0x08009291
 8009240:	08009291 	.word	0x08009291
 8009244:	08009291 	.word	0x08009291
 8009248:	08009291 	.word	0x08009291
 800924c:	08009291 	.word	0x08009291
 8009250:	08009291 	.word	0x08009291
 8009254:	08009291 	.word	0x08009291
 8009258:	08009291 	.word	0x08009291
 800925c:	08009291 	.word	0x08009291
 8009260:	08009291 	.word	0x08009291
 8009264:	08009291 	.word	0x08009291
 8009268:	08009291 	.word	0x08009291
 800926c:	08009291 	.word	0x08009291
 8009270:	08009291 	.word	0x08009291
 8009274:	08009291 	.word	0x08009291
 8009278:	08009291 	.word	0x08009291
 800927c:	08009291 	.word	0x08009291
 8009280:	08009291 	.word	0x08009291
 8009284:	08009291 	.word	0x08009291
 8009288:	08009291 	.word	0x08009291
 800928c:	08009291 	.word	0x08009291
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009290:	bf00      	nop
  }

  return (USBD_OK);
 8009292:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009294:	4618      	mov	r0, r3
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	bc80      	pop	{r7}
 800929c:	4770      	bx	lr
 800929e:	bf00      	nop

080092a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80092aa:	6879      	ldr	r1, [r7, #4]
 80092ac:	4805      	ldr	r0, [pc, #20]	; (80092c4 <CDC_Receive_FS+0x24>)
 80092ae:	f7fe fe76 	bl	8007f9e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80092b2:	4804      	ldr	r0, [pc, #16]	; (80092c4 <CDC_Receive_FS+0x24>)
 80092b4:	f7fe fe86 	bl	8007fc4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80092b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3708      	adds	r7, #8
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	20000718 	.word	0x20000718

080092c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	4603      	mov	r3, r0
 80092d0:	6039      	str	r1, [r7, #0]
 80092d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	2212      	movs	r2, #18
 80092d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80092da:	4b03      	ldr	r3, [pc, #12]	; (80092e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80092dc:	4618      	mov	r0, r3
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bc80      	pop	{r7}
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop
 80092e8:	2000014c 	.word	0x2000014c

080092ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	4603      	mov	r3, r0
 80092f4:	6039      	str	r1, [r7, #0]
 80092f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	2204      	movs	r2, #4
 80092fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80092fe:	4b03      	ldr	r3, [pc, #12]	; (800930c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009300:	4618      	mov	r0, r3
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	bc80      	pop	{r7}
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop
 800930c:	20000160 	.word	0x20000160

08009310 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	4603      	mov	r3, r0
 8009318:	6039      	str	r1, [r7, #0]
 800931a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800931c:	79fb      	ldrb	r3, [r7, #7]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d105      	bne.n	800932e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009322:	683a      	ldr	r2, [r7, #0]
 8009324:	4907      	ldr	r1, [pc, #28]	; (8009344 <USBD_FS_ProductStrDescriptor+0x34>)
 8009326:	4808      	ldr	r0, [pc, #32]	; (8009348 <USBD_FS_ProductStrDescriptor+0x38>)
 8009328:	f7ff fe32 	bl	8008f90 <USBD_GetString>
 800932c:	e004      	b.n	8009338 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800932e:	683a      	ldr	r2, [r7, #0]
 8009330:	4904      	ldr	r1, [pc, #16]	; (8009344 <USBD_FS_ProductStrDescriptor+0x34>)
 8009332:	4805      	ldr	r0, [pc, #20]	; (8009348 <USBD_FS_ProductStrDescriptor+0x38>)
 8009334:	f7ff fe2c 	bl	8008f90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009338:	4b02      	ldr	r3, [pc, #8]	; (8009344 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800933a:	4618      	mov	r0, r3
 800933c:	3708      	adds	r7, #8
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	200011ac 	.word	0x200011ac
 8009348:	0800a340 	.word	0x0800a340

0800934c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	4603      	mov	r3, r0
 8009354:	6039      	str	r1, [r7, #0]
 8009356:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009358:	683a      	ldr	r2, [r7, #0]
 800935a:	4904      	ldr	r1, [pc, #16]	; (800936c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800935c:	4804      	ldr	r0, [pc, #16]	; (8009370 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800935e:	f7ff fe17 	bl	8008f90 <USBD_GetString>
  return USBD_StrDesc;
 8009362:	4b02      	ldr	r3, [pc, #8]	; (800936c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009364:	4618      	mov	r0, r3
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	200011ac 	.word	0x200011ac
 8009370:	0800a358 	.word	0x0800a358

08009374 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	4603      	mov	r3, r0
 800937c:	6039      	str	r1, [r7, #0]
 800937e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	221a      	movs	r2, #26
 8009384:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009386:	f000 f843 	bl	8009410 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800938a:	4b02      	ldr	r3, [pc, #8]	; (8009394 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800938c:	4618      	mov	r0, r3
 800938e:	3708      	adds	r7, #8
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	20000164 	.word	0x20000164

08009398 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	4603      	mov	r3, r0
 80093a0:	6039      	str	r1, [r7, #0]
 80093a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80093a4:	79fb      	ldrb	r3, [r7, #7]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d105      	bne.n	80093b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80093aa:	683a      	ldr	r2, [r7, #0]
 80093ac:	4907      	ldr	r1, [pc, #28]	; (80093cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80093ae:	4808      	ldr	r0, [pc, #32]	; (80093d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80093b0:	f7ff fdee 	bl	8008f90 <USBD_GetString>
 80093b4:	e004      	b.n	80093c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80093b6:	683a      	ldr	r2, [r7, #0]
 80093b8:	4904      	ldr	r1, [pc, #16]	; (80093cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80093ba:	4805      	ldr	r0, [pc, #20]	; (80093d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80093bc:	f7ff fde8 	bl	8008f90 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093c0:	4b02      	ldr	r3, [pc, #8]	; (80093cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3708      	adds	r7, #8
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	200011ac 	.word	0x200011ac
 80093d0:	0800a36c 	.word	0x0800a36c

080093d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	4603      	mov	r3, r0
 80093dc:	6039      	str	r1, [r7, #0]
 80093de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093e0:	79fb      	ldrb	r3, [r7, #7]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d105      	bne.n	80093f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80093e6:	683a      	ldr	r2, [r7, #0]
 80093e8:	4907      	ldr	r1, [pc, #28]	; (8009408 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80093ea:	4808      	ldr	r0, [pc, #32]	; (800940c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80093ec:	f7ff fdd0 	bl	8008f90 <USBD_GetString>
 80093f0:	e004      	b.n	80093fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80093f2:	683a      	ldr	r2, [r7, #0]
 80093f4:	4904      	ldr	r1, [pc, #16]	; (8009408 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80093f6:	4805      	ldr	r0, [pc, #20]	; (800940c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80093f8:	f7ff fdca 	bl	8008f90 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093fc:	4b02      	ldr	r3, [pc, #8]	; (8009408 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3708      	adds	r7, #8
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	200011ac 	.word	0x200011ac
 800940c:	0800a378 	.word	0x0800a378

08009410 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009416:	4b0f      	ldr	r3, [pc, #60]	; (8009454 <Get_SerialNum+0x44>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800941c:	4b0e      	ldr	r3, [pc, #56]	; (8009458 <Get_SerialNum+0x48>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009422:	4b0e      	ldr	r3, [pc, #56]	; (800945c <Get_SerialNum+0x4c>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009428:	68fa      	ldr	r2, [r7, #12]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4413      	add	r3, r2
 800942e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d009      	beq.n	800944a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009436:	2208      	movs	r2, #8
 8009438:	4909      	ldr	r1, [pc, #36]	; (8009460 <Get_SerialNum+0x50>)
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f000 f814 	bl	8009468 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009440:	2204      	movs	r2, #4
 8009442:	4908      	ldr	r1, [pc, #32]	; (8009464 <Get_SerialNum+0x54>)
 8009444:	68b8      	ldr	r0, [r7, #8]
 8009446:	f000 f80f 	bl	8009468 <IntToUnicode>
  }
}
 800944a:	bf00      	nop
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	1ffff7e8 	.word	0x1ffff7e8
 8009458:	1ffff7ec 	.word	0x1ffff7ec
 800945c:	1ffff7f0 	.word	0x1ffff7f0
 8009460:	20000166 	.word	0x20000166
 8009464:	20000176 	.word	0x20000176

08009468 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009468:	b480      	push	{r7}
 800946a:	b087      	sub	sp, #28
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	4613      	mov	r3, r2
 8009474:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009476:	2300      	movs	r3, #0
 8009478:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800947a:	2300      	movs	r3, #0
 800947c:	75fb      	strb	r3, [r7, #23]
 800947e:	e027      	b.n	80094d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	0f1b      	lsrs	r3, r3, #28
 8009484:	2b09      	cmp	r3, #9
 8009486:	d80b      	bhi.n	80094a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	0f1b      	lsrs	r3, r3, #28
 800948c:	b2da      	uxtb	r2, r3
 800948e:	7dfb      	ldrb	r3, [r7, #23]
 8009490:	005b      	lsls	r3, r3, #1
 8009492:	4619      	mov	r1, r3
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	440b      	add	r3, r1
 8009498:	3230      	adds	r2, #48	; 0x30
 800949a:	b2d2      	uxtb	r2, r2
 800949c:	701a      	strb	r2, [r3, #0]
 800949e:	e00a      	b.n	80094b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	0f1b      	lsrs	r3, r3, #28
 80094a4:	b2da      	uxtb	r2, r3
 80094a6:	7dfb      	ldrb	r3, [r7, #23]
 80094a8:	005b      	lsls	r3, r3, #1
 80094aa:	4619      	mov	r1, r3
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	440b      	add	r3, r1
 80094b0:	3237      	adds	r2, #55	; 0x37
 80094b2:	b2d2      	uxtb	r2, r2
 80094b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	011b      	lsls	r3, r3, #4
 80094ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80094bc:	7dfb      	ldrb	r3, [r7, #23]
 80094be:	005b      	lsls	r3, r3, #1
 80094c0:	3301      	adds	r3, #1
 80094c2:	68ba      	ldr	r2, [r7, #8]
 80094c4:	4413      	add	r3, r2
 80094c6:	2200      	movs	r2, #0
 80094c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80094ca:	7dfb      	ldrb	r3, [r7, #23]
 80094cc:	3301      	adds	r3, #1
 80094ce:	75fb      	strb	r3, [r7, #23]
 80094d0:	7dfa      	ldrb	r2, [r7, #23]
 80094d2:	79fb      	ldrb	r3, [r7, #7]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d3d3      	bcc.n	8009480 <IntToUnicode+0x18>
  }
}
 80094d8:	bf00      	nop
 80094da:	bf00      	nop
 80094dc:	371c      	adds	r7, #28
 80094de:	46bd      	mov	sp, r7
 80094e0:	bc80      	pop	{r7}
 80094e2:	4770      	bx	lr

080094e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a0d      	ldr	r2, [pc, #52]	; (8009528 <HAL_PCD_MspInit+0x44>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d113      	bne.n	800951e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80094f6:	4b0d      	ldr	r3, [pc, #52]	; (800952c <HAL_PCD_MspInit+0x48>)
 80094f8:	69db      	ldr	r3, [r3, #28]
 80094fa:	4a0c      	ldr	r2, [pc, #48]	; (800952c <HAL_PCD_MspInit+0x48>)
 80094fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009500:	61d3      	str	r3, [r2, #28]
 8009502:	4b0a      	ldr	r3, [pc, #40]	; (800952c <HAL_PCD_MspInit+0x48>)
 8009504:	69db      	ldr	r3, [r3, #28]
 8009506:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800950a:	60fb      	str	r3, [r7, #12]
 800950c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800950e:	2200      	movs	r2, #0
 8009510:	2100      	movs	r1, #0
 8009512:	2014      	movs	r0, #20
 8009514:	f7f8 fc91 	bl	8001e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009518:	2014      	movs	r0, #20
 800951a:	f7f8 fcaa 	bl	8001e72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800951e:	bf00      	nop
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop
 8009528:	40005c00 	.word	0x40005c00
 800952c:	40021000 	.word	0x40021000

08009530 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8009544:	4619      	mov	r1, r3
 8009546:	4610      	mov	r0, r2
 8009548:	f7fe fdf2 	bl	8008130 <USBD_LL_SetupStage>
}
 800954c:	bf00      	nop
 800954e:	3708      	adds	r7, #8
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	460b      	mov	r3, r1
 800955e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 8009566:	78fa      	ldrb	r2, [r7, #3]
 8009568:	6879      	ldr	r1, [r7, #4]
 800956a:	4613      	mov	r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	4413      	add	r3, r2
 8009570:	00db      	lsls	r3, r3, #3
 8009572:	440b      	add	r3, r1
 8009574:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	78fb      	ldrb	r3, [r7, #3]
 800957c:	4619      	mov	r1, r3
 800957e:	f7fe fe24 	bl	80081ca <USBD_LL_DataOutStage>
}
 8009582:	bf00      	nop
 8009584:	3708      	adds	r7, #8
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b082      	sub	sp, #8
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	460b      	mov	r3, r1
 8009594:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 800959c:	78fa      	ldrb	r2, [r7, #3]
 800959e:	6879      	ldr	r1, [r7, #4]
 80095a0:	4613      	mov	r3, r2
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	4413      	add	r3, r2
 80095a6:	00db      	lsls	r3, r3, #3
 80095a8:	440b      	add	r3, r1
 80095aa:	3324      	adds	r3, #36	; 0x24
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	78fb      	ldrb	r3, [r7, #3]
 80095b0:	4619      	mov	r1, r3
 80095b2:	f7fe fe7b 	bl	80082ac <USBD_LL_DataInStage>
}
 80095b6:	bf00      	nop
 80095b8:	3708      	adds	r7, #8
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b082      	sub	sp, #8
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7fe ff8b 	bl	80084e8 <USBD_LL_SOF>
}
 80095d2:	bf00      	nop
 80095d4:	3708      	adds	r7, #8
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b084      	sub	sp, #16
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80095e2:	2301      	movs	r3, #1
 80095e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	799b      	ldrb	r3, [r3, #6]
 80095ea:	2b02      	cmp	r3, #2
 80095ec:	d001      	beq.n	80095f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80095ee:	f7f8 f893 	bl	8001718 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095f8:	7bfa      	ldrb	r2, [r7, #15]
 80095fa:	4611      	mov	r1, r2
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7fe ff3b 	bl	8008478 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009608:	4618      	mov	r0, r3
 800960a:	f7fe fef4 	bl	80083f6 <USBD_LL_Reset>
}
 800960e:	bf00      	nop
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
	...

08009618 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009626:	4618      	mov	r0, r3
 8009628:	f7fe ff35 	bl	8008496 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	7a9b      	ldrb	r3, [r3, #10]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d005      	beq.n	8009640 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009634:	4b04      	ldr	r3, [pc, #16]	; (8009648 <HAL_PCD_SuspendCallback+0x30>)
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	4a03      	ldr	r2, [pc, #12]	; (8009648 <HAL_PCD_SuspendCallback+0x30>)
 800963a:	f043 0306 	orr.w	r3, r3, #6
 800963e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009640:	bf00      	nop
 8009642:	3708      	adds	r7, #8
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	e000ed00 	.word	0xe000ed00

0800964c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800965a:	4618      	mov	r0, r3
 800965c:	f7fe ff2f 	bl	80084be <USBD_LL_Resume>
}
 8009660:	bf00      	nop
 8009662:	3708      	adds	r7, #8
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009670:	4a28      	ldr	r2, [pc, #160]	; (8009714 <USBD_LL_Init+0xac>)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8c2 32d4 	str.w	r3, [r2, #724]	; 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	4a26      	ldr	r2, [pc, #152]	; (8009714 <USBD_LL_Init+0xac>)
 800967c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009680:	4b24      	ldr	r3, [pc, #144]	; (8009714 <USBD_LL_Init+0xac>)
 8009682:	4a25      	ldr	r2, [pc, #148]	; (8009718 <USBD_LL_Init+0xb0>)
 8009684:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009686:	4b23      	ldr	r3, [pc, #140]	; (8009714 <USBD_LL_Init+0xac>)
 8009688:	2208      	movs	r2, #8
 800968a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800968c:	4b21      	ldr	r3, [pc, #132]	; (8009714 <USBD_LL_Init+0xac>)
 800968e:	2202      	movs	r2, #2
 8009690:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009692:	4b20      	ldr	r3, [pc, #128]	; (8009714 <USBD_LL_Init+0xac>)
 8009694:	2200      	movs	r2, #0
 8009696:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009698:	4b1e      	ldr	r3, [pc, #120]	; (8009714 <USBD_LL_Init+0xac>)
 800969a:	2200      	movs	r2, #0
 800969c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800969e:	4b1d      	ldr	r3, [pc, #116]	; (8009714 <USBD_LL_Init+0xac>)
 80096a0:	2200      	movs	r2, #0
 80096a2:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80096a4:	481b      	ldr	r0, [pc, #108]	; (8009714 <USBD_LL_Init+0xac>)
 80096a6:	f7f9 fa4f 	bl	8002b48 <HAL_PCD_Init>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d001      	beq.n	80096b4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80096b0:	f7f8 f832 	bl	8001718 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80096ba:	2318      	movs	r3, #24
 80096bc:	2200      	movs	r2, #0
 80096be:	2100      	movs	r1, #0
 80096c0:	f7fa ff63 	bl	800458a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80096ca:	2358      	movs	r3, #88	; 0x58
 80096cc:	2200      	movs	r2, #0
 80096ce:	2180      	movs	r1, #128	; 0x80
 80096d0:	f7fa ff5b 	bl	800458a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80096da:	23c0      	movs	r3, #192	; 0xc0
 80096dc:	2200      	movs	r2, #0
 80096de:	2181      	movs	r1, #129	; 0x81
 80096e0:	f7fa ff53 	bl	800458a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80096ea:	f44f 7388 	mov.w	r3, #272	; 0x110
 80096ee:	2200      	movs	r2, #0
 80096f0:	2101      	movs	r1, #1
 80096f2:	f7fa ff4a 	bl	800458a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80096fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009700:	2200      	movs	r2, #0
 8009702:	2182      	movs	r1, #130	; 0x82
 8009704:	f7fa ff41 	bl	800458a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	3708      	adds	r7, #8
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	200013ac 	.word	0x200013ac
 8009718:	40005c00 	.word	0x40005c00

0800971c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009724:	2300      	movs	r3, #0
 8009726:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009728:	2300      	movs	r3, #0
 800972a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009732:	4618      	mov	r0, r3
 8009734:	f7f9 fafe 	bl	8002d34 <HAL_PCD_Start>
 8009738:	4603      	mov	r3, r0
 800973a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800973c:	7bfb      	ldrb	r3, [r7, #15]
 800973e:	4618      	mov	r0, r3
 8009740:	f000 f94e 	bl	80099e0 <USBD_Get_USB_Status>
 8009744:	4603      	mov	r3, r0
 8009746:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009748:	7bbb      	ldrb	r3, [r7, #14]
}
 800974a:	4618      	mov	r0, r3
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b084      	sub	sp, #16
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
 800975a:	4608      	mov	r0, r1
 800975c:	4611      	mov	r1, r2
 800975e:	461a      	mov	r2, r3
 8009760:	4603      	mov	r3, r0
 8009762:	70fb      	strb	r3, [r7, #3]
 8009764:	460b      	mov	r3, r1
 8009766:	70bb      	strb	r3, [r7, #2]
 8009768:	4613      	mov	r3, r2
 800976a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800976c:	2300      	movs	r3, #0
 800976e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009770:	2300      	movs	r3, #0
 8009772:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800977a:	78bb      	ldrb	r3, [r7, #2]
 800977c:	883a      	ldrh	r2, [r7, #0]
 800977e:	78f9      	ldrb	r1, [r7, #3]
 8009780:	f7f9 fc54 	bl	800302c <HAL_PCD_EP_Open>
 8009784:	4603      	mov	r3, r0
 8009786:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009788:	7bfb      	ldrb	r3, [r7, #15]
 800978a:	4618      	mov	r0, r3
 800978c:	f000 f928 	bl	80099e0 <USBD_Get_USB_Status>
 8009790:	4603      	mov	r3, r0
 8009792:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009794:	7bbb      	ldrb	r3, [r7, #14]
}
 8009796:	4618      	mov	r0, r3
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800979e:	b580      	push	{r7, lr}
 80097a0:	b084      	sub	sp, #16
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
 80097a6:	460b      	mov	r3, r1
 80097a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097aa:	2300      	movs	r3, #0
 80097ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097ae:	2300      	movs	r3, #0
 80097b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097b8:	78fa      	ldrb	r2, [r7, #3]
 80097ba:	4611      	mov	r1, r2
 80097bc:	4618      	mov	r0, r3
 80097be:	f7f9 fc92 	bl	80030e6 <HAL_PCD_EP_Close>
 80097c2:	4603      	mov	r3, r0
 80097c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097c6:	7bfb      	ldrb	r3, [r7, #15]
 80097c8:	4618      	mov	r0, r3
 80097ca:	f000 f909 	bl	80099e0 <USBD_Get_USB_Status>
 80097ce:	4603      	mov	r3, r0
 80097d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3710      	adds	r7, #16
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	460b      	mov	r3, r1
 80097e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097e8:	2300      	movs	r3, #0
 80097ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097ec:	2300      	movs	r3, #0
 80097ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097f6:	78fa      	ldrb	r2, [r7, #3]
 80097f8:	4611      	mov	r1, r2
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7f9 fd3a 	bl	8003274 <HAL_PCD_EP_SetStall>
 8009800:	4603      	mov	r3, r0
 8009802:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009804:	7bfb      	ldrb	r3, [r7, #15]
 8009806:	4618      	mov	r0, r3
 8009808:	f000 f8ea 	bl	80099e0 <USBD_Get_USB_Status>
 800980c:	4603      	mov	r3, r0
 800980e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009810:	7bbb      	ldrb	r3, [r7, #14]
}
 8009812:	4618      	mov	r0, r3
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b084      	sub	sp, #16
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
 8009822:	460b      	mov	r3, r1
 8009824:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009826:	2300      	movs	r3, #0
 8009828:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800982a:	2300      	movs	r3, #0
 800982c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009834:	78fa      	ldrb	r2, [r7, #3]
 8009836:	4611      	mov	r1, r2
 8009838:	4618      	mov	r0, r3
 800983a:	f7f9 fd7b 	bl	8003334 <HAL_PCD_EP_ClrStall>
 800983e:	4603      	mov	r3, r0
 8009840:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009842:	7bfb      	ldrb	r3, [r7, #15]
 8009844:	4618      	mov	r0, r3
 8009846:	f000 f8cb 	bl	80099e0 <USBD_Get_USB_Status>
 800984a:	4603      	mov	r3, r0
 800984c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800984e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009850:	4618      	mov	r0, r3
 8009852:	3710      	adds	r7, #16
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009858:	b480      	push	{r7}
 800985a:	b085      	sub	sp, #20
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	460b      	mov	r3, r1
 8009862:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800986a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800986c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009870:	2b00      	cmp	r3, #0
 8009872:	da0b      	bge.n	800988c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009874:	78fb      	ldrb	r3, [r7, #3]
 8009876:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800987a:	68f9      	ldr	r1, [r7, #12]
 800987c:	4613      	mov	r3, r2
 800987e:	009b      	lsls	r3, r3, #2
 8009880:	4413      	add	r3, r2
 8009882:	00db      	lsls	r3, r3, #3
 8009884:	440b      	add	r3, r1
 8009886:	3312      	adds	r3, #18
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	e00b      	b.n	80098a4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800988c:	78fb      	ldrb	r3, [r7, #3]
 800988e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009892:	68f9      	ldr	r1, [r7, #12]
 8009894:	4613      	mov	r3, r2
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	4413      	add	r3, r2
 800989a:	00db      	lsls	r3, r3, #3
 800989c:	440b      	add	r3, r1
 800989e:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 80098a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3714      	adds	r7, #20
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bc80      	pop	{r7}
 80098ac:	4770      	bx	lr

080098ae <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b084      	sub	sp, #16
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
 80098b6:	460b      	mov	r3, r1
 80098b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098ba:	2300      	movs	r3, #0
 80098bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098be:	2300      	movs	r3, #0
 80098c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098c8:	78fa      	ldrb	r2, [r7, #3]
 80098ca:	4611      	mov	r1, r2
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7f9 fb89 	bl	8002fe4 <HAL_PCD_SetAddress>
 80098d2:	4603      	mov	r3, r0
 80098d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098d6:	7bfb      	ldrb	r3, [r7, #15]
 80098d8:	4618      	mov	r0, r3
 80098da:	f000 f881 	bl	80099e0 <USBD_Get_USB_Status>
 80098de:	4603      	mov	r3, r0
 80098e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b086      	sub	sp, #24
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	607a      	str	r2, [r7, #4]
 80098f6:	461a      	mov	r2, r3
 80098f8:	460b      	mov	r3, r1
 80098fa:	72fb      	strb	r3, [r7, #11]
 80098fc:	4613      	mov	r3, r2
 80098fe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009900:	2300      	movs	r3, #0
 8009902:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009904:	2300      	movs	r3, #0
 8009906:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800990e:	893b      	ldrh	r3, [r7, #8]
 8009910:	7af9      	ldrb	r1, [r7, #11]
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	f7f9 fc77 	bl	8003206 <HAL_PCD_EP_Transmit>
 8009918:	4603      	mov	r3, r0
 800991a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800991c:	7dfb      	ldrb	r3, [r7, #23]
 800991e:	4618      	mov	r0, r3
 8009920:	f000 f85e 	bl	80099e0 <USBD_Get_USB_Status>
 8009924:	4603      	mov	r3, r0
 8009926:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009928:	7dbb      	ldrb	r3, [r7, #22]
}
 800992a:	4618      	mov	r0, r3
 800992c:	3718      	adds	r7, #24
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009932:	b580      	push	{r7, lr}
 8009934:	b086      	sub	sp, #24
 8009936:	af00      	add	r7, sp, #0
 8009938:	60f8      	str	r0, [r7, #12]
 800993a:	607a      	str	r2, [r7, #4]
 800993c:	461a      	mov	r2, r3
 800993e:	460b      	mov	r3, r1
 8009940:	72fb      	strb	r3, [r7, #11]
 8009942:	4613      	mov	r3, r2
 8009944:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009946:	2300      	movs	r3, #0
 8009948:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800994a:	2300      	movs	r3, #0
 800994c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009954:	893b      	ldrh	r3, [r7, #8]
 8009956:	7af9      	ldrb	r1, [r7, #11]
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	f7f9 fc0c 	bl	8003176 <HAL_PCD_EP_Receive>
 800995e:	4603      	mov	r3, r0
 8009960:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009962:	7dfb      	ldrb	r3, [r7, #23]
 8009964:	4618      	mov	r0, r3
 8009966:	f000 f83b 	bl	80099e0 <USBD_Get_USB_Status>
 800996a:	4603      	mov	r3, r0
 800996c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800996e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009970:	4618      	mov	r0, r3
 8009972:	3718      	adds	r7, #24
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	460b      	mov	r3, r1
 8009982:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800998a:	78fa      	ldrb	r2, [r7, #3]
 800998c:	4611      	mov	r1, r2
 800998e:	4618      	mov	r0, r3
 8009990:	f7f9 fc22 	bl	80031d8 <HAL_PCD_EP_GetRxCount>
 8009994:	4603      	mov	r3, r0
}
 8009996:	4618      	mov	r0, r3
 8009998:	3708      	adds	r7, #8
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
	...

080099a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80099a8:	4b02      	ldr	r3, [pc, #8]	; (80099b4 <USBD_static_malloc+0x14>)
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	370c      	adds	r7, #12
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bc80      	pop	{r7}
 80099b2:	4770      	bx	lr
 80099b4:	200004ec 	.word	0x200004ec

080099b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]

}
 80099c0:	bf00      	nop
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bc80      	pop	{r7}
 80099c8:	4770      	bx	lr

080099ca <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099ca:	b480      	push	{r7}
 80099cc:	b083      	sub	sp, #12
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
 80099d2:	460b      	mov	r3, r1
 80099d4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80099d6:	bf00      	nop
 80099d8:	370c      	adds	r7, #12
 80099da:	46bd      	mov	sp, r7
 80099dc:	bc80      	pop	{r7}
 80099de:	4770      	bx	lr

080099e0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b085      	sub	sp, #20
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	4603      	mov	r3, r0
 80099e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099ea:	2300      	movs	r3, #0
 80099ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80099ee:	79fb      	ldrb	r3, [r7, #7]
 80099f0:	2b03      	cmp	r3, #3
 80099f2:	d817      	bhi.n	8009a24 <USBD_Get_USB_Status+0x44>
 80099f4:	a201      	add	r2, pc, #4	; (adr r2, 80099fc <USBD_Get_USB_Status+0x1c>)
 80099f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099fa:	bf00      	nop
 80099fc:	08009a0d 	.word	0x08009a0d
 8009a00:	08009a13 	.word	0x08009a13
 8009a04:	08009a19 	.word	0x08009a19
 8009a08:	08009a1f 	.word	0x08009a1f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	73fb      	strb	r3, [r7, #15]
    break;
 8009a10:	e00b      	b.n	8009a2a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a12:	2302      	movs	r3, #2
 8009a14:	73fb      	strb	r3, [r7, #15]
    break;
 8009a16:	e008      	b.n	8009a2a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a1c:	e005      	b.n	8009a2a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a1e:	2302      	movs	r3, #2
 8009a20:	73fb      	strb	r3, [r7, #15]
    break;
 8009a22:	e002      	b.n	8009a2a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009a24:	2302      	movs	r3, #2
 8009a26:	73fb      	strb	r3, [r7, #15]
    break;
 8009a28:	bf00      	nop
  }
  return usb_status;
 8009a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3714      	adds	r7, #20
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bc80      	pop	{r7}
 8009a34:	4770      	bx	lr
 8009a36:	bf00      	nop

08009a38 <__errno>:
 8009a38:	4b01      	ldr	r3, [pc, #4]	; (8009a40 <__errno+0x8>)
 8009a3a:	6818      	ldr	r0, [r3, #0]
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	20000180 	.word	0x20000180

08009a44 <__libc_init_array>:
 8009a44:	b570      	push	{r4, r5, r6, lr}
 8009a46:	2600      	movs	r6, #0
 8009a48:	4d0c      	ldr	r5, [pc, #48]	; (8009a7c <__libc_init_array+0x38>)
 8009a4a:	4c0d      	ldr	r4, [pc, #52]	; (8009a80 <__libc_init_array+0x3c>)
 8009a4c:	1b64      	subs	r4, r4, r5
 8009a4e:	10a4      	asrs	r4, r4, #2
 8009a50:	42a6      	cmp	r6, r4
 8009a52:	d109      	bne.n	8009a68 <__libc_init_array+0x24>
 8009a54:	f000 fc5c 	bl	800a310 <_init>
 8009a58:	2600      	movs	r6, #0
 8009a5a:	4d0a      	ldr	r5, [pc, #40]	; (8009a84 <__libc_init_array+0x40>)
 8009a5c:	4c0a      	ldr	r4, [pc, #40]	; (8009a88 <__libc_init_array+0x44>)
 8009a5e:	1b64      	subs	r4, r4, r5
 8009a60:	10a4      	asrs	r4, r4, #2
 8009a62:	42a6      	cmp	r6, r4
 8009a64:	d105      	bne.n	8009a72 <__libc_init_array+0x2e>
 8009a66:	bd70      	pop	{r4, r5, r6, pc}
 8009a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a6c:	4798      	blx	r3
 8009a6e:	3601      	adds	r6, #1
 8009a70:	e7ee      	b.n	8009a50 <__libc_init_array+0xc>
 8009a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a76:	4798      	blx	r3
 8009a78:	3601      	adds	r6, #1
 8009a7a:	e7f2      	b.n	8009a62 <__libc_init_array+0x1e>
 8009a7c:	0800a430 	.word	0x0800a430
 8009a80:	0800a430 	.word	0x0800a430
 8009a84:	0800a430 	.word	0x0800a430
 8009a88:	0800a43c 	.word	0x0800a43c

08009a8c <memset>:
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	4402      	add	r2, r0
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d100      	bne.n	8009a96 <memset+0xa>
 8009a94:	4770      	bx	lr
 8009a96:	f803 1b01 	strb.w	r1, [r3], #1
 8009a9a:	e7f9      	b.n	8009a90 <memset+0x4>

08009a9c <siprintf>:
 8009a9c:	b40e      	push	{r1, r2, r3}
 8009a9e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009aa2:	b500      	push	{lr}
 8009aa4:	b09c      	sub	sp, #112	; 0x70
 8009aa6:	ab1d      	add	r3, sp, #116	; 0x74
 8009aa8:	9002      	str	r0, [sp, #8]
 8009aaa:	9006      	str	r0, [sp, #24]
 8009aac:	9107      	str	r1, [sp, #28]
 8009aae:	9104      	str	r1, [sp, #16]
 8009ab0:	4808      	ldr	r0, [pc, #32]	; (8009ad4 <siprintf+0x38>)
 8009ab2:	4909      	ldr	r1, [pc, #36]	; (8009ad8 <siprintf+0x3c>)
 8009ab4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ab8:	9105      	str	r1, [sp, #20]
 8009aba:	6800      	ldr	r0, [r0, #0]
 8009abc:	a902      	add	r1, sp, #8
 8009abe:	9301      	str	r3, [sp, #4]
 8009ac0:	f000 f868 	bl	8009b94 <_svfiprintf_r>
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	9b02      	ldr	r3, [sp, #8]
 8009ac8:	701a      	strb	r2, [r3, #0]
 8009aca:	b01c      	add	sp, #112	; 0x70
 8009acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ad0:	b003      	add	sp, #12
 8009ad2:	4770      	bx	lr
 8009ad4:	20000180 	.word	0x20000180
 8009ad8:	ffff0208 	.word	0xffff0208

08009adc <__ssputs_r>:
 8009adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae0:	688e      	ldr	r6, [r1, #8]
 8009ae2:	4682      	mov	sl, r0
 8009ae4:	429e      	cmp	r6, r3
 8009ae6:	460c      	mov	r4, r1
 8009ae8:	4690      	mov	r8, r2
 8009aea:	461f      	mov	r7, r3
 8009aec:	d838      	bhi.n	8009b60 <__ssputs_r+0x84>
 8009aee:	898a      	ldrh	r2, [r1, #12]
 8009af0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009af4:	d032      	beq.n	8009b5c <__ssputs_r+0x80>
 8009af6:	6825      	ldr	r5, [r4, #0]
 8009af8:	6909      	ldr	r1, [r1, #16]
 8009afa:	3301      	adds	r3, #1
 8009afc:	eba5 0901 	sub.w	r9, r5, r1
 8009b00:	6965      	ldr	r5, [r4, #20]
 8009b02:	444b      	add	r3, r9
 8009b04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b0c:	106d      	asrs	r5, r5, #1
 8009b0e:	429d      	cmp	r5, r3
 8009b10:	bf38      	it	cc
 8009b12:	461d      	movcc	r5, r3
 8009b14:	0553      	lsls	r3, r2, #21
 8009b16:	d531      	bpl.n	8009b7c <__ssputs_r+0xa0>
 8009b18:	4629      	mov	r1, r5
 8009b1a:	f000 fb53 	bl	800a1c4 <_malloc_r>
 8009b1e:	4606      	mov	r6, r0
 8009b20:	b950      	cbnz	r0, 8009b38 <__ssputs_r+0x5c>
 8009b22:	230c      	movs	r3, #12
 8009b24:	f04f 30ff 	mov.w	r0, #4294967295
 8009b28:	f8ca 3000 	str.w	r3, [sl]
 8009b2c:	89a3      	ldrh	r3, [r4, #12]
 8009b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b32:	81a3      	strh	r3, [r4, #12]
 8009b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b38:	464a      	mov	r2, r9
 8009b3a:	6921      	ldr	r1, [r4, #16]
 8009b3c:	f000 face 	bl	800a0dc <memcpy>
 8009b40:	89a3      	ldrh	r3, [r4, #12]
 8009b42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b4a:	81a3      	strh	r3, [r4, #12]
 8009b4c:	6126      	str	r6, [r4, #16]
 8009b4e:	444e      	add	r6, r9
 8009b50:	6026      	str	r6, [r4, #0]
 8009b52:	463e      	mov	r6, r7
 8009b54:	6165      	str	r5, [r4, #20]
 8009b56:	eba5 0509 	sub.w	r5, r5, r9
 8009b5a:	60a5      	str	r5, [r4, #8]
 8009b5c:	42be      	cmp	r6, r7
 8009b5e:	d900      	bls.n	8009b62 <__ssputs_r+0x86>
 8009b60:	463e      	mov	r6, r7
 8009b62:	4632      	mov	r2, r6
 8009b64:	4641      	mov	r1, r8
 8009b66:	6820      	ldr	r0, [r4, #0]
 8009b68:	f000 fac6 	bl	800a0f8 <memmove>
 8009b6c:	68a3      	ldr	r3, [r4, #8]
 8009b6e:	6822      	ldr	r2, [r4, #0]
 8009b70:	1b9b      	subs	r3, r3, r6
 8009b72:	4432      	add	r2, r6
 8009b74:	2000      	movs	r0, #0
 8009b76:	60a3      	str	r3, [r4, #8]
 8009b78:	6022      	str	r2, [r4, #0]
 8009b7a:	e7db      	b.n	8009b34 <__ssputs_r+0x58>
 8009b7c:	462a      	mov	r2, r5
 8009b7e:	f000 fb7b 	bl	800a278 <_realloc_r>
 8009b82:	4606      	mov	r6, r0
 8009b84:	2800      	cmp	r0, #0
 8009b86:	d1e1      	bne.n	8009b4c <__ssputs_r+0x70>
 8009b88:	4650      	mov	r0, sl
 8009b8a:	6921      	ldr	r1, [r4, #16]
 8009b8c:	f000 face 	bl	800a12c <_free_r>
 8009b90:	e7c7      	b.n	8009b22 <__ssputs_r+0x46>
	...

08009b94 <_svfiprintf_r>:
 8009b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b98:	4698      	mov	r8, r3
 8009b9a:	898b      	ldrh	r3, [r1, #12]
 8009b9c:	4607      	mov	r7, r0
 8009b9e:	061b      	lsls	r3, r3, #24
 8009ba0:	460d      	mov	r5, r1
 8009ba2:	4614      	mov	r4, r2
 8009ba4:	b09d      	sub	sp, #116	; 0x74
 8009ba6:	d50e      	bpl.n	8009bc6 <_svfiprintf_r+0x32>
 8009ba8:	690b      	ldr	r3, [r1, #16]
 8009baa:	b963      	cbnz	r3, 8009bc6 <_svfiprintf_r+0x32>
 8009bac:	2140      	movs	r1, #64	; 0x40
 8009bae:	f000 fb09 	bl	800a1c4 <_malloc_r>
 8009bb2:	6028      	str	r0, [r5, #0]
 8009bb4:	6128      	str	r0, [r5, #16]
 8009bb6:	b920      	cbnz	r0, 8009bc2 <_svfiprintf_r+0x2e>
 8009bb8:	230c      	movs	r3, #12
 8009bba:	603b      	str	r3, [r7, #0]
 8009bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc0:	e0d1      	b.n	8009d66 <_svfiprintf_r+0x1d2>
 8009bc2:	2340      	movs	r3, #64	; 0x40
 8009bc4:	616b      	str	r3, [r5, #20]
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8009bca:	2320      	movs	r3, #32
 8009bcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009bd0:	2330      	movs	r3, #48	; 0x30
 8009bd2:	f04f 0901 	mov.w	r9, #1
 8009bd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bda:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009d80 <_svfiprintf_r+0x1ec>
 8009bde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009be2:	4623      	mov	r3, r4
 8009be4:	469a      	mov	sl, r3
 8009be6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bea:	b10a      	cbz	r2, 8009bf0 <_svfiprintf_r+0x5c>
 8009bec:	2a25      	cmp	r2, #37	; 0x25
 8009bee:	d1f9      	bne.n	8009be4 <_svfiprintf_r+0x50>
 8009bf0:	ebba 0b04 	subs.w	fp, sl, r4
 8009bf4:	d00b      	beq.n	8009c0e <_svfiprintf_r+0x7a>
 8009bf6:	465b      	mov	r3, fp
 8009bf8:	4622      	mov	r2, r4
 8009bfa:	4629      	mov	r1, r5
 8009bfc:	4638      	mov	r0, r7
 8009bfe:	f7ff ff6d 	bl	8009adc <__ssputs_r>
 8009c02:	3001      	adds	r0, #1
 8009c04:	f000 80aa 	beq.w	8009d5c <_svfiprintf_r+0x1c8>
 8009c08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c0a:	445a      	add	r2, fp
 8009c0c:	9209      	str	r2, [sp, #36]	; 0x24
 8009c0e:	f89a 3000 	ldrb.w	r3, [sl]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	f000 80a2 	beq.w	8009d5c <_svfiprintf_r+0x1c8>
 8009c18:	2300      	movs	r3, #0
 8009c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c22:	f10a 0a01 	add.w	sl, sl, #1
 8009c26:	9304      	str	r3, [sp, #16]
 8009c28:	9307      	str	r3, [sp, #28]
 8009c2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c2e:	931a      	str	r3, [sp, #104]	; 0x68
 8009c30:	4654      	mov	r4, sl
 8009c32:	2205      	movs	r2, #5
 8009c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c38:	4851      	ldr	r0, [pc, #324]	; (8009d80 <_svfiprintf_r+0x1ec>)
 8009c3a:	f000 fa41 	bl	800a0c0 <memchr>
 8009c3e:	9a04      	ldr	r2, [sp, #16]
 8009c40:	b9d8      	cbnz	r0, 8009c7a <_svfiprintf_r+0xe6>
 8009c42:	06d0      	lsls	r0, r2, #27
 8009c44:	bf44      	itt	mi
 8009c46:	2320      	movmi	r3, #32
 8009c48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c4c:	0711      	lsls	r1, r2, #28
 8009c4e:	bf44      	itt	mi
 8009c50:	232b      	movmi	r3, #43	; 0x2b
 8009c52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c56:	f89a 3000 	ldrb.w	r3, [sl]
 8009c5a:	2b2a      	cmp	r3, #42	; 0x2a
 8009c5c:	d015      	beq.n	8009c8a <_svfiprintf_r+0xf6>
 8009c5e:	4654      	mov	r4, sl
 8009c60:	2000      	movs	r0, #0
 8009c62:	f04f 0c0a 	mov.w	ip, #10
 8009c66:	9a07      	ldr	r2, [sp, #28]
 8009c68:	4621      	mov	r1, r4
 8009c6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c6e:	3b30      	subs	r3, #48	; 0x30
 8009c70:	2b09      	cmp	r3, #9
 8009c72:	d94e      	bls.n	8009d12 <_svfiprintf_r+0x17e>
 8009c74:	b1b0      	cbz	r0, 8009ca4 <_svfiprintf_r+0x110>
 8009c76:	9207      	str	r2, [sp, #28]
 8009c78:	e014      	b.n	8009ca4 <_svfiprintf_r+0x110>
 8009c7a:	eba0 0308 	sub.w	r3, r0, r8
 8009c7e:	fa09 f303 	lsl.w	r3, r9, r3
 8009c82:	4313      	orrs	r3, r2
 8009c84:	46a2      	mov	sl, r4
 8009c86:	9304      	str	r3, [sp, #16]
 8009c88:	e7d2      	b.n	8009c30 <_svfiprintf_r+0x9c>
 8009c8a:	9b03      	ldr	r3, [sp, #12]
 8009c8c:	1d19      	adds	r1, r3, #4
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	9103      	str	r1, [sp, #12]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	bfbb      	ittet	lt
 8009c96:	425b      	neglt	r3, r3
 8009c98:	f042 0202 	orrlt.w	r2, r2, #2
 8009c9c:	9307      	strge	r3, [sp, #28]
 8009c9e:	9307      	strlt	r3, [sp, #28]
 8009ca0:	bfb8      	it	lt
 8009ca2:	9204      	strlt	r2, [sp, #16]
 8009ca4:	7823      	ldrb	r3, [r4, #0]
 8009ca6:	2b2e      	cmp	r3, #46	; 0x2e
 8009ca8:	d10c      	bne.n	8009cc4 <_svfiprintf_r+0x130>
 8009caa:	7863      	ldrb	r3, [r4, #1]
 8009cac:	2b2a      	cmp	r3, #42	; 0x2a
 8009cae:	d135      	bne.n	8009d1c <_svfiprintf_r+0x188>
 8009cb0:	9b03      	ldr	r3, [sp, #12]
 8009cb2:	3402      	adds	r4, #2
 8009cb4:	1d1a      	adds	r2, r3, #4
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	9203      	str	r2, [sp, #12]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	bfb8      	it	lt
 8009cbe:	f04f 33ff 	movlt.w	r3, #4294967295
 8009cc2:	9305      	str	r3, [sp, #20]
 8009cc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009d90 <_svfiprintf_r+0x1fc>
 8009cc8:	2203      	movs	r2, #3
 8009cca:	4650      	mov	r0, sl
 8009ccc:	7821      	ldrb	r1, [r4, #0]
 8009cce:	f000 f9f7 	bl	800a0c0 <memchr>
 8009cd2:	b140      	cbz	r0, 8009ce6 <_svfiprintf_r+0x152>
 8009cd4:	2340      	movs	r3, #64	; 0x40
 8009cd6:	eba0 000a 	sub.w	r0, r0, sl
 8009cda:	fa03 f000 	lsl.w	r0, r3, r0
 8009cde:	9b04      	ldr	r3, [sp, #16]
 8009ce0:	3401      	adds	r4, #1
 8009ce2:	4303      	orrs	r3, r0
 8009ce4:	9304      	str	r3, [sp, #16]
 8009ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cea:	2206      	movs	r2, #6
 8009cec:	4825      	ldr	r0, [pc, #148]	; (8009d84 <_svfiprintf_r+0x1f0>)
 8009cee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009cf2:	f000 f9e5 	bl	800a0c0 <memchr>
 8009cf6:	2800      	cmp	r0, #0
 8009cf8:	d038      	beq.n	8009d6c <_svfiprintf_r+0x1d8>
 8009cfa:	4b23      	ldr	r3, [pc, #140]	; (8009d88 <_svfiprintf_r+0x1f4>)
 8009cfc:	bb1b      	cbnz	r3, 8009d46 <_svfiprintf_r+0x1b2>
 8009cfe:	9b03      	ldr	r3, [sp, #12]
 8009d00:	3307      	adds	r3, #7
 8009d02:	f023 0307 	bic.w	r3, r3, #7
 8009d06:	3308      	adds	r3, #8
 8009d08:	9303      	str	r3, [sp, #12]
 8009d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d0c:	4433      	add	r3, r6
 8009d0e:	9309      	str	r3, [sp, #36]	; 0x24
 8009d10:	e767      	b.n	8009be2 <_svfiprintf_r+0x4e>
 8009d12:	460c      	mov	r4, r1
 8009d14:	2001      	movs	r0, #1
 8009d16:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d1a:	e7a5      	b.n	8009c68 <_svfiprintf_r+0xd4>
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	f04f 0c0a 	mov.w	ip, #10
 8009d22:	4619      	mov	r1, r3
 8009d24:	3401      	adds	r4, #1
 8009d26:	9305      	str	r3, [sp, #20]
 8009d28:	4620      	mov	r0, r4
 8009d2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d2e:	3a30      	subs	r2, #48	; 0x30
 8009d30:	2a09      	cmp	r2, #9
 8009d32:	d903      	bls.n	8009d3c <_svfiprintf_r+0x1a8>
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d0c5      	beq.n	8009cc4 <_svfiprintf_r+0x130>
 8009d38:	9105      	str	r1, [sp, #20]
 8009d3a:	e7c3      	b.n	8009cc4 <_svfiprintf_r+0x130>
 8009d3c:	4604      	mov	r4, r0
 8009d3e:	2301      	movs	r3, #1
 8009d40:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d44:	e7f0      	b.n	8009d28 <_svfiprintf_r+0x194>
 8009d46:	ab03      	add	r3, sp, #12
 8009d48:	9300      	str	r3, [sp, #0]
 8009d4a:	462a      	mov	r2, r5
 8009d4c:	4638      	mov	r0, r7
 8009d4e:	4b0f      	ldr	r3, [pc, #60]	; (8009d8c <_svfiprintf_r+0x1f8>)
 8009d50:	a904      	add	r1, sp, #16
 8009d52:	f3af 8000 	nop.w
 8009d56:	1c42      	adds	r2, r0, #1
 8009d58:	4606      	mov	r6, r0
 8009d5a:	d1d6      	bne.n	8009d0a <_svfiprintf_r+0x176>
 8009d5c:	89ab      	ldrh	r3, [r5, #12]
 8009d5e:	065b      	lsls	r3, r3, #25
 8009d60:	f53f af2c 	bmi.w	8009bbc <_svfiprintf_r+0x28>
 8009d64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d66:	b01d      	add	sp, #116	; 0x74
 8009d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d6c:	ab03      	add	r3, sp, #12
 8009d6e:	9300      	str	r3, [sp, #0]
 8009d70:	462a      	mov	r2, r5
 8009d72:	4638      	mov	r0, r7
 8009d74:	4b05      	ldr	r3, [pc, #20]	; (8009d8c <_svfiprintf_r+0x1f8>)
 8009d76:	a904      	add	r1, sp, #16
 8009d78:	f000 f87c 	bl	8009e74 <_printf_i>
 8009d7c:	e7eb      	b.n	8009d56 <_svfiprintf_r+0x1c2>
 8009d7e:	bf00      	nop
 8009d80:	0800a3fa 	.word	0x0800a3fa
 8009d84:	0800a404 	.word	0x0800a404
 8009d88:	00000000 	.word	0x00000000
 8009d8c:	08009add 	.word	0x08009add
 8009d90:	0800a400 	.word	0x0800a400

08009d94 <_printf_common>:
 8009d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d98:	4616      	mov	r6, r2
 8009d9a:	4699      	mov	r9, r3
 8009d9c:	688a      	ldr	r2, [r1, #8]
 8009d9e:	690b      	ldr	r3, [r1, #16]
 8009da0:	4607      	mov	r7, r0
 8009da2:	4293      	cmp	r3, r2
 8009da4:	bfb8      	it	lt
 8009da6:	4613      	movlt	r3, r2
 8009da8:	6033      	str	r3, [r6, #0]
 8009daa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009dae:	460c      	mov	r4, r1
 8009db0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009db4:	b10a      	cbz	r2, 8009dba <_printf_common+0x26>
 8009db6:	3301      	adds	r3, #1
 8009db8:	6033      	str	r3, [r6, #0]
 8009dba:	6823      	ldr	r3, [r4, #0]
 8009dbc:	0699      	lsls	r1, r3, #26
 8009dbe:	bf42      	ittt	mi
 8009dc0:	6833      	ldrmi	r3, [r6, #0]
 8009dc2:	3302      	addmi	r3, #2
 8009dc4:	6033      	strmi	r3, [r6, #0]
 8009dc6:	6825      	ldr	r5, [r4, #0]
 8009dc8:	f015 0506 	ands.w	r5, r5, #6
 8009dcc:	d106      	bne.n	8009ddc <_printf_common+0x48>
 8009dce:	f104 0a19 	add.w	sl, r4, #25
 8009dd2:	68e3      	ldr	r3, [r4, #12]
 8009dd4:	6832      	ldr	r2, [r6, #0]
 8009dd6:	1a9b      	subs	r3, r3, r2
 8009dd8:	42ab      	cmp	r3, r5
 8009dda:	dc28      	bgt.n	8009e2e <_printf_common+0x9a>
 8009ddc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009de0:	1e13      	subs	r3, r2, #0
 8009de2:	6822      	ldr	r2, [r4, #0]
 8009de4:	bf18      	it	ne
 8009de6:	2301      	movne	r3, #1
 8009de8:	0692      	lsls	r2, r2, #26
 8009dea:	d42d      	bmi.n	8009e48 <_printf_common+0xb4>
 8009dec:	4649      	mov	r1, r9
 8009dee:	4638      	mov	r0, r7
 8009df0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009df4:	47c0      	blx	r8
 8009df6:	3001      	adds	r0, #1
 8009df8:	d020      	beq.n	8009e3c <_printf_common+0xa8>
 8009dfa:	6823      	ldr	r3, [r4, #0]
 8009dfc:	68e5      	ldr	r5, [r4, #12]
 8009dfe:	f003 0306 	and.w	r3, r3, #6
 8009e02:	2b04      	cmp	r3, #4
 8009e04:	bf18      	it	ne
 8009e06:	2500      	movne	r5, #0
 8009e08:	6832      	ldr	r2, [r6, #0]
 8009e0a:	f04f 0600 	mov.w	r6, #0
 8009e0e:	68a3      	ldr	r3, [r4, #8]
 8009e10:	bf08      	it	eq
 8009e12:	1aad      	subeq	r5, r5, r2
 8009e14:	6922      	ldr	r2, [r4, #16]
 8009e16:	bf08      	it	eq
 8009e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	bfc4      	itt	gt
 8009e20:	1a9b      	subgt	r3, r3, r2
 8009e22:	18ed      	addgt	r5, r5, r3
 8009e24:	341a      	adds	r4, #26
 8009e26:	42b5      	cmp	r5, r6
 8009e28:	d11a      	bne.n	8009e60 <_printf_common+0xcc>
 8009e2a:	2000      	movs	r0, #0
 8009e2c:	e008      	b.n	8009e40 <_printf_common+0xac>
 8009e2e:	2301      	movs	r3, #1
 8009e30:	4652      	mov	r2, sl
 8009e32:	4649      	mov	r1, r9
 8009e34:	4638      	mov	r0, r7
 8009e36:	47c0      	blx	r8
 8009e38:	3001      	adds	r0, #1
 8009e3a:	d103      	bne.n	8009e44 <_printf_common+0xb0>
 8009e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e44:	3501      	adds	r5, #1
 8009e46:	e7c4      	b.n	8009dd2 <_printf_common+0x3e>
 8009e48:	2030      	movs	r0, #48	; 0x30
 8009e4a:	18e1      	adds	r1, r4, r3
 8009e4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e50:	1c5a      	adds	r2, r3, #1
 8009e52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e56:	4422      	add	r2, r4
 8009e58:	3302      	adds	r3, #2
 8009e5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e5e:	e7c5      	b.n	8009dec <_printf_common+0x58>
 8009e60:	2301      	movs	r3, #1
 8009e62:	4622      	mov	r2, r4
 8009e64:	4649      	mov	r1, r9
 8009e66:	4638      	mov	r0, r7
 8009e68:	47c0      	blx	r8
 8009e6a:	3001      	adds	r0, #1
 8009e6c:	d0e6      	beq.n	8009e3c <_printf_common+0xa8>
 8009e6e:	3601      	adds	r6, #1
 8009e70:	e7d9      	b.n	8009e26 <_printf_common+0x92>
	...

08009e74 <_printf_i>:
 8009e74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e78:	460c      	mov	r4, r1
 8009e7a:	7e27      	ldrb	r7, [r4, #24]
 8009e7c:	4691      	mov	r9, r2
 8009e7e:	2f78      	cmp	r7, #120	; 0x78
 8009e80:	4680      	mov	r8, r0
 8009e82:	469a      	mov	sl, r3
 8009e84:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009e86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e8a:	d807      	bhi.n	8009e9c <_printf_i+0x28>
 8009e8c:	2f62      	cmp	r7, #98	; 0x62
 8009e8e:	d80a      	bhi.n	8009ea6 <_printf_i+0x32>
 8009e90:	2f00      	cmp	r7, #0
 8009e92:	f000 80d9 	beq.w	800a048 <_printf_i+0x1d4>
 8009e96:	2f58      	cmp	r7, #88	; 0x58
 8009e98:	f000 80a4 	beq.w	8009fe4 <_printf_i+0x170>
 8009e9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009ea0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ea4:	e03a      	b.n	8009f1c <_printf_i+0xa8>
 8009ea6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009eaa:	2b15      	cmp	r3, #21
 8009eac:	d8f6      	bhi.n	8009e9c <_printf_i+0x28>
 8009eae:	a001      	add	r0, pc, #4	; (adr r0, 8009eb4 <_printf_i+0x40>)
 8009eb0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009eb4:	08009f0d 	.word	0x08009f0d
 8009eb8:	08009f21 	.word	0x08009f21
 8009ebc:	08009e9d 	.word	0x08009e9d
 8009ec0:	08009e9d 	.word	0x08009e9d
 8009ec4:	08009e9d 	.word	0x08009e9d
 8009ec8:	08009e9d 	.word	0x08009e9d
 8009ecc:	08009f21 	.word	0x08009f21
 8009ed0:	08009e9d 	.word	0x08009e9d
 8009ed4:	08009e9d 	.word	0x08009e9d
 8009ed8:	08009e9d 	.word	0x08009e9d
 8009edc:	08009e9d 	.word	0x08009e9d
 8009ee0:	0800a02f 	.word	0x0800a02f
 8009ee4:	08009f51 	.word	0x08009f51
 8009ee8:	0800a011 	.word	0x0800a011
 8009eec:	08009e9d 	.word	0x08009e9d
 8009ef0:	08009e9d 	.word	0x08009e9d
 8009ef4:	0800a051 	.word	0x0800a051
 8009ef8:	08009e9d 	.word	0x08009e9d
 8009efc:	08009f51 	.word	0x08009f51
 8009f00:	08009e9d 	.word	0x08009e9d
 8009f04:	08009e9d 	.word	0x08009e9d
 8009f08:	0800a019 	.word	0x0800a019
 8009f0c:	680b      	ldr	r3, [r1, #0]
 8009f0e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009f12:	1d1a      	adds	r2, r3, #4
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	600a      	str	r2, [r1, #0]
 8009f18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	e0a4      	b.n	800a06a <_printf_i+0x1f6>
 8009f20:	6825      	ldr	r5, [r4, #0]
 8009f22:	6808      	ldr	r0, [r1, #0]
 8009f24:	062e      	lsls	r6, r5, #24
 8009f26:	f100 0304 	add.w	r3, r0, #4
 8009f2a:	d50a      	bpl.n	8009f42 <_printf_i+0xce>
 8009f2c:	6805      	ldr	r5, [r0, #0]
 8009f2e:	600b      	str	r3, [r1, #0]
 8009f30:	2d00      	cmp	r5, #0
 8009f32:	da03      	bge.n	8009f3c <_printf_i+0xc8>
 8009f34:	232d      	movs	r3, #45	; 0x2d
 8009f36:	426d      	negs	r5, r5
 8009f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f3c:	230a      	movs	r3, #10
 8009f3e:	485e      	ldr	r0, [pc, #376]	; (800a0b8 <_printf_i+0x244>)
 8009f40:	e019      	b.n	8009f76 <_printf_i+0x102>
 8009f42:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009f46:	6805      	ldr	r5, [r0, #0]
 8009f48:	600b      	str	r3, [r1, #0]
 8009f4a:	bf18      	it	ne
 8009f4c:	b22d      	sxthne	r5, r5
 8009f4e:	e7ef      	b.n	8009f30 <_printf_i+0xbc>
 8009f50:	680b      	ldr	r3, [r1, #0]
 8009f52:	6825      	ldr	r5, [r4, #0]
 8009f54:	1d18      	adds	r0, r3, #4
 8009f56:	6008      	str	r0, [r1, #0]
 8009f58:	0628      	lsls	r0, r5, #24
 8009f5a:	d501      	bpl.n	8009f60 <_printf_i+0xec>
 8009f5c:	681d      	ldr	r5, [r3, #0]
 8009f5e:	e002      	b.n	8009f66 <_printf_i+0xf2>
 8009f60:	0669      	lsls	r1, r5, #25
 8009f62:	d5fb      	bpl.n	8009f5c <_printf_i+0xe8>
 8009f64:	881d      	ldrh	r5, [r3, #0]
 8009f66:	2f6f      	cmp	r7, #111	; 0x6f
 8009f68:	bf0c      	ite	eq
 8009f6a:	2308      	moveq	r3, #8
 8009f6c:	230a      	movne	r3, #10
 8009f6e:	4852      	ldr	r0, [pc, #328]	; (800a0b8 <_printf_i+0x244>)
 8009f70:	2100      	movs	r1, #0
 8009f72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f76:	6866      	ldr	r6, [r4, #4]
 8009f78:	2e00      	cmp	r6, #0
 8009f7a:	bfa8      	it	ge
 8009f7c:	6821      	ldrge	r1, [r4, #0]
 8009f7e:	60a6      	str	r6, [r4, #8]
 8009f80:	bfa4      	itt	ge
 8009f82:	f021 0104 	bicge.w	r1, r1, #4
 8009f86:	6021      	strge	r1, [r4, #0]
 8009f88:	b90d      	cbnz	r5, 8009f8e <_printf_i+0x11a>
 8009f8a:	2e00      	cmp	r6, #0
 8009f8c:	d04d      	beq.n	800a02a <_printf_i+0x1b6>
 8009f8e:	4616      	mov	r6, r2
 8009f90:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f94:	fb03 5711 	mls	r7, r3, r1, r5
 8009f98:	5dc7      	ldrb	r7, [r0, r7]
 8009f9a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f9e:	462f      	mov	r7, r5
 8009fa0:	42bb      	cmp	r3, r7
 8009fa2:	460d      	mov	r5, r1
 8009fa4:	d9f4      	bls.n	8009f90 <_printf_i+0x11c>
 8009fa6:	2b08      	cmp	r3, #8
 8009fa8:	d10b      	bne.n	8009fc2 <_printf_i+0x14e>
 8009faa:	6823      	ldr	r3, [r4, #0]
 8009fac:	07df      	lsls	r7, r3, #31
 8009fae:	d508      	bpl.n	8009fc2 <_printf_i+0x14e>
 8009fb0:	6923      	ldr	r3, [r4, #16]
 8009fb2:	6861      	ldr	r1, [r4, #4]
 8009fb4:	4299      	cmp	r1, r3
 8009fb6:	bfde      	ittt	le
 8009fb8:	2330      	movle	r3, #48	; 0x30
 8009fba:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009fbe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009fc2:	1b92      	subs	r2, r2, r6
 8009fc4:	6122      	str	r2, [r4, #16]
 8009fc6:	464b      	mov	r3, r9
 8009fc8:	4621      	mov	r1, r4
 8009fca:	4640      	mov	r0, r8
 8009fcc:	f8cd a000 	str.w	sl, [sp]
 8009fd0:	aa03      	add	r2, sp, #12
 8009fd2:	f7ff fedf 	bl	8009d94 <_printf_common>
 8009fd6:	3001      	adds	r0, #1
 8009fd8:	d14c      	bne.n	800a074 <_printf_i+0x200>
 8009fda:	f04f 30ff 	mov.w	r0, #4294967295
 8009fde:	b004      	add	sp, #16
 8009fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fe4:	4834      	ldr	r0, [pc, #208]	; (800a0b8 <_printf_i+0x244>)
 8009fe6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009fea:	680e      	ldr	r6, [r1, #0]
 8009fec:	6823      	ldr	r3, [r4, #0]
 8009fee:	f856 5b04 	ldr.w	r5, [r6], #4
 8009ff2:	061f      	lsls	r7, r3, #24
 8009ff4:	600e      	str	r6, [r1, #0]
 8009ff6:	d514      	bpl.n	800a022 <_printf_i+0x1ae>
 8009ff8:	07d9      	lsls	r1, r3, #31
 8009ffa:	bf44      	itt	mi
 8009ffc:	f043 0320 	orrmi.w	r3, r3, #32
 800a000:	6023      	strmi	r3, [r4, #0]
 800a002:	b91d      	cbnz	r5, 800a00c <_printf_i+0x198>
 800a004:	6823      	ldr	r3, [r4, #0]
 800a006:	f023 0320 	bic.w	r3, r3, #32
 800a00a:	6023      	str	r3, [r4, #0]
 800a00c:	2310      	movs	r3, #16
 800a00e:	e7af      	b.n	8009f70 <_printf_i+0xfc>
 800a010:	6823      	ldr	r3, [r4, #0]
 800a012:	f043 0320 	orr.w	r3, r3, #32
 800a016:	6023      	str	r3, [r4, #0]
 800a018:	2378      	movs	r3, #120	; 0x78
 800a01a:	4828      	ldr	r0, [pc, #160]	; (800a0bc <_printf_i+0x248>)
 800a01c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a020:	e7e3      	b.n	8009fea <_printf_i+0x176>
 800a022:	065e      	lsls	r6, r3, #25
 800a024:	bf48      	it	mi
 800a026:	b2ad      	uxthmi	r5, r5
 800a028:	e7e6      	b.n	8009ff8 <_printf_i+0x184>
 800a02a:	4616      	mov	r6, r2
 800a02c:	e7bb      	b.n	8009fa6 <_printf_i+0x132>
 800a02e:	680b      	ldr	r3, [r1, #0]
 800a030:	6826      	ldr	r6, [r4, #0]
 800a032:	1d1d      	adds	r5, r3, #4
 800a034:	6960      	ldr	r0, [r4, #20]
 800a036:	600d      	str	r5, [r1, #0]
 800a038:	0635      	lsls	r5, r6, #24
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	d501      	bpl.n	800a042 <_printf_i+0x1ce>
 800a03e:	6018      	str	r0, [r3, #0]
 800a040:	e002      	b.n	800a048 <_printf_i+0x1d4>
 800a042:	0671      	lsls	r1, r6, #25
 800a044:	d5fb      	bpl.n	800a03e <_printf_i+0x1ca>
 800a046:	8018      	strh	r0, [r3, #0]
 800a048:	2300      	movs	r3, #0
 800a04a:	4616      	mov	r6, r2
 800a04c:	6123      	str	r3, [r4, #16]
 800a04e:	e7ba      	b.n	8009fc6 <_printf_i+0x152>
 800a050:	680b      	ldr	r3, [r1, #0]
 800a052:	1d1a      	adds	r2, r3, #4
 800a054:	600a      	str	r2, [r1, #0]
 800a056:	681e      	ldr	r6, [r3, #0]
 800a058:	2100      	movs	r1, #0
 800a05a:	4630      	mov	r0, r6
 800a05c:	6862      	ldr	r2, [r4, #4]
 800a05e:	f000 f82f 	bl	800a0c0 <memchr>
 800a062:	b108      	cbz	r0, 800a068 <_printf_i+0x1f4>
 800a064:	1b80      	subs	r0, r0, r6
 800a066:	6060      	str	r0, [r4, #4]
 800a068:	6863      	ldr	r3, [r4, #4]
 800a06a:	6123      	str	r3, [r4, #16]
 800a06c:	2300      	movs	r3, #0
 800a06e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a072:	e7a8      	b.n	8009fc6 <_printf_i+0x152>
 800a074:	4632      	mov	r2, r6
 800a076:	4649      	mov	r1, r9
 800a078:	4640      	mov	r0, r8
 800a07a:	6923      	ldr	r3, [r4, #16]
 800a07c:	47d0      	blx	sl
 800a07e:	3001      	adds	r0, #1
 800a080:	d0ab      	beq.n	8009fda <_printf_i+0x166>
 800a082:	6823      	ldr	r3, [r4, #0]
 800a084:	079b      	lsls	r3, r3, #30
 800a086:	d413      	bmi.n	800a0b0 <_printf_i+0x23c>
 800a088:	68e0      	ldr	r0, [r4, #12]
 800a08a:	9b03      	ldr	r3, [sp, #12]
 800a08c:	4298      	cmp	r0, r3
 800a08e:	bfb8      	it	lt
 800a090:	4618      	movlt	r0, r3
 800a092:	e7a4      	b.n	8009fde <_printf_i+0x16a>
 800a094:	2301      	movs	r3, #1
 800a096:	4632      	mov	r2, r6
 800a098:	4649      	mov	r1, r9
 800a09a:	4640      	mov	r0, r8
 800a09c:	47d0      	blx	sl
 800a09e:	3001      	adds	r0, #1
 800a0a0:	d09b      	beq.n	8009fda <_printf_i+0x166>
 800a0a2:	3501      	adds	r5, #1
 800a0a4:	68e3      	ldr	r3, [r4, #12]
 800a0a6:	9903      	ldr	r1, [sp, #12]
 800a0a8:	1a5b      	subs	r3, r3, r1
 800a0aa:	42ab      	cmp	r3, r5
 800a0ac:	dcf2      	bgt.n	800a094 <_printf_i+0x220>
 800a0ae:	e7eb      	b.n	800a088 <_printf_i+0x214>
 800a0b0:	2500      	movs	r5, #0
 800a0b2:	f104 0619 	add.w	r6, r4, #25
 800a0b6:	e7f5      	b.n	800a0a4 <_printf_i+0x230>
 800a0b8:	0800a40b 	.word	0x0800a40b
 800a0bc:	0800a41c 	.word	0x0800a41c

0800a0c0 <memchr>:
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	b510      	push	{r4, lr}
 800a0c4:	b2c9      	uxtb	r1, r1
 800a0c6:	4402      	add	r2, r0
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	d101      	bne.n	800a0d2 <memchr+0x12>
 800a0ce:	2000      	movs	r0, #0
 800a0d0:	e003      	b.n	800a0da <memchr+0x1a>
 800a0d2:	7804      	ldrb	r4, [r0, #0]
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	428c      	cmp	r4, r1
 800a0d8:	d1f6      	bne.n	800a0c8 <memchr+0x8>
 800a0da:	bd10      	pop	{r4, pc}

0800a0dc <memcpy>:
 800a0dc:	440a      	add	r2, r1
 800a0de:	4291      	cmp	r1, r2
 800a0e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a0e4:	d100      	bne.n	800a0e8 <memcpy+0xc>
 800a0e6:	4770      	bx	lr
 800a0e8:	b510      	push	{r4, lr}
 800a0ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0ee:	4291      	cmp	r1, r2
 800a0f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0f4:	d1f9      	bne.n	800a0ea <memcpy+0xe>
 800a0f6:	bd10      	pop	{r4, pc}

0800a0f8 <memmove>:
 800a0f8:	4288      	cmp	r0, r1
 800a0fa:	b510      	push	{r4, lr}
 800a0fc:	eb01 0402 	add.w	r4, r1, r2
 800a100:	d902      	bls.n	800a108 <memmove+0x10>
 800a102:	4284      	cmp	r4, r0
 800a104:	4623      	mov	r3, r4
 800a106:	d807      	bhi.n	800a118 <memmove+0x20>
 800a108:	1e43      	subs	r3, r0, #1
 800a10a:	42a1      	cmp	r1, r4
 800a10c:	d008      	beq.n	800a120 <memmove+0x28>
 800a10e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a112:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a116:	e7f8      	b.n	800a10a <memmove+0x12>
 800a118:	4601      	mov	r1, r0
 800a11a:	4402      	add	r2, r0
 800a11c:	428a      	cmp	r2, r1
 800a11e:	d100      	bne.n	800a122 <memmove+0x2a>
 800a120:	bd10      	pop	{r4, pc}
 800a122:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a126:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a12a:	e7f7      	b.n	800a11c <memmove+0x24>

0800a12c <_free_r>:
 800a12c:	b538      	push	{r3, r4, r5, lr}
 800a12e:	4605      	mov	r5, r0
 800a130:	2900      	cmp	r1, #0
 800a132:	d043      	beq.n	800a1bc <_free_r+0x90>
 800a134:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a138:	1f0c      	subs	r4, r1, #4
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	bfb8      	it	lt
 800a13e:	18e4      	addlt	r4, r4, r3
 800a140:	f000 f8d0 	bl	800a2e4 <__malloc_lock>
 800a144:	4a1e      	ldr	r2, [pc, #120]	; (800a1c0 <_free_r+0x94>)
 800a146:	6813      	ldr	r3, [r2, #0]
 800a148:	4610      	mov	r0, r2
 800a14a:	b933      	cbnz	r3, 800a15a <_free_r+0x2e>
 800a14c:	6063      	str	r3, [r4, #4]
 800a14e:	6014      	str	r4, [r2, #0]
 800a150:	4628      	mov	r0, r5
 800a152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a156:	f000 b8cb 	b.w	800a2f0 <__malloc_unlock>
 800a15a:	42a3      	cmp	r3, r4
 800a15c:	d90a      	bls.n	800a174 <_free_r+0x48>
 800a15e:	6821      	ldr	r1, [r4, #0]
 800a160:	1862      	adds	r2, r4, r1
 800a162:	4293      	cmp	r3, r2
 800a164:	bf01      	itttt	eq
 800a166:	681a      	ldreq	r2, [r3, #0]
 800a168:	685b      	ldreq	r3, [r3, #4]
 800a16a:	1852      	addeq	r2, r2, r1
 800a16c:	6022      	streq	r2, [r4, #0]
 800a16e:	6063      	str	r3, [r4, #4]
 800a170:	6004      	str	r4, [r0, #0]
 800a172:	e7ed      	b.n	800a150 <_free_r+0x24>
 800a174:	461a      	mov	r2, r3
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	b10b      	cbz	r3, 800a17e <_free_r+0x52>
 800a17a:	42a3      	cmp	r3, r4
 800a17c:	d9fa      	bls.n	800a174 <_free_r+0x48>
 800a17e:	6811      	ldr	r1, [r2, #0]
 800a180:	1850      	adds	r0, r2, r1
 800a182:	42a0      	cmp	r0, r4
 800a184:	d10b      	bne.n	800a19e <_free_r+0x72>
 800a186:	6820      	ldr	r0, [r4, #0]
 800a188:	4401      	add	r1, r0
 800a18a:	1850      	adds	r0, r2, r1
 800a18c:	4283      	cmp	r3, r0
 800a18e:	6011      	str	r1, [r2, #0]
 800a190:	d1de      	bne.n	800a150 <_free_r+0x24>
 800a192:	6818      	ldr	r0, [r3, #0]
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	4401      	add	r1, r0
 800a198:	6011      	str	r1, [r2, #0]
 800a19a:	6053      	str	r3, [r2, #4]
 800a19c:	e7d8      	b.n	800a150 <_free_r+0x24>
 800a19e:	d902      	bls.n	800a1a6 <_free_r+0x7a>
 800a1a0:	230c      	movs	r3, #12
 800a1a2:	602b      	str	r3, [r5, #0]
 800a1a4:	e7d4      	b.n	800a150 <_free_r+0x24>
 800a1a6:	6820      	ldr	r0, [r4, #0]
 800a1a8:	1821      	adds	r1, r4, r0
 800a1aa:	428b      	cmp	r3, r1
 800a1ac:	bf01      	itttt	eq
 800a1ae:	6819      	ldreq	r1, [r3, #0]
 800a1b0:	685b      	ldreq	r3, [r3, #4]
 800a1b2:	1809      	addeq	r1, r1, r0
 800a1b4:	6021      	streq	r1, [r4, #0]
 800a1b6:	6063      	str	r3, [r4, #4]
 800a1b8:	6054      	str	r4, [r2, #4]
 800a1ba:	e7c9      	b.n	800a150 <_free_r+0x24>
 800a1bc:	bd38      	pop	{r3, r4, r5, pc}
 800a1be:	bf00      	nop
 800a1c0:	2000070c 	.word	0x2000070c

0800a1c4 <_malloc_r>:
 800a1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1c6:	1ccd      	adds	r5, r1, #3
 800a1c8:	f025 0503 	bic.w	r5, r5, #3
 800a1cc:	3508      	adds	r5, #8
 800a1ce:	2d0c      	cmp	r5, #12
 800a1d0:	bf38      	it	cc
 800a1d2:	250c      	movcc	r5, #12
 800a1d4:	2d00      	cmp	r5, #0
 800a1d6:	4606      	mov	r6, r0
 800a1d8:	db01      	blt.n	800a1de <_malloc_r+0x1a>
 800a1da:	42a9      	cmp	r1, r5
 800a1dc:	d903      	bls.n	800a1e6 <_malloc_r+0x22>
 800a1de:	230c      	movs	r3, #12
 800a1e0:	6033      	str	r3, [r6, #0]
 800a1e2:	2000      	movs	r0, #0
 800a1e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1e6:	f000 f87d 	bl	800a2e4 <__malloc_lock>
 800a1ea:	4921      	ldr	r1, [pc, #132]	; (800a270 <_malloc_r+0xac>)
 800a1ec:	680a      	ldr	r2, [r1, #0]
 800a1ee:	4614      	mov	r4, r2
 800a1f0:	b99c      	cbnz	r4, 800a21a <_malloc_r+0x56>
 800a1f2:	4f20      	ldr	r7, [pc, #128]	; (800a274 <_malloc_r+0xb0>)
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	b923      	cbnz	r3, 800a202 <_malloc_r+0x3e>
 800a1f8:	4621      	mov	r1, r4
 800a1fa:	4630      	mov	r0, r6
 800a1fc:	f000 f862 	bl	800a2c4 <_sbrk_r>
 800a200:	6038      	str	r0, [r7, #0]
 800a202:	4629      	mov	r1, r5
 800a204:	4630      	mov	r0, r6
 800a206:	f000 f85d 	bl	800a2c4 <_sbrk_r>
 800a20a:	1c43      	adds	r3, r0, #1
 800a20c:	d123      	bne.n	800a256 <_malloc_r+0x92>
 800a20e:	230c      	movs	r3, #12
 800a210:	4630      	mov	r0, r6
 800a212:	6033      	str	r3, [r6, #0]
 800a214:	f000 f86c 	bl	800a2f0 <__malloc_unlock>
 800a218:	e7e3      	b.n	800a1e2 <_malloc_r+0x1e>
 800a21a:	6823      	ldr	r3, [r4, #0]
 800a21c:	1b5b      	subs	r3, r3, r5
 800a21e:	d417      	bmi.n	800a250 <_malloc_r+0x8c>
 800a220:	2b0b      	cmp	r3, #11
 800a222:	d903      	bls.n	800a22c <_malloc_r+0x68>
 800a224:	6023      	str	r3, [r4, #0]
 800a226:	441c      	add	r4, r3
 800a228:	6025      	str	r5, [r4, #0]
 800a22a:	e004      	b.n	800a236 <_malloc_r+0x72>
 800a22c:	6863      	ldr	r3, [r4, #4]
 800a22e:	42a2      	cmp	r2, r4
 800a230:	bf0c      	ite	eq
 800a232:	600b      	streq	r3, [r1, #0]
 800a234:	6053      	strne	r3, [r2, #4]
 800a236:	4630      	mov	r0, r6
 800a238:	f000 f85a 	bl	800a2f0 <__malloc_unlock>
 800a23c:	f104 000b 	add.w	r0, r4, #11
 800a240:	1d23      	adds	r3, r4, #4
 800a242:	f020 0007 	bic.w	r0, r0, #7
 800a246:	1ac2      	subs	r2, r0, r3
 800a248:	d0cc      	beq.n	800a1e4 <_malloc_r+0x20>
 800a24a:	1a1b      	subs	r3, r3, r0
 800a24c:	50a3      	str	r3, [r4, r2]
 800a24e:	e7c9      	b.n	800a1e4 <_malloc_r+0x20>
 800a250:	4622      	mov	r2, r4
 800a252:	6864      	ldr	r4, [r4, #4]
 800a254:	e7cc      	b.n	800a1f0 <_malloc_r+0x2c>
 800a256:	1cc4      	adds	r4, r0, #3
 800a258:	f024 0403 	bic.w	r4, r4, #3
 800a25c:	42a0      	cmp	r0, r4
 800a25e:	d0e3      	beq.n	800a228 <_malloc_r+0x64>
 800a260:	1a21      	subs	r1, r4, r0
 800a262:	4630      	mov	r0, r6
 800a264:	f000 f82e 	bl	800a2c4 <_sbrk_r>
 800a268:	3001      	adds	r0, #1
 800a26a:	d1dd      	bne.n	800a228 <_malloc_r+0x64>
 800a26c:	e7cf      	b.n	800a20e <_malloc_r+0x4a>
 800a26e:	bf00      	nop
 800a270:	2000070c 	.word	0x2000070c
 800a274:	20000710 	.word	0x20000710

0800a278 <_realloc_r>:
 800a278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a27a:	4607      	mov	r7, r0
 800a27c:	4614      	mov	r4, r2
 800a27e:	460e      	mov	r6, r1
 800a280:	b921      	cbnz	r1, 800a28c <_realloc_r+0x14>
 800a282:	4611      	mov	r1, r2
 800a284:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a288:	f7ff bf9c 	b.w	800a1c4 <_malloc_r>
 800a28c:	b922      	cbnz	r2, 800a298 <_realloc_r+0x20>
 800a28e:	f7ff ff4d 	bl	800a12c <_free_r>
 800a292:	4625      	mov	r5, r4
 800a294:	4628      	mov	r0, r5
 800a296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a298:	f000 f830 	bl	800a2fc <_malloc_usable_size_r>
 800a29c:	42a0      	cmp	r0, r4
 800a29e:	d20f      	bcs.n	800a2c0 <_realloc_r+0x48>
 800a2a0:	4621      	mov	r1, r4
 800a2a2:	4638      	mov	r0, r7
 800a2a4:	f7ff ff8e 	bl	800a1c4 <_malloc_r>
 800a2a8:	4605      	mov	r5, r0
 800a2aa:	2800      	cmp	r0, #0
 800a2ac:	d0f2      	beq.n	800a294 <_realloc_r+0x1c>
 800a2ae:	4631      	mov	r1, r6
 800a2b0:	4622      	mov	r2, r4
 800a2b2:	f7ff ff13 	bl	800a0dc <memcpy>
 800a2b6:	4631      	mov	r1, r6
 800a2b8:	4638      	mov	r0, r7
 800a2ba:	f7ff ff37 	bl	800a12c <_free_r>
 800a2be:	e7e9      	b.n	800a294 <_realloc_r+0x1c>
 800a2c0:	4635      	mov	r5, r6
 800a2c2:	e7e7      	b.n	800a294 <_realloc_r+0x1c>

0800a2c4 <_sbrk_r>:
 800a2c4:	b538      	push	{r3, r4, r5, lr}
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	4d05      	ldr	r5, [pc, #20]	; (800a2e0 <_sbrk_r+0x1c>)
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	4608      	mov	r0, r1
 800a2ce:	602b      	str	r3, [r5, #0]
 800a2d0:	f7f7 fbf4 	bl	8001abc <_sbrk>
 800a2d4:	1c43      	adds	r3, r0, #1
 800a2d6:	d102      	bne.n	800a2de <_sbrk_r+0x1a>
 800a2d8:	682b      	ldr	r3, [r5, #0]
 800a2da:	b103      	cbz	r3, 800a2de <_sbrk_r+0x1a>
 800a2dc:	6023      	str	r3, [r4, #0]
 800a2de:	bd38      	pop	{r3, r4, r5, pc}
 800a2e0:	20001684 	.word	0x20001684

0800a2e4 <__malloc_lock>:
 800a2e4:	4801      	ldr	r0, [pc, #4]	; (800a2ec <__malloc_lock+0x8>)
 800a2e6:	f000 b811 	b.w	800a30c <__retarget_lock_acquire_recursive>
 800a2ea:	bf00      	nop
 800a2ec:	2000168c 	.word	0x2000168c

0800a2f0 <__malloc_unlock>:
 800a2f0:	4801      	ldr	r0, [pc, #4]	; (800a2f8 <__malloc_unlock+0x8>)
 800a2f2:	f000 b80c 	b.w	800a30e <__retarget_lock_release_recursive>
 800a2f6:	bf00      	nop
 800a2f8:	2000168c 	.word	0x2000168c

0800a2fc <_malloc_usable_size_r>:
 800a2fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a300:	1f18      	subs	r0, r3, #4
 800a302:	2b00      	cmp	r3, #0
 800a304:	bfbc      	itt	lt
 800a306:	580b      	ldrlt	r3, [r1, r0]
 800a308:	18c0      	addlt	r0, r0, r3
 800a30a:	4770      	bx	lr

0800a30c <__retarget_lock_acquire_recursive>:
 800a30c:	4770      	bx	lr

0800a30e <__retarget_lock_release_recursive>:
 800a30e:	4770      	bx	lr

0800a310 <_init>:
 800a310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a312:	bf00      	nop
 800a314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a316:	bc08      	pop	{r3}
 800a318:	469e      	mov	lr, r3
 800a31a:	4770      	bx	lr

0800a31c <_fini>:
 800a31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a31e:	bf00      	nop
 800a320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a322:	bc08      	pop	{r3}
 800a324:	469e      	mov	lr, r3
 800a326:	4770      	bx	lr
