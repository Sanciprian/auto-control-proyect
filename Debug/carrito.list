
carrito.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e4d0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a8  0800e5e0  0800e5e0  0001e5e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed88  0800ed88  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800ed88  0800ed88  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ed88  0800ed88  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0800ed88  0800ed88  0001ed88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ed98  0800ed98  0001ed98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800ed9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015cc  200001e8  0800ef84  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200017b4  0800ef84  000217b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002de09  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000060e3  00000000  00000000  0004e01a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001890  00000000  00000000  00054100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016c0  00000000  00000000  00055990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002176d  00000000  00000000  00057050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002136c  00000000  00000000  000787bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b84e  00000000  00000000  00099b29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00135377  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073c4  00000000  00000000  001353cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e5c8 	.word	0x0800e5c8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800e5c8 	.word	0x0800e5c8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_frsub>:
 8000afc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b00:	e002      	b.n	8000b08 <__addsf3>
 8000b02:	bf00      	nop

08000b04 <__aeabi_fsub>:
 8000b04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b08 <__addsf3>:
 8000b08:	0042      	lsls	r2, r0, #1
 8000b0a:	bf1f      	itttt	ne
 8000b0c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b10:	ea92 0f03 	teqne	r2, r3
 8000b14:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b18:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b1c:	d06a      	beq.n	8000bf4 <__addsf3+0xec>
 8000b1e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b22:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b26:	bfc1      	itttt	gt
 8000b28:	18d2      	addgt	r2, r2, r3
 8000b2a:	4041      	eorgt	r1, r0
 8000b2c:	4048      	eorgt	r0, r1
 8000b2e:	4041      	eorgt	r1, r0
 8000b30:	bfb8      	it	lt
 8000b32:	425b      	neglt	r3, r3
 8000b34:	2b19      	cmp	r3, #25
 8000b36:	bf88      	it	hi
 8000b38:	4770      	bxhi	lr
 8000b3a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b52:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b56:	bf18      	it	ne
 8000b58:	4249      	negne	r1, r1
 8000b5a:	ea92 0f03 	teq	r2, r3
 8000b5e:	d03f      	beq.n	8000be0 <__addsf3+0xd8>
 8000b60:	f1a2 0201 	sub.w	r2, r2, #1
 8000b64:	fa41 fc03 	asr.w	ip, r1, r3
 8000b68:	eb10 000c 	adds.w	r0, r0, ip
 8000b6c:	f1c3 0320 	rsb	r3, r3, #32
 8000b70:	fa01 f103 	lsl.w	r1, r1, r3
 8000b74:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__addsf3+0x78>
 8000b7a:	4249      	negs	r1, r1
 8000b7c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b80:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b84:	d313      	bcc.n	8000bae <__addsf3+0xa6>
 8000b86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b8a:	d306      	bcc.n	8000b9a <__addsf3+0x92>
 8000b8c:	0840      	lsrs	r0, r0, #1
 8000b8e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b92:	f102 0201 	add.w	r2, r2, #1
 8000b96:	2afe      	cmp	r2, #254	; 0xfe
 8000b98:	d251      	bcs.n	8000c3e <__addsf3+0x136>
 8000b9a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ba2:	bf08      	it	eq
 8000ba4:	f020 0001 	biceq.w	r0, r0, #1
 8000ba8:	ea40 0003 	orr.w	r0, r0, r3
 8000bac:	4770      	bx	lr
 8000bae:	0049      	lsls	r1, r1, #1
 8000bb0:	eb40 0000 	adc.w	r0, r0, r0
 8000bb4:	3a01      	subs	r2, #1
 8000bb6:	bf28      	it	cs
 8000bb8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bbc:	d2ed      	bcs.n	8000b9a <__addsf3+0x92>
 8000bbe:	fab0 fc80 	clz	ip, r0
 8000bc2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bc6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bca:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bce:	bfaa      	itet	ge
 8000bd0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bd4:	4252      	neglt	r2, r2
 8000bd6:	4318      	orrge	r0, r3
 8000bd8:	bfbc      	itt	lt
 8000bda:	40d0      	lsrlt	r0, r2
 8000bdc:	4318      	orrlt	r0, r3
 8000bde:	4770      	bx	lr
 8000be0:	f092 0f00 	teq	r2, #0
 8000be4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000be8:	bf06      	itte	eq
 8000bea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bee:	3201      	addeq	r2, #1
 8000bf0:	3b01      	subne	r3, #1
 8000bf2:	e7b5      	b.n	8000b60 <__addsf3+0x58>
 8000bf4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bf8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bfc:	bf18      	it	ne
 8000bfe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c02:	d021      	beq.n	8000c48 <__addsf3+0x140>
 8000c04:	ea92 0f03 	teq	r2, r3
 8000c08:	d004      	beq.n	8000c14 <__addsf3+0x10c>
 8000c0a:	f092 0f00 	teq	r2, #0
 8000c0e:	bf08      	it	eq
 8000c10:	4608      	moveq	r0, r1
 8000c12:	4770      	bx	lr
 8000c14:	ea90 0f01 	teq	r0, r1
 8000c18:	bf1c      	itt	ne
 8000c1a:	2000      	movne	r0, #0
 8000c1c:	4770      	bxne	lr
 8000c1e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c22:	d104      	bne.n	8000c2e <__addsf3+0x126>
 8000c24:	0040      	lsls	r0, r0, #1
 8000c26:	bf28      	it	cs
 8000c28:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c2c:	4770      	bx	lr
 8000c2e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c32:	bf3c      	itt	cc
 8000c34:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c38:	4770      	bxcc	lr
 8000c3a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c3e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c46:	4770      	bx	lr
 8000c48:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c4c:	bf16      	itet	ne
 8000c4e:	4608      	movne	r0, r1
 8000c50:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c54:	4601      	movne	r1, r0
 8000c56:	0242      	lsls	r2, r0, #9
 8000c58:	bf06      	itte	eq
 8000c5a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c5e:	ea90 0f01 	teqeq	r0, r1
 8000c62:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_ui2f>:
 8000c68:	f04f 0300 	mov.w	r3, #0
 8000c6c:	e004      	b.n	8000c78 <__aeabi_i2f+0x8>
 8000c6e:	bf00      	nop

08000c70 <__aeabi_i2f>:
 8000c70:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c74:	bf48      	it	mi
 8000c76:	4240      	negmi	r0, r0
 8000c78:	ea5f 0c00 	movs.w	ip, r0
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c84:	4601      	mov	r1, r0
 8000c86:	f04f 0000 	mov.w	r0, #0
 8000c8a:	e01c      	b.n	8000cc6 <__aeabi_l2f+0x2a>

08000c8c <__aeabi_ul2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e00a      	b.n	8000cb0 <__aeabi_l2f+0x14>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_l2f>:
 8000c9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca0:	bf08      	it	eq
 8000ca2:	4770      	bxeq	lr
 8000ca4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ca8:	d502      	bpl.n	8000cb0 <__aeabi_l2f+0x14>
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	ea5f 0c01 	movs.w	ip, r1
 8000cb4:	bf02      	ittt	eq
 8000cb6:	4684      	moveq	ip, r0
 8000cb8:	4601      	moveq	r1, r0
 8000cba:	2000      	moveq	r0, #0
 8000cbc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cc0:	bf08      	it	eq
 8000cc2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cca:	fabc f28c 	clz	r2, ip
 8000cce:	3a08      	subs	r2, #8
 8000cd0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cd4:	db10      	blt.n	8000cf8 <__aeabi_l2f+0x5c>
 8000cd6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cda:	4463      	add	r3, ip
 8000cdc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ce0:	f1c2 0220 	rsb	r2, r2, #32
 8000ce4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ce8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cec:	eb43 0002 	adc.w	r0, r3, r2
 8000cf0:	bf08      	it	eq
 8000cf2:	f020 0001 	biceq.w	r0, r0, #1
 8000cf6:	4770      	bx	lr
 8000cf8:	f102 0220 	add.w	r2, r2, #32
 8000cfc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d00:	f1c2 0220 	rsb	r2, r2, #32
 8000d04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d08:	fa21 f202 	lsr.w	r2, r1, r2
 8000d0c:	eb43 0002 	adc.w	r0, r3, r2
 8000d10:	bf08      	it	eq
 8000d12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_fmul>:
 8000d18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d20:	bf1e      	ittt	ne
 8000d22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d26:	ea92 0f0c 	teqne	r2, ip
 8000d2a:	ea93 0f0c 	teqne	r3, ip
 8000d2e:	d06f      	beq.n	8000e10 <__aeabi_fmul+0xf8>
 8000d30:	441a      	add	r2, r3
 8000d32:	ea80 0c01 	eor.w	ip, r0, r1
 8000d36:	0240      	lsls	r0, r0, #9
 8000d38:	bf18      	it	ne
 8000d3a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d3e:	d01e      	beq.n	8000d7e <__aeabi_fmul+0x66>
 8000d40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d44:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d48:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d4c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d58:	bf3e      	ittt	cc
 8000d5a:	0049      	lslcc	r1, r1, #1
 8000d5c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d60:	005b      	lslcc	r3, r3, #1
 8000d62:	ea40 0001 	orr.w	r0, r0, r1
 8000d66:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d6a:	2afd      	cmp	r2, #253	; 0xfd
 8000d6c:	d81d      	bhi.n	8000daa <__aeabi_fmul+0x92>
 8000d6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	4770      	bx	lr
 8000d7e:	f090 0f00 	teq	r0, #0
 8000d82:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d86:	bf08      	it	eq
 8000d88:	0249      	lsleq	r1, r1, #9
 8000d8a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d8e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d92:	3a7f      	subs	r2, #127	; 0x7f
 8000d94:	bfc2      	ittt	gt
 8000d96:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d9a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d9e:	4770      	bxgt	lr
 8000da0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	3a01      	subs	r2, #1
 8000daa:	dc5d      	bgt.n	8000e68 <__aeabi_fmul+0x150>
 8000dac:	f112 0f19 	cmn.w	r2, #25
 8000db0:	bfdc      	itt	le
 8000db2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000db6:	4770      	bxle	lr
 8000db8:	f1c2 0200 	rsb	r2, r2, #0
 8000dbc:	0041      	lsls	r1, r0, #1
 8000dbe:	fa21 f102 	lsr.w	r1, r1, r2
 8000dc2:	f1c2 0220 	rsb	r2, r2, #32
 8000dc6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dca:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dce:	f140 0000 	adc.w	r0, r0, #0
 8000dd2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dd6:	bf08      	it	eq
 8000dd8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ddc:	4770      	bx	lr
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0040      	lsleq	r0, r0, #1
 8000dea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dee:	3a01      	subeq	r2, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fmul+0xce>
 8000df2:	ea40 000c 	orr.w	r0, r0, ip
 8000df6:	f093 0f00 	teq	r3, #0
 8000dfa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfe:	bf02      	ittt	eq
 8000e00:	0049      	lsleq	r1, r1, #1
 8000e02:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e06:	3b01      	subeq	r3, #1
 8000e08:	d0f9      	beq.n	8000dfe <__aeabi_fmul+0xe6>
 8000e0a:	ea41 010c 	orr.w	r1, r1, ip
 8000e0e:	e78f      	b.n	8000d30 <__aeabi_fmul+0x18>
 8000e10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e14:	ea92 0f0c 	teq	r2, ip
 8000e18:	bf18      	it	ne
 8000e1a:	ea93 0f0c 	teqne	r3, ip
 8000e1e:	d00a      	beq.n	8000e36 <__aeabi_fmul+0x11e>
 8000e20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e24:	bf18      	it	ne
 8000e26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	d1d8      	bne.n	8000dde <__aeabi_fmul+0xc6>
 8000e2c:	ea80 0001 	eor.w	r0, r0, r1
 8000e30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e34:	4770      	bx	lr
 8000e36:	f090 0f00 	teq	r0, #0
 8000e3a:	bf17      	itett	ne
 8000e3c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e40:	4608      	moveq	r0, r1
 8000e42:	f091 0f00 	teqne	r1, #0
 8000e46:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e4a:	d014      	beq.n	8000e76 <__aeabi_fmul+0x15e>
 8000e4c:	ea92 0f0c 	teq	r2, ip
 8000e50:	d101      	bne.n	8000e56 <__aeabi_fmul+0x13e>
 8000e52:	0242      	lsls	r2, r0, #9
 8000e54:	d10f      	bne.n	8000e76 <__aeabi_fmul+0x15e>
 8000e56:	ea93 0f0c 	teq	r3, ip
 8000e5a:	d103      	bne.n	8000e64 <__aeabi_fmul+0x14c>
 8000e5c:	024b      	lsls	r3, r1, #9
 8000e5e:	bf18      	it	ne
 8000e60:	4608      	movne	r0, r1
 8000e62:	d108      	bne.n	8000e76 <__aeabi_fmul+0x15e>
 8000e64:	ea80 0001 	eor.w	r0, r0, r1
 8000e68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e74:	4770      	bx	lr
 8000e76:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e7a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e7e:	4770      	bx	lr

08000e80 <__aeabi_fdiv>:
 8000e80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e88:	bf1e      	ittt	ne
 8000e8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e8e:	ea92 0f0c 	teqne	r2, ip
 8000e92:	ea93 0f0c 	teqne	r3, ip
 8000e96:	d069      	beq.n	8000f6c <__aeabi_fdiv+0xec>
 8000e98:	eba2 0203 	sub.w	r2, r2, r3
 8000e9c:	ea80 0c01 	eor.w	ip, r0, r1
 8000ea0:	0249      	lsls	r1, r1, #9
 8000ea2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ea6:	d037      	beq.n	8000f18 <__aeabi_fdiv+0x98>
 8000ea8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000eb0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000eb4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	bf38      	it	cc
 8000ebc:	005b      	lslcc	r3, r3, #1
 8000ebe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ec2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	bf24      	itt	cs
 8000eca:	1a5b      	subcs	r3, r3, r1
 8000ecc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ed0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ed4:	bf24      	itt	cs
 8000ed6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eda:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ede:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ee2:	bf24      	itt	cs
 8000ee4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ee8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ef6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	bf18      	it	ne
 8000efe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f02:	d1e0      	bne.n	8000ec6 <__aeabi_fdiv+0x46>
 8000f04:	2afd      	cmp	r2, #253	; 0xfd
 8000f06:	f63f af50 	bhi.w	8000daa <__aeabi_fmul+0x92>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f10:	bf08      	it	eq
 8000f12:	f020 0001 	biceq.w	r0, r0, #1
 8000f16:	4770      	bx	lr
 8000f18:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f1c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f20:	327f      	adds	r2, #127	; 0x7f
 8000f22:	bfc2      	ittt	gt
 8000f24:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f28:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f2c:	4770      	bxgt	lr
 8000f2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f32:	f04f 0300 	mov.w	r3, #0
 8000f36:	3a01      	subs	r2, #1
 8000f38:	e737      	b.n	8000daa <__aeabi_fmul+0x92>
 8000f3a:	f092 0f00 	teq	r2, #0
 8000f3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0040      	lsleq	r0, r0, #1
 8000f46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f4a:	3a01      	subeq	r2, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fdiv+0xc2>
 8000f4e:	ea40 000c 	orr.w	r0, r0, ip
 8000f52:	f093 0f00 	teq	r3, #0
 8000f56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f5a:	bf02      	ittt	eq
 8000f5c:	0049      	lsleq	r1, r1, #1
 8000f5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f62:	3b01      	subeq	r3, #1
 8000f64:	d0f9      	beq.n	8000f5a <__aeabi_fdiv+0xda>
 8000f66:	ea41 010c 	orr.w	r1, r1, ip
 8000f6a:	e795      	b.n	8000e98 <__aeabi_fdiv+0x18>
 8000f6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f70:	ea92 0f0c 	teq	r2, ip
 8000f74:	d108      	bne.n	8000f88 <__aeabi_fdiv+0x108>
 8000f76:	0242      	lsls	r2, r0, #9
 8000f78:	f47f af7d 	bne.w	8000e76 <__aeabi_fmul+0x15e>
 8000f7c:	ea93 0f0c 	teq	r3, ip
 8000f80:	f47f af70 	bne.w	8000e64 <__aeabi_fmul+0x14c>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e776      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	d104      	bne.n	8000f98 <__aeabi_fdiv+0x118>
 8000f8e:	024b      	lsls	r3, r1, #9
 8000f90:	f43f af4c 	beq.w	8000e2c <__aeabi_fmul+0x114>
 8000f94:	4608      	mov	r0, r1
 8000f96:	e76e      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000f98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f9c:	bf18      	it	ne
 8000f9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fa2:	d1ca      	bne.n	8000f3a <__aeabi_fdiv+0xba>
 8000fa4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fa8:	f47f af5c 	bne.w	8000e64 <__aeabi_fmul+0x14c>
 8000fac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fb0:	f47f af3c 	bne.w	8000e2c <__aeabi_fmul+0x114>
 8000fb4:	e75f      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000fb6:	bf00      	nop

08000fb8 <__gesf2>:
 8000fb8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fbc:	e006      	b.n	8000fcc <__cmpsf2+0x4>
 8000fbe:	bf00      	nop

08000fc0 <__lesf2>:
 8000fc0:	f04f 0c01 	mov.w	ip, #1
 8000fc4:	e002      	b.n	8000fcc <__cmpsf2+0x4>
 8000fc6:	bf00      	nop

08000fc8 <__cmpsf2>:
 8000fc8:	f04f 0c01 	mov.w	ip, #1
 8000fcc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fd0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fdc:	bf18      	it	ne
 8000fde:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fe2:	d011      	beq.n	8001008 <__cmpsf2+0x40>
 8000fe4:	b001      	add	sp, #4
 8000fe6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fea:	bf18      	it	ne
 8000fec:	ea90 0f01 	teqne	r0, r1
 8000ff0:	bf58      	it	pl
 8000ff2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ff6:	bf88      	it	hi
 8000ff8:	17c8      	asrhi	r0, r1, #31
 8000ffa:	bf38      	it	cc
 8000ffc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001000:	bf18      	it	ne
 8001002:	f040 0001 	orrne.w	r0, r0, #1
 8001006:	4770      	bx	lr
 8001008:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800100c:	d102      	bne.n	8001014 <__cmpsf2+0x4c>
 800100e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001012:	d105      	bne.n	8001020 <__cmpsf2+0x58>
 8001014:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001018:	d1e4      	bne.n	8000fe4 <__cmpsf2+0x1c>
 800101a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800101e:	d0e1      	beq.n	8000fe4 <__cmpsf2+0x1c>
 8001020:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <__aeabi_cfrcmple>:
 8001028:	4684      	mov	ip, r0
 800102a:	4608      	mov	r0, r1
 800102c:	4661      	mov	r1, ip
 800102e:	e7ff      	b.n	8001030 <__aeabi_cfcmpeq>

08001030 <__aeabi_cfcmpeq>:
 8001030:	b50f      	push	{r0, r1, r2, r3, lr}
 8001032:	f7ff ffc9 	bl	8000fc8 <__cmpsf2>
 8001036:	2800      	cmp	r0, #0
 8001038:	bf48      	it	mi
 800103a:	f110 0f00 	cmnmi.w	r0, #0
 800103e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001040 <__aeabi_fcmpeq>:
 8001040:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001044:	f7ff fff4 	bl	8001030 <__aeabi_cfcmpeq>
 8001048:	bf0c      	ite	eq
 800104a:	2001      	moveq	r0, #1
 800104c:	2000      	movne	r0, #0
 800104e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001052:	bf00      	nop

08001054 <__aeabi_fcmplt>:
 8001054:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001058:	f7ff ffea 	bl	8001030 <__aeabi_cfcmpeq>
 800105c:	bf34      	ite	cc
 800105e:	2001      	movcc	r0, #1
 8001060:	2000      	movcs	r0, #0
 8001062:	f85d fb08 	ldr.w	pc, [sp], #8
 8001066:	bf00      	nop

08001068 <__aeabi_fcmple>:
 8001068:	f84d ed08 	str.w	lr, [sp, #-8]!
 800106c:	f7ff ffe0 	bl	8001030 <__aeabi_cfcmpeq>
 8001070:	bf94      	ite	ls
 8001072:	2001      	movls	r0, #1
 8001074:	2000      	movhi	r0, #0
 8001076:	f85d fb08 	ldr.w	pc, [sp], #8
 800107a:	bf00      	nop

0800107c <__aeabi_fcmpge>:
 800107c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001080:	f7ff ffd2 	bl	8001028 <__aeabi_cfrcmple>
 8001084:	bf94      	ite	ls
 8001086:	2001      	movls	r0, #1
 8001088:	2000      	movhi	r0, #0
 800108a:	f85d fb08 	ldr.w	pc, [sp], #8
 800108e:	bf00      	nop

08001090 <__aeabi_fcmpgt>:
 8001090:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001094:	f7ff ffc8 	bl	8001028 <__aeabi_cfrcmple>
 8001098:	bf34      	ite	cc
 800109a:	2001      	movcc	r0, #1
 800109c:	2000      	movcs	r0, #0
 800109e:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a2:	bf00      	nop

080010a4 <__aeabi_f2iz>:
 80010a4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010a8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010ac:	d30f      	bcc.n	80010ce <__aeabi_f2iz+0x2a>
 80010ae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010b2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010b6:	d90d      	bls.n	80010d4 <__aeabi_f2iz+0x30>
 80010b8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010c0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010c4:	fa23 f002 	lsr.w	r0, r3, r2
 80010c8:	bf18      	it	ne
 80010ca:	4240      	negne	r0, r0
 80010cc:	4770      	bx	lr
 80010ce:	f04f 0000 	mov.w	r0, #0
 80010d2:	4770      	bx	lr
 80010d4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010d8:	d101      	bne.n	80010de <__aeabi_f2iz+0x3a>
 80010da:	0242      	lsls	r2, r0, #9
 80010dc:	d105      	bne.n	80010ea <__aeabi_f2iz+0x46>
 80010de:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010e2:	bf08      	it	eq
 80010e4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4770      	bx	lr

080010f0 <__aeabi_f2uiz>:
 80010f0:	0042      	lsls	r2, r0, #1
 80010f2:	d20e      	bcs.n	8001112 <__aeabi_f2uiz+0x22>
 80010f4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010f8:	d30b      	bcc.n	8001112 <__aeabi_f2uiz+0x22>
 80010fa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010fe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001102:	d409      	bmi.n	8001118 <__aeabi_f2uiz+0x28>
 8001104:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001108:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800110c:	fa23 f002 	lsr.w	r0, r3, r2
 8001110:	4770      	bx	lr
 8001112:	f04f 0000 	mov.w	r0, #0
 8001116:	4770      	bx	lr
 8001118:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800111c:	d101      	bne.n	8001122 <__aeabi_f2uiz+0x32>
 800111e:	0242      	lsls	r2, r0, #9
 8001120:	d102      	bne.n	8001128 <__aeabi_f2uiz+0x38>
 8001122:	f04f 30ff 	mov.w	r0, #4294967295
 8001126:	4770      	bx	lr
 8001128:	f04f 0000 	mov.w	r0, #0
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop

08001130 <SelectPage>:
 * 			 PAGE_1]
 *
 * 	 @retval None
 */
void SelectPage(uint8_t page)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af04      	add	r7, sp, #16
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]

	if (HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, PAGE_ID_ADDR, 1, &page, 1, 100) != HAL_OK)
 800113a:	2364      	movs	r3, #100	; 0x64
 800113c:	9302      	str	r3, [sp, #8]
 800113e:	2301      	movs	r3, #1
 8001140:	9301      	str	r3, [sp, #4]
 8001142:	1dfb      	adds	r3, r7, #7
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2301      	movs	r3, #1
 8001148:	2207      	movs	r2, #7
 800114a:	2150      	movs	r1, #80	; 0x50
 800114c:	4807      	ldr	r0, [pc, #28]	; (800116c <SelectPage+0x3c>)
 800114e:	f003 f83d 	bl	80041cc <HAL_I2C_Mem_Write>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d002      	beq.n	800115e <SelectPage+0x2e>
	{
		printf("Register page replacement could not be set\n");
 8001158:	4805      	ldr	r0, [pc, #20]	; (8001170 <SelectPage+0x40>)
 800115a:	f00c fa6b 	bl	800d634 <puts>
	}
	HAL_Delay(50);
 800115e:	2032      	movs	r0, #50	; 0x32
 8001160:	f002 fb0c 	bl	800377c <HAL_Delay>
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200005b0 	.word	0x200005b0
 8001170:	0800e640 	.word	0x0800e640

08001174 <ReadData>:
 *			 SENSOR_QUATERNION]
 *
 *   @retval Structure containing the values ​​of the read data
 */
void ReadData(BNO055_Sensors_t *sensorData, BNO055_Sensor_Type sensors)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af04      	add	r7, sp, #16
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	70fb      	strb	r3, [r7, #3]

	uint8_t buffer[8];

	if (sensors & SENSOR_GRAVITY)
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	2b00      	cmp	r3, #0
 8001188:	d05c      	beq.n	8001244 <ReadData+0xd0>
	{

		HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_GRAVITY, 1, buffer, 6, HAL_MAX_DELAY);
 800118a:	f04f 33ff 	mov.w	r3, #4294967295
 800118e:	9302      	str	r3, [sp, #8]
 8001190:	2306      	movs	r3, #6
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	f107 0308 	add.w	r3, r7, #8
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2301      	movs	r3, #1
 800119c:	222e      	movs	r2, #46	; 0x2e
 800119e:	2150      	movs	r1, #80	; 0x50
 80011a0:	48b9      	ldr	r0, [pc, #740]	; (8001488 <ReadData+0x314>)
 80011a2:	f003 f90d 	bl	80043c0 <HAL_I2C_Mem_Read>
		sensorData->Gravity.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0])) / 100.0);
 80011a6:	7a7b      	ldrb	r3, [r7, #9]
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	b21a      	sxth	r2, r3
 80011ac:	7a3b      	ldrb	r3, [r7, #8]
 80011ae:	b21b      	sxth	r3, r3
 80011b0:	4313      	orrs	r3, r2
 80011b2:	b21b      	sxth	r3, r3
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f925 	bl	8000404 <__aeabi_i2d>
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	4bb3      	ldr	r3, [pc, #716]	; (800148c <ReadData+0x318>)
 80011c0:	f7ff fab4 	bl	800072c <__aeabi_ddiv>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	f7ff fc46 	bl	8000a5c <__aeabi_d2f>
 80011d0:	4602      	mov	r2, r0
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	63da      	str	r2, [r3, #60]	; 0x3c
		sensorData->Gravity.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2])) / 100.0);
 80011d6:	7afb      	ldrb	r3, [r7, #11]
 80011d8:	021b      	lsls	r3, r3, #8
 80011da:	b21a      	sxth	r2, r3
 80011dc:	7abb      	ldrb	r3, [r7, #10]
 80011de:	b21b      	sxth	r3, r3
 80011e0:	4313      	orrs	r3, r2
 80011e2:	b21b      	sxth	r3, r3
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff f90d 	bl	8000404 <__aeabi_i2d>
 80011ea:	f04f 0200 	mov.w	r2, #0
 80011ee:	4ba7      	ldr	r3, [pc, #668]	; (800148c <ReadData+0x318>)
 80011f0:	f7ff fa9c 	bl	800072c <__aeabi_ddiv>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4610      	mov	r0, r2
 80011fa:	4619      	mov	r1, r3
 80011fc:	f7ff fc2e 	bl	8000a5c <__aeabi_d2f>
 8001200:	4602      	mov	r2, r0
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	641a      	str	r2, [r3, #64]	; 0x40
		sensorData->Gravity.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4])) / 100.0);
 8001206:	7b7b      	ldrb	r3, [r7, #13]
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	b21a      	sxth	r2, r3
 800120c:	7b3b      	ldrb	r3, [r7, #12]
 800120e:	b21b      	sxth	r3, r3
 8001210:	4313      	orrs	r3, r2
 8001212:	b21b      	sxth	r3, r3
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff f8f5 	bl	8000404 <__aeabi_i2d>
 800121a:	f04f 0200 	mov.w	r2, #0
 800121e:	4b9b      	ldr	r3, [pc, #620]	; (800148c <ReadData+0x318>)
 8001220:	f7ff fa84 	bl	800072c <__aeabi_ddiv>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4610      	mov	r0, r2
 800122a:	4619      	mov	r1, r3
 800122c:	f7ff fc16 	bl	8000a5c <__aeabi_d2f>
 8001230:	4602      	mov	r2, r0
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	645a      	str	r2, [r3, #68]	; 0x44
		memset(buffer, 0, sizeof(buffer));
 8001236:	f107 0308 	add.w	r3, r7, #8
 800123a:	2208      	movs	r2, #8
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f00c f982 	bl	800d548 <memset>
	}

	if (sensors & SENSOR_QUATERNION)
 8001244:	78fb      	ldrb	r3, [r7, #3]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d064      	beq.n	8001318 <ReadData+0x1a4>
	{

		HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_QUATERNION, 1, buffer, 8, HAL_MAX_DELAY);
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	9302      	str	r3, [sp, #8]
 8001254:	2308      	movs	r3, #8
 8001256:	9301      	str	r3, [sp, #4]
 8001258:	f107 0308 	add.w	r3, r7, #8
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2301      	movs	r3, #1
 8001260:	2220      	movs	r2, #32
 8001262:	2150      	movs	r1, #80	; 0x50
 8001264:	4888      	ldr	r0, [pc, #544]	; (8001488 <ReadData+0x314>)
 8001266:	f003 f8ab 	bl	80043c0 <HAL_I2C_Mem_Read>
		sensorData->Quaternion.W = (float)(((int16_t)((buffer[1] << 8) | buffer[0])) / (1 << 14));
 800126a:	7a7b      	ldrb	r3, [r7, #9]
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	b21a      	sxth	r2, r3
 8001270:	7a3b      	ldrb	r3, [r7, #8]
 8001272:	b21b      	sxth	r3, r3
 8001274:	4313      	orrs	r3, r2
 8001276:	b21b      	sxth	r3, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	da02      	bge.n	8001282 <ReadData+0x10e>
 800127c:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001280:	333f      	adds	r3, #63	; 0x3f
 8001282:	139b      	asrs	r3, r3, #14
 8001284:	b21b      	sxth	r3, r3
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fcf2 	bl	8000c70 <__aeabi_i2f>
 800128c:	4602      	mov	r2, r0
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	649a      	str	r2, [r3, #72]	; 0x48
		sensorData->Quaternion.X = (float)(((int16_t)((buffer[3] << 8) | buffer[2])) / (1 << 14));
 8001292:	7afb      	ldrb	r3, [r7, #11]
 8001294:	021b      	lsls	r3, r3, #8
 8001296:	b21a      	sxth	r2, r3
 8001298:	7abb      	ldrb	r3, [r7, #10]
 800129a:	b21b      	sxth	r3, r3
 800129c:	4313      	orrs	r3, r2
 800129e:	b21b      	sxth	r3, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	da02      	bge.n	80012aa <ReadData+0x136>
 80012a4:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80012a8:	333f      	adds	r3, #63	; 0x3f
 80012aa:	139b      	asrs	r3, r3, #14
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fcde 	bl	8000c70 <__aeabi_i2f>
 80012b4:	4602      	mov	r2, r0
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	64da      	str	r2, [r3, #76]	; 0x4c
		sensorData->Quaternion.Y = (float)(((int16_t)((buffer[5] << 8) | buffer[4])) / (1 << 14));
 80012ba:	7b7b      	ldrb	r3, [r7, #13]
 80012bc:	021b      	lsls	r3, r3, #8
 80012be:	b21a      	sxth	r2, r3
 80012c0:	7b3b      	ldrb	r3, [r7, #12]
 80012c2:	b21b      	sxth	r3, r3
 80012c4:	4313      	orrs	r3, r2
 80012c6:	b21b      	sxth	r3, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	da02      	bge.n	80012d2 <ReadData+0x15e>
 80012cc:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80012d0:	333f      	adds	r3, #63	; 0x3f
 80012d2:	139b      	asrs	r3, r3, #14
 80012d4:	b21b      	sxth	r3, r3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fcca 	bl	8000c70 <__aeabi_i2f>
 80012dc:	4602      	mov	r2, r0
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	651a      	str	r2, [r3, #80]	; 0x50
		sensorData->Quaternion.Z = (float)(((int16_t)((buffer[7] << 8) | buffer[6])) / (1 << 14));
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	021b      	lsls	r3, r3, #8
 80012e6:	b21a      	sxth	r2, r3
 80012e8:	7bbb      	ldrb	r3, [r7, #14]
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	4313      	orrs	r3, r2
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	da02      	bge.n	80012fa <ReadData+0x186>
 80012f4:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80012f8:	333f      	adds	r3, #63	; 0x3f
 80012fa:	139b      	asrs	r3, r3, #14
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fcb6 	bl	8000c70 <__aeabi_i2f>
 8001304:	4602      	mov	r2, r0
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	655a      	str	r2, [r3, #84]	; 0x54
		memset(buffer, 0, sizeof(buffer));
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	2208      	movs	r2, #8
 8001310:	2100      	movs	r1, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f00c f918 	bl	800d548 <memset>
	}

	if (sensors & SENSOR_LINACC)
 8001318:	78fb      	ldrb	r3, [r7, #3]
 800131a:	f003 0304 	and.w	r3, r3, #4
 800131e:	2b00      	cmp	r3, #0
 8001320:	d05c      	beq.n	80013dc <ReadData+0x268>
	{

		HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_LINACC, 1, buffer, 6, HAL_MAX_DELAY);
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
 8001326:	9302      	str	r3, [sp, #8]
 8001328:	2306      	movs	r3, #6
 800132a:	9301      	str	r3, [sp, #4]
 800132c:	f107 0308 	add.w	r3, r7, #8
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	2301      	movs	r3, #1
 8001334:	2228      	movs	r2, #40	; 0x28
 8001336:	2150      	movs	r1, #80	; 0x50
 8001338:	4853      	ldr	r0, [pc, #332]	; (8001488 <ReadData+0x314>)
 800133a:	f003 f841 	bl	80043c0 <HAL_I2C_Mem_Read>
		sensorData->LineerAcc.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0])) / 100.0);
 800133e:	7a7b      	ldrb	r3, [r7, #9]
 8001340:	021b      	lsls	r3, r3, #8
 8001342:	b21a      	sxth	r2, r3
 8001344:	7a3b      	ldrb	r3, [r7, #8]
 8001346:	b21b      	sxth	r3, r3
 8001348:	4313      	orrs	r3, r2
 800134a:	b21b      	sxth	r3, r3
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f859 	bl	8000404 <__aeabi_i2d>
 8001352:	f04f 0200 	mov.w	r2, #0
 8001356:	4b4d      	ldr	r3, [pc, #308]	; (800148c <ReadData+0x318>)
 8001358:	f7ff f9e8 	bl	800072c <__aeabi_ddiv>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4610      	mov	r0, r2
 8001362:	4619      	mov	r1, r3
 8001364:	f7ff fb7a 	bl	8000a5c <__aeabi_d2f>
 8001368:	4602      	mov	r2, r0
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	631a      	str	r2, [r3, #48]	; 0x30
		sensorData->LineerAcc.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2])) / 100.0);
 800136e:	7afb      	ldrb	r3, [r7, #11]
 8001370:	021b      	lsls	r3, r3, #8
 8001372:	b21a      	sxth	r2, r3
 8001374:	7abb      	ldrb	r3, [r7, #10]
 8001376:	b21b      	sxth	r3, r3
 8001378:	4313      	orrs	r3, r2
 800137a:	b21b      	sxth	r3, r3
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f841 	bl	8000404 <__aeabi_i2d>
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	4b41      	ldr	r3, [pc, #260]	; (800148c <ReadData+0x318>)
 8001388:	f7ff f9d0 	bl	800072c <__aeabi_ddiv>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	f7ff fb62 	bl	8000a5c <__aeabi_d2f>
 8001398:	4602      	mov	r2, r0
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	635a      	str	r2, [r3, #52]	; 0x34
		sensorData->LineerAcc.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4])) / 100.0);
 800139e:	7b7b      	ldrb	r3, [r7, #13]
 80013a0:	021b      	lsls	r3, r3, #8
 80013a2:	b21a      	sxth	r2, r3
 80013a4:	7b3b      	ldrb	r3, [r7, #12]
 80013a6:	b21b      	sxth	r3, r3
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f829 	bl	8000404 <__aeabi_i2d>
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	4b35      	ldr	r3, [pc, #212]	; (800148c <ReadData+0x318>)
 80013b8:	f7ff f9b8 	bl	800072c <__aeabi_ddiv>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4610      	mov	r0, r2
 80013c2:	4619      	mov	r1, r3
 80013c4:	f7ff fb4a 	bl	8000a5c <__aeabi_d2f>
 80013c8:	4602      	mov	r2, r0
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	639a      	str	r2, [r3, #56]	; 0x38
		memset(buffer, 0, sizeof(buffer));
 80013ce:	f107 0308 	add.w	r3, r7, #8
 80013d2:	2208      	movs	r2, #8
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f00c f8b6 	bl	800d548 <memset>
	}

	if (sensors & SENSOR_GYRO)
 80013dc:	78fb      	ldrb	r3, [r7, #3]
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d063      	beq.n	80014ae <ReadData+0x33a>
	{

		HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_GYRO, 1, buffer, 6, HAL_MAX_DELAY);
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ea:	9302      	str	r3, [sp, #8]
 80013ec:	2306      	movs	r3, #6
 80013ee:	9301      	str	r3, [sp, #4]
 80013f0:	f107 0308 	add.w	r3, r7, #8
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	2301      	movs	r3, #1
 80013f8:	2214      	movs	r2, #20
 80013fa:	2150      	movs	r1, #80	; 0x50
 80013fc:	4822      	ldr	r0, [pc, #136]	; (8001488 <ReadData+0x314>)
 80013fe:	f002 ffdf 	bl	80043c0 <HAL_I2C_Mem_Read>
		sensorData->Gyro.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0])) / 16.0);
 8001402:	7a7b      	ldrb	r3, [r7, #9]
 8001404:	021b      	lsls	r3, r3, #8
 8001406:	b21a      	sxth	r2, r3
 8001408:	7a3b      	ldrb	r3, [r7, #8]
 800140a:	b21b      	sxth	r3, r3
 800140c:	4313      	orrs	r3, r2
 800140e:	b21b      	sxth	r3, r3
 8001410:	4618      	mov	r0, r3
 8001412:	f7fe fff7 	bl	8000404 <__aeabi_i2d>
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <ReadData+0x31c>)
 800141c:	f7ff f986 	bl	800072c <__aeabi_ddiv>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4610      	mov	r0, r2
 8001426:	4619      	mov	r1, r3
 8001428:	f7ff fb18 	bl	8000a5c <__aeabi_d2f>
 800142c:	4602      	mov	r2, r0
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	60da      	str	r2, [r3, #12]
		sensorData->Gyro.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2])) / 16.0);
 8001432:	7afb      	ldrb	r3, [r7, #11]
 8001434:	021b      	lsls	r3, r3, #8
 8001436:	b21a      	sxth	r2, r3
 8001438:	7abb      	ldrb	r3, [r7, #10]
 800143a:	b21b      	sxth	r3, r3
 800143c:	4313      	orrs	r3, r2
 800143e:	b21b      	sxth	r3, r3
 8001440:	4618      	mov	r0, r3
 8001442:	f7fe ffdf 	bl	8000404 <__aeabi_i2d>
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <ReadData+0x31c>)
 800144c:	f7ff f96e 	bl	800072c <__aeabi_ddiv>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4610      	mov	r0, r2
 8001456:	4619      	mov	r1, r3
 8001458:	f7ff fb00 	bl	8000a5c <__aeabi_d2f>
 800145c:	4602      	mov	r2, r0
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	611a      	str	r2, [r3, #16]
		sensorData->Gyro.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4])) / 16.0);
 8001462:	7b7b      	ldrb	r3, [r7, #13]
 8001464:	021b      	lsls	r3, r3, #8
 8001466:	b21a      	sxth	r2, r3
 8001468:	7b3b      	ldrb	r3, [r7, #12]
 800146a:	b21b      	sxth	r3, r3
 800146c:	4313      	orrs	r3, r2
 800146e:	b21b      	sxth	r3, r3
 8001470:	4618      	mov	r0, r3
 8001472:	f7fe ffc7 	bl	8000404 <__aeabi_i2d>
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	4b05      	ldr	r3, [pc, #20]	; (8001490 <ReadData+0x31c>)
 800147c:	f7ff f956 	bl	800072c <__aeabi_ddiv>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4610      	mov	r0, r2
 8001486:	e005      	b.n	8001494 <ReadData+0x320>
 8001488:	200005b0 	.word	0x200005b0
 800148c:	40590000 	.word	0x40590000
 8001490:	40300000 	.word	0x40300000
 8001494:	4619      	mov	r1, r3
 8001496:	f7ff fae1 	bl	8000a5c <__aeabi_d2f>
 800149a:	4602      	mov	r2, r0
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	615a      	str	r2, [r3, #20]
		memset(buffer, 0, sizeof(buffer));
 80014a0:	f107 0308 	add.w	r3, r7, #8
 80014a4:	2208      	movs	r2, #8
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f00c f84d 	bl	800d548 <memset>
	}
	if (sensors & SENSOR_ACCEL)
 80014ae:	78fb      	ldrb	r3, [r7, #3]
 80014b0:	f003 0310 	and.w	r3, r3, #16
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d05c      	beq.n	8001572 <ReadData+0x3fe>
	{

		HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_ACCEL, 1, buffer, 6, HAL_MAX_DELAY);
 80014b8:	f04f 33ff 	mov.w	r3, #4294967295
 80014bc:	9302      	str	r3, [sp, #8]
 80014be:	2306      	movs	r3, #6
 80014c0:	9301      	str	r3, [sp, #4]
 80014c2:	f107 0308 	add.w	r3, r7, #8
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	2301      	movs	r3, #1
 80014ca:	2208      	movs	r2, #8
 80014cc:	2150      	movs	r1, #80	; 0x50
 80014ce:	488d      	ldr	r0, [pc, #564]	; (8001704 <ReadData+0x590>)
 80014d0:	f002 ff76 	bl	80043c0 <HAL_I2C_Mem_Read>
		sensorData->Accel.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0])) / 100.0);
 80014d4:	7a7b      	ldrb	r3, [r7, #9]
 80014d6:	021b      	lsls	r3, r3, #8
 80014d8:	b21a      	sxth	r2, r3
 80014da:	7a3b      	ldrb	r3, [r7, #8]
 80014dc:	b21b      	sxth	r3, r3
 80014de:	4313      	orrs	r3, r2
 80014e0:	b21b      	sxth	r3, r3
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7fe ff8e 	bl	8000404 <__aeabi_i2d>
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	4b86      	ldr	r3, [pc, #536]	; (8001708 <ReadData+0x594>)
 80014ee:	f7ff f91d 	bl	800072c <__aeabi_ddiv>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4610      	mov	r0, r2
 80014f8:	4619      	mov	r1, r3
 80014fa:	f7ff faaf 	bl	8000a5c <__aeabi_d2f>
 80014fe:	4602      	mov	r2, r0
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	601a      	str	r2, [r3, #0]
		sensorData->Accel.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2])) / 100.0);
 8001504:	7afb      	ldrb	r3, [r7, #11]
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	b21a      	sxth	r2, r3
 800150a:	7abb      	ldrb	r3, [r7, #10]
 800150c:	b21b      	sxth	r3, r3
 800150e:	4313      	orrs	r3, r2
 8001510:	b21b      	sxth	r3, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f7fe ff76 	bl	8000404 <__aeabi_i2d>
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	4b7a      	ldr	r3, [pc, #488]	; (8001708 <ReadData+0x594>)
 800151e:	f7ff f905 	bl	800072c <__aeabi_ddiv>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f7ff fa97 	bl	8000a5c <__aeabi_d2f>
 800152e:	4602      	mov	r2, r0
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	605a      	str	r2, [r3, #4]
		sensorData->Accel.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4])) / 100.0);
 8001534:	7b7b      	ldrb	r3, [r7, #13]
 8001536:	021b      	lsls	r3, r3, #8
 8001538:	b21a      	sxth	r2, r3
 800153a:	7b3b      	ldrb	r3, [r7, #12]
 800153c:	b21b      	sxth	r3, r3
 800153e:	4313      	orrs	r3, r2
 8001540:	b21b      	sxth	r3, r3
 8001542:	4618      	mov	r0, r3
 8001544:	f7fe ff5e 	bl	8000404 <__aeabi_i2d>
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	4b6e      	ldr	r3, [pc, #440]	; (8001708 <ReadData+0x594>)
 800154e:	f7ff f8ed 	bl	800072c <__aeabi_ddiv>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4610      	mov	r0, r2
 8001558:	4619      	mov	r1, r3
 800155a:	f7ff fa7f 	bl	8000a5c <__aeabi_d2f>
 800155e:	4602      	mov	r2, r0
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	609a      	str	r2, [r3, #8]
		memset(buffer, 0, sizeof(buffer));
 8001564:	f107 0308 	add.w	r3, r7, #8
 8001568:	2208      	movs	r2, #8
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f00b ffeb 	bl	800d548 <memset>
	}
	if (sensors & SENSOR_MAG)
 8001572:	78fb      	ldrb	r3, [r7, #3]
 8001574:	f003 0320 	and.w	r3, r3, #32
 8001578:	2b00      	cmp	r3, #0
 800157a:	d05c      	beq.n	8001636 <ReadData+0x4c2>
	{

		HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_MAG, 1, buffer, 6, HAL_MAX_DELAY);
 800157c:	f04f 33ff 	mov.w	r3, #4294967295
 8001580:	9302      	str	r3, [sp, #8]
 8001582:	2306      	movs	r3, #6
 8001584:	9301      	str	r3, [sp, #4]
 8001586:	f107 0308 	add.w	r3, r7, #8
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2301      	movs	r3, #1
 800158e:	220e      	movs	r2, #14
 8001590:	2150      	movs	r1, #80	; 0x50
 8001592:	485c      	ldr	r0, [pc, #368]	; (8001704 <ReadData+0x590>)
 8001594:	f002 ff14 	bl	80043c0 <HAL_I2C_Mem_Read>
		sensorData->Magneto.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0])) / 16.0);
 8001598:	7a7b      	ldrb	r3, [r7, #9]
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	b21a      	sxth	r2, r3
 800159e:	7a3b      	ldrb	r3, [r7, #8]
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	4313      	orrs	r3, r2
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe ff2c 	bl	8000404 <__aeabi_i2d>
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	4b56      	ldr	r3, [pc, #344]	; (800170c <ReadData+0x598>)
 80015b2:	f7ff f8bb 	bl	800072c <__aeabi_ddiv>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4610      	mov	r0, r2
 80015bc:	4619      	mov	r1, r3
 80015be:	f7ff fa4d 	bl	8000a5c <__aeabi_d2f>
 80015c2:	4602      	mov	r2, r0
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	619a      	str	r2, [r3, #24]
		sensorData->Magneto.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2])) / 16.0);
 80015c8:	7afb      	ldrb	r3, [r7, #11]
 80015ca:	021b      	lsls	r3, r3, #8
 80015cc:	b21a      	sxth	r2, r3
 80015ce:	7abb      	ldrb	r3, [r7, #10]
 80015d0:	b21b      	sxth	r3, r3
 80015d2:	4313      	orrs	r3, r2
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe ff14 	bl	8000404 <__aeabi_i2d>
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	4b4a      	ldr	r3, [pc, #296]	; (800170c <ReadData+0x598>)
 80015e2:	f7ff f8a3 	bl	800072c <__aeabi_ddiv>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	f7ff fa35 	bl	8000a5c <__aeabi_d2f>
 80015f2:	4602      	mov	r2, r0
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	61da      	str	r2, [r3, #28]
		sensorData->Magneto.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4])) / 16.0);
 80015f8:	7b7b      	ldrb	r3, [r7, #13]
 80015fa:	021b      	lsls	r3, r3, #8
 80015fc:	b21a      	sxth	r2, r3
 80015fe:	7b3b      	ldrb	r3, [r7, #12]
 8001600:	b21b      	sxth	r3, r3
 8001602:	4313      	orrs	r3, r2
 8001604:	b21b      	sxth	r3, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe fefc 	bl	8000404 <__aeabi_i2d>
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	4b3e      	ldr	r3, [pc, #248]	; (800170c <ReadData+0x598>)
 8001612:	f7ff f88b 	bl	800072c <__aeabi_ddiv>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4610      	mov	r0, r2
 800161c:	4619      	mov	r1, r3
 800161e:	f7ff fa1d 	bl	8000a5c <__aeabi_d2f>
 8001622:	4602      	mov	r2, r0
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	621a      	str	r2, [r3, #32]
		memset(buffer, 0, sizeof(buffer));
 8001628:	f107 0308 	add.w	r3, r7, #8
 800162c:	2208      	movs	r2, #8
 800162e:	2100      	movs	r1, #0
 8001630:	4618      	mov	r0, r3
 8001632:	f00b ff89 	bl	800d548 <memset>
	}
	if (sensors & SENSOR_EULER)
 8001636:	78fb      	ldrb	r3, [r7, #3]
 8001638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800163c:	2b00      	cmp	r3, #0
 800163e:	d05c      	beq.n	80016fa <ReadData+0x586>
	{

		HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_EULER, 1, buffer, 6, HAL_MAX_DELAY);
 8001640:	f04f 33ff 	mov.w	r3, #4294967295
 8001644:	9302      	str	r3, [sp, #8]
 8001646:	2306      	movs	r3, #6
 8001648:	9301      	str	r3, [sp, #4]
 800164a:	f107 0308 	add.w	r3, r7, #8
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	2301      	movs	r3, #1
 8001652:	221a      	movs	r2, #26
 8001654:	2150      	movs	r1, #80	; 0x50
 8001656:	482b      	ldr	r0, [pc, #172]	; (8001704 <ReadData+0x590>)
 8001658:	f002 feb2 	bl	80043c0 <HAL_I2C_Mem_Read>
		sensorData->Euler.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0])) / 16.0);
 800165c:	7a7b      	ldrb	r3, [r7, #9]
 800165e:	021b      	lsls	r3, r3, #8
 8001660:	b21a      	sxth	r2, r3
 8001662:	7a3b      	ldrb	r3, [r7, #8]
 8001664:	b21b      	sxth	r3, r3
 8001666:	4313      	orrs	r3, r2
 8001668:	b21b      	sxth	r3, r3
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe feca 	bl	8000404 <__aeabi_i2d>
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	4b25      	ldr	r3, [pc, #148]	; (800170c <ReadData+0x598>)
 8001676:	f7ff f859 	bl	800072c <__aeabi_ddiv>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4610      	mov	r0, r2
 8001680:	4619      	mov	r1, r3
 8001682:	f7ff f9eb 	bl	8000a5c <__aeabi_d2f>
 8001686:	4602      	mov	r2, r0
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	625a      	str	r2, [r3, #36]	; 0x24
		sensorData->Euler.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2])) / 16.0);
 800168c:	7afb      	ldrb	r3, [r7, #11]
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	b21a      	sxth	r2, r3
 8001692:	7abb      	ldrb	r3, [r7, #10]
 8001694:	b21b      	sxth	r3, r3
 8001696:	4313      	orrs	r3, r2
 8001698:	b21b      	sxth	r3, r3
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe feb2 	bl	8000404 <__aeabi_i2d>
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <ReadData+0x598>)
 80016a6:	f7ff f841 	bl	800072c <__aeabi_ddiv>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4610      	mov	r0, r2
 80016b0:	4619      	mov	r1, r3
 80016b2:	f7ff f9d3 	bl	8000a5c <__aeabi_d2f>
 80016b6:	4602      	mov	r2, r0
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	629a      	str	r2, [r3, #40]	; 0x28
		sensorData->Euler.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4])) / 16.0);
 80016bc:	7b7b      	ldrb	r3, [r7, #13]
 80016be:	021b      	lsls	r3, r3, #8
 80016c0:	b21a      	sxth	r2, r3
 80016c2:	7b3b      	ldrb	r3, [r7, #12]
 80016c4:	b21b      	sxth	r3, r3
 80016c6:	4313      	orrs	r3, r2
 80016c8:	b21b      	sxth	r3, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe fe9a 	bl	8000404 <__aeabi_i2d>
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	4b0d      	ldr	r3, [pc, #52]	; (800170c <ReadData+0x598>)
 80016d6:	f7ff f829 	bl	800072c <__aeabi_ddiv>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4610      	mov	r0, r2
 80016e0:	4619      	mov	r1, r3
 80016e2:	f7ff f9bb 	bl	8000a5c <__aeabi_d2f>
 80016e6:	4602      	mov	r2, r0
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	62da      	str	r2, [r3, #44]	; 0x2c
		memset(buffer, 0, sizeof(buffer));
 80016ec:	f107 0308 	add.w	r3, r7, #8
 80016f0:	2208      	movs	r2, #8
 80016f2:	2100      	movs	r1, #0
 80016f4:	4618      	mov	r0, r3
 80016f6:	f00b ff27 	bl	800d548 <memset>
	}
}
 80016fa:	bf00      	nop
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200005b0 	.word	0x200005b0
 8001708:	40590000 	.word	0x40590000
 800170c:	40300000 	.word	0x40300000

08001710 <Set_Operation_Mode>:
 *            NDOF]
 *
 *  @retval None
 */
void Set_Operation_Mode(Op_Modes_t Mode)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af04      	add	r7, sp, #16
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]

	SelectPage(PAGE_0);
 800171a:	2000      	movs	r0, #0
 800171c:	f7ff fd08 	bl	8001130 <SelectPage>
	if (HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, OPR_MODE_ADDR, 1, &Mode, 1, 100) != HAL_OK)
 8001720:	2364      	movs	r3, #100	; 0x64
 8001722:	9302      	str	r3, [sp, #8]
 8001724:	2301      	movs	r3, #1
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	1dfb      	adds	r3, r7, #7
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	2301      	movs	r3, #1
 800172e:	223d      	movs	r2, #61	; 0x3d
 8001730:	2150      	movs	r1, #80	; 0x50
 8001732:	480d      	ldr	r0, [pc, #52]	; (8001768 <Set_Operation_Mode+0x58>)
 8001734:	f002 fd4a 	bl	80041cc <HAL_I2C_Mem_Write>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <Set_Operation_Mode+0x36>
	{
		printf("Operation mode could not be set!\n");
 800173e:	480b      	ldr	r0, [pc, #44]	; (800176c <Set_Operation_Mode+0x5c>)
 8001740:	f00b ff78 	bl	800d634 <puts>
 8001744:	e002      	b.n	800174c <Set_Operation_Mode+0x3c>
	}
	else
		printf("Operation mode switching succeeded.\n");
 8001746:	480a      	ldr	r0, [pc, #40]	; (8001770 <Set_Operation_Mode+0x60>)
 8001748:	f00b ff74 	bl	800d634 <puts>

	if (Mode == CONFIG_MODE)
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d103      	bne.n	800175a <Set_Operation_Mode+0x4a>
		HAL_Delay(19);
 8001752:	2013      	movs	r0, #19
 8001754:	f002 f812 	bl	800377c <HAL_Delay>

	else
		HAL_Delay(9);
}
 8001758:	e002      	b.n	8001760 <Set_Operation_Mode+0x50>
		HAL_Delay(9);
 800175a:	2009      	movs	r0, #9
 800175c:	f002 f80e 	bl	800377c <HAL_Delay>
}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	200005b0 	.word	0x200005b0
 800176c:	0800e688 	.word	0x0800e688
 8001770:	0800e6ac 	.word	0x0800e6ac

08001774 <SetPowerMODE>:
 *            BNO055_SUSPEND_MODE]
 *
 *  @retval None
 */
void SetPowerMODE(uint8_t BNO055_)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af04      	add	r7, sp, #16
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]

	if (HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, PWR_MODE_ADDR, 1, &BNO055_, 1, 100) != HAL_OK)
 800177e:	2364      	movs	r3, #100	; 0x64
 8001780:	9302      	str	r3, [sp, #8]
 8001782:	2301      	movs	r3, #1
 8001784:	9301      	str	r3, [sp, #4]
 8001786:	1dfb      	adds	r3, r7, #7
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	2301      	movs	r3, #1
 800178c:	223e      	movs	r2, #62	; 0x3e
 800178e:	2150      	movs	r1, #80	; 0x50
 8001790:	4809      	ldr	r0, [pc, #36]	; (80017b8 <SetPowerMODE+0x44>)
 8001792:	f002 fd1b 	bl	80041cc <HAL_I2C_Mem_Write>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <SetPowerMODE+0x30>
	{
		printf("Power mode could not be set!\n");
 800179c:	4807      	ldr	r0, [pc, #28]	; (80017bc <SetPowerMODE+0x48>)
 800179e:	f00b ff49 	bl	800d634 <puts>
 80017a2:	e002      	b.n	80017aa <SetPowerMODE+0x36>
	}
	else
	{
		printf("Power mode switching succeeded.\n");
 80017a4:	4806      	ldr	r0, [pc, #24]	; (80017c0 <SetPowerMODE+0x4c>)
 80017a6:	f00b ff45 	bl	800d634 <puts>
	}
	HAL_Delay(50);
 80017aa:	2032      	movs	r0, #50	; 0x32
 80017ac:	f001 ffe6 	bl	800377c <HAL_Delay>
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	200005b0 	.word	0x200005b0
 80017bc:	0800e6d0 	.word	0x0800e6d0
 80017c0:	0800e6f0 	.word	0x0800e6f0

080017c4 <Clock_Source>:
 *            CLOCK_INTERNAL]
 *
 *  @retval None
 */
void Clock_Source(uint8_t source)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af04      	add	r7, sp, #16
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]

	// 7th bit: External Crystal=1; Internal Crystal=0
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, SYS_TRIGGER_ADDR, 1, &source, sizeof(source), 100);
 80017ce:	2364      	movs	r3, #100	; 0x64
 80017d0:	9302      	str	r3, [sp, #8]
 80017d2:	2301      	movs	r3, #1
 80017d4:	9301      	str	r3, [sp, #4]
 80017d6:	1dfb      	adds	r3, r7, #7
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	2301      	movs	r3, #1
 80017dc:	223f      	movs	r2, #63	; 0x3f
 80017de:	2150      	movs	r1, #80	; 0x50
 80017e0:	4803      	ldr	r0, [pc, #12]	; (80017f0 <Clock_Source+0x2c>)
 80017e2:	f002 fcf3 	bl	80041cc <HAL_I2C_Mem_Write>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	200005b0 	.word	0x200005b0

080017f4 <BNO055_Axis>:
 *         	Default Parameters:[DEFAULT_AXIS_REMAP(0x24), DEFAULT_AXIS_SIGN(0x00)]
 *
 *  @retval None
 */
void BNO055_Axis(uint8_t remap, uint8_t sign)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af04      	add	r7, sp, #16
 80017fa:	4603      	mov	r3, r0
 80017fc:	460a      	mov	r2, r1
 80017fe:	71fb      	strb	r3, [r7, #7]
 8001800:	4613      	mov	r3, r2
 8001802:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, AXIS_MAP_CONFIG_ADDR, 1, &remap, 1, 100);
 8001804:	2364      	movs	r3, #100	; 0x64
 8001806:	9302      	str	r3, [sp, #8]
 8001808:	2301      	movs	r3, #1
 800180a:	9301      	str	r3, [sp, #4]
 800180c:	1dfb      	adds	r3, r7, #7
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	2301      	movs	r3, #1
 8001812:	2241      	movs	r2, #65	; 0x41
 8001814:	2150      	movs	r1, #80	; 0x50
 8001816:	480c      	ldr	r0, [pc, #48]	; (8001848 <BNO055_Axis+0x54>)
 8001818:	f002 fcd8 	bl	80041cc <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 800181c:	2014      	movs	r0, #20
 800181e:	f001 ffad 	bl	800377c <HAL_Delay>
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, AXIS_MAP_SIGN_ADDR, 1, &sign, 1, 100);
 8001822:	2364      	movs	r3, #100	; 0x64
 8001824:	9302      	str	r3, [sp, #8]
 8001826:	2301      	movs	r3, #1
 8001828:	9301      	str	r3, [sp, #4]
 800182a:	1dbb      	adds	r3, r7, #6
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	2301      	movs	r3, #1
 8001830:	2242      	movs	r2, #66	; 0x42
 8001832:	2150      	movs	r1, #80	; 0x50
 8001834:	4804      	ldr	r0, [pc, #16]	; (8001848 <BNO055_Axis+0x54>)
 8001836:	f002 fcc9 	bl	80041cc <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800183a:	2064      	movs	r0, #100	; 0x64
 800183c:	f001 ff9e 	bl	800377c <HAL_Delay>
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	200005b0 	.word	0x200005b0

0800184c <SET_Accel_Range>:
 *            Range_16G]
 *
 *  @retval None
 */
void SET_Accel_Range(uint8_t range)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af04      	add	r7, sp, #16
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, ACC_CONFIG_ADDR, 1, &range, 1, 100);
 8001856:	2364      	movs	r3, #100	; 0x64
 8001858:	9302      	str	r3, [sp, #8]
 800185a:	2301      	movs	r3, #1
 800185c:	9301      	str	r3, [sp, #4]
 800185e:	1dfb      	adds	r3, r7, #7
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	2301      	movs	r3, #1
 8001864:	2208      	movs	r2, #8
 8001866:	2150      	movs	r1, #80	; 0x50
 8001868:	4804      	ldr	r0, [pc, #16]	; (800187c <SET_Accel_Range+0x30>)
 800186a:	f002 fcaf 	bl	80041cc <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800186e:	2064      	movs	r0, #100	; 0x64
 8001870:	f001 ff84 	bl	800377c <HAL_Delay>
}
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	200005b0 	.word	0x200005b0

08001880 <BNO055_Init>:
 *         the configuration information for the BNO055 device.
 *
 * @retval None
 */
void BNO055_Init(BNO055_Init_t Init)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af04      	add	r7, sp, #16
 8001886:	463b      	mov	r3, r7
 8001888:	e883 0003 	stmia.w	r3, {r0, r1}

	// Set operation mode to config_mode for initialize all register
	Set_Operation_Mode(CONFIG_MODE);
 800188c:	2000      	movs	r0, #0
 800188e:	f7ff ff3f 	bl	8001710 <Set_Operation_Mode>
	HAL_Delay(50);
 8001892:	2032      	movs	r0, #50	; 0x32
 8001894:	f001 ff72 	bl	800377c <HAL_Delay>
	/*
	 * Set register page number to 1
	 * Configure Accelerometer range
	 */
	SelectPage(PAGE_1);
 8001898:	2001      	movs	r0, #1
 800189a:	f7ff fc49 	bl	8001130 <SelectPage>
	SET_Accel_Range(Init.ACC_Range);
 800189e:	79bb      	ldrb	r3, [r7, #6]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ffd3 	bl	800184c <SET_Accel_Range>
	HAL_Delay(50);
 80018a6:	2032      	movs	r0, #50	; 0x32
 80018a8:	f001 ff68 	bl	800377c <HAL_Delay>

	// Set register page number to 0
	SelectPage(PAGE_0);
 80018ac:	2000      	movs	r0, #0
 80018ae:	f7ff fc3f 	bl	8001130 <SelectPage>
	HAL_Delay(50);
 80018b2:	2032      	movs	r0, #50	; 0x32
 80018b4:	f001 ff62 	bl	800377c <HAL_Delay>

	// Read clock status. If status=0 then it is free to configure the clock source
	uint8_t status;
	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, SYS_CLK_STATUS_ADDR, 1, &status, 1, 100);
 80018b8:	2364      	movs	r3, #100	; 0x64
 80018ba:	9302      	str	r3, [sp, #8]
 80018bc:	2301      	movs	r3, #1
 80018be:	9301      	str	r3, [sp, #4]
 80018c0:	f107 030f 	add.w	r3, r7, #15
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	2301      	movs	r3, #1
 80018c8:	2238      	movs	r2, #56	; 0x38
 80018ca:	2150      	movs	r1, #80	; 0x50
 80018cc:	481e      	ldr	r0, [pc, #120]	; (8001948 <BNO055_Init+0xc8>)
 80018ce:	f002 fd77 	bl	80043c0 <HAL_I2C_Mem_Read>
	HAL_Delay(50);
 80018d2:	2032      	movs	r0, #50	; 0x32
 80018d4:	f001 ff52 	bl	800377c <HAL_Delay>
	// Checking if the status bit is 0
	if (status == 0)
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d106      	bne.n	80018ec <BNO055_Init+0x6c>
	{
		// Changing clock source
		Clock_Source(Init.Clock_Source);
 80018de:	797b      	ldrb	r3, [r7, #5]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff6f 	bl	80017c4 <Clock_Source>
		HAL_Delay(100);
 80018e6:	2064      	movs	r0, #100	; 0x64
 80018e8:	f001 ff48 	bl	800377c <HAL_Delay>
	}

	// Configure axis remapping and signing
	BNO055_Axis(Init.Axis, Init.Axis_sign);
 80018ec:	787b      	ldrb	r3, [r7, #1]
 80018ee:	78ba      	ldrb	r2, [r7, #2]
 80018f0:	4611      	mov	r1, r2
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff ff7e 	bl	80017f4 <BNO055_Axis>
	HAL_Delay(100);
 80018f8:	2064      	movs	r0, #100	; 0x64
 80018fa:	f001 ff3f 	bl	800377c <HAL_Delay>

	// Configure data output format and the measurement unit
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, UNIT_SEL_ADDR, 1, &Init.Unit_Sel, sizeof(Init.Unit_Sel), 100);
 80018fe:	2364      	movs	r3, #100	; 0x64
 8001900:	9302      	str	r3, [sp, #8]
 8001902:	2301      	movs	r3, #1
 8001904:	9301      	str	r3, [sp, #4]
 8001906:	463b      	mov	r3, r7
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	2301      	movs	r3, #1
 800190c:	223b      	movs	r2, #59	; 0x3b
 800190e:	2150      	movs	r1, #80	; 0x50
 8001910:	480d      	ldr	r0, [pc, #52]	; (8001948 <BNO055_Init+0xc8>)
 8001912:	f002 fc5b 	bl	80041cc <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8001916:	2064      	movs	r0, #100	; 0x64
 8001918:	f001 ff30 	bl	800377c <HAL_Delay>

	// Set power mode
	SetPowerMODE(Init.Mode);
 800191c:	78fb      	ldrb	r3, [r7, #3]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff ff28 	bl	8001774 <SetPowerMODE>
	HAL_Delay(100);
 8001924:	2064      	movs	r0, #100	; 0x64
 8001926:	f001 ff29 	bl	800377c <HAL_Delay>

	// Set operation mode
	Set_Operation_Mode(Init.OP_Modes);
 800192a:	793b      	ldrb	r3, [r7, #4]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff feef 	bl	8001710 <Set_Operation_Mode>
	HAL_Delay(100);
 8001932:	2064      	movs	r0, #100	; 0x64
 8001934:	f001 ff22 	bl	800377c <HAL_Delay>

	printf("BNO055 Initialization process is done!\n");
 8001938:	4804      	ldr	r0, [pc, #16]	; (800194c <BNO055_Init+0xcc>)
 800193a:	f00b fe7b 	bl	800d634 <puts>
}
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200005b0 	.word	0x200005b0
 800194c:	0800e710 	.word	0x0800e710

08001950 <_ZN13BNOController4initEv>:
#include "BNOController.h"
#include <cmath>

void BNOController::init()
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b088      	sub	sp, #32
 8001954:	af04      	add	r7, sp, #16
 8001956:	6078      	str	r0, [r7, #4]
    BNO055_Init_t config;
    config.Unit_Sel = UNIT_ORI_ANDROID | UNIT_EUL_DEG | UNIT_GYRO_DPS | UNIT_ACC_MS2 | UNIT_TEMP_CELCIUS;
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	723b      	strb	r3, [r7, #8]
    config.Axis = DEFAULT_AXIS_REMAP;
 800195c:	2324      	movs	r3, #36	; 0x24
 800195e:	727b      	strb	r3, [r7, #9]
    config.Axis_sign = DEFAULT_AXIS_SIGN;
 8001960:	2300      	movs	r3, #0
 8001962:	72bb      	strb	r3, [r7, #10]
    config.Clock_Source = CLOCK_EXTERNAL;
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	737b      	strb	r3, [r7, #13]
    config.Mode = BNO055_NORMAL_MODE;
 8001968:	2300      	movs	r3, #0
 800196a:	72fb      	strb	r3, [r7, #11]
    config.ACC_Range = Range_4G;
 800196c:	2301      	movs	r3, #1
 800196e:	73bb      	strb	r3, [r7, #14]
    config.OP_Modes = NDOF;
 8001970:	230c      	movs	r3, #12
 8001972:	733b      	strb	r3, [r7, #12]

    BNO055_Init(config);
 8001974:	f107 0308 	add.w	r3, r7, #8
 8001978:	e893 0003 	ldmia.w	r3, {r0, r1}
 800197c:	f7ff ff80 	bl	8001880 <BNO055_Init>

    yawPID.set(Constants::kBNOKP, Constants::kBNOKI, Constants::kBNOKD, Constants::kBNOMinAngular, Constants::KBNOMaxAngular, Constants::kBNON);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8001986:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800198a:	9302      	str	r3, [sp, #8]
 800198c:	4b07      	ldr	r3, [pc, #28]	; (80019ac <_ZN13BNOController4initEv+0x5c>)
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <_ZN13BNOController4initEv+0x60>)
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	f04f 0300 	mov.w	r3, #0
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80019a0:	f000 fca0 	bl	80022e4 <_ZN3PID3setEffffff>
}
 80019a4:	bf00      	nop
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	437a0000 	.word	0x437a0000
 80019b0:	c37a0000 	.word	0xc37a0000

080019b4 <_ZN13BNOController6getYawEv>:

float BNOController::getYaw()
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
    ReadData(&data, SENSOR_EULER);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2140      	movs	r1, #64	; 0x40
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fbd7 	bl	8001174 <ReadData>
    return data.Euler.X; // X es Heading (Yaw) según datasheet
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	0000      	movs	r0, r0
 80019d4:	0000      	movs	r0, r0
	...

080019d8 <_ZN13BNOController9getYawRadEv>:
{
    return speed;
}

float BNOController::getYawRad()
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
    ReadData(&data, SENSOR_EULER);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2140      	movs	r1, #64	; 0x40
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fbc5 	bl	8001174 <ReadData>
    return data.Euler.X * M_PI / 180.0f; // X es Heading (Yaw) según datasheet
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fd1a 	bl	8000428 <__aeabi_f2d>
 80019f4:	a30c      	add	r3, pc, #48	; (adr r3, 8001a28 <_ZN13BNOController9getYawRadEv+0x50>)
 80019f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fa:	f7fe fd6d 	bl	80004d8 <__aeabi_dmul>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4610      	mov	r0, r2
 8001a04:	4619      	mov	r1, r3
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <_ZN13BNOController9getYawRadEv+0x58>)
 8001a0c:	f7fe fe8e 	bl	800072c <__aeabi_ddiv>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	f7ff f820 	bl	8000a5c <__aeabi_d2f>
 8001a1c:	4603      	mov	r3, r0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	54442d18 	.word	0x54442d18
 8001a2c:	400921fb 	.word	0x400921fb
 8001a30:	40668000 	.word	0x40668000

08001a34 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4619      	mov	r1, r3
 8001a48:	4610      	mov	r0, r2
 8001a4a:	f7ff fb03 	bl	8001054 <__aeabi_fcmplt>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	e000      	b.n	8001a5a <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8001a58:	687b      	ldr	r3, [r7, #4]
    }
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4619      	mov	r1, r3
 8001a76:	4610      	mov	r0, r2
 8001a78:	f7ff faec 	bl	8001054 <__aeabi_fcmplt>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	e000      	b.n	8001a88 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8001a86:	687b      	ldr	r3, [r7, #4]
    }
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr

08001aa8 <_ZN3PIDC1Ev>:
    float deriv_filtered = 0.0f;
    float alpha = 0.0f;
    float filter_N = 20.0f;

public:
    PID() = default;
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	60da      	str	r2, [r3, #12]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	615a      	str	r2, [r3, #20]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a09      	ldr	r2, [pc, #36]	; (8001b08 <_ZN3PIDC1Ev+0x60>)
 8001ae4:	619a      	str	r2, [r3, #24]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	61da      	str	r2, [r3, #28]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	621a      	str	r2, [r3, #32]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <_ZN3PIDC1Ev+0x64>)
 8001afa:	625a      	str	r2, [r3, #36]	; 0x24
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4618      	mov	r0, r3
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr
 8001b08:	42c80000 	.word	0x42c80000
 8001b0c:	41a00000 	.word	0x41a00000

08001b10 <_ZN5MotorC1Effff>:
 *      Author: Sanci
 */

#include "Motor.h"

Motor::Motor(float KP, float KI, float KD, float Ns)
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af04      	add	r7, sp, #16
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
 8001b1c:	603b      	str	r3, [r7, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2200      	movs	r2, #0
 8001b22:	625a      	str	r2, [r3, #36]	; 0x24
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2200      	movs	r2, #0
 8001b28:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	631a      	str	r2, [r3, #48]	; 0x30
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	635a      	str	r2, [r3, #52]	; 0x34
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	639a      	str	r2, [r3, #56]	; 0x38
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	641a      	str	r2, [r3, #64]	; 0x40
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	645a      	str	r2, [r3, #68]	; 0x44
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	649a      	str	r2, [r3, #72]	; 0x48
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	651a      	str	r2, [r3, #80]	; 0x50
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	3354      	adds	r3, #84	; 0x54
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ff97 	bl	8001aa8 <_ZN3PIDC1Ev>
{
    pidController.set(KP, KI, KD, Constants::kMinPWM, Constants::kMaxPWM, Ns);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	9302      	str	r3, [sp, #8]
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <_ZN5MotorC1Effff+0x90>)
 8001b86:	9301      	str	r3, [sp, #4]
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <_ZN5MotorC1Effff+0x94>)
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	f000 fba7 	bl	80022e4 <_ZN3PID3setEffffff>
}
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	437f0000 	.word	0x437f0000
 8001ba4:	c37f0000 	.word	0xc37f0000

08001ba8 <_ZN5Motor4initE3PinS0_tmP17TIM_HandleTypeDef>:
void Motor::init(Pin _pinA, Pin _pinB, uint16_t _encoder, uint32_t _pwm_channel, TIM_HandleTypeDef *_htim)
{
 8001ba8:	b082      	sub	sp, #8
 8001baa:	b480      	push	{r7}
 8001bac:	b085      	sub	sp, #20
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	60f8      	str	r0, [r7, #12]
 8001bb2:	1d38      	adds	r0, r7, #4
 8001bb4:	e880 0006 	stmia.w	r0, {r1, r2}
 8001bb8:	61fb      	str	r3, [r7, #28]
    this->pinA = _pinA;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	3308      	adds	r3, #8
 8001bbe:	1d3a      	adds	r2, r7, #4
 8001bc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bc4:	e883 0003 	stmia.w	r3, {r0, r1}
    this->pinB = _pinB;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	3310      	adds	r3, #16
 8001bcc:	f107 021c 	add.w	r2, r7, #28
 8001bd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bd4:	e883 0003 	stmia.w	r3, {r0, r1}
    this->encoder = _encoder;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001bdc:	831a      	strh	r2, [r3, #24]
    this->pwm_channel = _pwm_channel;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001be2:	621a      	str	r2, [r3, #32]
    this->htim = _htim;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001be8:	61da      	str	r2, [r3, #28]
}
 8001bea:	bf00      	nop
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	b002      	add	sp, #8
 8001bf4:	4770      	bx	lr
	...

08001bf8 <_ZN5Motor12update_motorEm>:
    // Enviar PWM
    HAL_TIM_PWM_Start(htim, pwm_channel);
    __HAL_TIM_SET_COMPARE(htim, pwm_channel, duty);
}
void Motor::update_motor(uint32_t current_time)
{
 8001bf8:	b590      	push	{r4, r7, lr}
 8001bfa:	b087      	sub	sp, #28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
    float dt = (current_time - last_time_ms) / 1000.0f;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff f82c 	bl	8000c68 <__aeabi_ui2f>
 8001c10:	4603      	mov	r3, r0
 8001c12:	4999      	ldr	r1, [pc, #612]	; (8001e78 <_ZN5Motor12update_motorEm+0x280>)
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff f933 	bl	8000e80 <__aeabi_fdiv>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	617b      	str	r3, [r7, #20]
    if (dt <= 0.0f)
 8001c1e:	f04f 0100 	mov.w	r1, #0
 8001c22:	6978      	ldr	r0, [r7, #20]
 8001c24:	f7ff fa20 	bl	8001068 <__aeabi_fcmple>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f040 814b 	bne.w	8001ec6 <_ZN5Motor12update_motorEm+0x2ce>
        return;

    delta_ticks = ticks - last_ticks;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff f814 	bl	8000c68 <__aeabi_ui2f>
 8001c40:	4602      	mov	r2, r0
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	635a      	str	r2, [r3, #52]	; 0x34
    distance_cm += delta_ticks * Constants::kCMPerTick;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c4e:	498b      	ldr	r1, [pc, #556]	; (8001e7c <_ZN5Motor12update_motorEm+0x284>)
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff f861 	bl	8000d18 <__aeabi_fmul>
 8001c56:	4603      	mov	r3, r0
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	f7fe ff54 	bl	8000b08 <__addsf3>
 8001c60:	4603      	mov	r3, r0
 8001c62:	461a      	mov	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	639a      	str	r2, [r3, #56]	; 0x38
    actual_speed_cm_s = (delta_ticks * Constants::kCMPerTick) / dt;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c6c:	4983      	ldr	r1, [pc, #524]	; (8001e7c <_ZN5Motor12update_motorEm+0x284>)
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff f852 	bl	8000d18 <__aeabi_fmul>
 8001c74:	4603      	mov	r3, r0
 8001c76:	6979      	ldr	r1, [r7, #20]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff f901 	bl	8000e80 <__aeabi_fdiv>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	461a      	mov	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	641a      	str	r2, [r3, #64]	; 0x40

    // Convert cm/s to PWM equivalent
    float max_cm_s = (Constants::kMotorsRPM * 3.14159f * Constants::kWheelDiameter) / 60.0f;
 8001c86:	4b7e      	ldr	r3, [pc, #504]	; (8001e80 <_ZN5Motor12update_motorEm+0x288>)
 8001c88:	613b      	str	r3, [r7, #16]
    float scaled_target_pwm = (target_speed_cm_s / max_cm_s) * Constants::kMaxPWM;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c8e:	6939      	ldr	r1, [r7, #16]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff f8f5 	bl	8000e80 <__aeabi_fdiv>
 8001c96:	4603      	mov	r3, r0
 8001c98:	497a      	ldr	r1, [pc, #488]	; (8001e84 <_ZN5Motor12update_motorEm+0x28c>)
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff f83c 	bl	8000d18 <__aeabi_fmul>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	60fb      	str	r3, [r7, #12]
    float scaled_actual_pwm = (actual_speed_cm_s / max_cm_s) * Constants::kMaxPWM;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	6939      	ldr	r1, [r7, #16]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff f8e8 	bl	8000e80 <__aeabi_fdiv>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4974      	ldr	r1, [pc, #464]	; (8001e84 <_ZN5Motor12update_motorEm+0x28c>)
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff f82f 	bl	8000d18 <__aeabi_fmul>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	60bb      	str	r3, [r7, #8]

    output = pidController.calculate(scaled_target_pwm, scaled_actual_pwm, dt);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	68f9      	ldr	r1, [r7, #12]
 8001cca:	f000 fb38 	bl	800233e <_ZN3PID9calculateEfff>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	651a      	str	r2, [r3, #80]	; 0x50
    if (std::abs(target_speed_cm_s - actual_speed_cm_s) > 0.3)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4610      	mov	r0, r2
 8001ce0:	f7fe ff10 	bl	8000b04 <__aeabi_fsub>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fed2 	bl	8001a90 <_ZSt3absf>
 8001cec:	4603      	mov	r3, r0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fb9a 	bl	8000428 <__aeabi_f2d>
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	461c      	mov	r4, r3
 8001cf8:	a35d      	add	r3, pc, #372	; (adr r3, 8001e70 <_ZN5Motor12update_motorEm+0x278>)
 8001cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfe:	f7fe fe7b 	bl	80009f8 <__aeabi_dcmpgt>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <_ZN5Motor12update_motorEm+0x114>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	461c      	mov	r4, r3
 8001d0c:	b2e3      	uxtb	r3, r4
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00e      	beq.n	8001d30 <_ZN5Motor12update_motorEm+0x138>
    {
        pwm_out = std::min(std::max(output, Constants::kMinPWM), Constants::kMaxPWM);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	3350      	adds	r3, #80	; 0x50
 8001d16:	495c      	ldr	r1, [pc, #368]	; (8001e88 <_ZN5Motor12update_motorEm+0x290>)
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fe8b 	bl	8001a34 <_ZSt3maxIfERKT_S2_S2_>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	495a      	ldr	r1, [pc, #360]	; (8001e8c <_ZN5Motor12update_motorEm+0x294>)
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fe9d 	bl	8001a62 <_ZSt3minIfERKT_S2_S2_>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    if (pwm_out < 0)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d34:	f04f 0100 	mov.w	r1, #0
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff f98b 	bl	8001054 <__aeabi_fcmplt>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d053      	beq.n	8001dec <_ZN5Motor12update_motorEm+0x1f4>
    {
        // Direccion hacia atras
        HAL_GPIO_WritePin(pinA.port, pinA.pin, GPIO_PIN_RESET);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6898      	ldr	r0, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	899b      	ldrh	r3, [r3, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f001 ffca 	bl	8003ce8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(pinB.port, pinB.pin, GPIO_PIN_SET);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6918      	ldr	r0, [r3, #16]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	8a9b      	ldrh	r3, [r3, #20]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f001 ffc2 	bl	8003ce8 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(htim, pwm_channel, (uint16_t)(pwm_out * -1));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10d      	bne.n	8001d88 <_ZN5Motor12update_motorEm+0x190>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d70:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff f9bb 	bl	80010f0 <__aeabi_f2uiz>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	635a      	str	r2, [r3, #52]	; 0x34
 8001d86:	e08e      	b.n	8001ea6 <_ZN5Motor12update_motorEm+0x2ae>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d10d      	bne.n	8001dac <_ZN5Motor12update_motorEm+0x1b4>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d94:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff f9a9 	bl	80010f0 <__aeabi_f2uiz>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	639a      	str	r2, [r3, #56]	; 0x38
 8001daa:	e07c      	b.n	8001ea6 <_ZN5Motor12update_motorEm+0x2ae>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d10d      	bne.n	8001dd0 <_ZN5Motor12update_motorEm+0x1d8>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff f997 	bl	80010f0 <__aeabi_f2uiz>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	63da      	str	r2, [r3, #60]	; 0x3c
 8001dce:	e06a      	b.n	8001ea6 <_ZN5Motor12update_motorEm+0x2ae>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff f989 	bl	80010f0 <__aeabi_f2uiz>
 8001dde:	4603      	mov	r3, r0
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	641a      	str	r2, [r3, #64]	; 0x40
 8001dea:	e05c      	b.n	8001ea6 <_ZN5Motor12update_motorEm+0x2ae>
    }
    else
    {
        // Dirección hacia adelante
        HAL_GPIO_WritePin(pinA.port, pinA.pin, GPIO_PIN_SET);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6898      	ldr	r0, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	899b      	ldrh	r3, [r3, #12]
 8001df4:	2201      	movs	r2, #1
 8001df6:	4619      	mov	r1, r3
 8001df8:	f001 ff76 	bl	8003ce8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(pinB.port, pinB.pin, GPIO_PIN_RESET);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6918      	ldr	r0, [r3, #16]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	8a9b      	ldrh	r3, [r3, #20]
 8001e04:	2200      	movs	r2, #0
 8001e06:	4619      	mov	r1, r3
 8001e08:	f001 ff6e 	bl	8003ce8 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(htim, pwm_channel, (uint16_t)pwm_out);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10b      	bne.n	8001e2c <_ZN5Motor12update_motorEm+0x234>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff f969 	bl	80010f0 <__aeabi_f2uiz>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	635a      	str	r2, [r3, #52]	; 0x34
 8001e2a:	e03c      	b.n	8001ea6 <_ZN5Motor12update_motorEm+0x2ae>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d10b      	bne.n	8001e4c <_ZN5Motor12update_motorEm+0x254>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff f959 	bl	80010f0 <__aeabi_f2uiz>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	639a      	str	r2, [r3, #56]	; 0x38
 8001e4a:	e02c      	b.n	8001ea6 <_ZN5Motor12update_motorEm+0x2ae>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d11d      	bne.n	8001e90 <_ZN5Motor12update_motorEm+0x298>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff f949 	bl	80010f0 <__aeabi_f2uiz>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e6a:	e01c      	b.n	8001ea6 <_ZN5Motor12update_motorEm+0x2ae>
 8001e6c:	f3af 8000 	nop.w
 8001e70:	33333333 	.word	0x33333333
 8001e74:	3fd33333 	.word	0x3fd33333
 8001e78:	447a0000 	.word	0x447a0000
 8001e7c:	3d14a20d 	.word	0x3d14a20d
 8001e80:	4218e406 	.word	0x4218e406
 8001e84:	437f0000 	.word	0x437f0000
 8001e88:	0800eaa4 	.word	0x0800eaa4
 8001e8c:	0800eaa0 	.word	0x0800eaa0
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff f92b 	bl	80010f0 <__aeabi_f2uiz>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    HAL_TIM_PWM_Start(htim, pwm_channel);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69da      	ldr	r2, [r3, #28]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	f005 fba5 	bl	8007600 <HAL_TIM_PWM_Start>
    last_ticks = ticks;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	631a      	str	r2, [r3, #48]	; 0x30
    last_time_ms = current_time;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	625a      	str	r2, [r3, #36]	; 0x24
 8001ec4:	e000      	b.n	8001ec8 <_ZN5Motor12update_motorEm+0x2d0>
        return;
 8001ec6:	bf00      	nop
}
 8001ec8:	371c      	adds	r7, #28
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd90      	pop	{r4, r7, pc}
 8001ece:	bf00      	nop

08001ed0 <_ZN5Motor10stop_motorEv>:
void Motor::stop_motor()
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
    // Active brake: both inputs HIGH
    HAL_GPIO_WritePin(pinA.port, pinA.pin, GPIO_PIN_SET);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6898      	ldr	r0, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	899b      	ldrh	r3, [r3, #12]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	f001 ff00 	bl	8003ce8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pinB.port, pinB.pin, GPIO_PIN_SET);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6918      	ldr	r0, [r3, #16]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	8a9b      	ldrh	r3, [r3, #20]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f001 fef8 	bl	8003ce8 <HAL_GPIO_WritePin>

    // Stop PWM signal
    __HAL_TIM_SET_COMPARE(htim, pwm_channel, 0);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d105      	bne.n	8001f0c <_ZN5Motor10stop_motorEv+0x3c>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2200      	movs	r2, #0
 8001f08:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001f0a:	e018      	b.n	8001f3e <_ZN5Motor10stop_motorEv+0x6e>
    __HAL_TIM_SET_COMPARE(htim, pwm_channel, 0);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	2b04      	cmp	r3, #4
 8001f12:	d105      	bne.n	8001f20 <_ZN5Motor10stop_motorEv+0x50>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69db      	ldr	r3, [r3, #28]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001f1e:	e00e      	b.n	8001f3e <_ZN5Motor10stop_motorEv+0x6e>
    __HAL_TIM_SET_COMPARE(htim, pwm_channel, 0);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	2b08      	cmp	r3, #8
 8001f26:	d105      	bne.n	8001f34 <_ZN5Motor10stop_motorEv+0x64>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001f32:	e004      	b.n	8001f3e <_ZN5Motor10stop_motorEv+0x6e>
    __HAL_TIM_SET_COMPARE(htim, pwm_channel, 0);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <_ZN5Motor9setTargetEf>:

void Motor::setTarget(float _target_speed_cm_s)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	6039      	str	r1, [r7, #0]
    target_speed_cm_s = _target_speed_cm_s;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr

08001f60 <_ZN5Motor11getDistanceEv>:

float Motor::getDistance()
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
    return distance_cm;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr

08001f76 <_ZN5Motor8addTicksEv>:

void Motor::addTicks()
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
    ticks++;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f82:	1c5a      	adds	r2, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr

08001f92 <_ZN5Motor8getSpeedEv>:
{
    return pwm_out;
}

float Motor::getSpeed()
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
    return actual_speed_cm_s;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr

08001fa8 <_ZN13BNOControllerC1Ev>:
#include "PID.h"
#include "Constants.h"

// #include "BNO055_STM32.h"

class BNOController
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3358      	adds	r3, #88	; 0x58
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fd77 	bl	8001aa8 <_ZN3PIDC1Ev>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <_Z12movementInitv>:

#include "Movement.h"
#include <cmath>

void movementInit()
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af04      	add	r7, sp, #16
    // Motores (Checar que los canales sean los correctos)
    frontLeftMotor.init(
 8001ff2:	4b1f      	ldr	r3, [pc, #124]	; (8002070 <_Z12movementInitv+0x84>)
 8001ff4:	491f      	ldr	r1, [pc, #124]	; (8002074 <_Z12movementInitv+0x88>)
 8001ff6:	4a20      	ldr	r2, [pc, #128]	; (8002078 <_Z12movementInitv+0x8c>)
 8001ff8:	9203      	str	r2, [sp, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	9202      	str	r2, [sp, #8]
 8001ffe:	2202      	movs	r2, #2
 8002000:	9201      	str	r2, [sp, #4]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	9200      	str	r2, [sp, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	c906      	ldmia	r1, {r1, r2}
 800200a:	481c      	ldr	r0, [pc, #112]	; (800207c <_Z12movementInitv+0x90>)
 800200c:	f7ff fdcc 	bl	8001ba8 <_ZN5Motor4initE3PinS0_tmP17TIM_HandleTypeDef>
        Constants::kFrontLeftA,
        Constants::kFrontLeftB,
        Constants::kFrontLeftEncoder,
        TIM_CHANNEL_1,
        &htim3);
    frontRightMotor.init(
 8002010:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <_Z12movementInitv+0x94>)
 8002012:	491c      	ldr	r1, [pc, #112]	; (8002084 <_Z12movementInitv+0x98>)
 8002014:	4a1c      	ldr	r2, [pc, #112]	; (8002088 <_Z12movementInitv+0x9c>)
 8002016:	9203      	str	r2, [sp, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	9202      	str	r2, [sp, #8]
 800201c:	2201      	movs	r2, #1
 800201e:	9201      	str	r2, [sp, #4]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	9200      	str	r2, [sp, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	c906      	ldmia	r1, {r1, r2}
 8002028:	4818      	ldr	r0, [pc, #96]	; (800208c <_Z12movementInitv+0xa0>)
 800202a:	f7ff fdbd 	bl	8001ba8 <_ZN5Motor4initE3PinS0_tmP17TIM_HandleTypeDef>
        Constants::kFrontRightB,
        Constants::kFrontRightEncoder,
        TIM_CHANNEL_1,
        &htim1);

    backRightMotor.init(
 800202e:	4b18      	ldr	r3, [pc, #96]	; (8002090 <_Z12movementInitv+0xa4>)
 8002030:	4918      	ldr	r1, [pc, #96]	; (8002094 <_Z12movementInitv+0xa8>)
 8002032:	4a11      	ldr	r2, [pc, #68]	; (8002078 <_Z12movementInitv+0x8c>)
 8002034:	9203      	str	r2, [sp, #12]
 8002036:	220c      	movs	r2, #12
 8002038:	9202      	str	r2, [sp, #8]
 800203a:	2208      	movs	r2, #8
 800203c:	9201      	str	r2, [sp, #4]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	9200      	str	r2, [sp, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	c906      	ldmia	r1, {r1, r2}
 8002046:	4814      	ldr	r0, [pc, #80]	; (8002098 <_Z12movementInitv+0xac>)
 8002048:	f7ff fdae 	bl	8001ba8 <_ZN5Motor4initE3PinS0_tmP17TIM_HandleTypeDef>
        Constants::kBackRightB,
        Constants::kBackRightEncoder,
        TIM_CHANNEL_4,
        &htim3);

    backLeftMotor.init(
 800204c:	4b13      	ldr	r3, [pc, #76]	; (800209c <_Z12movementInitv+0xb0>)
 800204e:	4914      	ldr	r1, [pc, #80]	; (80020a0 <_Z12movementInitv+0xb4>)
 8002050:	4a09      	ldr	r2, [pc, #36]	; (8002078 <_Z12movementInitv+0x8c>)
 8002052:	9203      	str	r2, [sp, #12]
 8002054:	2204      	movs	r2, #4
 8002056:	9202      	str	r2, [sp, #8]
 8002058:	2204      	movs	r2, #4
 800205a:	9201      	str	r2, [sp, #4]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	9200      	str	r2, [sp, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	c906      	ldmia	r1, {r1, r2}
 8002064:	480f      	ldr	r0, [pc, #60]	; (80020a4 <_Z12movementInitv+0xb8>)
 8002066:	f7ff fd9f 	bl	8001ba8 <_ZN5Motor4initE3PinS0_tmP17TIM_HandleTypeDef>
        Constants::kBackLeftA,
        Constants::kBackLeftB,
        Constants::kBackLeftEncoder,
        TIM_CHANNEL_2,
        &htim3);
}
 800206a:	bf00      	nop
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	0800eab0 	.word	0x0800eab0
 8002074:	0800eaa8 	.word	0x0800eaa8
 8002078:	2000024c 	.word	0x2000024c
 800207c:	20000294 	.word	0x20000294
 8002080:	0800eac0 	.word	0x0800eac0
 8002084:	0800eab8 	.word	0x0800eab8
 8002088:	20000204 	.word	0x20000204
 800208c:	20000320 	.word	0x20000320
 8002090:	0800eae0 	.word	0x0800eae0
 8002094:	0800ead8 	.word	0x0800ead8
 8002098:	20000438 	.word	0x20000438
 800209c:	0800ead0 	.word	0x0800ead0
 80020a0:	0800eac8 	.word	0x0800eac8
 80020a4:	200003ac 	.word	0x200003ac

080020a8 <_Z8setSpeedi>:
void distance() {}
void setSpeed(int speed)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
    frontLeftMotor.setTarget(speed);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7fe fddd 	bl	8000c70 <__aeabi_i2f>
 80020b6:	4603      	mov	r3, r0
 80020b8:	4619      	mov	r1, r3
 80020ba:	480f      	ldr	r0, [pc, #60]	; (80020f8 <_Z8setSpeedi+0x50>)
 80020bc:	f7ff ff43 	bl	8001f46 <_ZN5Motor9setTargetEf>
    frontRightMotor.setTarget(speed);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7fe fdd5 	bl	8000c70 <__aeabi_i2f>
 80020c6:	4603      	mov	r3, r0
 80020c8:	4619      	mov	r1, r3
 80020ca:	480c      	ldr	r0, [pc, #48]	; (80020fc <_Z8setSpeedi+0x54>)
 80020cc:	f7ff ff3b 	bl	8001f46 <_ZN5Motor9setTargetEf>
    backLeftMotor.setTarget(speed);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7fe fdcd 	bl	8000c70 <__aeabi_i2f>
 80020d6:	4603      	mov	r3, r0
 80020d8:	4619      	mov	r1, r3
 80020da:	4809      	ldr	r0, [pc, #36]	; (8002100 <_Z8setSpeedi+0x58>)
 80020dc:	f7ff ff33 	bl	8001f46 <_ZN5Motor9setTargetEf>
    backRightMotor.setTarget(speed);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7fe fdc5 	bl	8000c70 <__aeabi_i2f>
 80020e6:	4603      	mov	r3, r0
 80020e8:	4619      	mov	r1, r3
 80020ea:	4806      	ldr	r0, [pc, #24]	; (8002104 <_Z8setSpeedi+0x5c>)
 80020ec:	f7ff ff2b 	bl	8001f46 <_ZN5Motor9setTargetEf>
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	20000294 	.word	0x20000294
 80020fc:	20000320 	.word	0x20000320
 8002100:	200003ac 	.word	0x200003ac
 8002104:	20000438 	.word	0x20000438

08002108 <_Z4stopv>:
void stop()
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
    frontLeftMotor.stop_motor();
 800210c:	4806      	ldr	r0, [pc, #24]	; (8002128 <_Z4stopv+0x20>)
 800210e:	f7ff fedf 	bl	8001ed0 <_ZN5Motor10stop_motorEv>
    frontRightMotor.stop_motor();
 8002112:	4806      	ldr	r0, [pc, #24]	; (800212c <_Z4stopv+0x24>)
 8002114:	f7ff fedc 	bl	8001ed0 <_ZN5Motor10stop_motorEv>
    backLeftMotor.stop_motor();
 8002118:	4805      	ldr	r0, [pc, #20]	; (8002130 <_Z4stopv+0x28>)
 800211a:	f7ff fed9 	bl	8001ed0 <_ZN5Motor10stop_motorEv>
    backRightMotor.stop_motor();
 800211e:	4805      	ldr	r0, [pc, #20]	; (8002134 <_Z4stopv+0x2c>)
 8002120:	f7ff fed6 	bl	8001ed0 <_ZN5Motor10stop_motorEv>
}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20000294 	.word	0x20000294
 800212c:	20000320 	.word	0x20000320
 8002130:	200003ac 	.word	0x200003ac
 8002134:	20000438 	.word	0x20000438

08002138 <_Z14updateMovementm>:
void updateMovement(uint32_t current_time)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]

    // Paso 3: Actualizar los motores físicamente
    frontLeftMotor.update_motor(current_time);
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	4809      	ldr	r0, [pc, #36]	; (8002168 <_Z14updateMovementm+0x30>)
 8002144:	f7ff fd58 	bl	8001bf8 <_ZN5Motor12update_motorEm>
    frontRightMotor.update_motor(current_time);
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	4808      	ldr	r0, [pc, #32]	; (800216c <_Z14updateMovementm+0x34>)
 800214c:	f7ff fd54 	bl	8001bf8 <_ZN5Motor12update_motorEm>
    backLeftMotor.update_motor(current_time);
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	4807      	ldr	r0, [pc, #28]	; (8002170 <_Z14updateMovementm+0x38>)
 8002154:	f7ff fd50 	bl	8001bf8 <_ZN5Motor12update_motorEm>
    backRightMotor.update_motor(current_time);
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	4806      	ldr	r0, [pc, #24]	; (8002174 <_Z14updateMovementm+0x3c>)
 800215c:	f7ff fd4c 	bl	8001bf8 <_ZN5Motor12update_motorEm>
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20000294 	.word	0x20000294
 800216c:	20000320 	.word	0x20000320
 8002170:	200003ac 	.word	0x200003ac
 8002174:	20000438 	.word	0x20000438

08002178 <_Z41__static_initialization_and_destruction_0ii>:
	frontLeftMotor.updateWithoutPID(current_time);
	frontRightMotor.updateWithoutPID(current_time);
	backLeftMotor.updateWithoutPID(current_time);
	backRightMotor.updateWithoutPID(current_time);

}
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af02      	add	r7, sp, #8
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d16d      	bne.n	8002264 <_Z41__static_initialization_and_destruction_0ii+0xec>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800218e:	4293      	cmp	r3, r2
 8002190:	d168      	bne.n	8002264 <_Z41__static_initialization_and_destruction_0ii+0xec>
void updateMovement(uint32_t current_time);
void setKinematicSpeeds(float _linear_x_cm_s, uint32_t current_time);
void updateWithoutPID(uint32_t current_time);

// Motors
inline Motor frontLeftMotor(Constants::kFrontLeftKP, Constants::kFrontLeftKI, Constants::kFrontLeftKD, Constants::kFrontLeftN);
 8002192:	4b36      	ldr	r3, [pc, #216]	; (800226c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	3301      	adds	r3, #1
 8002198:	4a34      	ldr	r2, [pc, #208]	; (800226c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	4b33      	ldr	r3, [pc, #204]	; (800226c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	bf0c      	ite	eq
 80021a4:	2301      	moveq	r3, #1
 80021a6:	2300      	movne	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d007      	beq.n	80021be <_Z41__static_initialization_and_destruction_0ii+0x46>
 80021ae:	4b30      	ldr	r3, [pc, #192]	; (8002270 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	4b30      	ldr	r3, [pc, #192]	; (8002274 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 80021b4:	4a30      	ldr	r2, [pc, #192]	; (8002278 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 80021b6:	4931      	ldr	r1, [pc, #196]	; (800227c <_Z41__static_initialization_and_destruction_0ii+0x104>)
 80021b8:	4831      	ldr	r0, [pc, #196]	; (8002280 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 80021ba:	f7ff fca9 	bl	8001b10 <_ZN5MotorC1Effff>
inline Motor frontRightMotor(Constants::kFrontRightKP, Constants::kFrontRightKI, Constants::kFrontRightKD, Constants::kFrontRightN);
 80021be:	4b31      	ldr	r3, [pc, #196]	; (8002284 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	3301      	adds	r3, #1
 80021c4:	4a2f      	ldr	r2, [pc, #188]	; (8002284 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 80021c6:	6013      	str	r3, [r2, #0]
 80021c8:	4b2e      	ldr	r3, [pc, #184]	; (8002284 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	bf0c      	ite	eq
 80021d0:	2301      	moveq	r3, #1
 80021d2:	2300      	movne	r3, #0
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d007      	beq.n	80021ea <_Z41__static_initialization_and_destruction_0ii+0x72>
 80021da:	4b2b      	ldr	r3, [pc, #172]	; (8002288 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	4b2b      	ldr	r3, [pc, #172]	; (800228c <_Z41__static_initialization_and_destruction_0ii+0x114>)
 80021e0:	4a2b      	ldr	r2, [pc, #172]	; (8002290 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 80021e2:	492c      	ldr	r1, [pc, #176]	; (8002294 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 80021e4:	482c      	ldr	r0, [pc, #176]	; (8002298 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 80021e6:	f7ff fc93 	bl	8001b10 <_ZN5MotorC1Effff>
inline Motor backLeftMotor(Constants::kBackLeftKP, Constants::kBackLeftKI, Constants::kBackLeftKD, Constants::kBackLeftN);
 80021ea:	4b2c      	ldr	r3, [pc, #176]	; (800229c <_Z41__static_initialization_and_destruction_0ii+0x124>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	3301      	adds	r3, #1
 80021f0:	4a2a      	ldr	r2, [pc, #168]	; (800229c <_Z41__static_initialization_and_destruction_0ii+0x124>)
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b29      	ldr	r3, [pc, #164]	; (800229c <_Z41__static_initialization_and_destruction_0ii+0x124>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	bf0c      	ite	eq
 80021fc:	2301      	moveq	r3, #1
 80021fe:	2300      	movne	r3, #0
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d007      	beq.n	8002216 <_Z41__static_initialization_and_destruction_0ii+0x9e>
 8002206:	4b26      	ldr	r3, [pc, #152]	; (80022a0 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	4b26      	ldr	r3, [pc, #152]	; (80022a4 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 800220c:	4a26      	ldr	r2, [pc, #152]	; (80022a8 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 800220e:	4927      	ldr	r1, [pc, #156]	; (80022ac <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8002210:	4827      	ldr	r0, [pc, #156]	; (80022b0 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8002212:	f7ff fc7d 	bl	8001b10 <_ZN5MotorC1Effff>
inline Motor backRightMotor(Constants::kBackRightKP, Constants::kBackRightKI, Constants::kBackRightKD, Constants::kBackRightN);
 8002216:	4b27      	ldr	r3, [pc, #156]	; (80022b4 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	3301      	adds	r3, #1
 800221c:	4a25      	ldr	r2, [pc, #148]	; (80022b4 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	4b24      	ldr	r3, [pc, #144]	; (80022b4 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b01      	cmp	r3, #1
 8002226:	bf0c      	ite	eq
 8002228:	2301      	moveq	r3, #1
 800222a:	2300      	movne	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d007      	beq.n	8002242 <_Z41__static_initialization_and_destruction_0ii+0xca>
 8002232:	4b21      	ldr	r3, [pc, #132]	; (80022b8 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	4b21      	ldr	r3, [pc, #132]	; (80022bc <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8002238:	4a21      	ldr	r2, [pc, #132]	; (80022c0 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 800223a:	4922      	ldr	r1, [pc, #136]	; (80022c4 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 800223c:	4822      	ldr	r0, [pc, #136]	; (80022c8 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 800223e:	f7ff fc67 	bl	8001b10 <_ZN5MotorC1Effff>
inline BNOController bno;
 8002242:	4b22      	ldr	r3, [pc, #136]	; (80022cc <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	3301      	adds	r3, #1
 8002248:	4a20      	ldr	r2, [pc, #128]	; (80022cc <_Z41__static_initialization_and_destruction_0ii+0x154>)
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	4b1f      	ldr	r3, [pc, #124]	; (80022cc <_Z41__static_initialization_and_destruction_0ii+0x154>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b01      	cmp	r3, #1
 8002252:	bf0c      	ite	eq
 8002254:	2301      	moveq	r3, #1
 8002256:	2300      	movne	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d002      	beq.n	8002264 <_Z41__static_initialization_and_destruction_0ii+0xec>
 800225e:	481c      	ldr	r0, [pc, #112]	; (80022d0 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8002260:	f7ff fea2 	bl	8001fa8 <_ZN13BNOControllerC1Ev>
 8002264:	bf00      	nop
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20000554 	.word	0x20000554
 8002270:	41d9c6a8 	.word	0x41d9c6a8
 8002274:	bbc41229 	.word	0xbbc41229
 8002278:	41c07d56 	.word	0x41c07d56
 800227c:	3e356a7b 	.word	0x3e356a7b
 8002280:	20000294 	.word	0x20000294
 8002284:	20000558 	.word	0x20000558
 8002288:	41ca5d98 	.word	0x41ca5d98
 800228c:	bbd4f769 	.word	0xbbd4f769
 8002290:	41b42eb2 	.word	0x41b42eb2
 8002294:	3e360957 	.word	0x3e360957
 8002298:	20000320 	.word	0x20000320
 800229c:	2000055c 	.word	0x2000055c
 80022a0:	41c84433 	.word	0x41c84433
 80022a4:	bbd5b86e 	.word	0xbbd5b86e
 80022a8:	41b10a72 	.word	0x41b10a72
 80022ac:	3e34a409 	.word	0x3e34a409
 80022b0:	200003ac 	.word	0x200003ac
 80022b4:	20000560 	.word	0x20000560
 80022b8:	41c3d917 	.word	0x41c3d917
 80022bc:	bbf7af0e 	.word	0xbbf7af0e
 80022c0:	41c41d15 	.word	0x41c41d15
 80022c4:	3e4c62a2 	.word	0x3e4c62a2
 80022c8:	20000438 	.word	0x20000438
 80022cc:	20000564 	.word	0x20000564
 80022d0:	200004c4 	.word	0x200004c4

080022d4 <_GLOBAL__sub_I__Z12movementInitv>:
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80022dc:	2001      	movs	r0, #1
 80022de:	f7ff ff4b 	bl	8002178 <_Z41__static_initialization_and_destruction_0ii>
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <_ZN3PID3setEffffff>:
#include "PID.h"

void PID::set(float kp, float ki, float kd, float outMin, float outMax, float N)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
 80022f0:	603b      	str	r3, [r7, #0]
    kP = kp;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	609a      	str	r2, [r3, #8]
    kI = ki;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	60da      	str	r2, [r3, #12]
    kD = kd;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	611a      	str	r2, [r3, #16]
    out_min = outMin;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	615a      	str	r2, [r3, #20]
    out_max = outMax;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	69fa      	ldr	r2, [r7, #28]
 800230e:	619a      	str	r2, [r3, #24]
    alpha = 1.0f / (1.0f + N); // Filtro pasa-bajas en derivada (si dt = 1)
 8002310:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002314:	6a38      	ldr	r0, [r7, #32]
 8002316:	f7fe fbf7 	bl	8000b08 <__addsf3>
 800231a:	4603      	mov	r3, r0
 800231c:	4619      	mov	r1, r3
 800231e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002322:	f7fe fdad 	bl	8000e80 <__aeabi_fdiv>
 8002326:	4603      	mov	r3, r0
 8002328:	461a      	mov	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	621a      	str	r2, [r3, #32]
    deriv_filtered = 0.0f;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	61da      	str	r2, [r3, #28]
}
 8002336:	bf00      	nop
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <_ZN3PID9calculateEfff>:

float PID::calculate(float setpoint, float input, float dt)
{
 800233e:	b590      	push	{r4, r7, lr}
 8002340:	b089      	sub	sp, #36	; 0x24
 8002342:	af00      	add	r7, sp, #0
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
 800234a:	603b      	str	r3, [r7, #0]
    float error = setpoint - input;
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	68b8      	ldr	r0, [r7, #8]
 8002350:	f7fe fbd8 	bl	8000b04 <__aeabi_fsub>
 8002354:	4603      	mov	r3, r0
 8002356:	61bb      	str	r3, [r7, #24]
    integral += error * dt;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	685c      	ldr	r4, [r3, #4]
 800235c:	6839      	ldr	r1, [r7, #0]
 800235e:	69b8      	ldr	r0, [r7, #24]
 8002360:	f7fe fcda 	bl	8000d18 <__aeabi_fmul>
 8002364:	4603      	mov	r3, r0
 8002366:	4619      	mov	r1, r3
 8002368:	4620      	mov	r0, r4
 800236a:	f7fe fbcd 	bl	8000b08 <__addsf3>
 800236e:	4603      	mov	r3, r0
 8002370:	461a      	mov	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	605a      	str	r2, [r3, #4]
    float derivative = (error - last_error) / dt;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4619      	mov	r1, r3
 800237c:	69b8      	ldr	r0, [r7, #24]
 800237e:	f7fe fbc1 	bl	8000b04 <__aeabi_fsub>
 8002382:	4603      	mov	r3, r0
 8002384:	6839      	ldr	r1, [r7, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f7fe fd7a 	bl	8000e80 <__aeabi_fdiv>
 800238c:	4603      	mov	r3, r0
 800238e:	617b      	str	r3, [r7, #20]
    alpha = 1.0f / (1.0f + filter_N * dt);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	6839      	ldr	r1, [r7, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe fcbe 	bl	8000d18 <__aeabi_fmul>
 800239c:	4603      	mov	r3, r0
 800239e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe fbb0 	bl	8000b08 <__addsf3>
 80023a8:	4603      	mov	r3, r0
 80023aa:	4619      	mov	r1, r3
 80023ac:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80023b0:	f7fe fd66 	bl	8000e80 <__aeabi_fdiv>
 80023b4:	4603      	mov	r3, r0
 80023b6:	461a      	mov	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	621a      	str	r2, [r3, #32]
    deriv_filtered = alpha * deriv_filtered + (1.0f - alpha) * derivative;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6a1a      	ldr	r2, [r3, #32]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	4619      	mov	r1, r3
 80023c6:	4610      	mov	r0, r2
 80023c8:	f7fe fca6 	bl	8000d18 <__aeabi_fmul>
 80023cc:	4603      	mov	r3, r0
 80023ce:	461c      	mov	r4, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	4619      	mov	r1, r3
 80023d6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80023da:	f7fe fb93 	bl	8000b04 <__aeabi_fsub>
 80023de:	4603      	mov	r3, r0
 80023e0:	6979      	ldr	r1, [r7, #20]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe fc98 	bl	8000d18 <__aeabi_fmul>
 80023e8:	4603      	mov	r3, r0
 80023ea:	4619      	mov	r1, r3
 80023ec:	4620      	mov	r0, r4
 80023ee:	f7fe fb8b 	bl	8000b08 <__addsf3>
 80023f2:	4603      	mov	r3, r0
 80023f4:	461a      	mov	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	61da      	str	r2, [r3, #28]

    float output = kP * error + kI * integral + kD * deriv_filtered;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	69b9      	ldr	r1, [r7, #24]
 8002400:	4618      	mov	r0, r3
 8002402:	f7fe fc89 	bl	8000d18 <__aeabi_fmul>
 8002406:	4603      	mov	r3, r0
 8002408:	461c      	mov	r4, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	4619      	mov	r1, r3
 8002414:	4610      	mov	r0, r2
 8002416:	f7fe fc7f 	bl	8000d18 <__aeabi_fmul>
 800241a:	4603      	mov	r3, r0
 800241c:	4619      	mov	r1, r3
 800241e:	4620      	mov	r0, r4
 8002420:	f7fe fb72 	bl	8000b08 <__addsf3>
 8002424:	4603      	mov	r3, r0
 8002426:	461c      	mov	r4, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	691a      	ldr	r2, [r3, #16]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	4619      	mov	r1, r3
 8002432:	4610      	mov	r0, r2
 8002434:	f7fe fc70 	bl	8000d18 <__aeabi_fmul>
 8002438:	4603      	mov	r3, r0
 800243a:	4619      	mov	r1, r3
 800243c:	4620      	mov	r0, r4
 800243e:	f7fe fb63 	bl	8000b08 <__addsf3>
 8002442:	4603      	mov	r3, r0
 8002444:	61fb      	str	r3, [r7, #28]

    if (output > out_max)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	4619      	mov	r1, r3
 800244c:	69f8      	ldr	r0, [r7, #28]
 800244e:	f7fe fe1f 	bl	8001090 <__aeabi_fcmpgt>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <_ZN3PID9calculateEfff+0x120>
        output = out_max;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	61fb      	str	r3, [r7, #28]
    if (output < out_min)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	4619      	mov	r1, r3
 8002464:	69f8      	ldr	r0, [r7, #28]
 8002466:	f7fe fdf5 	bl	8001054 <__aeabi_fcmplt>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d002      	beq.n	8002476 <_ZN3PID9calculateEfff+0x138>
        output = out_min;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	61fb      	str	r3, [r7, #28]

    last_error = error;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	601a      	str	r2, [r3, #0]
    return output;
 800247c:	69fb      	ldr	r3, [r7, #28]
}
 800247e:	4618      	mov	r0, r3
 8002480:	3724      	adds	r7, #36	; 0x24
 8002482:	46bd      	mov	sp, r7
 8002484:	bd90      	pop	{r4, r7, pc}
	...

08002488 <_Z7BT_SendPKc>:
#include "bluetooth_uart.h"

void BT_Send(const char *msg)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f7fd fe5d 	bl	8000150 <strlen>
 8002496:	4603      	mov	r3, r0
 8002498:	b29a      	uxth	r2, r3
 800249a:	f04f 33ff 	mov.w	r3, #4294967295
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4803      	ldr	r0, [pc, #12]	; (80024b0 <_Z7BT_SendPKc+0x28>)
 80024a2:	f005 fd2a 	bl	8007efa <HAL_UART_Transmit>
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000568 	.word	0x20000568

080024b4 <_Z15sendMotorSpeedsif>:

void sendMotorSpeeds(int pwm, float yaw)
{
 80024b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024b8:	b096      	sub	sp, #88	; 0x58
 80024ba:	af04      	add	r7, sp, #16
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	6039      	str	r1, [r7, #0]
    char buffer[64];
    sprintf(buffer,
 80024c0:	6838      	ldr	r0, [r7, #0]
 80024c2:	f7fe fdef 	bl	80010a4 <__aeabi_f2iz>
 80024c6:	4680      	mov	r8, r0
            "PWM:%d YAW:%d FL:%d FR:%d BL:%d BR:%d\r\n",
			pwm,
			(int)yaw,
            (int)frontLeftMotor.getSpeed(),
 80024c8:	481a      	ldr	r0, [pc, #104]	; (8002534 <_Z15sendMotorSpeedsif+0x80>)
 80024ca:	f7ff fd62 	bl	8001f92 <_ZN5Motor8getSpeedEv>
 80024ce:	4603      	mov	r3, r0
    sprintf(buffer,
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe fde7 	bl	80010a4 <__aeabi_f2iz>
 80024d6:	4604      	mov	r4, r0
            (int)frontRightMotor.getSpeed(),
 80024d8:	4817      	ldr	r0, [pc, #92]	; (8002538 <_Z15sendMotorSpeedsif+0x84>)
 80024da:	f7ff fd5a 	bl	8001f92 <_ZN5Motor8getSpeedEv>
 80024de:	4603      	mov	r3, r0
    sprintf(buffer,
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fe fddf 	bl	80010a4 <__aeabi_f2iz>
 80024e6:	4605      	mov	r5, r0
            (int)backLeftMotor.getSpeed(),
 80024e8:	4814      	ldr	r0, [pc, #80]	; (800253c <_Z15sendMotorSpeedsif+0x88>)
 80024ea:	f7ff fd52 	bl	8001f92 <_ZN5Motor8getSpeedEv>
 80024ee:	4603      	mov	r3, r0
    sprintf(buffer,
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7fe fdd7 	bl	80010a4 <__aeabi_f2iz>
 80024f6:	4606      	mov	r6, r0
            (int)backRightMotor.getSpeed());
 80024f8:	4811      	ldr	r0, [pc, #68]	; (8002540 <_Z15sendMotorSpeedsif+0x8c>)
 80024fa:	f7ff fd4a 	bl	8001f92 <_ZN5Motor8getSpeedEv>
 80024fe:	4603      	mov	r3, r0
    sprintf(buffer,
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe fdcf 	bl	80010a4 <__aeabi_f2iz>
 8002506:	4603      	mov	r3, r0
 8002508:	f107 0008 	add.w	r0, r7, #8
 800250c:	9303      	str	r3, [sp, #12]
 800250e:	9602      	str	r6, [sp, #8]
 8002510:	9501      	str	r5, [sp, #4]
 8002512:	9400      	str	r4, [sp, #0]
 8002514:	4643      	mov	r3, r8
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	490a      	ldr	r1, [pc, #40]	; (8002544 <_Z15sendMotorSpeedsif+0x90>)
 800251a:	f00b f893 	bl	800d644 <siprintf>

    BT_Send(buffer);
 800251e:	f107 0308 	add.w	r3, r7, #8
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff ffb0 	bl	8002488 <_Z7BT_SendPKc>
}
 8002528:	bf00      	nop
 800252a:	3748      	adds	r7, #72	; 0x48
 800252c:	46bd      	mov	sp, r7
 800252e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002532:	bf00      	nop
 8002534:	20000294 	.word	0x20000294
 8002538:	20000320 	.word	0x20000320
 800253c:	200003ac 	.word	0x200003ac
 8002540:	20000438 	.word	0x20000438
 8002544:	0800ea10 	.word	0x0800ea10

08002548 <_Z41__static_initialization_and_destruction_0ii>:
void sendYaw(float yaw)
{
    char buffer[32];
    snprintf(buffer, sizeof(buffer), "Yaw: %d\r\n", (int)yaw);
    BT_Send(buffer);
}
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af02      	add	r7, sp, #8
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d16d      	bne.n	8002634 <_Z41__static_initialization_and_destruction_0ii+0xec>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800255e:	4293      	cmp	r3, r2
 8002560:	d168      	bne.n	8002634 <_Z41__static_initialization_and_destruction_0ii+0xec>
inline Motor frontLeftMotor(Constants::kFrontLeftKP, Constants::kFrontLeftKI, Constants::kFrontLeftKD, Constants::kFrontLeftN);
 8002562:	4b36      	ldr	r3, [pc, #216]	; (800263c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	3301      	adds	r3, #1
 8002568:	4a34      	ldr	r2, [pc, #208]	; (800263c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	4b33      	ldr	r3, [pc, #204]	; (800263c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b01      	cmp	r3, #1
 8002572:	bf0c      	ite	eq
 8002574:	2301      	moveq	r3, #1
 8002576:	2300      	movne	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d007      	beq.n	800258e <_Z41__static_initialization_and_destruction_0ii+0x46>
 800257e:	4b30      	ldr	r3, [pc, #192]	; (8002640 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	4b30      	ldr	r3, [pc, #192]	; (8002644 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8002584:	4a30      	ldr	r2, [pc, #192]	; (8002648 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8002586:	4931      	ldr	r1, [pc, #196]	; (800264c <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8002588:	4831      	ldr	r0, [pc, #196]	; (8002650 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 800258a:	f7ff fac1 	bl	8001b10 <_ZN5MotorC1Effff>
inline Motor frontRightMotor(Constants::kFrontRightKP, Constants::kFrontRightKI, Constants::kFrontRightKD, Constants::kFrontRightN);
 800258e:	4b31      	ldr	r3, [pc, #196]	; (8002654 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	3301      	adds	r3, #1
 8002594:	4a2f      	ldr	r2, [pc, #188]	; (8002654 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	4b2e      	ldr	r3, [pc, #184]	; (8002654 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b01      	cmp	r3, #1
 800259e:	bf0c      	ite	eq
 80025a0:	2301      	moveq	r3, #1
 80025a2:	2300      	movne	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d007      	beq.n	80025ba <_Z41__static_initialization_and_destruction_0ii+0x72>
 80025aa:	4b2b      	ldr	r3, [pc, #172]	; (8002658 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	4b2b      	ldr	r3, [pc, #172]	; (800265c <_Z41__static_initialization_and_destruction_0ii+0x114>)
 80025b0:	4a2b      	ldr	r2, [pc, #172]	; (8002660 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 80025b2:	492c      	ldr	r1, [pc, #176]	; (8002664 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 80025b4:	482c      	ldr	r0, [pc, #176]	; (8002668 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 80025b6:	f7ff faab 	bl	8001b10 <_ZN5MotorC1Effff>
inline Motor backLeftMotor(Constants::kBackLeftKP, Constants::kBackLeftKI, Constants::kBackLeftKD, Constants::kBackLeftN);
 80025ba:	4b2c      	ldr	r3, [pc, #176]	; (800266c <_Z41__static_initialization_and_destruction_0ii+0x124>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	3301      	adds	r3, #1
 80025c0:	4a2a      	ldr	r2, [pc, #168]	; (800266c <_Z41__static_initialization_and_destruction_0ii+0x124>)
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	4b29      	ldr	r3, [pc, #164]	; (800266c <_Z41__static_initialization_and_destruction_0ii+0x124>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	bf0c      	ite	eq
 80025cc:	2301      	moveq	r3, #1
 80025ce:	2300      	movne	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d007      	beq.n	80025e6 <_Z41__static_initialization_and_destruction_0ii+0x9e>
 80025d6:	4b26      	ldr	r3, [pc, #152]	; (8002670 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	4b26      	ldr	r3, [pc, #152]	; (8002674 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80025dc:	4a26      	ldr	r2, [pc, #152]	; (8002678 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 80025de:	4927      	ldr	r1, [pc, #156]	; (800267c <_Z41__static_initialization_and_destruction_0ii+0x134>)
 80025e0:	4827      	ldr	r0, [pc, #156]	; (8002680 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80025e2:	f7ff fa95 	bl	8001b10 <_ZN5MotorC1Effff>
inline Motor backRightMotor(Constants::kBackRightKP, Constants::kBackRightKI, Constants::kBackRightKD, Constants::kBackRightN);
 80025e6:	4b27      	ldr	r3, [pc, #156]	; (8002684 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	3301      	adds	r3, #1
 80025ec:	4a25      	ldr	r2, [pc, #148]	; (8002684 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	4b24      	ldr	r3, [pc, #144]	; (8002684 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	bf0c      	ite	eq
 80025f8:	2301      	moveq	r3, #1
 80025fa:	2300      	movne	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d007      	beq.n	8002612 <_Z41__static_initialization_and_destruction_0ii+0xca>
 8002602:	4b21      	ldr	r3, [pc, #132]	; (8002688 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	4b21      	ldr	r3, [pc, #132]	; (800268c <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8002608:	4a21      	ldr	r2, [pc, #132]	; (8002690 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 800260a:	4922      	ldr	r1, [pc, #136]	; (8002694 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 800260c:	4822      	ldr	r0, [pc, #136]	; (8002698 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 800260e:	f7ff fa7f 	bl	8001b10 <_ZN5MotorC1Effff>
inline BNOController bno;
 8002612:	4b22      	ldr	r3, [pc, #136]	; (800269c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	3301      	adds	r3, #1
 8002618:	4a20      	ldr	r2, [pc, #128]	; (800269c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	4b1f      	ldr	r3, [pc, #124]	; (800269c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b01      	cmp	r3, #1
 8002622:	bf0c      	ite	eq
 8002624:	2301      	moveq	r3, #1
 8002626:	2300      	movne	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d002      	beq.n	8002634 <_Z41__static_initialization_and_destruction_0ii+0xec>
 800262e:	481c      	ldr	r0, [pc, #112]	; (80026a0 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8002630:	f7ff fcba 	bl	8001fa8 <_ZN13BNOControllerC1Ev>
 8002634:	bf00      	nop
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20000554 	.word	0x20000554
 8002640:	41d9c6a8 	.word	0x41d9c6a8
 8002644:	bbc41229 	.word	0xbbc41229
 8002648:	41c07d56 	.word	0x41c07d56
 800264c:	3e356a7b 	.word	0x3e356a7b
 8002650:	20000294 	.word	0x20000294
 8002654:	20000558 	.word	0x20000558
 8002658:	41ca5d98 	.word	0x41ca5d98
 800265c:	bbd4f769 	.word	0xbbd4f769
 8002660:	41b42eb2 	.word	0x41b42eb2
 8002664:	3e360957 	.word	0x3e360957
 8002668:	20000320 	.word	0x20000320
 800266c:	2000055c 	.word	0x2000055c
 8002670:	41c84433 	.word	0x41c84433
 8002674:	bbd5b86e 	.word	0xbbd5b86e
 8002678:	41b10a72 	.word	0x41b10a72
 800267c:	3e34a409 	.word	0x3e34a409
 8002680:	200003ac 	.word	0x200003ac
 8002684:	20000560 	.word	0x20000560
 8002688:	41c3d917 	.word	0x41c3d917
 800268c:	bbf7af0e 	.word	0xbbf7af0e
 8002690:	41c41d15 	.word	0x41c41d15
 8002694:	3e4c62a2 	.word	0x3e4c62a2
 8002698:	20000438 	.word	0x20000438
 800269c:	20000564 	.word	0x20000564
 80026a0:	200004c4 	.word	0x200004c4

080026a4 <_GLOBAL__sub_I__Z7BT_SendPKc>:
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80026ac:	2001      	movs	r0, #1
 80026ae:	f7ff ff4b 	bl	8002548 <_Z41__static_initialization_and_destruction_0ii>
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <lcd_begin>:
#include "lcd.h"

void lcd_begin()
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
	uint8_t data;
	HAL_Delay(50);
 80026ba:	2032      	movs	r0, #50	; 0x32
 80026bc:	f001 f85e 	bl	800377c <HAL_Delay>
	data = 0b00111100;
 80026c0:	233c      	movs	r3, #60	; 0x3c
 80026c2:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(5, data); // Wait 4ms
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	4619      	mov	r1, r3
 80026c8:	2005      	movs	r0, #5
 80026ca:	f000 f851 	bl	8002770 <send_lcd_command>

	data = 0b00111100;
 80026ce:	233c      	movs	r3, #60	; 0x3c
 80026d0:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // Wait 100us
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	4619      	mov	r1, r3
 80026d6:	2001      	movs	r0, #1
 80026d8:	f000 f84a 	bl	8002770 <send_lcd_command>

	data = 0b00111100;
 80026dc:	233c      	movs	r3, #60	; 0x3c
 80026de:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // Wait 100us
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	4619      	mov	r1, r3
 80026e4:	2001      	movs	r0, #1
 80026e6:	f000 f843 	bl	8002770 <send_lcd_command>

	data = 0b00101100;
 80026ea:	232c      	movs	r3, #44	; 0x2c
 80026ec:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // Wait 100us
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	4619      	mov	r1, r3
 80026f2:	2001      	movs	r0, #1
 80026f4:	f000 f83c 	bl	8002770 <send_lcd_command>

	data = 0b00101100;
 80026f8:	232c      	movs	r3, #44	; 0x2c
 80026fa:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // Wait 100us
 80026fc:	79fb      	ldrb	r3, [r7, #7]
 80026fe:	4619      	mov	r1, r3
 8002700:	2001      	movs	r0, #1
 8002702:	f000 f835 	bl	8002770 <send_lcd_command>

	data = 0b10001100;
 8002706:	238c      	movs	r3, #140	; 0x8c
 8002708:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // NF
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	4619      	mov	r1, r3
 800270e:	2001      	movs	r0, #1
 8002710:	f000 f82e 	bl	8002770 <send_lcd_command>

	data = 0x0C;
 8002714:	230c      	movs	r3, #12
 8002716:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data);
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	4619      	mov	r1, r3
 800271c:	2001      	movs	r0, #1
 800271e:	f000 f827 	bl	8002770 <send_lcd_command>
	//-----------------------------------------------------------
	data = (0xC0) | (1 << 2);
 8002722:	23c4      	movs	r3, #196	; 0xc4
 8002724:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(5, data); // 6b
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	4619      	mov	r1, r3
 800272a:	2005      	movs	r0, #5
 800272c:	f000 f820 	bl	8002770 <send_lcd_command>

	data = (0x00) | (1 << 2);
 8002730:	2304      	movs	r3, #4
 8002732:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // 7a
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	4619      	mov	r1, r3
 8002738:	2001      	movs	r0, #1
 800273a:	f000 f819 	bl	8002770 <send_lcd_command>

	data = (0x10) | (1 << 2);
 800273e:	2314      	movs	r3, #20
 8002740:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // 7b
 8002742:	79fb      	ldrb	r3, [r7, #7]
 8002744:	4619      	mov	r1, r3
 8002746:	2001      	movs	r0, #1
 8002748:	f000 f812 	bl	8002770 <send_lcd_command>

	data = (0x00) | (1 << 2);
 800274c:	2304      	movs	r3, #4
 800274e:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // 8a
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	4619      	mov	r1, r3
 8002754:	2001      	movs	r0, #1
 8002756:	f000 f80b 	bl	8002770 <send_lcd_command>

	data = (0x60) | (1 << 2);
 800275a:	2364      	movs	r3, #100	; 0x64
 800275c:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(5, data); // 8b
 800275e:	79fb      	ldrb	r3, [r7, #7]
 8002760:	4619      	mov	r1, r3
 8002762:	2005      	movs	r0, #5
 8002764:	f000 f804 	bl	8002770 <send_lcd_command>
}
 8002768:	bf00      	nop
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <send_lcd_command>:

void send_lcd_command(uint8_t delay, uint8_t info)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af02      	add	r7, sp, #8
 8002776:	4603      	mov	r3, r0
 8002778:	460a      	mov	r2, r1
 800277a:	71fb      	strb	r3, [r7, #7]
 800277c:	4613      	mov	r3, r2
 800277e:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, 0x27 << 1, &info, 1, 1000);
 8002780:	1dba      	adds	r2, r7, #6
 8002782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	2301      	movs	r3, #1
 800278a:	214e      	movs	r1, #78	; 0x4e
 800278c:	480d      	ldr	r0, [pc, #52]	; (80027c4 <send_lcd_command+0x54>)
 800278e:	f001 fc1f 	bl	8003fd0 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8002792:	2001      	movs	r0, #1
 8002794:	f000 fff2 	bl	800377c <HAL_Delay>
	info = info & ~(1 << 2);
 8002798:	79bb      	ldrb	r3, [r7, #6]
 800279a:	f023 0304 	bic.w	r3, r3, #4
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, 0x27 << 1, &info, 1, 1000);
 80027a2:	1dba      	adds	r2, r7, #6
 80027a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	2301      	movs	r3, #1
 80027ac:	214e      	movs	r1, #78	; 0x4e
 80027ae:	4805      	ldr	r0, [pc, #20]	; (80027c4 <send_lcd_command+0x54>)
 80027b0:	f001 fc0e 	bl	8003fd0 <HAL_I2C_Master_Transmit>
	HAL_Delay(delay); // Wait 100us
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 ffe0 	bl	800377c <HAL_Delay>
}
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	200005b0 	.word	0x200005b0

080027c8 <send_msg>:

void send_msg(char *text)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
	uint8_t data;

	while (*text)
 80027d0:	e01e      	b.n	8002810 <send_msg+0x48>
	{
		data = (*text & 0xF0) | 0x0D | 0x08;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	b25b      	sxtb	r3, r3
 80027d8:	f023 030f 	bic.w	r3, r3, #15
 80027dc:	b25b      	sxtb	r3, r3
 80027de:	f043 030d 	orr.w	r3, r3, #13
 80027e2:	b25b      	sxtb	r3, r3
 80027e4:	73fb      	strb	r3, [r7, #15]
		send_lcd_command(1, data);
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	4619      	mov	r1, r3
 80027ea:	2001      	movs	r0, #1
 80027ec:	f7ff ffc0 	bl	8002770 <send_lcd_command>
		data = ((*text << 4) & 0xF0) | 0x0D | 0x08;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	b25b      	sxtb	r3, r3
 80027f8:	f043 030d 	orr.w	r3, r3, #13
 80027fc:	b25b      	sxtb	r3, r3
 80027fe:	73fb      	strb	r3, [r7, #15]
		send_lcd_command(1, data);
 8002800:	7bfb      	ldrb	r3, [r7, #15]
 8002802:	4619      	mov	r1, r3
 8002804:	2001      	movs	r0, #1
 8002806:	f7ff ffb3 	bl	8002770 <send_lcd_command>
		text++;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3301      	adds	r3, #1
 800280e:	607b      	str	r3, [r7, #4]
	while (*text)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1dc      	bne.n	80027d2 <send_msg+0xa>
	}
}
 8002818:	bf00      	nop
 800281a:	bf00      	nop
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <lcd_clean>:

void lcd_clean()
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af02      	add	r7, sp, #8
	uint8_t data = (0x08) | (1 << 2);
 800282a:	230c      	movs	r3, #12
 800282c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, 0x27 << 1, &data, 1, 1000);
 800282e:	1dfa      	adds	r2, r7, #7
 8002830:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	2301      	movs	r3, #1
 8002838:	214e      	movs	r1, #78	; 0x4e
 800283a:	4809      	ldr	r0, [pc, #36]	; (8002860 <lcd_clean+0x3c>)
 800283c:	f001 fbc8 	bl	8003fd0 <HAL_I2C_Master_Transmit>
	send_lcd_command(5, data);
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	4619      	mov	r1, r3
 8002844:	2005      	movs	r0, #5
 8002846:	f7ff ff93 	bl	8002770 <send_lcd_command>
	data = (0x18) | (1 << 2) | 0x08;
 800284a:	231c      	movs	r3, #28
 800284c:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(5, data);
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	4619      	mov	r1, r3
 8002852:	2005      	movs	r0, #5
 8002854:	f7ff ff8c 	bl	8002770 <send_lcd_command>
}
 8002858:	bf00      	nop
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	200005b0 	.word	0x200005b0

08002864 <HAL_GPIO_EXTI_Callback>:
static void MX_TIM3_Init(void);
static void MX_USART1_UART_Init(void);

/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800286e:	88fb      	ldrh	r3, [r7, #6]
 8002870:	3b01      	subs	r3, #1
 8002872:	2b07      	cmp	r3, #7
 8002874:	d822      	bhi.n	80028bc <HAL_GPIO_EXTI_Callback+0x58>
 8002876:	a201      	add	r2, pc, #4	; (adr r2, 800287c <HAL_GPIO_EXTI_Callback+0x18>)
 8002878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287c:	080028a5 	.word	0x080028a5
 8002880:	0800289d 	.word	0x0800289d
 8002884:	080028bd 	.word	0x080028bd
 8002888:	080028ad 	.word	0x080028ad
 800288c:	080028bd 	.word	0x080028bd
 8002890:	080028bd 	.word	0x080028bd
 8002894:	080028bd 	.word	0x080028bd
 8002898:	080028b5 	.word	0x080028b5
  {
  case Constants::kFrontLeftEncoder:
    frontLeftMotor.addTicks();
 800289c:	4809      	ldr	r0, [pc, #36]	; (80028c4 <HAL_GPIO_EXTI_Callback+0x60>)
 800289e:	f7ff fb6a 	bl	8001f76 <_ZN5Motor8addTicksEv>
    break;
 80028a2:	e00b      	b.n	80028bc <HAL_GPIO_EXTI_Callback+0x58>
  case Constants::kFrontRightEncoder:
    frontRightMotor.addTicks();
 80028a4:	4808      	ldr	r0, [pc, #32]	; (80028c8 <HAL_GPIO_EXTI_Callback+0x64>)
 80028a6:	f7ff fb66 	bl	8001f76 <_ZN5Motor8addTicksEv>
    break;
 80028aa:	e007      	b.n	80028bc <HAL_GPIO_EXTI_Callback+0x58>
  case Constants::kBackLeftEncoder:
    backLeftMotor.addTicks();
 80028ac:	4807      	ldr	r0, [pc, #28]	; (80028cc <HAL_GPIO_EXTI_Callback+0x68>)
 80028ae:	f7ff fb62 	bl	8001f76 <_ZN5Motor8addTicksEv>
    break;
 80028b2:	e003      	b.n	80028bc <HAL_GPIO_EXTI_Callback+0x58>
  case Constants::kBackRightEncoder:
    backRightMotor.addTicks();
 80028b4:	4806      	ldr	r0, [pc, #24]	; (80028d0 <HAL_GPIO_EXTI_Callback+0x6c>)
 80028b6:	f7ff fb5e 	bl	8001f76 <_ZN5Motor8addTicksEv>
    break;
 80028ba:	bf00      	nop
  }
}
 80028bc:	bf00      	nop
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	20000294 	.word	0x20000294
 80028c8:	20000320 	.word	0x20000320
 80028cc:	200003ac 	.word	0x200003ac
 80028d0:	20000438 	.word	0x20000438

080028d4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80028d4:	b5b0      	push	{r4, r5, r7, lr}
 80028d6:	b096      	sub	sp, #88	; 0x58
 80028d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028da:	f000 feed 	bl	80036b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028de:	f000 f935 	bl	8002b4c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028e2:	f000 fb1d 	bl	8002f20 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 80028e6:	f000 f99b 	bl	8002c20 <_ZL12MX_I2C1_Initv>
  MX_USB_DEVICE_Init();
 80028ea:	f009 f94b 	bl	800bb84 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80028ee:	f000 f9cb 	bl	8002c88 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 80028f2:	f000 fa5f 	bl	8002db4 <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 80028f6:	f000 fae5 	bl	8002ec4 <_ZL19MX_USART1_UART_Initv>

  /* USER CODE BEGIN 2 */
  MX_GPIO_Init();
 80028fa:	f000 fb11 	bl	8002f20 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 80028fe:	f000 f98f 	bl	8002c20 <_ZL12MX_I2C1_Initv>
  MX_USB_DEVICE_Init();
 8002902:	f009 f93f 	bl	800bb84 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_Init();
 8002906:	f000 fed7 	bl	80036b8 <HAL_Init>
  SystemClock_Config();
 800290a:	f000 f91f 	bl	8002b4c <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 800290e:	f000 fb07 	bl	8002f20 <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 8002912:	f000 f9b9 	bl	8002c88 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8002916:	f000 fa4d 	bl	8002db4 <_ZL12MX_TIM3_Initv>

  lcd_begin();
 800291a:	f7ff fecb 	bl	80026b4 <lcd_begin>
  bno.init();
 800291e:	4881      	ldr	r0, [pc, #516]	; (8002b24 <main+0x250>)
 8002920:	f7ff f816 	bl	8001950 <_ZN13BNOController4initEv>
  send_msg("Equipo4");
 8002924:	4880      	ldr	r0, [pc, #512]	; (8002b28 <main+0x254>)
 8002926:	f7ff ff4f 	bl	80027c8 <send_msg>

  movementInit();
 800292a:	f7ff fb5f 	bl	8001fec <_Z12movementInitv>

  /// SPEED
  setSpeed(speed);
 800292e:	4b7f      	ldr	r3, [pc, #508]	; (8002b2c <main+0x258>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff fbb8 	bl	80020a8 <_Z8setSpeedi>
  uint32_t last_average_time = 0;
 8002938:	2300      	movs	r3, #0
 800293a:	647b      	str	r3, [r7, #68]	; 0x44
  float total_distance = 0;
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t last_time_print, last_PIDYAW, dt = HAL_GetTick();
 8002942:	f000 ff11 	bl	8003768 <HAL_GetTick>
 8002946:	63f8      	str	r0, [r7, #60]	; 0x3c
  uint32_t init_time = HAL_GetTick();
 8002948:	f000 ff0e 	bl	8003768 <HAL_GetTick>
 800294c:	63b8      	str	r0, [r7, #56]	; 0x38

  // POS //
  float distancia_entera = 0;
 800294e:	f04f 0300 	mov.w	r3, #0
 8002952:	637b      	str	r3, [r7, #52]	; 0x34
  float delta_x, delta_y = 0;
 8002954:	f04f 0300 	mov.w	r3, #0
 8002958:	633b      	str	r3, [r7, #48]	; 0x30
  float pos_x, pos_y = 0;
 800295a:	f04f 0300 	mov.w	r3, #0
 800295e:	64bb      	str	r3, [r7, #72]	; 0x48
  int current_speed = 0;
 8002960:	2300      	movs	r3, #0
 8002962:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (1)
  {
    /* USER CODE END WHILE */

    // Timer //
    uint32_t now = HAL_GetTick();
 8002964:	f000 ff00 	bl	8003768 <HAL_GetTick>
 8002968:	62b8      	str	r0, [r7, #40]	; 0x28
    // updateWithoutPID(now);

    // PID Updater //
    updateMovement(now);
 800296a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800296c:	f7ff fbe4 	bl	8002138 <_Z14updateMovementm>
    if (now - last_PIDYAW >= Constants::kTimeDelay * 10)
 8002970:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b63      	cmp	r3, #99	; 0x63
 8002978:	d978      	bls.n	8002a6c <main+0x198>
    {
      // setKinematicSpeeds(speed, now);

      // Odometry //
      dt = (now - last_PIDYAW) / 1000.0f;
 800297a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800297c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	4618      	mov	r0, r3
 8002982:	f7fe f971 	bl	8000c68 <__aeabi_ui2f>
 8002986:	4603      	mov	r3, r0
 8002988:	4969      	ldr	r1, [pc, #420]	; (8002b30 <main+0x25c>)
 800298a:	4618      	mov	r0, r3
 800298c:	f7fe fa78 	bl	8000e80 <__aeabi_fdiv>
 8002990:	4603      	mov	r3, r0
 8002992:	4618      	mov	r0, r3
 8002994:	f7fe fbac 	bl	80010f0 <__aeabi_f2uiz>
 8002998:	4603      	mov	r3, r0
 800299a:	63fb      	str	r3, [r7, #60]	; 0x3c
      delta_x = current_speed * cos(bno.getYawRad()) * dt;
 800299c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800299e:	f7fd fd31 	bl	8000404 <__aeabi_i2d>
 80029a2:	4604      	mov	r4, r0
 80029a4:	460d      	mov	r5, r1
 80029a6:	485f      	ldr	r0, [pc, #380]	; (8002b24 <main+0x250>)
 80029a8:	f7ff f816 	bl	80019d8 <_ZN13BNOController9getYawRadEv>
 80029ac:	4603      	mov	r3, r0
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fd fd3a 	bl	8000428 <__aeabi_f2d>
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	4610      	mov	r0, r2
 80029ba:	4619      	mov	r1, r3
 80029bc:	f009 fd58 	bl	800c470 <cos>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4620      	mov	r0, r4
 80029c6:	4629      	mov	r1, r5
 80029c8:	f7fd fd86 	bl	80004d8 <__aeabi_dmul>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	4614      	mov	r4, r2
 80029d2:	461d      	mov	r5, r3
 80029d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80029d6:	f7fd fd05 	bl	80003e4 <__aeabi_ui2d>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	4620      	mov	r0, r4
 80029e0:	4629      	mov	r1, r5
 80029e2:	f7fd fd79 	bl	80004d8 <__aeabi_dmul>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	4610      	mov	r0, r2
 80029ec:	4619      	mov	r1, r3
 80029ee:	f7fe f835 	bl	8000a5c <__aeabi_d2f>
 80029f2:	4603      	mov	r3, r0
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
      delta_y = current_speed * sin(bno.getYawRad()) * dt;
 80029f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80029f8:	f7fd fd04 	bl	8000404 <__aeabi_i2d>
 80029fc:	4604      	mov	r4, r0
 80029fe:	460d      	mov	r5, r1
 8002a00:	4848      	ldr	r0, [pc, #288]	; (8002b24 <main+0x250>)
 8002a02:	f7fe ffe9 	bl	80019d8 <_ZN13BNOController9getYawRadEv>
 8002a06:	4603      	mov	r3, r0
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fd fd0d 	bl	8000428 <__aeabi_f2d>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4610      	mov	r0, r2
 8002a14:	4619      	mov	r1, r3
 8002a16:	f009 fd6d 	bl	800c4f4 <sin>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4620      	mov	r0, r4
 8002a20:	4629      	mov	r1, r5
 8002a22:	f7fd fd59 	bl	80004d8 <__aeabi_dmul>
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	4614      	mov	r4, r2
 8002a2c:	461d      	mov	r5, r3
 8002a2e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002a30:	f7fd fcd8 	bl	80003e4 <__aeabi_ui2d>
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	4620      	mov	r0, r4
 8002a3a:	4629      	mov	r1, r5
 8002a3c:	f7fd fd4c 	bl	80004d8 <__aeabi_dmul>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4610      	mov	r0, r2
 8002a46:	4619      	mov	r1, r3
 8002a48:	f7fe f808 	bl	8000a5c <__aeabi_d2f>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	633b      	str	r3, [r7, #48]	; 0x30
      pos_x += delta_x;
 8002a50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a52:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002a54:	f7fe f858 	bl	8000b08 <__addsf3>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      pos_y += delta_y;
 8002a5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a5e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002a60:	f7fe f852 	bl	8000b08 <__addsf3>
 8002a64:	4603      	mov	r3, r0
 8002a66:	64bb      	str	r3, [r7, #72]	; 0x48

      last_PIDYAW = now;
 8002a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6a:	653b      	str	r3, [r7, #80]	; 0x50
    }

    // Communication Message //
    if (now - last_time_print > 250)
 8002a6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2bfa      	cmp	r3, #250	; 0xfa
 8002a74:	d947      	bls.n	8002b06 <main+0x232>
    {

      distancia_entera = ((backLeftMotor.getDistance() + backRightMotor.getDistance() + frontLeftMotor.getDistance() + frontRightMotor.getDistance()) / 4);
 8002a76:	482f      	ldr	r0, [pc, #188]	; (8002b34 <main+0x260>)
 8002a78:	f7ff fa72 	bl	8001f60 <_ZN5Motor11getDistanceEv>
 8002a7c:	4604      	mov	r4, r0
 8002a7e:	482e      	ldr	r0, [pc, #184]	; (8002b38 <main+0x264>)
 8002a80:	f7ff fa6e 	bl	8001f60 <_ZN5Motor11getDistanceEv>
 8002a84:	4603      	mov	r3, r0
 8002a86:	4619      	mov	r1, r3
 8002a88:	4620      	mov	r0, r4
 8002a8a:	f7fe f83d 	bl	8000b08 <__addsf3>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	461c      	mov	r4, r3
 8002a92:	482a      	ldr	r0, [pc, #168]	; (8002b3c <main+0x268>)
 8002a94:	f7ff fa64 	bl	8001f60 <_ZN5Motor11getDistanceEv>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	f7fe f833 	bl	8000b08 <__addsf3>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	461c      	mov	r4, r3
 8002aa6:	4826      	ldr	r0, [pc, #152]	; (8002b40 <main+0x26c>)
 8002aa8:	f7ff fa5a 	bl	8001f60 <_ZN5Motor11getDistanceEv>
 8002aac:	4603      	mov	r3, r0
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4620      	mov	r0, r4
 8002ab2:	f7fe f829 	bl	8000b08 <__addsf3>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fe f9df 	bl	8000e80 <__aeabi_fdiv>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	637b      	str	r3, [r7, #52]	; 0x34

      // LCD //
      char buffer[32];
      sprintf(buffer, "(%d,  %d)", (int)pos_x, (int)pos_y);
 8002ac6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002ac8:	f7fe faec 	bl	80010a4 <__aeabi_f2iz>
 8002acc:	4604      	mov	r4, r0
 8002ace:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002ad0:	f7fe fae8 	bl	80010a4 <__aeabi_f2iz>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	1d38      	adds	r0, r7, #4
 8002ad8:	4622      	mov	r2, r4
 8002ada:	491a      	ldr	r1, [pc, #104]	; (8002b44 <main+0x270>)
 8002adc:	f00a fdb2 	bl	800d644 <siprintf>
      lcd_clean();
 8002ae0:	f7ff fea0 	bl	8002824 <lcd_clean>
      send_msg(buffer);
 8002ae4:	1d3b      	adds	r3, r7, #4
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff fe6e 	bl	80027c8 <send_msg>

      // Bluetooth //
      sendMotorSpeeds(b9, bno.getYaw());
 8002aec:	4b16      	ldr	r3, [pc, #88]	; (8002b48 <main+0x274>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	461c      	mov	r4, r3
 8002af2:	480c      	ldr	r0, [pc, #48]	; (8002b24 <main+0x250>)
 8002af4:	f7fe ff5e 	bl	80019b4 <_ZN13BNOController6getYawEv>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4619      	mov	r1, r3
 8002afc:	4620      	mov	r0, r4
 8002afe:	f7ff fcd9 	bl	80024b4 <_Z15sendMotorSpeedsif>
      // float yaw = bno.getSpeed();
      // sendYaw(yaw);

      last_time_print = now;
 8002b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b04:	657b      	str	r3, [r7, #84]	; 0x54
    //    	backRightMotor.set_pwm_forward(255);
    //      current_speed = speed;
    //    }

    // Stop after a set condition //
    while (now - init_time > 20000) // CM por alcanzar
 8002b06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d902      	bls.n	8002b1a <main+0x246>
    {
      // float yaw = bno.getYaw();
      // sendYaw(yaw);
      stop();
 8002b14:	f7ff faf8 	bl	8002108 <_Z4stopv>
    while (now - init_time > 20000) // CM por alcanzar
 8002b18:	e7f5      	b.n	8002b06 <main+0x232>
      // HAL_Delay(Constants::kTimeDelay);
    }

    HAL_Delay(Constants::kTimeDelay);
 8002b1a:	200a      	movs	r0, #10
 8002b1c:	f000 fe2e 	bl	800377c <HAL_Delay>
    /* USER CODE BEGIN 3 */
  }
 8002b20:	e720      	b.n	8002964 <main+0x90>
 8002b22:	bf00      	nop
 8002b24:	200004c4 	.word	0x200004c4
 8002b28:	0800ea44 	.word	0x0800ea44
 8002b2c:	20000000 	.word	0x20000000
 8002b30:	447a0000 	.word	0x447a0000
 8002b34:	200003ac 	.word	0x200003ac
 8002b38:	20000438 	.word	0x20000438
 8002b3c:	20000294 	.word	0x20000294
 8002b40:	20000320 	.word	0x20000320
 8002b44:	0800ea4c 	.word	0x0800ea4c
 8002b48:	20000004 	.word	0x20000004

08002b4c <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b094      	sub	sp, #80	; 0x50
 8002b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b56:	2228      	movs	r2, #40	; 0x28
 8002b58:	2100      	movs	r1, #0
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f00a fcf4 	bl	800d548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b60:	f107 0314 	add.w	r3, r7, #20
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	60da      	str	r2, [r3, #12]
 8002b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b70:	1d3b      	adds	r3, r7, #4
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	605a      	str	r2, [r3, #4]
 8002b78:	609a      	str	r2, [r3, #8]
 8002b7a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002b86:	2300      	movs	r3, #0
 8002b88:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002b98:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f004 f818 	bl	8006bd8 <HAL_RCC_OscConfig>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	bf14      	ite	ne
 8002bae:	2301      	movne	r3, #1
 8002bb0:	2300      	moveq	r3, #0
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8002bb8:	f000 fa4c 	bl	8003054 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002bbc:	230f      	movs	r3, #15
 8002bbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002bc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bcc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002bd2:	f107 0314 	add.w	r3, r7, #20
 8002bd6:	2102      	movs	r1, #2
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f004 fa7d 	bl	80070d8 <HAL_RCC_ClockConfig>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	bf14      	ite	ne
 8002be4:	2301      	movne	r3, #1
 8002be6:	2300      	moveq	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8002bee:	f000 fa31 	bl	8003054 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002bf2:	2310      	movs	r3, #16
 8002bf4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bfa:	1d3b      	adds	r3, r7, #4
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f004 fbf9 	bl	80073f4 <HAL_RCCEx_PeriphCLKConfig>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	bf14      	ite	ne
 8002c08:	2301      	movne	r3, #1
 8002c0a:	2300      	moveq	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 8002c12:	f000 fa1f 	bl	8003054 <Error_Handler>
  }
}
 8002c16:	bf00      	nop
 8002c18:	3750      	adds	r7, #80	; 0x50
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <_ZL12MX_I2C1_Initv>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c24:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <_ZL12MX_I2C1_Initv+0x5c>)
 8002c26:	4a16      	ldr	r2, [pc, #88]	; (8002c80 <_ZL12MX_I2C1_Initv+0x60>)
 8002c28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002c2a:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <_ZL12MX_I2C1_Initv+0x5c>)
 8002c2c:	4a15      	ldr	r2, [pc, #84]	; (8002c84 <_ZL12MX_I2C1_Initv+0x64>)
 8002c2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c30:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <_ZL12MX_I2C1_Initv+0x5c>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002c36:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <_ZL12MX_I2C1_Initv+0x5c>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c3c:	4b0f      	ldr	r3, [pc, #60]	; (8002c7c <_ZL12MX_I2C1_Initv+0x5c>)
 8002c3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c44:	4b0d      	ldr	r3, [pc, #52]	; (8002c7c <_ZL12MX_I2C1_Initv+0x5c>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002c4a:	4b0c      	ldr	r3, [pc, #48]	; (8002c7c <_ZL12MX_I2C1_Initv+0x5c>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c50:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <_ZL12MX_I2C1_Initv+0x5c>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c56:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <_ZL12MX_I2C1_Initv+0x5c>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c5c:	4807      	ldr	r0, [pc, #28]	; (8002c7c <_ZL12MX_I2C1_Initv+0x5c>)
 8002c5e:	f001 f873 	bl	8003d48 <HAL_I2C_Init>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	bf14      	ite	ne
 8002c68:	2301      	movne	r3, #1
 8002c6a:	2300      	moveq	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8002c72:	f000 f9ef 	bl	8003054 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	200005b0 	.word	0x200005b0
 8002c80:	40005400 	.word	0x40005400
 8002c84:	000186a0 	.word	0x000186a0

08002c88 <_ZL12MX_TIM1_Initv>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b092      	sub	sp, #72	; 0x48
 8002c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
 8002ca4:	60da      	str	r2, [r3, #12]
 8002ca6:	611a      	str	r2, [r3, #16]
 8002ca8:	615a      	str	r2, [r3, #20]
 8002caa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002cac:	1d3b      	adds	r3, r7, #4
 8002cae:	2220      	movs	r2, #32
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f00a fc48 	bl	800d548 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002cb8:	4b3c      	ldr	r3, [pc, #240]	; (8002dac <_ZL12MX_TIM1_Initv+0x124>)
 8002cba:	4a3d      	ldr	r2, [pc, #244]	; (8002db0 <_ZL12MX_TIM1_Initv+0x128>)
 8002cbc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 13;
 8002cbe:	4b3b      	ldr	r3, [pc, #236]	; (8002dac <_ZL12MX_TIM1_Initv+0x124>)
 8002cc0:	220d      	movs	r2, #13
 8002cc2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cc4:	4b39      	ldr	r3, [pc, #228]	; (8002dac <_ZL12MX_TIM1_Initv+0x124>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8002cca:	4b38      	ldr	r3, [pc, #224]	; (8002dac <_ZL12MX_TIM1_Initv+0x124>)
 8002ccc:	22ff      	movs	r2, #255	; 0xff
 8002cce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cd0:	4b36      	ldr	r3, [pc, #216]	; (8002dac <_ZL12MX_TIM1_Initv+0x124>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002cd6:	4b35      	ldr	r3, [pc, #212]	; (8002dac <_ZL12MX_TIM1_Initv+0x124>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cdc:	4b33      	ldr	r3, [pc, #204]	; (8002dac <_ZL12MX_TIM1_Initv+0x124>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002ce2:	4832      	ldr	r0, [pc, #200]	; (8002dac <_ZL12MX_TIM1_Initv+0x124>)
 8002ce4:	f004 fc3c 	bl	8007560 <HAL_TIM_PWM_Init>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	bf14      	ite	ne
 8002cee:	2301      	movne	r3, #1
 8002cf0:	2300      	moveq	r3, #0
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <_ZL12MX_TIM1_Initv+0x74>
  {
    Error_Handler();
 8002cf8:	f000 f9ac 	bl	8003054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d00:	2300      	movs	r3, #0
 8002d02:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4828      	ldr	r0, [pc, #160]	; (8002dac <_ZL12MX_TIM1_Initv+0x124>)
 8002d0c:	f004 fff6 	bl	8007cfc <HAL_TIMEx_MasterConfigSynchronization>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	bf14      	ite	ne
 8002d16:	2301      	movne	r3, #1
 8002d18:	2300      	moveq	r3, #0
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <_ZL12MX_TIM1_Initv+0x9c>
  {
    Error_Handler();
 8002d20:	f000 f998 	bl	8003054 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d24:	2360      	movs	r3, #96	; 0x60
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d30:	2300      	movs	r3, #0
 8002d32:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d34:	2300      	movs	r3, #0
 8002d36:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d44:	2200      	movs	r2, #0
 8002d46:	4619      	mov	r1, r3
 8002d48:	4818      	ldr	r0, [pc, #96]	; (8002dac <_ZL12MX_TIM1_Initv+0x124>)
 8002d4a:	f004 fcfb 	bl	8007744 <HAL_TIM_PWM_ConfigChannel>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	bf14      	ite	ne
 8002d54:	2301      	movne	r3, #1
 8002d56:	2300      	moveq	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <_ZL12MX_TIM1_Initv+0xda>
  {
    Error_Handler();
 8002d5e:	f000 f979 	bl	8003054 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d62:	2300      	movs	r3, #0
 8002d64:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d66:	2300      	movs	r3, #0
 8002d68:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d7a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002d80:	1d3b      	adds	r3, r7, #4
 8002d82:	4619      	mov	r1, r3
 8002d84:	4809      	ldr	r0, [pc, #36]	; (8002dac <_ZL12MX_TIM1_Initv+0x124>)
 8002d86:	f005 f817 	bl	8007db8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bf14      	ite	ne
 8002d90:	2301      	movne	r3, #1
 8002d92:	2300      	moveq	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <_ZL12MX_TIM1_Initv+0x116>
  {
    Error_Handler();
 8002d9a:	f000 f95b 	bl	8003054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002d9e:	4803      	ldr	r0, [pc, #12]	; (8002dac <_ZL12MX_TIM1_Initv+0x124>)
 8002da0:	f000 fab6 	bl	8003310 <HAL_TIM_MspPostInit>
}
 8002da4:	bf00      	nop
 8002da6:	3748      	adds	r7, #72	; 0x48
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	20000204 	.word	0x20000204
 8002db0:	40012c00 	.word	0x40012c00

08002db4 <_ZL12MX_TIM3_Initv>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08a      	sub	sp, #40	; 0x28
 8002db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dba:	f107 0320 	add.w	r3, r7, #32
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dc4:	1d3b      	adds	r3, r7, #4
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	605a      	str	r2, [r3, #4]
 8002dcc:	609a      	str	r2, [r3, #8]
 8002dce:	60da      	str	r2, [r3, #12]
 8002dd0:	611a      	str	r2, [r3, #16]
 8002dd2:	615a      	str	r2, [r3, #20]
 8002dd4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002dd6:	4b39      	ldr	r3, [pc, #228]	; (8002ebc <_ZL12MX_TIM3_Initv+0x108>)
 8002dd8:	4a39      	ldr	r2, [pc, #228]	; (8002ec0 <_ZL12MX_TIM3_Initv+0x10c>)
 8002dda:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 13;
 8002ddc:	4b37      	ldr	r3, [pc, #220]	; (8002ebc <_ZL12MX_TIM3_Initv+0x108>)
 8002dde:	220d      	movs	r2, #13
 8002de0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002de2:	4b36      	ldr	r3, [pc, #216]	; (8002ebc <_ZL12MX_TIM3_Initv+0x108>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8002de8:	4b34      	ldr	r3, [pc, #208]	; (8002ebc <_ZL12MX_TIM3_Initv+0x108>)
 8002dea:	22ff      	movs	r2, #255	; 0xff
 8002dec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dee:	4b33      	ldr	r3, [pc, #204]	; (8002ebc <_ZL12MX_TIM3_Initv+0x108>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002df4:	4b31      	ldr	r3, [pc, #196]	; (8002ebc <_ZL12MX_TIM3_Initv+0x108>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002dfa:	4830      	ldr	r0, [pc, #192]	; (8002ebc <_ZL12MX_TIM3_Initv+0x108>)
 8002dfc:	f004 fbb0 	bl	8007560 <HAL_TIM_PWM_Init>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	bf14      	ite	ne
 8002e06:	2301      	movne	r3, #1
 8002e08:	2300      	moveq	r3, #0
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <_ZL12MX_TIM3_Initv+0x60>
  {
    Error_Handler();
 8002e10:	f000 f920 	bl	8003054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e14:	2300      	movs	r3, #0
 8002e16:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e1c:	f107 0320 	add.w	r3, r7, #32
 8002e20:	4619      	mov	r1, r3
 8002e22:	4826      	ldr	r0, [pc, #152]	; (8002ebc <_ZL12MX_TIM3_Initv+0x108>)
 8002e24:	f004 ff6a 	bl	8007cfc <HAL_TIMEx_MasterConfigSynchronization>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	bf14      	ite	ne
 8002e2e:	2301      	movne	r3, #1
 8002e30:	2300      	moveq	r3, #0
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <_ZL12MX_TIM3_Initv+0x88>
  {
    Error_Handler();
 8002e38:	f000 f90c 	bl	8003054 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e3c:	2360      	movs	r3, #96	; 0x60
 8002e3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e44:	2300      	movs	r3, #0
 8002e46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e4c:	1d3b      	adds	r3, r7, #4
 8002e4e:	2200      	movs	r2, #0
 8002e50:	4619      	mov	r1, r3
 8002e52:	481a      	ldr	r0, [pc, #104]	; (8002ebc <_ZL12MX_TIM3_Initv+0x108>)
 8002e54:	f004 fc76 	bl	8007744 <HAL_TIM_PWM_ConfigChannel>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	bf14      	ite	ne
 8002e5e:	2301      	movne	r3, #1
 8002e60:	2300      	moveq	r3, #0
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <_ZL12MX_TIM3_Initv+0xb8>
  {
    Error_Handler();
 8002e68:	f000 f8f4 	bl	8003054 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e6c:	1d3b      	adds	r3, r7, #4
 8002e6e:	2204      	movs	r2, #4
 8002e70:	4619      	mov	r1, r3
 8002e72:	4812      	ldr	r0, [pc, #72]	; (8002ebc <_ZL12MX_TIM3_Initv+0x108>)
 8002e74:	f004 fc66 	bl	8007744 <HAL_TIM_PWM_ConfigChannel>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	bf14      	ite	ne
 8002e7e:	2301      	movne	r3, #1
 8002e80:	2300      	moveq	r3, #0
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8002e88:	f000 f8e4 	bl	8003054 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002e8c:	1d3b      	adds	r3, r7, #4
 8002e8e:	220c      	movs	r2, #12
 8002e90:	4619      	mov	r1, r3
 8002e92:	480a      	ldr	r0, [pc, #40]	; (8002ebc <_ZL12MX_TIM3_Initv+0x108>)
 8002e94:	f004 fc56 	bl	8007744 <HAL_TIM_PWM_ConfigChannel>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	bf14      	ite	ne
 8002e9e:	2301      	movne	r3, #1
 8002ea0:	2300      	moveq	r3, #0
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <_ZL12MX_TIM3_Initv+0xf8>
  {
    Error_Handler();
 8002ea8:	f000 f8d4 	bl	8003054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002eac:	4803      	ldr	r0, [pc, #12]	; (8002ebc <_ZL12MX_TIM3_Initv+0x108>)
 8002eae:	f000 fa2f 	bl	8003310 <HAL_TIM_MspPostInit>
}
 8002eb2:	bf00      	nop
 8002eb4:	3728      	adds	r7, #40	; 0x28
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	2000024c 	.word	0x2000024c
 8002ec0:	40000400 	.word	0x40000400

08002ec4 <_ZL19MX_USART1_UART_Initv>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ec8:	4b13      	ldr	r3, [pc, #76]	; (8002f18 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002eca:	4a14      	ldr	r2, [pc, #80]	; (8002f1c <_ZL19MX_USART1_UART_Initv+0x58>)
 8002ecc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002ece:	4b12      	ldr	r3, [pc, #72]	; (8002f18 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002ed0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002ed4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ed6:	4b10      	ldr	r3, [pc, #64]	; (8002f18 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002edc:	4b0e      	ldr	r3, [pc, #56]	; (8002f18 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ee2:	4b0d      	ldr	r3, [pc, #52]	; (8002f18 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ee8:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002eea:	220c      	movs	r2, #12
 8002eec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eee:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ef4:	4b08      	ldr	r3, [pc, #32]	; (8002f18 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002efa:	4807      	ldr	r0, [pc, #28]	; (8002f18 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002efc:	f004 ffad 	bl	8007e5a <HAL_UART_Init>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	bf14      	ite	ne
 8002f06:	2301      	movne	r3, #1
 8002f08:	2300      	moveq	r3, #0
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8002f10:	f000 f8a0 	bl	8003054 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8002f14:	bf00      	nop
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	20000568 	.word	0x20000568
 8002f1c:	40013800 	.word	0x40013800

08002f20 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f26:	f107 0310 	add.w	r3, r7, #16
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	605a      	str	r2, [r3, #4]
 8002f30:	609a      	str	r2, [r3, #8]
 8002f32:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f34:	4b43      	ldr	r3, [pc, #268]	; (8003044 <_ZL12MX_GPIO_Initv+0x124>)
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	4a42      	ldr	r2, [pc, #264]	; (8003044 <_ZL12MX_GPIO_Initv+0x124>)
 8002f3a:	f043 0310 	orr.w	r3, r3, #16
 8002f3e:	6193      	str	r3, [r2, #24]
 8002f40:	4b40      	ldr	r3, [pc, #256]	; (8003044 <_ZL12MX_GPIO_Initv+0x124>)
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	f003 0310 	and.w	r3, r3, #16
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f4c:	4b3d      	ldr	r3, [pc, #244]	; (8003044 <_ZL12MX_GPIO_Initv+0x124>)
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	4a3c      	ldr	r2, [pc, #240]	; (8003044 <_ZL12MX_GPIO_Initv+0x124>)
 8002f52:	f043 0320 	orr.w	r3, r3, #32
 8002f56:	6193      	str	r3, [r2, #24]
 8002f58:	4b3a      	ldr	r3, [pc, #232]	; (8003044 <_ZL12MX_GPIO_Initv+0x124>)
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	f003 0320 	and.w	r3, r3, #32
 8002f60:	60bb      	str	r3, [r7, #8]
 8002f62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f64:	4b37      	ldr	r3, [pc, #220]	; (8003044 <_ZL12MX_GPIO_Initv+0x124>)
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	4a36      	ldr	r2, [pc, #216]	; (8003044 <_ZL12MX_GPIO_Initv+0x124>)
 8002f6a:	f043 0304 	orr.w	r3, r3, #4
 8002f6e:	6193      	str	r3, [r2, #24]
 8002f70:	4b34      	ldr	r3, [pc, #208]	; (8003044 <_ZL12MX_GPIO_Initv+0x124>)
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	607b      	str	r3, [r7, #4]
 8002f7a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f7c:	4b31      	ldr	r3, [pc, #196]	; (8003044 <_ZL12MX_GPIO_Initv+0x124>)
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	4a30      	ldr	r2, [pc, #192]	; (8003044 <_ZL12MX_GPIO_Initv+0x124>)
 8002f82:	f043 0308 	orr.w	r3, r3, #8
 8002f86:	6193      	str	r3, [r2, #24]
 8002f88:	4b2e      	ldr	r3, [pc, #184]	; (8003044 <_ZL12MX_GPIO_Initv+0x124>)
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	603b      	str	r3, [r7, #0]
 8002f92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8002f94:	2200      	movs	r2, #0
 8002f96:	2130      	movs	r1, #48	; 0x30
 8002f98:	482b      	ldr	r0, [pc, #172]	; (8003048 <_ZL12MX_GPIO_Initv+0x128>)
 8002f9a:	f000 fea5 	bl	8003ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f64e 4101 	movw	r1, #60417	; 0xec01
 8002fa4:	4829      	ldr	r0, [pc, #164]	; (800304c <_ZL12MX_GPIO_Initv+0x12c>)
 8002fa6:	f000 fe9f 	bl	8003ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 PA4*/
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4;
 8002faa:	231f      	movs	r3, #31
 8002fac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fae:	4b28      	ldr	r3, [pc, #160]	; (8003050 <_ZL12MX_GPIO_Initv+0x130>)
 8002fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb6:	f107 0310 	add.w	r3, r7, #16
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4822      	ldr	r0, [pc, #136]	; (8003048 <_ZL12MX_GPIO_Initv+0x128>)
 8002fbe:	f000 fd0f 	bl	80039e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8002fc2:	2330      	movs	r3, #48	; 0x30
 8002fc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fce:	2302      	movs	r3, #2
 8002fd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd2:	f107 0310 	add.w	r3, r7, #16
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	481b      	ldr	r0, [pc, #108]	; (8003048 <_ZL12MX_GPIO_Initv+0x128>)
 8002fda:	f000 fd01 	bl	80039e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB11 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8002fde:	f64f 4301 	movw	r3, #64513	; 0xfc01
 8002fe2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fec:	2302      	movs	r3, #2
 8002fee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff0:	f107 0310 	add.w	r3, r7, #16
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4815      	ldr	r0, [pc, #84]	; (800304c <_ZL12MX_GPIO_Initv+0x12c>)
 8002ff8:	f000 fcf2 	bl	80039e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	2100      	movs	r1, #0
 8003000:	2006      	movs	r0, #6
 8003002:	f000 fcb6 	bl	8003972 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003006:	2006      	movs	r0, #6
 8003008:	f000 fccf 	bl	80039aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800300c:	2200      	movs	r2, #0
 800300e:	2100      	movs	r1, #0
 8003010:	2007      	movs	r0, #7
 8003012:	f000 fcae 	bl	8003972 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003016:	2007      	movs	r0, #7
 8003018:	f000 fcc7 	bl	80039aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800301c:	2200      	movs	r2, #0
 800301e:	2100      	movs	r1, #0
 8003020:	2008      	movs	r0, #8
 8003022:	f000 fca6 	bl	8003972 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003026:	2008      	movs	r0, #8
 8003028:	f000 fcbf 	bl	80039aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800302c:	2200      	movs	r2, #0
 800302e:	2100      	movs	r1, #0
 8003030:	2009      	movs	r0, #9
 8003032:	f000 fc9e 	bl	8003972 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003036:	2009      	movs	r0, #9
 8003038:	f000 fcb7 	bl	80039aa <HAL_NVIC_EnableIRQ>
}
 800303c:	bf00      	nop
 800303e:	3720      	adds	r7, #32
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40021000 	.word	0x40021000
 8003048:	40010800 	.word	0x40010800
 800304c:	40010c00 	.word	0x40010c00
 8003050:	10110000 	.word	0x10110000

08003054 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003058:	b672      	cpsid	i
}
 800305a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800305c:	e7fe      	b.n	800305c <Error_Handler+0x8>
	...

08003060 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af02      	add	r7, sp, #8
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d16d      	bne.n	800314c <_Z41__static_initialization_and_destruction_0ii+0xec>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003076:	4293      	cmp	r3, r2
 8003078:	d168      	bne.n	800314c <_Z41__static_initialization_and_destruction_0ii+0xec>
inline Motor frontLeftMotor(Constants::kFrontLeftKP, Constants::kFrontLeftKI, Constants::kFrontLeftKD, Constants::kFrontLeftN);
 800307a:	4b36      	ldr	r3, [pc, #216]	; (8003154 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	3301      	adds	r3, #1
 8003080:	4a34      	ldr	r2, [pc, #208]	; (8003154 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8003082:	6013      	str	r3, [r2, #0]
 8003084:	4b33      	ldr	r3, [pc, #204]	; (8003154 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2b01      	cmp	r3, #1
 800308a:	bf0c      	ite	eq
 800308c:	2301      	moveq	r3, #1
 800308e:	2300      	movne	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d007      	beq.n	80030a6 <_Z41__static_initialization_and_destruction_0ii+0x46>
 8003096:	4b30      	ldr	r3, [pc, #192]	; (8003158 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	4b30      	ldr	r3, [pc, #192]	; (800315c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 800309c:	4a30      	ldr	r2, [pc, #192]	; (8003160 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 800309e:	4931      	ldr	r1, [pc, #196]	; (8003164 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 80030a0:	4831      	ldr	r0, [pc, #196]	; (8003168 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 80030a2:	f7fe fd35 	bl	8001b10 <_ZN5MotorC1Effff>
inline Motor frontRightMotor(Constants::kFrontRightKP, Constants::kFrontRightKI, Constants::kFrontRightKD, Constants::kFrontRightN);
 80030a6:	4b31      	ldr	r3, [pc, #196]	; (800316c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	3301      	adds	r3, #1
 80030ac:	4a2f      	ldr	r2, [pc, #188]	; (800316c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	4b2e      	ldr	r3, [pc, #184]	; (800316c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	bf0c      	ite	eq
 80030b8:	2301      	moveq	r3, #1
 80030ba:	2300      	movne	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d007      	beq.n	80030d2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80030c2:	4b2b      	ldr	r3, [pc, #172]	; (8003170 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	4b2b      	ldr	r3, [pc, #172]	; (8003174 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 80030c8:	4a2b      	ldr	r2, [pc, #172]	; (8003178 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 80030ca:	492c      	ldr	r1, [pc, #176]	; (800317c <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 80030cc:	482c      	ldr	r0, [pc, #176]	; (8003180 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 80030ce:	f7fe fd1f 	bl	8001b10 <_ZN5MotorC1Effff>
inline Motor backLeftMotor(Constants::kBackLeftKP, Constants::kBackLeftKI, Constants::kBackLeftKD, Constants::kBackLeftN);
 80030d2:	4b2c      	ldr	r3, [pc, #176]	; (8003184 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	3301      	adds	r3, #1
 80030d8:	4a2a      	ldr	r2, [pc, #168]	; (8003184 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 80030da:	6013      	str	r3, [r2, #0]
 80030dc:	4b29      	ldr	r3, [pc, #164]	; (8003184 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	bf0c      	ite	eq
 80030e4:	2301      	moveq	r3, #1
 80030e6:	2300      	movne	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d007      	beq.n	80030fe <_Z41__static_initialization_and_destruction_0ii+0x9e>
 80030ee:	4b26      	ldr	r3, [pc, #152]	; (8003188 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	4b26      	ldr	r3, [pc, #152]	; (800318c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80030f4:	4a26      	ldr	r2, [pc, #152]	; (8003190 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 80030f6:	4927      	ldr	r1, [pc, #156]	; (8003194 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 80030f8:	4827      	ldr	r0, [pc, #156]	; (8003198 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80030fa:	f7fe fd09 	bl	8001b10 <_ZN5MotorC1Effff>
inline Motor backRightMotor(Constants::kBackRightKP, Constants::kBackRightKI, Constants::kBackRightKD, Constants::kBackRightN);
 80030fe:	4b27      	ldr	r3, [pc, #156]	; (800319c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3301      	adds	r3, #1
 8003104:	4a25      	ldr	r2, [pc, #148]	; (800319c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8003106:	6013      	str	r3, [r2, #0]
 8003108:	4b24      	ldr	r3, [pc, #144]	; (800319c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b01      	cmp	r3, #1
 800310e:	bf0c      	ite	eq
 8003110:	2301      	moveq	r3, #1
 8003112:	2300      	movne	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d007      	beq.n	800312a <_Z41__static_initialization_and_destruction_0ii+0xca>
 800311a:	4b21      	ldr	r3, [pc, #132]	; (80031a0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	4b21      	ldr	r3, [pc, #132]	; (80031a4 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8003120:	4a21      	ldr	r2, [pc, #132]	; (80031a8 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8003122:	4922      	ldr	r1, [pc, #136]	; (80031ac <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8003124:	4822      	ldr	r0, [pc, #136]	; (80031b0 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8003126:	f7fe fcf3 	bl	8001b10 <_ZN5MotorC1Effff>
inline BNOController bno;
 800312a:	4b22      	ldr	r3, [pc, #136]	; (80031b4 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	3301      	adds	r3, #1
 8003130:	4a20      	ldr	r2, [pc, #128]	; (80031b4 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8003132:	6013      	str	r3, [r2, #0]
 8003134:	4b1f      	ldr	r3, [pc, #124]	; (80031b4 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b01      	cmp	r3, #1
 800313a:	bf0c      	ite	eq
 800313c:	2301      	moveq	r3, #1
 800313e:	2300      	movne	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <_Z41__static_initialization_and_destruction_0ii+0xec>
 8003146:	481c      	ldr	r0, [pc, #112]	; (80031b8 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8003148:	f7fe ff2e 	bl	8001fa8 <_ZN13BNOControllerC1Ev>
 800314c:	bf00      	nop
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	20000554 	.word	0x20000554
 8003158:	41d9c6a8 	.word	0x41d9c6a8
 800315c:	bbc41229 	.word	0xbbc41229
 8003160:	41c07d56 	.word	0x41c07d56
 8003164:	3e356a7b 	.word	0x3e356a7b
 8003168:	20000294 	.word	0x20000294
 800316c:	20000558 	.word	0x20000558
 8003170:	41ca5d98 	.word	0x41ca5d98
 8003174:	bbd4f769 	.word	0xbbd4f769
 8003178:	41b42eb2 	.word	0x41b42eb2
 800317c:	3e360957 	.word	0x3e360957
 8003180:	20000320 	.word	0x20000320
 8003184:	2000055c 	.word	0x2000055c
 8003188:	41c84433 	.word	0x41c84433
 800318c:	bbd5b86e 	.word	0xbbd5b86e
 8003190:	41b10a72 	.word	0x41b10a72
 8003194:	3e34a409 	.word	0x3e34a409
 8003198:	200003ac 	.word	0x200003ac
 800319c:	20000560 	.word	0x20000560
 80031a0:	41c3d917 	.word	0x41c3d917
 80031a4:	bbf7af0e 	.word	0xbbf7af0e
 80031a8:	41c41d15 	.word	0x41c41d15
 80031ac:	3e4c62a2 	.word	0x3e4c62a2
 80031b0:	20000438 	.word	0x20000438
 80031b4:	20000564 	.word	0x20000564
 80031b8:	200004c4 	.word	0x200004c4

080031bc <_GLOBAL__sub_I_hi2c1>:
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
 80031c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80031c4:	2001      	movs	r0, #1
 80031c6:	f7ff ff4b 	bl	8003060 <_Z41__static_initialization_and_destruction_0ii>
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80031d2:	4b15      	ldr	r3, [pc, #84]	; (8003228 <HAL_MspInit+0x5c>)
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	4a14      	ldr	r2, [pc, #80]	; (8003228 <HAL_MspInit+0x5c>)
 80031d8:	f043 0301 	orr.w	r3, r3, #1
 80031dc:	6193      	str	r3, [r2, #24]
 80031de:	4b12      	ldr	r3, [pc, #72]	; (8003228 <HAL_MspInit+0x5c>)
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	60bb      	str	r3, [r7, #8]
 80031e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031ea:	4b0f      	ldr	r3, [pc, #60]	; (8003228 <HAL_MspInit+0x5c>)
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	4a0e      	ldr	r2, [pc, #56]	; (8003228 <HAL_MspInit+0x5c>)
 80031f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f4:	61d3      	str	r3, [r2, #28]
 80031f6:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <HAL_MspInit+0x5c>)
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fe:	607b      	str	r3, [r7, #4]
 8003200:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003202:	4b0a      	ldr	r3, [pc, #40]	; (800322c <HAL_MspInit+0x60>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	4a04      	ldr	r2, [pc, #16]	; (800322c <HAL_MspInit+0x60>)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800321e:	bf00      	nop
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr
 8003228:	40021000 	.word	0x40021000
 800322c:	40010000 	.word	0x40010000

08003230 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003238:	f107 0310 	add.w	r3, r7, #16
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	605a      	str	r2, [r3, #4]
 8003242:	609a      	str	r2, [r3, #8]
 8003244:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a15      	ldr	r2, [pc, #84]	; (80032a0 <HAL_I2C_MspInit+0x70>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d123      	bne.n	8003298 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003250:	4b14      	ldr	r3, [pc, #80]	; (80032a4 <HAL_I2C_MspInit+0x74>)
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	4a13      	ldr	r2, [pc, #76]	; (80032a4 <HAL_I2C_MspInit+0x74>)
 8003256:	f043 0308 	orr.w	r3, r3, #8
 800325a:	6193      	str	r3, [r2, #24]
 800325c:	4b11      	ldr	r3, [pc, #68]	; (80032a4 <HAL_I2C_MspInit+0x74>)
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	f003 0308 	and.w	r3, r3, #8
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003268:	23c0      	movs	r3, #192	; 0xc0
 800326a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800326c:	2312      	movs	r3, #18
 800326e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003270:	2303      	movs	r3, #3
 8003272:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003274:	f107 0310 	add.w	r3, r7, #16
 8003278:	4619      	mov	r1, r3
 800327a:	480b      	ldr	r0, [pc, #44]	; (80032a8 <HAL_I2C_MspInit+0x78>)
 800327c:	f000 fbb0 	bl	80039e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003280:	4b08      	ldr	r3, [pc, #32]	; (80032a4 <HAL_I2C_MspInit+0x74>)
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	4a07      	ldr	r2, [pc, #28]	; (80032a4 <HAL_I2C_MspInit+0x74>)
 8003286:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800328a:	61d3      	str	r3, [r2, #28]
 800328c:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <HAL_I2C_MspInit+0x74>)
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003294:	60bb      	str	r3, [r7, #8]
 8003296:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003298:	bf00      	nop
 800329a:	3720      	adds	r7, #32
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40005400 	.word	0x40005400
 80032a4:	40021000 	.word	0x40021000
 80032a8:	40010c00 	.word	0x40010c00

080032ac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a12      	ldr	r2, [pc, #72]	; (8003304 <HAL_TIM_PWM_MspInit+0x58>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d10c      	bne.n	80032d8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80032be:	4b12      	ldr	r3, [pc, #72]	; (8003308 <HAL_TIM_PWM_MspInit+0x5c>)
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	4a11      	ldr	r2, [pc, #68]	; (8003308 <HAL_TIM_PWM_MspInit+0x5c>)
 80032c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032c8:	6193      	str	r3, [r2, #24]
 80032ca:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <HAL_TIM_PWM_MspInit+0x5c>)
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80032d6:	e010      	b.n	80032fa <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a0b      	ldr	r2, [pc, #44]	; (800330c <HAL_TIM_PWM_MspInit+0x60>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d10b      	bne.n	80032fa <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032e2:	4b09      	ldr	r3, [pc, #36]	; (8003308 <HAL_TIM_PWM_MspInit+0x5c>)
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	4a08      	ldr	r2, [pc, #32]	; (8003308 <HAL_TIM_PWM_MspInit+0x5c>)
 80032e8:	f043 0302 	orr.w	r3, r3, #2
 80032ec:	61d3      	str	r3, [r2, #28]
 80032ee:	4b06      	ldr	r3, [pc, #24]	; (8003308 <HAL_TIM_PWM_MspInit+0x5c>)
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	60bb      	str	r3, [r7, #8]
 80032f8:	68bb      	ldr	r3, [r7, #8]
}
 80032fa:	bf00      	nop
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr
 8003304:	40012c00 	.word	0x40012c00
 8003308:	40021000 	.word	0x40021000
 800330c:	40000400 	.word	0x40000400

08003310 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08a      	sub	sp, #40	; 0x28
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003318:	f107 0318 	add.w	r3, r7, #24
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	605a      	str	r2, [r3, #4]
 8003322:	609a      	str	r2, [r3, #8]
 8003324:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a2b      	ldr	r2, [pc, #172]	; (80033d8 <HAL_TIM_MspPostInit+0xc8>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d119      	bne.n	8003364 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003330:	4b2a      	ldr	r3, [pc, #168]	; (80033dc <HAL_TIM_MspPostInit+0xcc>)
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	4a29      	ldr	r2, [pc, #164]	; (80033dc <HAL_TIM_MspPostInit+0xcc>)
 8003336:	f043 0304 	orr.w	r3, r3, #4
 800333a:	6193      	str	r3, [r2, #24]
 800333c:	4b27      	ldr	r3, [pc, #156]	; (80033dc <HAL_TIM_MspPostInit+0xcc>)
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	617b      	str	r3, [r7, #20]
 8003346:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003348:	f44f 7380 	mov.w	r3, #256	; 0x100
 800334c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334e:	2302      	movs	r3, #2
 8003350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003352:	2302      	movs	r3, #2
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003356:	f107 0318 	add.w	r3, r7, #24
 800335a:	4619      	mov	r1, r3
 800335c:	4820      	ldr	r0, [pc, #128]	; (80033e0 <HAL_TIM_MspPostInit+0xd0>)
 800335e:	f000 fb3f 	bl	80039e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003362:	e034      	b.n	80033ce <HAL_TIM_MspPostInit+0xbe>
  else if(htim->Instance==TIM3)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a1e      	ldr	r2, [pc, #120]	; (80033e4 <HAL_TIM_MspPostInit+0xd4>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d12f      	bne.n	80033ce <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800336e:	4b1b      	ldr	r3, [pc, #108]	; (80033dc <HAL_TIM_MspPostInit+0xcc>)
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	4a1a      	ldr	r2, [pc, #104]	; (80033dc <HAL_TIM_MspPostInit+0xcc>)
 8003374:	f043 0304 	orr.w	r3, r3, #4
 8003378:	6193      	str	r3, [r2, #24]
 800337a:	4b18      	ldr	r3, [pc, #96]	; (80033dc <HAL_TIM_MspPostInit+0xcc>)
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	f003 0304 	and.w	r3, r3, #4
 8003382:	613b      	str	r3, [r7, #16]
 8003384:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003386:	4b15      	ldr	r3, [pc, #84]	; (80033dc <HAL_TIM_MspPostInit+0xcc>)
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	4a14      	ldr	r2, [pc, #80]	; (80033dc <HAL_TIM_MspPostInit+0xcc>)
 800338c:	f043 0308 	orr.w	r3, r3, #8
 8003390:	6193      	str	r3, [r2, #24]
 8003392:	4b12      	ldr	r3, [pc, #72]	; (80033dc <HAL_TIM_MspPostInit+0xcc>)
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800339e:	23c0      	movs	r3, #192	; 0xc0
 80033a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a2:	2302      	movs	r3, #2
 80033a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a6:	2302      	movs	r3, #2
 80033a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033aa:	f107 0318 	add.w	r3, r7, #24
 80033ae:	4619      	mov	r1, r3
 80033b0:	480b      	ldr	r0, [pc, #44]	; (80033e0 <HAL_TIM_MspPostInit+0xd0>)
 80033b2:	f000 fb15 	bl	80039e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80033b6:	2302      	movs	r3, #2
 80033b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ba:	2302      	movs	r3, #2
 80033bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033be:	2302      	movs	r3, #2
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033c2:	f107 0318 	add.w	r3, r7, #24
 80033c6:	4619      	mov	r1, r3
 80033c8:	4807      	ldr	r0, [pc, #28]	; (80033e8 <HAL_TIM_MspPostInit+0xd8>)
 80033ca:	f000 fb09 	bl	80039e0 <HAL_GPIO_Init>
}
 80033ce:	bf00      	nop
 80033d0:	3728      	adds	r7, #40	; 0x28
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40012c00 	.word	0x40012c00
 80033dc:	40021000 	.word	0x40021000
 80033e0:	40010800 	.word	0x40010800
 80033e4:	40000400 	.word	0x40000400
 80033e8:	40010c00 	.word	0x40010c00

080033ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f4:	f107 0310 	add.w	r3, r7, #16
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	605a      	str	r2, [r3, #4]
 80033fe:	609a      	str	r2, [r3, #8]
 8003400:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a1c      	ldr	r2, [pc, #112]	; (8003478 <HAL_UART_MspInit+0x8c>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d131      	bne.n	8003470 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800340c:	4b1b      	ldr	r3, [pc, #108]	; (800347c <HAL_UART_MspInit+0x90>)
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	4a1a      	ldr	r2, [pc, #104]	; (800347c <HAL_UART_MspInit+0x90>)
 8003412:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003416:	6193      	str	r3, [r2, #24]
 8003418:	4b18      	ldr	r3, [pc, #96]	; (800347c <HAL_UART_MspInit+0x90>)
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003424:	4b15      	ldr	r3, [pc, #84]	; (800347c <HAL_UART_MspInit+0x90>)
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	4a14      	ldr	r2, [pc, #80]	; (800347c <HAL_UART_MspInit+0x90>)
 800342a:	f043 0304 	orr.w	r3, r3, #4
 800342e:	6193      	str	r3, [r2, #24]
 8003430:	4b12      	ldr	r3, [pc, #72]	; (800347c <HAL_UART_MspInit+0x90>)
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800343c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003440:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003442:	2302      	movs	r3, #2
 8003444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003446:	2303      	movs	r3, #3
 8003448:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800344a:	f107 0310 	add.w	r3, r7, #16
 800344e:	4619      	mov	r1, r3
 8003450:	480b      	ldr	r0, [pc, #44]	; (8003480 <HAL_UART_MspInit+0x94>)
 8003452:	f000 fac5 	bl	80039e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800345a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800345c:	2300      	movs	r3, #0
 800345e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003460:	2300      	movs	r3, #0
 8003462:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003464:	f107 0310 	add.w	r3, r7, #16
 8003468:	4619      	mov	r1, r3
 800346a:	4805      	ldr	r0, [pc, #20]	; (8003480 <HAL_UART_MspInit+0x94>)
 800346c:	f000 fab8 	bl	80039e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003470:	bf00      	nop
 8003472:	3720      	adds	r7, #32
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40013800 	.word	0x40013800
 800347c:	40021000 	.word	0x40021000
 8003480:	40010800 	.word	0x40010800

08003484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003488:	e7fe      	b.n	8003488 <NMI_Handler+0x4>

0800348a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800348a:	b480      	push	{r7}
 800348c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800348e:	e7fe      	b.n	800348e <HardFault_Handler+0x4>

08003490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003494:	e7fe      	b.n	8003494 <MemManage_Handler+0x4>

08003496 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003496:	b480      	push	{r7}
 8003498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800349a:	e7fe      	b.n	800349a <BusFault_Handler+0x4>

0800349c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034a0:	e7fe      	b.n	80034a0 <UsageFault_Handler+0x4>

080034a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034a2:	b480      	push	{r7}
 80034a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034a6:	bf00      	nop
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr

080034ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034ae:	b480      	push	{r7}
 80034b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034b2:	bf00      	nop
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr

080034ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034ba:	b480      	push	{r7}
 80034bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034be:	bf00      	nop
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bc80      	pop	{r7}
 80034c4:	4770      	bx	lr

080034c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034ca:	f000 f93b 	bl	8003744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034ce:	bf00      	nop
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80034d6:	2001      	movs	r0, #1
 80034d8:	f000 fc1e 	bl	8003d18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80034dc:	bf00      	nop
 80034de:	bd80      	pop	{r7, pc}

080034e0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80034e4:	2002      	movs	r0, #2
 80034e6:	f000 fc17 	bl	8003d18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80034ea:	bf00      	nop
 80034ec:	bd80      	pop	{r7, pc}

080034ee <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80034f2:	2004      	movs	r0, #4
 80034f4:	f000 fc10 	bl	8003d18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80034f8:	bf00      	nop
 80034fa:	bd80      	pop	{r7, pc}

080034fc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003500:	2008      	movs	r0, #8
 8003502:	f000 fc09 	bl	8003d18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003506:	bf00      	nop
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003510:	4802      	ldr	r0, [pc, #8]	; (800351c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003512:	f001 ff1a 	bl	800534a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003516:	bf00      	nop
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	200014cc 	.word	0x200014cc

08003520 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800352c:	2300      	movs	r3, #0
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	e00a      	b.n	8003548 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003532:	f3af 8000 	nop.w
 8003536:	4601      	mov	r1, r0
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	1c5a      	adds	r2, r3, #1
 800353c:	60ba      	str	r2, [r7, #8]
 800353e:	b2ca      	uxtb	r2, r1
 8003540:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	3301      	adds	r3, #1
 8003546:	617b      	str	r3, [r7, #20]
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	429a      	cmp	r2, r3
 800354e:	dbf0      	blt.n	8003532 <_read+0x12>
	}

return len;
 8003550:	687b      	ldr	r3, [r7, #4]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b086      	sub	sp, #24
 800355e:	af00      	add	r7, sp, #0
 8003560:	60f8      	str	r0, [r7, #12]
 8003562:	60b9      	str	r1, [r7, #8]
 8003564:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003566:	2300      	movs	r3, #0
 8003568:	617b      	str	r3, [r7, #20]
 800356a:	e009      	b.n	8003580 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	1c5a      	adds	r2, r3, #1
 8003570:	60ba      	str	r2, [r7, #8]
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	3301      	adds	r3, #1
 800357e:	617b      	str	r3, [r7, #20]
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	429a      	cmp	r2, r3
 8003586:	dbf1      	blt.n	800356c <_write+0x12>
	}
	return len;
 8003588:	687b      	ldr	r3, [r7, #4]
}
 800358a:	4618      	mov	r0, r3
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <_close>:

int _close(int file)
{
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
	return -1;
 800359a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800359e:	4618      	mov	r0, r3
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bc80      	pop	{r7}
 80035a6:	4770      	bx	lr

080035a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035b8:	605a      	str	r2, [r3, #4]
	return 0;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bc80      	pop	{r7}
 80035c4:	4770      	bx	lr

080035c6 <_isatty>:

int _isatty(int file)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
	return 1;
 80035ce:	2301      	movs	r3, #1
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bc80      	pop	{r7}
 80035d8:	4770      	bx	lr

080035da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035da:	b480      	push	{r7}
 80035dc:	b085      	sub	sp, #20
 80035de:	af00      	add	r7, sp, #0
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	607a      	str	r2, [r7, #4]
	return 0;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bc80      	pop	{r7}
 80035f0:	4770      	bx	lr
	...

080035f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035fc:	4a14      	ldr	r2, [pc, #80]	; (8003650 <_sbrk+0x5c>)
 80035fe:	4b15      	ldr	r3, [pc, #84]	; (8003654 <_sbrk+0x60>)
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003608:	4b13      	ldr	r3, [pc, #76]	; (8003658 <_sbrk+0x64>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d102      	bne.n	8003616 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003610:	4b11      	ldr	r3, [pc, #68]	; (8003658 <_sbrk+0x64>)
 8003612:	4a12      	ldr	r2, [pc, #72]	; (800365c <_sbrk+0x68>)
 8003614:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003616:	4b10      	ldr	r3, [pc, #64]	; (8003658 <_sbrk+0x64>)
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4413      	add	r3, r2
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	429a      	cmp	r2, r3
 8003622:	d207      	bcs.n	8003634 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003624:	f009 ff66 	bl	800d4f4 <__errno>
 8003628:	4603      	mov	r3, r0
 800362a:	220c      	movs	r2, #12
 800362c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800362e:	f04f 33ff 	mov.w	r3, #4294967295
 8003632:	e009      	b.n	8003648 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003634:	4b08      	ldr	r3, [pc, #32]	; (8003658 <_sbrk+0x64>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800363a:	4b07      	ldr	r3, [pc, #28]	; (8003658 <_sbrk+0x64>)
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4413      	add	r3, r2
 8003642:	4a05      	ldr	r2, [pc, #20]	; (8003658 <_sbrk+0x64>)
 8003644:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003646:	68fb      	ldr	r3, [r7, #12]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	20005000 	.word	0x20005000
 8003654:	00000400 	.word	0x00000400
 8003658:	20000604 	.word	0x20000604
 800365c:	200017b8 	.word	0x200017b8

08003660 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003664:	bf00      	nop
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr

0800366c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800366c:	f7ff fff8 	bl	8003660 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003670:	480b      	ldr	r0, [pc, #44]	; (80036a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003672:	490c      	ldr	r1, [pc, #48]	; (80036a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003674:	4a0c      	ldr	r2, [pc, #48]	; (80036a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003678:	e002      	b.n	8003680 <LoopCopyDataInit>

0800367a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800367a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800367c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800367e:	3304      	adds	r3, #4

08003680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003684:	d3f9      	bcc.n	800367a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003686:	4a09      	ldr	r2, [pc, #36]	; (80036ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003688:	4c09      	ldr	r4, [pc, #36]	; (80036b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800368a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800368c:	e001      	b.n	8003692 <LoopFillZerobss>

0800368e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800368e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003690:	3204      	adds	r2, #4

08003692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003694:	d3fb      	bcc.n	800368e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003696:	f009 ff33 	bl	800d500 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800369a:	f7ff f91b 	bl	80028d4 <main>
  bx lr
 800369e:	4770      	bx	lr
  ldr r0, =_sdata
 80036a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036a4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80036a8:	0800ed9c 	.word	0x0800ed9c
  ldr r2, =_sbss
 80036ac:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80036b0:	200017b4 	.word	0x200017b4

080036b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80036b4:	e7fe      	b.n	80036b4 <ADC1_2_IRQHandler>
	...

080036b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036bc:	4b08      	ldr	r3, [pc, #32]	; (80036e0 <HAL_Init+0x28>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a07      	ldr	r2, [pc, #28]	; (80036e0 <HAL_Init+0x28>)
 80036c2:	f043 0310 	orr.w	r3, r3, #16
 80036c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036c8:	2003      	movs	r0, #3
 80036ca:	f000 f947 	bl	800395c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036ce:	200f      	movs	r0, #15
 80036d0:	f000 f808 	bl	80036e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036d4:	f7ff fd7a 	bl	80031cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40022000 	.word	0x40022000

080036e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036ec:	4b12      	ldr	r3, [pc, #72]	; (8003738 <HAL_InitTick+0x54>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	4b12      	ldr	r3, [pc, #72]	; (800373c <HAL_InitTick+0x58>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	4619      	mov	r1, r3
 80036f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80036fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003702:	4618      	mov	r0, r3
 8003704:	f000 f95f 	bl	80039c6 <HAL_SYSTICK_Config>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e00e      	b.n	8003730 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b0f      	cmp	r3, #15
 8003716:	d80a      	bhi.n	800372e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003718:	2200      	movs	r2, #0
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	f04f 30ff 	mov.w	r0, #4294967295
 8003720:	f000 f927 	bl	8003972 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003724:	4a06      	ldr	r2, [pc, #24]	; (8003740 <HAL_InitTick+0x5c>)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	e000      	b.n	8003730 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
}
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	20000008 	.word	0x20000008
 800373c:	20000010 	.word	0x20000010
 8003740:	2000000c 	.word	0x2000000c

08003744 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003748:	4b05      	ldr	r3, [pc, #20]	; (8003760 <HAL_IncTick+0x1c>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	461a      	mov	r2, r3
 800374e:	4b05      	ldr	r3, [pc, #20]	; (8003764 <HAL_IncTick+0x20>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4413      	add	r3, r2
 8003754:	4a03      	ldr	r2, [pc, #12]	; (8003764 <HAL_IncTick+0x20>)
 8003756:	6013      	str	r3, [r2, #0]
}
 8003758:	bf00      	nop
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr
 8003760:	20000010 	.word	0x20000010
 8003764:	20000834 	.word	0x20000834

08003768 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  return uwTick;
 800376c:	4b02      	ldr	r3, [pc, #8]	; (8003778 <HAL_GetTick+0x10>)
 800376e:	681b      	ldr	r3, [r3, #0]
}
 8003770:	4618      	mov	r0, r3
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr
 8003778:	20000834 	.word	0x20000834

0800377c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003784:	f7ff fff0 	bl	8003768 <HAL_GetTick>
 8003788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003794:	d005      	beq.n	80037a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003796:	4b0a      	ldr	r3, [pc, #40]	; (80037c0 <HAL_Delay+0x44>)
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4413      	add	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037a2:	bf00      	nop
 80037a4:	f7ff ffe0 	bl	8003768 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d8f7      	bhi.n	80037a4 <HAL_Delay+0x28>
  {
  }
}
 80037b4:	bf00      	nop
 80037b6:	bf00      	nop
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20000010 	.word	0x20000010

080037c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037d4:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <__NVIC_SetPriorityGrouping+0x44>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037e0:	4013      	ands	r3, r2
 80037e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037f6:	4a04      	ldr	r2, [pc, #16]	; (8003808 <__NVIC_SetPriorityGrouping+0x44>)
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	60d3      	str	r3, [r2, #12]
}
 80037fc:	bf00      	nop
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	bc80      	pop	{r7}
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	e000ed00 	.word	0xe000ed00

0800380c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003810:	4b04      	ldr	r3, [pc, #16]	; (8003824 <__NVIC_GetPriorityGrouping+0x18>)
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	0a1b      	lsrs	r3, r3, #8
 8003816:	f003 0307 	and.w	r3, r3, #7
}
 800381a:	4618      	mov	r0, r3
 800381c:	46bd      	mov	sp, r7
 800381e:	bc80      	pop	{r7}
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	e000ed00 	.word	0xe000ed00

08003828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	4603      	mov	r3, r0
 8003830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003836:	2b00      	cmp	r3, #0
 8003838:	db0b      	blt.n	8003852 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800383a:	79fb      	ldrb	r3, [r7, #7]
 800383c:	f003 021f 	and.w	r2, r3, #31
 8003840:	4906      	ldr	r1, [pc, #24]	; (800385c <__NVIC_EnableIRQ+0x34>)
 8003842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003846:	095b      	lsrs	r3, r3, #5
 8003848:	2001      	movs	r0, #1
 800384a:	fa00 f202 	lsl.w	r2, r0, r2
 800384e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr
 800385c:	e000e100 	.word	0xe000e100

08003860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	6039      	str	r1, [r7, #0]
 800386a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800386c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003870:	2b00      	cmp	r3, #0
 8003872:	db0a      	blt.n	800388a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	b2da      	uxtb	r2, r3
 8003878:	490c      	ldr	r1, [pc, #48]	; (80038ac <__NVIC_SetPriority+0x4c>)
 800387a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387e:	0112      	lsls	r2, r2, #4
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	440b      	add	r3, r1
 8003884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003888:	e00a      	b.n	80038a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	b2da      	uxtb	r2, r3
 800388e:	4908      	ldr	r1, [pc, #32]	; (80038b0 <__NVIC_SetPriority+0x50>)
 8003890:	79fb      	ldrb	r3, [r7, #7]
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	3b04      	subs	r3, #4
 8003898:	0112      	lsls	r2, r2, #4
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	440b      	add	r3, r1
 800389e:	761a      	strb	r2, [r3, #24]
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bc80      	pop	{r7}
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	e000e100 	.word	0xe000e100
 80038b0:	e000ed00 	.word	0xe000ed00

080038b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b089      	sub	sp, #36	; 0x24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f1c3 0307 	rsb	r3, r3, #7
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	bf28      	it	cs
 80038d2:	2304      	movcs	r3, #4
 80038d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	3304      	adds	r3, #4
 80038da:	2b06      	cmp	r3, #6
 80038dc:	d902      	bls.n	80038e4 <NVIC_EncodePriority+0x30>
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	3b03      	subs	r3, #3
 80038e2:	e000      	b.n	80038e6 <NVIC_EncodePriority+0x32>
 80038e4:	2300      	movs	r3, #0
 80038e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e8:	f04f 32ff 	mov.w	r2, #4294967295
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	43da      	mvns	r2, r3
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	401a      	ands	r2, r3
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	fa01 f303 	lsl.w	r3, r1, r3
 8003906:	43d9      	mvns	r1, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800390c:	4313      	orrs	r3, r2
         );
}
 800390e:	4618      	mov	r0, r3
 8003910:	3724      	adds	r7, #36	; 0x24
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr

08003918 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3b01      	subs	r3, #1
 8003924:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003928:	d301      	bcc.n	800392e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800392a:	2301      	movs	r3, #1
 800392c:	e00f      	b.n	800394e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800392e:	4a0a      	ldr	r2, [pc, #40]	; (8003958 <SysTick_Config+0x40>)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3b01      	subs	r3, #1
 8003934:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003936:	210f      	movs	r1, #15
 8003938:	f04f 30ff 	mov.w	r0, #4294967295
 800393c:	f7ff ff90 	bl	8003860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003940:	4b05      	ldr	r3, [pc, #20]	; (8003958 <SysTick_Config+0x40>)
 8003942:	2200      	movs	r2, #0
 8003944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003946:	4b04      	ldr	r3, [pc, #16]	; (8003958 <SysTick_Config+0x40>)
 8003948:	2207      	movs	r2, #7
 800394a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	e000e010 	.word	0xe000e010

0800395c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7ff ff2d 	bl	80037c4 <__NVIC_SetPriorityGrouping>
}
 800396a:	bf00      	nop
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003972:	b580      	push	{r7, lr}
 8003974:	b086      	sub	sp, #24
 8003976:	af00      	add	r7, sp, #0
 8003978:	4603      	mov	r3, r0
 800397a:	60b9      	str	r1, [r7, #8]
 800397c:	607a      	str	r2, [r7, #4]
 800397e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003980:	2300      	movs	r3, #0
 8003982:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003984:	f7ff ff42 	bl	800380c <__NVIC_GetPriorityGrouping>
 8003988:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	68b9      	ldr	r1, [r7, #8]
 800398e:	6978      	ldr	r0, [r7, #20]
 8003990:	f7ff ff90 	bl	80038b4 <NVIC_EncodePriority>
 8003994:	4602      	mov	r2, r0
 8003996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800399a:	4611      	mov	r1, r2
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff ff5f 	bl	8003860 <__NVIC_SetPriority>
}
 80039a2:	bf00      	nop
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b082      	sub	sp, #8
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	4603      	mov	r3, r0
 80039b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff ff35 	bl	8003828 <__NVIC_EnableIRQ>
}
 80039be:	bf00      	nop
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b082      	sub	sp, #8
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7ff ffa2 	bl	8003918 <SysTick_Config>
 80039d4:	4603      	mov	r3, r0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
	...

080039e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b08b      	sub	sp, #44	; 0x2c
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039ea:	2300      	movs	r3, #0
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80039ee:	2300      	movs	r3, #0
 80039f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039f2:	e169      	b.n	8003cc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80039f4:	2201      	movs	r2, #1
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	69fa      	ldr	r2, [r7, #28]
 8003a04:	4013      	ands	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	f040 8158 	bne.w	8003cc2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	4a9a      	ldr	r2, [pc, #616]	; (8003c80 <HAL_GPIO_Init+0x2a0>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d05e      	beq.n	8003ada <HAL_GPIO_Init+0xfa>
 8003a1c:	4a98      	ldr	r2, [pc, #608]	; (8003c80 <HAL_GPIO_Init+0x2a0>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d875      	bhi.n	8003b0e <HAL_GPIO_Init+0x12e>
 8003a22:	4a98      	ldr	r2, [pc, #608]	; (8003c84 <HAL_GPIO_Init+0x2a4>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d058      	beq.n	8003ada <HAL_GPIO_Init+0xfa>
 8003a28:	4a96      	ldr	r2, [pc, #600]	; (8003c84 <HAL_GPIO_Init+0x2a4>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d86f      	bhi.n	8003b0e <HAL_GPIO_Init+0x12e>
 8003a2e:	4a96      	ldr	r2, [pc, #600]	; (8003c88 <HAL_GPIO_Init+0x2a8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d052      	beq.n	8003ada <HAL_GPIO_Init+0xfa>
 8003a34:	4a94      	ldr	r2, [pc, #592]	; (8003c88 <HAL_GPIO_Init+0x2a8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d869      	bhi.n	8003b0e <HAL_GPIO_Init+0x12e>
 8003a3a:	4a94      	ldr	r2, [pc, #592]	; (8003c8c <HAL_GPIO_Init+0x2ac>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d04c      	beq.n	8003ada <HAL_GPIO_Init+0xfa>
 8003a40:	4a92      	ldr	r2, [pc, #584]	; (8003c8c <HAL_GPIO_Init+0x2ac>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d863      	bhi.n	8003b0e <HAL_GPIO_Init+0x12e>
 8003a46:	4a92      	ldr	r2, [pc, #584]	; (8003c90 <HAL_GPIO_Init+0x2b0>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d046      	beq.n	8003ada <HAL_GPIO_Init+0xfa>
 8003a4c:	4a90      	ldr	r2, [pc, #576]	; (8003c90 <HAL_GPIO_Init+0x2b0>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d85d      	bhi.n	8003b0e <HAL_GPIO_Init+0x12e>
 8003a52:	2b12      	cmp	r3, #18
 8003a54:	d82a      	bhi.n	8003aac <HAL_GPIO_Init+0xcc>
 8003a56:	2b12      	cmp	r3, #18
 8003a58:	d859      	bhi.n	8003b0e <HAL_GPIO_Init+0x12e>
 8003a5a:	a201      	add	r2, pc, #4	; (adr r2, 8003a60 <HAL_GPIO_Init+0x80>)
 8003a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a60:	08003adb 	.word	0x08003adb
 8003a64:	08003ab5 	.word	0x08003ab5
 8003a68:	08003ac7 	.word	0x08003ac7
 8003a6c:	08003b09 	.word	0x08003b09
 8003a70:	08003b0f 	.word	0x08003b0f
 8003a74:	08003b0f 	.word	0x08003b0f
 8003a78:	08003b0f 	.word	0x08003b0f
 8003a7c:	08003b0f 	.word	0x08003b0f
 8003a80:	08003b0f 	.word	0x08003b0f
 8003a84:	08003b0f 	.word	0x08003b0f
 8003a88:	08003b0f 	.word	0x08003b0f
 8003a8c:	08003b0f 	.word	0x08003b0f
 8003a90:	08003b0f 	.word	0x08003b0f
 8003a94:	08003b0f 	.word	0x08003b0f
 8003a98:	08003b0f 	.word	0x08003b0f
 8003a9c:	08003b0f 	.word	0x08003b0f
 8003aa0:	08003b0f 	.word	0x08003b0f
 8003aa4:	08003abd 	.word	0x08003abd
 8003aa8:	08003ad1 	.word	0x08003ad1
 8003aac:	4a79      	ldr	r2, [pc, #484]	; (8003c94 <HAL_GPIO_Init+0x2b4>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d013      	beq.n	8003ada <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003ab2:	e02c      	b.n	8003b0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	623b      	str	r3, [r7, #32]
          break;
 8003aba:	e029      	b.n	8003b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	623b      	str	r3, [r7, #32]
          break;
 8003ac4:	e024      	b.n	8003b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	3308      	adds	r3, #8
 8003acc:	623b      	str	r3, [r7, #32]
          break;
 8003ace:	e01f      	b.n	8003b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	330c      	adds	r3, #12
 8003ad6:	623b      	str	r3, [r7, #32]
          break;
 8003ad8:	e01a      	b.n	8003b10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d102      	bne.n	8003ae8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003ae2:	2304      	movs	r3, #4
 8003ae4:	623b      	str	r3, [r7, #32]
          break;
 8003ae6:	e013      	b.n	8003b10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d105      	bne.n	8003afc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003af0:	2308      	movs	r3, #8
 8003af2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69fa      	ldr	r2, [r7, #28]
 8003af8:	611a      	str	r2, [r3, #16]
          break;
 8003afa:	e009      	b.n	8003b10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003afc:	2308      	movs	r3, #8
 8003afe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	69fa      	ldr	r2, [r7, #28]
 8003b04:	615a      	str	r2, [r3, #20]
          break;
 8003b06:	e003      	b.n	8003b10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	623b      	str	r3, [r7, #32]
          break;
 8003b0c:	e000      	b.n	8003b10 <HAL_GPIO_Init+0x130>
          break;
 8003b0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	2bff      	cmp	r3, #255	; 0xff
 8003b14:	d801      	bhi.n	8003b1a <HAL_GPIO_Init+0x13a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	e001      	b.n	8003b1e <HAL_GPIO_Init+0x13e>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	2bff      	cmp	r3, #255	; 0xff
 8003b24:	d802      	bhi.n	8003b2c <HAL_GPIO_Init+0x14c>
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	e002      	b.n	8003b32 <HAL_GPIO_Init+0x152>
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	3b08      	subs	r3, #8
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	210f      	movs	r1, #15
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b40:	43db      	mvns	r3, r3
 8003b42:	401a      	ands	r2, r3
 8003b44:	6a39      	ldr	r1, [r7, #32]
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	fa01 f303 	lsl.w	r3, r1, r3
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 80b1 	beq.w	8003cc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b60:	4b4d      	ldr	r3, [pc, #308]	; (8003c98 <HAL_GPIO_Init+0x2b8>)
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	4a4c      	ldr	r2, [pc, #304]	; (8003c98 <HAL_GPIO_Init+0x2b8>)
 8003b66:	f043 0301 	orr.w	r3, r3, #1
 8003b6a:	6193      	str	r3, [r2, #24]
 8003b6c:	4b4a      	ldr	r3, [pc, #296]	; (8003c98 <HAL_GPIO_Init+0x2b8>)
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	60bb      	str	r3, [r7, #8]
 8003b76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b78:	4a48      	ldr	r2, [pc, #288]	; (8003c9c <HAL_GPIO_Init+0x2bc>)
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	089b      	lsrs	r3, r3, #2
 8003b7e:	3302      	adds	r3, #2
 8003b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	f003 0303 	and.w	r3, r3, #3
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	220f      	movs	r2, #15
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	43db      	mvns	r3, r3
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a40      	ldr	r2, [pc, #256]	; (8003ca0 <HAL_GPIO_Init+0x2c0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d013      	beq.n	8003bcc <HAL_GPIO_Init+0x1ec>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a3f      	ldr	r2, [pc, #252]	; (8003ca4 <HAL_GPIO_Init+0x2c4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00d      	beq.n	8003bc8 <HAL_GPIO_Init+0x1e8>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a3e      	ldr	r2, [pc, #248]	; (8003ca8 <HAL_GPIO_Init+0x2c8>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d007      	beq.n	8003bc4 <HAL_GPIO_Init+0x1e4>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a3d      	ldr	r2, [pc, #244]	; (8003cac <HAL_GPIO_Init+0x2cc>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d101      	bne.n	8003bc0 <HAL_GPIO_Init+0x1e0>
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e006      	b.n	8003bce <HAL_GPIO_Init+0x1ee>
 8003bc0:	2304      	movs	r3, #4
 8003bc2:	e004      	b.n	8003bce <HAL_GPIO_Init+0x1ee>
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	e002      	b.n	8003bce <HAL_GPIO_Init+0x1ee>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e000      	b.n	8003bce <HAL_GPIO_Init+0x1ee>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd0:	f002 0203 	and.w	r2, r2, #3
 8003bd4:	0092      	lsls	r2, r2, #2
 8003bd6:	4093      	lsls	r3, r2
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003bde:	492f      	ldr	r1, [pc, #188]	; (8003c9c <HAL_GPIO_Init+0x2bc>)
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	089b      	lsrs	r3, r3, #2
 8003be4:	3302      	adds	r3, #2
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d006      	beq.n	8003c06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003bf8:	4b2d      	ldr	r3, [pc, #180]	; (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	492c      	ldr	r1, [pc, #176]	; (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	608b      	str	r3, [r1, #8]
 8003c04:	e006      	b.n	8003c14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003c06:	4b2a      	ldr	r3, [pc, #168]	; (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c08:	689a      	ldr	r2, [r3, #8]
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	4928      	ldr	r1, [pc, #160]	; (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c10:	4013      	ands	r3, r2
 8003c12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d006      	beq.n	8003c2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003c20:	4b23      	ldr	r3, [pc, #140]	; (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	4922      	ldr	r1, [pc, #136]	; (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	60cb      	str	r3, [r1, #12]
 8003c2c:	e006      	b.n	8003c3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003c2e:	4b20      	ldr	r3, [pc, #128]	; (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	43db      	mvns	r3, r3
 8003c36:	491e      	ldr	r1, [pc, #120]	; (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d006      	beq.n	8003c56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c48:	4b19      	ldr	r3, [pc, #100]	; (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	4918      	ldr	r1, [pc, #96]	; (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	604b      	str	r3, [r1, #4]
 8003c54:	e006      	b.n	8003c64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c56:	4b16      	ldr	r3, [pc, #88]	; (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	4914      	ldr	r1, [pc, #80]	; (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c60:	4013      	ands	r3, r2
 8003c62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d021      	beq.n	8003cb4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c70:	4b0f      	ldr	r3, [pc, #60]	; (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	490e      	ldr	r1, [pc, #56]	; (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	600b      	str	r3, [r1, #0]
 8003c7c:	e021      	b.n	8003cc2 <HAL_GPIO_Init+0x2e2>
 8003c7e:	bf00      	nop
 8003c80:	10320000 	.word	0x10320000
 8003c84:	10310000 	.word	0x10310000
 8003c88:	10220000 	.word	0x10220000
 8003c8c:	10210000 	.word	0x10210000
 8003c90:	10120000 	.word	0x10120000
 8003c94:	10110000 	.word	0x10110000
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	40010000 	.word	0x40010000
 8003ca0:	40010800 	.word	0x40010800
 8003ca4:	40010c00 	.word	0x40010c00
 8003ca8:	40011000 	.word	0x40011000
 8003cac:	40011400 	.word	0x40011400
 8003cb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003cb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <HAL_GPIO_Init+0x304>)
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	4909      	ldr	r1, [pc, #36]	; (8003ce4 <HAL_GPIO_Init+0x304>)
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f47f ae8e 	bne.w	80039f4 <HAL_GPIO_Init+0x14>
  }
}
 8003cd8:	bf00      	nop
 8003cda:	bf00      	nop
 8003cdc:	372c      	adds	r7, #44	; 0x2c
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr
 8003ce4:	40010400 	.word	0x40010400

08003ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	807b      	strh	r3, [r7, #2]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cf8:	787b      	ldrb	r3, [r7, #1]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cfe:	887a      	ldrh	r2, [r7, #2]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003d04:	e003      	b.n	8003d0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d06:	887b      	ldrh	r3, [r7, #2]
 8003d08:	041a      	lsls	r2, r3, #16
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	611a      	str	r2, [r3, #16]
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bc80      	pop	{r7}
 8003d16:	4770      	bx	lr

08003d18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d22:	4b08      	ldr	r3, [pc, #32]	; (8003d44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d24:	695a      	ldr	r2, [r3, #20]
 8003d26:	88fb      	ldrh	r3, [r7, #6]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d006      	beq.n	8003d3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d2e:	4a05      	ldr	r2, [pc, #20]	; (8003d44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d30:	88fb      	ldrh	r3, [r7, #6]
 8003d32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d34:	88fb      	ldrh	r3, [r7, #6]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fe fd94 	bl	8002864 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d3c:	bf00      	nop
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40010400 	.word	0x40010400

08003d48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e12b      	b.n	8003fb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7ff fa5e 	bl	8003230 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2224      	movs	r2, #36	; 0x24
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0201 	bic.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003daa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003dac:	f003 fadc 	bl	8007368 <HAL_RCC_GetPCLK1Freq>
 8003db0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	4a81      	ldr	r2, [pc, #516]	; (8003fbc <HAL_I2C_Init+0x274>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d807      	bhi.n	8003dcc <HAL_I2C_Init+0x84>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4a80      	ldr	r2, [pc, #512]	; (8003fc0 <HAL_I2C_Init+0x278>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	bf94      	ite	ls
 8003dc4:	2301      	movls	r3, #1
 8003dc6:	2300      	movhi	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	e006      	b.n	8003dda <HAL_I2C_Init+0x92>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4a7d      	ldr	r2, [pc, #500]	; (8003fc4 <HAL_I2C_Init+0x27c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	bf94      	ite	ls
 8003dd4:	2301      	movls	r3, #1
 8003dd6:	2300      	movhi	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e0e7      	b.n	8003fb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	4a78      	ldr	r2, [pc, #480]	; (8003fc8 <HAL_I2C_Init+0x280>)
 8003de6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dea:	0c9b      	lsrs	r3, r3, #18
 8003dec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	4a6a      	ldr	r2, [pc, #424]	; (8003fbc <HAL_I2C_Init+0x274>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d802      	bhi.n	8003e1c <HAL_I2C_Init+0xd4>
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	e009      	b.n	8003e30 <HAL_I2C_Init+0xe8>
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e22:	fb02 f303 	mul.w	r3, r2, r3
 8003e26:	4a69      	ldr	r2, [pc, #420]	; (8003fcc <HAL_I2C_Init+0x284>)
 8003e28:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2c:	099b      	lsrs	r3, r3, #6
 8003e2e:	3301      	adds	r3, #1
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6812      	ldr	r2, [r2, #0]
 8003e34:	430b      	orrs	r3, r1
 8003e36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	495c      	ldr	r1, [pc, #368]	; (8003fbc <HAL_I2C_Init+0x274>)
 8003e4c:	428b      	cmp	r3, r1
 8003e4e:	d819      	bhi.n	8003e84 <HAL_I2C_Init+0x13c>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	1e59      	subs	r1, r3, #1
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e5e:	1c59      	adds	r1, r3, #1
 8003e60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e64:	400b      	ands	r3, r1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <HAL_I2C_Init+0x138>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	1e59      	subs	r1, r3, #1
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e78:	3301      	adds	r3, #1
 8003e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e7e:	e051      	b.n	8003f24 <HAL_I2C_Init+0x1dc>
 8003e80:	2304      	movs	r3, #4
 8003e82:	e04f      	b.n	8003f24 <HAL_I2C_Init+0x1dc>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d111      	bne.n	8003eb0 <HAL_I2C_Init+0x168>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	1e58      	subs	r0, r3, #1
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6859      	ldr	r1, [r3, #4]
 8003e94:	460b      	mov	r3, r1
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	440b      	add	r3, r1
 8003e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	bf0c      	ite	eq
 8003ea8:	2301      	moveq	r3, #1
 8003eaa:	2300      	movne	r3, #0
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	e012      	b.n	8003ed6 <HAL_I2C_Init+0x18e>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	1e58      	subs	r0, r3, #1
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6859      	ldr	r1, [r3, #4]
 8003eb8:	460b      	mov	r3, r1
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	0099      	lsls	r1, r3, #2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	bf0c      	ite	eq
 8003ed0:	2301      	moveq	r3, #1
 8003ed2:	2300      	movne	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_I2C_Init+0x196>
 8003eda:	2301      	movs	r3, #1
 8003edc:	e022      	b.n	8003f24 <HAL_I2C_Init+0x1dc>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10e      	bne.n	8003f04 <HAL_I2C_Init+0x1bc>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	1e58      	subs	r0, r3, #1
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6859      	ldr	r1, [r3, #4]
 8003eee:	460b      	mov	r3, r1
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	440b      	add	r3, r1
 8003ef4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ef8:	3301      	adds	r3, #1
 8003efa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f02:	e00f      	b.n	8003f24 <HAL_I2C_Init+0x1dc>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	1e58      	subs	r0, r3, #1
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6859      	ldr	r1, [r3, #4]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	0099      	lsls	r1, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	6809      	ldr	r1, [r1, #0]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	69da      	ldr	r2, [r3, #28]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6911      	ldr	r1, [r2, #16]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	68d2      	ldr	r2, [r2, #12]
 8003f5e:	4311      	orrs	r1, r2
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6812      	ldr	r2, [r2, #0]
 8003f64:	430b      	orrs	r3, r1
 8003f66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695a      	ldr	r2, [r3, #20]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0201 	orr.w	r2, r2, #1
 8003f92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	000186a0 	.word	0x000186a0
 8003fc0:	001e847f 	.word	0x001e847f
 8003fc4:	003d08ff 	.word	0x003d08ff
 8003fc8:	431bde83 	.word	0x431bde83
 8003fcc:	10624dd3 	.word	0x10624dd3

08003fd0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af02      	add	r7, sp, #8
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	607a      	str	r2, [r7, #4]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	460b      	mov	r3, r1
 8003fde:	817b      	strh	r3, [r7, #10]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fe4:	f7ff fbc0 	bl	8003768 <HAL_GetTick>
 8003fe8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b20      	cmp	r3, #32
 8003ff4:	f040 80e0 	bne.w	80041b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	2319      	movs	r3, #25
 8003ffe:	2201      	movs	r2, #1
 8004000:	4970      	ldr	r1, [pc, #448]	; (80041c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 fe50 	bl	8004ca8 <I2C_WaitOnFlagUntilTimeout>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800400e:	2302      	movs	r3, #2
 8004010:	e0d3      	b.n	80041ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_I2C_Master_Transmit+0x50>
 800401c:	2302      	movs	r3, #2
 800401e:	e0cc      	b.n	80041ba <HAL_I2C_Master_Transmit+0x1ea>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b01      	cmp	r3, #1
 8004034:	d007      	beq.n	8004046 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f042 0201 	orr.w	r2, r2, #1
 8004044:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004054:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2221      	movs	r2, #33	; 0x21
 800405a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2210      	movs	r2, #16
 8004062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	893a      	ldrh	r2, [r7, #8]
 8004076:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	4a50      	ldr	r2, [pc, #320]	; (80041c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004086:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004088:	8979      	ldrh	r1, [r7, #10]
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	6a3a      	ldr	r2, [r7, #32]
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 fc0a 	bl	80048a8 <I2C_MasterRequestWrite>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e08d      	b.n	80041ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800409e:	2300      	movs	r3, #0
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	613b      	str	r3, [r7, #16]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	613b      	str	r3, [r7, #16]
 80040b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80040b4:	e066      	b.n	8004184 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	6a39      	ldr	r1, [r7, #32]
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 ff0e 	bl	8004edc <I2C_WaitOnTXEFlagUntilTimeout>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00d      	beq.n	80040e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d107      	bne.n	80040de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e06b      	b.n	80041ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	781a      	ldrb	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b04      	cmp	r3, #4
 800411e:	d11b      	bne.n	8004158 <HAL_I2C_Master_Transmit+0x188>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004124:	2b00      	cmp	r3, #0
 8004126:	d017      	beq.n	8004158 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	781a      	ldrb	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	6a39      	ldr	r1, [r7, #32]
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 ff05 	bl	8004f6c <I2C_WaitOnBTFFlagUntilTimeout>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00d      	beq.n	8004184 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416c:	2b04      	cmp	r3, #4
 800416e:	d107      	bne.n	8004180 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800417e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e01a      	b.n	80041ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004188:	2b00      	cmp	r3, #0
 800418a:	d194      	bne.n	80040b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800419a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2220      	movs	r2, #32
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	e000      	b.n	80041ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80041b8:	2302      	movs	r3, #2
  }
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	00100002 	.word	0x00100002
 80041c8:	ffff0000 	.word	0xffff0000

080041cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b088      	sub	sp, #32
 80041d0:	af02      	add	r7, sp, #8
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	4608      	mov	r0, r1
 80041d6:	4611      	mov	r1, r2
 80041d8:	461a      	mov	r2, r3
 80041da:	4603      	mov	r3, r0
 80041dc:	817b      	strh	r3, [r7, #10]
 80041de:	460b      	mov	r3, r1
 80041e0:	813b      	strh	r3, [r7, #8]
 80041e2:	4613      	mov	r3, r2
 80041e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041e6:	f7ff fabf 	bl	8003768 <HAL_GetTick>
 80041ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b20      	cmp	r3, #32
 80041f6:	f040 80d9 	bne.w	80043ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	2319      	movs	r3, #25
 8004200:	2201      	movs	r2, #1
 8004202:	496d      	ldr	r1, [pc, #436]	; (80043b8 <HAL_I2C_Mem_Write+0x1ec>)
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 fd4f 	bl	8004ca8 <I2C_WaitOnFlagUntilTimeout>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004210:	2302      	movs	r3, #2
 8004212:	e0cc      	b.n	80043ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800421a:	2b01      	cmp	r3, #1
 800421c:	d101      	bne.n	8004222 <HAL_I2C_Mem_Write+0x56>
 800421e:	2302      	movs	r3, #2
 8004220:	e0c5      	b.n	80043ae <HAL_I2C_Mem_Write+0x1e2>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b01      	cmp	r3, #1
 8004236:	d007      	beq.n	8004248 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0201 	orr.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004256:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2221      	movs	r2, #33	; 0x21
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2240      	movs	r2, #64	; 0x40
 8004264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6a3a      	ldr	r2, [r7, #32]
 8004272:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004278:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4a4d      	ldr	r2, [pc, #308]	; (80043bc <HAL_I2C_Mem_Write+0x1f0>)
 8004288:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800428a:	88f8      	ldrh	r0, [r7, #6]
 800428c:	893a      	ldrh	r2, [r7, #8]
 800428e:	8979      	ldrh	r1, [r7, #10]
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	9301      	str	r3, [sp, #4]
 8004294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	4603      	mov	r3, r0
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 fb86 	bl	80049ac <I2C_RequestMemoryWrite>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d052      	beq.n	800434c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e081      	b.n	80043ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 fe14 	bl	8004edc <I2C_WaitOnTXEFlagUntilTimeout>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00d      	beq.n	80042d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d107      	bne.n	80042d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e06b      	b.n	80043ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	781a      	ldrb	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	1c5a      	adds	r2, r3, #1
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b04      	cmp	r3, #4
 8004312:	d11b      	bne.n	800434c <HAL_I2C_Mem_Write+0x180>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004318:	2b00      	cmp	r3, #0
 800431a:	d017      	beq.n	800434c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	781a      	ldrb	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	1c5a      	adds	r2, r3, #1
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004336:	3b01      	subs	r3, #1
 8004338:	b29a      	uxth	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004342:	b29b      	uxth	r3, r3
 8004344:	3b01      	subs	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1aa      	bne.n	80042aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 fe07 	bl	8004f6c <I2C_WaitOnBTFFlagUntilTimeout>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00d      	beq.n	8004380 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004368:	2b04      	cmp	r3, #4
 800436a:	d107      	bne.n	800437c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800437a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e016      	b.n	80043ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800438e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2220      	movs	r2, #32
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	e000      	b.n	80043ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80043ac:	2302      	movs	r3, #2
  }
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	00100002 	.word	0x00100002
 80043bc:	ffff0000 	.word	0xffff0000

080043c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08c      	sub	sp, #48	; 0x30
 80043c4:	af02      	add	r7, sp, #8
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	4608      	mov	r0, r1
 80043ca:	4611      	mov	r1, r2
 80043cc:	461a      	mov	r2, r3
 80043ce:	4603      	mov	r3, r0
 80043d0:	817b      	strh	r3, [r7, #10]
 80043d2:	460b      	mov	r3, r1
 80043d4:	813b      	strh	r3, [r7, #8]
 80043d6:	4613      	mov	r3, r2
 80043d8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80043da:	2300      	movs	r3, #0
 80043dc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043de:	f7ff f9c3 	bl	8003768 <HAL_GetTick>
 80043e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b20      	cmp	r3, #32
 80043ee:	f040 8250 	bne.w	8004892 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	2319      	movs	r3, #25
 80043f8:	2201      	movs	r2, #1
 80043fa:	4982      	ldr	r1, [pc, #520]	; (8004604 <HAL_I2C_Mem_Read+0x244>)
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 fc53 	bl	8004ca8 <I2C_WaitOnFlagUntilTimeout>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004408:	2302      	movs	r3, #2
 800440a:	e243      	b.n	8004894 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004412:	2b01      	cmp	r3, #1
 8004414:	d101      	bne.n	800441a <HAL_I2C_Mem_Read+0x5a>
 8004416:	2302      	movs	r3, #2
 8004418:	e23c      	b.n	8004894 <HAL_I2C_Mem_Read+0x4d4>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b01      	cmp	r3, #1
 800442e:	d007      	beq.n	8004440 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0201 	orr.w	r2, r2, #1
 800443e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800444e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2222      	movs	r2, #34	; 0x22
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2240      	movs	r2, #64	; 0x40
 800445c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800446a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004470:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004476:	b29a      	uxth	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4a62      	ldr	r2, [pc, #392]	; (8004608 <HAL_I2C_Mem_Read+0x248>)
 8004480:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004482:	88f8      	ldrh	r0, [r7, #6]
 8004484:	893a      	ldrh	r2, [r7, #8]
 8004486:	8979      	ldrh	r1, [r7, #10]
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	9301      	str	r3, [sp, #4]
 800448c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	4603      	mov	r3, r0
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 fb20 	bl	8004ad8 <I2C_RequestMemoryRead>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e1f8      	b.n	8004894 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d113      	bne.n	80044d2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044aa:	2300      	movs	r3, #0
 80044ac:	61fb      	str	r3, [r7, #28]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	61fb      	str	r3, [r7, #28]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	61fb      	str	r3, [r7, #28]
 80044be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	e1cc      	b.n	800486c <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d11e      	bne.n	8004518 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80044ea:	b672      	cpsid	i
}
 80044ec:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ee:	2300      	movs	r3, #0
 80044f0:	61bb      	str	r3, [r7, #24]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	61bb      	str	r3, [r7, #24]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	61bb      	str	r3, [r7, #24]
 8004502:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004512:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004514:	b662      	cpsie	i
}
 8004516:	e035      	b.n	8004584 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800451c:	2b02      	cmp	r3, #2
 800451e:	d11e      	bne.n	800455e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800452e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004530:	b672      	cpsid	i
}
 8004532:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004534:	2300      	movs	r3, #0
 8004536:	617b      	str	r3, [r7, #20]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	617b      	str	r3, [r7, #20]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	617b      	str	r3, [r7, #20]
 8004548:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004558:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800455a:	b662      	cpsie	i
}
 800455c:	e012      	b.n	8004584 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800456c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800456e:	2300      	movs	r3, #0
 8004570:	613b      	str	r3, [r7, #16]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	613b      	str	r3, [r7, #16]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	613b      	str	r3, [r7, #16]
 8004582:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004584:	e172      	b.n	800486c <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458a:	2b03      	cmp	r3, #3
 800458c:	f200 811f 	bhi.w	80047ce <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004594:	2b01      	cmp	r3, #1
 8004596:	d123      	bne.n	80045e0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800459a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 fd2d 	bl	8004ffc <I2C_WaitOnRXNEFlagUntilTimeout>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e173      	b.n	8004894 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	691a      	ldr	r2, [r3, #16]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	1c5a      	adds	r2, r3, #1
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c8:	3b01      	subs	r3, #1
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	3b01      	subs	r3, #1
 80045d8:	b29a      	uxth	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045de:	e145      	b.n	800486c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d152      	bne.n	800468e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ee:	2200      	movs	r2, #0
 80045f0:	4906      	ldr	r1, [pc, #24]	; (800460c <HAL_I2C_Mem_Read+0x24c>)
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 fb58 	bl	8004ca8 <I2C_WaitOnFlagUntilTimeout>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d008      	beq.n	8004610 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e148      	b.n	8004894 <HAL_I2C_Mem_Read+0x4d4>
 8004602:	bf00      	nop
 8004604:	00100002 	.word	0x00100002
 8004608:	ffff0000 	.word	0xffff0000
 800460c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004610:	b672      	cpsid	i
}
 8004612:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004622:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	691a      	ldr	r2, [r3, #16]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	b2d2      	uxtb	r2, r2
 8004630:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	1c5a      	adds	r2, r3, #1
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464c:	b29b      	uxth	r3, r3
 800464e:	3b01      	subs	r3, #1
 8004650:	b29a      	uxth	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004656:	b662      	cpsie	i
}
 8004658:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	691a      	ldr	r2, [r3, #16]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004664:	b2d2      	uxtb	r2, r2
 8004666:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004676:	3b01      	subs	r3, #1
 8004678:	b29a      	uxth	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800468c:	e0ee      	b.n	800486c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004694:	2200      	movs	r2, #0
 8004696:	4981      	ldr	r1, [pc, #516]	; (800489c <HAL_I2C_Mem_Read+0x4dc>)
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 fb05 	bl	8004ca8 <I2C_WaitOnFlagUntilTimeout>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e0f5      	b.n	8004894 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80046b8:	b672      	cpsid	i
}
 80046ba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691a      	ldr	r2, [r3, #16]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	1c5a      	adds	r2, r3, #1
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	3b01      	subs	r3, #1
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80046ee:	4b6c      	ldr	r3, [pc, #432]	; (80048a0 <HAL_I2C_Mem_Read+0x4e0>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	08db      	lsrs	r3, r3, #3
 80046f4:	4a6b      	ldr	r2, [pc, #428]	; (80048a4 <HAL_I2C_Mem_Read+0x4e4>)
 80046f6:	fba2 2303 	umull	r2, r3, r2, r3
 80046fa:	0a1a      	lsrs	r2, r3, #8
 80046fc:	4613      	mov	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4413      	add	r3, r2
 8004702:	00da      	lsls	r2, r3, #3
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	3b01      	subs	r3, #1
 800470c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d118      	bne.n	8004746 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2220      	movs	r2, #32
 800471e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	f043 0220 	orr.w	r2, r3, #32
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004736:	b662      	cpsie	i
}
 8004738:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e0a6      	b.n	8004894 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	f003 0304 	and.w	r3, r3, #4
 8004750:	2b04      	cmp	r3, #4
 8004752:	d1d9      	bne.n	8004708 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004762:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	691a      	ldr	r2, [r3, #16]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	b2d2      	uxtb	r2, r2
 8004770:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	1c5a      	adds	r2, r3, #1
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004780:	3b01      	subs	r3, #1
 8004782:	b29a      	uxth	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478c:	b29b      	uxth	r3, r3
 800478e:	3b01      	subs	r3, #1
 8004790:	b29a      	uxth	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004796:	b662      	cpsie	i
}
 8004798:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	691a      	ldr	r2, [r3, #16]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	b2d2      	uxtb	r2, r2
 80047a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047cc:	e04e      	b.n	800486c <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 fc12 	bl	8004ffc <I2C_WaitOnRXNEFlagUntilTimeout>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e058      	b.n	8004894 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	691a      	ldr	r2, [r3, #16]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	b2d2      	uxtb	r2, r2
 80047ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047fe:	3b01      	subs	r3, #1
 8004800:	b29a      	uxth	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480a:	b29b      	uxth	r3, r3
 800480c:	3b01      	subs	r3, #1
 800480e:	b29a      	uxth	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	f003 0304 	and.w	r3, r3, #4
 800481e:	2b04      	cmp	r3, #4
 8004820:	d124      	bne.n	800486c <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004826:	2b03      	cmp	r3, #3
 8004828:	d107      	bne.n	800483a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004838:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	691a      	ldr	r2, [r3, #16]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	b2d2      	uxtb	r2, r2
 8004846:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	1c5a      	adds	r2, r3, #1
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004856:	3b01      	subs	r3, #1
 8004858:	b29a      	uxth	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004862:	b29b      	uxth	r3, r3
 8004864:	3b01      	subs	r3, #1
 8004866:	b29a      	uxth	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004870:	2b00      	cmp	r3, #0
 8004872:	f47f ae88 	bne.w	8004586 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	e000      	b.n	8004894 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8004892:	2302      	movs	r3, #2
  }
}
 8004894:	4618      	mov	r0, r3
 8004896:	3728      	adds	r7, #40	; 0x28
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	00010004 	.word	0x00010004
 80048a0:	20000008 	.word	0x20000008
 80048a4:	14f8b589 	.word	0x14f8b589

080048a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b088      	sub	sp, #32
 80048ac:	af02      	add	r7, sp, #8
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	607a      	str	r2, [r7, #4]
 80048b2:	603b      	str	r3, [r7, #0]
 80048b4:	460b      	mov	r3, r1
 80048b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d006      	beq.n	80048d2 <I2C_MasterRequestWrite+0x2a>
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d003      	beq.n	80048d2 <I2C_MasterRequestWrite+0x2a>
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048d0:	d108      	bne.n	80048e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	e00b      	b.n	80048fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e8:	2b12      	cmp	r3, #18
 80048ea:	d107      	bne.n	80048fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f000 f9cd 	bl	8004ca8 <I2C_WaitOnFlagUntilTimeout>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00d      	beq.n	8004930 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004922:	d103      	bne.n	800492c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800492a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e035      	b.n	800499c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004938:	d108      	bne.n	800494c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800493a:	897b      	ldrh	r3, [r7, #10]
 800493c:	b2db      	uxtb	r3, r3
 800493e:	461a      	mov	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004948:	611a      	str	r2, [r3, #16]
 800494a:	e01b      	b.n	8004984 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800494c:	897b      	ldrh	r3, [r7, #10]
 800494e:	11db      	asrs	r3, r3, #7
 8004950:	b2db      	uxtb	r3, r3
 8004952:	f003 0306 	and.w	r3, r3, #6
 8004956:	b2db      	uxtb	r3, r3
 8004958:	f063 030f 	orn	r3, r3, #15
 800495c:	b2da      	uxtb	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	490e      	ldr	r1, [pc, #56]	; (80049a4 <I2C_MasterRequestWrite+0xfc>)
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 fa16 	bl	8004d9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e010      	b.n	800499c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800497a:	897b      	ldrh	r3, [r7, #10]
 800497c:	b2da      	uxtb	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	4907      	ldr	r1, [pc, #28]	; (80049a8 <I2C_MasterRequestWrite+0x100>)
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f000 fa06 	bl	8004d9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e000      	b.n	800499c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	00010008 	.word	0x00010008
 80049a8:	00010002 	.word	0x00010002

080049ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b088      	sub	sp, #32
 80049b0:	af02      	add	r7, sp, #8
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	4608      	mov	r0, r1
 80049b6:	4611      	mov	r1, r2
 80049b8:	461a      	mov	r2, r3
 80049ba:	4603      	mov	r3, r0
 80049bc:	817b      	strh	r3, [r7, #10]
 80049be:	460b      	mov	r3, r1
 80049c0:	813b      	strh	r3, [r7, #8]
 80049c2:	4613      	mov	r3, r2
 80049c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	2200      	movs	r2, #0
 80049de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f000 f960 	bl	8004ca8 <I2C_WaitOnFlagUntilTimeout>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00d      	beq.n	8004a0a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049fc:	d103      	bne.n	8004a06 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e05f      	b.n	8004aca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a0a:	897b      	ldrh	r3, [r7, #10]
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	461a      	mov	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	6a3a      	ldr	r2, [r7, #32]
 8004a1e:	492d      	ldr	r1, [pc, #180]	; (8004ad4 <I2C_RequestMemoryWrite+0x128>)
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 f9bb 	bl	8004d9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e04c      	b.n	8004aca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a30:	2300      	movs	r3, #0
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	617b      	str	r3, [r7, #20]
 8004a44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a48:	6a39      	ldr	r1, [r7, #32]
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 fa46 	bl	8004edc <I2C_WaitOnTXEFlagUntilTimeout>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00d      	beq.n	8004a72 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	d107      	bne.n	8004a6e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e02b      	b.n	8004aca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a72:	88fb      	ldrh	r3, [r7, #6]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d105      	bne.n	8004a84 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a78:	893b      	ldrh	r3, [r7, #8]
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	611a      	str	r2, [r3, #16]
 8004a82:	e021      	b.n	8004ac8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a84:	893b      	ldrh	r3, [r7, #8]
 8004a86:	0a1b      	lsrs	r3, r3, #8
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a94:	6a39      	ldr	r1, [r7, #32]
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f000 fa20 	bl	8004edc <I2C_WaitOnTXEFlagUntilTimeout>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00d      	beq.n	8004abe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	2b04      	cmp	r3, #4
 8004aa8:	d107      	bne.n	8004aba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ab8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e005      	b.n	8004aca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004abe:	893b      	ldrh	r3, [r7, #8]
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3718      	adds	r7, #24
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	00010002 	.word	0x00010002

08004ad8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b088      	sub	sp, #32
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	4608      	mov	r0, r1
 8004ae2:	4611      	mov	r1, r2
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	817b      	strh	r3, [r7, #10]
 8004aea:	460b      	mov	r3, r1
 8004aec:	813b      	strh	r3, [r7, #8]
 8004aee:	4613      	mov	r3, r2
 8004af0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b00:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f000 f8c2 	bl	8004ca8 <I2C_WaitOnFlagUntilTimeout>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00d      	beq.n	8004b46 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b38:	d103      	bne.n	8004b42 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e0aa      	b.n	8004c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b46:	897b      	ldrh	r3, [r7, #10]
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	6a3a      	ldr	r2, [r7, #32]
 8004b5a:	4952      	ldr	r1, [pc, #328]	; (8004ca4 <I2C_RequestMemoryRead+0x1cc>)
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f000 f91d 	bl	8004d9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e097      	b.n	8004c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	617b      	str	r3, [r7, #20]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	617b      	str	r3, [r7, #20]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	617b      	str	r3, [r7, #20]
 8004b80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b84:	6a39      	ldr	r1, [r7, #32]
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 f9a8 	bl	8004edc <I2C_WaitOnTXEFlagUntilTimeout>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00d      	beq.n	8004bae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d107      	bne.n	8004baa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ba8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e076      	b.n	8004c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bae:	88fb      	ldrh	r3, [r7, #6]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d105      	bne.n	8004bc0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bb4:	893b      	ldrh	r3, [r7, #8]
 8004bb6:	b2da      	uxtb	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	611a      	str	r2, [r3, #16]
 8004bbe:	e021      	b.n	8004c04 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004bc0:	893b      	ldrh	r3, [r7, #8]
 8004bc2:	0a1b      	lsrs	r3, r3, #8
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	b2da      	uxtb	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd0:	6a39      	ldr	r1, [r7, #32]
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f000 f982 	bl	8004edc <I2C_WaitOnTXEFlagUntilTimeout>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00d      	beq.n	8004bfa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	d107      	bne.n	8004bf6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bf4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e050      	b.n	8004c9c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bfa:	893b      	ldrh	r3, [r7, #8]
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c06:	6a39      	ldr	r1, [r7, #32]
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 f967 	bl	8004edc <I2C_WaitOnTXEFlagUntilTimeout>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00d      	beq.n	8004c30 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	d107      	bne.n	8004c2c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c2a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e035      	b.n	8004c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c3e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c42:	9300      	str	r3, [sp, #0]
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 f82b 	bl	8004ca8 <I2C_WaitOnFlagUntilTimeout>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00d      	beq.n	8004c74 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c66:	d103      	bne.n	8004c70 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e013      	b.n	8004c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c74:	897b      	ldrh	r3, [r7, #10]
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	f043 0301 	orr.w	r3, r3, #1
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	6a3a      	ldr	r2, [r7, #32]
 8004c88:	4906      	ldr	r1, [pc, #24]	; (8004ca4 <I2C_RequestMemoryRead+0x1cc>)
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f000 f886 	bl	8004d9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3718      	adds	r7, #24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	00010002 	.word	0x00010002

08004ca8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	603b      	str	r3, [r7, #0]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cb8:	e048      	b.n	8004d4c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc0:	d044      	beq.n	8004d4c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc2:	f7fe fd51 	bl	8003768 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d302      	bcc.n	8004cd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d139      	bne.n	8004d4c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	0c1b      	lsrs	r3, r3, #16
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d10d      	bne.n	8004cfe <I2C_WaitOnFlagUntilTimeout+0x56>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	43da      	mvns	r2, r3
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	4013      	ands	r3, r2
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	bf0c      	ite	eq
 8004cf4:	2301      	moveq	r3, #1
 8004cf6:	2300      	movne	r3, #0
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	e00c      	b.n	8004d18 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	43da      	mvns	r2, r3
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	bf0c      	ite	eq
 8004d10:	2301      	moveq	r3, #1
 8004d12:	2300      	movne	r3, #0
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	461a      	mov	r2, r3
 8004d18:	79fb      	ldrb	r3, [r7, #7]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d116      	bne.n	8004d4c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2220      	movs	r2, #32
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d38:	f043 0220 	orr.w	r2, r3, #32
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e023      	b.n	8004d94 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	0c1b      	lsrs	r3, r3, #16
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d10d      	bne.n	8004d72 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	43da      	mvns	r2, r3
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	4013      	ands	r3, r2
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	bf0c      	ite	eq
 8004d68:	2301      	moveq	r3, #1
 8004d6a:	2300      	movne	r3, #0
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	461a      	mov	r2, r3
 8004d70:	e00c      	b.n	8004d8c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	43da      	mvns	r2, r3
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	bf0c      	ite	eq
 8004d84:	2301      	moveq	r3, #1
 8004d86:	2300      	movne	r3, #0
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	79fb      	ldrb	r3, [r7, #7]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d093      	beq.n	8004cba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
 8004da8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004daa:	e071      	b.n	8004e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dba:	d123      	bne.n	8004e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004dd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2220      	movs	r2, #32
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df0:	f043 0204 	orr.w	r2, r3, #4
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e067      	b.n	8004ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0a:	d041      	beq.n	8004e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e0c:	f7fe fcac 	bl	8003768 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d302      	bcc.n	8004e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d136      	bne.n	8004e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	0c1b      	lsrs	r3, r3, #16
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d10c      	bne.n	8004e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	43da      	mvns	r2, r3
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4013      	ands	r3, r2
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	bf14      	ite	ne
 8004e3e:	2301      	movne	r3, #1
 8004e40:	2300      	moveq	r3, #0
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	e00b      	b.n	8004e5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	43da      	mvns	r2, r3
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	4013      	ands	r3, r2
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	bf14      	ite	ne
 8004e58:	2301      	movne	r3, #1
 8004e5a:	2300      	moveq	r3, #0
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d016      	beq.n	8004e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7c:	f043 0220 	orr.w	r2, r3, #32
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e021      	b.n	8004ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	0c1b      	lsrs	r3, r3, #16
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d10c      	bne.n	8004eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	43da      	mvns	r2, r3
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	bf14      	ite	ne
 8004eac:	2301      	movne	r3, #1
 8004eae:	2300      	moveq	r3, #0
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	e00b      	b.n	8004ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	43da      	mvns	r2, r3
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	bf14      	ite	ne
 8004ec6:	2301      	movne	r3, #1
 8004ec8:	2300      	moveq	r3, #0
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f47f af6d 	bne.w	8004dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ee8:	e034      	b.n	8004f54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f000 f8e3 	bl	80050b6 <I2C_IsAcknowledgeFailed>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e034      	b.n	8004f64 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f00:	d028      	beq.n	8004f54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f02:	f7fe fc31 	bl	8003768 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	68ba      	ldr	r2, [r7, #8]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d302      	bcc.n	8004f18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d11d      	bne.n	8004f54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f22:	2b80      	cmp	r3, #128	; 0x80
 8004f24:	d016      	beq.n	8004f54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f40:	f043 0220 	orr.w	r2, r3, #32
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e007      	b.n	8004f64 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f5e:	2b80      	cmp	r3, #128	; 0x80
 8004f60:	d1c3      	bne.n	8004eea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f78:	e034      	b.n	8004fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f000 f89b 	bl	80050b6 <I2C_IsAcknowledgeFailed>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e034      	b.n	8004ff4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f90:	d028      	beq.n	8004fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f92:	f7fe fbe9 	bl	8003768 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d302      	bcc.n	8004fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d11d      	bne.n	8004fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	f003 0304 	and.w	r3, r3, #4
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d016      	beq.n	8004fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd0:	f043 0220 	orr.w	r2, r3, #32
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e007      	b.n	8004ff4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	f003 0304 	and.w	r3, r3, #4
 8004fee:	2b04      	cmp	r3, #4
 8004ff0:	d1c3      	bne.n	8004f7a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005008:	e049      	b.n	800509e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	f003 0310 	and.w	r3, r3, #16
 8005014:	2b10      	cmp	r3, #16
 8005016:	d119      	bne.n	800504c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f06f 0210 	mvn.w	r2, #16
 8005020:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2220      	movs	r2, #32
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e030      	b.n	80050ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800504c:	f7fe fb8c 	bl	8003768 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	429a      	cmp	r2, r3
 800505a:	d302      	bcc.n	8005062 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d11d      	bne.n	800509e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506c:	2b40      	cmp	r3, #64	; 0x40
 800506e:	d016      	beq.n	800509e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2220      	movs	r2, #32
 800507a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	f043 0220 	orr.w	r2, r3, #32
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e007      	b.n	80050ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a8:	2b40      	cmp	r3, #64	; 0x40
 80050aa:	d1ae      	bne.n	800500a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b083      	sub	sp, #12
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050cc:	d11b      	bne.n	8005106 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050d6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2220      	movs	r2, #32
 80050e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	f043 0204 	orr.w	r2, r3, #4
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e000      	b.n	8005108 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	bc80      	pop	{r7}
 8005110:	4770      	bx	lr

08005112 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b084      	sub	sp, #16
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d101      	bne.n	8005124 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e0e8      	b.n	80052f6 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b00      	cmp	r3, #0
 800512e:	d106      	bne.n	800513e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f006 feef 	bl	800bf1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2203      	movs	r2, #3
 8005142:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4618      	mov	r0, r3
 8005152:	f003 f8ca 	bl	80082ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6818      	ldr	r0, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	3304      	adds	r3, #4
 800515e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005160:	f003 f8a0 	bl	80082a4 <USB_CoreInit>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d005      	beq.n	8005176 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2202      	movs	r2, #2
 800516e:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e0bf      	b.n	80052f6 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2100      	movs	r1, #0
 800517c:	4618      	mov	r0, r3
 800517e:	f003 f8ce 	bl	800831e <USB_SetCurrentMode>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d005      	beq.n	8005194 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e0b0      	b.n	80052f6 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005194:	2300      	movs	r3, #0
 8005196:	73fb      	strb	r3, [r7, #15]
 8005198:	e03e      	b.n	8005218 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800519a:	7bfa      	ldrb	r2, [r7, #15]
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	4613      	mov	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	00db      	lsls	r3, r3, #3
 80051a6:	440b      	add	r3, r1
 80051a8:	3311      	adds	r3, #17
 80051aa:	2201      	movs	r2, #1
 80051ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80051ae:	7bfa      	ldrb	r2, [r7, #15]
 80051b0:	6879      	ldr	r1, [r7, #4]
 80051b2:	4613      	mov	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	00db      	lsls	r3, r3, #3
 80051ba:	440b      	add	r3, r1
 80051bc:	3310      	adds	r3, #16
 80051be:	7bfa      	ldrb	r2, [r7, #15]
 80051c0:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80051c2:	7bfa      	ldrb	r2, [r7, #15]
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	4613      	mov	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	440b      	add	r3, r1
 80051d0:	3313      	adds	r3, #19
 80051d2:	2200      	movs	r2, #0
 80051d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80051d6:	7bfa      	ldrb	r2, [r7, #15]
 80051d8:	6879      	ldr	r1, [r7, #4]
 80051da:	4613      	mov	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	4413      	add	r3, r2
 80051e0:	00db      	lsls	r3, r3, #3
 80051e2:	440b      	add	r3, r1
 80051e4:	3320      	adds	r3, #32
 80051e6:	2200      	movs	r2, #0
 80051e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80051ea:	7bfa      	ldrb	r2, [r7, #15]
 80051ec:	6879      	ldr	r1, [r7, #4]
 80051ee:	4613      	mov	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	00db      	lsls	r3, r3, #3
 80051f6:	440b      	add	r3, r1
 80051f8:	3324      	adds	r3, #36	; 0x24
 80051fa:	2200      	movs	r2, #0
 80051fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80051fe:	7bfb      	ldrb	r3, [r7, #15]
 8005200:	6879      	ldr	r1, [r7, #4]
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	4613      	mov	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4413      	add	r3, r2
 800520a:	00db      	lsls	r3, r3, #3
 800520c:	440b      	add	r3, r1
 800520e:	2200      	movs	r2, #0
 8005210:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005212:	7bfb      	ldrb	r3, [r7, #15]
 8005214:	3301      	adds	r3, #1
 8005216:	73fb      	strb	r3, [r7, #15]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	791b      	ldrb	r3, [r3, #4]
 800521c:	7bfa      	ldrb	r2, [r7, #15]
 800521e:	429a      	cmp	r2, r3
 8005220:	d3bb      	bcc.n	800519a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005222:	2300      	movs	r3, #0
 8005224:	73fb      	strb	r3, [r7, #15]
 8005226:	e044      	b.n	80052b2 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005228:	7bfa      	ldrb	r2, [r7, #15]
 800522a:	6879      	ldr	r1, [r7, #4]
 800522c:	4613      	mov	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	440b      	add	r3, r1
 8005236:	f203 1351 	addw	r3, r3, #337	; 0x151
 800523a:	2200      	movs	r2, #0
 800523c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800523e:	7bfa      	ldrb	r2, [r7, #15]
 8005240:	6879      	ldr	r1, [r7, #4]
 8005242:	4613      	mov	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	00db      	lsls	r3, r3, #3
 800524a:	440b      	add	r3, r1
 800524c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005250:	7bfa      	ldrb	r2, [r7, #15]
 8005252:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005254:	7bfa      	ldrb	r2, [r7, #15]
 8005256:	6879      	ldr	r1, [r7, #4]
 8005258:	4613      	mov	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4413      	add	r3, r2
 800525e:	00db      	lsls	r3, r3, #3
 8005260:	440b      	add	r3, r1
 8005262:	f203 1353 	addw	r3, r3, #339	; 0x153
 8005266:	2200      	movs	r2, #0
 8005268:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800526a:	7bfa      	ldrb	r2, [r7, #15]
 800526c:	6879      	ldr	r1, [r7, #4]
 800526e:	4613      	mov	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4413      	add	r3, r2
 8005274:	00db      	lsls	r3, r3, #3
 8005276:	440b      	add	r3, r1
 8005278:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800527c:	2200      	movs	r2, #0
 800527e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005280:	7bfa      	ldrb	r2, [r7, #15]
 8005282:	6879      	ldr	r1, [r7, #4]
 8005284:	4613      	mov	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	440b      	add	r3, r1
 800528e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005292:	2200      	movs	r2, #0
 8005294:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005296:	7bfa      	ldrb	r2, [r7, #15]
 8005298:	6879      	ldr	r1, [r7, #4]
 800529a:	4613      	mov	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	00db      	lsls	r3, r3, #3
 80052a2:	440b      	add	r3, r1
 80052a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
 80052ae:	3301      	adds	r3, #1
 80052b0:	73fb      	strb	r3, [r7, #15]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	791b      	ldrb	r3, [r3, #4]
 80052b6:	7bfa      	ldrb	r2, [r7, #15]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d3b5      	bcc.n	8005228 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6818      	ldr	r0, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3304      	adds	r3, #4
 80052c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052c6:	f003 f836 	bl	8008336 <USB_DevInit>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d005      	beq.n	80052dc <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e00c      	b.n	80052f6 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f005 f850 	bl	800a394 <USB_DevDisconnect>

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b082      	sub	sp, #8
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800530c:	2b01      	cmp	r3, #1
 800530e:	d101      	bne.n	8005314 <HAL_PCD_Start+0x16>
 8005310:	2302      	movs	r3, #2
 8005312:	e016      	b.n	8005342 <HAL_PCD_Start+0x44>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4618      	mov	r0, r3
 8005322:	f002 ffcc 	bl	80082be <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8005326:	2101      	movs	r1, #1
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f007 f86a 	bl	800c402 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4618      	mov	r0, r3
 8005334:	f005 f824 	bl	800a380 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b088      	sub	sp, #32
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4618      	mov	r0, r3
 8005358:	f005 f826 	bl	800a3a8 <USB_ReadInterrupts>
 800535c:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 fb1c 	bl	80059a6 <PCD_EP_ISR_Handler>

    return;
 800536e:	e11b      	b.n	80055a8 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005376:	2b00      	cmp	r3, #0
 8005378:	d013      	beq.n	80053a2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005382:	b29a      	uxth	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800538c:	b292      	uxth	r2, r2
 800538e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f006 fe3d 	bl	800c012 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005398:	2100      	movs	r1, #0
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f907 	bl	80055ae <HAL_PCD_SetAddress>

    return;
 80053a0:	e102      	b.n	80055a8 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00c      	beq.n	80053c6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80053be:	b292      	uxth	r2, r2
 80053c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80053c4:	e0f0      	b.n	80055a8 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00c      	beq.n	80053ea <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80053d8:	b29a      	uxth	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053e2:	b292      	uxth	r2, r2
 80053e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80053e8:	e0de      	b.n	80055a8 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d027      	beq.n	8005444 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 0204 	bic.w	r2, r2, #4
 8005406:	b292      	uxth	r2, r2
 8005408:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005414:	b29a      	uxth	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0208 	bic.w	r2, r2, #8
 800541e:	b292      	uxth	r2, r2
 8005420:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f006 fe2d 	bl	800c084 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005432:	b29a      	uxth	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800543c:	b292      	uxth	r2, r2
 800543e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005442:	e0b1      	b.n	80055a8 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 8085 	beq.w	800555a <HAL_PCD_IRQHandler+0x210>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8005450:	2300      	movs	r3, #0
 8005452:	77fb      	strb	r3, [r7, #31]
 8005454:	e011      	b.n	800547a <HAL_PCD_IRQHandler+0x130>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	461a      	mov	r2, r3
 800545c:	7ffb      	ldrb	r3, [r7, #31]
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	441a      	add	r2, r3
 8005462:	7ffb      	ldrb	r3, [r7, #31]
 8005464:	8812      	ldrh	r2, [r2, #0]
 8005466:	b292      	uxth	r2, r2
 8005468:	005b      	lsls	r3, r3, #1
 800546a:	f107 0120 	add.w	r1, r7, #32
 800546e:	440b      	add	r3, r1
 8005470:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8005474:	7ffb      	ldrb	r3, [r7, #31]
 8005476:	3301      	adds	r3, #1
 8005478:	77fb      	strb	r3, [r7, #31]
 800547a:	7ffb      	ldrb	r3, [r7, #31]
 800547c:	2b07      	cmp	r3, #7
 800547e:	d9ea      	bls.n	8005456 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005488:	b29a      	uxth	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 0201 	orr.w	r2, r2, #1
 8005492:	b292      	uxth	r2, r2
 8005494:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0201 	bic.w	r2, r2, #1
 80054aa:	b292      	uxth	r2, r2
 80054ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80054b0:	bf00      	nop
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d0f6      	beq.n	80054b2 <HAL_PCD_IRQHandler+0x168>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054d6:	b292      	uxth	r2, r2
 80054d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80054dc:	2300      	movs	r3, #0
 80054de:	77fb      	strb	r3, [r7, #31]
 80054e0:	e010      	b.n	8005504 <HAL_PCD_IRQHandler+0x1ba>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80054e2:	7ffb      	ldrb	r3, [r7, #31]
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	6812      	ldr	r2, [r2, #0]
 80054e8:	4611      	mov	r1, r2
 80054ea:	7ffa      	ldrb	r2, [r7, #31]
 80054ec:	0092      	lsls	r2, r2, #2
 80054ee:	440a      	add	r2, r1
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	f107 0120 	add.w	r1, r7, #32
 80054f6:	440b      	add	r3, r1
 80054f8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80054fc:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80054fe:	7ffb      	ldrb	r3, [r7, #31]
 8005500:	3301      	adds	r3, #1
 8005502:	77fb      	strb	r3, [r7, #31]
 8005504:	7ffb      	ldrb	r3, [r7, #31]
 8005506:	2b07      	cmp	r3, #7
 8005508:	d9eb      	bls.n	80054e2 <HAL_PCD_IRQHandler+0x198>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005512:	b29a      	uxth	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f042 0208 	orr.w	r2, r2, #8
 800551c:	b292      	uxth	r2, r2
 800551e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800552a:	b29a      	uxth	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005534:	b292      	uxth	r2, r2
 8005536:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005542:	b29a      	uxth	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f042 0204 	orr.w	r2, r2, #4
 800554c:	b292      	uxth	r2, r2
 800554e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f006 fd7c 	bl	800c050 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005558:	e026      	b.n	80055a8 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00f      	beq.n	8005584 <HAL_PCD_IRQHandler+0x23a>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800556c:	b29a      	uxth	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005576:	b292      	uxth	r2, r2
 8005578:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f006 fd3a 	bl	800bff6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005582:	e011      	b.n	80055a8 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00c      	beq.n	80055a8 <HAL_PCD_IRQHandler+0x25e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005596:	b29a      	uxth	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055a0:	b292      	uxth	r2, r2
 80055a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80055a6:	bf00      	nop
  }
}
 80055a8:	3720      	adds	r7, #32
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b082      	sub	sp, #8
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
 80055b6:	460b      	mov	r3, r1
 80055b8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d101      	bne.n	80055c8 <HAL_PCD_SetAddress+0x1a>
 80055c4:	2302      	movs	r3, #2
 80055c6:	e012      	b.n	80055ee <HAL_PCD_SetAddress+0x40>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	78fa      	ldrb	r2, [r7, #3]
 80055d4:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	78fa      	ldrb	r2, [r7, #3]
 80055dc:	4611      	mov	r1, r2
 80055de:	4618      	mov	r0, r3
 80055e0:	f004 febb 	bl	800a35a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3708      	adds	r7, #8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b084      	sub	sp, #16
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
 80055fe:	4608      	mov	r0, r1
 8005600:	4611      	mov	r1, r2
 8005602:	461a      	mov	r2, r3
 8005604:	4603      	mov	r3, r0
 8005606:	70fb      	strb	r3, [r7, #3]
 8005608:	460b      	mov	r3, r1
 800560a:	803b      	strh	r3, [r7, #0]
 800560c:	4613      	mov	r3, r2
 800560e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005610:	2300      	movs	r3, #0
 8005612:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005614:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005618:	2b00      	cmp	r3, #0
 800561a:	da0e      	bge.n	800563a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800561c:	78fb      	ldrb	r3, [r7, #3]
 800561e:	f003 0207 	and.w	r2, r3, #7
 8005622:	4613      	mov	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	4413      	add	r3, r2
 8005628:	00db      	lsls	r3, r3, #3
 800562a:	3310      	adds	r3, #16
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	4413      	add	r3, r2
 8005630:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2201      	movs	r2, #1
 8005636:	705a      	strb	r2, [r3, #1]
 8005638:	e00e      	b.n	8005658 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800563a:	78fb      	ldrb	r3, [r7, #3]
 800563c:	f003 0207 	and.w	r2, r3, #7
 8005640:	4613      	mov	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4413      	add	r3, r2
 8005646:	00db      	lsls	r3, r3, #3
 8005648:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	4413      	add	r3, r2
 8005650:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005658:	78fb      	ldrb	r3, [r7, #3]
 800565a:	f003 0307 	and.w	r3, r3, #7
 800565e:	b2da      	uxtb	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005664:	883a      	ldrh	r2, [r7, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	78ba      	ldrb	r2, [r7, #2]
 800566e:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005670:	78bb      	ldrb	r3, [r7, #2]
 8005672:	2b02      	cmp	r3, #2
 8005674:	d102      	bne.n	800567c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8005682:	2b01      	cmp	r3, #1
 8005684:	d101      	bne.n	800568a <HAL_PCD_EP_Open+0x94>
 8005686:	2302      	movs	r3, #2
 8005688:	e00e      	b.n	80056a8 <HAL_PCD_EP_Open+0xb2>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68f9      	ldr	r1, [r7, #12]
 8005698:	4618      	mov	r0, r3
 800569a:	f002 fe69 	bl	8008370 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 80056a6:	7afb      	ldrb	r3, [r7, #11]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	460b      	mov	r3, r1
 80056ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80056bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	da0e      	bge.n	80056e2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056c4:	78fb      	ldrb	r3, [r7, #3]
 80056c6:	f003 0207 	and.w	r2, r3, #7
 80056ca:	4613      	mov	r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	4413      	add	r3, r2
 80056d0:	00db      	lsls	r3, r3, #3
 80056d2:	3310      	adds	r3, #16
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	4413      	add	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2201      	movs	r2, #1
 80056de:	705a      	strb	r2, [r3, #1]
 80056e0:	e00e      	b.n	8005700 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056e2:	78fb      	ldrb	r3, [r7, #3]
 80056e4:	f003 0207 	and.w	r2, r3, #7
 80056e8:	4613      	mov	r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4413      	add	r3, r2
 80056ee:	00db      	lsls	r3, r3, #3
 80056f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	4413      	add	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005700:	78fb      	ldrb	r3, [r7, #3]
 8005702:	f003 0307 	and.w	r3, r3, #7
 8005706:	b2da      	uxtb	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8005712:	2b01      	cmp	r3, #1
 8005714:	d101      	bne.n	800571a <HAL_PCD_EP_Close+0x6a>
 8005716:	2302      	movs	r3, #2
 8005718:	e00e      	b.n	8005738 <HAL_PCD_EP_Close+0x88>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68f9      	ldr	r1, [r7, #12]
 8005728:	4618      	mov	r0, r3
 800572a:	f003 f9e1 	bl	8008af0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	607a      	str	r2, [r7, #4]
 800574a:	603b      	str	r3, [r7, #0]
 800574c:	460b      	mov	r3, r1
 800574e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005750:	7afb      	ldrb	r3, [r7, #11]
 8005752:	f003 0207 	and.w	r2, r3, #7
 8005756:	4613      	mov	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4413      	add	r3, r2
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	4413      	add	r3, r2
 8005766:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	2200      	movs	r2, #0
 8005778:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	2200      	movs	r2, #0
 800577e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005780:	7afb      	ldrb	r3, [r7, #11]
 8005782:	f003 0307 	and.w	r3, r3, #7
 8005786:	b2da      	uxtb	r2, r3
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6979      	ldr	r1, [r7, #20]
 8005792:	4618      	mov	r0, r3
 8005794:	f003 fb98 	bl	8008ec8 <USB_EPStartXfer>

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3718      	adds	r7, #24
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b083      	sub	sp, #12
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
 80057aa:	460b      	mov	r3, r1
 80057ac:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80057ae:	78fb      	ldrb	r3, [r7, #3]
 80057b0:	f003 0207 	and.w	r2, r3, #7
 80057b4:	6879      	ldr	r1, [r7, #4]
 80057b6:	4613      	mov	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4413      	add	r3, r2
 80057bc:	00db      	lsls	r3, r3, #3
 80057be:	440b      	add	r3, r1
 80057c0:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80057c4:	681b      	ldr	r3, [r3, #0]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bc80      	pop	{r7}
 80057ce:	4770      	bx	lr

080057d0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	607a      	str	r2, [r7, #4]
 80057da:	603b      	str	r3, [r7, #0]
 80057dc:	460b      	mov	r3, r1
 80057de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057e0:	7afb      	ldrb	r3, [r7, #11]
 80057e2:	f003 0207 	and.w	r2, r3, #7
 80057e6:	4613      	mov	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	00db      	lsls	r3, r3, #3
 80057ee:	3310      	adds	r3, #16
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	4413      	add	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	2200      	movs	r2, #0
 8005814:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2201      	movs	r2, #1
 800581a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800581c:	7afb      	ldrb	r3, [r7, #11]
 800581e:	f003 0307 	and.w	r3, r3, #7
 8005822:	b2da      	uxtb	r2, r3
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6979      	ldr	r1, [r7, #20]
 800582e:	4618      	mov	r0, r3
 8005830:	f003 fb4a 	bl	8008ec8 <USB_EPStartXfer>

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b084      	sub	sp, #16
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
 8005846:	460b      	mov	r3, r1
 8005848:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800584a:	78fb      	ldrb	r3, [r7, #3]
 800584c:	f003 0307 	and.w	r3, r3, #7
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	7912      	ldrb	r2, [r2, #4]
 8005854:	4293      	cmp	r3, r2
 8005856:	d901      	bls.n	800585c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e04c      	b.n	80058f6 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800585c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005860:	2b00      	cmp	r3, #0
 8005862:	da0e      	bge.n	8005882 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005864:	78fb      	ldrb	r3, [r7, #3]
 8005866:	f003 0207 	and.w	r2, r3, #7
 800586a:	4613      	mov	r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4413      	add	r3, r2
 8005870:	00db      	lsls	r3, r3, #3
 8005872:	3310      	adds	r3, #16
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	4413      	add	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2201      	movs	r2, #1
 800587e:	705a      	strb	r2, [r3, #1]
 8005880:	e00c      	b.n	800589c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005882:	78fa      	ldrb	r2, [r7, #3]
 8005884:	4613      	mov	r3, r2
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4413      	add	r3, r2
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	4413      	add	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2201      	movs	r2, #1
 80058a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058a2:	78fb      	ldrb	r3, [r7, #3]
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	b2da      	uxtb	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d101      	bne.n	80058bc <HAL_PCD_EP_SetStall+0x7e>
 80058b8:	2302      	movs	r3, #2
 80058ba:	e01c      	b.n	80058f6 <HAL_PCD_EP_SetStall+0xb8>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68f9      	ldr	r1, [r7, #12]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f004 fc48 	bl	800a160 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80058d0:	78fb      	ldrb	r3, [r7, #3]
 80058d2:	f003 0307 	and.w	r3, r3, #7
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d108      	bne.n	80058ec <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80058e4:	4619      	mov	r1, r3
 80058e6:	4610      	mov	r0, r2
 80058e8:	f004 fd6d 	bl	800a3c6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b084      	sub	sp, #16
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
 8005906:	460b      	mov	r3, r1
 8005908:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800590a:	78fb      	ldrb	r3, [r7, #3]
 800590c:	f003 030f 	and.w	r3, r3, #15
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	7912      	ldrb	r2, [r2, #4]
 8005914:	4293      	cmp	r3, r2
 8005916:	d901      	bls.n	800591c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e040      	b.n	800599e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800591c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005920:	2b00      	cmp	r3, #0
 8005922:	da0e      	bge.n	8005942 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005924:	78fb      	ldrb	r3, [r7, #3]
 8005926:	f003 0207 	and.w	r2, r3, #7
 800592a:	4613      	mov	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4413      	add	r3, r2
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	3310      	adds	r3, #16
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	4413      	add	r3, r2
 8005938:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2201      	movs	r2, #1
 800593e:	705a      	strb	r2, [r3, #1]
 8005940:	e00e      	b.n	8005960 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005942:	78fb      	ldrb	r3, [r7, #3]
 8005944:	f003 0207 	and.w	r2, r3, #7
 8005948:	4613      	mov	r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	4413      	add	r3, r2
 800594e:	00db      	lsls	r3, r3, #3
 8005950:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	4413      	add	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005966:	78fb      	ldrb	r3, [r7, #3]
 8005968:	f003 0307 	and.w	r3, r3, #7
 800596c:	b2da      	uxtb	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8005978:	2b01      	cmp	r3, #1
 800597a:	d101      	bne.n	8005980 <HAL_PCD_EP_ClrStall+0x82>
 800597c:	2302      	movs	r3, #2
 800597e:	e00e      	b.n	800599e <HAL_PCD_EP_ClrStall+0xa0>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68f9      	ldr	r1, [r7, #12]
 800598e:	4618      	mov	r0, r3
 8005990:	f004 fc36 	bl	800a200 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b096      	sub	sp, #88	; 0x58
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80059ae:	e3bc      	b.n	800612a <PCD_EP_ISR_Handler+0x784>
  {
    wIstr = hpcd->Instance->ISTR;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80059b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80059bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	f003 030f 	and.w	r3, r3, #15
 80059c6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80059ca:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f040 8176 	bne.w	8005cc0 <PCD_EP_ISR_Handler+0x31a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80059d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80059d8:	f003 0310 	and.w	r3, r3, #16
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d14f      	bne.n	8005a80 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	881b      	ldrh	r3, [r3, #0]
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80059ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f0:	81fb      	strh	r3, [r7, #14]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	89fb      	ldrh	r3, [r7, #14]
 80059f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	3310      	adds	r3, #16
 8005a08:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	461a      	mov	r2, r3
 8005a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	4413      	add	r3, r2
 8005a1e:	3302      	adds	r3, #2
 8005a20:	005b      	lsls	r3, r3, #1
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	6812      	ldr	r2, [r2, #0]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a2c:	881b      	ldrh	r3, [r3, #0]
 8005a2e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a34:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005a36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a38:	695a      	ldr	r2, [r3, #20]
 8005a3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	441a      	add	r2, r3
 8005a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a42:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005a44:	2100      	movs	r1, #0
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f006 fabb 	bl	800bfc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	7b5b      	ldrb	r3, [r3, #13]
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 8369 	beq.w	800612a <PCD_EP_ISR_Handler+0x784>
 8005a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f040 8364 	bne.w	800612a <PCD_EP_ISR_Handler+0x784>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	7b5b      	ldrb	r3, [r3, #13]
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	b292      	uxth	r2, r2
 8005a74:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	735a      	strb	r2, [r3, #13]
 8005a7e:	e354      	b.n	800612a <PCD_EP_ISR_Handler+0x784>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005a86:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	881b      	ldrh	r3, [r3, #0]
 8005a8e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005a92:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005a96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d034      	beq.n	8005b08 <PCD_EP_ISR_Handler+0x162>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	00db      	lsls	r3, r3, #3
 8005ab0:	4413      	add	r3, r2
 8005ab2:	3306      	adds	r3, #6
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	6812      	ldr	r2, [r2, #0]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ac0:	881b      	ldrh	r3, [r3, #0]
 8005ac2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ac8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6818      	ldr	r0, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8005ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ad6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ada:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	f004 fcc2 	bl	800a466 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	881b      	ldrh	r3, [r3, #0]
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005aee:	4013      	ands	r3, r2
 8005af0:	823b      	strh	r3, [r7, #16]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	8a3a      	ldrh	r2, [r7, #16]
 8005af8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005afc:	b292      	uxth	r2, r2
 8005afe:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f006 fa31 	bl	800bf68 <HAL_PCD_SetupStageCallback>
 8005b06:	e310      	b.n	800612a <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005b08:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f280 830c 	bge.w	800612a <PCD_EP_ISR_Handler+0x784>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	881b      	ldrh	r3, [r3, #0]
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005b1e:	4013      	ands	r3, r2
 8005b20:	83fb      	strh	r3, [r7, #30]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	8bfa      	ldrh	r2, [r7, #30]
 8005b28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b2c:	b292      	uxth	r2, r2
 8005b2e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	00db      	lsls	r3, r3, #3
 8005b42:	4413      	add	r3, r2
 8005b44:	3306      	adds	r3, #6
 8005b46:	005b      	lsls	r3, r3, #1
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	6812      	ldr	r2, [r2, #0]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005b58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b5a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b5e:	69db      	ldr	r3, [r3, #28]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d019      	beq.n	8005b98 <PCD_EP_ISR_Handler+0x1f2>
 8005b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b66:	695b      	ldr	r3, [r3, #20]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d015      	beq.n	8005b98 <PCD_EP_ISR_Handler+0x1f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6818      	ldr	r0, [r3, #0]
 8005b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b72:	6959      	ldr	r1, [r3, #20]
 8005b74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b76:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b7a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	f004 fc72 	bl	800a466 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b84:	695a      	ldr	r2, [r3, #20]
 8005b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	441a      	add	r2, r3
 8005b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b8e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005b90:	2100      	movs	r1, #0
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f006 f9fa 	bl	800bf8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005ba2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005ba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f040 82bd 	bne.w	800612a <PCD_EP_ISR_Handler+0x784>
 8005bb0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005bb4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005bb8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bbc:	f000 82b5 	beq.w	800612a <PCD_EP_ISR_Handler+0x784>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	61bb      	str	r3, [r7, #24]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	61bb      	str	r3, [r7, #24]
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bde:	617b      	str	r3, [r7, #20]
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	801a      	strh	r2, [r3, #0]
 8005bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	2b3e      	cmp	r3, #62	; 0x3e
 8005bf6:	d91d      	bls.n	8005c34 <PCD_EP_ISR_Handler+0x28e>
 8005bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	095b      	lsrs	r3, r3, #5
 8005bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8005c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	f003 031f 	and.w	r3, r3, #31
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d102      	bne.n	8005c12 <PCD_EP_ISR_Handler+0x26c>
 8005c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	647b      	str	r3, [r7, #68]	; 0x44
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	029b      	lsls	r3, r3, #10
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	4313      	orrs	r3, r2
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	801a      	strh	r2, [r3, #0]
 8005c32:	e026      	b.n	8005c82 <PCD_EP_ISR_Handler+0x2dc>
 8005c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10a      	bne.n	8005c52 <PCD_EP_ISR_Handler+0x2ac>
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	881b      	ldrh	r3, [r3, #0]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	801a      	strh	r2, [r3, #0]
 8005c50:	e017      	b.n	8005c82 <PCD_EP_ISR_Handler+0x2dc>
 8005c52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	085b      	lsrs	r3, r3, #1
 8005c58:	647b      	str	r3, [r7, #68]	; 0x44
 8005c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d002      	beq.n	8005c6c <PCD_EP_ISR_Handler+0x2c6>
 8005c66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c68:	3301      	adds	r3, #1
 8005c6a:	647b      	str	r3, [r7, #68]	; 0x44
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	881b      	ldrh	r3, [r3, #0]
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	029b      	lsls	r3, r3, #10
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	881b      	ldrh	r3, [r3, #0]
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c92:	827b      	strh	r3, [r7, #18]
 8005c94:	8a7b      	ldrh	r3, [r7, #18]
 8005c96:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c9a:	827b      	strh	r3, [r7, #18]
 8005c9c:	8a7b      	ldrh	r3, [r7, #18]
 8005c9e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ca2:	827b      	strh	r3, [r7, #18]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	8a7b      	ldrh	r3, [r7, #18]
 8005caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	8013      	strh	r3, [r2, #0]
 8005cbe:	e234      	b.n	800612a <PCD_EP_ISR_Handler+0x784>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	881b      	ldrh	r3, [r3, #0]
 8005cd0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005cd4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f280 80fc 	bge.w	8005ed6 <PCD_EP_ISR_Handler+0x530>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4413      	add	r3, r2
 8005cec:	881b      	ldrh	r3, [r3, #0]
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005d0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d10:	b292      	uxth	r2, r2
 8005d12:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005d14:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8005d18:	4613      	mov	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4413      	add	r3, r2
 8005d1e:	00db      	lsls	r3, r3, #3
 8005d20:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	4413      	add	r3, r2
 8005d28:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005d2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d2c:	7b1b      	ldrb	r3, [r3, #12]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d125      	bne.n	8005d7e <PCD_EP_ISR_Handler+0x3d8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	4413      	add	r3, r2
 8005d46:	3306      	adds	r3, #6
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	6812      	ldr	r2, [r2, #0]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d54:	881b      	ldrh	r3, [r3, #0]
 8005d56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d5a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8005d5e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 8092 	beq.w	8005e8c <PCD_EP_ISR_Handler+0x4e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6818      	ldr	r0, [r3, #0]
 8005d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d6e:	6959      	ldr	r1, [r3, #20]
 8005d70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d72:	88da      	ldrh	r2, [r3, #6]
 8005d74:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005d78:	f004 fb75 	bl	800a466 <USB_ReadPMA>
 8005d7c:	e086      	b.n	8005e8c <PCD_EP_ISR_Handler+0x4e6>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005d7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d80:	78db      	ldrb	r3, [r3, #3]
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d10a      	bne.n	8005d9c <PCD_EP_ISR_Handler+0x3f6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005d86:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f9d9 	bl	8006146 <HAL_PCD_EP_DB_Receive>
 8005d94:	4603      	mov	r3, r0
 8005d96:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8005d9a:	e077      	b.n	8005e8c <PCD_EP_ISR_Handler+0x4e6>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	461a      	mov	r2, r3
 8005da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	881b      	ldrh	r3, [r3, #0]
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	441a      	add	r2, r3
 8005dc8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005dcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	461a      	mov	r2, r3
 8005de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4413      	add	r3, r2
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d024      	beq.n	8005e44 <PCD_EP_ISR_Handler+0x49e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	461a      	mov	r2, r3
 8005e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	4413      	add	r3, r2
 8005e0e:	3302      	adds	r3, #2
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	6812      	ldr	r2, [r2, #0]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e22:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8005e26:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d02e      	beq.n	8005e8c <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6818      	ldr	r0, [r3, #0]
 8005e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e34:	6959      	ldr	r1, [r3, #20]
 8005e36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e38:	891a      	ldrh	r2, [r3, #8]
 8005e3a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005e3e:	f004 fb12 	bl	800a466 <USB_ReadPMA>
 8005e42:	e023      	b.n	8005e8c <PCD_EP_ISR_Handler+0x4e6>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	461a      	mov	r2, r3
 8005e50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	00db      	lsls	r3, r3, #3
 8005e56:	4413      	add	r3, r2
 8005e58:	3306      	adds	r3, #6
 8005e5a:	005b      	lsls	r3, r3, #1
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	6812      	ldr	r2, [r2, #0]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e66:	881b      	ldrh	r3, [r3, #0]
 8005e68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e6c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8005e70:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d009      	beq.n	8005e8c <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6818      	ldr	r0, [r3, #0]
 8005e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e7e:	6959      	ldr	r1, [r3, #20]
 8005e80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e82:	895a      	ldrh	r2, [r3, #10]
 8005e84:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005e88:	f004 faed 	bl	800a466 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e8e:	69da      	ldr	r2, [r3, #28]
 8005e90:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005e94:	441a      	add	r2, r3
 8005e96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e98:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005e9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e9c:	695a      	ldr	r2, [r3, #20]
 8005e9e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005ea2:	441a      	add	r2, r3
 8005ea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ea6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005ea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d005      	beq.n	8005ebc <PCD_EP_ISR_Handler+0x516>
 8005eb0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8005eb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d206      	bcs.n	8005eca <PCD_EP_ISR_Handler+0x524>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f006 f862 	bl	800bf8c <HAL_PCD_DataOutStageCallback>
 8005ec8:	e005      	b.n	8005ed6 <PCD_EP_ISR_Handler+0x530>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f002 fff9 	bl	8008ec8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005ed6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f000 8123 	beq.w	800612a <PCD_EP_ISR_Handler+0x784>
      {
        ep = &hpcd->IN_ep[epindex];
 8005ee4:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8005ee8:	4613      	mov	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	3310      	adds	r3, #16
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	461a      	mov	r2, r3
 8005efe:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4413      	add	r3, r2
 8005f06:	881b      	ldrh	r3, [r3, #0]
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f12:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	441a      	add	r2, r3
 8005f24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f36:	78db      	ldrb	r3, [r3, #3]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	f040 80a2 	bne.w	8006082 <PCD_EP_ISR_Handler+0x6dc>
        {
          ep->xfer_len = 0U;
 8005f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f40:	2200      	movs	r2, #0
 8005f42:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005f44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f46:	7b1b      	ldrb	r3, [r3, #12]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 8093 	beq.w	8006074 <PCD_EP_ISR_Handler+0x6ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005f4e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d046      	beq.n	8005fe8 <PCD_EP_ISR_Handler+0x642>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f5c:	785b      	ldrb	r3, [r3, #1]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d126      	bne.n	8005fb0 <PCD_EP_ISR_Handler+0x60a>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	627b      	str	r3, [r7, #36]	; 0x24
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	461a      	mov	r2, r3
 8005f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f76:	4413      	add	r3, r2
 8005f78:	627b      	str	r3, [r7, #36]	; 0x24
 8005f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	011a      	lsls	r2, r3, #4
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	4413      	add	r3, r2
 8005f84:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f88:	623b      	str	r3, [r7, #32]
 8005f8a:	6a3b      	ldr	r3, [r7, #32]
 8005f8c:	881b      	ldrh	r3, [r3, #0]
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	6a3b      	ldr	r3, [r7, #32]
 8005f98:	801a      	strh	r2, [r3, #0]
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	881b      	ldrh	r3, [r3, #0]
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	6a3b      	ldr	r3, [r7, #32]
 8005fac:	801a      	strh	r2, [r3, #0]
 8005fae:	e061      	b.n	8006074 <PCD_EP_ISR_Handler+0x6ce>
 8005fb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fb2:	785b      	ldrb	r3, [r3, #1]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d15d      	bne.n	8006074 <PCD_EP_ISR_Handler+0x6ce>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	461a      	mov	r2, r3
 8005fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fcc:	4413      	add	r3, r2
 8005fce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	011a      	lsls	r2, r3, #4
 8005fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd8:	4413      	add	r3, r2
 8005fda:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	801a      	strh	r2, [r3, #0]
 8005fe6:	e045      	b.n	8006074 <PCD_EP_ISR_Handler+0x6ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ff0:	785b      	ldrb	r3, [r3, #1]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d126      	bne.n	8006044 <PCD_EP_ISR_Handler+0x69e>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	637b      	str	r3, [r7, #52]	; 0x34
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006004:	b29b      	uxth	r3, r3
 8006006:	461a      	mov	r2, r3
 8006008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800600a:	4413      	add	r3, r2
 800600c:	637b      	str	r3, [r7, #52]	; 0x34
 800600e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	011a      	lsls	r2, r3, #4
 8006014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006016:	4413      	add	r3, r2
 8006018:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800601c:	633b      	str	r3, [r7, #48]	; 0x30
 800601e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006020:	881b      	ldrh	r3, [r3, #0]
 8006022:	b29b      	uxth	r3, r3
 8006024:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006028:	b29a      	uxth	r2, r3
 800602a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602c:	801a      	strh	r2, [r3, #0]
 800602e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	b29b      	uxth	r3, r3
 8006034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800603c:	b29a      	uxth	r2, r3
 800603e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006040:	801a      	strh	r2, [r3, #0]
 8006042:	e017      	b.n	8006074 <PCD_EP_ISR_Handler+0x6ce>
 8006044:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006046:	785b      	ldrb	r3, [r3, #1]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d113      	bne.n	8006074 <PCD_EP_ISR_Handler+0x6ce>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006054:	b29b      	uxth	r3, r3
 8006056:	461a      	mov	r2, r3
 8006058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800605a:	4413      	add	r3, r2
 800605c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800605e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	011a      	lsls	r2, r3, #4
 8006064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006066:	4413      	add	r3, r2
 8006068:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800606c:	63bb      	str	r3, [r7, #56]	; 0x38
 800606e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006070:	2200      	movs	r2, #0
 8006072:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	4619      	mov	r1, r3
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f005 ffa1 	bl	800bfc2 <HAL_PCD_DataInStageCallback>
 8006080:	e053      	b.n	800612a <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006082:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800608a:	2b00      	cmp	r3, #0
 800608c:	d146      	bne.n	800611c <PCD_EP_ISR_Handler+0x776>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006096:	b29b      	uxth	r3, r3
 8006098:	461a      	mov	r2, r3
 800609a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	4413      	add	r3, r2
 80060a2:	3302      	adds	r3, #2
 80060a4:	005b      	lsls	r3, r3, #1
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	6812      	ldr	r2, [r2, #0]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80060ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060bc:	699a      	ldr	r2, [r3, #24]
 80060be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d907      	bls.n	80060d6 <PCD_EP_ISR_Handler+0x730>
            {
              ep->xfer_len -= TxPctSize;
 80060c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060c8:	699a      	ldr	r2, [r3, #24]
 80060ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80060ce:	1ad2      	subs	r2, r2, r3
 80060d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060d2:	619a      	str	r2, [r3, #24]
 80060d4:	e002      	b.n	80060dc <PCD_EP_ISR_Handler+0x736>
            }
            else
            {
              ep->xfer_len = 0U;
 80060d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060d8:	2200      	movs	r2, #0
 80060da:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80060dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d106      	bne.n	80060f2 <PCD_EP_ISR_Handler+0x74c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80060e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	4619      	mov	r1, r3
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f005 ff69 	bl	800bfc2 <HAL_PCD_DataInStageCallback>
 80060f0:	e01b      	b.n	800612a <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80060f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060f4:	695a      	ldr	r2, [r3, #20]
 80060f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80060fa:	441a      	add	r2, r3
 80060fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060fe:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006102:	69da      	ldr	r2, [r3, #28]
 8006104:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006108:	441a      	add	r2, r3
 800610a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800610c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006114:	4618      	mov	r0, r3
 8006116:	f002 fed7 	bl	8008ec8 <USB_EPStartXfer>
 800611a:	e006      	b.n	800612a <PCD_EP_ISR_Handler+0x784>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800611c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006120:	461a      	mov	r2, r3
 8006122:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 f91b 	bl	8006360 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006132:	b29b      	uxth	r3, r3
 8006134:	b21b      	sxth	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	f6ff ac3a 	blt.w	80059b0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3758      	adds	r7, #88	; 0x58
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b088      	sub	sp, #32
 800614a:	af00      	add	r7, sp, #0
 800614c:	60f8      	str	r0, [r7, #12]
 800614e:	60b9      	str	r1, [r7, #8]
 8006150:	4613      	mov	r3, r2
 8006152:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006154:	88fb      	ldrh	r3, [r7, #6]
 8006156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d07e      	beq.n	800625c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006166:	b29b      	uxth	r3, r3
 8006168:	461a      	mov	r2, r3
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	00db      	lsls	r3, r3, #3
 8006170:	4413      	add	r3, r2
 8006172:	3302      	adds	r3, #2
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	6812      	ldr	r2, [r2, #0]
 800617a:	4413      	add	r3, r2
 800617c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006186:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	699a      	ldr	r2, [r3, #24]
 800618c:	8b7b      	ldrh	r3, [r7, #26]
 800618e:	429a      	cmp	r2, r3
 8006190:	d306      	bcc.n	80061a0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	699a      	ldr	r2, [r3, #24]
 8006196:	8b7b      	ldrh	r3, [r7, #26]
 8006198:	1ad2      	subs	r2, r2, r3
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	619a      	str	r2, [r3, #24]
 800619e:	e002      	b.n	80061a6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	2200      	movs	r2, #0
 80061a4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d123      	bne.n	80061f6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	461a      	mov	r2, r3
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	b29b      	uxth	r3, r3
 80061c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c8:	833b      	strh	r3, [r7, #24]
 80061ca:	8b3b      	ldrh	r3, [r7, #24]
 80061cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061d0:	833b      	strh	r3, [r7, #24]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	461a      	mov	r2, r3
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	441a      	add	r2, r3
 80061e0:	8b3b      	ldrh	r3, [r7, #24]
 80061e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80061f6:	88fb      	ldrh	r3, [r7, #6]
 80061f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d01f      	beq.n	8006240 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	461a      	mov	r2, r3
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	b29b      	uxth	r3, r3
 8006212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621a:	82fb      	strh	r3, [r7, #22]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	461a      	mov	r2, r3
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	441a      	add	r2, r3
 800622a:	8afb      	ldrh	r3, [r7, #22]
 800622c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006230:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006238:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800623c:	b29b      	uxth	r3, r3
 800623e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006240:	8b7b      	ldrh	r3, [r7, #26]
 8006242:	2b00      	cmp	r3, #0
 8006244:	f000 8087 	beq.w	8006356 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6818      	ldr	r0, [r3, #0]
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	6959      	ldr	r1, [r3, #20]
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	891a      	ldrh	r2, [r3, #8]
 8006254:	8b7b      	ldrh	r3, [r7, #26]
 8006256:	f004 f906 	bl	800a466 <USB_ReadPMA>
 800625a:	e07c      	b.n	8006356 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006264:	b29b      	uxth	r3, r3
 8006266:	461a      	mov	r2, r3
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	00db      	lsls	r3, r3, #3
 800626e:	4413      	add	r3, r2
 8006270:	3306      	adds	r3, #6
 8006272:	005b      	lsls	r3, r3, #1
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	6812      	ldr	r2, [r2, #0]
 8006278:	4413      	add	r3, r2
 800627a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800627e:	881b      	ldrh	r3, [r3, #0]
 8006280:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006284:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	699a      	ldr	r2, [r3, #24]
 800628a:	8b7b      	ldrh	r3, [r7, #26]
 800628c:	429a      	cmp	r2, r3
 800628e:	d306      	bcc.n	800629e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	699a      	ldr	r2, [r3, #24]
 8006294:	8b7b      	ldrh	r3, [r7, #26]
 8006296:	1ad2      	subs	r2, r2, r3
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	619a      	str	r2, [r3, #24]
 800629c:	e002      	b.n	80062a4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	2200      	movs	r2, #0
 80062a2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d123      	bne.n	80062f4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	461a      	mov	r2, r3
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	b29b      	uxth	r3, r3
 80062be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c6:	83fb      	strh	r3, [r7, #30]
 80062c8:	8bfb      	ldrh	r3, [r7, #30]
 80062ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80062ce:	83fb      	strh	r3, [r7, #30]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	461a      	mov	r2, r3
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	441a      	add	r2, r3
 80062de:	8bfb      	ldrh	r3, [r7, #30]
 80062e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80062f4:	88fb      	ldrh	r3, [r7, #6]
 80062f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d11f      	bne.n	800633e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	461a      	mov	r2, r3
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4413      	add	r3, r2
 800630c:	881b      	ldrh	r3, [r3, #0]
 800630e:	b29b      	uxth	r3, r3
 8006310:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006318:	83bb      	strh	r3, [r7, #28]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	461a      	mov	r2, r3
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	441a      	add	r2, r3
 8006328:	8bbb      	ldrh	r3, [r7, #28]
 800632a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800632e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006336:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800633a:	b29b      	uxth	r3, r3
 800633c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800633e:	8b7b      	ldrh	r3, [r7, #26]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d008      	beq.n	8006356 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6818      	ldr	r0, [r3, #0]
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	6959      	ldr	r1, [r3, #20]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	895a      	ldrh	r2, [r3, #10]
 8006350:	8b7b      	ldrh	r3, [r7, #26]
 8006352:	f004 f888 	bl	800a466 <USB_ReadPMA>
    }
  }

  return count;
 8006356:	8b7b      	ldrh	r3, [r7, #26]
}
 8006358:	4618      	mov	r0, r3
 800635a:	3720      	adds	r7, #32
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b0a4      	sub	sp, #144	; 0x90
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	4613      	mov	r3, r2
 800636c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800636e:	88fb      	ldrh	r3, [r7, #6]
 8006370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006374:	2b00      	cmp	r3, #0
 8006376:	f000 81dd 	beq.w	8006734 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006382:	b29b      	uxth	r3, r3
 8006384:	461a      	mov	r2, r3
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	4413      	add	r3, r2
 800638e:	3302      	adds	r3, #2
 8006390:	005b      	lsls	r3, r3, #1
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	6812      	ldr	r2, [r2, #0]
 8006396:	4413      	add	r3, r2
 8006398:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800639c:	881b      	ldrh	r3, [r3, #0]
 800639e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063a2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	699a      	ldr	r2, [r3, #24]
 80063aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d907      	bls.n	80063c2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	699a      	ldr	r2, [r3, #24]
 80063b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80063ba:	1ad2      	subs	r2, r2, r3
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	619a      	str	r2, [r3, #24]
 80063c0:	e002      	b.n	80063c8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	2200      	movs	r2, #0
 80063c6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f040 80b9 	bne.w	8006544 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	785b      	ldrb	r3, [r3, #1]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d126      	bne.n	8006428 <HAL_PCD_EP_DB_Transmit+0xc8>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	461a      	mov	r2, r3
 80063ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ee:	4413      	add	r3, r2
 80063f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	011a      	lsls	r2, r3, #4
 80063f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fa:	4413      	add	r3, r2
 80063fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006400:	62bb      	str	r3, [r7, #40]	; 0x28
 8006402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006404:	881b      	ldrh	r3, [r3, #0]
 8006406:	b29b      	uxth	r3, r3
 8006408:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800640c:	b29a      	uxth	r2, r3
 800640e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006410:	801a      	strh	r2, [r3, #0]
 8006412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006414:	881b      	ldrh	r3, [r3, #0]
 8006416:	b29b      	uxth	r3, r3
 8006418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800641c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006420:	b29a      	uxth	r2, r3
 8006422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006424:	801a      	strh	r2, [r3, #0]
 8006426:	e01a      	b.n	800645e <HAL_PCD_EP_DB_Transmit+0xfe>
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	785b      	ldrb	r3, [r3, #1]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d116      	bne.n	800645e <HAL_PCD_EP_DB_Transmit+0xfe>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	637b      	str	r3, [r7, #52]	; 0x34
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800643e:	b29b      	uxth	r3, r3
 8006440:	461a      	mov	r2, r3
 8006442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006444:	4413      	add	r3, r2
 8006446:	637b      	str	r3, [r7, #52]	; 0x34
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	011a      	lsls	r2, r3, #4
 800644e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006450:	4413      	add	r3, r2
 8006452:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006456:	633b      	str	r3, [r7, #48]	; 0x30
 8006458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645a:	2200      	movs	r2, #0
 800645c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	627b      	str	r3, [r7, #36]	; 0x24
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	785b      	ldrb	r3, [r3, #1]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d126      	bne.n	80064ba <HAL_PCD_EP_DB_Transmit+0x15a>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	61fb      	str	r3, [r7, #28]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800647a:	b29b      	uxth	r3, r3
 800647c:	461a      	mov	r2, r3
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	4413      	add	r3, r2
 8006482:	61fb      	str	r3, [r7, #28]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	011a      	lsls	r2, r3, #4
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	4413      	add	r3, r2
 800648e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006492:	61bb      	str	r3, [r7, #24]
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	881b      	ldrh	r3, [r3, #0]
 8006498:	b29b      	uxth	r3, r3
 800649a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800649e:	b29a      	uxth	r2, r3
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	801a      	strh	r2, [r3, #0]
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	881b      	ldrh	r3, [r3, #0]
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	801a      	strh	r2, [r3, #0]
 80064b8:	e017      	b.n	80064ea <HAL_PCD_EP_DB_Transmit+0x18a>
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	785b      	ldrb	r3, [r3, #1]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d113      	bne.n	80064ea <HAL_PCD_EP_DB_Transmit+0x18a>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	461a      	mov	r2, r3
 80064ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d0:	4413      	add	r3, r2
 80064d2:	627b      	str	r3, [r7, #36]	; 0x24
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	011a      	lsls	r2, r3, #4
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	4413      	add	r3, r2
 80064de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064e2:	623b      	str	r3, [r7, #32]
 80064e4:	6a3b      	ldr	r3, [r7, #32]
 80064e6:	2200      	movs	r2, #0
 80064e8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	4619      	mov	r1, r3
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f005 fd66 	bl	800bfc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80064f6:	88fb      	ldrh	r3, [r7, #6]
 80064f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f000 82fc 	beq.w	8006afa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	461a      	mov	r2, r3
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	b29b      	uxth	r3, r3
 8006514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651c:	82fb      	strh	r3, [r7, #22]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	461a      	mov	r2, r3
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	441a      	add	r2, r3
 800652c:	8afb      	ldrh	r3, [r7, #22]
 800652e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006536:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800653a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800653e:	b29b      	uxth	r3, r3
 8006540:	8013      	strh	r3, [r2, #0]
 8006542:	e2da      	b.n	8006afa <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006544:	88fb      	ldrh	r3, [r7, #6]
 8006546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d021      	beq.n	8006592 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	461a      	mov	r2, r3
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	4413      	add	r3, r2
 800655c:	881b      	ldrh	r3, [r3, #0]
 800655e:	b29b      	uxth	r3, r3
 8006560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006568:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	461a      	mov	r2, r3
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	441a      	add	r2, r3
 800657a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800657e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006582:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006586:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800658a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800658e:	b29b      	uxth	r3, r3
 8006590:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006598:	2b01      	cmp	r3, #1
 800659a:	f040 82ae 	bne.w	8006afa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	695a      	ldr	r2, [r3, #20]
 80065a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80065a6:	441a      	add	r2, r3
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	69da      	ldr	r2, [r3, #28]
 80065b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80065b4:	441a      	add	r2, r3
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	6a1a      	ldr	r2, [r3, #32]
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d30b      	bcc.n	80065de <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	6a1a      	ldr	r2, [r3, #32]
 80065d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065d6:	1ad2      	subs	r2, r2, r3
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	621a      	str	r2, [r3, #32]
 80065dc:	e017      	b.n	800660e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d108      	bne.n	80065f8 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80065e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80065ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80065f6:	e00a      	b.n	800660e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	6a1b      	ldr	r3, [r3, #32]
 8006604:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	2200      	movs	r2, #0
 800660c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	785b      	ldrb	r3, [r3, #1]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d165      	bne.n	80066e2 <HAL_PCD_EP_DB_Transmit+0x382>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006624:	b29b      	uxth	r3, r3
 8006626:	461a      	mov	r2, r3
 8006628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800662a:	4413      	add	r3, r2
 800662c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	011a      	lsls	r2, r3, #4
 8006634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006636:	4413      	add	r3, r2
 8006638:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800663c:	63bb      	str	r3, [r7, #56]	; 0x38
 800663e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006640:	881b      	ldrh	r3, [r3, #0]
 8006642:	b29b      	uxth	r3, r3
 8006644:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006648:	b29a      	uxth	r2, r3
 800664a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664c:	801a      	strh	r2, [r3, #0]
 800664e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006652:	2b3e      	cmp	r3, #62	; 0x3e
 8006654:	d91d      	bls.n	8006692 <HAL_PCD_EP_DB_Transmit+0x332>
 8006656:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800665a:	095b      	lsrs	r3, r3, #5
 800665c:	64bb      	str	r3, [r7, #72]	; 0x48
 800665e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006662:	f003 031f 	and.w	r3, r3, #31
 8006666:	2b00      	cmp	r3, #0
 8006668:	d102      	bne.n	8006670 <HAL_PCD_EP_DB_Transmit+0x310>
 800666a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800666c:	3b01      	subs	r3, #1
 800666e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006672:	881b      	ldrh	r3, [r3, #0]
 8006674:	b29a      	uxth	r2, r3
 8006676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006678:	b29b      	uxth	r3, r3
 800667a:	029b      	lsls	r3, r3, #10
 800667c:	b29b      	uxth	r3, r3
 800667e:	4313      	orrs	r3, r2
 8006680:	b29b      	uxth	r3, r3
 8006682:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006686:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800668a:	b29a      	uxth	r2, r3
 800668c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668e:	801a      	strh	r2, [r3, #0]
 8006690:	e044      	b.n	800671c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006692:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10a      	bne.n	80066b0 <HAL_PCD_EP_DB_Transmit+0x350>
 800669a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	b29b      	uxth	r3, r3
 80066a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ac:	801a      	strh	r2, [r3, #0]
 80066ae:	e035      	b.n	800671c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80066b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066b4:	085b      	lsrs	r3, r3, #1
 80066b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80066b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d002      	beq.n	80066ca <HAL_PCD_EP_DB_Transmit+0x36a>
 80066c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066c6:	3301      	adds	r3, #1
 80066c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80066ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066cc:	881b      	ldrh	r3, [r3, #0]
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	029b      	lsls	r3, r3, #10
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	4313      	orrs	r3, r2
 80066da:	b29a      	uxth	r2, r3
 80066dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066de:	801a      	strh	r2, [r3, #0]
 80066e0:	e01c      	b.n	800671c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	785b      	ldrb	r3, [r3, #1]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d118      	bne.n	800671c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	647b      	str	r3, [r7, #68]	; 0x44
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	461a      	mov	r2, r3
 80066fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066fe:	4413      	add	r3, r2
 8006700:	647b      	str	r3, [r7, #68]	; 0x44
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	011a      	lsls	r2, r3, #4
 8006708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800670a:	4413      	add	r3, r2
 800670c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006710:	643b      	str	r3, [r7, #64]	; 0x40
 8006712:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006716:	b29a      	uxth	r2, r3
 8006718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800671a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6818      	ldr	r0, [r3, #0]
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	6959      	ldr	r1, [r3, #20]
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	891a      	ldrh	r2, [r3, #8]
 8006728:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800672c:	b29b      	uxth	r3, r3
 800672e:	f003 fe55 	bl	800a3dc <USB_WritePMA>
 8006732:	e1e2      	b.n	8006afa <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800673c:	b29b      	uxth	r3, r3
 800673e:	461a      	mov	r2, r3
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	00db      	lsls	r3, r3, #3
 8006746:	4413      	add	r3, r2
 8006748:	3306      	adds	r3, #6
 800674a:	005b      	lsls	r3, r3, #1
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	6812      	ldr	r2, [r2, #0]
 8006750:	4413      	add	r3, r2
 8006752:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006756:	881b      	ldrh	r3, [r3, #0]
 8006758:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800675c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	699a      	ldr	r2, [r3, #24]
 8006764:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006768:	429a      	cmp	r2, r3
 800676a:	d307      	bcc.n	800677c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	699a      	ldr	r2, [r3, #24]
 8006770:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006774:	1ad2      	subs	r2, r2, r3
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	619a      	str	r2, [r3, #24]
 800677a:	e002      	b.n	8006782 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	2200      	movs	r2, #0
 8006780:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	2b00      	cmp	r3, #0
 8006788:	f040 80c0 	bne.w	800690c <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	785b      	ldrb	r3, [r3, #1]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d126      	bne.n	80067e2 <HAL_PCD_EP_DB_Transmit+0x482>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	67fb      	str	r3, [r7, #124]	; 0x7c
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	461a      	mov	r2, r3
 80067a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80067a8:	4413      	add	r3, r2
 80067aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	011a      	lsls	r2, r3, #4
 80067b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80067b4:	4413      	add	r3, r2
 80067b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80067bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067be:	881b      	ldrh	r3, [r3, #0]
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067ca:	801a      	strh	r2, [r3, #0]
 80067cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067da:	b29a      	uxth	r2, r3
 80067dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067de:	801a      	strh	r2, [r3, #0]
 80067e0:	e01a      	b.n	8006818 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	785b      	ldrb	r3, [r3, #1]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d116      	bne.n	8006818 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	667b      	str	r3, [r7, #100]	; 0x64
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	461a      	mov	r2, r3
 80067fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067fe:	4413      	add	r3, r2
 8006800:	667b      	str	r3, [r7, #100]	; 0x64
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	011a      	lsls	r2, r3, #4
 8006808:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800680a:	4413      	add	r3, r2
 800680c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006810:	663b      	str	r3, [r7, #96]	; 0x60
 8006812:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006814:	2200      	movs	r2, #0
 8006816:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	677b      	str	r3, [r7, #116]	; 0x74
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	785b      	ldrb	r3, [r3, #1]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d12b      	bne.n	800687e <HAL_PCD_EP_DB_Transmit+0x51e>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006834:	b29b      	uxth	r3, r3
 8006836:	461a      	mov	r2, r3
 8006838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800683a:	4413      	add	r3, r2
 800683c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	011a      	lsls	r2, r3, #4
 8006844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006846:	4413      	add	r3, r2
 8006848:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800684c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006850:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006854:	881b      	ldrh	r3, [r3, #0]
 8006856:	b29b      	uxth	r3, r3
 8006858:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800685c:	b29a      	uxth	r2, r3
 800685e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006862:	801a      	strh	r2, [r3, #0]
 8006864:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006868:	881b      	ldrh	r3, [r3, #0]
 800686a:	b29b      	uxth	r3, r3
 800686c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006870:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006874:	b29a      	uxth	r2, r3
 8006876:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800687a:	801a      	strh	r2, [r3, #0]
 800687c:	e017      	b.n	80068ae <HAL_PCD_EP_DB_Transmit+0x54e>
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	785b      	ldrb	r3, [r3, #1]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d113      	bne.n	80068ae <HAL_PCD_EP_DB_Transmit+0x54e>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800688e:	b29b      	uxth	r3, r3
 8006890:	461a      	mov	r2, r3
 8006892:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006894:	4413      	add	r3, r2
 8006896:	677b      	str	r3, [r7, #116]	; 0x74
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	011a      	lsls	r2, r3, #4
 800689e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068a0:	4413      	add	r3, r2
 80068a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068a6:	673b      	str	r3, [r7, #112]	; 0x70
 80068a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068aa:	2200      	movs	r2, #0
 80068ac:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	4619      	mov	r1, r3
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f005 fb84 	bl	800bfc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80068ba:	88fb      	ldrh	r3, [r7, #6]
 80068bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f040 811a 	bne.w	8006afa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	461a      	mov	r2, r3
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	4413      	add	r3, r2
 80068d4:	881b      	ldrh	r3, [r3, #0]
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e0:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	461a      	mov	r2, r3
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	441a      	add	r2, r3
 80068f2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80068f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006906:	b29b      	uxth	r3, r3
 8006908:	8013      	strh	r3, [r2, #0]
 800690a:	e0f6      	b.n	8006afa <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800690c:	88fb      	ldrh	r3, [r7, #6]
 800690e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d121      	bne.n	800695a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	461a      	mov	r2, r3
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4413      	add	r3, r2
 8006924:	881b      	ldrh	r3, [r3, #0]
 8006926:	b29b      	uxth	r3, r3
 8006928:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800692c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006930:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	461a      	mov	r2, r3
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	441a      	add	r2, r3
 8006942:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006946:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800694a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800694e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006956:	b29b      	uxth	r3, r3
 8006958:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006960:	2b01      	cmp	r3, #1
 8006962:	f040 80ca 	bne.w	8006afa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	695a      	ldr	r2, [r3, #20]
 800696a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800696e:	441a      	add	r2, r3
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	69da      	ldr	r2, [r3, #28]
 8006978:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800697c:	441a      	add	r2, r3
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	6a1a      	ldr	r2, [r3, #32]
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	429a      	cmp	r2, r3
 800698c:	d30b      	bcc.n	80069a6 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	6a1a      	ldr	r2, [r3, #32]
 800699a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800699e:	1ad2      	subs	r2, r2, r3
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	621a      	str	r2, [r3, #32]
 80069a4:	e017      	b.n	80069d6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d108      	bne.n	80069c0 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80069ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80069b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80069be:	e00a      	b.n	80069d6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	6a1b      	ldr	r3, [r3, #32]
 80069c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	2200      	movs	r2, #0
 80069cc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	657b      	str	r3, [r7, #84]	; 0x54
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	785b      	ldrb	r3, [r3, #1]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d165      	bne.n	8006ab0 <HAL_PCD_EP_DB_Transmit+0x750>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	461a      	mov	r2, r3
 80069f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069f8:	4413      	add	r3, r2
 80069fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	011a      	lsls	r2, r3, #4
 8006a02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a04:	4413      	add	r3, r2
 8006a06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a0e:	881b      	ldrh	r3, [r3, #0]
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a1a:	801a      	strh	r2, [r3, #0]
 8006a1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a20:	2b3e      	cmp	r3, #62	; 0x3e
 8006a22:	d91d      	bls.n	8006a60 <HAL_PCD_EP_DB_Transmit+0x700>
 8006a24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a28:	095b      	lsrs	r3, r3, #5
 8006a2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a30:	f003 031f 	and.w	r3, r3, #31
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d102      	bne.n	8006a3e <HAL_PCD_EP_DB_Transmit+0x6de>
 8006a38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a40:	881b      	ldrh	r3, [r3, #0]
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	029b      	lsls	r3, r3, #10
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a5c:	801a      	strh	r2, [r3, #0]
 8006a5e:	e041      	b.n	8006ae4 <HAL_PCD_EP_DB_Transmit+0x784>
 8006a60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10a      	bne.n	8006a7e <HAL_PCD_EP_DB_Transmit+0x71e>
 8006a68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a6a:	881b      	ldrh	r3, [r3, #0]
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a7a:	801a      	strh	r2, [r3, #0]
 8006a7c:	e032      	b.n	8006ae4 <HAL_PCD_EP_DB_Transmit+0x784>
 8006a7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a82:	085b      	lsrs	r3, r3, #1
 8006a84:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d002      	beq.n	8006a98 <HAL_PCD_EP_DB_Transmit+0x738>
 8006a92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a94:	3301      	adds	r3, #1
 8006a96:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	029b      	lsls	r3, r3, #10
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006aac:	801a      	strh	r2, [r3, #0]
 8006aae:	e019      	b.n	8006ae4 <HAL_PCD_EP_DB_Transmit+0x784>
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	785b      	ldrb	r3, [r3, #1]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d115      	bne.n	8006ae4 <HAL_PCD_EP_DB_Transmit+0x784>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ac6:	4413      	add	r3, r2
 8006ac8:	657b      	str	r3, [r7, #84]	; 0x54
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	011a      	lsls	r2, r3, #4
 8006ad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ad8:	653b      	str	r3, [r7, #80]	; 0x50
 8006ada:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ae2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6818      	ldr	r0, [r3, #0]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	6959      	ldr	r1, [r3, #20]
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	895a      	ldrh	r2, [r3, #10]
 8006af0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	f003 fc71 	bl	800a3dc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	461a      	mov	r2, r3
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b14:	82bb      	strh	r3, [r7, #20]
 8006b16:	8abb      	ldrh	r3, [r7, #20]
 8006b18:	f083 0310 	eor.w	r3, r3, #16
 8006b1c:	82bb      	strh	r3, [r7, #20]
 8006b1e:	8abb      	ldrh	r3, [r7, #20]
 8006b20:	f083 0320 	eor.w	r3, r3, #32
 8006b24:	82bb      	strh	r3, [r7, #20]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	441a      	add	r2, r3
 8006b34:	8abb      	ldrh	r3, [r7, #20]
 8006b36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3790      	adds	r7, #144	; 0x90
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b087      	sub	sp, #28
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	607b      	str	r3, [r7, #4]
 8006b5e:	460b      	mov	r3, r1
 8006b60:	817b      	strh	r3, [r7, #10]
 8006b62:	4613      	mov	r3, r2
 8006b64:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006b66:	897b      	ldrh	r3, [r7, #10]
 8006b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00b      	beq.n	8006b8a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b72:	897b      	ldrh	r3, [r7, #10]
 8006b74:	f003 0207 	and.w	r2, r3, #7
 8006b78:	4613      	mov	r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	4413      	add	r3, r2
 8006b7e:	00db      	lsls	r3, r3, #3
 8006b80:	3310      	adds	r3, #16
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	4413      	add	r3, r2
 8006b86:	617b      	str	r3, [r7, #20]
 8006b88:	e009      	b.n	8006b9e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006b8a:	897a      	ldrh	r2, [r7, #10]
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4413      	add	r3, r2
 8006b92:	00db      	lsls	r3, r3, #3
 8006b94:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006b9e:	893b      	ldrh	r3, [r7, #8]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d107      	bne.n	8006bb4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	80da      	strh	r2, [r3, #6]
 8006bb2:	e00b      	b.n	8006bcc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	0c1b      	lsrs	r3, r3, #16
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	371c      	adds	r7, #28
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bc80      	pop	{r7}
 8006bd6:	4770      	bx	lr

08006bd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b086      	sub	sp, #24
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d101      	bne.n	8006bea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e26c      	b.n	80070c4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f000 8087 	beq.w	8006d06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006bf8:	4b92      	ldr	r3, [pc, #584]	; (8006e44 <HAL_RCC_OscConfig+0x26c>)
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	f003 030c 	and.w	r3, r3, #12
 8006c00:	2b04      	cmp	r3, #4
 8006c02:	d00c      	beq.n	8006c1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006c04:	4b8f      	ldr	r3, [pc, #572]	; (8006e44 <HAL_RCC_OscConfig+0x26c>)
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f003 030c 	and.w	r3, r3, #12
 8006c0c:	2b08      	cmp	r3, #8
 8006c0e:	d112      	bne.n	8006c36 <HAL_RCC_OscConfig+0x5e>
 8006c10:	4b8c      	ldr	r3, [pc, #560]	; (8006e44 <HAL_RCC_OscConfig+0x26c>)
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c1c:	d10b      	bne.n	8006c36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c1e:	4b89      	ldr	r3, [pc, #548]	; (8006e44 <HAL_RCC_OscConfig+0x26c>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d06c      	beq.n	8006d04 <HAL_RCC_OscConfig+0x12c>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d168      	bne.n	8006d04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e246      	b.n	80070c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c3e:	d106      	bne.n	8006c4e <HAL_RCC_OscConfig+0x76>
 8006c40:	4b80      	ldr	r3, [pc, #512]	; (8006e44 <HAL_RCC_OscConfig+0x26c>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a7f      	ldr	r2, [pc, #508]	; (8006e44 <HAL_RCC_OscConfig+0x26c>)
 8006c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c4a:	6013      	str	r3, [r2, #0]
 8006c4c:	e02e      	b.n	8006cac <HAL_RCC_OscConfig+0xd4>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d10c      	bne.n	8006c70 <HAL_RCC_OscConfig+0x98>
 8006c56:	4b7b      	ldr	r3, [pc, #492]	; (8006e44 <HAL_RCC_OscConfig+0x26c>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a7a      	ldr	r2, [pc, #488]	; (8006e44 <HAL_RCC_OscConfig+0x26c>)
 8006c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c60:	6013      	str	r3, [r2, #0]
 8006c62:	4b78      	ldr	r3, [pc, #480]	; (8006e44 <HAL_RCC_OscConfig+0x26c>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a77      	ldr	r2, [pc, #476]	; (8006e44 <HAL_RCC_OscConfig+0x26c>)
 8006c68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c6c:	6013      	str	r3, [r2, #0]
 8006c6e:	e01d      	b.n	8006cac <HAL_RCC_OscConfig+0xd4>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c78:	d10c      	bne.n	8006c94 <HAL_RCC_OscConfig+0xbc>
 8006c7a:	4b72      	ldr	r3, [pc, #456]	; (8006e44 <HAL_RCC_OscConfig+0x26c>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a71      	ldr	r2, [pc, #452]	; (8006e44 <HAL_RCC_OscConfig+0x26c>)
 8006c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c84:	6013      	str	r3, [r2, #0]
 8006c86:	4b6f      	ldr	r3, [pc, #444]	; (8006e44 <HAL_RCC_OscConfig+0x26c>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a6e      	ldr	r2, [pc, #440]	; (8006e44 <HAL_RCC_OscConfig+0x26c>)
 8006c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c90:	6013      	str	r3, [r2, #0]
 8006c92:	e00b      	b.n	8006cac <HAL_RCC_OscConfig+0xd4>
 8006c94:	4b6b      	ldr	r3, [pc, #428]	; (8006e44 <HAL_RCC_OscConfig+0x26c>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a6a      	ldr	r2, [pc, #424]	; (8006e44 <HAL_RCC_OscConfig+0x26c>)
 8006c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c9e:	6013      	str	r3, [r2, #0]
 8006ca0:	4b68      	ldr	r3, [pc, #416]	; (8006e44 <HAL_RCC_OscConfig+0x26c>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a67      	ldr	r2, [pc, #412]	; (8006e44 <HAL_RCC_OscConfig+0x26c>)
 8006ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006caa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d013      	beq.n	8006cdc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cb4:	f7fc fd58 	bl	8003768 <HAL_GetTick>
 8006cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cba:	e008      	b.n	8006cce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cbc:	f7fc fd54 	bl	8003768 <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	2b64      	cmp	r3, #100	; 0x64
 8006cc8:	d901      	bls.n	8006cce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e1fa      	b.n	80070c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cce:	4b5d      	ldr	r3, [pc, #372]	; (8006e44 <HAL_RCC_OscConfig+0x26c>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d0f0      	beq.n	8006cbc <HAL_RCC_OscConfig+0xe4>
 8006cda:	e014      	b.n	8006d06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cdc:	f7fc fd44 	bl	8003768 <HAL_GetTick>
 8006ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ce2:	e008      	b.n	8006cf6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ce4:	f7fc fd40 	bl	8003768 <HAL_GetTick>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	2b64      	cmp	r3, #100	; 0x64
 8006cf0:	d901      	bls.n	8006cf6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e1e6      	b.n	80070c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cf6:	4b53      	ldr	r3, [pc, #332]	; (8006e44 <HAL_RCC_OscConfig+0x26c>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1f0      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x10c>
 8006d02:	e000      	b.n	8006d06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d063      	beq.n	8006dda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d12:	4b4c      	ldr	r3, [pc, #304]	; (8006e44 <HAL_RCC_OscConfig+0x26c>)
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f003 030c 	and.w	r3, r3, #12
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00b      	beq.n	8006d36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006d1e:	4b49      	ldr	r3, [pc, #292]	; (8006e44 <HAL_RCC_OscConfig+0x26c>)
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f003 030c 	and.w	r3, r3, #12
 8006d26:	2b08      	cmp	r3, #8
 8006d28:	d11c      	bne.n	8006d64 <HAL_RCC_OscConfig+0x18c>
 8006d2a:	4b46      	ldr	r3, [pc, #280]	; (8006e44 <HAL_RCC_OscConfig+0x26c>)
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d116      	bne.n	8006d64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d36:	4b43      	ldr	r3, [pc, #268]	; (8006e44 <HAL_RCC_OscConfig+0x26c>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0302 	and.w	r3, r3, #2
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d005      	beq.n	8006d4e <HAL_RCC_OscConfig+0x176>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d001      	beq.n	8006d4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e1ba      	b.n	80070c4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d4e:	4b3d      	ldr	r3, [pc, #244]	; (8006e44 <HAL_RCC_OscConfig+0x26c>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	00db      	lsls	r3, r3, #3
 8006d5c:	4939      	ldr	r1, [pc, #228]	; (8006e44 <HAL_RCC_OscConfig+0x26c>)
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d62:	e03a      	b.n	8006dda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d020      	beq.n	8006dae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d6c:	4b36      	ldr	r3, [pc, #216]	; (8006e48 <HAL_RCC_OscConfig+0x270>)
 8006d6e:	2201      	movs	r2, #1
 8006d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d72:	f7fc fcf9 	bl	8003768 <HAL_GetTick>
 8006d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d78:	e008      	b.n	8006d8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d7a:	f7fc fcf5 	bl	8003768 <HAL_GetTick>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d901      	bls.n	8006d8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e19b      	b.n	80070c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d8c:	4b2d      	ldr	r3, [pc, #180]	; (8006e44 <HAL_RCC_OscConfig+0x26c>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0302 	and.w	r3, r3, #2
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d0f0      	beq.n	8006d7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d98:	4b2a      	ldr	r3, [pc, #168]	; (8006e44 <HAL_RCC_OscConfig+0x26c>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	695b      	ldr	r3, [r3, #20]
 8006da4:	00db      	lsls	r3, r3, #3
 8006da6:	4927      	ldr	r1, [pc, #156]	; (8006e44 <HAL_RCC_OscConfig+0x26c>)
 8006da8:	4313      	orrs	r3, r2
 8006daa:	600b      	str	r3, [r1, #0]
 8006dac:	e015      	b.n	8006dda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006dae:	4b26      	ldr	r3, [pc, #152]	; (8006e48 <HAL_RCC_OscConfig+0x270>)
 8006db0:	2200      	movs	r2, #0
 8006db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006db4:	f7fc fcd8 	bl	8003768 <HAL_GetTick>
 8006db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006dba:	e008      	b.n	8006dce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dbc:	f7fc fcd4 	bl	8003768 <HAL_GetTick>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d901      	bls.n	8006dce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e17a      	b.n	80070c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006dce:	4b1d      	ldr	r3, [pc, #116]	; (8006e44 <HAL_RCC_OscConfig+0x26c>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1f0      	bne.n	8006dbc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0308 	and.w	r3, r3, #8
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d03a      	beq.n	8006e5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d019      	beq.n	8006e22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006dee:	4b17      	ldr	r3, [pc, #92]	; (8006e4c <HAL_RCC_OscConfig+0x274>)
 8006df0:	2201      	movs	r2, #1
 8006df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006df4:	f7fc fcb8 	bl	8003768 <HAL_GetTick>
 8006df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dfa:	e008      	b.n	8006e0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006dfc:	f7fc fcb4 	bl	8003768 <HAL_GetTick>
 8006e00:	4602      	mov	r2, r0
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d901      	bls.n	8006e0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e15a      	b.n	80070c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e0e:	4b0d      	ldr	r3, [pc, #52]	; (8006e44 <HAL_RCC_OscConfig+0x26c>)
 8006e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e12:	f003 0302 	and.w	r3, r3, #2
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d0f0      	beq.n	8006dfc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006e1a:	2001      	movs	r0, #1
 8006e1c:	f000 facc 	bl	80073b8 <RCC_Delay>
 8006e20:	e01c      	b.n	8006e5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e22:	4b0a      	ldr	r3, [pc, #40]	; (8006e4c <HAL_RCC_OscConfig+0x274>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e28:	f7fc fc9e 	bl	8003768 <HAL_GetTick>
 8006e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e2e:	e00f      	b.n	8006e50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e30:	f7fc fc9a 	bl	8003768 <HAL_GetTick>
 8006e34:	4602      	mov	r2, r0
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d908      	bls.n	8006e50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e140      	b.n	80070c4 <HAL_RCC_OscConfig+0x4ec>
 8006e42:	bf00      	nop
 8006e44:	40021000 	.word	0x40021000
 8006e48:	42420000 	.word	0x42420000
 8006e4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e50:	4b9e      	ldr	r3, [pc, #632]	; (80070cc <HAL_RCC_OscConfig+0x4f4>)
 8006e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e54:	f003 0302 	and.w	r3, r3, #2
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1e9      	bne.n	8006e30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0304 	and.w	r3, r3, #4
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f000 80a6 	beq.w	8006fb6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e6e:	4b97      	ldr	r3, [pc, #604]	; (80070cc <HAL_RCC_OscConfig+0x4f4>)
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10d      	bne.n	8006e96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e7a:	4b94      	ldr	r3, [pc, #592]	; (80070cc <HAL_RCC_OscConfig+0x4f4>)
 8006e7c:	69db      	ldr	r3, [r3, #28]
 8006e7e:	4a93      	ldr	r2, [pc, #588]	; (80070cc <HAL_RCC_OscConfig+0x4f4>)
 8006e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e84:	61d3      	str	r3, [r2, #28]
 8006e86:	4b91      	ldr	r3, [pc, #580]	; (80070cc <HAL_RCC_OscConfig+0x4f4>)
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e8e:	60bb      	str	r3, [r7, #8]
 8006e90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e92:	2301      	movs	r3, #1
 8006e94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e96:	4b8e      	ldr	r3, [pc, #568]	; (80070d0 <HAL_RCC_OscConfig+0x4f8>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d118      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ea2:	4b8b      	ldr	r3, [pc, #556]	; (80070d0 <HAL_RCC_OscConfig+0x4f8>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a8a      	ldr	r2, [pc, #552]	; (80070d0 <HAL_RCC_OscConfig+0x4f8>)
 8006ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006eae:	f7fc fc5b 	bl	8003768 <HAL_GetTick>
 8006eb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006eb4:	e008      	b.n	8006ec8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006eb6:	f7fc fc57 	bl	8003768 <HAL_GetTick>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	2b64      	cmp	r3, #100	; 0x64
 8006ec2:	d901      	bls.n	8006ec8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e0fd      	b.n	80070c4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ec8:	4b81      	ldr	r3, [pc, #516]	; (80070d0 <HAL_RCC_OscConfig+0x4f8>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d0f0      	beq.n	8006eb6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d106      	bne.n	8006eea <HAL_RCC_OscConfig+0x312>
 8006edc:	4b7b      	ldr	r3, [pc, #492]	; (80070cc <HAL_RCC_OscConfig+0x4f4>)
 8006ede:	6a1b      	ldr	r3, [r3, #32]
 8006ee0:	4a7a      	ldr	r2, [pc, #488]	; (80070cc <HAL_RCC_OscConfig+0x4f4>)
 8006ee2:	f043 0301 	orr.w	r3, r3, #1
 8006ee6:	6213      	str	r3, [r2, #32]
 8006ee8:	e02d      	b.n	8006f46 <HAL_RCC_OscConfig+0x36e>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10c      	bne.n	8006f0c <HAL_RCC_OscConfig+0x334>
 8006ef2:	4b76      	ldr	r3, [pc, #472]	; (80070cc <HAL_RCC_OscConfig+0x4f4>)
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
 8006ef6:	4a75      	ldr	r2, [pc, #468]	; (80070cc <HAL_RCC_OscConfig+0x4f4>)
 8006ef8:	f023 0301 	bic.w	r3, r3, #1
 8006efc:	6213      	str	r3, [r2, #32]
 8006efe:	4b73      	ldr	r3, [pc, #460]	; (80070cc <HAL_RCC_OscConfig+0x4f4>)
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	4a72      	ldr	r2, [pc, #456]	; (80070cc <HAL_RCC_OscConfig+0x4f4>)
 8006f04:	f023 0304 	bic.w	r3, r3, #4
 8006f08:	6213      	str	r3, [r2, #32]
 8006f0a:	e01c      	b.n	8006f46 <HAL_RCC_OscConfig+0x36e>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	2b05      	cmp	r3, #5
 8006f12:	d10c      	bne.n	8006f2e <HAL_RCC_OscConfig+0x356>
 8006f14:	4b6d      	ldr	r3, [pc, #436]	; (80070cc <HAL_RCC_OscConfig+0x4f4>)
 8006f16:	6a1b      	ldr	r3, [r3, #32]
 8006f18:	4a6c      	ldr	r2, [pc, #432]	; (80070cc <HAL_RCC_OscConfig+0x4f4>)
 8006f1a:	f043 0304 	orr.w	r3, r3, #4
 8006f1e:	6213      	str	r3, [r2, #32]
 8006f20:	4b6a      	ldr	r3, [pc, #424]	; (80070cc <HAL_RCC_OscConfig+0x4f4>)
 8006f22:	6a1b      	ldr	r3, [r3, #32]
 8006f24:	4a69      	ldr	r2, [pc, #420]	; (80070cc <HAL_RCC_OscConfig+0x4f4>)
 8006f26:	f043 0301 	orr.w	r3, r3, #1
 8006f2a:	6213      	str	r3, [r2, #32]
 8006f2c:	e00b      	b.n	8006f46 <HAL_RCC_OscConfig+0x36e>
 8006f2e:	4b67      	ldr	r3, [pc, #412]	; (80070cc <HAL_RCC_OscConfig+0x4f4>)
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	4a66      	ldr	r2, [pc, #408]	; (80070cc <HAL_RCC_OscConfig+0x4f4>)
 8006f34:	f023 0301 	bic.w	r3, r3, #1
 8006f38:	6213      	str	r3, [r2, #32]
 8006f3a:	4b64      	ldr	r3, [pc, #400]	; (80070cc <HAL_RCC_OscConfig+0x4f4>)
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	4a63      	ldr	r2, [pc, #396]	; (80070cc <HAL_RCC_OscConfig+0x4f4>)
 8006f40:	f023 0304 	bic.w	r3, r3, #4
 8006f44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d015      	beq.n	8006f7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f4e:	f7fc fc0b 	bl	8003768 <HAL_GetTick>
 8006f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f54:	e00a      	b.n	8006f6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f56:	f7fc fc07 	bl	8003768 <HAL_GetTick>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	1ad3      	subs	r3, r2, r3
 8006f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d901      	bls.n	8006f6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e0ab      	b.n	80070c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f6c:	4b57      	ldr	r3, [pc, #348]	; (80070cc <HAL_RCC_OscConfig+0x4f4>)
 8006f6e:	6a1b      	ldr	r3, [r3, #32]
 8006f70:	f003 0302 	and.w	r3, r3, #2
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d0ee      	beq.n	8006f56 <HAL_RCC_OscConfig+0x37e>
 8006f78:	e014      	b.n	8006fa4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f7a:	f7fc fbf5 	bl	8003768 <HAL_GetTick>
 8006f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f80:	e00a      	b.n	8006f98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f82:	f7fc fbf1 	bl	8003768 <HAL_GetTick>
 8006f86:	4602      	mov	r2, r0
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d901      	bls.n	8006f98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e095      	b.n	80070c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f98:	4b4c      	ldr	r3, [pc, #304]	; (80070cc <HAL_RCC_OscConfig+0x4f4>)
 8006f9a:	6a1b      	ldr	r3, [r3, #32]
 8006f9c:	f003 0302 	and.w	r3, r3, #2
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1ee      	bne.n	8006f82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006fa4:	7dfb      	ldrb	r3, [r7, #23]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d105      	bne.n	8006fb6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006faa:	4b48      	ldr	r3, [pc, #288]	; (80070cc <HAL_RCC_OscConfig+0x4f4>)
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	4a47      	ldr	r2, [pc, #284]	; (80070cc <HAL_RCC_OscConfig+0x4f4>)
 8006fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fb4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	69db      	ldr	r3, [r3, #28]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f000 8081 	beq.w	80070c2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006fc0:	4b42      	ldr	r3, [pc, #264]	; (80070cc <HAL_RCC_OscConfig+0x4f4>)
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f003 030c 	and.w	r3, r3, #12
 8006fc8:	2b08      	cmp	r3, #8
 8006fca:	d061      	beq.n	8007090 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	69db      	ldr	r3, [r3, #28]
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d146      	bne.n	8007062 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fd4:	4b3f      	ldr	r3, [pc, #252]	; (80070d4 <HAL_RCC_OscConfig+0x4fc>)
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fda:	f7fc fbc5 	bl	8003768 <HAL_GetTick>
 8006fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006fe0:	e008      	b.n	8006ff4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fe2:	f7fc fbc1 	bl	8003768 <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d901      	bls.n	8006ff4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e067      	b.n	80070c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ff4:	4b35      	ldr	r3, [pc, #212]	; (80070cc <HAL_RCC_OscConfig+0x4f4>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1f0      	bne.n	8006fe2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a1b      	ldr	r3, [r3, #32]
 8007004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007008:	d108      	bne.n	800701c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800700a:	4b30      	ldr	r3, [pc, #192]	; (80070cc <HAL_RCC_OscConfig+0x4f4>)
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	492d      	ldr	r1, [pc, #180]	; (80070cc <HAL_RCC_OscConfig+0x4f4>)
 8007018:	4313      	orrs	r3, r2
 800701a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800701c:	4b2b      	ldr	r3, [pc, #172]	; (80070cc <HAL_RCC_OscConfig+0x4f4>)
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a19      	ldr	r1, [r3, #32]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702c:	430b      	orrs	r3, r1
 800702e:	4927      	ldr	r1, [pc, #156]	; (80070cc <HAL_RCC_OscConfig+0x4f4>)
 8007030:	4313      	orrs	r3, r2
 8007032:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007034:	4b27      	ldr	r3, [pc, #156]	; (80070d4 <HAL_RCC_OscConfig+0x4fc>)
 8007036:	2201      	movs	r2, #1
 8007038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800703a:	f7fc fb95 	bl	8003768 <HAL_GetTick>
 800703e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007040:	e008      	b.n	8007054 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007042:	f7fc fb91 	bl	8003768 <HAL_GetTick>
 8007046:	4602      	mov	r2, r0
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	2b02      	cmp	r3, #2
 800704e:	d901      	bls.n	8007054 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	e037      	b.n	80070c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007054:	4b1d      	ldr	r3, [pc, #116]	; (80070cc <HAL_RCC_OscConfig+0x4f4>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800705c:	2b00      	cmp	r3, #0
 800705e:	d0f0      	beq.n	8007042 <HAL_RCC_OscConfig+0x46a>
 8007060:	e02f      	b.n	80070c2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007062:	4b1c      	ldr	r3, [pc, #112]	; (80070d4 <HAL_RCC_OscConfig+0x4fc>)
 8007064:	2200      	movs	r2, #0
 8007066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007068:	f7fc fb7e 	bl	8003768 <HAL_GetTick>
 800706c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800706e:	e008      	b.n	8007082 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007070:	f7fc fb7a 	bl	8003768 <HAL_GetTick>
 8007074:	4602      	mov	r2, r0
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	2b02      	cmp	r3, #2
 800707c:	d901      	bls.n	8007082 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e020      	b.n	80070c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007082:	4b12      	ldr	r3, [pc, #72]	; (80070cc <HAL_RCC_OscConfig+0x4f4>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1f0      	bne.n	8007070 <HAL_RCC_OscConfig+0x498>
 800708e:	e018      	b.n	80070c2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	69db      	ldr	r3, [r3, #28]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d101      	bne.n	800709c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e013      	b.n	80070c4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800709c:	4b0b      	ldr	r3, [pc, #44]	; (80070cc <HAL_RCC_OscConfig+0x4f4>)
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a1b      	ldr	r3, [r3, #32]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d106      	bne.n	80070be <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d001      	beq.n	80070c2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e000      	b.n	80070c4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3718      	adds	r7, #24
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	40021000 	.word	0x40021000
 80070d0:	40007000 	.word	0x40007000
 80070d4:	42420060 	.word	0x42420060

080070d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d101      	bne.n	80070ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e0d0      	b.n	800728e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80070ec:	4b6a      	ldr	r3, [pc, #424]	; (8007298 <HAL_RCC_ClockConfig+0x1c0>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0307 	and.w	r3, r3, #7
 80070f4:	683a      	ldr	r2, [r7, #0]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d910      	bls.n	800711c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070fa:	4b67      	ldr	r3, [pc, #412]	; (8007298 <HAL_RCC_ClockConfig+0x1c0>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f023 0207 	bic.w	r2, r3, #7
 8007102:	4965      	ldr	r1, [pc, #404]	; (8007298 <HAL_RCC_ClockConfig+0x1c0>)
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	4313      	orrs	r3, r2
 8007108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800710a:	4b63      	ldr	r3, [pc, #396]	; (8007298 <HAL_RCC_ClockConfig+0x1c0>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0307 	and.w	r3, r3, #7
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	429a      	cmp	r2, r3
 8007116:	d001      	beq.n	800711c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e0b8      	b.n	800728e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0302 	and.w	r3, r3, #2
 8007124:	2b00      	cmp	r3, #0
 8007126:	d020      	beq.n	800716a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0304 	and.w	r3, r3, #4
 8007130:	2b00      	cmp	r3, #0
 8007132:	d005      	beq.n	8007140 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007134:	4b59      	ldr	r3, [pc, #356]	; (800729c <HAL_RCC_ClockConfig+0x1c4>)
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	4a58      	ldr	r2, [pc, #352]	; (800729c <HAL_RCC_ClockConfig+0x1c4>)
 800713a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800713e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 0308 	and.w	r3, r3, #8
 8007148:	2b00      	cmp	r3, #0
 800714a:	d005      	beq.n	8007158 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800714c:	4b53      	ldr	r3, [pc, #332]	; (800729c <HAL_RCC_ClockConfig+0x1c4>)
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	4a52      	ldr	r2, [pc, #328]	; (800729c <HAL_RCC_ClockConfig+0x1c4>)
 8007152:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007156:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007158:	4b50      	ldr	r3, [pc, #320]	; (800729c <HAL_RCC_ClockConfig+0x1c4>)
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	494d      	ldr	r1, [pc, #308]	; (800729c <HAL_RCC_ClockConfig+0x1c4>)
 8007166:	4313      	orrs	r3, r2
 8007168:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	2b00      	cmp	r3, #0
 8007174:	d040      	beq.n	80071f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	2b01      	cmp	r3, #1
 800717c:	d107      	bne.n	800718e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800717e:	4b47      	ldr	r3, [pc, #284]	; (800729c <HAL_RCC_ClockConfig+0x1c4>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d115      	bne.n	80071b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e07f      	b.n	800728e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	2b02      	cmp	r3, #2
 8007194:	d107      	bne.n	80071a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007196:	4b41      	ldr	r3, [pc, #260]	; (800729c <HAL_RCC_ClockConfig+0x1c4>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d109      	bne.n	80071b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e073      	b.n	800728e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071a6:	4b3d      	ldr	r3, [pc, #244]	; (800729c <HAL_RCC_ClockConfig+0x1c4>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0302 	and.w	r3, r3, #2
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d101      	bne.n	80071b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e06b      	b.n	800728e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80071b6:	4b39      	ldr	r3, [pc, #228]	; (800729c <HAL_RCC_ClockConfig+0x1c4>)
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f023 0203 	bic.w	r2, r3, #3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	4936      	ldr	r1, [pc, #216]	; (800729c <HAL_RCC_ClockConfig+0x1c4>)
 80071c4:	4313      	orrs	r3, r2
 80071c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80071c8:	f7fc face 	bl	8003768 <HAL_GetTick>
 80071cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071ce:	e00a      	b.n	80071e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071d0:	f7fc faca 	bl	8003768 <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	f241 3288 	movw	r2, #5000	; 0x1388
 80071de:	4293      	cmp	r3, r2
 80071e0:	d901      	bls.n	80071e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e053      	b.n	800728e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071e6:	4b2d      	ldr	r3, [pc, #180]	; (800729c <HAL_RCC_ClockConfig+0x1c4>)
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	f003 020c 	and.w	r2, r3, #12
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d1eb      	bne.n	80071d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071f8:	4b27      	ldr	r3, [pc, #156]	; (8007298 <HAL_RCC_ClockConfig+0x1c0>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0307 	and.w	r3, r3, #7
 8007200:	683a      	ldr	r2, [r7, #0]
 8007202:	429a      	cmp	r2, r3
 8007204:	d210      	bcs.n	8007228 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007206:	4b24      	ldr	r3, [pc, #144]	; (8007298 <HAL_RCC_ClockConfig+0x1c0>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f023 0207 	bic.w	r2, r3, #7
 800720e:	4922      	ldr	r1, [pc, #136]	; (8007298 <HAL_RCC_ClockConfig+0x1c0>)
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	4313      	orrs	r3, r2
 8007214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007216:	4b20      	ldr	r3, [pc, #128]	; (8007298 <HAL_RCC_ClockConfig+0x1c0>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0307 	and.w	r3, r3, #7
 800721e:	683a      	ldr	r2, [r7, #0]
 8007220:	429a      	cmp	r2, r3
 8007222:	d001      	beq.n	8007228 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	e032      	b.n	800728e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 0304 	and.w	r3, r3, #4
 8007230:	2b00      	cmp	r3, #0
 8007232:	d008      	beq.n	8007246 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007234:	4b19      	ldr	r3, [pc, #100]	; (800729c <HAL_RCC_ClockConfig+0x1c4>)
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	4916      	ldr	r1, [pc, #88]	; (800729c <HAL_RCC_ClockConfig+0x1c4>)
 8007242:	4313      	orrs	r3, r2
 8007244:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 0308 	and.w	r3, r3, #8
 800724e:	2b00      	cmp	r3, #0
 8007250:	d009      	beq.n	8007266 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007252:	4b12      	ldr	r3, [pc, #72]	; (800729c <HAL_RCC_ClockConfig+0x1c4>)
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	00db      	lsls	r3, r3, #3
 8007260:	490e      	ldr	r1, [pc, #56]	; (800729c <HAL_RCC_ClockConfig+0x1c4>)
 8007262:	4313      	orrs	r3, r2
 8007264:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007266:	f000 f821 	bl	80072ac <HAL_RCC_GetSysClockFreq>
 800726a:	4602      	mov	r2, r0
 800726c:	4b0b      	ldr	r3, [pc, #44]	; (800729c <HAL_RCC_ClockConfig+0x1c4>)
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	091b      	lsrs	r3, r3, #4
 8007272:	f003 030f 	and.w	r3, r3, #15
 8007276:	490a      	ldr	r1, [pc, #40]	; (80072a0 <HAL_RCC_ClockConfig+0x1c8>)
 8007278:	5ccb      	ldrb	r3, [r1, r3]
 800727a:	fa22 f303 	lsr.w	r3, r2, r3
 800727e:	4a09      	ldr	r2, [pc, #36]	; (80072a4 <HAL_RCC_ClockConfig+0x1cc>)
 8007280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007282:	4b09      	ldr	r3, [pc, #36]	; (80072a8 <HAL_RCC_ClockConfig+0x1d0>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4618      	mov	r0, r3
 8007288:	f7fc fa2c 	bl	80036e4 <HAL_InitTick>

  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	40022000 	.word	0x40022000
 800729c:	40021000 	.word	0x40021000
 80072a0:	0800eae8 	.word	0x0800eae8
 80072a4:	20000008 	.word	0x20000008
 80072a8:	2000000c 	.word	0x2000000c

080072ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b087      	sub	sp, #28
 80072b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80072b2:	2300      	movs	r3, #0
 80072b4:	60fb      	str	r3, [r7, #12]
 80072b6:	2300      	movs	r3, #0
 80072b8:	60bb      	str	r3, [r7, #8]
 80072ba:	2300      	movs	r3, #0
 80072bc:	617b      	str	r3, [r7, #20]
 80072be:	2300      	movs	r3, #0
 80072c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80072c2:	2300      	movs	r3, #0
 80072c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80072c6:	4b1e      	ldr	r3, [pc, #120]	; (8007340 <HAL_RCC_GetSysClockFreq+0x94>)
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f003 030c 	and.w	r3, r3, #12
 80072d2:	2b04      	cmp	r3, #4
 80072d4:	d002      	beq.n	80072dc <HAL_RCC_GetSysClockFreq+0x30>
 80072d6:	2b08      	cmp	r3, #8
 80072d8:	d003      	beq.n	80072e2 <HAL_RCC_GetSysClockFreq+0x36>
 80072da:	e027      	b.n	800732c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80072dc:	4b19      	ldr	r3, [pc, #100]	; (8007344 <HAL_RCC_GetSysClockFreq+0x98>)
 80072de:	613b      	str	r3, [r7, #16]
      break;
 80072e0:	e027      	b.n	8007332 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	0c9b      	lsrs	r3, r3, #18
 80072e6:	f003 030f 	and.w	r3, r3, #15
 80072ea:	4a17      	ldr	r2, [pc, #92]	; (8007348 <HAL_RCC_GetSysClockFreq+0x9c>)
 80072ec:	5cd3      	ldrb	r3, [r2, r3]
 80072ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d010      	beq.n	800731c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80072fa:	4b11      	ldr	r3, [pc, #68]	; (8007340 <HAL_RCC_GetSysClockFreq+0x94>)
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	0c5b      	lsrs	r3, r3, #17
 8007300:	f003 0301 	and.w	r3, r3, #1
 8007304:	4a11      	ldr	r2, [pc, #68]	; (800734c <HAL_RCC_GetSysClockFreq+0xa0>)
 8007306:	5cd3      	ldrb	r3, [r2, r3]
 8007308:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a0d      	ldr	r2, [pc, #52]	; (8007344 <HAL_RCC_GetSysClockFreq+0x98>)
 800730e:	fb02 f203 	mul.w	r2, r2, r3
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	fbb2 f3f3 	udiv	r3, r2, r3
 8007318:	617b      	str	r3, [r7, #20]
 800731a:	e004      	b.n	8007326 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a0c      	ldr	r2, [pc, #48]	; (8007350 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007320:	fb02 f303 	mul.w	r3, r2, r3
 8007324:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	613b      	str	r3, [r7, #16]
      break;
 800732a:	e002      	b.n	8007332 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800732c:	4b05      	ldr	r3, [pc, #20]	; (8007344 <HAL_RCC_GetSysClockFreq+0x98>)
 800732e:	613b      	str	r3, [r7, #16]
      break;
 8007330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007332:	693b      	ldr	r3, [r7, #16]
}
 8007334:	4618      	mov	r0, r3
 8007336:	371c      	adds	r7, #28
 8007338:	46bd      	mov	sp, r7
 800733a:	bc80      	pop	{r7}
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	40021000 	.word	0x40021000
 8007344:	007a1200 	.word	0x007a1200
 8007348:	0800eb00 	.word	0x0800eb00
 800734c:	0800eb10 	.word	0x0800eb10
 8007350:	003d0900 	.word	0x003d0900

08007354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007354:	b480      	push	{r7}
 8007356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007358:	4b02      	ldr	r3, [pc, #8]	; (8007364 <HAL_RCC_GetHCLKFreq+0x10>)
 800735a:	681b      	ldr	r3, [r3, #0]
}
 800735c:	4618      	mov	r0, r3
 800735e:	46bd      	mov	sp, r7
 8007360:	bc80      	pop	{r7}
 8007362:	4770      	bx	lr
 8007364:	20000008 	.word	0x20000008

08007368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800736c:	f7ff fff2 	bl	8007354 <HAL_RCC_GetHCLKFreq>
 8007370:	4602      	mov	r2, r0
 8007372:	4b05      	ldr	r3, [pc, #20]	; (8007388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	0a1b      	lsrs	r3, r3, #8
 8007378:	f003 0307 	and.w	r3, r3, #7
 800737c:	4903      	ldr	r1, [pc, #12]	; (800738c <HAL_RCC_GetPCLK1Freq+0x24>)
 800737e:	5ccb      	ldrb	r3, [r1, r3]
 8007380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007384:	4618      	mov	r0, r3
 8007386:	bd80      	pop	{r7, pc}
 8007388:	40021000 	.word	0x40021000
 800738c:	0800eaf8 	.word	0x0800eaf8

08007390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007394:	f7ff ffde 	bl	8007354 <HAL_RCC_GetHCLKFreq>
 8007398:	4602      	mov	r2, r0
 800739a:	4b05      	ldr	r3, [pc, #20]	; (80073b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	0adb      	lsrs	r3, r3, #11
 80073a0:	f003 0307 	and.w	r3, r3, #7
 80073a4:	4903      	ldr	r1, [pc, #12]	; (80073b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80073a6:	5ccb      	ldrb	r3, [r1, r3]
 80073a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	40021000 	.word	0x40021000
 80073b4:	0800eaf8 	.word	0x0800eaf8

080073b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80073c0:	4b0a      	ldr	r3, [pc, #40]	; (80073ec <RCC_Delay+0x34>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a0a      	ldr	r2, [pc, #40]	; (80073f0 <RCC_Delay+0x38>)
 80073c6:	fba2 2303 	umull	r2, r3, r2, r3
 80073ca:	0a5b      	lsrs	r3, r3, #9
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	fb02 f303 	mul.w	r3, r2, r3
 80073d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80073d4:	bf00      	nop
  }
  while (Delay --);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	1e5a      	subs	r2, r3, #1
 80073da:	60fa      	str	r2, [r7, #12]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d1f9      	bne.n	80073d4 <RCC_Delay+0x1c>
}
 80073e0:	bf00      	nop
 80073e2:	bf00      	nop
 80073e4:	3714      	adds	r7, #20
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bc80      	pop	{r7}
 80073ea:	4770      	bx	lr
 80073ec:	20000008 	.word	0x20000008
 80073f0:	10624dd3 	.word	0x10624dd3

080073f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b086      	sub	sp, #24
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80073fc:	2300      	movs	r3, #0
 80073fe:	613b      	str	r3, [r7, #16]
 8007400:	2300      	movs	r3, #0
 8007402:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	2b00      	cmp	r3, #0
 800740e:	d07d      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007410:	2300      	movs	r3, #0
 8007412:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007414:	4b4f      	ldr	r3, [pc, #316]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007416:	69db      	ldr	r3, [r3, #28]
 8007418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10d      	bne.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007420:	4b4c      	ldr	r3, [pc, #304]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007422:	69db      	ldr	r3, [r3, #28]
 8007424:	4a4b      	ldr	r2, [pc, #300]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800742a:	61d3      	str	r3, [r2, #28]
 800742c:	4b49      	ldr	r3, [pc, #292]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800742e:	69db      	ldr	r3, [r3, #28]
 8007430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007434:	60bb      	str	r3, [r7, #8]
 8007436:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007438:	2301      	movs	r3, #1
 800743a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800743c:	4b46      	ldr	r3, [pc, #280]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007444:	2b00      	cmp	r3, #0
 8007446:	d118      	bne.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007448:	4b43      	ldr	r3, [pc, #268]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a42      	ldr	r2, [pc, #264]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800744e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007452:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007454:	f7fc f988 	bl	8003768 <HAL_GetTick>
 8007458:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800745a:	e008      	b.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800745c:	f7fc f984 	bl	8003768 <HAL_GetTick>
 8007460:	4602      	mov	r2, r0
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	2b64      	cmp	r3, #100	; 0x64
 8007468:	d901      	bls.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800746a:	2303      	movs	r3, #3
 800746c:	e06d      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800746e:	4b3a      	ldr	r3, [pc, #232]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007476:	2b00      	cmp	r3, #0
 8007478:	d0f0      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800747a:	4b36      	ldr	r3, [pc, #216]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800747c:	6a1b      	ldr	r3, [r3, #32]
 800747e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007482:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d02e      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	429a      	cmp	r2, r3
 8007496:	d027      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007498:	4b2e      	ldr	r3, [pc, #184]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800749a:	6a1b      	ldr	r3, [r3, #32]
 800749c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074a0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80074a2:	4b2e      	ldr	r3, [pc, #184]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80074a4:	2201      	movs	r2, #1
 80074a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80074a8:	4b2c      	ldr	r3, [pc, #176]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80074aa:	2200      	movs	r2, #0
 80074ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80074ae:	4a29      	ldr	r2, [pc, #164]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d014      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074be:	f7fc f953 	bl	8003768 <HAL_GetTick>
 80074c2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074c4:	e00a      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074c6:	f7fc f94f 	bl	8003768 <HAL_GetTick>
 80074ca:	4602      	mov	r2, r0
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d901      	bls.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	e036      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074dc:	4b1d      	ldr	r3, [pc, #116]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074de:	6a1b      	ldr	r3, [r3, #32]
 80074e0:	f003 0302 	and.w	r3, r3, #2
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d0ee      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074e8:	4b1a      	ldr	r3, [pc, #104]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074ea:	6a1b      	ldr	r3, [r3, #32]
 80074ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	4917      	ldr	r1, [pc, #92]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074f6:	4313      	orrs	r3, r2
 80074f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80074fa:	7dfb      	ldrb	r3, [r7, #23]
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d105      	bne.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007500:	4b14      	ldr	r3, [pc, #80]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007502:	69db      	ldr	r3, [r3, #28]
 8007504:	4a13      	ldr	r2, [pc, #76]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007506:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800750a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 0302 	and.w	r3, r3, #2
 8007514:	2b00      	cmp	r3, #0
 8007516:	d008      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007518:	4b0e      	ldr	r3, [pc, #56]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	490b      	ldr	r1, [pc, #44]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007526:	4313      	orrs	r3, r2
 8007528:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0310 	and.w	r3, r3, #16
 8007532:	2b00      	cmp	r3, #0
 8007534:	d008      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007536:	4b07      	ldr	r3, [pc, #28]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	4904      	ldr	r1, [pc, #16]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007544:	4313      	orrs	r3, r2
 8007546:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3718      	adds	r7, #24
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	40021000 	.word	0x40021000
 8007558:	40007000 	.word	0x40007000
 800755c:	42420440 	.word	0x42420440

08007560 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d101      	bne.n	8007572 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e041      	b.n	80075f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007578:	b2db      	uxtb	r3, r3
 800757a:	2b00      	cmp	r3, #0
 800757c:	d106      	bne.n	800758c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f7fb fe90 	bl	80032ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2202      	movs	r2, #2
 8007590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	3304      	adds	r3, #4
 800759c:	4619      	mov	r1, r3
 800759e:	4610      	mov	r0, r2
 80075a0:	f000 f992 	bl	80078c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3708      	adds	r7, #8
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
	...

08007600 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d109      	bne.n	8007624 <HAL_TIM_PWM_Start+0x24>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007616:	b2db      	uxtb	r3, r3
 8007618:	2b01      	cmp	r3, #1
 800761a:	bf14      	ite	ne
 800761c:	2301      	movne	r3, #1
 800761e:	2300      	moveq	r3, #0
 8007620:	b2db      	uxtb	r3, r3
 8007622:	e022      	b.n	800766a <HAL_TIM_PWM_Start+0x6a>
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	2b04      	cmp	r3, #4
 8007628:	d109      	bne.n	800763e <HAL_TIM_PWM_Start+0x3e>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b01      	cmp	r3, #1
 8007634:	bf14      	ite	ne
 8007636:	2301      	movne	r3, #1
 8007638:	2300      	moveq	r3, #0
 800763a:	b2db      	uxtb	r3, r3
 800763c:	e015      	b.n	800766a <HAL_TIM_PWM_Start+0x6a>
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	2b08      	cmp	r3, #8
 8007642:	d109      	bne.n	8007658 <HAL_TIM_PWM_Start+0x58>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800764a:	b2db      	uxtb	r3, r3
 800764c:	2b01      	cmp	r3, #1
 800764e:	bf14      	ite	ne
 8007650:	2301      	movne	r3, #1
 8007652:	2300      	moveq	r3, #0
 8007654:	b2db      	uxtb	r3, r3
 8007656:	e008      	b.n	800766a <HAL_TIM_PWM_Start+0x6a>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800765e:	b2db      	uxtb	r3, r3
 8007660:	2b01      	cmp	r3, #1
 8007662:	bf14      	ite	ne
 8007664:	2301      	movne	r3, #1
 8007666:	2300      	moveq	r3, #0
 8007668:	b2db      	uxtb	r3, r3
 800766a:	2b00      	cmp	r3, #0
 800766c:	d001      	beq.n	8007672 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e05e      	b.n	8007730 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d104      	bne.n	8007682 <HAL_TIM_PWM_Start+0x82>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2202      	movs	r2, #2
 800767c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007680:	e013      	b.n	80076aa <HAL_TIM_PWM_Start+0xaa>
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	2b04      	cmp	r3, #4
 8007686:	d104      	bne.n	8007692 <HAL_TIM_PWM_Start+0x92>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2202      	movs	r2, #2
 800768c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007690:	e00b      	b.n	80076aa <HAL_TIM_PWM_Start+0xaa>
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	2b08      	cmp	r3, #8
 8007696:	d104      	bne.n	80076a2 <HAL_TIM_PWM_Start+0xa2>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2202      	movs	r2, #2
 800769c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076a0:	e003      	b.n	80076aa <HAL_TIM_PWM_Start+0xaa>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2202      	movs	r2, #2
 80076a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2201      	movs	r2, #1
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	4618      	mov	r0, r3
 80076b4:	f000 fafe 	bl	8007cb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a1e      	ldr	r2, [pc, #120]	; (8007738 <HAL_TIM_PWM_Start+0x138>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d107      	bne.n	80076d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80076d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a18      	ldr	r2, [pc, #96]	; (8007738 <HAL_TIM_PWM_Start+0x138>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d00e      	beq.n	80076fa <HAL_TIM_PWM_Start+0xfa>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076e4:	d009      	beq.n	80076fa <HAL_TIM_PWM_Start+0xfa>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a14      	ldr	r2, [pc, #80]	; (800773c <HAL_TIM_PWM_Start+0x13c>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d004      	beq.n	80076fa <HAL_TIM_PWM_Start+0xfa>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a12      	ldr	r2, [pc, #72]	; (8007740 <HAL_TIM_PWM_Start+0x140>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d111      	bne.n	800771e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f003 0307 	and.w	r3, r3, #7
 8007704:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2b06      	cmp	r3, #6
 800770a:	d010      	beq.n	800772e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f042 0201 	orr.w	r2, r2, #1
 800771a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800771c:	e007      	b.n	800772e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f042 0201 	orr.w	r2, r2, #1
 800772c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	40012c00 	.word	0x40012c00
 800773c:	40000400 	.word	0x40000400
 8007740:	40000800 	.word	0x40000800

08007744 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b086      	sub	sp, #24
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007750:	2300      	movs	r3, #0
 8007752:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800775a:	2b01      	cmp	r3, #1
 800775c:	d101      	bne.n	8007762 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800775e:	2302      	movs	r3, #2
 8007760:	e0ae      	b.n	80078c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2b0c      	cmp	r3, #12
 800776e:	f200 809f 	bhi.w	80078b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007772:	a201      	add	r2, pc, #4	; (adr r2, 8007778 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007778:	080077ad 	.word	0x080077ad
 800777c:	080078b1 	.word	0x080078b1
 8007780:	080078b1 	.word	0x080078b1
 8007784:	080078b1 	.word	0x080078b1
 8007788:	080077ed 	.word	0x080077ed
 800778c:	080078b1 	.word	0x080078b1
 8007790:	080078b1 	.word	0x080078b1
 8007794:	080078b1 	.word	0x080078b1
 8007798:	0800782f 	.word	0x0800782f
 800779c:	080078b1 	.word	0x080078b1
 80077a0:	080078b1 	.word	0x080078b1
 80077a4:	080078b1 	.word	0x080078b1
 80077a8:	0800786f 	.word	0x0800786f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68b9      	ldr	r1, [r7, #8]
 80077b2:	4618      	mov	r0, r3
 80077b4:	f000 f8f6 	bl	80079a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	699a      	ldr	r2, [r3, #24]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f042 0208 	orr.w	r2, r2, #8
 80077c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	699a      	ldr	r2, [r3, #24]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f022 0204 	bic.w	r2, r2, #4
 80077d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6999      	ldr	r1, [r3, #24]
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	691a      	ldr	r2, [r3, #16]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	430a      	orrs	r2, r1
 80077e8:	619a      	str	r2, [r3, #24]
      break;
 80077ea:	e064      	b.n	80078b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68b9      	ldr	r1, [r7, #8]
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 f93c 	bl	8007a70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	699a      	ldr	r2, [r3, #24]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007806:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	699a      	ldr	r2, [r3, #24]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007816:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	6999      	ldr	r1, [r3, #24]
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	021a      	lsls	r2, r3, #8
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	430a      	orrs	r2, r1
 800782a:	619a      	str	r2, [r3, #24]
      break;
 800782c:	e043      	b.n	80078b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68b9      	ldr	r1, [r7, #8]
 8007834:	4618      	mov	r0, r3
 8007836:	f000 f985 	bl	8007b44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	69da      	ldr	r2, [r3, #28]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f042 0208 	orr.w	r2, r2, #8
 8007848:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	69da      	ldr	r2, [r3, #28]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f022 0204 	bic.w	r2, r2, #4
 8007858:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	69d9      	ldr	r1, [r3, #28]
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	691a      	ldr	r2, [r3, #16]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	430a      	orrs	r2, r1
 800786a:	61da      	str	r2, [r3, #28]
      break;
 800786c:	e023      	b.n	80078b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68b9      	ldr	r1, [r7, #8]
 8007874:	4618      	mov	r0, r3
 8007876:	f000 f9cf 	bl	8007c18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	69da      	ldr	r2, [r3, #28]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007888:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	69da      	ldr	r2, [r3, #28]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007898:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	69d9      	ldr	r1, [r3, #28]
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	021a      	lsls	r2, r3, #8
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	430a      	orrs	r2, r1
 80078ac:	61da      	str	r2, [r3, #28]
      break;
 80078ae:	e002      	b.n	80078b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	75fb      	strb	r3, [r7, #23]
      break;
 80078b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80078be:	7dfb      	ldrb	r3, [r7, #23]
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3718      	adds	r7, #24
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a2f      	ldr	r2, [pc, #188]	; (8007998 <TIM_Base_SetConfig+0xd0>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d00b      	beq.n	80078f8 <TIM_Base_SetConfig+0x30>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078e6:	d007      	beq.n	80078f8 <TIM_Base_SetConfig+0x30>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a2c      	ldr	r2, [pc, #176]	; (800799c <TIM_Base_SetConfig+0xd4>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d003      	beq.n	80078f8 <TIM_Base_SetConfig+0x30>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a2b      	ldr	r2, [pc, #172]	; (80079a0 <TIM_Base_SetConfig+0xd8>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d108      	bne.n	800790a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	4313      	orrs	r3, r2
 8007908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a22      	ldr	r2, [pc, #136]	; (8007998 <TIM_Base_SetConfig+0xd0>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d00b      	beq.n	800792a <TIM_Base_SetConfig+0x62>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007918:	d007      	beq.n	800792a <TIM_Base_SetConfig+0x62>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a1f      	ldr	r2, [pc, #124]	; (800799c <TIM_Base_SetConfig+0xd4>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d003      	beq.n	800792a <TIM_Base_SetConfig+0x62>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a1e      	ldr	r2, [pc, #120]	; (80079a0 <TIM_Base_SetConfig+0xd8>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d108      	bne.n	800793c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	68fa      	ldr	r2, [r7, #12]
 8007938:	4313      	orrs	r3, r2
 800793a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	695b      	ldr	r3, [r3, #20]
 8007946:	4313      	orrs	r3, r2
 8007948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	689a      	ldr	r2, [r3, #8]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a0d      	ldr	r2, [pc, #52]	; (8007998 <TIM_Base_SetConfig+0xd0>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d103      	bne.n	8007970 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	691a      	ldr	r2, [r3, #16]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	f003 0301 	and.w	r3, r3, #1
 800797e:	2b00      	cmp	r3, #0
 8007980:	d005      	beq.n	800798e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	f023 0201 	bic.w	r2, r3, #1
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	611a      	str	r2, [r3, #16]
  }
}
 800798e:	bf00      	nop
 8007990:	3714      	adds	r7, #20
 8007992:	46bd      	mov	sp, r7
 8007994:	bc80      	pop	{r7}
 8007996:	4770      	bx	lr
 8007998:	40012c00 	.word	0x40012c00
 800799c:	40000400 	.word	0x40000400
 80079a0:	40000800 	.word	0x40000800

080079a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b087      	sub	sp, #28
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a1b      	ldr	r3, [r3, #32]
 80079b8:	f023 0201 	bic.w	r2, r3, #1
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f023 0303 	bic.w	r3, r3, #3
 80079da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f023 0302 	bic.w	r3, r3, #2
 80079ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a1c      	ldr	r2, [pc, #112]	; (8007a6c <TIM_OC1_SetConfig+0xc8>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d10c      	bne.n	8007a1a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	f023 0308 	bic.w	r3, r3, #8
 8007a06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	697a      	ldr	r2, [r7, #20]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	f023 0304 	bic.w	r3, r3, #4
 8007a18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a13      	ldr	r2, [pc, #76]	; (8007a6c <TIM_OC1_SetConfig+0xc8>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d111      	bne.n	8007a46 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	695b      	ldr	r3, [r3, #20]
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	693a      	ldr	r2, [r7, #16]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	685a      	ldr	r2, [r3, #4]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	697a      	ldr	r2, [r7, #20]
 8007a5e:	621a      	str	r2, [r3, #32]
}
 8007a60:	bf00      	nop
 8007a62:	371c      	adds	r7, #28
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bc80      	pop	{r7}
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	40012c00 	.word	0x40012c00

08007a70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b087      	sub	sp, #28
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a1b      	ldr	r3, [r3, #32]
 8007a84:	f023 0210 	bic.w	r2, r3, #16
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	021b      	lsls	r3, r3, #8
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	f023 0320 	bic.w	r3, r3, #32
 8007aba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	011b      	lsls	r3, r3, #4
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a1d      	ldr	r2, [pc, #116]	; (8007b40 <TIM_OC2_SetConfig+0xd0>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d10d      	bne.n	8007aec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	011b      	lsls	r3, r3, #4
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a14      	ldr	r2, [pc, #80]	; (8007b40 <TIM_OC2_SetConfig+0xd0>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d113      	bne.n	8007b1c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007afa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	695b      	ldr	r3, [r3, #20]
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	693a      	ldr	r2, [r7, #16]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	621a      	str	r2, [r3, #32]
}
 8007b36:	bf00      	nop
 8007b38:	371c      	adds	r7, #28
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bc80      	pop	{r7}
 8007b3e:	4770      	bx	lr
 8007b40:	40012c00 	.word	0x40012c00

08007b44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b087      	sub	sp, #28
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a1b      	ldr	r3, [r3, #32]
 8007b58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	69db      	ldr	r3, [r3, #28]
 8007b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f023 0303 	bic.w	r3, r3, #3
 8007b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	021b      	lsls	r3, r3, #8
 8007b94:	697a      	ldr	r2, [r7, #20]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a1d      	ldr	r2, [pc, #116]	; (8007c14 <TIM_OC3_SetConfig+0xd0>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d10d      	bne.n	8007bbe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ba8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	021b      	lsls	r3, r3, #8
 8007bb0:	697a      	ldr	r2, [r7, #20]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4a14      	ldr	r2, [pc, #80]	; (8007c14 <TIM_OC3_SetConfig+0xd0>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d113      	bne.n	8007bee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	695b      	ldr	r3, [r3, #20]
 8007bda:	011b      	lsls	r3, r3, #4
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	011b      	lsls	r3, r3, #4
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	693a      	ldr	r2, [r7, #16]
 8007bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	685a      	ldr	r2, [r3, #4]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	697a      	ldr	r2, [r7, #20]
 8007c06:	621a      	str	r2, [r3, #32]
}
 8007c08:	bf00      	nop
 8007c0a:	371c      	adds	r7, #28
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bc80      	pop	{r7}
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	40012c00 	.word	0x40012c00

08007c18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b087      	sub	sp, #28
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a1b      	ldr	r3, [r3, #32]
 8007c2c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	69db      	ldr	r3, [r3, #28]
 8007c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	021b      	lsls	r3, r3, #8
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	031b      	lsls	r3, r3, #12
 8007c6a:	693a      	ldr	r2, [r7, #16]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	4a0f      	ldr	r2, [pc, #60]	; (8007cb0 <TIM_OC4_SetConfig+0x98>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d109      	bne.n	8007c8c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	695b      	ldr	r3, [r3, #20]
 8007c84:	019b      	lsls	r3, r3, #6
 8007c86:	697a      	ldr	r2, [r7, #20]
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	697a      	ldr	r2, [r7, #20]
 8007c90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	685a      	ldr	r2, [r3, #4]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	693a      	ldr	r2, [r7, #16]
 8007ca4:	621a      	str	r2, [r3, #32]
}
 8007ca6:	bf00      	nop
 8007ca8:	371c      	adds	r7, #28
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bc80      	pop	{r7}
 8007cae:	4770      	bx	lr
 8007cb0:	40012c00 	.word	0x40012c00

08007cb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b087      	sub	sp, #28
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	f003 031f 	and.w	r3, r3, #31
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ccc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6a1a      	ldr	r2, [r3, #32]
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	43db      	mvns	r3, r3
 8007cd6:	401a      	ands	r2, r3
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6a1a      	ldr	r2, [r3, #32]
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	f003 031f 	and.w	r3, r3, #31
 8007ce6:	6879      	ldr	r1, [r7, #4]
 8007ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8007cec:	431a      	orrs	r2, r3
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	621a      	str	r2, [r3, #32]
}
 8007cf2:	bf00      	nop
 8007cf4:	371c      	adds	r7, #28
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bc80      	pop	{r7}
 8007cfa:	4770      	bx	lr

08007cfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d101      	bne.n	8007d14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d10:	2302      	movs	r3, #2
 8007d12:	e046      	b.n	8007da2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a16      	ldr	r2, [pc, #88]	; (8007dac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d00e      	beq.n	8007d76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d60:	d009      	beq.n	8007d76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a12      	ldr	r2, [pc, #72]	; (8007db0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d004      	beq.n	8007d76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a10      	ldr	r2, [pc, #64]	; (8007db4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d10c      	bne.n	8007d90 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	68ba      	ldr	r2, [r7, #8]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3714      	adds	r7, #20
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bc80      	pop	{r7}
 8007daa:	4770      	bx	lr
 8007dac:	40012c00 	.word	0x40012c00
 8007db0:	40000400 	.word	0x40000400
 8007db4:	40000800 	.word	0x40000800

08007db8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d101      	bne.n	8007dd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	e03d      	b.n	8007e50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	695b      	ldr	r3, [r3, #20]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	69db      	ldr	r3, [r3, #28]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3714      	adds	r7, #20
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bc80      	pop	{r7}
 8007e58:	4770      	bx	lr

08007e5a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b082      	sub	sp, #8
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d101      	bne.n	8007e6c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e042      	b.n	8007ef2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d106      	bne.n	8007e86 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f7fb fab3 	bl	80033ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2224      	movs	r2, #36	; 0x24
 8007e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68da      	ldr	r2, [r3, #12]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e9c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f972 	bl	8008188 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	691a      	ldr	r2, [r3, #16]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007eb2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	695a      	ldr	r2, [r3, #20]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ec2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68da      	ldr	r2, [r3, #12]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ed2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2220      	movs	r2, #32
 8007ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2220      	movs	r2, #32
 8007ee6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b08a      	sub	sp, #40	; 0x28
 8007efe:	af02      	add	r7, sp, #8
 8007f00:	60f8      	str	r0, [r7, #12]
 8007f02:	60b9      	str	r1, [r7, #8]
 8007f04:	603b      	str	r3, [r7, #0]
 8007f06:	4613      	mov	r3, r2
 8007f08:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	2b20      	cmp	r3, #32
 8007f18:	d175      	bne.n	8008006 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d002      	beq.n	8007f26 <HAL_UART_Transmit+0x2c>
 8007f20:	88fb      	ldrh	r3, [r7, #6]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d101      	bne.n	8007f2a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	e06e      	b.n	8008008 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2221      	movs	r2, #33	; 0x21
 8007f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f38:	f7fb fc16 	bl	8003768 <HAL_GetTick>
 8007f3c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	88fa      	ldrh	r2, [r7, #6]
 8007f42:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	88fa      	ldrh	r2, [r7, #6]
 8007f48:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f52:	d108      	bne.n	8007f66 <HAL_UART_Transmit+0x6c>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d104      	bne.n	8007f66 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	61bb      	str	r3, [r7, #24]
 8007f64:	e003      	b.n	8007f6e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007f6e:	e02e      	b.n	8007fce <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	9300      	str	r3, [sp, #0]
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	2200      	movs	r2, #0
 8007f78:	2180      	movs	r1, #128	; 0x80
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f000 f848 	bl	8008010 <UART_WaitOnFlagUntilTimeout>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d005      	beq.n	8007f92 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2220      	movs	r2, #32
 8007f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e03a      	b.n	8008008 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d10b      	bne.n	8007fb0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	881b      	ldrh	r3, [r3, #0]
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fa6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	3302      	adds	r3, #2
 8007fac:	61bb      	str	r3, [r7, #24]
 8007fae:	e007      	b.n	8007fc0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	781a      	ldrb	r2, [r3, #0]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1cb      	bne.n	8007f70 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	9300      	str	r3, [sp, #0]
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	2140      	movs	r1, #64	; 0x40
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f000 f814 	bl	8008010 <UART_WaitOnFlagUntilTimeout>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d005      	beq.n	8007ffa <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2220      	movs	r2, #32
 8007ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	e006      	b.n	8008008 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2220      	movs	r2, #32
 8007ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8008002:	2300      	movs	r3, #0
 8008004:	e000      	b.n	8008008 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008006:	2302      	movs	r3, #2
  }
}
 8008008:	4618      	mov	r0, r3
 800800a:	3720      	adds	r7, #32
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b086      	sub	sp, #24
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	603b      	str	r3, [r7, #0]
 800801c:	4613      	mov	r3, r2
 800801e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008020:	e03b      	b.n	800809a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008022:	6a3b      	ldr	r3, [r7, #32]
 8008024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008028:	d037      	beq.n	800809a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800802a:	f7fb fb9d 	bl	8003768 <HAL_GetTick>
 800802e:	4602      	mov	r2, r0
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	1ad3      	subs	r3, r2, r3
 8008034:	6a3a      	ldr	r2, [r7, #32]
 8008036:	429a      	cmp	r2, r3
 8008038:	d302      	bcc.n	8008040 <UART_WaitOnFlagUntilTimeout+0x30>
 800803a:	6a3b      	ldr	r3, [r7, #32]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d101      	bne.n	8008044 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008040:	2303      	movs	r3, #3
 8008042:	e03a      	b.n	80080ba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	f003 0304 	and.w	r3, r3, #4
 800804e:	2b00      	cmp	r3, #0
 8008050:	d023      	beq.n	800809a <UART_WaitOnFlagUntilTimeout+0x8a>
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	2b80      	cmp	r3, #128	; 0x80
 8008056:	d020      	beq.n	800809a <UART_WaitOnFlagUntilTimeout+0x8a>
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	2b40      	cmp	r3, #64	; 0x40
 800805c:	d01d      	beq.n	800809a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 0308 	and.w	r3, r3, #8
 8008068:	2b08      	cmp	r3, #8
 800806a:	d116      	bne.n	800809a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800806c:	2300      	movs	r3, #0
 800806e:	617b      	str	r3, [r7, #20]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	617b      	str	r3, [r7, #20]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	617b      	str	r3, [r7, #20]
 8008080:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f000 f81d 	bl	80080c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2208      	movs	r2, #8
 800808c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2200      	movs	r2, #0
 8008092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	e00f      	b.n	80080ba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	4013      	ands	r3, r2
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	bf0c      	ite	eq
 80080aa:	2301      	moveq	r3, #1
 80080ac:	2300      	movne	r3, #0
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	461a      	mov	r2, r3
 80080b2:	79fb      	ldrb	r3, [r7, #7]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d0b4      	beq.n	8008022 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3718      	adds	r7, #24
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080c2:	b480      	push	{r7}
 80080c4:	b095      	sub	sp, #84	; 0x54
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	330c      	adds	r3, #12
 80080d0:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080d4:	e853 3f00 	ldrex	r3, [r3]
 80080d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80080da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	330c      	adds	r3, #12
 80080e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80080ea:	643a      	str	r2, [r7, #64]	; 0x40
 80080ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80080f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080f2:	e841 2300 	strex	r3, r2, [r1]
 80080f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1e5      	bne.n	80080ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	3314      	adds	r3, #20
 8008104:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008106:	6a3b      	ldr	r3, [r7, #32]
 8008108:	e853 3f00 	ldrex	r3, [r3]
 800810c:	61fb      	str	r3, [r7, #28]
   return(result);
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	f023 0301 	bic.w	r3, r3, #1
 8008114:	64bb      	str	r3, [r7, #72]	; 0x48
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	3314      	adds	r3, #20
 800811c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800811e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008120:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008122:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008126:	e841 2300 	strex	r3, r2, [r1]
 800812a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800812c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1e5      	bne.n	80080fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008136:	2b01      	cmp	r3, #1
 8008138:	d119      	bne.n	800816e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	330c      	adds	r3, #12
 8008140:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	e853 3f00 	ldrex	r3, [r3]
 8008148:	60bb      	str	r3, [r7, #8]
   return(result);
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	f023 0310 	bic.w	r3, r3, #16
 8008150:	647b      	str	r3, [r7, #68]	; 0x44
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	330c      	adds	r3, #12
 8008158:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800815a:	61ba      	str	r2, [r7, #24]
 800815c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815e:	6979      	ldr	r1, [r7, #20]
 8008160:	69ba      	ldr	r2, [r7, #24]
 8008162:	e841 2300 	strex	r3, r2, [r1]
 8008166:	613b      	str	r3, [r7, #16]
   return(result);
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1e5      	bne.n	800813a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2220      	movs	r2, #32
 8008172:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800817c:	bf00      	nop
 800817e:	3754      	adds	r7, #84	; 0x54
 8008180:	46bd      	mov	sp, r7
 8008182:	bc80      	pop	{r7}
 8008184:	4770      	bx	lr
	...

08008188 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	68da      	ldr	r2, [r3, #12]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	430a      	orrs	r2, r1
 80081a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	689a      	ldr	r2, [r3, #8]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	431a      	orrs	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	695b      	ldr	r3, [r3, #20]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80081c2:	f023 030c 	bic.w	r3, r3, #12
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	6812      	ldr	r2, [r2, #0]
 80081ca:	68b9      	ldr	r1, [r7, #8]
 80081cc:	430b      	orrs	r3, r1
 80081ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	699a      	ldr	r2, [r3, #24]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	430a      	orrs	r2, r1
 80081e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a2c      	ldr	r2, [pc, #176]	; (800829c <UART_SetConfig+0x114>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d103      	bne.n	80081f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80081f0:	f7ff f8ce 	bl	8007390 <HAL_RCC_GetPCLK2Freq>
 80081f4:	60f8      	str	r0, [r7, #12]
 80081f6:	e002      	b.n	80081fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80081f8:	f7ff f8b6 	bl	8007368 <HAL_RCC_GetPCLK1Freq>
 80081fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	4613      	mov	r3, r2
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	4413      	add	r3, r2
 8008206:	009a      	lsls	r2, r3, #2
 8008208:	441a      	add	r2, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	fbb2 f3f3 	udiv	r3, r2, r3
 8008214:	4a22      	ldr	r2, [pc, #136]	; (80082a0 <UART_SetConfig+0x118>)
 8008216:	fba2 2303 	umull	r2, r3, r2, r3
 800821a:	095b      	lsrs	r3, r3, #5
 800821c:	0119      	lsls	r1, r3, #4
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	4613      	mov	r3, r2
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4413      	add	r3, r2
 8008226:	009a      	lsls	r2, r3, #2
 8008228:	441a      	add	r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	fbb2 f2f3 	udiv	r2, r2, r3
 8008234:	4b1a      	ldr	r3, [pc, #104]	; (80082a0 <UART_SetConfig+0x118>)
 8008236:	fba3 0302 	umull	r0, r3, r3, r2
 800823a:	095b      	lsrs	r3, r3, #5
 800823c:	2064      	movs	r0, #100	; 0x64
 800823e:	fb00 f303 	mul.w	r3, r0, r3
 8008242:	1ad3      	subs	r3, r2, r3
 8008244:	011b      	lsls	r3, r3, #4
 8008246:	3332      	adds	r3, #50	; 0x32
 8008248:	4a15      	ldr	r2, [pc, #84]	; (80082a0 <UART_SetConfig+0x118>)
 800824a:	fba2 2303 	umull	r2, r3, r2, r3
 800824e:	095b      	lsrs	r3, r3, #5
 8008250:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008254:	4419      	add	r1, r3
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	4613      	mov	r3, r2
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	4413      	add	r3, r2
 800825e:	009a      	lsls	r2, r3, #2
 8008260:	441a      	add	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	fbb2 f2f3 	udiv	r2, r2, r3
 800826c:	4b0c      	ldr	r3, [pc, #48]	; (80082a0 <UART_SetConfig+0x118>)
 800826e:	fba3 0302 	umull	r0, r3, r3, r2
 8008272:	095b      	lsrs	r3, r3, #5
 8008274:	2064      	movs	r0, #100	; 0x64
 8008276:	fb00 f303 	mul.w	r3, r0, r3
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	011b      	lsls	r3, r3, #4
 800827e:	3332      	adds	r3, #50	; 0x32
 8008280:	4a07      	ldr	r2, [pc, #28]	; (80082a0 <UART_SetConfig+0x118>)
 8008282:	fba2 2303 	umull	r2, r3, r2, r3
 8008286:	095b      	lsrs	r3, r3, #5
 8008288:	f003 020f 	and.w	r2, r3, #15
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	440a      	add	r2, r1
 8008292:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008294:	bf00      	nop
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	40013800 	.word	0x40013800
 80082a0:	51eb851f 	.word	0x51eb851f

080082a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	4638      	mov	r0, r7
 80082ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3714      	adds	r7, #20
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bc80      	pop	{r7}
 80082bc:	4770      	bx	lr

080082be <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80082be:	b480      	push	{r7}
 80082c0:	b085      	sub	sp, #20
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80082ce:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80082d2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3714      	adds	r7, #20
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bc80      	pop	{r7}
 80082e8:	4770      	bx	lr

080082ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80082ea:	b480      	push	{r7}
 80082ec:	b085      	sub	sp, #20
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80082f2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80082f6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80082fe:	b29a      	uxth	r2, r3
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	b29b      	uxth	r3, r3
 8008304:	43db      	mvns	r3, r3
 8008306:	b29b      	uxth	r3, r3
 8008308:	4013      	ands	r3, r2
 800830a:	b29a      	uxth	r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3714      	adds	r7, #20
 8008318:	46bd      	mov	sp, r7
 800831a:	bc80      	pop	{r7}
 800831c:	4770      	bx	lr

0800831e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800831e:	b480      	push	{r7}
 8008320:	b083      	sub	sp, #12
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
 8008326:	460b      	mov	r3, r1
 8008328:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	bc80      	pop	{r7}
 8008334:	4770      	bx	lr

08008336 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008336:	b480      	push	{r7}
 8008338:	b085      	sub	sp, #20
 800833a:	af00      	add	r7, sp, #0
 800833c:	60f8      	str	r0, [r7, #12]
 800833e:	4638      	mov	r0, r7
 8008340:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2201      	movs	r2, #1
 8008348:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2200      	movs	r2, #0
 8008350:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2200      	movs	r2, #0
 8008360:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3714      	adds	r7, #20
 800836a:	46bd      	mov	sp, r7
 800836c:	bc80      	pop	{r7}
 800836e:	4770      	bx	lr

08008370 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008370:	b480      	push	{r7}
 8008372:	b09d      	sub	sp, #116	; 0x74
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800837a:	2300      	movs	r3, #0
 800837c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	4413      	add	r3, r2
 800838a:	881b      	ldrh	r3, [r3, #0]
 800838c:	b29b      	uxth	r3, r3
 800838e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008396:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	78db      	ldrb	r3, [r3, #3]
 800839e:	2b03      	cmp	r3, #3
 80083a0:	d81f      	bhi.n	80083e2 <USB_ActivateEndpoint+0x72>
 80083a2:	a201      	add	r2, pc, #4	; (adr r2, 80083a8 <USB_ActivateEndpoint+0x38>)
 80083a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a8:	080083b9 	.word	0x080083b9
 80083ac:	080083d5 	.word	0x080083d5
 80083b0:	080083eb 	.word	0x080083eb
 80083b4:	080083c7 	.word	0x080083c7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80083b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80083bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80083c0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80083c4:	e012      	b.n	80083ec <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80083c6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80083ca:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80083ce:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80083d2:	e00b      	b.n	80083ec <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80083d4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80083d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80083dc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80083e0:	e004      	b.n	80083ec <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80083e8:	e000      	b.n	80083ec <USB_ActivateEndpoint+0x7c>
      break;
 80083ea:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	441a      	add	r2, r3
 80083f6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80083fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800840a:	b29b      	uxth	r3, r3
 800840c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	4413      	add	r3, r2
 8008418:	881b      	ldrh	r3, [r3, #0]
 800841a:	b29b      	uxth	r3, r3
 800841c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008424:	b29a      	uxth	r2, r3
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	b29b      	uxth	r3, r3
 800842c:	4313      	orrs	r3, r2
 800842e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	441a      	add	r2, r3
 800843c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008440:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008444:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008448:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800844c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008450:	b29b      	uxth	r3, r3
 8008452:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	7b1b      	ldrb	r3, [r3, #12]
 8008458:	2b00      	cmp	r3, #0
 800845a:	f040 8178 	bne.w	800874e <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	785b      	ldrb	r3, [r3, #1]
 8008462:	2b00      	cmp	r3, #0
 8008464:	f000 8084 	beq.w	8008570 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	61bb      	str	r3, [r7, #24]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008472:	b29b      	uxth	r3, r3
 8008474:	461a      	mov	r2, r3
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	4413      	add	r3, r2
 800847a:	61bb      	str	r3, [r7, #24]
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	011a      	lsls	r2, r3, #4
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	4413      	add	r3, r2
 8008486:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800848a:	617b      	str	r3, [r7, #20]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	88db      	ldrh	r3, [r3, #6]
 8008490:	085b      	lsrs	r3, r3, #1
 8008492:	b29b      	uxth	r3, r3
 8008494:	005b      	lsls	r3, r3, #1
 8008496:	b29a      	uxth	r2, r3
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	4413      	add	r3, r2
 80084a6:	881b      	ldrh	r3, [r3, #0]
 80084a8:	827b      	strh	r3, [r7, #18]
 80084aa:	8a7b      	ldrh	r3, [r7, #18]
 80084ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d01b      	beq.n	80084ec <USB_ActivateEndpoint+0x17c>
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4413      	add	r3, r2
 80084be:	881b      	ldrh	r3, [r3, #0]
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ca:	823b      	strh	r3, [r7, #16]
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	441a      	add	r2, r3
 80084d6:	8a3b      	ldrh	r3, [r7, #16]
 80084d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	78db      	ldrb	r3, [r3, #3]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d020      	beq.n	8008536 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4413      	add	r3, r2
 80084fe:	881b      	ldrh	r3, [r3, #0]
 8008500:	b29b      	uxth	r3, r3
 8008502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800850a:	81bb      	strh	r3, [r7, #12]
 800850c:	89bb      	ldrh	r3, [r7, #12]
 800850e:	f083 0320 	eor.w	r3, r3, #32
 8008512:	81bb      	strh	r3, [r7, #12]
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	441a      	add	r2, r3
 800851e:	89bb      	ldrh	r3, [r7, #12]
 8008520:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008524:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008528:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800852c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008530:	b29b      	uxth	r3, r3
 8008532:	8013      	strh	r3, [r2, #0]
 8008534:	e2d5      	b.n	8008ae2 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	4413      	add	r3, r2
 8008540:	881b      	ldrh	r3, [r3, #0]
 8008542:	b29b      	uxth	r3, r3
 8008544:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008548:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800854c:	81fb      	strh	r3, [r7, #14]
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	441a      	add	r2, r3
 8008558:	89fb      	ldrh	r3, [r7, #14]
 800855a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800855e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800856a:	b29b      	uxth	r3, r3
 800856c:	8013      	strh	r3, [r2, #0]
 800856e:	e2b8      	b.n	8008ae2 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	633b      	str	r3, [r7, #48]	; 0x30
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800857a:	b29b      	uxth	r3, r3
 800857c:	461a      	mov	r2, r3
 800857e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008580:	4413      	add	r3, r2
 8008582:	633b      	str	r3, [r7, #48]	; 0x30
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	011a      	lsls	r2, r3, #4
 800858a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858c:	4413      	add	r3, r2
 800858e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008592:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	88db      	ldrh	r3, [r3, #6]
 8008598:	085b      	lsrs	r3, r3, #1
 800859a:	b29b      	uxth	r3, r3
 800859c:	005b      	lsls	r3, r3, #1
 800859e:	b29a      	uxth	r2, r3
 80085a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	461a      	mov	r2, r3
 80085b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b4:	4413      	add	r3, r2
 80085b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	011a      	lsls	r2, r3, #4
 80085be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c0:	4413      	add	r3, r2
 80085c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80085c6:	627b      	str	r3, [r7, #36]	; 0x24
 80085c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ca:	881b      	ldrh	r3, [r3, #0]
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085d2:	b29a      	uxth	r2, r3
 80085d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d6:	801a      	strh	r2, [r3, #0]
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	2b3e      	cmp	r3, #62	; 0x3e
 80085de:	d91d      	bls.n	800861c <USB_ActivateEndpoint+0x2ac>
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	691b      	ldr	r3, [r3, #16]
 80085e4:	095b      	lsrs	r3, r3, #5
 80085e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	691b      	ldr	r3, [r3, #16]
 80085ec:	f003 031f 	and.w	r3, r3, #31
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d102      	bne.n	80085fa <USB_ActivateEndpoint+0x28a>
 80085f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80085f6:	3b01      	subs	r3, #1
 80085f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80085fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fc:	881b      	ldrh	r3, [r3, #0]
 80085fe:	b29a      	uxth	r2, r3
 8008600:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008602:	b29b      	uxth	r3, r3
 8008604:	029b      	lsls	r3, r3, #10
 8008606:	b29b      	uxth	r3, r3
 8008608:	4313      	orrs	r3, r2
 800860a:	b29b      	uxth	r3, r3
 800860c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008610:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008614:	b29a      	uxth	r2, r3
 8008616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008618:	801a      	strh	r2, [r3, #0]
 800861a:	e026      	b.n	800866a <USB_ActivateEndpoint+0x2fa>
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d10a      	bne.n	800863a <USB_ActivateEndpoint+0x2ca>
 8008624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008626:	881b      	ldrh	r3, [r3, #0]
 8008628:	b29b      	uxth	r3, r3
 800862a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800862e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008632:	b29a      	uxth	r2, r3
 8008634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008636:	801a      	strh	r2, [r3, #0]
 8008638:	e017      	b.n	800866a <USB_ActivateEndpoint+0x2fa>
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	691b      	ldr	r3, [r3, #16]
 800863e:	085b      	lsrs	r3, r3, #1
 8008640:	66bb      	str	r3, [r7, #104]	; 0x68
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	f003 0301 	and.w	r3, r3, #1
 800864a:	2b00      	cmp	r3, #0
 800864c:	d002      	beq.n	8008654 <USB_ActivateEndpoint+0x2e4>
 800864e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008650:	3301      	adds	r3, #1
 8008652:	66bb      	str	r3, [r7, #104]	; 0x68
 8008654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008656:	881b      	ldrh	r3, [r3, #0]
 8008658:	b29a      	uxth	r2, r3
 800865a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800865c:	b29b      	uxth	r3, r3
 800865e:	029b      	lsls	r3, r3, #10
 8008660:	b29b      	uxth	r3, r3
 8008662:	4313      	orrs	r3, r2
 8008664:	b29a      	uxth	r2, r3
 8008666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008668:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	4413      	add	r3, r2
 8008674:	881b      	ldrh	r3, [r3, #0]
 8008676:	847b      	strh	r3, [r7, #34]	; 0x22
 8008678:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800867a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800867e:	2b00      	cmp	r3, #0
 8008680:	d01b      	beq.n	80086ba <USB_ActivateEndpoint+0x34a>
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	4413      	add	r3, r2
 800868c:	881b      	ldrh	r3, [r3, #0]
 800868e:	b29b      	uxth	r3, r3
 8008690:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008698:	843b      	strh	r3, [r7, #32]
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	441a      	add	r2, r3
 80086a4:	8c3b      	ldrh	r3, [r7, #32]
 80086a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80086b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d124      	bne.n	800870c <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	4413      	add	r3, r2
 80086cc:	881b      	ldrh	r3, [r3, #0]
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086d8:	83bb      	strh	r3, [r7, #28]
 80086da:	8bbb      	ldrh	r3, [r7, #28]
 80086dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80086e0:	83bb      	strh	r3, [r7, #28]
 80086e2:	8bbb      	ldrh	r3, [r7, #28]
 80086e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80086e8:	83bb      	strh	r3, [r7, #28]
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	441a      	add	r2, r3
 80086f4:	8bbb      	ldrh	r3, [r7, #28]
 80086f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008706:	b29b      	uxth	r3, r3
 8008708:	8013      	strh	r3, [r2, #0]
 800870a:	e1ea      	b.n	8008ae2 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	4413      	add	r3, r2
 8008716:	881b      	ldrh	r3, [r3, #0]
 8008718:	b29b      	uxth	r3, r3
 800871a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800871e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008722:	83fb      	strh	r3, [r7, #30]
 8008724:	8bfb      	ldrh	r3, [r7, #30]
 8008726:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800872a:	83fb      	strh	r3, [r7, #30]
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	441a      	add	r2, r3
 8008736:	8bfb      	ldrh	r3, [r7, #30]
 8008738:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800873c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008748:	b29b      	uxth	r3, r3
 800874a:	8013      	strh	r3, [r2, #0]
 800874c:	e1c9      	b.n	8008ae2 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	78db      	ldrb	r3, [r3, #3]
 8008752:	2b02      	cmp	r3, #2
 8008754:	d11e      	bne.n	8008794 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	4413      	add	r3, r2
 8008760:	881b      	ldrh	r3, [r3, #0]
 8008762:	b29b      	uxth	r3, r3
 8008764:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800876c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	441a      	add	r2, r3
 800877a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800877e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008782:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008786:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800878a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800878e:	b29b      	uxth	r3, r3
 8008790:	8013      	strh	r3, [r2, #0]
 8008792:	e01d      	b.n	80087d0 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	4413      	add	r3, r2
 800879e:	881b      	ldrh	r3, [r3, #0]
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80087a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087aa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	441a      	add	r2, r3
 80087b8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80087bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087da:	b29b      	uxth	r3, r3
 80087dc:	461a      	mov	r2, r3
 80087de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087e0:	4413      	add	r3, r2
 80087e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	011a      	lsls	r2, r3, #4
 80087ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087ec:	4413      	add	r3, r2
 80087ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	891b      	ldrh	r3, [r3, #8]
 80087f8:	085b      	lsrs	r3, r3, #1
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	005b      	lsls	r3, r3, #1
 80087fe:	b29a      	uxth	r2, r3
 8008800:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008802:	801a      	strh	r2, [r3, #0]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	657b      	str	r3, [r7, #84]	; 0x54
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800880e:	b29b      	uxth	r3, r3
 8008810:	461a      	mov	r2, r3
 8008812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008814:	4413      	add	r3, r2
 8008816:	657b      	str	r3, [r7, #84]	; 0x54
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	011a      	lsls	r2, r3, #4
 800881e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008820:	4413      	add	r3, r2
 8008822:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008826:	653b      	str	r3, [r7, #80]	; 0x50
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	895b      	ldrh	r3, [r3, #10]
 800882c:	085b      	lsrs	r3, r3, #1
 800882e:	b29b      	uxth	r3, r3
 8008830:	005b      	lsls	r3, r3, #1
 8008832:	b29a      	uxth	r2, r3
 8008834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008836:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	785b      	ldrb	r3, [r3, #1]
 800883c:	2b00      	cmp	r3, #0
 800883e:	f040 8093 	bne.w	8008968 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	4413      	add	r3, r2
 800884c:	881b      	ldrh	r3, [r3, #0]
 800884e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008852:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800885a:	2b00      	cmp	r3, #0
 800885c:	d01b      	beq.n	8008896 <USB_ActivateEndpoint+0x526>
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	4413      	add	r3, r2
 8008868:	881b      	ldrh	r3, [r3, #0]
 800886a:	b29b      	uxth	r3, r3
 800886c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008874:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	441a      	add	r2, r3
 8008880:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008882:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008886:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800888a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800888e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008892:	b29b      	uxth	r3, r3
 8008894:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	4413      	add	r3, r2
 80088a0:	881b      	ldrh	r3, [r3, #0]
 80088a2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80088a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80088a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d01b      	beq.n	80088e6 <USB_ActivateEndpoint+0x576>
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	4413      	add	r3, r2
 80088b8:	881b      	ldrh	r3, [r3, #0]
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088c4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	441a      	add	r2, r3
 80088d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80088d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	4413      	add	r3, r2
 80088f0:	881b      	ldrh	r3, [r3, #0]
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088fc:	873b      	strh	r3, [r7, #56]	; 0x38
 80088fe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008900:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008904:	873b      	strh	r3, [r7, #56]	; 0x38
 8008906:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008908:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800890c:	873b      	strh	r3, [r7, #56]	; 0x38
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	441a      	add	r2, r3
 8008918:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800891a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800891e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800892a:	b29b      	uxth	r3, r3
 800892c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	4413      	add	r3, r2
 8008938:	881b      	ldrh	r3, [r3, #0]
 800893a:	b29b      	uxth	r3, r3
 800893c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008940:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008944:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	441a      	add	r2, r3
 8008950:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800895a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800895e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008962:	b29b      	uxth	r3, r3
 8008964:	8013      	strh	r3, [r2, #0]
 8008966:	e0bc      	b.n	8008ae2 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	4413      	add	r3, r2
 8008972:	881b      	ldrh	r3, [r3, #0]
 8008974:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008978:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800897c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008980:	2b00      	cmp	r3, #0
 8008982:	d01d      	beq.n	80089c0 <USB_ActivateEndpoint+0x650>
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	4413      	add	r3, r2
 800898e:	881b      	ldrh	r3, [r3, #0]
 8008990:	b29b      	uxth	r3, r3
 8008992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800899a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	441a      	add	r2, r3
 80089a8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80089ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80089b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089bc:	b29b      	uxth	r3, r3
 80089be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	4413      	add	r3, r2
 80089ca:	881b      	ldrh	r3, [r3, #0]
 80089cc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80089d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80089d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d01d      	beq.n	8008a18 <USB_ActivateEndpoint+0x6a8>
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	4413      	add	r3, r2
 80089e6:	881b      	ldrh	r3, [r3, #0]
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089f2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	441a      	add	r2, r3
 8008a00:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008a04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	78db      	ldrb	r3, [r3, #3]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d024      	beq.n	8008a6a <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	4413      	add	r3, r2
 8008a2a:	881b      	ldrh	r3, [r3, #0]
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a36:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008a3a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008a3e:	f083 0320 	eor.w	r3, r3, #32
 8008a42:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	441a      	add	r2, r3
 8008a50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008a54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	8013      	strh	r3, [r2, #0]
 8008a68:	e01d      	b.n	8008aa6 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	4413      	add	r3, r2
 8008a74:	881b      	ldrh	r3, [r3, #0]
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a80:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	441a      	add	r2, r3
 8008a8e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008a92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	4413      	add	r3, r2
 8008ab0:	881b      	ldrh	r3, [r3, #0]
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008abc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	441a      	add	r2, r3
 8008aca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008ae2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3774      	adds	r7, #116	; 0x74
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bc80      	pop	{r7}
 8008aee:	4770      	bx	lr

08008af0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b08d      	sub	sp, #52	; 0x34
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	7b1b      	ldrb	r3, [r3, #12]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f040 808e 	bne.w	8008c20 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	785b      	ldrb	r3, [r3, #1]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d044      	beq.n	8008b96 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4413      	add	r3, r2
 8008b16:	881b      	ldrh	r3, [r3, #0]
 8008b18:	81bb      	strh	r3, [r7, #12]
 8008b1a:	89bb      	ldrh	r3, [r7, #12]
 8008b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d01b      	beq.n	8008b5c <USB_DeactivateEndpoint+0x6c>
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	4413      	add	r3, r2
 8008b2e:	881b      	ldrh	r3, [r3, #0]
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b3a:	817b      	strh	r3, [r7, #10]
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	441a      	add	r2, r3
 8008b46:	897b      	ldrh	r3, [r7, #10]
 8008b48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	4413      	add	r3, r2
 8008b66:	881b      	ldrh	r3, [r3, #0]
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b72:	813b      	strh	r3, [r7, #8]
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	441a      	add	r2, r3
 8008b7e:	893b      	ldrh	r3, [r7, #8]
 8008b80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	8013      	strh	r3, [r2, #0]
 8008b94:	e192      	b.n	8008ebc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	4413      	add	r3, r2
 8008ba0:	881b      	ldrh	r3, [r3, #0]
 8008ba2:	827b      	strh	r3, [r7, #18]
 8008ba4:	8a7b      	ldrh	r3, [r7, #18]
 8008ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d01b      	beq.n	8008be6 <USB_DeactivateEndpoint+0xf6>
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	4413      	add	r3, r2
 8008bb8:	881b      	ldrh	r3, [r3, #0]
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bc4:	823b      	strh	r3, [r7, #16]
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	441a      	add	r2, r3
 8008bd0:	8a3b      	ldrh	r3, [r7, #16]
 8008bd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	4413      	add	r3, r2
 8008bf0:	881b      	ldrh	r3, [r3, #0]
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bfc:	81fb      	strh	r3, [r7, #14]
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	441a      	add	r2, r3
 8008c08:	89fb      	ldrh	r3, [r7, #14]
 8008c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	8013      	strh	r3, [r2, #0]
 8008c1e:	e14d      	b.n	8008ebc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	785b      	ldrb	r3, [r3, #1]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	f040 80a5 	bne.w	8008d74 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	4413      	add	r3, r2
 8008c34:	881b      	ldrh	r3, [r3, #0]
 8008c36:	843b      	strh	r3, [r7, #32]
 8008c38:	8c3b      	ldrh	r3, [r7, #32]
 8008c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d01b      	beq.n	8008c7a <USB_DeactivateEndpoint+0x18a>
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	4413      	add	r3, r2
 8008c4c:	881b      	ldrh	r3, [r3, #0]
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c58:	83fb      	strh	r3, [r7, #30]
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	441a      	add	r2, r3
 8008c64:	8bfb      	ldrh	r3, [r7, #30]
 8008c66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	4413      	add	r3, r2
 8008c84:	881b      	ldrh	r3, [r3, #0]
 8008c86:	83bb      	strh	r3, [r7, #28]
 8008c88:	8bbb      	ldrh	r3, [r7, #28]
 8008c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d01b      	beq.n	8008cca <USB_DeactivateEndpoint+0x1da>
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	4413      	add	r3, r2
 8008c9c:	881b      	ldrh	r3, [r3, #0]
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ca8:	837b      	strh	r3, [r7, #26]
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	441a      	add	r2, r3
 8008cb4:	8b7b      	ldrh	r3, [r7, #26]
 8008cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cc2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	4413      	add	r3, r2
 8008cd4:	881b      	ldrh	r3, [r3, #0]
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ce0:	833b      	strh	r3, [r7, #24]
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	441a      	add	r2, r3
 8008cec:	8b3b      	ldrh	r3, [r7, #24]
 8008cee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cfa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	4413      	add	r3, r2
 8008d0c:	881b      	ldrh	r3, [r3, #0]
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d18:	82fb      	strh	r3, [r7, #22]
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	441a      	add	r2, r3
 8008d24:	8afb      	ldrh	r3, [r7, #22]
 8008d26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	4413      	add	r3, r2
 8008d44:	881b      	ldrh	r3, [r3, #0]
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d50:	82bb      	strh	r3, [r7, #20]
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	441a      	add	r2, r3
 8008d5c:	8abb      	ldrh	r3, [r7, #20]
 8008d5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	8013      	strh	r3, [r2, #0]
 8008d72:	e0a3      	b.n	8008ebc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	4413      	add	r3, r2
 8008d7e:	881b      	ldrh	r3, [r3, #0]
 8008d80:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008d82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d01b      	beq.n	8008dc4 <USB_DeactivateEndpoint+0x2d4>
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4413      	add	r3, r2
 8008d96:	881b      	ldrh	r3, [r3, #0]
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008da2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	441a      	add	r2, r3
 8008dae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008db0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008db4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008db8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	4413      	add	r3, r2
 8008dce:	881b      	ldrh	r3, [r3, #0]
 8008dd0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008dd2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d01b      	beq.n	8008e14 <USB_DeactivateEndpoint+0x324>
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	4413      	add	r3, r2
 8008de6:	881b      	ldrh	r3, [r3, #0]
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008df2:	853b      	strh	r3, [r7, #40]	; 0x28
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	441a      	add	r2, r3
 8008dfe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008e00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	4413      	add	r3, r2
 8008e1e:	881b      	ldrh	r3, [r3, #0]
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e2a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	441a      	add	r2, r3
 8008e36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	4413      	add	r3, r2
 8008e56:	881b      	ldrh	r3, [r3, #0]
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e62:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	441a      	add	r2, r3
 8008e6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	4413      	add	r3, r2
 8008e8e:	881b      	ldrh	r3, [r3, #0]
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e9a:	847b      	strh	r3, [r7, #34]	; 0x22
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	441a      	add	r2, r3
 8008ea6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3734      	adds	r7, #52	; 0x34
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bc80      	pop	{r7}
 8008ec6:	4770      	bx	lr

08008ec8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b0c2      	sub	sp, #264	; 0x108
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	1d3b      	adds	r3, r7, #4
 8008ed0:	6018      	str	r0, [r3, #0]
 8008ed2:	463b      	mov	r3, r7
 8008ed4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008ed6:	463b      	mov	r3, r7
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	785b      	ldrb	r3, [r3, #1]
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	f040 8545 	bne.w	800996c <USB_EPStartXfer+0xaa4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008ee2:	463b      	mov	r3, r7
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	699a      	ldr	r2, [r3, #24]
 8008ee8:	463b      	mov	r3, r7
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d905      	bls.n	8008efe <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8008ef2:	463b      	mov	r3, r7
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008efc:	e004      	b.n	8008f08 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008efe:	463b      	mov	r3, r7
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	699b      	ldr	r3, [r3, #24]
 8008f04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008f08:	463b      	mov	r3, r7
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	7b1b      	ldrb	r3, [r3, #12]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d128      	bne.n	8008f64 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008f12:	463b      	mov	r3, r7
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	6959      	ldr	r1, [r3, #20]
 8008f18:	463b      	mov	r3, r7
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	88da      	ldrh	r2, [r3, #6]
 8008f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	1d38      	adds	r0, r7, #4
 8008f26:	6800      	ldr	r0, [r0, #0]
 8008f28:	f001 fa58 	bl	800a3dc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008f2c:	1d3b      	adds	r3, r7, #4
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	613b      	str	r3, [r7, #16]
 8008f32:	1d3b      	adds	r3, r7, #4
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	4413      	add	r3, r2
 8008f42:	613b      	str	r3, [r7, #16]
 8008f44:	463b      	mov	r3, r7
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	011a      	lsls	r2, r3, #4
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	4413      	add	r3, r2
 8008f50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008f54:	60fb      	str	r3, [r7, #12]
 8008f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	801a      	strh	r2, [r3, #0]
 8008f60:	f000 bcdb 	b.w	800991a <USB_EPStartXfer+0xa52>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008f64:	463b      	mov	r3, r7
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	78db      	ldrb	r3, [r3, #3]
 8008f6a:	2b02      	cmp	r3, #2
 8008f6c:	f040 836f 	bne.w	800964e <USB_EPStartXfer+0x786>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008f70:	463b      	mov	r3, r7
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	6a1a      	ldr	r2, [r3, #32]
 8008f76:	463b      	mov	r3, r7
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	691b      	ldr	r3, [r3, #16]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	f240 8313 	bls.w	80095a8 <USB_EPStartXfer+0x6e0>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008f82:	1d3b      	adds	r3, r7, #4
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	463b      	mov	r3, r7
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	4413      	add	r3, r2
 8008f90:	881b      	ldrh	r3, [r3, #0]
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f9c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008fa0:	1d3b      	adds	r3, r7, #4
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	463b      	mov	r3, r7
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	441a      	add	r2, r3
 8008fae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fba:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008fc6:	463b      	mov	r3, r7
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	6a1a      	ldr	r2, [r3, #32]
 8008fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fd0:	1ad2      	subs	r2, r2, r3
 8008fd2:	463b      	mov	r3, r7
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008fd8:	1d3b      	adds	r3, r7, #4
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	463b      	mov	r3, r7
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	4413      	add	r3, r2
 8008fe6:	881b      	ldrh	r3, [r3, #0]
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	f000 816d 	beq.w	80092ce <USB_EPStartXfer+0x406>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008ff4:	1d3b      	adds	r3, r7, #4
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	633b      	str	r3, [r7, #48]	; 0x30
 8008ffa:	463b      	mov	r3, r7
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	785b      	ldrb	r3, [r3, #1]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d16e      	bne.n	80090e2 <USB_EPStartXfer+0x21a>
 8009004:	1d3b      	adds	r3, r7, #4
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	62bb      	str	r3, [r7, #40]	; 0x28
 800900a:	1d3b      	adds	r3, r7, #4
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009012:	b29b      	uxth	r3, r3
 8009014:	461a      	mov	r2, r3
 8009016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009018:	4413      	add	r3, r2
 800901a:	62bb      	str	r3, [r7, #40]	; 0x28
 800901c:	463b      	mov	r3, r7
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	011a      	lsls	r2, r3, #4
 8009024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009026:	4413      	add	r3, r2
 8009028:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800902c:	627b      	str	r3, [r7, #36]	; 0x24
 800902e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009030:	881b      	ldrh	r3, [r3, #0]
 8009032:	b29b      	uxth	r3, r3
 8009034:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009038:	b29a      	uxth	r2, r3
 800903a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903c:	801a      	strh	r2, [r3, #0]
 800903e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009042:	2b3e      	cmp	r3, #62	; 0x3e
 8009044:	d921      	bls.n	800908a <USB_EPStartXfer+0x1c2>
 8009046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800904a:	095b      	lsrs	r3, r3, #5
 800904c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009054:	f003 031f 	and.w	r3, r3, #31
 8009058:	2b00      	cmp	r3, #0
 800905a:	d104      	bne.n	8009066 <USB_EPStartXfer+0x19e>
 800905c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009060:	3b01      	subs	r3, #1
 8009062:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009068:	881b      	ldrh	r3, [r3, #0]
 800906a:	b29a      	uxth	r2, r3
 800906c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009070:	b29b      	uxth	r3, r3
 8009072:	029b      	lsls	r3, r3, #10
 8009074:	b29b      	uxth	r3, r3
 8009076:	4313      	orrs	r3, r2
 8009078:	b29b      	uxth	r3, r3
 800907a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800907e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009082:	b29a      	uxth	r2, r3
 8009084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009086:	801a      	strh	r2, [r3, #0]
 8009088:	e047      	b.n	800911a <USB_EPStartXfer+0x252>
 800908a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800908e:	2b00      	cmp	r3, #0
 8009090:	d10a      	bne.n	80090a8 <USB_EPStartXfer+0x1e0>
 8009092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009094:	881b      	ldrh	r3, [r3, #0]
 8009096:	b29b      	uxth	r3, r3
 8009098:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800909c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090a0:	b29a      	uxth	r2, r3
 80090a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a4:	801a      	strh	r2, [r3, #0]
 80090a6:	e038      	b.n	800911a <USB_EPStartXfer+0x252>
 80090a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090ac:	085b      	lsrs	r3, r3, #1
 80090ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80090b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090b6:	f003 0301 	and.w	r3, r3, #1
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d004      	beq.n	80090c8 <USB_EPStartXfer+0x200>
 80090be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80090c2:	3301      	adds	r3, #1
 80090c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80090c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ca:	881b      	ldrh	r3, [r3, #0]
 80090cc:	b29a      	uxth	r2, r3
 80090ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	029b      	lsls	r3, r3, #10
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	4313      	orrs	r3, r2
 80090da:	b29a      	uxth	r2, r3
 80090dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090de:	801a      	strh	r2, [r3, #0]
 80090e0:	e01b      	b.n	800911a <USB_EPStartXfer+0x252>
 80090e2:	463b      	mov	r3, r7
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	785b      	ldrb	r3, [r3, #1]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d116      	bne.n	800911a <USB_EPStartXfer+0x252>
 80090ec:	1d3b      	adds	r3, r7, #4
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	461a      	mov	r2, r3
 80090f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090fa:	4413      	add	r3, r2
 80090fc:	633b      	str	r3, [r7, #48]	; 0x30
 80090fe:	463b      	mov	r3, r7
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	011a      	lsls	r2, r3, #4
 8009106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009108:	4413      	add	r3, r2
 800910a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800910e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009114:	b29a      	uxth	r2, r3
 8009116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009118:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800911a:	463b      	mov	r3, r7
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	895b      	ldrh	r3, [r3, #10]
 8009120:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009124:	463b      	mov	r3, r7
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	6959      	ldr	r1, [r3, #20]
 800912a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800912e:	b29b      	uxth	r3, r3
 8009130:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009134:	1d38      	adds	r0, r7, #4
 8009136:	6800      	ldr	r0, [r0, #0]
 8009138:	f001 f950 	bl	800a3dc <USB_WritePMA>
            ep->xfer_buff += len;
 800913c:	463b      	mov	r3, r7
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	695a      	ldr	r2, [r3, #20]
 8009142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009146:	441a      	add	r2, r3
 8009148:	463b      	mov	r3, r7
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800914e:	463b      	mov	r3, r7
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	6a1a      	ldr	r2, [r3, #32]
 8009154:	463b      	mov	r3, r7
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	691b      	ldr	r3, [r3, #16]
 800915a:	429a      	cmp	r2, r3
 800915c:	d909      	bls.n	8009172 <USB_EPStartXfer+0x2aa>
            {
              ep->xfer_len_db -= len;
 800915e:	463b      	mov	r3, r7
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	6a1a      	ldr	r2, [r3, #32]
 8009164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009168:	1ad2      	subs	r2, r2, r3
 800916a:	463b      	mov	r3, r7
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	621a      	str	r2, [r3, #32]
 8009170:	e008      	b.n	8009184 <USB_EPStartXfer+0x2bc>
            }
            else
            {
              len = ep->xfer_len_db;
 8009172:	463b      	mov	r3, r7
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	6a1b      	ldr	r3, [r3, #32]
 8009178:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800917c:	463b      	mov	r3, r7
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2200      	movs	r2, #0
 8009182:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009184:	463b      	mov	r3, r7
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	785b      	ldrb	r3, [r3, #1]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d16e      	bne.n	800926c <USB_EPStartXfer+0x3a4>
 800918e:	1d3b      	adds	r3, r7, #4
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	61bb      	str	r3, [r7, #24]
 8009194:	1d3b      	adds	r3, r7, #4
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800919c:	b29b      	uxth	r3, r3
 800919e:	461a      	mov	r2, r3
 80091a0:	69bb      	ldr	r3, [r7, #24]
 80091a2:	4413      	add	r3, r2
 80091a4:	61bb      	str	r3, [r7, #24]
 80091a6:	463b      	mov	r3, r7
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	011a      	lsls	r2, r3, #4
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	4413      	add	r3, r2
 80091b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80091b6:	617b      	str	r3, [r7, #20]
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	881b      	ldrh	r3, [r3, #0]
 80091bc:	b29b      	uxth	r3, r3
 80091be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091c2:	b29a      	uxth	r2, r3
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	801a      	strh	r2, [r3, #0]
 80091c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091cc:	2b3e      	cmp	r3, #62	; 0x3e
 80091ce:	d921      	bls.n	8009214 <USB_EPStartXfer+0x34c>
 80091d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091d4:	095b      	lsrs	r3, r3, #5
 80091d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80091da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091de:	f003 031f 	and.w	r3, r3, #31
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d104      	bne.n	80091f0 <USB_EPStartXfer+0x328>
 80091e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091ea:	3b01      	subs	r3, #1
 80091ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	881b      	ldrh	r3, [r3, #0]
 80091f4:	b29a      	uxth	r2, r3
 80091f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	029b      	lsls	r3, r3, #10
 80091fe:	b29b      	uxth	r3, r3
 8009200:	4313      	orrs	r3, r2
 8009202:	b29b      	uxth	r3, r3
 8009204:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009208:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800920c:	b29a      	uxth	r2, r3
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	801a      	strh	r2, [r3, #0]
 8009212:	e04a      	b.n	80092aa <USB_EPStartXfer+0x3e2>
 8009214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009218:	2b00      	cmp	r3, #0
 800921a:	d10a      	bne.n	8009232 <USB_EPStartXfer+0x36a>
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	881b      	ldrh	r3, [r3, #0]
 8009220:	b29b      	uxth	r3, r3
 8009222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800922a:	b29a      	uxth	r2, r3
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	801a      	strh	r2, [r3, #0]
 8009230:	e03b      	b.n	80092aa <USB_EPStartXfer+0x3e2>
 8009232:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009236:	085b      	lsrs	r3, r3, #1
 8009238:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800923c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009240:	f003 0301 	and.w	r3, r3, #1
 8009244:	2b00      	cmp	r3, #0
 8009246:	d004      	beq.n	8009252 <USB_EPStartXfer+0x38a>
 8009248:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800924c:	3301      	adds	r3, #1
 800924e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	881b      	ldrh	r3, [r3, #0]
 8009256:	b29a      	uxth	r2, r3
 8009258:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800925c:	b29b      	uxth	r3, r3
 800925e:	029b      	lsls	r3, r3, #10
 8009260:	b29b      	uxth	r3, r3
 8009262:	4313      	orrs	r3, r2
 8009264:	b29a      	uxth	r2, r3
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	801a      	strh	r2, [r3, #0]
 800926a:	e01e      	b.n	80092aa <USB_EPStartXfer+0x3e2>
 800926c:	463b      	mov	r3, r7
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	785b      	ldrb	r3, [r3, #1]
 8009272:	2b01      	cmp	r3, #1
 8009274:	d119      	bne.n	80092aa <USB_EPStartXfer+0x3e2>
 8009276:	1d3b      	adds	r3, r7, #4
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	623b      	str	r3, [r7, #32]
 800927c:	1d3b      	adds	r3, r7, #4
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009284:	b29b      	uxth	r3, r3
 8009286:	461a      	mov	r2, r3
 8009288:	6a3b      	ldr	r3, [r7, #32]
 800928a:	4413      	add	r3, r2
 800928c:	623b      	str	r3, [r7, #32]
 800928e:	463b      	mov	r3, r7
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	011a      	lsls	r2, r3, #4
 8009296:	6a3b      	ldr	r3, [r7, #32]
 8009298:	4413      	add	r3, r2
 800929a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800929e:	61fb      	str	r3, [r7, #28]
 80092a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092a4:	b29a      	uxth	r2, r3
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80092aa:	463b      	mov	r3, r7
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	891b      	ldrh	r3, [r3, #8]
 80092b0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80092b4:	463b      	mov	r3, r7
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	6959      	ldr	r1, [r3, #20]
 80092ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092be:	b29b      	uxth	r3, r3
 80092c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80092c4:	1d38      	adds	r0, r7, #4
 80092c6:	6800      	ldr	r0, [r0, #0]
 80092c8:	f001 f888 	bl	800a3dc <USB_WritePMA>
 80092cc:	e325      	b.n	800991a <USB_EPStartXfer+0xa52>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80092ce:	463b      	mov	r3, r7
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	785b      	ldrb	r3, [r3, #1]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d16e      	bne.n	80093b6 <USB_EPStartXfer+0x4ee>
 80092d8:	1d3b      	adds	r3, r7, #4
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80092de:	1d3b      	adds	r3, r7, #4
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	461a      	mov	r2, r3
 80092ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092ec:	4413      	add	r3, r2
 80092ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80092f0:	463b      	mov	r3, r7
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	011a      	lsls	r2, r3, #4
 80092f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092fa:	4413      	add	r3, r2
 80092fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009300:	647b      	str	r3, [r7, #68]	; 0x44
 8009302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009304:	881b      	ldrh	r3, [r3, #0]
 8009306:	b29b      	uxth	r3, r3
 8009308:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800930c:	b29a      	uxth	r2, r3
 800930e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009310:	801a      	strh	r2, [r3, #0]
 8009312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009316:	2b3e      	cmp	r3, #62	; 0x3e
 8009318:	d921      	bls.n	800935e <USB_EPStartXfer+0x496>
 800931a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800931e:	095b      	lsrs	r3, r3, #5
 8009320:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009328:	f003 031f 	and.w	r3, r3, #31
 800932c:	2b00      	cmp	r3, #0
 800932e:	d104      	bne.n	800933a <USB_EPStartXfer+0x472>
 8009330:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009334:	3b01      	subs	r3, #1
 8009336:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800933a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800933c:	881b      	ldrh	r3, [r3, #0]
 800933e:	b29a      	uxth	r2, r3
 8009340:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009344:	b29b      	uxth	r3, r3
 8009346:	029b      	lsls	r3, r3, #10
 8009348:	b29b      	uxth	r3, r3
 800934a:	4313      	orrs	r3, r2
 800934c:	b29b      	uxth	r3, r3
 800934e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009356:	b29a      	uxth	r2, r3
 8009358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800935a:	801a      	strh	r2, [r3, #0]
 800935c:	e04a      	b.n	80093f4 <USB_EPStartXfer+0x52c>
 800935e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009362:	2b00      	cmp	r3, #0
 8009364:	d10a      	bne.n	800937c <USB_EPStartXfer+0x4b4>
 8009366:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009368:	881b      	ldrh	r3, [r3, #0]
 800936a:	b29b      	uxth	r3, r3
 800936c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009374:	b29a      	uxth	r2, r3
 8009376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009378:	801a      	strh	r2, [r3, #0]
 800937a:	e03b      	b.n	80093f4 <USB_EPStartXfer+0x52c>
 800937c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009380:	085b      	lsrs	r3, r3, #1
 8009382:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800938a:	f003 0301 	and.w	r3, r3, #1
 800938e:	2b00      	cmp	r3, #0
 8009390:	d004      	beq.n	800939c <USB_EPStartXfer+0x4d4>
 8009392:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009396:	3301      	adds	r3, #1
 8009398:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800939c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800939e:	881b      	ldrh	r3, [r3, #0]
 80093a0:	b29a      	uxth	r2, r3
 80093a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	029b      	lsls	r3, r3, #10
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	4313      	orrs	r3, r2
 80093ae:	b29a      	uxth	r2, r3
 80093b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093b2:	801a      	strh	r2, [r3, #0]
 80093b4:	e01e      	b.n	80093f4 <USB_EPStartXfer+0x52c>
 80093b6:	463b      	mov	r3, r7
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	785b      	ldrb	r3, [r3, #1]
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d119      	bne.n	80093f4 <USB_EPStartXfer+0x52c>
 80093c0:	1d3b      	adds	r3, r7, #4
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	653b      	str	r3, [r7, #80]	; 0x50
 80093c6:	1d3b      	adds	r3, r7, #4
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	461a      	mov	r2, r3
 80093d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093d4:	4413      	add	r3, r2
 80093d6:	653b      	str	r3, [r7, #80]	; 0x50
 80093d8:	463b      	mov	r3, r7
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	011a      	lsls	r2, r3, #4
 80093e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093e2:	4413      	add	r3, r2
 80093e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80093e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093ee:	b29a      	uxth	r2, r3
 80093f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093f2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80093f4:	463b      	mov	r3, r7
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	891b      	ldrh	r3, [r3, #8]
 80093fa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80093fe:	463b      	mov	r3, r7
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	6959      	ldr	r1, [r3, #20]
 8009404:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009408:	b29b      	uxth	r3, r3
 800940a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800940e:	1d38      	adds	r0, r7, #4
 8009410:	6800      	ldr	r0, [r0, #0]
 8009412:	f000 ffe3 	bl	800a3dc <USB_WritePMA>
            ep->xfer_buff += len;
 8009416:	463b      	mov	r3, r7
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	695a      	ldr	r2, [r3, #20]
 800941c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009420:	441a      	add	r2, r3
 8009422:	463b      	mov	r3, r7
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009428:	463b      	mov	r3, r7
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	6a1a      	ldr	r2, [r3, #32]
 800942e:	463b      	mov	r3, r7
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	691b      	ldr	r3, [r3, #16]
 8009434:	429a      	cmp	r2, r3
 8009436:	d909      	bls.n	800944c <USB_EPStartXfer+0x584>
            {
              ep->xfer_len_db -= len;
 8009438:	463b      	mov	r3, r7
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	6a1a      	ldr	r2, [r3, #32]
 800943e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009442:	1ad2      	subs	r2, r2, r3
 8009444:	463b      	mov	r3, r7
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	621a      	str	r2, [r3, #32]
 800944a:	e008      	b.n	800945e <USB_EPStartXfer+0x596>
            }
            else
            {
              len = ep->xfer_len_db;
 800944c:	463b      	mov	r3, r7
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	6a1b      	ldr	r3, [r3, #32]
 8009452:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009456:	463b      	mov	r3, r7
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2200      	movs	r2, #0
 800945c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800945e:	1d3b      	adds	r3, r7, #4
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	643b      	str	r3, [r7, #64]	; 0x40
 8009464:	463b      	mov	r3, r7
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	785b      	ldrb	r3, [r3, #1]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d16e      	bne.n	800954c <USB_EPStartXfer+0x684>
 800946e:	1d3b      	adds	r3, r7, #4
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	63bb      	str	r3, [r7, #56]	; 0x38
 8009474:	1d3b      	adds	r3, r7, #4
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800947c:	b29b      	uxth	r3, r3
 800947e:	461a      	mov	r2, r3
 8009480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009482:	4413      	add	r3, r2
 8009484:	63bb      	str	r3, [r7, #56]	; 0x38
 8009486:	463b      	mov	r3, r7
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	011a      	lsls	r2, r3, #4
 800948e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009490:	4413      	add	r3, r2
 8009492:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009496:	637b      	str	r3, [r7, #52]	; 0x34
 8009498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800949a:	881b      	ldrh	r3, [r3, #0]
 800949c:	b29b      	uxth	r3, r3
 800949e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094a2:	b29a      	uxth	r2, r3
 80094a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094a6:	801a      	strh	r2, [r3, #0]
 80094a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094ac:	2b3e      	cmp	r3, #62	; 0x3e
 80094ae:	d921      	bls.n	80094f4 <USB_EPStartXfer+0x62c>
 80094b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094b4:	095b      	lsrs	r3, r3, #5
 80094b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80094ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094be:	f003 031f 	and.w	r3, r3, #31
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d104      	bne.n	80094d0 <USB_EPStartXfer+0x608>
 80094c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094ca:	3b01      	subs	r3, #1
 80094cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80094d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094d2:	881b      	ldrh	r3, [r3, #0]
 80094d4:	b29a      	uxth	r2, r3
 80094d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094da:	b29b      	uxth	r3, r3
 80094dc:	029b      	lsls	r3, r3, #10
 80094de:	b29b      	uxth	r3, r3
 80094e0:	4313      	orrs	r3, r2
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094ec:	b29a      	uxth	r2, r3
 80094ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f0:	801a      	strh	r2, [r3, #0]
 80094f2:	e047      	b.n	8009584 <USB_EPStartXfer+0x6bc>
 80094f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d10a      	bne.n	8009512 <USB_EPStartXfer+0x64a>
 80094fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094fe:	881b      	ldrh	r3, [r3, #0]
 8009500:	b29b      	uxth	r3, r3
 8009502:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009506:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800950a:	b29a      	uxth	r2, r3
 800950c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800950e:	801a      	strh	r2, [r3, #0]
 8009510:	e038      	b.n	8009584 <USB_EPStartXfer+0x6bc>
 8009512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009516:	085b      	lsrs	r3, r3, #1
 8009518:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800951c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009520:	f003 0301 	and.w	r3, r3, #1
 8009524:	2b00      	cmp	r3, #0
 8009526:	d004      	beq.n	8009532 <USB_EPStartXfer+0x66a>
 8009528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800952c:	3301      	adds	r3, #1
 800952e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009534:	881b      	ldrh	r3, [r3, #0]
 8009536:	b29a      	uxth	r2, r3
 8009538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800953c:	b29b      	uxth	r3, r3
 800953e:	029b      	lsls	r3, r3, #10
 8009540:	b29b      	uxth	r3, r3
 8009542:	4313      	orrs	r3, r2
 8009544:	b29a      	uxth	r2, r3
 8009546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009548:	801a      	strh	r2, [r3, #0]
 800954a:	e01b      	b.n	8009584 <USB_EPStartXfer+0x6bc>
 800954c:	463b      	mov	r3, r7
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	785b      	ldrb	r3, [r3, #1]
 8009552:	2b01      	cmp	r3, #1
 8009554:	d116      	bne.n	8009584 <USB_EPStartXfer+0x6bc>
 8009556:	1d3b      	adds	r3, r7, #4
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800955e:	b29b      	uxth	r3, r3
 8009560:	461a      	mov	r2, r3
 8009562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009564:	4413      	add	r3, r2
 8009566:	643b      	str	r3, [r7, #64]	; 0x40
 8009568:	463b      	mov	r3, r7
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	011a      	lsls	r2, r3, #4
 8009570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009572:	4413      	add	r3, r2
 8009574:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009578:	63fb      	str	r3, [r7, #60]	; 0x3c
 800957a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800957e:	b29a      	uxth	r2, r3
 8009580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009582:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009584:	463b      	mov	r3, r7
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	895b      	ldrh	r3, [r3, #10]
 800958a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800958e:	463b      	mov	r3, r7
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	6959      	ldr	r1, [r3, #20]
 8009594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009598:	b29b      	uxth	r3, r3
 800959a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800959e:	1d38      	adds	r0, r7, #4
 80095a0:	6800      	ldr	r0, [r0, #0]
 80095a2:	f000 ff1b 	bl	800a3dc <USB_WritePMA>
 80095a6:	e1b8      	b.n	800991a <USB_EPStartXfer+0xa52>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80095a8:	463b      	mov	r3, r7
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	6a1b      	ldr	r3, [r3, #32]
 80095ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80095b2:	1d3b      	adds	r3, r7, #4
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	463b      	mov	r3, r7
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	4413      	add	r3, r2
 80095c0:	881b      	ldrh	r3, [r3, #0]
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80095c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095cc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80095d0:	1d3b      	adds	r3, r7, #4
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	463b      	mov	r3, r7
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	441a      	add	r2, r3
 80095de:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80095e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80095f6:	1d3b      	adds	r3, r7, #4
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095fc:	1d3b      	adds	r3, r7, #4
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009604:	b29b      	uxth	r3, r3
 8009606:	461a      	mov	r2, r3
 8009608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800960a:	4413      	add	r3, r2
 800960c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800960e:	463b      	mov	r3, r7
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	011a      	lsls	r2, r3, #4
 8009616:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009618:	4413      	add	r3, r2
 800961a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800961e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009620:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009624:	b29a      	uxth	r2, r3
 8009626:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009628:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800962a:	463b      	mov	r3, r7
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	891b      	ldrh	r3, [r3, #8]
 8009630:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009634:	463b      	mov	r3, r7
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	6959      	ldr	r1, [r3, #20]
 800963a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800963e:	b29b      	uxth	r3, r3
 8009640:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009644:	1d38      	adds	r0, r7, #4
 8009646:	6800      	ldr	r0, [r0, #0]
 8009648:	f000 fec8 	bl	800a3dc <USB_WritePMA>
 800964c:	e165      	b.n	800991a <USB_EPStartXfer+0xa52>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800964e:	463b      	mov	r3, r7
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	6a1a      	ldr	r2, [r3, #32]
 8009654:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009658:	1ad2      	subs	r2, r2, r3
 800965a:	463b      	mov	r3, r7
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009660:	1d3b      	adds	r3, r7, #4
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	463b      	mov	r3, r7
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	4413      	add	r3, r2
 800966e:	881b      	ldrh	r3, [r3, #0]
 8009670:	b29b      	uxth	r3, r3
 8009672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009676:	2b00      	cmp	r3, #0
 8009678:	f000 80a5 	beq.w	80097c6 <USB_EPStartXfer+0x8fe>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800967c:	1d3b      	adds	r3, r7, #4
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	673b      	str	r3, [r7, #112]	; 0x70
 8009682:	463b      	mov	r3, r7
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	785b      	ldrb	r3, [r3, #1]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d16e      	bne.n	800976a <USB_EPStartXfer+0x8a2>
 800968c:	1d3b      	adds	r3, r7, #4
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	66bb      	str	r3, [r7, #104]	; 0x68
 8009692:	1d3b      	adds	r3, r7, #4
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800969a:	b29b      	uxth	r3, r3
 800969c:	461a      	mov	r2, r3
 800969e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80096a0:	4413      	add	r3, r2
 80096a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80096a4:	463b      	mov	r3, r7
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	011a      	lsls	r2, r3, #4
 80096ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80096ae:	4413      	add	r3, r2
 80096b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80096b4:	667b      	str	r3, [r7, #100]	; 0x64
 80096b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096b8:	881b      	ldrh	r3, [r3, #0]
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096c0:	b29a      	uxth	r2, r3
 80096c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096c4:	801a      	strh	r2, [r3, #0]
 80096c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096ca:	2b3e      	cmp	r3, #62	; 0x3e
 80096cc:	d921      	bls.n	8009712 <USB_EPStartXfer+0x84a>
 80096ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096d2:	095b      	lsrs	r3, r3, #5
 80096d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80096d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096dc:	f003 031f 	and.w	r3, r3, #31
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d104      	bne.n	80096ee <USB_EPStartXfer+0x826>
 80096e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80096e8:	3b01      	subs	r3, #1
 80096ea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80096ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096f0:	881b      	ldrh	r3, [r3, #0]
 80096f2:	b29a      	uxth	r2, r3
 80096f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	029b      	lsls	r3, r3, #10
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	4313      	orrs	r3, r2
 8009700:	b29b      	uxth	r3, r3
 8009702:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009706:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800970a:	b29a      	uxth	r2, r3
 800970c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800970e:	801a      	strh	r2, [r3, #0]
 8009710:	e047      	b.n	80097a2 <USB_EPStartXfer+0x8da>
 8009712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009716:	2b00      	cmp	r3, #0
 8009718:	d10a      	bne.n	8009730 <USB_EPStartXfer+0x868>
 800971a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800971c:	881b      	ldrh	r3, [r3, #0]
 800971e:	b29b      	uxth	r3, r3
 8009720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009728:	b29a      	uxth	r2, r3
 800972a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800972c:	801a      	strh	r2, [r3, #0]
 800972e:	e038      	b.n	80097a2 <USB_EPStartXfer+0x8da>
 8009730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009734:	085b      	lsrs	r3, r3, #1
 8009736:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800973a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800973e:	f003 0301 	and.w	r3, r3, #1
 8009742:	2b00      	cmp	r3, #0
 8009744:	d004      	beq.n	8009750 <USB_EPStartXfer+0x888>
 8009746:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800974a:	3301      	adds	r3, #1
 800974c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009750:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009752:	881b      	ldrh	r3, [r3, #0]
 8009754:	b29a      	uxth	r2, r3
 8009756:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800975a:	b29b      	uxth	r3, r3
 800975c:	029b      	lsls	r3, r3, #10
 800975e:	b29b      	uxth	r3, r3
 8009760:	4313      	orrs	r3, r2
 8009762:	b29a      	uxth	r2, r3
 8009764:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009766:	801a      	strh	r2, [r3, #0]
 8009768:	e01b      	b.n	80097a2 <USB_EPStartXfer+0x8da>
 800976a:	463b      	mov	r3, r7
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	785b      	ldrb	r3, [r3, #1]
 8009770:	2b01      	cmp	r3, #1
 8009772:	d116      	bne.n	80097a2 <USB_EPStartXfer+0x8da>
 8009774:	1d3b      	adds	r3, r7, #4
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800977c:	b29b      	uxth	r3, r3
 800977e:	461a      	mov	r2, r3
 8009780:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009782:	4413      	add	r3, r2
 8009784:	673b      	str	r3, [r7, #112]	; 0x70
 8009786:	463b      	mov	r3, r7
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	011a      	lsls	r2, r3, #4
 800978e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009790:	4413      	add	r3, r2
 8009792:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009796:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009798:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800979c:	b29a      	uxth	r2, r3
 800979e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097a0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80097a2:	463b      	mov	r3, r7
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	895b      	ldrh	r3, [r3, #10]
 80097a8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80097ac:	463b      	mov	r3, r7
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	6959      	ldr	r1, [r3, #20]
 80097b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80097bc:	1d38      	adds	r0, r7, #4
 80097be:	6800      	ldr	r0, [r0, #0]
 80097c0:	f000 fe0c 	bl	800a3dc <USB_WritePMA>
 80097c4:	e0a9      	b.n	800991a <USB_EPStartXfer+0xa52>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80097c6:	463b      	mov	r3, r7
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	785b      	ldrb	r3, [r3, #1]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d16e      	bne.n	80098ae <USB_EPStartXfer+0x9e6>
 80097d0:	1d3b      	adds	r3, r7, #4
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80097d6:	1d3b      	adds	r3, r7, #4
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097de:	b29b      	uxth	r3, r3
 80097e0:	461a      	mov	r2, r3
 80097e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80097e4:	4413      	add	r3, r2
 80097e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80097e8:	463b      	mov	r3, r7
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	011a      	lsls	r2, r3, #4
 80097f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80097f2:	4413      	add	r3, r2
 80097f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80097f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80097fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097fc:	881b      	ldrh	r3, [r3, #0]
 80097fe:	b29b      	uxth	r3, r3
 8009800:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009804:	b29a      	uxth	r2, r3
 8009806:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009808:	801a      	strh	r2, [r3, #0]
 800980a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800980e:	2b3e      	cmp	r3, #62	; 0x3e
 8009810:	d921      	bls.n	8009856 <USB_EPStartXfer+0x98e>
 8009812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009816:	095b      	lsrs	r3, r3, #5
 8009818:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800981c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009820:	f003 031f 	and.w	r3, r3, #31
 8009824:	2b00      	cmp	r3, #0
 8009826:	d104      	bne.n	8009832 <USB_EPStartXfer+0x96a>
 8009828:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800982c:	3b01      	subs	r3, #1
 800982e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009832:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009834:	881b      	ldrh	r3, [r3, #0]
 8009836:	b29a      	uxth	r2, r3
 8009838:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800983c:	b29b      	uxth	r3, r3
 800983e:	029b      	lsls	r3, r3, #10
 8009840:	b29b      	uxth	r3, r3
 8009842:	4313      	orrs	r3, r2
 8009844:	b29b      	uxth	r3, r3
 8009846:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800984a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800984e:	b29a      	uxth	r2, r3
 8009850:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009852:	801a      	strh	r2, [r3, #0]
 8009854:	e050      	b.n	80098f8 <USB_EPStartXfer+0xa30>
 8009856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800985a:	2b00      	cmp	r3, #0
 800985c:	d10a      	bne.n	8009874 <USB_EPStartXfer+0x9ac>
 800985e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009860:	881b      	ldrh	r3, [r3, #0]
 8009862:	b29b      	uxth	r3, r3
 8009864:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009868:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800986c:	b29a      	uxth	r2, r3
 800986e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009870:	801a      	strh	r2, [r3, #0]
 8009872:	e041      	b.n	80098f8 <USB_EPStartXfer+0xa30>
 8009874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009878:	085b      	lsrs	r3, r3, #1
 800987a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800987e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009882:	f003 0301 	and.w	r3, r3, #1
 8009886:	2b00      	cmp	r3, #0
 8009888:	d004      	beq.n	8009894 <USB_EPStartXfer+0x9cc>
 800988a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800988e:	3301      	adds	r3, #1
 8009890:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009894:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009896:	881b      	ldrh	r3, [r3, #0]
 8009898:	b29a      	uxth	r2, r3
 800989a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800989e:	b29b      	uxth	r3, r3
 80098a0:	029b      	lsls	r3, r3, #10
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	4313      	orrs	r3, r2
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098aa:	801a      	strh	r2, [r3, #0]
 80098ac:	e024      	b.n	80098f8 <USB_EPStartXfer+0xa30>
 80098ae:	463b      	mov	r3, r7
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	785b      	ldrb	r3, [r3, #1]
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d11f      	bne.n	80098f8 <USB_EPStartXfer+0xa30>
 80098b8:	1d3b      	adds	r3, r7, #4
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80098c0:	1d3b      	adds	r3, r7, #4
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	461a      	mov	r2, r3
 80098cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80098d0:	4413      	add	r3, r2
 80098d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80098d6:	463b      	mov	r3, r7
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	011a      	lsls	r2, r3, #4
 80098de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80098e2:	4413      	add	r3, r2
 80098e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80098e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80098ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098f0:	b29a      	uxth	r2, r3
 80098f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80098f6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80098f8:	463b      	mov	r3, r7
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	891b      	ldrh	r3, [r3, #8]
 80098fe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009902:	463b      	mov	r3, r7
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	6959      	ldr	r1, [r3, #20]
 8009908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800990c:	b29b      	uxth	r3, r3
 800990e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009912:	1d38      	adds	r0, r7, #4
 8009914:	6800      	ldr	r0, [r0, #0]
 8009916:	f000 fd61 	bl	800a3dc <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800991a:	1d3b      	adds	r3, r7, #4
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	463b      	mov	r3, r7
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	4413      	add	r3, r2
 8009928:	881b      	ldrh	r3, [r3, #0]
 800992a:	b29b      	uxth	r3, r3
 800992c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009934:	817b      	strh	r3, [r7, #10]
 8009936:	897b      	ldrh	r3, [r7, #10]
 8009938:	f083 0310 	eor.w	r3, r3, #16
 800993c:	817b      	strh	r3, [r7, #10]
 800993e:	897b      	ldrh	r3, [r7, #10]
 8009940:	f083 0320 	eor.w	r3, r3, #32
 8009944:	817b      	strh	r3, [r7, #10]
 8009946:	1d3b      	adds	r3, r7, #4
 8009948:	681a      	ldr	r2, [r3, #0]
 800994a:	463b      	mov	r3, r7
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	441a      	add	r2, r3
 8009954:	897b      	ldrh	r3, [r7, #10]
 8009956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800995a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800995e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009966:	b29b      	uxth	r3, r3
 8009968:	8013      	strh	r3, [r2, #0]
 800996a:	e3f3      	b.n	800a154 <USB_EPStartXfer+0x128c>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800996c:	463b      	mov	r3, r7
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	7b1b      	ldrb	r3, [r3, #12]
 8009972:	2b00      	cmp	r3, #0
 8009974:	f040 809c 	bne.w	8009ab0 <USB_EPStartXfer+0xbe8>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009978:	463b      	mov	r3, r7
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	699a      	ldr	r2, [r3, #24]
 800997e:	463b      	mov	r3, r7
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	429a      	cmp	r2, r3
 8009986:	d90e      	bls.n	80099a6 <USB_EPStartXfer+0xade>
      {
        len = ep->maxpacket;
 8009988:	463b      	mov	r3, r7
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	691b      	ldr	r3, [r3, #16]
 800998e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8009992:	463b      	mov	r3, r7
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	699a      	ldr	r2, [r3, #24]
 8009998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800999c:	1ad2      	subs	r2, r2, r3
 800999e:	463b      	mov	r3, r7
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	619a      	str	r2, [r3, #24]
 80099a4:	e008      	b.n	80099b8 <USB_EPStartXfer+0xaf0>
      }
      else
      {
        len = ep->xfer_len;
 80099a6:	463b      	mov	r3, r7
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	699b      	ldr	r3, [r3, #24]
 80099ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80099b0:	463b      	mov	r3, r7
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2200      	movs	r2, #0
 80099b6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80099b8:	1d3b      	adds	r3, r7, #4
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80099c0:	1d3b      	adds	r3, r7, #4
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	461a      	mov	r2, r3
 80099cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80099d0:	4413      	add	r3, r2
 80099d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80099d6:	463b      	mov	r3, r7
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	011a      	lsls	r2, r3, #4
 80099de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80099e2:	4413      	add	r3, r2
 80099e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80099e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80099ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80099f0:	881b      	ldrh	r3, [r3, #0]
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099f8:	b29a      	uxth	r2, r3
 80099fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80099fe:	801a      	strh	r2, [r3, #0]
 8009a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a04:	2b3e      	cmp	r3, #62	; 0x3e
 8009a06:	d923      	bls.n	8009a50 <USB_EPStartXfer+0xb88>
 8009a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a0c:	095b      	lsrs	r3, r3, #5
 8009a0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a16:	f003 031f 	and.w	r3, r3, #31
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d104      	bne.n	8009a28 <USB_EPStartXfer+0xb60>
 8009a1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009a22:	3b01      	subs	r3, #1
 8009a24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009a28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a2c:	881b      	ldrh	r3, [r3, #0]
 8009a2e:	b29a      	uxth	r2, r3
 8009a30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	029b      	lsls	r3, r3, #10
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a46:	b29a      	uxth	r2, r3
 8009a48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a4c:	801a      	strh	r2, [r3, #0]
 8009a4e:	e353      	b.n	800a0f8 <USB_EPStartXfer+0x1230>
 8009a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d10c      	bne.n	8009a72 <USB_EPStartXfer+0xbaa>
 8009a58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a5c:	881b      	ldrh	r3, [r3, #0]
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a68:	b29a      	uxth	r2, r3
 8009a6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a6e:	801a      	strh	r2, [r3, #0]
 8009a70:	e342      	b.n	800a0f8 <USB_EPStartXfer+0x1230>
 8009a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a76:	085b      	lsrs	r3, r3, #1
 8009a78:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a80:	f003 0301 	and.w	r3, r3, #1
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d004      	beq.n	8009a92 <USB_EPStartXfer+0xbca>
 8009a88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009a92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a96:	881b      	ldrh	r3, [r3, #0]
 8009a98:	b29a      	uxth	r2, r3
 8009a9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	029b      	lsls	r3, r3, #10
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	b29a      	uxth	r2, r3
 8009aa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009aac:	801a      	strh	r2, [r3, #0]
 8009aae:	e323      	b.n	800a0f8 <USB_EPStartXfer+0x1230>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009ab0:	463b      	mov	r3, r7
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	78db      	ldrb	r3, [r3, #3]
 8009ab6:	2b02      	cmp	r3, #2
 8009ab8:	f040 81a9 	bne.w	8009e0e <USB_EPStartXfer+0xf46>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009abc:	463b      	mov	r3, r7
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	785b      	ldrb	r3, [r3, #1]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	f040 8082 	bne.w	8009bcc <USB_EPStartXfer+0xd04>
 8009ac8:	1d3b      	adds	r3, r7, #4
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009ad0:	1d3b      	adds	r3, r7, #4
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	461a      	mov	r2, r3
 8009adc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ae0:	4413      	add	r3, r2
 8009ae2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009ae6:	463b      	mov	r3, r7
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	011a      	lsls	r2, r3, #4
 8009aee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009af2:	4413      	add	r3, r2
 8009af4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009af8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009afc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009b00:	881b      	ldrh	r3, [r3, #0]
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b08:	b29a      	uxth	r2, r3
 8009b0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009b0e:	801a      	strh	r2, [r3, #0]
 8009b10:	463b      	mov	r3, r7
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	691b      	ldr	r3, [r3, #16]
 8009b16:	2b3e      	cmp	r3, #62	; 0x3e
 8009b18:	d925      	bls.n	8009b66 <USB_EPStartXfer+0xc9e>
 8009b1a:	463b      	mov	r3, r7
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	691b      	ldr	r3, [r3, #16]
 8009b20:	095b      	lsrs	r3, r3, #5
 8009b22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009b26:	463b      	mov	r3, r7
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	691b      	ldr	r3, [r3, #16]
 8009b2c:	f003 031f 	and.w	r3, r3, #31
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d104      	bne.n	8009b3e <USB_EPStartXfer+0xc76>
 8009b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009b3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009b42:	881b      	ldrh	r3, [r3, #0]
 8009b44:	b29a      	uxth	r2, r3
 8009b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	029b      	lsls	r3, r3, #10
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	4313      	orrs	r3, r2
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b5c:	b29a      	uxth	r2, r3
 8009b5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009b62:	801a      	strh	r2, [r3, #0]
 8009b64:	e058      	b.n	8009c18 <USB_EPStartXfer+0xd50>
 8009b66:	463b      	mov	r3, r7
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	691b      	ldr	r3, [r3, #16]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d10c      	bne.n	8009b8a <USB_EPStartXfer+0xcc2>
 8009b70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009b74:	881b      	ldrh	r3, [r3, #0]
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b80:	b29a      	uxth	r2, r3
 8009b82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009b86:	801a      	strh	r2, [r3, #0]
 8009b88:	e046      	b.n	8009c18 <USB_EPStartXfer+0xd50>
 8009b8a:	463b      	mov	r3, r7
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	691b      	ldr	r3, [r3, #16]
 8009b90:	085b      	lsrs	r3, r3, #1
 8009b92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009b96:	463b      	mov	r3, r7
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	f003 0301 	and.w	r3, r3, #1
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d004      	beq.n	8009bae <USB_EPStartXfer+0xce6>
 8009ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ba8:	3301      	adds	r3, #1
 8009baa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009bae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009bb2:	881b      	ldrh	r3, [r3, #0]
 8009bb4:	b29a      	uxth	r2, r3
 8009bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	029b      	lsls	r3, r3, #10
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	b29a      	uxth	r2, r3
 8009bc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009bc8:	801a      	strh	r2, [r3, #0]
 8009bca:	e025      	b.n	8009c18 <USB_EPStartXfer+0xd50>
 8009bcc:	463b      	mov	r3, r7
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	785b      	ldrb	r3, [r3, #1]
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d120      	bne.n	8009c18 <USB_EPStartXfer+0xd50>
 8009bd6:	1d3b      	adds	r3, r7, #4
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009bde:	1d3b      	adds	r3, r7, #4
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	461a      	mov	r2, r3
 8009bea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009bee:	4413      	add	r3, r2
 8009bf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009bf4:	463b      	mov	r3, r7
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	011a      	lsls	r2, r3, #4
 8009bfc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009c00:	4413      	add	r3, r2
 8009c02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009c06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009c0a:	463b      	mov	r3, r7
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	691b      	ldr	r3, [r3, #16]
 8009c10:	b29a      	uxth	r2, r3
 8009c12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009c16:	801a      	strh	r2, [r3, #0]
 8009c18:	1d3b      	adds	r3, r7, #4
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009c20:	463b      	mov	r3, r7
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	785b      	ldrb	r3, [r3, #1]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	f040 8082 	bne.w	8009d30 <USB_EPStartXfer+0xe68>
 8009c2c:	1d3b      	adds	r3, r7, #4
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009c34:	1d3b      	adds	r3, r7, #4
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	461a      	mov	r2, r3
 8009c40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c44:	4413      	add	r3, r2
 8009c46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009c4a:	463b      	mov	r3, r7
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	011a      	lsls	r2, r3, #4
 8009c52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c56:	4413      	add	r3, r2
 8009c58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009c5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009c60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009c64:	881b      	ldrh	r3, [r3, #0]
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c6c:	b29a      	uxth	r2, r3
 8009c6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009c72:	801a      	strh	r2, [r3, #0]
 8009c74:	463b      	mov	r3, r7
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	2b3e      	cmp	r3, #62	; 0x3e
 8009c7c:	d925      	bls.n	8009cca <USB_EPStartXfer+0xe02>
 8009c7e:	463b      	mov	r3, r7
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	691b      	ldr	r3, [r3, #16]
 8009c84:	095b      	lsrs	r3, r3, #5
 8009c86:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009c8a:	463b      	mov	r3, r7
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	691b      	ldr	r3, [r3, #16]
 8009c90:	f003 031f 	and.w	r3, r3, #31
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d104      	bne.n	8009ca2 <USB_EPStartXfer+0xdda>
 8009c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c9c:	3b01      	subs	r3, #1
 8009c9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009ca2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ca6:	881b      	ldrh	r3, [r3, #0]
 8009ca8:	b29a      	uxth	r2, r3
 8009caa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	029b      	lsls	r3, r3, #10
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cc0:	b29a      	uxth	r2, r3
 8009cc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009cc6:	801a      	strh	r2, [r3, #0]
 8009cc8:	e054      	b.n	8009d74 <USB_EPStartXfer+0xeac>
 8009cca:	463b      	mov	r3, r7
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	691b      	ldr	r3, [r3, #16]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d10c      	bne.n	8009cee <USB_EPStartXfer+0xe26>
 8009cd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009cd8:	881b      	ldrh	r3, [r3, #0]
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ce0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ce4:	b29a      	uxth	r2, r3
 8009ce6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009cea:	801a      	strh	r2, [r3, #0]
 8009cec:	e042      	b.n	8009d74 <USB_EPStartXfer+0xeac>
 8009cee:	463b      	mov	r3, r7
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	691b      	ldr	r3, [r3, #16]
 8009cf4:	085b      	lsrs	r3, r3, #1
 8009cf6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009cfa:	463b      	mov	r3, r7
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	691b      	ldr	r3, [r3, #16]
 8009d00:	f003 0301 	and.w	r3, r3, #1
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d004      	beq.n	8009d12 <USB_EPStartXfer+0xe4a>
 8009d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009d12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d16:	881b      	ldrh	r3, [r3, #0]
 8009d18:	b29a      	uxth	r2, r3
 8009d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	029b      	lsls	r3, r3, #10
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	4313      	orrs	r3, r2
 8009d26:	b29a      	uxth	r2, r3
 8009d28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d2c:	801a      	strh	r2, [r3, #0]
 8009d2e:	e021      	b.n	8009d74 <USB_EPStartXfer+0xeac>
 8009d30:	463b      	mov	r3, r7
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	785b      	ldrb	r3, [r3, #1]
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d11c      	bne.n	8009d74 <USB_EPStartXfer+0xeac>
 8009d3a:	1d3b      	adds	r3, r7, #4
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	461a      	mov	r2, r3
 8009d46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d4a:	4413      	add	r3, r2
 8009d4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009d50:	463b      	mov	r3, r7
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	011a      	lsls	r2, r3, #4
 8009d58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d5c:	4413      	add	r3, r2
 8009d5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009d62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009d66:	463b      	mov	r3, r7
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	691b      	ldr	r3, [r3, #16]
 8009d6c:	b29a      	uxth	r2, r3
 8009d6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d72:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009d74:	463b      	mov	r3, r7
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	69db      	ldr	r3, [r3, #28]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	f000 81bc 	beq.w	800a0f8 <USB_EPStartXfer+0x1230>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009d80:	1d3b      	adds	r3, r7, #4
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	463b      	mov	r3, r7
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	4413      	add	r3, r2
 8009d8e:	881b      	ldrh	r3, [r3, #0]
 8009d90:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009d94:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009d98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d005      	beq.n	8009dac <USB_EPStartXfer+0xee4>
 8009da0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d10d      	bne.n	8009dc8 <USB_EPStartXfer+0xf00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009dac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009db0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	f040 819f 	bne.w	800a0f8 <USB_EPStartXfer+0x1230>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009dba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	f040 8198 	bne.w	800a0f8 <USB_EPStartXfer+0x1230>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009dc8:	1d3b      	adds	r3, r7, #4
 8009dca:	681a      	ldr	r2, [r3, #0]
 8009dcc:	463b      	mov	r3, r7
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	4413      	add	r3, r2
 8009dd6:	881b      	ldrh	r3, [r3, #0]
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009de2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009de6:	1d3b      	adds	r3, r7, #4
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	463b      	mov	r3, r7
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	441a      	add	r2, r3
 8009df4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009df8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	8013      	strh	r3, [r2, #0]
 8009e0c:	e174      	b.n	800a0f8 <USB_EPStartXfer+0x1230>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009e0e:	463b      	mov	r3, r7
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	78db      	ldrb	r3, [r3, #3]
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	f040 816d 	bne.w	800a0f4 <USB_EPStartXfer+0x122c>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009e1a:	463b      	mov	r3, r7
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	699a      	ldr	r2, [r3, #24]
 8009e20:	463b      	mov	r3, r7
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	691b      	ldr	r3, [r3, #16]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d90e      	bls.n	8009e48 <USB_EPStartXfer+0xf80>
        {
          len = ep->maxpacket;
 8009e2a:	463b      	mov	r3, r7
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	691b      	ldr	r3, [r3, #16]
 8009e30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8009e34:	463b      	mov	r3, r7
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	699a      	ldr	r2, [r3, #24]
 8009e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e3e:	1ad2      	subs	r2, r2, r3
 8009e40:	463b      	mov	r3, r7
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	619a      	str	r2, [r3, #24]
 8009e46:	e008      	b.n	8009e5a <USB_EPStartXfer+0xf92>
        }
        else
        {
          len = ep->xfer_len;
 8009e48:	463b      	mov	r3, r7
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	699b      	ldr	r3, [r3, #24]
 8009e4e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009e52:	463b      	mov	r3, r7
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	2200      	movs	r2, #0
 8009e58:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009e5a:	463b      	mov	r3, r7
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	785b      	ldrb	r3, [r3, #1]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d17b      	bne.n	8009f5c <USB_EPStartXfer+0x1094>
 8009e64:	1d3b      	adds	r3, r7, #4
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009e6c:	1d3b      	adds	r3, r7, #4
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	461a      	mov	r2, r3
 8009e78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009e7c:	4413      	add	r3, r2
 8009e7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009e82:	463b      	mov	r3, r7
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	011a      	lsls	r2, r3, #4
 8009e8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009e8e:	4413      	add	r3, r2
 8009e90:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009e94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e9c:	881b      	ldrh	r3, [r3, #0]
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ea4:	b29a      	uxth	r2, r3
 8009ea6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009eaa:	801a      	strh	r2, [r3, #0]
 8009eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009eb0:	2b3e      	cmp	r3, #62	; 0x3e
 8009eb2:	d923      	bls.n	8009efc <USB_EPStartXfer+0x1034>
 8009eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009eb8:	095b      	lsrs	r3, r3, #5
 8009eba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ec2:	f003 031f 	and.w	r3, r3, #31
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d104      	bne.n	8009ed4 <USB_EPStartXfer+0x100c>
 8009eca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009ed4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009ed8:	881b      	ldrh	r3, [r3, #0]
 8009eda:	b29a      	uxth	r2, r3
 8009edc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	029b      	lsls	r3, r3, #10
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009eee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ef2:	b29a      	uxth	r2, r3
 8009ef4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009ef8:	801a      	strh	r2, [r3, #0]
 8009efa:	e054      	b.n	8009fa6 <USB_EPStartXfer+0x10de>
 8009efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d10c      	bne.n	8009f1e <USB_EPStartXfer+0x1056>
 8009f04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f08:	881b      	ldrh	r3, [r3, #0]
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f14:	b29a      	uxth	r2, r3
 8009f16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f1a:	801a      	strh	r2, [r3, #0]
 8009f1c:	e043      	b.n	8009fa6 <USB_EPStartXfer+0x10de>
 8009f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f22:	085b      	lsrs	r3, r3, #1
 8009f24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f2c:	f003 0301 	and.w	r3, r3, #1
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d004      	beq.n	8009f3e <USB_EPStartXfer+0x1076>
 8009f34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f38:	3301      	adds	r3, #1
 8009f3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009f3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f42:	881b      	ldrh	r3, [r3, #0]
 8009f44:	b29a      	uxth	r2, r3
 8009f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	029b      	lsls	r3, r3, #10
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	4313      	orrs	r3, r2
 8009f52:	b29a      	uxth	r2, r3
 8009f54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f58:	801a      	strh	r2, [r3, #0]
 8009f5a:	e024      	b.n	8009fa6 <USB_EPStartXfer+0x10de>
 8009f5c:	463b      	mov	r3, r7
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	785b      	ldrb	r3, [r3, #1]
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	d11f      	bne.n	8009fa6 <USB_EPStartXfer+0x10de>
 8009f66:	1d3b      	adds	r3, r7, #4
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009f6e:	1d3b      	adds	r3, r7, #4
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f76:	b29b      	uxth	r3, r3
 8009f78:	461a      	mov	r2, r3
 8009f7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009f7e:	4413      	add	r3, r2
 8009f80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009f84:	463b      	mov	r3, r7
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	011a      	lsls	r2, r3, #4
 8009f8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009f90:	4413      	add	r3, r2
 8009f92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009f96:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f9e:	b29a      	uxth	r2, r3
 8009fa0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009fa4:	801a      	strh	r2, [r3, #0]
 8009fa6:	1d3b      	adds	r3, r7, #4
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009fae:	463b      	mov	r3, r7
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	785b      	ldrb	r3, [r3, #1]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d17b      	bne.n	800a0b0 <USB_EPStartXfer+0x11e8>
 8009fb8:	1d3b      	adds	r3, r7, #4
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009fc0:	1d3b      	adds	r3, r7, #4
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	461a      	mov	r2, r3
 8009fcc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009fd0:	4413      	add	r3, r2
 8009fd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009fd6:	463b      	mov	r3, r7
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	011a      	lsls	r2, r3, #4
 8009fde:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009fe2:	4413      	add	r3, r2
 8009fe4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009fe8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009fec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009ff0:	881b      	ldrh	r3, [r3, #0]
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ff8:	b29a      	uxth	r2, r3
 8009ffa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009ffe:	801a      	strh	r2, [r3, #0]
 800a000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a004:	2b3e      	cmp	r3, #62	; 0x3e
 800a006:	d923      	bls.n	800a050 <USB_EPStartXfer+0x1188>
 800a008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a00c:	095b      	lsrs	r3, r3, #5
 800a00e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a016:	f003 031f 	and.w	r3, r3, #31
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d104      	bne.n	800a028 <USB_EPStartXfer+0x1160>
 800a01e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a022:	3b01      	subs	r3, #1
 800a024:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a028:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a02c:	881b      	ldrh	r3, [r3, #0]
 800a02e:	b29a      	uxth	r2, r3
 800a030:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a034:	b29b      	uxth	r3, r3
 800a036:	029b      	lsls	r3, r3, #10
 800a038:	b29b      	uxth	r3, r3
 800a03a:	4313      	orrs	r3, r2
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a046:	b29a      	uxth	r2, r3
 800a048:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a04c:	801a      	strh	r2, [r3, #0]
 800a04e:	e053      	b.n	800a0f8 <USB_EPStartXfer+0x1230>
 800a050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a054:	2b00      	cmp	r3, #0
 800a056:	d10c      	bne.n	800a072 <USB_EPStartXfer+0x11aa>
 800a058:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a05c:	881b      	ldrh	r3, [r3, #0]
 800a05e:	b29b      	uxth	r3, r3
 800a060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a068:	b29a      	uxth	r2, r3
 800a06a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a06e:	801a      	strh	r2, [r3, #0]
 800a070:	e042      	b.n	800a0f8 <USB_EPStartXfer+0x1230>
 800a072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a076:	085b      	lsrs	r3, r3, #1
 800a078:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a07c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a080:	f003 0301 	and.w	r3, r3, #1
 800a084:	2b00      	cmp	r3, #0
 800a086:	d004      	beq.n	800a092 <USB_EPStartXfer+0x11ca>
 800a088:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a08c:	3301      	adds	r3, #1
 800a08e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a092:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a096:	881b      	ldrh	r3, [r3, #0]
 800a098:	b29a      	uxth	r2, r3
 800a09a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	029b      	lsls	r3, r3, #10
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	b29a      	uxth	r2, r3
 800a0a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a0ac:	801a      	strh	r2, [r3, #0]
 800a0ae:	e023      	b.n	800a0f8 <USB_EPStartXfer+0x1230>
 800a0b0:	463b      	mov	r3, r7
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	785b      	ldrb	r3, [r3, #1]
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d11e      	bne.n	800a0f8 <USB_EPStartXfer+0x1230>
 800a0ba:	1d3b      	adds	r3, r7, #4
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a0ca:	4413      	add	r3, r2
 800a0cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a0d0:	463b      	mov	r3, r7
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	011a      	lsls	r2, r3, #4
 800a0d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a0dc:	4413      	add	r3, r2
 800a0de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a0e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a0e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0ea:	b29a      	uxth	r2, r3
 800a0ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a0f0:	801a      	strh	r2, [r3, #0]
 800a0f2:	e001      	b.n	800a0f8 <USB_EPStartXfer+0x1230>
      }
      else
      {
        return HAL_ERROR;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	e02e      	b.n	800a156 <USB_EPStartXfer+0x128e>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a0f8:	1d3b      	adds	r3, r7, #4
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	463b      	mov	r3, r7
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	4413      	add	r3, r2
 800a106:	881b      	ldrh	r3, [r3, #0]
 800a108:	b29b      	uxth	r3, r3
 800a10a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a10e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a112:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a116:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a11a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a11e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a122:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a126:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a12a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a12e:	1d3b      	adds	r3, r7, #4
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	463b      	mov	r3, r7
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	441a      	add	r2, r3
 800a13c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a140:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a144:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a14c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a150:	b29b      	uxth	r3, r3
 800a152:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a154:	2300      	movs	r3, #0
}
 800a156:	4618      	mov	r0, r3
 800a158:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a160:	b480      	push	{r7}
 800a162:	b085      	sub	sp, #20
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	785b      	ldrb	r3, [r3, #1]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d020      	beq.n	800a1b4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	009b      	lsls	r3, r3, #2
 800a17a:	4413      	add	r3, r2
 800a17c:	881b      	ldrh	r3, [r3, #0]
 800a17e:	b29b      	uxth	r3, r3
 800a180:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a184:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a188:	81bb      	strh	r3, [r7, #12]
 800a18a:	89bb      	ldrh	r3, [r7, #12]
 800a18c:	f083 0310 	eor.w	r3, r3, #16
 800a190:	81bb      	strh	r3, [r7, #12]
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	441a      	add	r2, r3
 800a19c:	89bb      	ldrh	r3, [r7, #12]
 800a19e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	8013      	strh	r3, [r2, #0]
 800a1b2:	e01f      	b.n	800a1f4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	4413      	add	r3, r2
 800a1be:	881b      	ldrh	r3, [r3, #0]
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1ca:	81fb      	strh	r3, [r7, #14]
 800a1cc:	89fb      	ldrh	r3, [r7, #14]
 800a1ce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a1d2:	81fb      	strh	r3, [r7, #14]
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	009b      	lsls	r3, r3, #2
 800a1dc:	441a      	add	r2, r3
 800a1de:	89fb      	ldrh	r3, [r7, #14]
 800a1e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3714      	adds	r7, #20
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bc80      	pop	{r7}
 800a1fe:	4770      	bx	lr

0800a200 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a200:	b480      	push	{r7}
 800a202:	b087      	sub	sp, #28
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	7b1b      	ldrb	r3, [r3, #12]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	f040 809d 	bne.w	800a34e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	785b      	ldrb	r3, [r3, #1]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d04c      	beq.n	800a2b6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	4413      	add	r3, r2
 800a226:	881b      	ldrh	r3, [r3, #0]
 800a228:	823b      	strh	r3, [r7, #16]
 800a22a:	8a3b      	ldrh	r3, [r7, #16]
 800a22c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a230:	2b00      	cmp	r3, #0
 800a232:	d01b      	beq.n	800a26c <USB_EPClearStall+0x6c>
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	009b      	lsls	r3, r3, #2
 800a23c:	4413      	add	r3, r2
 800a23e:	881b      	ldrh	r3, [r3, #0]
 800a240:	b29b      	uxth	r3, r3
 800a242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a24a:	81fb      	strh	r3, [r7, #14]
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	441a      	add	r2, r3
 800a256:	89fb      	ldrh	r3, [r7, #14]
 800a258:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a25c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a264:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a268:	b29b      	uxth	r3, r3
 800a26a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	78db      	ldrb	r3, [r3, #3]
 800a270:	2b01      	cmp	r3, #1
 800a272:	d06c      	beq.n	800a34e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	009b      	lsls	r3, r3, #2
 800a27c:	4413      	add	r3, r2
 800a27e:	881b      	ldrh	r3, [r3, #0]
 800a280:	b29b      	uxth	r3, r3
 800a282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a286:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a28a:	81bb      	strh	r3, [r7, #12]
 800a28c:	89bb      	ldrh	r3, [r7, #12]
 800a28e:	f083 0320 	eor.w	r3, r3, #32
 800a292:	81bb      	strh	r3, [r7, #12]
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	009b      	lsls	r3, r3, #2
 800a29c:	441a      	add	r2, r3
 800a29e:	89bb      	ldrh	r3, [r7, #12]
 800a2a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	8013      	strh	r3, [r2, #0]
 800a2b4:	e04b      	b.n	800a34e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a2b6:	687a      	ldr	r2, [r7, #4]
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	009b      	lsls	r3, r3, #2
 800a2be:	4413      	add	r3, r2
 800a2c0:	881b      	ldrh	r3, [r3, #0]
 800a2c2:	82fb      	strh	r3, [r7, #22]
 800a2c4:	8afb      	ldrh	r3, [r7, #22]
 800a2c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d01b      	beq.n	800a306 <USB_EPClearStall+0x106>
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	4413      	add	r3, r2
 800a2d8:	881b      	ldrh	r3, [r3, #0]
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2e4:	82bb      	strh	r3, [r7, #20]
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	009b      	lsls	r3, r3, #2
 800a2ee:	441a      	add	r2, r3
 800a2f0:	8abb      	ldrh	r3, [r7, #20]
 800a2f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a2fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a302:	b29b      	uxth	r3, r3
 800a304:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	009b      	lsls	r3, r3, #2
 800a30e:	4413      	add	r3, r2
 800a310:	881b      	ldrh	r3, [r3, #0]
 800a312:	b29b      	uxth	r3, r3
 800a314:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a31c:	827b      	strh	r3, [r7, #18]
 800a31e:	8a7b      	ldrh	r3, [r7, #18]
 800a320:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a324:	827b      	strh	r3, [r7, #18]
 800a326:	8a7b      	ldrh	r3, [r7, #18]
 800a328:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a32c:	827b      	strh	r3, [r7, #18]
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	009b      	lsls	r3, r3, #2
 800a336:	441a      	add	r2, r3
 800a338:	8a7b      	ldrh	r3, [r7, #18]
 800a33a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a33e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a34e:	2300      	movs	r3, #0
}
 800a350:	4618      	mov	r0, r3
 800a352:	371c      	adds	r7, #28
 800a354:	46bd      	mov	sp, r7
 800a356:	bc80      	pop	{r7}
 800a358:	4770      	bx	lr

0800a35a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a35a:	b480      	push	{r7}
 800a35c:	b083      	sub	sp, #12
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
 800a362:	460b      	mov	r3, r1
 800a364:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a366:	78fb      	ldrb	r3, [r7, #3]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d103      	bne.n	800a374 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2280      	movs	r2, #128	; 0x80
 800a370:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a374:	2300      	movs	r3, #0
}
 800a376:	4618      	mov	r0, r3
 800a378:	370c      	adds	r7, #12
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bc80      	pop	{r7}
 800a37e:	4770      	bx	lr

0800a380 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a388:	2300      	movs	r3, #0
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	370c      	adds	r7, #12
 800a38e:	46bd      	mov	sp, r7
 800a390:	bc80      	pop	{r7}
 800a392:	4770      	bx	lr

0800a394 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	370c      	adds	r7, #12
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bc80      	pop	{r7}
 800a3a6:	4770      	bx	lr

0800a3a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3714      	adds	r7, #20
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bc80      	pop	{r7}
 800a3c4:	4770      	bx	lr

0800a3c6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a3c6:	b480      	push	{r7}
 800a3c8:	b083      	sub	sp, #12
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
 800a3ce:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a3d0:	2300      	movs	r3, #0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	370c      	adds	r7, #12
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bc80      	pop	{r7}
 800a3da:	4770      	bx	lr

0800a3dc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b08b      	sub	sp, #44	; 0x2c
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	4611      	mov	r1, r2
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	80fb      	strh	r3, [r7, #6]
 800a3ee:	4613      	mov	r3, r2
 800a3f0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a3f2:	88bb      	ldrh	r3, [r7, #4]
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	085b      	lsrs	r3, r3, #1
 800a3f8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a402:	88fb      	ldrh	r3, [r7, #6]
 800a404:	005a      	lsls	r2, r3, #1
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	4413      	add	r3, r2
 800a40a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a40e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a410:	69bb      	ldr	r3, [r7, #24]
 800a412:	627b      	str	r3, [r7, #36]	; 0x24
 800a414:	e01e      	b.n	800a454 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800a416:	69fb      	ldr	r3, [r7, #28]
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a41c:	69fb      	ldr	r3, [r7, #28]
 800a41e:	3301      	adds	r3, #1
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	021b      	lsls	r3, r3, #8
 800a424:	b21a      	sxth	r2, r3
 800a426:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a42a:	4313      	orrs	r3, r2
 800a42c:	b21b      	sxth	r3, r3
 800a42e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a430:	6a3b      	ldr	r3, [r7, #32]
 800a432:	8a7a      	ldrh	r2, [r7, #18]
 800a434:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a436:	6a3b      	ldr	r3, [r7, #32]
 800a438:	3302      	adds	r3, #2
 800a43a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a43c:	6a3b      	ldr	r3, [r7, #32]
 800a43e:	3302      	adds	r3, #2
 800a440:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800a442:	69fb      	ldr	r3, [r7, #28]
 800a444:	3301      	adds	r3, #1
 800a446:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a448:	69fb      	ldr	r3, [r7, #28]
 800a44a:	3301      	adds	r3, #1
 800a44c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a450:	3b01      	subs	r3, #1
 800a452:	627b      	str	r3, [r7, #36]	; 0x24
 800a454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a456:	2b00      	cmp	r3, #0
 800a458:	d1dd      	bne.n	800a416 <USB_WritePMA+0x3a>
  }
}
 800a45a:	bf00      	nop
 800a45c:	bf00      	nop
 800a45e:	372c      	adds	r7, #44	; 0x2c
 800a460:	46bd      	mov	sp, r7
 800a462:	bc80      	pop	{r7}
 800a464:	4770      	bx	lr

0800a466 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a466:	b480      	push	{r7}
 800a468:	b08b      	sub	sp, #44	; 0x2c
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	60f8      	str	r0, [r7, #12]
 800a46e:	60b9      	str	r1, [r7, #8]
 800a470:	4611      	mov	r1, r2
 800a472:	461a      	mov	r2, r3
 800a474:	460b      	mov	r3, r1
 800a476:	80fb      	strh	r3, [r7, #6]
 800a478:	4613      	mov	r3, r2
 800a47a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a47c:	88bb      	ldrh	r3, [r7, #4]
 800a47e:	085b      	lsrs	r3, r3, #1
 800a480:	b29b      	uxth	r3, r3
 800a482:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a48c:	88fb      	ldrh	r3, [r7, #6]
 800a48e:	005a      	lsls	r2, r3, #1
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	4413      	add	r3, r2
 800a494:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a498:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a49a:	69bb      	ldr	r3, [r7, #24]
 800a49c:	627b      	str	r3, [r7, #36]	; 0x24
 800a49e:	e01b      	b.n	800a4d8 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a4a0:	6a3b      	ldr	r3, [r7, #32]
 800a4a2:	881b      	ldrh	r3, [r3, #0]
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a4a8:	6a3b      	ldr	r3, [r7, #32]
 800a4aa:	3302      	adds	r3, #2
 800a4ac:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	b2da      	uxtb	r2, r3
 800a4b2:	69fb      	ldr	r3, [r7, #28]
 800a4b4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a4b6:	69fb      	ldr	r3, [r7, #28]
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	0a1b      	lsrs	r3, r3, #8
 800a4c0:	b2da      	uxtb	r2, r3
 800a4c2:	69fb      	ldr	r3, [r7, #28]
 800a4c4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a4c6:	69fb      	ldr	r3, [r7, #28]
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a4cc:	6a3b      	ldr	r3, [r7, #32]
 800a4ce:	3302      	adds	r3, #2
 800a4d0:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800a4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d4:	3b01      	subs	r3, #1
 800a4d6:	627b      	str	r3, [r7, #36]	; 0x24
 800a4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d1e0      	bne.n	800a4a0 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a4de:	88bb      	ldrh	r3, [r7, #4]
 800a4e0:	f003 0301 	and.w	r3, r3, #1
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d007      	beq.n	800a4fa <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800a4ea:	6a3b      	ldr	r3, [r7, #32]
 800a4ec:	881b      	ldrh	r3, [r3, #0]
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	b2da      	uxtb	r2, r3
 800a4f6:	69fb      	ldr	r3, [r7, #28]
 800a4f8:	701a      	strb	r2, [r3, #0]
  }
}
 800a4fa:	bf00      	nop
 800a4fc:	372c      	adds	r7, #44	; 0x2c
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bc80      	pop	{r7}
 800a502:	4770      	bx	lr

0800a504 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	460b      	mov	r3, r1
 800a50e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a510:	2300      	movs	r3, #0
 800a512:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	7c1b      	ldrb	r3, [r3, #16]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d115      	bne.n	800a548 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a51c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a520:	2202      	movs	r2, #2
 800a522:	2181      	movs	r1, #129	; 0x81
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f001 fe30 	bl	800c18a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2201      	movs	r2, #1
 800a52e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a530:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a534:	2202      	movs	r2, #2
 800a536:	2101      	movs	r1, #1
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f001 fe26 	bl	800c18a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2201      	movs	r2, #1
 800a542:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a546:	e012      	b.n	800a56e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a548:	2340      	movs	r3, #64	; 0x40
 800a54a:	2202      	movs	r2, #2
 800a54c:	2181      	movs	r1, #129	; 0x81
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f001 fe1b 	bl	800c18a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2201      	movs	r2, #1
 800a558:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a55a:	2340      	movs	r3, #64	; 0x40
 800a55c:	2202      	movs	r2, #2
 800a55e:	2101      	movs	r1, #1
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f001 fe12 	bl	800c18a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2201      	movs	r2, #1
 800a56a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a56e:	2308      	movs	r3, #8
 800a570:	2203      	movs	r2, #3
 800a572:	2182      	movs	r1, #130	; 0x82
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f001 fe08 	bl	800c18a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2201      	movs	r2, #1
 800a57e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a580:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a584:	f001 ff28 	bl	800c3d8 <USBD_static_malloc>
 800a588:	4602      	mov	r2, r0
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a596:	2b00      	cmp	r3, #0
 800a598:	d102      	bne.n	800a5a0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a59a:	2301      	movs	r3, #1
 800a59c:	73fb      	strb	r3, [r7, #15]
 800a59e:	e026      	b.n	800a5ee <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5a6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	7c1b      	ldrb	r3, [r3, #16]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d109      	bne.n	800a5de <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a5d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5d4:	2101      	movs	r1, #1
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f001 fec7 	bl	800c36a <USBD_LL_PrepareReceive>
 800a5dc:	e007      	b.n	800a5ee <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a5e4:	2340      	movs	r3, #64	; 0x40
 800a5e6:	2101      	movs	r1, #1
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f001 febe 	bl	800c36a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a5ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3710      	adds	r7, #16
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	460b      	mov	r3, r1
 800a602:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a604:	2300      	movs	r3, #0
 800a606:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a608:	2181      	movs	r1, #129	; 0x81
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f001 fde3 	bl	800c1d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2200      	movs	r2, #0
 800a614:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a616:	2101      	movs	r1, #1
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f001 fddc 	bl	800c1d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a626:	2182      	movs	r1, #130	; 0x82
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f001 fdd4 	bl	800c1d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2200      	movs	r2, #0
 800a632:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d00e      	beq.n	800a65c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a64e:	4618      	mov	r0, r3
 800a650:	f001 fece 	bl	800c3f0 <USBD_static_free>
    pdev->pClassData = NULL;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2200      	movs	r2, #0
 800a658:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800a65c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3710      	adds	r7, #16
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}

0800a666 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a666:	b580      	push	{r7, lr}
 800a668:	b086      	sub	sp, #24
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	6078      	str	r0, [r7, #4]
 800a66e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a676:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a678:	2300      	movs	r3, #0
 800a67a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a67c:	2300      	movs	r3, #0
 800a67e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a680:	2300      	movs	r3, #0
 800a682:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d039      	beq.n	800a704 <USBD_CDC_Setup+0x9e>
 800a690:	2b20      	cmp	r3, #32
 800a692:	d17f      	bne.n	800a794 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	88db      	ldrh	r3, [r3, #6]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d029      	beq.n	800a6f0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	781b      	ldrb	r3, [r3, #0]
 800a6a0:	b25b      	sxtb	r3, r3
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	da11      	bge.n	800a6ca <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6ac:	689b      	ldr	r3, [r3, #8]
 800a6ae:	683a      	ldr	r2, [r7, #0]
 800a6b0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a6b2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a6b4:	683a      	ldr	r2, [r7, #0]
 800a6b6:	88d2      	ldrh	r2, [r2, #6]
 800a6b8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a6ba:	6939      	ldr	r1, [r7, #16]
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	88db      	ldrh	r3, [r3, #6]
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f001 f9d9 	bl	800ba7a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a6c8:	e06b      	b.n	800a7a2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	785a      	ldrb	r2, [r3, #1]
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	88db      	ldrh	r3, [r3, #6]
 800a6d8:	b2da      	uxtb	r2, r3
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a6e0:	6939      	ldr	r1, [r7, #16]
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	88db      	ldrh	r3, [r3, #6]
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f001 f9f4 	bl	800bad6 <USBD_CtlPrepareRx>
      break;
 800a6ee:	e058      	b.n	800a7a2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6f6:	689b      	ldr	r3, [r3, #8]
 800a6f8:	683a      	ldr	r2, [r7, #0]
 800a6fa:	7850      	ldrb	r0, [r2, #1]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	6839      	ldr	r1, [r7, #0]
 800a700:	4798      	blx	r3
      break;
 800a702:	e04e      	b.n	800a7a2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	785b      	ldrb	r3, [r3, #1]
 800a708:	2b0b      	cmp	r3, #11
 800a70a:	d02e      	beq.n	800a76a <USBD_CDC_Setup+0x104>
 800a70c:	2b0b      	cmp	r3, #11
 800a70e:	dc38      	bgt.n	800a782 <USBD_CDC_Setup+0x11c>
 800a710:	2b00      	cmp	r3, #0
 800a712:	d002      	beq.n	800a71a <USBD_CDC_Setup+0xb4>
 800a714:	2b0a      	cmp	r3, #10
 800a716:	d014      	beq.n	800a742 <USBD_CDC_Setup+0xdc>
 800a718:	e033      	b.n	800a782 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a720:	2b03      	cmp	r3, #3
 800a722:	d107      	bne.n	800a734 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a724:	f107 030c 	add.w	r3, r7, #12
 800a728:	2202      	movs	r2, #2
 800a72a:	4619      	mov	r1, r3
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f001 f9a4 	bl	800ba7a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a732:	e02e      	b.n	800a792 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a734:	6839      	ldr	r1, [r7, #0]
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f001 f935 	bl	800b9a6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a73c:	2302      	movs	r3, #2
 800a73e:	75fb      	strb	r3, [r7, #23]
          break;
 800a740:	e027      	b.n	800a792 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a748:	2b03      	cmp	r3, #3
 800a74a:	d107      	bne.n	800a75c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a74c:	f107 030f 	add.w	r3, r7, #15
 800a750:	2201      	movs	r2, #1
 800a752:	4619      	mov	r1, r3
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f001 f990 	bl	800ba7a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a75a:	e01a      	b.n	800a792 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a75c:	6839      	ldr	r1, [r7, #0]
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f001 f921 	bl	800b9a6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a764:	2302      	movs	r3, #2
 800a766:	75fb      	strb	r3, [r7, #23]
          break;
 800a768:	e013      	b.n	800a792 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a770:	2b03      	cmp	r3, #3
 800a772:	d00d      	beq.n	800a790 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a774:	6839      	ldr	r1, [r7, #0]
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f001 f915 	bl	800b9a6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a77c:	2302      	movs	r3, #2
 800a77e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a780:	e006      	b.n	800a790 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a782:	6839      	ldr	r1, [r7, #0]
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f001 f90e 	bl	800b9a6 <USBD_CtlError>
          ret = USBD_FAIL;
 800a78a:	2302      	movs	r3, #2
 800a78c:	75fb      	strb	r3, [r7, #23]
          break;
 800a78e:	e000      	b.n	800a792 <USBD_CDC_Setup+0x12c>
          break;
 800a790:	bf00      	nop
      }
      break;
 800a792:	e006      	b.n	800a7a2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a794:	6839      	ldr	r1, [r7, #0]
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f001 f905 	bl	800b9a6 <USBD_CtlError>
      ret = USBD_FAIL;
 800a79c:	2302      	movs	r3, #2
 800a79e:	75fb      	strb	r3, [r7, #23]
      break;
 800a7a0:	bf00      	nop
  }

  return ret;
 800a7a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3718      	adds	r7, #24
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7be:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7c6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d03a      	beq.n	800a848 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a7d2:	78fa      	ldrb	r2, [r7, #3]
 800a7d4:	6879      	ldr	r1, [r7, #4]
 800a7d6:	4613      	mov	r3, r2
 800a7d8:	009b      	lsls	r3, r3, #2
 800a7da:	4413      	add	r3, r2
 800a7dc:	009b      	lsls	r3, r3, #2
 800a7de:	440b      	add	r3, r1
 800a7e0:	331c      	adds	r3, #28
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d029      	beq.n	800a83c <USBD_CDC_DataIn+0x90>
 800a7e8:	78fa      	ldrb	r2, [r7, #3]
 800a7ea:	6879      	ldr	r1, [r7, #4]
 800a7ec:	4613      	mov	r3, r2
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	4413      	add	r3, r2
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	440b      	add	r3, r1
 800a7f6:	331c      	adds	r3, #28
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	78f9      	ldrb	r1, [r7, #3]
 800a7fc:	68b8      	ldr	r0, [r7, #8]
 800a7fe:	460b      	mov	r3, r1
 800a800:	009b      	lsls	r3, r3, #2
 800a802:	440b      	add	r3, r1
 800a804:	00db      	lsls	r3, r3, #3
 800a806:	4403      	add	r3, r0
 800a808:	3320      	adds	r3, #32
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	fbb2 f1f3 	udiv	r1, r2, r3
 800a810:	fb03 f301 	mul.w	r3, r3, r1
 800a814:	1ad3      	subs	r3, r2, r3
 800a816:	2b00      	cmp	r3, #0
 800a818:	d110      	bne.n	800a83c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a81a:	78fa      	ldrb	r2, [r7, #3]
 800a81c:	6879      	ldr	r1, [r7, #4]
 800a81e:	4613      	mov	r3, r2
 800a820:	009b      	lsls	r3, r3, #2
 800a822:	4413      	add	r3, r2
 800a824:	009b      	lsls	r3, r3, #2
 800a826:	440b      	add	r3, r1
 800a828:	331c      	adds	r3, #28
 800a82a:	2200      	movs	r2, #0
 800a82c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a82e:	78f9      	ldrb	r1, [r7, #3]
 800a830:	2300      	movs	r3, #0
 800a832:	2200      	movs	r2, #0
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f001 fd75 	bl	800c324 <USBD_LL_Transmit>
 800a83a:	e003      	b.n	800a844 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2200      	movs	r2, #0
 800a840:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a844:	2300      	movs	r3, #0
 800a846:	e000      	b.n	800a84a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a848:	2302      	movs	r3, #2
  }
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3710      	adds	r7, #16
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}

0800a852 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a852:	b580      	push	{r7, lr}
 800a854:	b084      	sub	sp, #16
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
 800a85a:	460b      	mov	r3, r1
 800a85c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a864:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a866:	78fb      	ldrb	r3, [r7, #3]
 800a868:	4619      	mov	r1, r3
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f001 fda0 	bl	800c3b0 <USBD_LL_GetRxDataSize>
 800a870:	4602      	mov	r2, r0
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d00d      	beq.n	800a89e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a888:	68db      	ldr	r3, [r3, #12]
 800a88a:	68fa      	ldr	r2, [r7, #12]
 800a88c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a890:	68fa      	ldr	r2, [r7, #12]
 800a892:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a896:	4611      	mov	r1, r2
 800a898:	4798      	blx	r3

    return USBD_OK;
 800a89a:	2300      	movs	r3, #0
 800a89c:	e000      	b.n	800a8a0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a89e:	2302      	movs	r3, #2
  }
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3710      	adds	r7, #16
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8b6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d015      	beq.n	800a8ee <USBD_CDC_EP0_RxReady+0x46>
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a8c8:	2bff      	cmp	r3, #255	; 0xff
 800a8ca:	d010      	beq.n	800a8ee <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a8da:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a8dc:	68fa      	ldr	r2, [r7, #12]
 800a8de:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a8e2:	b292      	uxth	r2, r2
 800a8e4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	22ff      	movs	r2, #255	; 0xff
 800a8ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a8ee:	2300      	movs	r3, #0
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3710      	adds	r7, #16
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2243      	movs	r2, #67	; 0x43
 800a904:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a906:	4b03      	ldr	r3, [pc, #12]	; (800a914 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a908:	4618      	mov	r0, r3
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bc80      	pop	{r7}
 800a910:	4770      	bx	lr
 800a912:	bf00      	nop
 800a914:	2000009c 	.word	0x2000009c

0800a918 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a918:	b480      	push	{r7}
 800a91a:	b083      	sub	sp, #12
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2243      	movs	r2, #67	; 0x43
 800a924:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a926:	4b03      	ldr	r3, [pc, #12]	; (800a934 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a928:	4618      	mov	r0, r3
 800a92a:	370c      	adds	r7, #12
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bc80      	pop	{r7}
 800a930:	4770      	bx	lr
 800a932:	bf00      	nop
 800a934:	20000058 	.word	0x20000058

0800a938 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a938:	b480      	push	{r7}
 800a93a:	b083      	sub	sp, #12
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2243      	movs	r2, #67	; 0x43
 800a944:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a946:	4b03      	ldr	r3, [pc, #12]	; (800a954 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a948:	4618      	mov	r0, r3
 800a94a:	370c      	adds	r7, #12
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bc80      	pop	{r7}
 800a950:	4770      	bx	lr
 800a952:	bf00      	nop
 800a954:	200000e0 	.word	0x200000e0

0800a958 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	220a      	movs	r2, #10
 800a964:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a966:	4b03      	ldr	r3, [pc, #12]	; (800a974 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a968:	4618      	mov	r0, r3
 800a96a:	370c      	adds	r7, #12
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bc80      	pop	{r7}
 800a970:	4770      	bx	lr
 800a972:	bf00      	nop
 800a974:	20000014 	.word	0x20000014

0800a978 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a978:	b480      	push	{r7}
 800a97a:	b085      	sub	sp, #20
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a982:	2302      	movs	r3, #2
 800a984:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d005      	beq.n	800a998 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	683a      	ldr	r2, [r7, #0]
 800a990:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a994:	2300      	movs	r3, #0
 800a996:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a998:	7bfb      	ldrb	r3, [r7, #15]
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3714      	adds	r7, #20
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bc80      	pop	{r7}
 800a9a2:	4770      	bx	lr

0800a9a4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b087      	sub	sp, #28
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	60f8      	str	r0, [r7, #12]
 800a9ac:	60b9      	str	r1, [r7, #8]
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9b8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	68ba      	ldr	r2, [r7, #8]
 800a9be:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a9c2:	88fa      	ldrh	r2, [r7, #6]
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a9ca:	2300      	movs	r3, #0
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	371c      	adds	r7, #28
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bc80      	pop	{r7}
 800a9d4:	4770      	bx	lr

0800a9d6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a9d6:	b480      	push	{r7}
 800a9d8:	b085      	sub	sp, #20
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
 800a9de:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9e6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	683a      	ldr	r2, [r7, #0]
 800a9ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a9f0:	2300      	movs	r3, #0
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3714      	adds	r7, #20
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bc80      	pop	{r7}
 800a9fa:	4770      	bx	lr

0800a9fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b084      	sub	sp, #16
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa0a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d017      	beq.n	800aa46 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	7c1b      	ldrb	r3, [r3, #16]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d109      	bne.n	800aa32 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aa24:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa28:	2101      	movs	r1, #1
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f001 fc9d 	bl	800c36a <USBD_LL_PrepareReceive>
 800aa30:	e007      	b.n	800aa42 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aa38:	2340      	movs	r3, #64	; 0x40
 800aa3a:	2101      	movs	r1, #1
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f001 fc94 	bl	800c36a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800aa42:	2300      	movs	r3, #0
 800aa44:	e000      	b.n	800aa48 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800aa46:	2302      	movs	r3, #2
  }
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3710      	adds	r7, #16
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	60b9      	str	r1, [r7, #8]
 800aa5a:	4613      	mov	r3, r2
 800aa5c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d101      	bne.n	800aa68 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800aa64:	2302      	movs	r3, #2
 800aa66:	e01a      	b.n	800aa9e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d003      	beq.n	800aa7a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2200      	movs	r2, #0
 800aa76:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d003      	beq.n	800aa88 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	68ba      	ldr	r2, [r7, #8]
 800aa84:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	79fa      	ldrb	r2, [r7, #7]
 800aa94:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800aa96:	68f8      	ldr	r0, [r7, #12]
 800aa98:	f001 fb02 	bl	800c0a0 <USBD_LL_Init>

  return USBD_OK;
 800aa9c:	2300      	movs	r3, #0
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3710      	adds	r7, #16
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}

0800aaa6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aaa6:	b480      	push	{r7}
 800aaa8:	b085      	sub	sp, #20
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	6078      	str	r0, [r7, #4]
 800aaae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800aab0:	2300      	movs	r3, #0
 800aab2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d006      	beq.n	800aac8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	683a      	ldr	r2, [r7, #0]
 800aabe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800aac2:	2300      	movs	r3, #0
 800aac4:	73fb      	strb	r3, [r7, #15]
 800aac6:	e001      	b.n	800aacc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800aac8:	2302      	movs	r3, #2
 800aaca:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aacc:	7bfb      	ldrb	r3, [r7, #15]
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3714      	adds	r7, #20
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bc80      	pop	{r7}
 800aad6:	4770      	bx	lr

0800aad8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f001 fb37 	bl	800c154 <USBD_LL_Start>

  return USBD_OK;
 800aae6:	2300      	movs	r3, #0
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3708      	adds	r7, #8
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aaf8:	2300      	movs	r3, #0
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	370c      	adds	r7, #12
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bc80      	pop	{r7}
 800ab02:	4770      	bx	lr

0800ab04 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b084      	sub	sp, #16
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	460b      	mov	r3, r1
 800ab0e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ab10:	2302      	movs	r3, #2
 800ab12:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d00c      	beq.n	800ab38 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	78fa      	ldrb	r2, [r7, #3]
 800ab28:	4611      	mov	r1, r2
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	4798      	blx	r3
 800ab2e:	4603      	mov	r3, r0
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d101      	bne.n	800ab38 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800ab34:	2300      	movs	r3, #0
 800ab36:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800ab38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3710      	adds	r7, #16
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b082      	sub	sp, #8
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	78fa      	ldrb	r2, [r7, #3]
 800ab58:	4611      	mov	r1, r2
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	4798      	blx	r3

  return USBD_OK;
 800ab5e:	2300      	movs	r3, #0
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3708      	adds	r7, #8
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b082      	sub	sp, #8
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ab78:	6839      	ldr	r1, [r7, #0]
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f000 fed7 	bl	800b92e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2201      	movs	r2, #1
 800ab84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ab8e:	461a      	mov	r2, r3
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ab9c:	f003 031f 	and.w	r3, r3, #31
 800aba0:	2b02      	cmp	r3, #2
 800aba2:	d016      	beq.n	800abd2 <USBD_LL_SetupStage+0x6a>
 800aba4:	2b02      	cmp	r3, #2
 800aba6:	d81c      	bhi.n	800abe2 <USBD_LL_SetupStage+0x7a>
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d002      	beq.n	800abb2 <USBD_LL_SetupStage+0x4a>
 800abac:	2b01      	cmp	r3, #1
 800abae:	d008      	beq.n	800abc2 <USBD_LL_SetupStage+0x5a>
 800abb0:	e017      	b.n	800abe2 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800abb8:	4619      	mov	r1, r3
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 f9ca 	bl	800af54 <USBD_StdDevReq>
      break;
 800abc0:	e01a      	b.n	800abf8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800abc8:	4619      	mov	r1, r3
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 fa2c 	bl	800b028 <USBD_StdItfReq>
      break;
 800abd0:	e012      	b.n	800abf8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800abd8:	4619      	mov	r1, r3
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f000 fa6c 	bl	800b0b8 <USBD_StdEPReq>
      break;
 800abe0:	e00a      	b.n	800abf8 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800abe8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800abec:	b2db      	uxtb	r3, r3
 800abee:	4619      	mov	r1, r3
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f001 fb0f 	bl	800c214 <USBD_LL_StallEP>
      break;
 800abf6:	bf00      	nop
  }

  return USBD_OK;
 800abf8:	2300      	movs	r3, #0
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3708      	adds	r7, #8
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}

0800ac02 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b086      	sub	sp, #24
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	60f8      	str	r0, [r7, #12]
 800ac0a:	460b      	mov	r3, r1
 800ac0c:	607a      	str	r2, [r7, #4]
 800ac0e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ac10:	7afb      	ldrb	r3, [r7, #11]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d14b      	bne.n	800acae <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ac1c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ac24:	2b03      	cmp	r3, #3
 800ac26:	d134      	bne.n	800ac92 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	68da      	ldr	r2, [r3, #12]
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	691b      	ldr	r3, [r3, #16]
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d919      	bls.n	800ac68 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	68da      	ldr	r2, [r3, #12]
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	691b      	ldr	r3, [r3, #16]
 800ac3c:	1ad2      	subs	r2, r2, r3
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	68da      	ldr	r2, [r3, #12]
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d203      	bcs.n	800ac56 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	e002      	b.n	800ac5c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	6879      	ldr	r1, [r7, #4]
 800ac60:	68f8      	ldr	r0, [r7, #12]
 800ac62:	f000 ff56 	bl	800bb12 <USBD_CtlContinueRx>
 800ac66:	e038      	b.n	800acda <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac6e:	691b      	ldr	r3, [r3, #16]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d00a      	beq.n	800ac8a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ac7a:	2b03      	cmp	r3, #3
 800ac7c:	d105      	bne.n	800ac8a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac84:	691b      	ldr	r3, [r3, #16]
 800ac86:	68f8      	ldr	r0, [r7, #12]
 800ac88:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800ac8a:	68f8      	ldr	r0, [r7, #12]
 800ac8c:	f000 ff53 	bl	800bb36 <USBD_CtlSendStatus>
 800ac90:	e023      	b.n	800acda <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ac98:	2b05      	cmp	r3, #5
 800ac9a:	d11e      	bne.n	800acda <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800aca4:	2100      	movs	r1, #0
 800aca6:	68f8      	ldr	r0, [r7, #12]
 800aca8:	f001 fab4 	bl	800c214 <USBD_LL_StallEP>
 800acac:	e015      	b.n	800acda <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acb4:	699b      	ldr	r3, [r3, #24]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d00d      	beq.n	800acd6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800acc0:	2b03      	cmp	r3, #3
 800acc2:	d108      	bne.n	800acd6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acca:	699b      	ldr	r3, [r3, #24]
 800accc:	7afa      	ldrb	r2, [r7, #11]
 800acce:	4611      	mov	r1, r2
 800acd0:	68f8      	ldr	r0, [r7, #12]
 800acd2:	4798      	blx	r3
 800acd4:	e001      	b.n	800acda <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800acd6:	2302      	movs	r3, #2
 800acd8:	e000      	b.n	800acdc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800acda:	2300      	movs	r3, #0
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3718      	adds	r7, #24
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b086      	sub	sp, #24
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	460b      	mov	r3, r1
 800acee:	607a      	str	r2, [r7, #4]
 800acf0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800acf2:	7afb      	ldrb	r3, [r7, #11]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d17f      	bne.n	800adf8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	3314      	adds	r3, #20
 800acfc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ad04:	2b02      	cmp	r3, #2
 800ad06:	d15c      	bne.n	800adc2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	68da      	ldr	r2, [r3, #12]
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	691b      	ldr	r3, [r3, #16]
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d915      	bls.n	800ad40 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	68da      	ldr	r2, [r3, #12]
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	691b      	ldr	r3, [r3, #16]
 800ad1c:	1ad2      	subs	r2, r2, r3
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	68db      	ldr	r3, [r3, #12]
 800ad26:	b29b      	uxth	r3, r3
 800ad28:	461a      	mov	r2, r3
 800ad2a:	6879      	ldr	r1, [r7, #4]
 800ad2c:	68f8      	ldr	r0, [r7, #12]
 800ad2e:	f000 fec0 	bl	800bab2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad32:	2300      	movs	r3, #0
 800ad34:	2200      	movs	r2, #0
 800ad36:	2100      	movs	r1, #0
 800ad38:	68f8      	ldr	r0, [r7, #12]
 800ad3a:	f001 fb16 	bl	800c36a <USBD_LL_PrepareReceive>
 800ad3e:	e04e      	b.n	800adde <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	697a      	ldr	r2, [r7, #20]
 800ad46:	6912      	ldr	r2, [r2, #16]
 800ad48:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad4c:	fb02 f201 	mul.w	r2, r2, r1
 800ad50:	1a9b      	subs	r3, r3, r2
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d11c      	bne.n	800ad90 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	689a      	ldr	r2, [r3, #8]
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d316      	bcc.n	800ad90 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	689a      	ldr	r2, [r3, #8]
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ad6c:	429a      	cmp	r2, r3
 800ad6e:	d20f      	bcs.n	800ad90 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ad70:	2200      	movs	r2, #0
 800ad72:	2100      	movs	r1, #0
 800ad74:	68f8      	ldr	r0, [r7, #12]
 800ad76:	f000 fe9c 	bl	800bab2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad82:	2300      	movs	r3, #0
 800ad84:	2200      	movs	r2, #0
 800ad86:	2100      	movs	r1, #0
 800ad88:	68f8      	ldr	r0, [r7, #12]
 800ad8a:	f001 faee 	bl	800c36a <USBD_LL_PrepareReceive>
 800ad8e:	e026      	b.n	800adde <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad96:	68db      	ldr	r3, [r3, #12]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d00a      	beq.n	800adb2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ada2:	2b03      	cmp	r3, #3
 800ada4:	d105      	bne.n	800adb2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	68f8      	ldr	r0, [r7, #12]
 800adb0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800adb2:	2180      	movs	r1, #128	; 0x80
 800adb4:	68f8      	ldr	r0, [r7, #12]
 800adb6:	f001 fa2d 	bl	800c214 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800adba:	68f8      	ldr	r0, [r7, #12]
 800adbc:	f000 fece 	bl	800bb5c <USBD_CtlReceiveStatus>
 800adc0:	e00d      	b.n	800adde <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800adc8:	2b04      	cmp	r3, #4
 800adca:	d004      	beq.n	800add6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800add2:	2b00      	cmp	r3, #0
 800add4:	d103      	bne.n	800adde <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800add6:	2180      	movs	r1, #128	; 0x80
 800add8:	68f8      	ldr	r0, [r7, #12]
 800adda:	f001 fa1b 	bl	800c214 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ade4:	2b01      	cmp	r3, #1
 800ade6:	d11d      	bne.n	800ae24 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800ade8:	68f8      	ldr	r0, [r7, #12]
 800adea:	f7ff fe81 	bl	800aaf0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2200      	movs	r2, #0
 800adf2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800adf6:	e015      	b.n	800ae24 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adfe:	695b      	ldr	r3, [r3, #20]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d00d      	beq.n	800ae20 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ae0a:	2b03      	cmp	r3, #3
 800ae0c:	d108      	bne.n	800ae20 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae14:	695b      	ldr	r3, [r3, #20]
 800ae16:	7afa      	ldrb	r2, [r7, #11]
 800ae18:	4611      	mov	r1, r2
 800ae1a:	68f8      	ldr	r0, [r7, #12]
 800ae1c:	4798      	blx	r3
 800ae1e:	e001      	b.n	800ae24 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ae20:	2302      	movs	r3, #2
 800ae22:	e000      	b.n	800ae26 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800ae24:	2300      	movs	r3, #0
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3718      	adds	r7, #24
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}

0800ae2e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ae2e:	b580      	push	{r7, lr}
 800ae30:	b082      	sub	sp, #8
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ae36:	2340      	movs	r3, #64	; 0x40
 800ae38:	2200      	movs	r2, #0
 800ae3a:	2100      	movs	r1, #0
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f001 f9a4 	bl	800c18a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2201      	movs	r2, #1
 800ae46:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2240      	movs	r2, #64	; 0x40
 800ae4e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ae52:	2340      	movs	r3, #64	; 0x40
 800ae54:	2200      	movs	r2, #0
 800ae56:	2180      	movs	r1, #128	; 0x80
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f001 f996 	bl	800c18a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2201      	movs	r2, #1
 800ae62:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2240      	movs	r2, #64	; 0x40
 800ae68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2200      	movs	r2, #0
 800ae76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d009      	beq.n	800aea6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	6852      	ldr	r2, [r2, #4]
 800ae9e:	b2d2      	uxtb	r2, r2
 800aea0:	4611      	mov	r1, r2
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	4798      	blx	r3
  }

  return USBD_OK;
 800aea6:	2300      	movs	r3, #0
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3708      	adds	r7, #8
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b083      	sub	sp, #12
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	460b      	mov	r3, r1
 800aeba:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	78fa      	ldrb	r2, [r7, #3]
 800aec0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aec2:	2300      	movs	r3, #0
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	370c      	adds	r7, #12
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bc80      	pop	{r7}
 800aecc:	4770      	bx	lr

0800aece <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aece:	b480      	push	{r7}
 800aed0:	b083      	sub	sp, #12
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2204      	movs	r2, #4
 800aee6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800aeea:	2300      	movs	r3, #0
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	370c      	adds	r7, #12
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bc80      	pop	{r7}
 800aef4:	4770      	bx	lr

0800aef6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aef6:	b480      	push	{r7}
 800aef8:	b083      	sub	sp, #12
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af04:	2b04      	cmp	r3, #4
 800af06:	d105      	bne.n	800af14 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800af14:	2300      	movs	r3, #0
}
 800af16:	4618      	mov	r0, r3
 800af18:	370c      	adds	r7, #12
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bc80      	pop	{r7}
 800af1e:	4770      	bx	lr

0800af20 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af2e:	2b03      	cmp	r3, #3
 800af30:	d10b      	bne.n	800af4a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af38:	69db      	ldr	r3, [r3, #28]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d005      	beq.n	800af4a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af44:	69db      	ldr	r3, [r3, #28]
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800af4a:	2300      	movs	r3, #0
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3708      	adds	r7, #8
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}

0800af54 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af5e:	2300      	movs	r3, #0
 800af60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af6a:	2b40      	cmp	r3, #64	; 0x40
 800af6c:	d005      	beq.n	800af7a <USBD_StdDevReq+0x26>
 800af6e:	2b40      	cmp	r3, #64	; 0x40
 800af70:	d84f      	bhi.n	800b012 <USBD_StdDevReq+0xbe>
 800af72:	2b00      	cmp	r3, #0
 800af74:	d009      	beq.n	800af8a <USBD_StdDevReq+0x36>
 800af76:	2b20      	cmp	r3, #32
 800af78:	d14b      	bne.n	800b012 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af80:	689b      	ldr	r3, [r3, #8]
 800af82:	6839      	ldr	r1, [r7, #0]
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	4798      	blx	r3
      break;
 800af88:	e048      	b.n	800b01c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	785b      	ldrb	r3, [r3, #1]
 800af8e:	2b09      	cmp	r3, #9
 800af90:	d839      	bhi.n	800b006 <USBD_StdDevReq+0xb2>
 800af92:	a201      	add	r2, pc, #4	; (adr r2, 800af98 <USBD_StdDevReq+0x44>)
 800af94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af98:	0800afe9 	.word	0x0800afe9
 800af9c:	0800affd 	.word	0x0800affd
 800afa0:	0800b007 	.word	0x0800b007
 800afa4:	0800aff3 	.word	0x0800aff3
 800afa8:	0800b007 	.word	0x0800b007
 800afac:	0800afcb 	.word	0x0800afcb
 800afb0:	0800afc1 	.word	0x0800afc1
 800afb4:	0800b007 	.word	0x0800b007
 800afb8:	0800afdf 	.word	0x0800afdf
 800afbc:	0800afd5 	.word	0x0800afd5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800afc0:	6839      	ldr	r1, [r7, #0]
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 f9dc 	bl	800b380 <USBD_GetDescriptor>
          break;
 800afc8:	e022      	b.n	800b010 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800afca:	6839      	ldr	r1, [r7, #0]
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f000 fb3f 	bl	800b650 <USBD_SetAddress>
          break;
 800afd2:	e01d      	b.n	800b010 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800afd4:	6839      	ldr	r1, [r7, #0]
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 fb7e 	bl	800b6d8 <USBD_SetConfig>
          break;
 800afdc:	e018      	b.n	800b010 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800afde:	6839      	ldr	r1, [r7, #0]
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f000 fc07 	bl	800b7f4 <USBD_GetConfig>
          break;
 800afe6:	e013      	b.n	800b010 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800afe8:	6839      	ldr	r1, [r7, #0]
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 fc37 	bl	800b85e <USBD_GetStatus>
          break;
 800aff0:	e00e      	b.n	800b010 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aff2:	6839      	ldr	r1, [r7, #0]
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 fc65 	bl	800b8c4 <USBD_SetFeature>
          break;
 800affa:	e009      	b.n	800b010 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800affc:	6839      	ldr	r1, [r7, #0]
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 fc74 	bl	800b8ec <USBD_ClrFeature>
          break;
 800b004:	e004      	b.n	800b010 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b006:	6839      	ldr	r1, [r7, #0]
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 fccc 	bl	800b9a6 <USBD_CtlError>
          break;
 800b00e:	bf00      	nop
      }
      break;
 800b010:	e004      	b.n	800b01c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b012:	6839      	ldr	r1, [r7, #0]
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f000 fcc6 	bl	800b9a6 <USBD_CtlError>
      break;
 800b01a:	bf00      	nop
  }

  return ret;
 800b01c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3710      	adds	r7, #16
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}
 800b026:	bf00      	nop

0800b028 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b032:	2300      	movs	r3, #0
 800b034:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b03e:	2b40      	cmp	r3, #64	; 0x40
 800b040:	d005      	beq.n	800b04e <USBD_StdItfReq+0x26>
 800b042:	2b40      	cmp	r3, #64	; 0x40
 800b044:	d82e      	bhi.n	800b0a4 <USBD_StdItfReq+0x7c>
 800b046:	2b00      	cmp	r3, #0
 800b048:	d001      	beq.n	800b04e <USBD_StdItfReq+0x26>
 800b04a:	2b20      	cmp	r3, #32
 800b04c:	d12a      	bne.n	800b0a4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b054:	3b01      	subs	r3, #1
 800b056:	2b02      	cmp	r3, #2
 800b058:	d81d      	bhi.n	800b096 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	889b      	ldrh	r3, [r3, #4]
 800b05e:	b2db      	uxtb	r3, r3
 800b060:	2b01      	cmp	r3, #1
 800b062:	d813      	bhi.n	800b08c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	6839      	ldr	r1, [r7, #0]
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	4798      	blx	r3
 800b072:	4603      	mov	r3, r0
 800b074:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	88db      	ldrh	r3, [r3, #6]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d110      	bne.n	800b0a0 <USBD_StdItfReq+0x78>
 800b07e:	7bfb      	ldrb	r3, [r7, #15]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d10d      	bne.n	800b0a0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f000 fd56 	bl	800bb36 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b08a:	e009      	b.n	800b0a0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b08c:	6839      	ldr	r1, [r7, #0]
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f000 fc89 	bl	800b9a6 <USBD_CtlError>
          break;
 800b094:	e004      	b.n	800b0a0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b096:	6839      	ldr	r1, [r7, #0]
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f000 fc84 	bl	800b9a6 <USBD_CtlError>
          break;
 800b09e:	e000      	b.n	800b0a2 <USBD_StdItfReq+0x7a>
          break;
 800b0a0:	bf00      	nop
      }
      break;
 800b0a2:	e004      	b.n	800b0ae <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b0a4:	6839      	ldr	r1, [r7, #0]
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 fc7d 	bl	800b9a6 <USBD_CtlError>
      break;
 800b0ac:	bf00      	nop
  }

  return USBD_OK;
 800b0ae:	2300      	movs	r3, #0
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3710      	adds	r7, #16
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	889b      	ldrh	r3, [r3, #4]
 800b0ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b0d4:	2b40      	cmp	r3, #64	; 0x40
 800b0d6:	d007      	beq.n	800b0e8 <USBD_StdEPReq+0x30>
 800b0d8:	2b40      	cmp	r3, #64	; 0x40
 800b0da:	f200 8146 	bhi.w	800b36a <USBD_StdEPReq+0x2b2>
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d00a      	beq.n	800b0f8 <USBD_StdEPReq+0x40>
 800b0e2:	2b20      	cmp	r3, #32
 800b0e4:	f040 8141 	bne.w	800b36a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0ee:	689b      	ldr	r3, [r3, #8]
 800b0f0:	6839      	ldr	r1, [r7, #0]
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	4798      	blx	r3
      break;
 800b0f6:	e13d      	b.n	800b374 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b100:	2b20      	cmp	r3, #32
 800b102:	d10a      	bne.n	800b11a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b10a:	689b      	ldr	r3, [r3, #8]
 800b10c:	6839      	ldr	r1, [r7, #0]
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	4798      	blx	r3
 800b112:	4603      	mov	r3, r0
 800b114:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b116:	7bfb      	ldrb	r3, [r7, #15]
 800b118:	e12d      	b.n	800b376 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	785b      	ldrb	r3, [r3, #1]
 800b11e:	2b03      	cmp	r3, #3
 800b120:	d007      	beq.n	800b132 <USBD_StdEPReq+0x7a>
 800b122:	2b03      	cmp	r3, #3
 800b124:	f300 811b 	bgt.w	800b35e <USBD_StdEPReq+0x2a6>
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d072      	beq.n	800b212 <USBD_StdEPReq+0x15a>
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d03a      	beq.n	800b1a6 <USBD_StdEPReq+0xee>
 800b130:	e115      	b.n	800b35e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b138:	2b02      	cmp	r3, #2
 800b13a:	d002      	beq.n	800b142 <USBD_StdEPReq+0x8a>
 800b13c:	2b03      	cmp	r3, #3
 800b13e:	d015      	beq.n	800b16c <USBD_StdEPReq+0xb4>
 800b140:	e02b      	b.n	800b19a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b142:	7bbb      	ldrb	r3, [r7, #14]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d00c      	beq.n	800b162 <USBD_StdEPReq+0xaa>
 800b148:	7bbb      	ldrb	r3, [r7, #14]
 800b14a:	2b80      	cmp	r3, #128	; 0x80
 800b14c:	d009      	beq.n	800b162 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b14e:	7bbb      	ldrb	r3, [r7, #14]
 800b150:	4619      	mov	r1, r3
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f001 f85e 	bl	800c214 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b158:	2180      	movs	r1, #128	; 0x80
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f001 f85a 	bl	800c214 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b160:	e020      	b.n	800b1a4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b162:	6839      	ldr	r1, [r7, #0]
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f000 fc1e 	bl	800b9a6 <USBD_CtlError>
              break;
 800b16a:	e01b      	b.n	800b1a4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	885b      	ldrh	r3, [r3, #2]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d10e      	bne.n	800b192 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b174:	7bbb      	ldrb	r3, [r7, #14]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d00b      	beq.n	800b192 <USBD_StdEPReq+0xda>
 800b17a:	7bbb      	ldrb	r3, [r7, #14]
 800b17c:	2b80      	cmp	r3, #128	; 0x80
 800b17e:	d008      	beq.n	800b192 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	88db      	ldrh	r3, [r3, #6]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d104      	bne.n	800b192 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b188:	7bbb      	ldrb	r3, [r7, #14]
 800b18a:	4619      	mov	r1, r3
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f001 f841 	bl	800c214 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 fccf 	bl	800bb36 <USBD_CtlSendStatus>

              break;
 800b198:	e004      	b.n	800b1a4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b19a:	6839      	ldr	r1, [r7, #0]
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f000 fc02 	bl	800b9a6 <USBD_CtlError>
              break;
 800b1a2:	bf00      	nop
          }
          break;
 800b1a4:	e0e0      	b.n	800b368 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1ac:	2b02      	cmp	r3, #2
 800b1ae:	d002      	beq.n	800b1b6 <USBD_StdEPReq+0xfe>
 800b1b0:	2b03      	cmp	r3, #3
 800b1b2:	d015      	beq.n	800b1e0 <USBD_StdEPReq+0x128>
 800b1b4:	e026      	b.n	800b204 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1b6:	7bbb      	ldrb	r3, [r7, #14]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d00c      	beq.n	800b1d6 <USBD_StdEPReq+0x11e>
 800b1bc:	7bbb      	ldrb	r3, [r7, #14]
 800b1be:	2b80      	cmp	r3, #128	; 0x80
 800b1c0:	d009      	beq.n	800b1d6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b1c2:	7bbb      	ldrb	r3, [r7, #14]
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f001 f824 	bl	800c214 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b1cc:	2180      	movs	r1, #128	; 0x80
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f001 f820 	bl	800c214 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b1d4:	e01c      	b.n	800b210 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b1d6:	6839      	ldr	r1, [r7, #0]
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 fbe4 	bl	800b9a6 <USBD_CtlError>
              break;
 800b1de:	e017      	b.n	800b210 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	885b      	ldrh	r3, [r3, #2]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d112      	bne.n	800b20e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b1e8:	7bbb      	ldrb	r3, [r7, #14]
 800b1ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d004      	beq.n	800b1fc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b1f2:	7bbb      	ldrb	r3, [r7, #14]
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f001 f82b 	bl	800c252 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f000 fc9a 	bl	800bb36 <USBD_CtlSendStatus>
              }
              break;
 800b202:	e004      	b.n	800b20e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b204:	6839      	ldr	r1, [r7, #0]
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f000 fbcd 	bl	800b9a6 <USBD_CtlError>
              break;
 800b20c:	e000      	b.n	800b210 <USBD_StdEPReq+0x158>
              break;
 800b20e:	bf00      	nop
          }
          break;
 800b210:	e0aa      	b.n	800b368 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b218:	2b02      	cmp	r3, #2
 800b21a:	d002      	beq.n	800b222 <USBD_StdEPReq+0x16a>
 800b21c:	2b03      	cmp	r3, #3
 800b21e:	d032      	beq.n	800b286 <USBD_StdEPReq+0x1ce>
 800b220:	e097      	b.n	800b352 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b222:	7bbb      	ldrb	r3, [r7, #14]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d007      	beq.n	800b238 <USBD_StdEPReq+0x180>
 800b228:	7bbb      	ldrb	r3, [r7, #14]
 800b22a:	2b80      	cmp	r3, #128	; 0x80
 800b22c:	d004      	beq.n	800b238 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b22e:	6839      	ldr	r1, [r7, #0]
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 fbb8 	bl	800b9a6 <USBD_CtlError>
                break;
 800b236:	e091      	b.n	800b35c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b238:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	da0b      	bge.n	800b258 <USBD_StdEPReq+0x1a0>
 800b240:	7bbb      	ldrb	r3, [r7, #14]
 800b242:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b246:	4613      	mov	r3, r2
 800b248:	009b      	lsls	r3, r3, #2
 800b24a:	4413      	add	r3, r2
 800b24c:	009b      	lsls	r3, r3, #2
 800b24e:	3310      	adds	r3, #16
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	4413      	add	r3, r2
 800b254:	3304      	adds	r3, #4
 800b256:	e00b      	b.n	800b270 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b258:	7bbb      	ldrb	r3, [r7, #14]
 800b25a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b25e:	4613      	mov	r3, r2
 800b260:	009b      	lsls	r3, r3, #2
 800b262:	4413      	add	r3, r2
 800b264:	009b      	lsls	r3, r3, #2
 800b266:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	4413      	add	r3, r2
 800b26e:	3304      	adds	r3, #4
 800b270:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	2200      	movs	r2, #0
 800b276:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	2202      	movs	r2, #2
 800b27c:	4619      	mov	r1, r3
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 fbfb 	bl	800ba7a <USBD_CtlSendData>
              break;
 800b284:	e06a      	b.n	800b35c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b286:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	da11      	bge.n	800b2b2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b28e:	7bbb      	ldrb	r3, [r7, #14]
 800b290:	f003 020f 	and.w	r2, r3, #15
 800b294:	6879      	ldr	r1, [r7, #4]
 800b296:	4613      	mov	r3, r2
 800b298:	009b      	lsls	r3, r3, #2
 800b29a:	4413      	add	r3, r2
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	440b      	add	r3, r1
 800b2a0:	3318      	adds	r3, #24
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d117      	bne.n	800b2d8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b2a8:	6839      	ldr	r1, [r7, #0]
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 fb7b 	bl	800b9a6 <USBD_CtlError>
                  break;
 800b2b0:	e054      	b.n	800b35c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b2b2:	7bbb      	ldrb	r3, [r7, #14]
 800b2b4:	f003 020f 	and.w	r2, r3, #15
 800b2b8:	6879      	ldr	r1, [r7, #4]
 800b2ba:	4613      	mov	r3, r2
 800b2bc:	009b      	lsls	r3, r3, #2
 800b2be:	4413      	add	r3, r2
 800b2c0:	009b      	lsls	r3, r3, #2
 800b2c2:	440b      	add	r3, r1
 800b2c4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d104      	bne.n	800b2d8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b2ce:	6839      	ldr	r1, [r7, #0]
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f000 fb68 	bl	800b9a6 <USBD_CtlError>
                  break;
 800b2d6:	e041      	b.n	800b35c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	da0b      	bge.n	800b2f8 <USBD_StdEPReq+0x240>
 800b2e0:	7bbb      	ldrb	r3, [r7, #14]
 800b2e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b2e6:	4613      	mov	r3, r2
 800b2e8:	009b      	lsls	r3, r3, #2
 800b2ea:	4413      	add	r3, r2
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	3310      	adds	r3, #16
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	4413      	add	r3, r2
 800b2f4:	3304      	adds	r3, #4
 800b2f6:	e00b      	b.n	800b310 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b2f8:	7bbb      	ldrb	r3, [r7, #14]
 800b2fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2fe:	4613      	mov	r3, r2
 800b300:	009b      	lsls	r3, r3, #2
 800b302:	4413      	add	r3, r2
 800b304:	009b      	lsls	r3, r3, #2
 800b306:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b30a:	687a      	ldr	r2, [r7, #4]
 800b30c:	4413      	add	r3, r2
 800b30e:	3304      	adds	r3, #4
 800b310:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b312:	7bbb      	ldrb	r3, [r7, #14]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d002      	beq.n	800b31e <USBD_StdEPReq+0x266>
 800b318:	7bbb      	ldrb	r3, [r7, #14]
 800b31a:	2b80      	cmp	r3, #128	; 0x80
 800b31c:	d103      	bne.n	800b326 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	2200      	movs	r2, #0
 800b322:	601a      	str	r2, [r3, #0]
 800b324:	e00e      	b.n	800b344 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b326:	7bbb      	ldrb	r3, [r7, #14]
 800b328:	4619      	mov	r1, r3
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 ffb0 	bl	800c290 <USBD_LL_IsStallEP>
 800b330:	4603      	mov	r3, r0
 800b332:	2b00      	cmp	r3, #0
 800b334:	d003      	beq.n	800b33e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	2201      	movs	r2, #1
 800b33a:	601a      	str	r2, [r3, #0]
 800b33c:	e002      	b.n	800b344 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	2200      	movs	r2, #0
 800b342:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	2202      	movs	r2, #2
 800b348:	4619      	mov	r1, r3
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 fb95 	bl	800ba7a <USBD_CtlSendData>
              break;
 800b350:	e004      	b.n	800b35c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b352:	6839      	ldr	r1, [r7, #0]
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f000 fb26 	bl	800b9a6 <USBD_CtlError>
              break;
 800b35a:	bf00      	nop
          }
          break;
 800b35c:	e004      	b.n	800b368 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b35e:	6839      	ldr	r1, [r7, #0]
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 fb20 	bl	800b9a6 <USBD_CtlError>
          break;
 800b366:	bf00      	nop
      }
      break;
 800b368:	e004      	b.n	800b374 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b36a:	6839      	ldr	r1, [r7, #0]
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 fb1a 	bl	800b9a6 <USBD_CtlError>
      break;
 800b372:	bf00      	nop
  }

  return ret;
 800b374:	7bfb      	ldrb	r3, [r7, #15]
}
 800b376:	4618      	mov	r0, r3
 800b378:	3710      	adds	r7, #16
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
	...

0800b380 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b38a:	2300      	movs	r3, #0
 800b38c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b38e:	2300      	movs	r3, #0
 800b390:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b392:	2300      	movs	r3, #0
 800b394:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	885b      	ldrh	r3, [r3, #2]
 800b39a:	0a1b      	lsrs	r3, r3, #8
 800b39c:	b29b      	uxth	r3, r3
 800b39e:	3b01      	subs	r3, #1
 800b3a0:	2b06      	cmp	r3, #6
 800b3a2:	f200 8128 	bhi.w	800b5f6 <USBD_GetDescriptor+0x276>
 800b3a6:	a201      	add	r2, pc, #4	; (adr r2, 800b3ac <USBD_GetDescriptor+0x2c>)
 800b3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ac:	0800b3c9 	.word	0x0800b3c9
 800b3b0:	0800b3e1 	.word	0x0800b3e1
 800b3b4:	0800b421 	.word	0x0800b421
 800b3b8:	0800b5f7 	.word	0x0800b5f7
 800b3bc:	0800b5f7 	.word	0x0800b5f7
 800b3c0:	0800b597 	.word	0x0800b597
 800b3c4:	0800b5c3 	.word	0x0800b5c3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	687a      	ldr	r2, [r7, #4]
 800b3d2:	7c12      	ldrb	r2, [r2, #16]
 800b3d4:	f107 0108 	add.w	r1, r7, #8
 800b3d8:	4610      	mov	r0, r2
 800b3da:	4798      	blx	r3
 800b3dc:	60f8      	str	r0, [r7, #12]
      break;
 800b3de:	e112      	b.n	800b606 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	7c1b      	ldrb	r3, [r3, #16]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d10d      	bne.n	800b404 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3f0:	f107 0208 	add.w	r2, r7, #8
 800b3f4:	4610      	mov	r0, r2
 800b3f6:	4798      	blx	r3
 800b3f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	3301      	adds	r3, #1
 800b3fe:	2202      	movs	r2, #2
 800b400:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b402:	e100      	b.n	800b606 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b40c:	f107 0208 	add.w	r2, r7, #8
 800b410:	4610      	mov	r0, r2
 800b412:	4798      	blx	r3
 800b414:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	3301      	adds	r3, #1
 800b41a:	2202      	movs	r2, #2
 800b41c:	701a      	strb	r2, [r3, #0]
      break;
 800b41e:	e0f2      	b.n	800b606 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	885b      	ldrh	r3, [r3, #2]
 800b424:	b2db      	uxtb	r3, r3
 800b426:	2b05      	cmp	r3, #5
 800b428:	f200 80ac 	bhi.w	800b584 <USBD_GetDescriptor+0x204>
 800b42c:	a201      	add	r2, pc, #4	; (adr r2, 800b434 <USBD_GetDescriptor+0xb4>)
 800b42e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b432:	bf00      	nop
 800b434:	0800b44d 	.word	0x0800b44d
 800b438:	0800b481 	.word	0x0800b481
 800b43c:	0800b4b5 	.word	0x0800b4b5
 800b440:	0800b4e9 	.word	0x0800b4e9
 800b444:	0800b51d 	.word	0x0800b51d
 800b448:	0800b551 	.word	0x0800b551
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d00b      	beq.n	800b470 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	7c12      	ldrb	r2, [r2, #16]
 800b464:	f107 0108 	add.w	r1, r7, #8
 800b468:	4610      	mov	r0, r2
 800b46a:	4798      	blx	r3
 800b46c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b46e:	e091      	b.n	800b594 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b470:	6839      	ldr	r1, [r7, #0]
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f000 fa97 	bl	800b9a6 <USBD_CtlError>
            err++;
 800b478:	7afb      	ldrb	r3, [r7, #11]
 800b47a:	3301      	adds	r3, #1
 800b47c:	72fb      	strb	r3, [r7, #11]
          break;
 800b47e:	e089      	b.n	800b594 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b486:	689b      	ldr	r3, [r3, #8]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d00b      	beq.n	800b4a4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b492:	689b      	ldr	r3, [r3, #8]
 800b494:	687a      	ldr	r2, [r7, #4]
 800b496:	7c12      	ldrb	r2, [r2, #16]
 800b498:	f107 0108 	add.w	r1, r7, #8
 800b49c:	4610      	mov	r0, r2
 800b49e:	4798      	blx	r3
 800b4a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4a2:	e077      	b.n	800b594 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b4a4:	6839      	ldr	r1, [r7, #0]
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f000 fa7d 	bl	800b9a6 <USBD_CtlError>
            err++;
 800b4ac:	7afb      	ldrb	r3, [r7, #11]
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	72fb      	strb	r3, [r7, #11]
          break;
 800b4b2:	e06f      	b.n	800b594 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d00b      	beq.n	800b4d8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b4c6:	68db      	ldr	r3, [r3, #12]
 800b4c8:	687a      	ldr	r2, [r7, #4]
 800b4ca:	7c12      	ldrb	r2, [r2, #16]
 800b4cc:	f107 0108 	add.w	r1, r7, #8
 800b4d0:	4610      	mov	r0, r2
 800b4d2:	4798      	blx	r3
 800b4d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4d6:	e05d      	b.n	800b594 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b4d8:	6839      	ldr	r1, [r7, #0]
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f000 fa63 	bl	800b9a6 <USBD_CtlError>
            err++;
 800b4e0:	7afb      	ldrb	r3, [r7, #11]
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	72fb      	strb	r3, [r7, #11]
          break;
 800b4e6:	e055      	b.n	800b594 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b4ee:	691b      	ldr	r3, [r3, #16]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d00b      	beq.n	800b50c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b4fa:	691b      	ldr	r3, [r3, #16]
 800b4fc:	687a      	ldr	r2, [r7, #4]
 800b4fe:	7c12      	ldrb	r2, [r2, #16]
 800b500:	f107 0108 	add.w	r1, r7, #8
 800b504:	4610      	mov	r0, r2
 800b506:	4798      	blx	r3
 800b508:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b50a:	e043      	b.n	800b594 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b50c:	6839      	ldr	r1, [r7, #0]
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 fa49 	bl	800b9a6 <USBD_CtlError>
            err++;
 800b514:	7afb      	ldrb	r3, [r7, #11]
 800b516:	3301      	adds	r3, #1
 800b518:	72fb      	strb	r3, [r7, #11]
          break;
 800b51a:	e03b      	b.n	800b594 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b522:	695b      	ldr	r3, [r3, #20]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d00b      	beq.n	800b540 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b52e:	695b      	ldr	r3, [r3, #20]
 800b530:	687a      	ldr	r2, [r7, #4]
 800b532:	7c12      	ldrb	r2, [r2, #16]
 800b534:	f107 0108 	add.w	r1, r7, #8
 800b538:	4610      	mov	r0, r2
 800b53a:	4798      	blx	r3
 800b53c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b53e:	e029      	b.n	800b594 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b540:	6839      	ldr	r1, [r7, #0]
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f000 fa2f 	bl	800b9a6 <USBD_CtlError>
            err++;
 800b548:	7afb      	ldrb	r3, [r7, #11]
 800b54a:	3301      	adds	r3, #1
 800b54c:	72fb      	strb	r3, [r7, #11]
          break;
 800b54e:	e021      	b.n	800b594 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b556:	699b      	ldr	r3, [r3, #24]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d00b      	beq.n	800b574 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b562:	699b      	ldr	r3, [r3, #24]
 800b564:	687a      	ldr	r2, [r7, #4]
 800b566:	7c12      	ldrb	r2, [r2, #16]
 800b568:	f107 0108 	add.w	r1, r7, #8
 800b56c:	4610      	mov	r0, r2
 800b56e:	4798      	blx	r3
 800b570:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b572:	e00f      	b.n	800b594 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b574:	6839      	ldr	r1, [r7, #0]
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f000 fa15 	bl	800b9a6 <USBD_CtlError>
            err++;
 800b57c:	7afb      	ldrb	r3, [r7, #11]
 800b57e:	3301      	adds	r3, #1
 800b580:	72fb      	strb	r3, [r7, #11]
          break;
 800b582:	e007      	b.n	800b594 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b584:	6839      	ldr	r1, [r7, #0]
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 fa0d 	bl	800b9a6 <USBD_CtlError>
          err++;
 800b58c:	7afb      	ldrb	r3, [r7, #11]
 800b58e:	3301      	adds	r3, #1
 800b590:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b592:	e038      	b.n	800b606 <USBD_GetDescriptor+0x286>
 800b594:	e037      	b.n	800b606 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	7c1b      	ldrb	r3, [r3, #16]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d109      	bne.n	800b5b2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5a6:	f107 0208 	add.w	r2, r7, #8
 800b5aa:	4610      	mov	r0, r2
 800b5ac:	4798      	blx	r3
 800b5ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b5b0:	e029      	b.n	800b606 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b5b2:	6839      	ldr	r1, [r7, #0]
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 f9f6 	bl	800b9a6 <USBD_CtlError>
        err++;
 800b5ba:	7afb      	ldrb	r3, [r7, #11]
 800b5bc:	3301      	adds	r3, #1
 800b5be:	72fb      	strb	r3, [r7, #11]
      break;
 800b5c0:	e021      	b.n	800b606 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	7c1b      	ldrb	r3, [r3, #16]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d10d      	bne.n	800b5e6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5d2:	f107 0208 	add.w	r2, r7, #8
 800b5d6:	4610      	mov	r0, r2
 800b5d8:	4798      	blx	r3
 800b5da:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	3301      	adds	r3, #1
 800b5e0:	2207      	movs	r2, #7
 800b5e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b5e4:	e00f      	b.n	800b606 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b5e6:	6839      	ldr	r1, [r7, #0]
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f000 f9dc 	bl	800b9a6 <USBD_CtlError>
        err++;
 800b5ee:	7afb      	ldrb	r3, [r7, #11]
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	72fb      	strb	r3, [r7, #11]
      break;
 800b5f4:	e007      	b.n	800b606 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b5f6:	6839      	ldr	r1, [r7, #0]
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 f9d4 	bl	800b9a6 <USBD_CtlError>
      err++;
 800b5fe:	7afb      	ldrb	r3, [r7, #11]
 800b600:	3301      	adds	r3, #1
 800b602:	72fb      	strb	r3, [r7, #11]
      break;
 800b604:	bf00      	nop
  }

  if (err != 0U)
 800b606:	7afb      	ldrb	r3, [r7, #11]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d11c      	bne.n	800b646 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b60c:	893b      	ldrh	r3, [r7, #8]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d011      	beq.n	800b636 <USBD_GetDescriptor+0x2b6>
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	88db      	ldrh	r3, [r3, #6]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d00d      	beq.n	800b636 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	88da      	ldrh	r2, [r3, #6]
 800b61e:	893b      	ldrh	r3, [r7, #8]
 800b620:	4293      	cmp	r3, r2
 800b622:	bf28      	it	cs
 800b624:	4613      	movcs	r3, r2
 800b626:	b29b      	uxth	r3, r3
 800b628:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b62a:	893b      	ldrh	r3, [r7, #8]
 800b62c:	461a      	mov	r2, r3
 800b62e:	68f9      	ldr	r1, [r7, #12]
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 fa22 	bl	800ba7a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	88db      	ldrh	r3, [r3, #6]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d104      	bne.n	800b648 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 fa79 	bl	800bb36 <USBD_CtlSendStatus>
 800b644:	e000      	b.n	800b648 <USBD_GetDescriptor+0x2c8>
    return;
 800b646:	bf00      	nop
    }
  }
}
 800b648:	3710      	adds	r7, #16
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop

0800b650 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	889b      	ldrh	r3, [r3, #4]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d130      	bne.n	800b6c4 <USBD_SetAddress+0x74>
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	88db      	ldrh	r3, [r3, #6]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d12c      	bne.n	800b6c4 <USBD_SetAddress+0x74>
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	885b      	ldrh	r3, [r3, #2]
 800b66e:	2b7f      	cmp	r3, #127	; 0x7f
 800b670:	d828      	bhi.n	800b6c4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	885b      	ldrh	r3, [r3, #2]
 800b676:	b2db      	uxtb	r3, r3
 800b678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b67c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b684:	2b03      	cmp	r3, #3
 800b686:	d104      	bne.n	800b692 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b688:	6839      	ldr	r1, [r7, #0]
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 f98b 	bl	800b9a6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b690:	e01d      	b.n	800b6ce <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	7bfa      	ldrb	r2, [r7, #15]
 800b696:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b69a:	7bfb      	ldrb	r3, [r7, #15]
 800b69c:	4619      	mov	r1, r3
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f000 fe21 	bl	800c2e6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f000 fa46 	bl	800bb36 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b6aa:	7bfb      	ldrb	r3, [r7, #15]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d004      	beq.n	800b6ba <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2202      	movs	r2, #2
 800b6b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6b8:	e009      	b.n	800b6ce <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2201      	movs	r2, #1
 800b6be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6c2:	e004      	b.n	800b6ce <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b6c4:	6839      	ldr	r1, [r7, #0]
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f000 f96d 	bl	800b9a6 <USBD_CtlError>
  }
}
 800b6cc:	bf00      	nop
 800b6ce:	bf00      	nop
 800b6d0:	3710      	adds	r7, #16
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
	...

0800b6d8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	885b      	ldrh	r3, [r3, #2]
 800b6e6:	b2da      	uxtb	r2, r3
 800b6e8:	4b41      	ldr	r3, [pc, #260]	; (800b7f0 <USBD_SetConfig+0x118>)
 800b6ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b6ec:	4b40      	ldr	r3, [pc, #256]	; (800b7f0 <USBD_SetConfig+0x118>)
 800b6ee:	781b      	ldrb	r3, [r3, #0]
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d904      	bls.n	800b6fe <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b6f4:	6839      	ldr	r1, [r7, #0]
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 f955 	bl	800b9a6 <USBD_CtlError>
 800b6fc:	e075      	b.n	800b7ea <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b704:	2b02      	cmp	r3, #2
 800b706:	d002      	beq.n	800b70e <USBD_SetConfig+0x36>
 800b708:	2b03      	cmp	r3, #3
 800b70a:	d023      	beq.n	800b754 <USBD_SetConfig+0x7c>
 800b70c:	e062      	b.n	800b7d4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b70e:	4b38      	ldr	r3, [pc, #224]	; (800b7f0 <USBD_SetConfig+0x118>)
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d01a      	beq.n	800b74c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b716:	4b36      	ldr	r3, [pc, #216]	; (800b7f0 <USBD_SetConfig+0x118>)
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	461a      	mov	r2, r3
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2203      	movs	r2, #3
 800b724:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b728:	4b31      	ldr	r3, [pc, #196]	; (800b7f0 <USBD_SetConfig+0x118>)
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	4619      	mov	r1, r3
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f7ff f9e8 	bl	800ab04 <USBD_SetClassConfig>
 800b734:	4603      	mov	r3, r0
 800b736:	2b02      	cmp	r3, #2
 800b738:	d104      	bne.n	800b744 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b73a:	6839      	ldr	r1, [r7, #0]
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f000 f932 	bl	800b9a6 <USBD_CtlError>
            return;
 800b742:	e052      	b.n	800b7ea <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f000 f9f6 	bl	800bb36 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b74a:	e04e      	b.n	800b7ea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 f9f2 	bl	800bb36 <USBD_CtlSendStatus>
        break;
 800b752:	e04a      	b.n	800b7ea <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b754:	4b26      	ldr	r3, [pc, #152]	; (800b7f0 <USBD_SetConfig+0x118>)
 800b756:	781b      	ldrb	r3, [r3, #0]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d112      	bne.n	800b782 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2202      	movs	r2, #2
 800b760:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b764:	4b22      	ldr	r3, [pc, #136]	; (800b7f0 <USBD_SetConfig+0x118>)
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	461a      	mov	r2, r3
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b76e:	4b20      	ldr	r3, [pc, #128]	; (800b7f0 <USBD_SetConfig+0x118>)
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	4619      	mov	r1, r3
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f7ff f9e4 	bl	800ab42 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 f9db 	bl	800bb36 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b780:	e033      	b.n	800b7ea <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b782:	4b1b      	ldr	r3, [pc, #108]	; (800b7f0 <USBD_SetConfig+0x118>)
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	461a      	mov	r2, r3
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d01d      	beq.n	800b7cc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	b2db      	uxtb	r3, r3
 800b796:	4619      	mov	r1, r3
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f7ff f9d2 	bl	800ab42 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b79e:	4b14      	ldr	r3, [pc, #80]	; (800b7f0 <USBD_SetConfig+0x118>)
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b7a8:	4b11      	ldr	r3, [pc, #68]	; (800b7f0 <USBD_SetConfig+0x118>)
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f7ff f9a8 	bl	800ab04 <USBD_SetClassConfig>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	2b02      	cmp	r3, #2
 800b7b8:	d104      	bne.n	800b7c4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b7ba:	6839      	ldr	r1, [r7, #0]
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f000 f8f2 	bl	800b9a6 <USBD_CtlError>
            return;
 800b7c2:	e012      	b.n	800b7ea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 f9b6 	bl	800bb36 <USBD_CtlSendStatus>
        break;
 800b7ca:	e00e      	b.n	800b7ea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f000 f9b2 	bl	800bb36 <USBD_CtlSendStatus>
        break;
 800b7d2:	e00a      	b.n	800b7ea <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b7d4:	6839      	ldr	r1, [r7, #0]
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f000 f8e5 	bl	800b9a6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b7dc:	4b04      	ldr	r3, [pc, #16]	; (800b7f0 <USBD_SetConfig+0x118>)
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f7ff f9ad 	bl	800ab42 <USBD_ClrClassConfig>
        break;
 800b7e8:	bf00      	nop
    }
  }
}
 800b7ea:	3708      	adds	r7, #8
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	20000608 	.word	0x20000608

0800b7f4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b082      	sub	sp, #8
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	88db      	ldrh	r3, [r3, #6]
 800b802:	2b01      	cmp	r3, #1
 800b804:	d004      	beq.n	800b810 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b806:	6839      	ldr	r1, [r7, #0]
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 f8cc 	bl	800b9a6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b80e:	e022      	b.n	800b856 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b816:	2b02      	cmp	r3, #2
 800b818:	dc02      	bgt.n	800b820 <USBD_GetConfig+0x2c>
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	dc03      	bgt.n	800b826 <USBD_GetConfig+0x32>
 800b81e:	e015      	b.n	800b84c <USBD_GetConfig+0x58>
 800b820:	2b03      	cmp	r3, #3
 800b822:	d00b      	beq.n	800b83c <USBD_GetConfig+0x48>
 800b824:	e012      	b.n	800b84c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2200      	movs	r2, #0
 800b82a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	3308      	adds	r3, #8
 800b830:	2201      	movs	r2, #1
 800b832:	4619      	mov	r1, r3
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f000 f920 	bl	800ba7a <USBD_CtlSendData>
        break;
 800b83a:	e00c      	b.n	800b856 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	3304      	adds	r3, #4
 800b840:	2201      	movs	r2, #1
 800b842:	4619      	mov	r1, r3
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f000 f918 	bl	800ba7a <USBD_CtlSendData>
        break;
 800b84a:	e004      	b.n	800b856 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b84c:	6839      	ldr	r1, [r7, #0]
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f000 f8a9 	bl	800b9a6 <USBD_CtlError>
        break;
 800b854:	bf00      	nop
}
 800b856:	bf00      	nop
 800b858:	3708      	adds	r7, #8
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}

0800b85e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b85e:	b580      	push	{r7, lr}
 800b860:	b082      	sub	sp, #8
 800b862:	af00      	add	r7, sp, #0
 800b864:	6078      	str	r0, [r7, #4]
 800b866:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b86e:	3b01      	subs	r3, #1
 800b870:	2b02      	cmp	r3, #2
 800b872:	d81e      	bhi.n	800b8b2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	88db      	ldrh	r3, [r3, #6]
 800b878:	2b02      	cmp	r3, #2
 800b87a:	d004      	beq.n	800b886 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b87c:	6839      	ldr	r1, [r7, #0]
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 f891 	bl	800b9a6 <USBD_CtlError>
        break;
 800b884:	e01a      	b.n	800b8bc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2201      	movs	r2, #1
 800b88a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b892:	2b00      	cmp	r3, #0
 800b894:	d005      	beq.n	800b8a2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	68db      	ldr	r3, [r3, #12]
 800b89a:	f043 0202 	orr.w	r2, r3, #2
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	330c      	adds	r3, #12
 800b8a6:	2202      	movs	r2, #2
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 f8e5 	bl	800ba7a <USBD_CtlSendData>
      break;
 800b8b0:	e004      	b.n	800b8bc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b8b2:	6839      	ldr	r1, [r7, #0]
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f000 f876 	bl	800b9a6 <USBD_CtlError>
      break;
 800b8ba:	bf00      	nop
  }
}
 800b8bc:	bf00      	nop
 800b8be:	3708      	adds	r7, #8
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b082      	sub	sp, #8
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	885b      	ldrh	r3, [r3, #2]
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	d106      	bne.n	800b8e4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2201      	movs	r2, #1
 800b8da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f000 f929 	bl	800bb36 <USBD_CtlSendStatus>
  }
}
 800b8e4:	bf00      	nop
 800b8e6:	3708      	adds	r7, #8
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}

0800b8ec <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b082      	sub	sp, #8
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8fc:	3b01      	subs	r3, #1
 800b8fe:	2b02      	cmp	r3, #2
 800b900:	d80b      	bhi.n	800b91a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	885b      	ldrh	r3, [r3, #2]
 800b906:	2b01      	cmp	r3, #1
 800b908:	d10c      	bne.n	800b924 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2200      	movs	r2, #0
 800b90e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 f90f 	bl	800bb36 <USBD_CtlSendStatus>
      }
      break;
 800b918:	e004      	b.n	800b924 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b91a:	6839      	ldr	r1, [r7, #0]
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f000 f842 	bl	800b9a6 <USBD_CtlError>
      break;
 800b922:	e000      	b.n	800b926 <USBD_ClrFeature+0x3a>
      break;
 800b924:	bf00      	nop
  }
}
 800b926:	bf00      	nop
 800b928:	3708      	adds	r7, #8
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}

0800b92e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b92e:	b480      	push	{r7}
 800b930:	b083      	sub	sp, #12
 800b932:	af00      	add	r7, sp, #0
 800b934:	6078      	str	r0, [r7, #4]
 800b936:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	781a      	ldrb	r2, [r3, #0]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	785a      	ldrb	r2, [r3, #1]
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	3302      	adds	r3, #2
 800b94c:	781b      	ldrb	r3, [r3, #0]
 800b94e:	b29a      	uxth	r2, r3
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	3303      	adds	r3, #3
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	b29b      	uxth	r3, r3
 800b958:	021b      	lsls	r3, r3, #8
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	4413      	add	r3, r2
 800b95e:	b29a      	uxth	r2, r3
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	3304      	adds	r3, #4
 800b968:	781b      	ldrb	r3, [r3, #0]
 800b96a:	b29a      	uxth	r2, r3
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	3305      	adds	r3, #5
 800b970:	781b      	ldrb	r3, [r3, #0]
 800b972:	b29b      	uxth	r3, r3
 800b974:	021b      	lsls	r3, r3, #8
 800b976:	b29b      	uxth	r3, r3
 800b978:	4413      	add	r3, r2
 800b97a:	b29a      	uxth	r2, r3
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	3306      	adds	r3, #6
 800b984:	781b      	ldrb	r3, [r3, #0]
 800b986:	b29a      	uxth	r2, r3
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	3307      	adds	r3, #7
 800b98c:	781b      	ldrb	r3, [r3, #0]
 800b98e:	b29b      	uxth	r3, r3
 800b990:	021b      	lsls	r3, r3, #8
 800b992:	b29b      	uxth	r3, r3
 800b994:	4413      	add	r3, r2
 800b996:	b29a      	uxth	r2, r3
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	80da      	strh	r2, [r3, #6]

}
 800b99c:	bf00      	nop
 800b99e:	370c      	adds	r7, #12
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bc80      	pop	{r7}
 800b9a4:	4770      	bx	lr

0800b9a6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b9a6:	b580      	push	{r7, lr}
 800b9a8:	b082      	sub	sp, #8
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
 800b9ae:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b9b0:	2180      	movs	r1, #128	; 0x80
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f000 fc2e 	bl	800c214 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b9b8:	2100      	movs	r1, #0
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 fc2a 	bl	800c214 <USBD_LL_StallEP>
}
 800b9c0:	bf00      	nop
 800b9c2:	3708      	adds	r7, #8
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b086      	sub	sp, #24
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	60f8      	str	r0, [r7, #12]
 800b9d0:	60b9      	str	r1, [r7, #8]
 800b9d2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d032      	beq.n	800ba44 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b9de:	68f8      	ldr	r0, [r7, #12]
 800b9e0:	f000 f834 	bl	800ba4c <USBD_GetLen>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	3301      	adds	r3, #1
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	005b      	lsls	r3, r3, #1
 800b9ec:	b29a      	uxth	r2, r3
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b9f2:	7dfb      	ldrb	r3, [r7, #23]
 800b9f4:	1c5a      	adds	r2, r3, #1
 800b9f6:	75fa      	strb	r2, [r7, #23]
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	4413      	add	r3, r2
 800b9fe:	687a      	ldr	r2, [r7, #4]
 800ba00:	7812      	ldrb	r2, [r2, #0]
 800ba02:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ba04:	7dfb      	ldrb	r3, [r7, #23]
 800ba06:	1c5a      	adds	r2, r3, #1
 800ba08:	75fa      	strb	r2, [r7, #23]
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	4413      	add	r3, r2
 800ba10:	2203      	movs	r2, #3
 800ba12:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ba14:	e012      	b.n	800ba3c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	1c5a      	adds	r2, r3, #1
 800ba1a:	60fa      	str	r2, [r7, #12]
 800ba1c:	7dfa      	ldrb	r2, [r7, #23]
 800ba1e:	1c51      	adds	r1, r2, #1
 800ba20:	75f9      	strb	r1, [r7, #23]
 800ba22:	4611      	mov	r1, r2
 800ba24:	68ba      	ldr	r2, [r7, #8]
 800ba26:	440a      	add	r2, r1
 800ba28:	781b      	ldrb	r3, [r3, #0]
 800ba2a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800ba2c:	7dfb      	ldrb	r3, [r7, #23]
 800ba2e:	1c5a      	adds	r2, r3, #1
 800ba30:	75fa      	strb	r2, [r7, #23]
 800ba32:	461a      	mov	r2, r3
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	4413      	add	r3, r2
 800ba38:	2200      	movs	r2, #0
 800ba3a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	781b      	ldrb	r3, [r3, #0]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d1e8      	bne.n	800ba16 <USBD_GetString+0x4e>
    }
  }
}
 800ba44:	bf00      	nop
 800ba46:	3718      	adds	r7, #24
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b085      	sub	sp, #20
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ba54:	2300      	movs	r3, #0
 800ba56:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800ba58:	e005      	b.n	800ba66 <USBD_GetLen+0x1a>
  {
    len++;
 800ba5a:	7bfb      	ldrb	r3, [r7, #15]
 800ba5c:	3301      	adds	r3, #1
 800ba5e:	73fb      	strb	r3, [r7, #15]
    buf++;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	3301      	adds	r3, #1
 800ba64:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d1f5      	bne.n	800ba5a <USBD_GetLen+0xe>
  }

  return len;
 800ba6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3714      	adds	r7, #20
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bc80      	pop	{r7}
 800ba78:	4770      	bx	lr

0800ba7a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800ba7a:	b580      	push	{r7, lr}
 800ba7c:	b084      	sub	sp, #16
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	60f8      	str	r0, [r7, #12]
 800ba82:	60b9      	str	r1, [r7, #8]
 800ba84:	4613      	mov	r3, r2
 800ba86:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	2202      	movs	r2, #2
 800ba8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ba90:	88fa      	ldrh	r2, [r7, #6]
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800ba96:	88fa      	ldrh	r2, [r7, #6]
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba9c:	88fb      	ldrh	r3, [r7, #6]
 800ba9e:	68ba      	ldr	r2, [r7, #8]
 800baa0:	2100      	movs	r1, #0
 800baa2:	68f8      	ldr	r0, [r7, #12]
 800baa4:	f000 fc3e 	bl	800c324 <USBD_LL_Transmit>

  return USBD_OK;
 800baa8:	2300      	movs	r3, #0
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3710      	adds	r7, #16
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}

0800bab2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800bab2:	b580      	push	{r7, lr}
 800bab4:	b084      	sub	sp, #16
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	60f8      	str	r0, [r7, #12]
 800baba:	60b9      	str	r1, [r7, #8]
 800babc:	4613      	mov	r3, r2
 800babe:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bac0:	88fb      	ldrh	r3, [r7, #6]
 800bac2:	68ba      	ldr	r2, [r7, #8]
 800bac4:	2100      	movs	r1, #0
 800bac6:	68f8      	ldr	r0, [r7, #12]
 800bac8:	f000 fc2c 	bl	800c324 <USBD_LL_Transmit>

  return USBD_OK;
 800bacc:	2300      	movs	r3, #0
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3710      	adds	r7, #16
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}

0800bad6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800bad6:	b580      	push	{r7, lr}
 800bad8:	b084      	sub	sp, #16
 800bada:	af00      	add	r7, sp, #0
 800badc:	60f8      	str	r0, [r7, #12]
 800bade:	60b9      	str	r1, [r7, #8]
 800bae0:	4613      	mov	r3, r2
 800bae2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2203      	movs	r2, #3
 800bae8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800baec:	88fa      	ldrh	r2, [r7, #6]
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800baf4:	88fa      	ldrh	r2, [r7, #6]
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bafc:	88fb      	ldrh	r3, [r7, #6]
 800bafe:	68ba      	ldr	r2, [r7, #8]
 800bb00:	2100      	movs	r1, #0
 800bb02:	68f8      	ldr	r0, [r7, #12]
 800bb04:	f000 fc31 	bl	800c36a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb08:	2300      	movs	r3, #0
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3710      	adds	r7, #16
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}

0800bb12 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b084      	sub	sp, #16
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	60f8      	str	r0, [r7, #12]
 800bb1a:	60b9      	str	r1, [r7, #8]
 800bb1c:	4613      	mov	r3, r2
 800bb1e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb20:	88fb      	ldrh	r3, [r7, #6]
 800bb22:	68ba      	ldr	r2, [r7, #8]
 800bb24:	2100      	movs	r1, #0
 800bb26:	68f8      	ldr	r0, [r7, #12]
 800bb28:	f000 fc1f 	bl	800c36a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb2c:	2300      	movs	r3, #0
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3710      	adds	r7, #16
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}

0800bb36 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bb36:	b580      	push	{r7, lr}
 800bb38:	b082      	sub	sp, #8
 800bb3a:	af00      	add	r7, sp, #0
 800bb3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2204      	movs	r2, #4
 800bb42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bb46:	2300      	movs	r3, #0
 800bb48:	2200      	movs	r2, #0
 800bb4a:	2100      	movs	r1, #0
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f000 fbe9 	bl	800c324 <USBD_LL_Transmit>

  return USBD_OK;
 800bb52:	2300      	movs	r3, #0
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3708      	adds	r7, #8
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2205      	movs	r2, #5
 800bb68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	2200      	movs	r2, #0
 800bb70:	2100      	movs	r1, #0
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f000 fbf9 	bl	800c36a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb78:	2300      	movs	r3, #0
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3708      	adds	r7, #8
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
	...

0800bb84 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bb88:	2200      	movs	r2, #0
 800bb8a:	4912      	ldr	r1, [pc, #72]	; (800bbd4 <MX_USB_DEVICE_Init+0x50>)
 800bb8c:	4812      	ldr	r0, [pc, #72]	; (800bbd8 <MX_USB_DEVICE_Init+0x54>)
 800bb8e:	f7fe ff5f 	bl	800aa50 <USBD_Init>
 800bb92:	4603      	mov	r3, r0
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d001      	beq.n	800bb9c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bb98:	f7f7 fa5c 	bl	8003054 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bb9c:	490f      	ldr	r1, [pc, #60]	; (800bbdc <MX_USB_DEVICE_Init+0x58>)
 800bb9e:	480e      	ldr	r0, [pc, #56]	; (800bbd8 <MX_USB_DEVICE_Init+0x54>)
 800bba0:	f7fe ff81 	bl	800aaa6 <USBD_RegisterClass>
 800bba4:	4603      	mov	r3, r0
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d001      	beq.n	800bbae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bbaa:	f7f7 fa53 	bl	8003054 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bbae:	490c      	ldr	r1, [pc, #48]	; (800bbe0 <MX_USB_DEVICE_Init+0x5c>)
 800bbb0:	4809      	ldr	r0, [pc, #36]	; (800bbd8 <MX_USB_DEVICE_Init+0x54>)
 800bbb2:	f7fe fee1 	bl	800a978 <USBD_CDC_RegisterInterface>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d001      	beq.n	800bbc0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bbbc:	f7f7 fa4a 	bl	8003054 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bbc0:	4805      	ldr	r0, [pc, #20]	; (800bbd8 <MX_USB_DEVICE_Init+0x54>)
 800bbc2:	f7fe ff89 	bl	800aad8 <USBD_Start>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d001      	beq.n	800bbd0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bbcc:	f7f7 fa42 	bl	8003054 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bbd0:	bf00      	nop
 800bbd2:	bd80      	pop	{r7, pc}
 800bbd4:	20000134 	.word	0x20000134
 800bbd8:	20000838 	.word	0x20000838
 800bbdc:	20000020 	.word	0x20000020
 800bbe0:	20000124 	.word	0x20000124

0800bbe4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bbe8:	2200      	movs	r2, #0
 800bbea:	4905      	ldr	r1, [pc, #20]	; (800bc00 <CDC_Init_FS+0x1c>)
 800bbec:	4805      	ldr	r0, [pc, #20]	; (800bc04 <CDC_Init_FS+0x20>)
 800bbee:	f7fe fed9 	bl	800a9a4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bbf2:	4905      	ldr	r1, [pc, #20]	; (800bc08 <CDC_Init_FS+0x24>)
 800bbf4:	4803      	ldr	r0, [pc, #12]	; (800bc04 <CDC_Init_FS+0x20>)
 800bbf6:	f7fe feee 	bl	800a9d6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bbfa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	20000ee4 	.word	0x20000ee4
 800bc04:	20000838 	.word	0x20000838
 800bc08:	20000afc 	.word	0x20000afc

0800bc0c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bc10:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bc80      	pop	{r7}
 800bc18:	4770      	bx	lr
	...

0800bc1c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b083      	sub	sp, #12
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	4603      	mov	r3, r0
 800bc24:	6039      	str	r1, [r7, #0]
 800bc26:	71fb      	strb	r3, [r7, #7]
 800bc28:	4613      	mov	r3, r2
 800bc2a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bc2c:	79fb      	ldrb	r3, [r7, #7]
 800bc2e:	2b23      	cmp	r3, #35	; 0x23
 800bc30:	d84a      	bhi.n	800bcc8 <CDC_Control_FS+0xac>
 800bc32:	a201      	add	r2, pc, #4	; (adr r2, 800bc38 <CDC_Control_FS+0x1c>)
 800bc34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc38:	0800bcc9 	.word	0x0800bcc9
 800bc3c:	0800bcc9 	.word	0x0800bcc9
 800bc40:	0800bcc9 	.word	0x0800bcc9
 800bc44:	0800bcc9 	.word	0x0800bcc9
 800bc48:	0800bcc9 	.word	0x0800bcc9
 800bc4c:	0800bcc9 	.word	0x0800bcc9
 800bc50:	0800bcc9 	.word	0x0800bcc9
 800bc54:	0800bcc9 	.word	0x0800bcc9
 800bc58:	0800bcc9 	.word	0x0800bcc9
 800bc5c:	0800bcc9 	.word	0x0800bcc9
 800bc60:	0800bcc9 	.word	0x0800bcc9
 800bc64:	0800bcc9 	.word	0x0800bcc9
 800bc68:	0800bcc9 	.word	0x0800bcc9
 800bc6c:	0800bcc9 	.word	0x0800bcc9
 800bc70:	0800bcc9 	.word	0x0800bcc9
 800bc74:	0800bcc9 	.word	0x0800bcc9
 800bc78:	0800bcc9 	.word	0x0800bcc9
 800bc7c:	0800bcc9 	.word	0x0800bcc9
 800bc80:	0800bcc9 	.word	0x0800bcc9
 800bc84:	0800bcc9 	.word	0x0800bcc9
 800bc88:	0800bcc9 	.word	0x0800bcc9
 800bc8c:	0800bcc9 	.word	0x0800bcc9
 800bc90:	0800bcc9 	.word	0x0800bcc9
 800bc94:	0800bcc9 	.word	0x0800bcc9
 800bc98:	0800bcc9 	.word	0x0800bcc9
 800bc9c:	0800bcc9 	.word	0x0800bcc9
 800bca0:	0800bcc9 	.word	0x0800bcc9
 800bca4:	0800bcc9 	.word	0x0800bcc9
 800bca8:	0800bcc9 	.word	0x0800bcc9
 800bcac:	0800bcc9 	.word	0x0800bcc9
 800bcb0:	0800bcc9 	.word	0x0800bcc9
 800bcb4:	0800bcc9 	.word	0x0800bcc9
 800bcb8:	0800bcc9 	.word	0x0800bcc9
 800bcbc:	0800bcc9 	.word	0x0800bcc9
 800bcc0:	0800bcc9 	.word	0x0800bcc9
 800bcc4:	0800bcc9 	.word	0x0800bcc9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bcc8:	bf00      	nop
  }

  return (USBD_OK);
 800bcca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	370c      	adds	r7, #12
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bc80      	pop	{r7}
 800bcd4:	4770      	bx	lr
 800bcd6:	bf00      	nop

0800bcd8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b082      	sub	sp, #8
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bce2:	6879      	ldr	r1, [r7, #4]
 800bce4:	4805      	ldr	r0, [pc, #20]	; (800bcfc <CDC_Receive_FS+0x24>)
 800bce6:	f7fe fe76 	bl	800a9d6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bcea:	4804      	ldr	r0, [pc, #16]	; (800bcfc <CDC_Receive_FS+0x24>)
 800bcec:	f7fe fe86 	bl	800a9fc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bcf0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3708      	adds	r7, #8
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
 800bcfa:	bf00      	nop
 800bcfc:	20000838 	.word	0x20000838

0800bd00 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b083      	sub	sp, #12
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	4603      	mov	r3, r0
 800bd08:	6039      	str	r1, [r7, #0]
 800bd0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	2212      	movs	r2, #18
 800bd10:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bd12:	4b03      	ldr	r3, [pc, #12]	; (800bd20 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	370c      	adds	r7, #12
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bc80      	pop	{r7}
 800bd1c:	4770      	bx	lr
 800bd1e:	bf00      	nop
 800bd20:	20000150 	.word	0x20000150

0800bd24 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b083      	sub	sp, #12
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	6039      	str	r1, [r7, #0]
 800bd2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	2204      	movs	r2, #4
 800bd34:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bd36:	4b03      	ldr	r3, [pc, #12]	; (800bd44 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	370c      	adds	r7, #12
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bc80      	pop	{r7}
 800bd40:	4770      	bx	lr
 800bd42:	bf00      	nop
 800bd44:	20000164 	.word	0x20000164

0800bd48 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	4603      	mov	r3, r0
 800bd50:	6039      	str	r1, [r7, #0]
 800bd52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd54:	79fb      	ldrb	r3, [r7, #7]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d105      	bne.n	800bd66 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bd5a:	683a      	ldr	r2, [r7, #0]
 800bd5c:	4907      	ldr	r1, [pc, #28]	; (800bd7c <USBD_FS_ProductStrDescriptor+0x34>)
 800bd5e:	4808      	ldr	r0, [pc, #32]	; (800bd80 <USBD_FS_ProductStrDescriptor+0x38>)
 800bd60:	f7ff fe32 	bl	800b9c8 <USBD_GetString>
 800bd64:	e004      	b.n	800bd70 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bd66:	683a      	ldr	r2, [r7, #0]
 800bd68:	4904      	ldr	r1, [pc, #16]	; (800bd7c <USBD_FS_ProductStrDescriptor+0x34>)
 800bd6a:	4805      	ldr	r0, [pc, #20]	; (800bd80 <USBD_FS_ProductStrDescriptor+0x38>)
 800bd6c:	f7ff fe2c 	bl	800b9c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd70:	4b02      	ldr	r3, [pc, #8]	; (800bd7c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3708      	adds	r7, #8
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	bf00      	nop
 800bd7c:	200012cc 	.word	0x200012cc
 800bd80:	0800ea58 	.word	0x0800ea58

0800bd84 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	6039      	str	r1, [r7, #0]
 800bd8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bd90:	683a      	ldr	r2, [r7, #0]
 800bd92:	4904      	ldr	r1, [pc, #16]	; (800bda4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bd94:	4804      	ldr	r0, [pc, #16]	; (800bda8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bd96:	f7ff fe17 	bl	800b9c8 <USBD_GetString>
  return USBD_StrDesc;
 800bd9a:	4b02      	ldr	r3, [pc, #8]	; (800bda4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3708      	adds	r7, #8
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}
 800bda4:	200012cc 	.word	0x200012cc
 800bda8:	0800ea70 	.word	0x0800ea70

0800bdac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b082      	sub	sp, #8
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	6039      	str	r1, [r7, #0]
 800bdb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	221a      	movs	r2, #26
 800bdbc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bdbe:	f000 f843 	bl	800be48 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bdc2:	4b02      	ldr	r3, [pc, #8]	; (800bdcc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3708      	adds	r7, #8
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}
 800bdcc:	20000168 	.word	0x20000168

0800bdd0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	6039      	str	r1, [r7, #0]
 800bdda:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bddc:	79fb      	ldrb	r3, [r7, #7]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d105      	bne.n	800bdee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bde2:	683a      	ldr	r2, [r7, #0]
 800bde4:	4907      	ldr	r1, [pc, #28]	; (800be04 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bde6:	4808      	ldr	r0, [pc, #32]	; (800be08 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bde8:	f7ff fdee 	bl	800b9c8 <USBD_GetString>
 800bdec:	e004      	b.n	800bdf8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bdee:	683a      	ldr	r2, [r7, #0]
 800bdf0:	4904      	ldr	r1, [pc, #16]	; (800be04 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bdf2:	4805      	ldr	r0, [pc, #20]	; (800be08 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bdf4:	f7ff fde8 	bl	800b9c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bdf8:	4b02      	ldr	r3, [pc, #8]	; (800be04 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3708      	adds	r7, #8
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}
 800be02:	bf00      	nop
 800be04:	200012cc 	.word	0x200012cc
 800be08:	0800ea84 	.word	0x0800ea84

0800be0c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b082      	sub	sp, #8
 800be10:	af00      	add	r7, sp, #0
 800be12:	4603      	mov	r3, r0
 800be14:	6039      	str	r1, [r7, #0]
 800be16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be18:	79fb      	ldrb	r3, [r7, #7]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d105      	bne.n	800be2a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be1e:	683a      	ldr	r2, [r7, #0]
 800be20:	4907      	ldr	r1, [pc, #28]	; (800be40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800be22:	4808      	ldr	r0, [pc, #32]	; (800be44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800be24:	f7ff fdd0 	bl	800b9c8 <USBD_GetString>
 800be28:	e004      	b.n	800be34 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be2a:	683a      	ldr	r2, [r7, #0]
 800be2c:	4904      	ldr	r1, [pc, #16]	; (800be40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800be2e:	4805      	ldr	r0, [pc, #20]	; (800be44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800be30:	f7ff fdca 	bl	800b9c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be34:	4b02      	ldr	r3, [pc, #8]	; (800be40 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800be36:	4618      	mov	r0, r3
 800be38:	3708      	adds	r7, #8
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}
 800be3e:	bf00      	nop
 800be40:	200012cc 	.word	0x200012cc
 800be44:	0800ea90 	.word	0x0800ea90

0800be48 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b084      	sub	sp, #16
 800be4c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800be4e:	4b0f      	ldr	r3, [pc, #60]	; (800be8c <Get_SerialNum+0x44>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800be54:	4b0e      	ldr	r3, [pc, #56]	; (800be90 <Get_SerialNum+0x48>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800be5a:	4b0e      	ldr	r3, [pc, #56]	; (800be94 <Get_SerialNum+0x4c>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800be60:	68fa      	ldr	r2, [r7, #12]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	4413      	add	r3, r2
 800be66:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d009      	beq.n	800be82 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800be6e:	2208      	movs	r2, #8
 800be70:	4909      	ldr	r1, [pc, #36]	; (800be98 <Get_SerialNum+0x50>)
 800be72:	68f8      	ldr	r0, [r7, #12]
 800be74:	f000 f814 	bl	800bea0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800be78:	2204      	movs	r2, #4
 800be7a:	4908      	ldr	r1, [pc, #32]	; (800be9c <Get_SerialNum+0x54>)
 800be7c:	68b8      	ldr	r0, [r7, #8]
 800be7e:	f000 f80f 	bl	800bea0 <IntToUnicode>
  }
}
 800be82:	bf00      	nop
 800be84:	3710      	adds	r7, #16
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}
 800be8a:	bf00      	nop
 800be8c:	1ffff7e8 	.word	0x1ffff7e8
 800be90:	1ffff7ec 	.word	0x1ffff7ec
 800be94:	1ffff7f0 	.word	0x1ffff7f0
 800be98:	2000016a 	.word	0x2000016a
 800be9c:	2000017a 	.word	0x2000017a

0800bea0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b087      	sub	sp, #28
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	60f8      	str	r0, [r7, #12]
 800bea8:	60b9      	str	r1, [r7, #8]
 800beaa:	4613      	mov	r3, r2
 800beac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800beae:	2300      	movs	r3, #0
 800beb0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800beb2:	2300      	movs	r3, #0
 800beb4:	75fb      	strb	r3, [r7, #23]
 800beb6:	e027      	b.n	800bf08 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	0f1b      	lsrs	r3, r3, #28
 800bebc:	2b09      	cmp	r3, #9
 800bebe:	d80b      	bhi.n	800bed8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	0f1b      	lsrs	r3, r3, #28
 800bec4:	b2da      	uxtb	r2, r3
 800bec6:	7dfb      	ldrb	r3, [r7, #23]
 800bec8:	005b      	lsls	r3, r3, #1
 800beca:	4619      	mov	r1, r3
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	440b      	add	r3, r1
 800bed0:	3230      	adds	r2, #48	; 0x30
 800bed2:	b2d2      	uxtb	r2, r2
 800bed4:	701a      	strb	r2, [r3, #0]
 800bed6:	e00a      	b.n	800beee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	0f1b      	lsrs	r3, r3, #28
 800bedc:	b2da      	uxtb	r2, r3
 800bede:	7dfb      	ldrb	r3, [r7, #23]
 800bee0:	005b      	lsls	r3, r3, #1
 800bee2:	4619      	mov	r1, r3
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	440b      	add	r3, r1
 800bee8:	3237      	adds	r2, #55	; 0x37
 800beea:	b2d2      	uxtb	r2, r2
 800beec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	011b      	lsls	r3, r3, #4
 800bef2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bef4:	7dfb      	ldrb	r3, [r7, #23]
 800bef6:	005b      	lsls	r3, r3, #1
 800bef8:	3301      	adds	r3, #1
 800befa:	68ba      	ldr	r2, [r7, #8]
 800befc:	4413      	add	r3, r2
 800befe:	2200      	movs	r2, #0
 800bf00:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bf02:	7dfb      	ldrb	r3, [r7, #23]
 800bf04:	3301      	adds	r3, #1
 800bf06:	75fb      	strb	r3, [r7, #23]
 800bf08:	7dfa      	ldrb	r2, [r7, #23]
 800bf0a:	79fb      	ldrb	r3, [r7, #7]
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d3d3      	bcc.n	800beb8 <IntToUnicode+0x18>
  }
}
 800bf10:	bf00      	nop
 800bf12:	bf00      	nop
 800bf14:	371c      	adds	r7, #28
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bc80      	pop	{r7}
 800bf1a:	4770      	bx	lr

0800bf1c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b084      	sub	sp, #16
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	4a0d      	ldr	r2, [pc, #52]	; (800bf60 <HAL_PCD_MspInit+0x44>)
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	d113      	bne.n	800bf56 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bf2e:	4b0d      	ldr	r3, [pc, #52]	; (800bf64 <HAL_PCD_MspInit+0x48>)
 800bf30:	69db      	ldr	r3, [r3, #28]
 800bf32:	4a0c      	ldr	r2, [pc, #48]	; (800bf64 <HAL_PCD_MspInit+0x48>)
 800bf34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bf38:	61d3      	str	r3, [r2, #28]
 800bf3a:	4b0a      	ldr	r3, [pc, #40]	; (800bf64 <HAL_PCD_MspInit+0x48>)
 800bf3c:	69db      	ldr	r3, [r3, #28]
 800bf3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf42:	60fb      	str	r3, [r7, #12]
 800bf44:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800bf46:	2200      	movs	r2, #0
 800bf48:	2100      	movs	r1, #0
 800bf4a:	2014      	movs	r0, #20
 800bf4c:	f7f7 fd11 	bl	8003972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800bf50:	2014      	movs	r0, #20
 800bf52:	f7f7 fd2a 	bl	80039aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bf56:	bf00      	nop
 800bf58:	3710      	adds	r7, #16
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	40005c00 	.word	0x40005c00
 800bf64:	40021000 	.word	0x40021000

0800bf68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b082      	sub	sp, #8
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	4610      	mov	r0, r2
 800bf80:	f7fe fdf2 	bl	800ab68 <USBD_LL_SetupStage>
}
 800bf84:	bf00      	nop
 800bf86:	3708      	adds	r7, #8
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}

0800bf8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b082      	sub	sp, #8
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
 800bf94:	460b      	mov	r3, r1
 800bf96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 800bf9e:	78fa      	ldrb	r2, [r7, #3]
 800bfa0:	6879      	ldr	r1, [r7, #4]
 800bfa2:	4613      	mov	r3, r2
 800bfa4:	009b      	lsls	r3, r3, #2
 800bfa6:	4413      	add	r3, r2
 800bfa8:	00db      	lsls	r3, r3, #3
 800bfaa:	440b      	add	r3, r1
 800bfac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bfb0:	681a      	ldr	r2, [r3, #0]
 800bfb2:	78fb      	ldrb	r3, [r7, #3]
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	f7fe fe24 	bl	800ac02 <USBD_LL_DataOutStage>
}
 800bfba:	bf00      	nop
 800bfbc:	3708      	adds	r7, #8
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}

0800bfc2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfc2:	b580      	push	{r7, lr}
 800bfc4:	b082      	sub	sp, #8
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	6078      	str	r0, [r7, #4]
 800bfca:	460b      	mov	r3, r1
 800bfcc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 800bfd4:	78fa      	ldrb	r2, [r7, #3]
 800bfd6:	6879      	ldr	r1, [r7, #4]
 800bfd8:	4613      	mov	r3, r2
 800bfda:	009b      	lsls	r3, r3, #2
 800bfdc:	4413      	add	r3, r2
 800bfde:	00db      	lsls	r3, r3, #3
 800bfe0:	440b      	add	r3, r1
 800bfe2:	3324      	adds	r3, #36	; 0x24
 800bfe4:	681a      	ldr	r2, [r3, #0]
 800bfe6:	78fb      	ldrb	r3, [r7, #3]
 800bfe8:	4619      	mov	r1, r3
 800bfea:	f7fe fe7b 	bl	800ace4 <USBD_LL_DataInStage>
}
 800bfee:	bf00      	nop
 800bff0:	3708      	adds	r7, #8
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}

0800bff6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bff6:	b580      	push	{r7, lr}
 800bff8:	b082      	sub	sp, #8
 800bffa:	af00      	add	r7, sp, #0
 800bffc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c004:	4618      	mov	r0, r3
 800c006:	f7fe ff8b 	bl	800af20 <USBD_LL_SOF>
}
 800c00a:	bf00      	nop
 800c00c:	3708      	adds	r7, #8
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}

0800c012 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c012:	b580      	push	{r7, lr}
 800c014:	b084      	sub	sp, #16
 800c016:	af00      	add	r7, sp, #0
 800c018:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c01a:	2301      	movs	r3, #1
 800c01c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	799b      	ldrb	r3, [r3, #6]
 800c022:	2b02      	cmp	r3, #2
 800c024:	d001      	beq.n	800c02a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c026:	f7f7 f815 	bl	8003054 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c030:	7bfa      	ldrb	r2, [r7, #15]
 800c032:	4611      	mov	r1, r2
 800c034:	4618      	mov	r0, r3
 800c036:	f7fe ff3b 	bl	800aeb0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c040:	4618      	mov	r0, r3
 800c042:	f7fe fef4 	bl	800ae2e <USBD_LL_Reset>
}
 800c046:	bf00      	nop
 800c048:	3710      	adds	r7, #16
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}
	...

0800c050 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b082      	sub	sp, #8
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c05e:	4618      	mov	r0, r3
 800c060:	f7fe ff35 	bl	800aece <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	7a9b      	ldrb	r3, [r3, #10]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d005      	beq.n	800c078 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c06c:	4b04      	ldr	r3, [pc, #16]	; (800c080 <HAL_PCD_SuspendCallback+0x30>)
 800c06e:	691b      	ldr	r3, [r3, #16]
 800c070:	4a03      	ldr	r2, [pc, #12]	; (800c080 <HAL_PCD_SuspendCallback+0x30>)
 800c072:	f043 0306 	orr.w	r3, r3, #6
 800c076:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c078:	bf00      	nop
 800c07a:	3708      	adds	r7, #8
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}
 800c080:	e000ed00 	.word	0xe000ed00

0800c084 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c092:	4618      	mov	r0, r3
 800c094:	f7fe ff2f 	bl	800aef6 <USBD_LL_Resume>
}
 800c098:	bf00      	nop
 800c09a:	3708      	adds	r7, #8
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c0a8:	4a28      	ldr	r2, [pc, #160]	; (800c14c <USBD_LL_Init+0xac>)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f8c2 32d4 	str.w	r3, [r2, #724]	; 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	4a26      	ldr	r2, [pc, #152]	; (800c14c <USBD_LL_Init+0xac>)
 800c0b4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c0b8:	4b24      	ldr	r3, [pc, #144]	; (800c14c <USBD_LL_Init+0xac>)
 800c0ba:	4a25      	ldr	r2, [pc, #148]	; (800c150 <USBD_LL_Init+0xb0>)
 800c0bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c0be:	4b23      	ldr	r3, [pc, #140]	; (800c14c <USBD_LL_Init+0xac>)
 800c0c0:	2208      	movs	r2, #8
 800c0c2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c0c4:	4b21      	ldr	r3, [pc, #132]	; (800c14c <USBD_LL_Init+0xac>)
 800c0c6:	2202      	movs	r2, #2
 800c0c8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c0ca:	4b20      	ldr	r3, [pc, #128]	; (800c14c <USBD_LL_Init+0xac>)
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c0d0:	4b1e      	ldr	r3, [pc, #120]	; (800c14c <USBD_LL_Init+0xac>)
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c0d6:	4b1d      	ldr	r3, [pc, #116]	; (800c14c <USBD_LL_Init+0xac>)
 800c0d8:	2200      	movs	r2, #0
 800c0da:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c0dc:	481b      	ldr	r0, [pc, #108]	; (800c14c <USBD_LL_Init+0xac>)
 800c0de:	f7f9 f818 	bl	8005112 <HAL_PCD_Init>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d001      	beq.n	800c0ec <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c0e8:	f7f6 ffb4 	bl	8003054 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c0f2:	2318      	movs	r3, #24
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	2100      	movs	r1, #0
 800c0f8:	f7fa fd2c 	bl	8006b54 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c102:	2358      	movs	r3, #88	; 0x58
 800c104:	2200      	movs	r2, #0
 800c106:	2180      	movs	r1, #128	; 0x80
 800c108:	f7fa fd24 	bl	8006b54 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c112:	23c0      	movs	r3, #192	; 0xc0
 800c114:	2200      	movs	r2, #0
 800c116:	2181      	movs	r1, #129	; 0x81
 800c118:	f7fa fd1c 	bl	8006b54 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c122:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c126:	2200      	movs	r2, #0
 800c128:	2101      	movs	r1, #1
 800c12a:	f7fa fd13 	bl	8006b54 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c134:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c138:	2200      	movs	r2, #0
 800c13a:	2182      	movs	r1, #130	; 0x82
 800c13c:	f7fa fd0a 	bl	8006b54 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c140:	2300      	movs	r3, #0
}
 800c142:	4618      	mov	r0, r3
 800c144:	3708      	adds	r7, #8
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	bf00      	nop
 800c14c:	200014cc 	.word	0x200014cc
 800c150:	40005c00 	.word	0x40005c00

0800c154 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b084      	sub	sp, #16
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c15c:	2300      	movs	r3, #0
 800c15e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c160:	2300      	movs	r3, #0
 800c162:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c16a:	4618      	mov	r0, r3
 800c16c:	f7f9 f8c7 	bl	80052fe <HAL_PCD_Start>
 800c170:	4603      	mov	r3, r0
 800c172:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c174:	7bfb      	ldrb	r3, [r7, #15]
 800c176:	4618      	mov	r0, r3
 800c178:	f000 f94e 	bl	800c418 <USBD_Get_USB_Status>
 800c17c:	4603      	mov	r3, r0
 800c17e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c180:	7bbb      	ldrb	r3, [r7, #14]
}
 800c182:	4618      	mov	r0, r3
 800c184:	3710      	adds	r7, #16
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}

0800c18a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c18a:	b580      	push	{r7, lr}
 800c18c:	b084      	sub	sp, #16
 800c18e:	af00      	add	r7, sp, #0
 800c190:	6078      	str	r0, [r7, #4]
 800c192:	4608      	mov	r0, r1
 800c194:	4611      	mov	r1, r2
 800c196:	461a      	mov	r2, r3
 800c198:	4603      	mov	r3, r0
 800c19a:	70fb      	strb	r3, [r7, #3]
 800c19c:	460b      	mov	r3, r1
 800c19e:	70bb      	strb	r3, [r7, #2]
 800c1a0:	4613      	mov	r3, r2
 800c1a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c1b2:	78bb      	ldrb	r3, [r7, #2]
 800c1b4:	883a      	ldrh	r2, [r7, #0]
 800c1b6:	78f9      	ldrb	r1, [r7, #3]
 800c1b8:	f7f9 fa1d 	bl	80055f6 <HAL_PCD_EP_Open>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1c0:	7bfb      	ldrb	r3, [r7, #15]
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f000 f928 	bl	800c418 <USBD_Get_USB_Status>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3710      	adds	r7, #16
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}

0800c1d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1d6:	b580      	push	{r7, lr}
 800c1d8:	b084      	sub	sp, #16
 800c1da:	af00      	add	r7, sp, #0
 800c1dc:	6078      	str	r0, [r7, #4]
 800c1de:	460b      	mov	r3, r1
 800c1e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c1f0:	78fa      	ldrb	r2, [r7, #3]
 800c1f2:	4611      	mov	r1, r2
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7f9 fa5b 	bl	80056b0 <HAL_PCD_EP_Close>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1fe:	7bfb      	ldrb	r3, [r7, #15]
 800c200:	4618      	mov	r0, r3
 800c202:	f000 f909 	bl	800c418 <USBD_Get_USB_Status>
 800c206:	4603      	mov	r3, r0
 800c208:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c20a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3710      	adds	r7, #16
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b084      	sub	sp, #16
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	460b      	mov	r3, r1
 800c21e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c220:	2300      	movs	r3, #0
 800c222:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c224:	2300      	movs	r3, #0
 800c226:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c22e:	78fa      	ldrb	r2, [r7, #3]
 800c230:	4611      	mov	r1, r2
 800c232:	4618      	mov	r0, r3
 800c234:	f7f9 fb03 	bl	800583e <HAL_PCD_EP_SetStall>
 800c238:	4603      	mov	r3, r0
 800c23a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c23c:	7bfb      	ldrb	r3, [r7, #15]
 800c23e:	4618      	mov	r0, r3
 800c240:	f000 f8ea 	bl	800c418 <USBD_Get_USB_Status>
 800c244:	4603      	mov	r3, r0
 800c246:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c248:	7bbb      	ldrb	r3, [r7, #14]
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3710      	adds	r7, #16
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}

0800c252 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c252:	b580      	push	{r7, lr}
 800c254:	b084      	sub	sp, #16
 800c256:	af00      	add	r7, sp, #0
 800c258:	6078      	str	r0, [r7, #4]
 800c25a:	460b      	mov	r3, r1
 800c25c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c25e:	2300      	movs	r3, #0
 800c260:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c262:	2300      	movs	r3, #0
 800c264:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c26c:	78fa      	ldrb	r2, [r7, #3]
 800c26e:	4611      	mov	r1, r2
 800c270:	4618      	mov	r0, r3
 800c272:	f7f9 fb44 	bl	80058fe <HAL_PCD_EP_ClrStall>
 800c276:	4603      	mov	r3, r0
 800c278:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c27a:	7bfb      	ldrb	r3, [r7, #15]
 800c27c:	4618      	mov	r0, r3
 800c27e:	f000 f8cb 	bl	800c418 <USBD_Get_USB_Status>
 800c282:	4603      	mov	r3, r0
 800c284:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c286:	7bbb      	ldrb	r3, [r7, #14]
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3710      	adds	r7, #16
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c290:	b480      	push	{r7}
 800c292:	b085      	sub	sp, #20
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	460b      	mov	r3, r1
 800c29a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c2a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c2a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	da0b      	bge.n	800c2c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c2ac:	78fb      	ldrb	r3, [r7, #3]
 800c2ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c2b2:	68f9      	ldr	r1, [r7, #12]
 800c2b4:	4613      	mov	r3, r2
 800c2b6:	009b      	lsls	r3, r3, #2
 800c2b8:	4413      	add	r3, r2
 800c2ba:	00db      	lsls	r3, r3, #3
 800c2bc:	440b      	add	r3, r1
 800c2be:	3312      	adds	r3, #18
 800c2c0:	781b      	ldrb	r3, [r3, #0]
 800c2c2:	e00b      	b.n	800c2dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c2c4:	78fb      	ldrb	r3, [r7, #3]
 800c2c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c2ca:	68f9      	ldr	r1, [r7, #12]
 800c2cc:	4613      	mov	r3, r2
 800c2ce:	009b      	lsls	r3, r3, #2
 800c2d0:	4413      	add	r3, r2
 800c2d2:	00db      	lsls	r3, r3, #3
 800c2d4:	440b      	add	r3, r1
 800c2d6:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800c2da:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3714      	adds	r7, #20
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bc80      	pop	{r7}
 800c2e4:	4770      	bx	lr

0800c2e6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c2e6:	b580      	push	{r7, lr}
 800c2e8:	b084      	sub	sp, #16
 800c2ea:	af00      	add	r7, sp, #0
 800c2ec:	6078      	str	r0, [r7, #4]
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c300:	78fa      	ldrb	r2, [r7, #3]
 800c302:	4611      	mov	r1, r2
 800c304:	4618      	mov	r0, r3
 800c306:	f7f9 f952 	bl	80055ae <HAL_PCD_SetAddress>
 800c30a:	4603      	mov	r3, r0
 800c30c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c30e:	7bfb      	ldrb	r3, [r7, #15]
 800c310:	4618      	mov	r0, r3
 800c312:	f000 f881 	bl	800c418 <USBD_Get_USB_Status>
 800c316:	4603      	mov	r3, r0
 800c318:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c31a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3710      	adds	r7, #16
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}

0800c324 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b086      	sub	sp, #24
 800c328:	af00      	add	r7, sp, #0
 800c32a:	60f8      	str	r0, [r7, #12]
 800c32c:	607a      	str	r2, [r7, #4]
 800c32e:	461a      	mov	r2, r3
 800c330:	460b      	mov	r3, r1
 800c332:	72fb      	strb	r3, [r7, #11]
 800c334:	4613      	mov	r3, r2
 800c336:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c338:	2300      	movs	r3, #0
 800c33a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c33c:	2300      	movs	r3, #0
 800c33e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c346:	893b      	ldrh	r3, [r7, #8]
 800c348:	7af9      	ldrb	r1, [r7, #11]
 800c34a:	687a      	ldr	r2, [r7, #4]
 800c34c:	f7f9 fa40 	bl	80057d0 <HAL_PCD_EP_Transmit>
 800c350:	4603      	mov	r3, r0
 800c352:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c354:	7dfb      	ldrb	r3, [r7, #23]
 800c356:	4618      	mov	r0, r3
 800c358:	f000 f85e 	bl	800c418 <USBD_Get_USB_Status>
 800c35c:	4603      	mov	r3, r0
 800c35e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c360:	7dbb      	ldrb	r3, [r7, #22]
}
 800c362:	4618      	mov	r0, r3
 800c364:	3718      	adds	r7, #24
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}

0800c36a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c36a:	b580      	push	{r7, lr}
 800c36c:	b086      	sub	sp, #24
 800c36e:	af00      	add	r7, sp, #0
 800c370:	60f8      	str	r0, [r7, #12]
 800c372:	607a      	str	r2, [r7, #4]
 800c374:	461a      	mov	r2, r3
 800c376:	460b      	mov	r3, r1
 800c378:	72fb      	strb	r3, [r7, #11]
 800c37a:	4613      	mov	r3, r2
 800c37c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c37e:	2300      	movs	r3, #0
 800c380:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c382:	2300      	movs	r3, #0
 800c384:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c38c:	893b      	ldrh	r3, [r7, #8]
 800c38e:	7af9      	ldrb	r1, [r7, #11]
 800c390:	687a      	ldr	r2, [r7, #4]
 800c392:	f7f9 f9d5 	bl	8005740 <HAL_PCD_EP_Receive>
 800c396:	4603      	mov	r3, r0
 800c398:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c39a:	7dfb      	ldrb	r3, [r7, #23]
 800c39c:	4618      	mov	r0, r3
 800c39e:	f000 f83b 	bl	800c418 <USBD_Get_USB_Status>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c3a6:	7dbb      	ldrb	r3, [r7, #22]
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3718      	adds	r7, #24
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b082      	sub	sp, #8
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	460b      	mov	r3, r1
 800c3ba:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c3c2:	78fa      	ldrb	r2, [r7, #3]
 800c3c4:	4611      	mov	r1, r2
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7f9 f9eb 	bl	80057a2 <HAL_PCD_EP_GetRxCount>
 800c3cc:	4603      	mov	r3, r0
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3708      	adds	r7, #8
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}
	...

0800c3d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b083      	sub	sp, #12
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c3e0:	4b02      	ldr	r3, [pc, #8]	; (800c3ec <USBD_static_malloc+0x14>)
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	370c      	adds	r7, #12
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bc80      	pop	{r7}
 800c3ea:	4770      	bx	lr
 800c3ec:	2000060c 	.word	0x2000060c

0800c3f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b083      	sub	sp, #12
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]

}
 800c3f8:	bf00      	nop
 800c3fa:	370c      	adds	r7, #12
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bc80      	pop	{r7}
 800c400:	4770      	bx	lr

0800c402 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c402:	b480      	push	{r7}
 800c404:	b083      	sub	sp, #12
 800c406:	af00      	add	r7, sp, #0
 800c408:	6078      	str	r0, [r7, #4]
 800c40a:	460b      	mov	r3, r1
 800c40c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c40e:	bf00      	nop
 800c410:	370c      	adds	r7, #12
 800c412:	46bd      	mov	sp, r7
 800c414:	bc80      	pop	{r7}
 800c416:	4770      	bx	lr

0800c418 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c418:	b480      	push	{r7}
 800c41a:	b085      	sub	sp, #20
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	4603      	mov	r3, r0
 800c420:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c422:	2300      	movs	r3, #0
 800c424:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c426:	79fb      	ldrb	r3, [r7, #7]
 800c428:	2b03      	cmp	r3, #3
 800c42a:	d817      	bhi.n	800c45c <USBD_Get_USB_Status+0x44>
 800c42c:	a201      	add	r2, pc, #4	; (adr r2, 800c434 <USBD_Get_USB_Status+0x1c>)
 800c42e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c432:	bf00      	nop
 800c434:	0800c445 	.word	0x0800c445
 800c438:	0800c44b 	.word	0x0800c44b
 800c43c:	0800c451 	.word	0x0800c451
 800c440:	0800c457 	.word	0x0800c457
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c444:	2300      	movs	r3, #0
 800c446:	73fb      	strb	r3, [r7, #15]
    break;
 800c448:	e00b      	b.n	800c462 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c44a:	2302      	movs	r3, #2
 800c44c:	73fb      	strb	r3, [r7, #15]
    break;
 800c44e:	e008      	b.n	800c462 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c450:	2301      	movs	r3, #1
 800c452:	73fb      	strb	r3, [r7, #15]
    break;
 800c454:	e005      	b.n	800c462 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c456:	2302      	movs	r3, #2
 800c458:	73fb      	strb	r3, [r7, #15]
    break;
 800c45a:	e002      	b.n	800c462 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c45c:	2302      	movs	r3, #2
 800c45e:	73fb      	strb	r3, [r7, #15]
    break;
 800c460:	bf00      	nop
  }
  return usb_status;
 800c462:	7bfb      	ldrb	r3, [r7, #15]
}
 800c464:	4618      	mov	r0, r3
 800c466:	3714      	adds	r7, #20
 800c468:	46bd      	mov	sp, r7
 800c46a:	bc80      	pop	{r7}
 800c46c:	4770      	bx	lr
 800c46e:	bf00      	nop

0800c470 <cos>:
 800c470:	b530      	push	{r4, r5, lr}
 800c472:	4a1e      	ldr	r2, [pc, #120]	; (800c4ec <cos+0x7c>)
 800c474:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c478:	4293      	cmp	r3, r2
 800c47a:	b087      	sub	sp, #28
 800c47c:	dc04      	bgt.n	800c488 <cos+0x18>
 800c47e:	2200      	movs	r2, #0
 800c480:	2300      	movs	r3, #0
 800c482:	f000 fa6d 	bl	800c960 <__kernel_cos>
 800c486:	e006      	b.n	800c496 <cos+0x26>
 800c488:	4a19      	ldr	r2, [pc, #100]	; (800c4f0 <cos+0x80>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	dd05      	ble.n	800c49a <cos+0x2a>
 800c48e:	4602      	mov	r2, r0
 800c490:	460b      	mov	r3, r1
 800c492:	f7f3 fe69 	bl	8000168 <__aeabi_dsub>
 800c496:	b007      	add	sp, #28
 800c498:	bd30      	pop	{r4, r5, pc}
 800c49a:	aa02      	add	r2, sp, #8
 800c49c:	f000 f870 	bl	800c580 <__ieee754_rem_pio2>
 800c4a0:	f000 0003 	and.w	r0, r0, #3
 800c4a4:	2801      	cmp	r0, #1
 800c4a6:	d007      	beq.n	800c4b8 <cos+0x48>
 800c4a8:	2802      	cmp	r0, #2
 800c4aa:	d00f      	beq.n	800c4cc <cos+0x5c>
 800c4ac:	b9a8      	cbnz	r0, 800c4da <cos+0x6a>
 800c4ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4b6:	e7e4      	b.n	800c482 <cos+0x12>
 800c4b8:	9000      	str	r0, [sp, #0]
 800c4ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4c2:	f000 fe55 	bl	800d170 <__kernel_sin>
 800c4c6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c4ca:	e7e4      	b.n	800c496 <cos+0x26>
 800c4cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4d4:	f000 fa44 	bl	800c960 <__kernel_cos>
 800c4d8:	e7f5      	b.n	800c4c6 <cos+0x56>
 800c4da:	2301      	movs	r3, #1
 800c4dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4e0:	9300      	str	r3, [sp, #0]
 800c4e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4e6:	f000 fe43 	bl	800d170 <__kernel_sin>
 800c4ea:	e7d4      	b.n	800c496 <cos+0x26>
 800c4ec:	3fe921fb 	.word	0x3fe921fb
 800c4f0:	7fefffff 	.word	0x7fefffff

0800c4f4 <sin>:
 800c4f4:	b530      	push	{r4, r5, lr}
 800c4f6:	4a20      	ldr	r2, [pc, #128]	; (800c578 <sin+0x84>)
 800c4f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	b087      	sub	sp, #28
 800c500:	dc06      	bgt.n	800c510 <sin+0x1c>
 800c502:	2300      	movs	r3, #0
 800c504:	2200      	movs	r2, #0
 800c506:	9300      	str	r3, [sp, #0]
 800c508:	2300      	movs	r3, #0
 800c50a:	f000 fe31 	bl	800d170 <__kernel_sin>
 800c50e:	e006      	b.n	800c51e <sin+0x2a>
 800c510:	4a1a      	ldr	r2, [pc, #104]	; (800c57c <sin+0x88>)
 800c512:	4293      	cmp	r3, r2
 800c514:	dd05      	ble.n	800c522 <sin+0x2e>
 800c516:	4602      	mov	r2, r0
 800c518:	460b      	mov	r3, r1
 800c51a:	f7f3 fe25 	bl	8000168 <__aeabi_dsub>
 800c51e:	b007      	add	sp, #28
 800c520:	bd30      	pop	{r4, r5, pc}
 800c522:	aa02      	add	r2, sp, #8
 800c524:	f000 f82c 	bl	800c580 <__ieee754_rem_pio2>
 800c528:	f000 0003 	and.w	r0, r0, #3
 800c52c:	2801      	cmp	r0, #1
 800c52e:	d009      	beq.n	800c544 <sin+0x50>
 800c530:	2802      	cmp	r0, #2
 800c532:	d00e      	beq.n	800c552 <sin+0x5e>
 800c534:	b9c0      	cbnz	r0, 800c568 <sin+0x74>
 800c536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c53a:	2301      	movs	r3, #1
 800c53c:	9300      	str	r3, [sp, #0]
 800c53e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c542:	e7e2      	b.n	800c50a <sin+0x16>
 800c544:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c548:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c54c:	f000 fa08 	bl	800c960 <__kernel_cos>
 800c550:	e7e5      	b.n	800c51e <sin+0x2a>
 800c552:	2301      	movs	r3, #1
 800c554:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c558:	9300      	str	r3, [sp, #0]
 800c55a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c55e:	f000 fe07 	bl	800d170 <__kernel_sin>
 800c562:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c566:	e7da      	b.n	800c51e <sin+0x2a>
 800c568:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c56c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c570:	f000 f9f6 	bl	800c960 <__kernel_cos>
 800c574:	e7f5      	b.n	800c562 <sin+0x6e>
 800c576:	bf00      	nop
 800c578:	3fe921fb 	.word	0x3fe921fb
 800c57c:	7fefffff 	.word	0x7fefffff

0800c580 <__ieee754_rem_pio2>:
 800c580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c584:	4614      	mov	r4, r2
 800c586:	4ac4      	ldr	r2, [pc, #784]	; (800c898 <__ieee754_rem_pio2+0x318>)
 800c588:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800c58c:	b08d      	sub	sp, #52	; 0x34
 800c58e:	4592      	cmp	sl, r2
 800c590:	9104      	str	r1, [sp, #16]
 800c592:	dc07      	bgt.n	800c5a4 <__ieee754_rem_pio2+0x24>
 800c594:	2200      	movs	r2, #0
 800c596:	2300      	movs	r3, #0
 800c598:	e9c4 0100 	strd	r0, r1, [r4]
 800c59c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c5a0:	2500      	movs	r5, #0
 800c5a2:	e024      	b.n	800c5ee <__ieee754_rem_pio2+0x6e>
 800c5a4:	4abd      	ldr	r2, [pc, #756]	; (800c89c <__ieee754_rem_pio2+0x31c>)
 800c5a6:	4592      	cmp	sl, r2
 800c5a8:	dc72      	bgt.n	800c690 <__ieee754_rem_pio2+0x110>
 800c5aa:	9b04      	ldr	r3, [sp, #16]
 800c5ac:	4dbc      	ldr	r5, [pc, #752]	; (800c8a0 <__ieee754_rem_pio2+0x320>)
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	a3ab      	add	r3, pc, #684	; (adr r3, 800c860 <__ieee754_rem_pio2+0x2e0>)
 800c5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b6:	dd36      	ble.n	800c626 <__ieee754_rem_pio2+0xa6>
 800c5b8:	f7f3 fdd6 	bl	8000168 <__aeabi_dsub>
 800c5bc:	45aa      	cmp	sl, r5
 800c5be:	4606      	mov	r6, r0
 800c5c0:	460f      	mov	r7, r1
 800c5c2:	d018      	beq.n	800c5f6 <__ieee754_rem_pio2+0x76>
 800c5c4:	a3a8      	add	r3, pc, #672	; (adr r3, 800c868 <__ieee754_rem_pio2+0x2e8>)
 800c5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ca:	f7f3 fdcd 	bl	8000168 <__aeabi_dsub>
 800c5ce:	4602      	mov	r2, r0
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	4630      	mov	r0, r6
 800c5d4:	e9c4 2300 	strd	r2, r3, [r4]
 800c5d8:	4639      	mov	r1, r7
 800c5da:	f7f3 fdc5 	bl	8000168 <__aeabi_dsub>
 800c5de:	a3a2      	add	r3, pc, #648	; (adr r3, 800c868 <__ieee754_rem_pio2+0x2e8>)
 800c5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e4:	f7f3 fdc0 	bl	8000168 <__aeabi_dsub>
 800c5e8:	2501      	movs	r5, #1
 800c5ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c5ee:	4628      	mov	r0, r5
 800c5f0:	b00d      	add	sp, #52	; 0x34
 800c5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5f6:	a39e      	add	r3, pc, #632	; (adr r3, 800c870 <__ieee754_rem_pio2+0x2f0>)
 800c5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5fc:	f7f3 fdb4 	bl	8000168 <__aeabi_dsub>
 800c600:	a39d      	add	r3, pc, #628	; (adr r3, 800c878 <__ieee754_rem_pio2+0x2f8>)
 800c602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c606:	4606      	mov	r6, r0
 800c608:	460f      	mov	r7, r1
 800c60a:	f7f3 fdad 	bl	8000168 <__aeabi_dsub>
 800c60e:	4602      	mov	r2, r0
 800c610:	460b      	mov	r3, r1
 800c612:	4630      	mov	r0, r6
 800c614:	e9c4 2300 	strd	r2, r3, [r4]
 800c618:	4639      	mov	r1, r7
 800c61a:	f7f3 fda5 	bl	8000168 <__aeabi_dsub>
 800c61e:	a396      	add	r3, pc, #600	; (adr r3, 800c878 <__ieee754_rem_pio2+0x2f8>)
 800c620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c624:	e7de      	b.n	800c5e4 <__ieee754_rem_pio2+0x64>
 800c626:	f7f3 fda1 	bl	800016c <__adddf3>
 800c62a:	45aa      	cmp	sl, r5
 800c62c:	4606      	mov	r6, r0
 800c62e:	460f      	mov	r7, r1
 800c630:	d016      	beq.n	800c660 <__ieee754_rem_pio2+0xe0>
 800c632:	a38d      	add	r3, pc, #564	; (adr r3, 800c868 <__ieee754_rem_pio2+0x2e8>)
 800c634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c638:	f7f3 fd98 	bl	800016c <__adddf3>
 800c63c:	4602      	mov	r2, r0
 800c63e:	460b      	mov	r3, r1
 800c640:	4630      	mov	r0, r6
 800c642:	e9c4 2300 	strd	r2, r3, [r4]
 800c646:	4639      	mov	r1, r7
 800c648:	f7f3 fd8e 	bl	8000168 <__aeabi_dsub>
 800c64c:	a386      	add	r3, pc, #536	; (adr r3, 800c868 <__ieee754_rem_pio2+0x2e8>)
 800c64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c652:	f7f3 fd8b 	bl	800016c <__adddf3>
 800c656:	f04f 35ff 	mov.w	r5, #4294967295
 800c65a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c65e:	e7c6      	b.n	800c5ee <__ieee754_rem_pio2+0x6e>
 800c660:	a383      	add	r3, pc, #524	; (adr r3, 800c870 <__ieee754_rem_pio2+0x2f0>)
 800c662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c666:	f7f3 fd81 	bl	800016c <__adddf3>
 800c66a:	a383      	add	r3, pc, #524	; (adr r3, 800c878 <__ieee754_rem_pio2+0x2f8>)
 800c66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c670:	4606      	mov	r6, r0
 800c672:	460f      	mov	r7, r1
 800c674:	f7f3 fd7a 	bl	800016c <__adddf3>
 800c678:	4602      	mov	r2, r0
 800c67a:	460b      	mov	r3, r1
 800c67c:	4630      	mov	r0, r6
 800c67e:	e9c4 2300 	strd	r2, r3, [r4]
 800c682:	4639      	mov	r1, r7
 800c684:	f7f3 fd70 	bl	8000168 <__aeabi_dsub>
 800c688:	a37b      	add	r3, pc, #492	; (adr r3, 800c878 <__ieee754_rem_pio2+0x2f8>)
 800c68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c68e:	e7e0      	b.n	800c652 <__ieee754_rem_pio2+0xd2>
 800c690:	4a84      	ldr	r2, [pc, #528]	; (800c8a4 <__ieee754_rem_pio2+0x324>)
 800c692:	4592      	cmp	sl, r2
 800c694:	f300 80d5 	bgt.w	800c842 <__ieee754_rem_pio2+0x2c2>
 800c698:	f000 fe20 	bl	800d2dc <fabs>
 800c69c:	a378      	add	r3, pc, #480	; (adr r3, 800c880 <__ieee754_rem_pio2+0x300>)
 800c69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a2:	4606      	mov	r6, r0
 800c6a4:	460f      	mov	r7, r1
 800c6a6:	f7f3 ff17 	bl	80004d8 <__aeabi_dmul>
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	4b7e      	ldr	r3, [pc, #504]	; (800c8a8 <__ieee754_rem_pio2+0x328>)
 800c6ae:	f7f3 fd5d 	bl	800016c <__adddf3>
 800c6b2:	f7f4 f9ab 	bl	8000a0c <__aeabi_d2iz>
 800c6b6:	4605      	mov	r5, r0
 800c6b8:	f7f3 fea4 	bl	8000404 <__aeabi_i2d>
 800c6bc:	4602      	mov	r2, r0
 800c6be:	460b      	mov	r3, r1
 800c6c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c6c4:	a366      	add	r3, pc, #408	; (adr r3, 800c860 <__ieee754_rem_pio2+0x2e0>)
 800c6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ca:	f7f3 ff05 	bl	80004d8 <__aeabi_dmul>
 800c6ce:	4602      	mov	r2, r0
 800c6d0:	460b      	mov	r3, r1
 800c6d2:	4630      	mov	r0, r6
 800c6d4:	4639      	mov	r1, r7
 800c6d6:	f7f3 fd47 	bl	8000168 <__aeabi_dsub>
 800c6da:	a363      	add	r3, pc, #396	; (adr r3, 800c868 <__ieee754_rem_pio2+0x2e8>)
 800c6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e0:	4680      	mov	r8, r0
 800c6e2:	4689      	mov	r9, r1
 800c6e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6e8:	f7f3 fef6 	bl	80004d8 <__aeabi_dmul>
 800c6ec:	2d1f      	cmp	r5, #31
 800c6ee:	4606      	mov	r6, r0
 800c6f0:	460f      	mov	r7, r1
 800c6f2:	dc0e      	bgt.n	800c712 <__ieee754_rem_pio2+0x192>
 800c6f4:	4b6d      	ldr	r3, [pc, #436]	; (800c8ac <__ieee754_rem_pio2+0x32c>)
 800c6f6:	1e6a      	subs	r2, r5, #1
 800c6f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6fc:	4553      	cmp	r3, sl
 800c6fe:	d008      	beq.n	800c712 <__ieee754_rem_pio2+0x192>
 800c700:	4632      	mov	r2, r6
 800c702:	463b      	mov	r3, r7
 800c704:	4640      	mov	r0, r8
 800c706:	4649      	mov	r1, r9
 800c708:	f7f3 fd2e 	bl	8000168 <__aeabi_dsub>
 800c70c:	e9c4 0100 	strd	r0, r1, [r4]
 800c710:	e013      	b.n	800c73a <__ieee754_rem_pio2+0x1ba>
 800c712:	463b      	mov	r3, r7
 800c714:	4632      	mov	r2, r6
 800c716:	4640      	mov	r0, r8
 800c718:	4649      	mov	r1, r9
 800c71a:	f7f3 fd25 	bl	8000168 <__aeabi_dsub>
 800c71e:	ea4f 532a 	mov.w	r3, sl, asr #20
 800c722:	9305      	str	r3, [sp, #20]
 800c724:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c728:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800c72c:	f1ba 0f10 	cmp.w	sl, #16
 800c730:	dc1f      	bgt.n	800c772 <__ieee754_rem_pio2+0x1f2>
 800c732:	4602      	mov	r2, r0
 800c734:	460b      	mov	r3, r1
 800c736:	e9c4 2300 	strd	r2, r3, [r4]
 800c73a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800c73e:	4640      	mov	r0, r8
 800c740:	4653      	mov	r3, sl
 800c742:	4649      	mov	r1, r9
 800c744:	f7f3 fd10 	bl	8000168 <__aeabi_dsub>
 800c748:	4632      	mov	r2, r6
 800c74a:	463b      	mov	r3, r7
 800c74c:	f7f3 fd0c 	bl	8000168 <__aeabi_dsub>
 800c750:	460b      	mov	r3, r1
 800c752:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c756:	9904      	ldr	r1, [sp, #16]
 800c758:	4602      	mov	r2, r0
 800c75a:	2900      	cmp	r1, #0
 800c75c:	f6bf af47 	bge.w	800c5ee <__ieee754_rem_pio2+0x6e>
 800c760:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800c764:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800c768:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c76c:	60e3      	str	r3, [r4, #12]
 800c76e:	426d      	negs	r5, r5
 800c770:	e73d      	b.n	800c5ee <__ieee754_rem_pio2+0x6e>
 800c772:	a33f      	add	r3, pc, #252	; (adr r3, 800c870 <__ieee754_rem_pio2+0x2f0>)
 800c774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c778:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c77c:	f7f3 feac 	bl	80004d8 <__aeabi_dmul>
 800c780:	4606      	mov	r6, r0
 800c782:	460f      	mov	r7, r1
 800c784:	4602      	mov	r2, r0
 800c786:	460b      	mov	r3, r1
 800c788:	4640      	mov	r0, r8
 800c78a:	4649      	mov	r1, r9
 800c78c:	f7f3 fcec 	bl	8000168 <__aeabi_dsub>
 800c790:	4602      	mov	r2, r0
 800c792:	460b      	mov	r3, r1
 800c794:	4682      	mov	sl, r0
 800c796:	468b      	mov	fp, r1
 800c798:	4640      	mov	r0, r8
 800c79a:	4649      	mov	r1, r9
 800c79c:	f7f3 fce4 	bl	8000168 <__aeabi_dsub>
 800c7a0:	4632      	mov	r2, r6
 800c7a2:	463b      	mov	r3, r7
 800c7a4:	f7f3 fce0 	bl	8000168 <__aeabi_dsub>
 800c7a8:	a333      	add	r3, pc, #204	; (adr r3, 800c878 <__ieee754_rem_pio2+0x2f8>)
 800c7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ae:	4606      	mov	r6, r0
 800c7b0:	460f      	mov	r7, r1
 800c7b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7b6:	f7f3 fe8f 	bl	80004d8 <__aeabi_dmul>
 800c7ba:	4632      	mov	r2, r6
 800c7bc:	463b      	mov	r3, r7
 800c7be:	f7f3 fcd3 	bl	8000168 <__aeabi_dsub>
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	4606      	mov	r6, r0
 800c7c8:	460f      	mov	r7, r1
 800c7ca:	4650      	mov	r0, sl
 800c7cc:	4659      	mov	r1, fp
 800c7ce:	f7f3 fccb 	bl	8000168 <__aeabi_dsub>
 800c7d2:	9a05      	ldr	r2, [sp, #20]
 800c7d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c7d8:	1ad3      	subs	r3, r2, r3
 800c7da:	2b31      	cmp	r3, #49	; 0x31
 800c7dc:	dc06      	bgt.n	800c7ec <__ieee754_rem_pio2+0x26c>
 800c7de:	4602      	mov	r2, r0
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	46d0      	mov	r8, sl
 800c7e4:	46d9      	mov	r9, fp
 800c7e6:	e9c4 2300 	strd	r2, r3, [r4]
 800c7ea:	e7a6      	b.n	800c73a <__ieee754_rem_pio2+0x1ba>
 800c7ec:	a326      	add	r3, pc, #152	; (adr r3, 800c888 <__ieee754_rem_pio2+0x308>)
 800c7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7f6:	f7f3 fe6f 	bl	80004d8 <__aeabi_dmul>
 800c7fa:	4606      	mov	r6, r0
 800c7fc:	460f      	mov	r7, r1
 800c7fe:	4602      	mov	r2, r0
 800c800:	460b      	mov	r3, r1
 800c802:	4650      	mov	r0, sl
 800c804:	4659      	mov	r1, fp
 800c806:	f7f3 fcaf 	bl	8000168 <__aeabi_dsub>
 800c80a:	4602      	mov	r2, r0
 800c80c:	460b      	mov	r3, r1
 800c80e:	4680      	mov	r8, r0
 800c810:	4689      	mov	r9, r1
 800c812:	4650      	mov	r0, sl
 800c814:	4659      	mov	r1, fp
 800c816:	f7f3 fca7 	bl	8000168 <__aeabi_dsub>
 800c81a:	4632      	mov	r2, r6
 800c81c:	463b      	mov	r3, r7
 800c81e:	f7f3 fca3 	bl	8000168 <__aeabi_dsub>
 800c822:	a31b      	add	r3, pc, #108	; (adr r3, 800c890 <__ieee754_rem_pio2+0x310>)
 800c824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c828:	4606      	mov	r6, r0
 800c82a:	460f      	mov	r7, r1
 800c82c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c830:	f7f3 fe52 	bl	80004d8 <__aeabi_dmul>
 800c834:	4632      	mov	r2, r6
 800c836:	463b      	mov	r3, r7
 800c838:	f7f3 fc96 	bl	8000168 <__aeabi_dsub>
 800c83c:	4606      	mov	r6, r0
 800c83e:	460f      	mov	r7, r1
 800c840:	e75e      	b.n	800c700 <__ieee754_rem_pio2+0x180>
 800c842:	4a1b      	ldr	r2, [pc, #108]	; (800c8b0 <__ieee754_rem_pio2+0x330>)
 800c844:	4592      	cmp	sl, r2
 800c846:	dd35      	ble.n	800c8b4 <__ieee754_rem_pio2+0x334>
 800c848:	4602      	mov	r2, r0
 800c84a:	460b      	mov	r3, r1
 800c84c:	f7f3 fc8c 	bl	8000168 <__aeabi_dsub>
 800c850:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c854:	e9c4 0100 	strd	r0, r1, [r4]
 800c858:	e6a2      	b.n	800c5a0 <__ieee754_rem_pio2+0x20>
 800c85a:	bf00      	nop
 800c85c:	f3af 8000 	nop.w
 800c860:	54400000 	.word	0x54400000
 800c864:	3ff921fb 	.word	0x3ff921fb
 800c868:	1a626331 	.word	0x1a626331
 800c86c:	3dd0b461 	.word	0x3dd0b461
 800c870:	1a600000 	.word	0x1a600000
 800c874:	3dd0b461 	.word	0x3dd0b461
 800c878:	2e037073 	.word	0x2e037073
 800c87c:	3ba3198a 	.word	0x3ba3198a
 800c880:	6dc9c883 	.word	0x6dc9c883
 800c884:	3fe45f30 	.word	0x3fe45f30
 800c888:	2e000000 	.word	0x2e000000
 800c88c:	3ba3198a 	.word	0x3ba3198a
 800c890:	252049c1 	.word	0x252049c1
 800c894:	397b839a 	.word	0x397b839a
 800c898:	3fe921fb 	.word	0x3fe921fb
 800c89c:	4002d97b 	.word	0x4002d97b
 800c8a0:	3ff921fb 	.word	0x3ff921fb
 800c8a4:	413921fb 	.word	0x413921fb
 800c8a8:	3fe00000 	.word	0x3fe00000
 800c8ac:	0800eb14 	.word	0x0800eb14
 800c8b0:	7fefffff 	.word	0x7fefffff
 800c8b4:	ea4f 552a 	mov.w	r5, sl, asr #20
 800c8b8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800c8bc:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800c8c0:	460f      	mov	r7, r1
 800c8c2:	4606      	mov	r6, r0
 800c8c4:	f7f4 f8a2 	bl	8000a0c <__aeabi_d2iz>
 800c8c8:	f7f3 fd9c 	bl	8000404 <__aeabi_i2d>
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	460b      	mov	r3, r1
 800c8d0:	4630      	mov	r0, r6
 800c8d2:	4639      	mov	r1, r7
 800c8d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c8d8:	f7f3 fc46 	bl	8000168 <__aeabi_dsub>
 800c8dc:	2200      	movs	r2, #0
 800c8de:	4b1e      	ldr	r3, [pc, #120]	; (800c958 <__ieee754_rem_pio2+0x3d8>)
 800c8e0:	f7f3 fdfa 	bl	80004d8 <__aeabi_dmul>
 800c8e4:	460f      	mov	r7, r1
 800c8e6:	4606      	mov	r6, r0
 800c8e8:	f7f4 f890 	bl	8000a0c <__aeabi_d2iz>
 800c8ec:	f7f3 fd8a 	bl	8000404 <__aeabi_i2d>
 800c8f0:	4602      	mov	r2, r0
 800c8f2:	460b      	mov	r3, r1
 800c8f4:	4630      	mov	r0, r6
 800c8f6:	4639      	mov	r1, r7
 800c8f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c8fc:	f7f3 fc34 	bl	8000168 <__aeabi_dsub>
 800c900:	2200      	movs	r2, #0
 800c902:	4b15      	ldr	r3, [pc, #84]	; (800c958 <__ieee754_rem_pio2+0x3d8>)
 800c904:	f7f3 fde8 	bl	80004d8 <__aeabi_dmul>
 800c908:	f04f 0803 	mov.w	r8, #3
 800c90c:	2600      	movs	r6, #0
 800c90e:	2700      	movs	r7, #0
 800c910:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c914:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800c918:	4632      	mov	r2, r6
 800c91a:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800c91e:	463b      	mov	r3, r7
 800c920:	46c2      	mov	sl, r8
 800c922:	f108 38ff 	add.w	r8, r8, #4294967295
 800c926:	f7f4 f83f 	bl	80009a8 <__aeabi_dcmpeq>
 800c92a:	2800      	cmp	r0, #0
 800c92c:	d1f4      	bne.n	800c918 <__ieee754_rem_pio2+0x398>
 800c92e:	4b0b      	ldr	r3, [pc, #44]	; (800c95c <__ieee754_rem_pio2+0x3dc>)
 800c930:	462a      	mov	r2, r5
 800c932:	9301      	str	r3, [sp, #4]
 800c934:	2302      	movs	r3, #2
 800c936:	4621      	mov	r1, r4
 800c938:	9300      	str	r3, [sp, #0]
 800c93a:	a806      	add	r0, sp, #24
 800c93c:	4653      	mov	r3, sl
 800c93e:	f000 f8cd 	bl	800cadc <__kernel_rem_pio2>
 800c942:	9b04      	ldr	r3, [sp, #16]
 800c944:	4605      	mov	r5, r0
 800c946:	2b00      	cmp	r3, #0
 800c948:	f6bf ae51 	bge.w	800c5ee <__ieee754_rem_pio2+0x6e>
 800c94c:	6863      	ldr	r3, [r4, #4]
 800c94e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c952:	6063      	str	r3, [r4, #4]
 800c954:	68e3      	ldr	r3, [r4, #12]
 800c956:	e707      	b.n	800c768 <__ieee754_rem_pio2+0x1e8>
 800c958:	41700000 	.word	0x41700000
 800c95c:	0800eb94 	.word	0x0800eb94

0800c960 <__kernel_cos>:
 800c960:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c964:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c968:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800c96c:	4680      	mov	r8, r0
 800c96e:	460f      	mov	r7, r1
 800c970:	e9cd 2300 	strd	r2, r3, [sp]
 800c974:	da04      	bge.n	800c980 <__kernel_cos+0x20>
 800c976:	f7f4 f849 	bl	8000a0c <__aeabi_d2iz>
 800c97a:	2800      	cmp	r0, #0
 800c97c:	f000 8086 	beq.w	800ca8c <__kernel_cos+0x12c>
 800c980:	4642      	mov	r2, r8
 800c982:	463b      	mov	r3, r7
 800c984:	4640      	mov	r0, r8
 800c986:	4639      	mov	r1, r7
 800c988:	f7f3 fda6 	bl	80004d8 <__aeabi_dmul>
 800c98c:	2200      	movs	r2, #0
 800c98e:	4b4e      	ldr	r3, [pc, #312]	; (800cac8 <__kernel_cos+0x168>)
 800c990:	4604      	mov	r4, r0
 800c992:	460d      	mov	r5, r1
 800c994:	f7f3 fda0 	bl	80004d8 <__aeabi_dmul>
 800c998:	a33f      	add	r3, pc, #252	; (adr r3, 800ca98 <__kernel_cos+0x138>)
 800c99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99e:	4682      	mov	sl, r0
 800c9a0:	468b      	mov	fp, r1
 800c9a2:	4620      	mov	r0, r4
 800c9a4:	4629      	mov	r1, r5
 800c9a6:	f7f3 fd97 	bl	80004d8 <__aeabi_dmul>
 800c9aa:	a33d      	add	r3, pc, #244	; (adr r3, 800caa0 <__kernel_cos+0x140>)
 800c9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b0:	f7f3 fbdc 	bl	800016c <__adddf3>
 800c9b4:	4622      	mov	r2, r4
 800c9b6:	462b      	mov	r3, r5
 800c9b8:	f7f3 fd8e 	bl	80004d8 <__aeabi_dmul>
 800c9bc:	a33a      	add	r3, pc, #232	; (adr r3, 800caa8 <__kernel_cos+0x148>)
 800c9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c2:	f7f3 fbd1 	bl	8000168 <__aeabi_dsub>
 800c9c6:	4622      	mov	r2, r4
 800c9c8:	462b      	mov	r3, r5
 800c9ca:	f7f3 fd85 	bl	80004d8 <__aeabi_dmul>
 800c9ce:	a338      	add	r3, pc, #224	; (adr r3, 800cab0 <__kernel_cos+0x150>)
 800c9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d4:	f7f3 fbca 	bl	800016c <__adddf3>
 800c9d8:	4622      	mov	r2, r4
 800c9da:	462b      	mov	r3, r5
 800c9dc:	f7f3 fd7c 	bl	80004d8 <__aeabi_dmul>
 800c9e0:	a335      	add	r3, pc, #212	; (adr r3, 800cab8 <__kernel_cos+0x158>)
 800c9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e6:	f7f3 fbbf 	bl	8000168 <__aeabi_dsub>
 800c9ea:	4622      	mov	r2, r4
 800c9ec:	462b      	mov	r3, r5
 800c9ee:	f7f3 fd73 	bl	80004d8 <__aeabi_dmul>
 800c9f2:	a333      	add	r3, pc, #204	; (adr r3, 800cac0 <__kernel_cos+0x160>)
 800c9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f8:	f7f3 fbb8 	bl	800016c <__adddf3>
 800c9fc:	4622      	mov	r2, r4
 800c9fe:	462b      	mov	r3, r5
 800ca00:	f7f3 fd6a 	bl	80004d8 <__aeabi_dmul>
 800ca04:	4622      	mov	r2, r4
 800ca06:	462b      	mov	r3, r5
 800ca08:	f7f3 fd66 	bl	80004d8 <__aeabi_dmul>
 800ca0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca10:	4604      	mov	r4, r0
 800ca12:	460d      	mov	r5, r1
 800ca14:	4640      	mov	r0, r8
 800ca16:	4639      	mov	r1, r7
 800ca18:	f7f3 fd5e 	bl	80004d8 <__aeabi_dmul>
 800ca1c:	460b      	mov	r3, r1
 800ca1e:	4602      	mov	r2, r0
 800ca20:	4629      	mov	r1, r5
 800ca22:	4620      	mov	r0, r4
 800ca24:	f7f3 fba0 	bl	8000168 <__aeabi_dsub>
 800ca28:	4b28      	ldr	r3, [pc, #160]	; (800cacc <__kernel_cos+0x16c>)
 800ca2a:	4680      	mov	r8, r0
 800ca2c:	429e      	cmp	r6, r3
 800ca2e:	4689      	mov	r9, r1
 800ca30:	dc0e      	bgt.n	800ca50 <__kernel_cos+0xf0>
 800ca32:	4602      	mov	r2, r0
 800ca34:	460b      	mov	r3, r1
 800ca36:	4650      	mov	r0, sl
 800ca38:	4659      	mov	r1, fp
 800ca3a:	f7f3 fb95 	bl	8000168 <__aeabi_dsub>
 800ca3e:	4602      	mov	r2, r0
 800ca40:	2000      	movs	r0, #0
 800ca42:	460b      	mov	r3, r1
 800ca44:	4922      	ldr	r1, [pc, #136]	; (800cad0 <__kernel_cos+0x170>)
 800ca46:	f7f3 fb8f 	bl	8000168 <__aeabi_dsub>
 800ca4a:	b003      	add	sp, #12
 800ca4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca50:	2400      	movs	r4, #0
 800ca52:	4b20      	ldr	r3, [pc, #128]	; (800cad4 <__kernel_cos+0x174>)
 800ca54:	4622      	mov	r2, r4
 800ca56:	429e      	cmp	r6, r3
 800ca58:	bfcc      	ite	gt
 800ca5a:	4d1f      	ldrgt	r5, [pc, #124]	; (800cad8 <__kernel_cos+0x178>)
 800ca5c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800ca60:	462b      	mov	r3, r5
 800ca62:	2000      	movs	r0, #0
 800ca64:	491a      	ldr	r1, [pc, #104]	; (800cad0 <__kernel_cos+0x170>)
 800ca66:	f7f3 fb7f 	bl	8000168 <__aeabi_dsub>
 800ca6a:	4622      	mov	r2, r4
 800ca6c:	4606      	mov	r6, r0
 800ca6e:	460f      	mov	r7, r1
 800ca70:	462b      	mov	r3, r5
 800ca72:	4650      	mov	r0, sl
 800ca74:	4659      	mov	r1, fp
 800ca76:	f7f3 fb77 	bl	8000168 <__aeabi_dsub>
 800ca7a:	4642      	mov	r2, r8
 800ca7c:	464b      	mov	r3, r9
 800ca7e:	f7f3 fb73 	bl	8000168 <__aeabi_dsub>
 800ca82:	4602      	mov	r2, r0
 800ca84:	460b      	mov	r3, r1
 800ca86:	4630      	mov	r0, r6
 800ca88:	4639      	mov	r1, r7
 800ca8a:	e7dc      	b.n	800ca46 <__kernel_cos+0xe6>
 800ca8c:	2000      	movs	r0, #0
 800ca8e:	4910      	ldr	r1, [pc, #64]	; (800cad0 <__kernel_cos+0x170>)
 800ca90:	e7db      	b.n	800ca4a <__kernel_cos+0xea>
 800ca92:	bf00      	nop
 800ca94:	f3af 8000 	nop.w
 800ca98:	be8838d4 	.word	0xbe8838d4
 800ca9c:	bda8fae9 	.word	0xbda8fae9
 800caa0:	bdb4b1c4 	.word	0xbdb4b1c4
 800caa4:	3e21ee9e 	.word	0x3e21ee9e
 800caa8:	809c52ad 	.word	0x809c52ad
 800caac:	3e927e4f 	.word	0x3e927e4f
 800cab0:	19cb1590 	.word	0x19cb1590
 800cab4:	3efa01a0 	.word	0x3efa01a0
 800cab8:	16c15177 	.word	0x16c15177
 800cabc:	3f56c16c 	.word	0x3f56c16c
 800cac0:	5555554c 	.word	0x5555554c
 800cac4:	3fa55555 	.word	0x3fa55555
 800cac8:	3fe00000 	.word	0x3fe00000
 800cacc:	3fd33332 	.word	0x3fd33332
 800cad0:	3ff00000 	.word	0x3ff00000
 800cad4:	3fe90000 	.word	0x3fe90000
 800cad8:	3fd20000 	.word	0x3fd20000

0800cadc <__kernel_rem_pio2>:
 800cadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cae0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800cae4:	9308      	str	r3, [sp, #32]
 800cae6:	9101      	str	r1, [sp, #4]
 800cae8:	4bc0      	ldr	r3, [pc, #768]	; (800cdec <__kernel_rem_pio2+0x310>)
 800caea:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800caec:	f112 0f14 	cmn.w	r2, #20
 800caf0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800caf4:	bfa8      	it	ge
 800caf6:	1ed4      	subge	r4, r2, #3
 800caf8:	9304      	str	r3, [sp, #16]
 800cafa:	9b08      	ldr	r3, [sp, #32]
 800cafc:	bfb8      	it	lt
 800cafe:	2400      	movlt	r4, #0
 800cb00:	f103 33ff 	add.w	r3, r3, #4294967295
 800cb04:	9306      	str	r3, [sp, #24]
 800cb06:	bfa4      	itt	ge
 800cb08:	2318      	movge	r3, #24
 800cb0a:	fb94 f4f3 	sdivge	r4, r4, r3
 800cb0e:	f06f 0317 	mvn.w	r3, #23
 800cb12:	fb04 3303 	mla	r3, r4, r3, r3
 800cb16:	eb03 0a02 	add.w	sl, r3, r2
 800cb1a:	9a06      	ldr	r2, [sp, #24]
 800cb1c:	9b04      	ldr	r3, [sp, #16]
 800cb1e:	1aa7      	subs	r7, r4, r2
 800cb20:	eb03 0802 	add.w	r8, r3, r2
 800cb24:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800cb26:	2500      	movs	r5, #0
 800cb28:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	2300      	movs	r3, #0
 800cb30:	9009      	str	r0, [sp, #36]	; 0x24
 800cb32:	ae20      	add	r6, sp, #128	; 0x80
 800cb34:	4545      	cmp	r5, r8
 800cb36:	dd19      	ble.n	800cb6c <__kernel_rem_pio2+0x90>
 800cb38:	9b08      	ldr	r3, [sp, #32]
 800cb3a:	aa20      	add	r2, sp, #128	; 0x80
 800cb3c:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800cb40:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800cb44:	f1c3 0301 	rsb	r3, r3, #1
 800cb48:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800cb4c:	9307      	str	r3, [sp, #28]
 800cb4e:	9b07      	ldr	r3, [sp, #28]
 800cb50:	9a04      	ldr	r2, [sp, #16]
 800cb52:	4443      	add	r3, r8
 800cb54:	429a      	cmp	r2, r3
 800cb56:	db35      	blt.n	800cbc4 <__kernel_rem_pio2+0xe8>
 800cb58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	f1a3 0908 	sub.w	r9, r3, #8
 800cb60:	2300      	movs	r3, #0
 800cb62:	462f      	mov	r7, r5
 800cb64:	2600      	movs	r6, #0
 800cb66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cb6a:	e01f      	b.n	800cbac <__kernel_rem_pio2+0xd0>
 800cb6c:	42ef      	cmn	r7, r5
 800cb6e:	d40b      	bmi.n	800cb88 <__kernel_rem_pio2+0xac>
 800cb70:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800cb74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cb78:	f7f3 fc44 	bl	8000404 <__aeabi_i2d>
 800cb7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb80:	e8e6 0102 	strd	r0, r1, [r6], #8
 800cb84:	3501      	adds	r5, #1
 800cb86:	e7d5      	b.n	800cb34 <__kernel_rem_pio2+0x58>
 800cb88:	4610      	mov	r0, r2
 800cb8a:	4619      	mov	r1, r3
 800cb8c:	e7f8      	b.n	800cb80 <__kernel_rem_pio2+0xa4>
 800cb8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb92:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800cb96:	f7f3 fc9f 	bl	80004d8 <__aeabi_dmul>
 800cb9a:	4602      	mov	r2, r0
 800cb9c:	460b      	mov	r3, r1
 800cb9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cba2:	f7f3 fae3 	bl	800016c <__adddf3>
 800cba6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbaa:	3601      	adds	r6, #1
 800cbac:	9b06      	ldr	r3, [sp, #24]
 800cbae:	3f08      	subs	r7, #8
 800cbb0:	429e      	cmp	r6, r3
 800cbb2:	ddec      	ble.n	800cb8e <__kernel_rem_pio2+0xb2>
 800cbb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cbb8:	3508      	adds	r5, #8
 800cbba:	e8eb 2302 	strd	r2, r3, [fp], #8
 800cbbe:	f108 0801 	add.w	r8, r8, #1
 800cbc2:	e7c4      	b.n	800cb4e <__kernel_rem_pio2+0x72>
 800cbc4:	9b04      	ldr	r3, [sp, #16]
 800cbc6:	aa0c      	add	r2, sp, #48	; 0x30
 800cbc8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cbcc:	930b      	str	r3, [sp, #44]	; 0x2c
 800cbce:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800cbd0:	9f04      	ldr	r7, [sp, #16]
 800cbd2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cbd6:	930a      	str	r3, [sp, #40]	; 0x28
 800cbd8:	463e      	mov	r6, r7
 800cbda:	ab98      	add	r3, sp, #608	; 0x260
 800cbdc:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800cbe0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cbe4:	f8cd b008 	str.w	fp, [sp, #8]
 800cbe8:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800cbec:	2e00      	cmp	r6, #0
 800cbee:	dc71      	bgt.n	800ccd4 <__kernel_rem_pio2+0x1f8>
 800cbf0:	4652      	mov	r2, sl
 800cbf2:	4620      	mov	r0, r4
 800cbf4:	4629      	mov	r1, r5
 800cbf6:	f000 fbf7 	bl	800d3e8 <scalbn>
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800cc00:	4604      	mov	r4, r0
 800cc02:	460d      	mov	r5, r1
 800cc04:	f7f3 fc68 	bl	80004d8 <__aeabi_dmul>
 800cc08:	f000 fb6e 	bl	800d2e8 <floor>
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	4b78      	ldr	r3, [pc, #480]	; (800cdf0 <__kernel_rem_pio2+0x314>)
 800cc10:	f7f3 fc62 	bl	80004d8 <__aeabi_dmul>
 800cc14:	4602      	mov	r2, r0
 800cc16:	460b      	mov	r3, r1
 800cc18:	4620      	mov	r0, r4
 800cc1a:	4629      	mov	r1, r5
 800cc1c:	f7f3 faa4 	bl	8000168 <__aeabi_dsub>
 800cc20:	460d      	mov	r5, r1
 800cc22:	4604      	mov	r4, r0
 800cc24:	f7f3 fef2 	bl	8000a0c <__aeabi_d2iz>
 800cc28:	9007      	str	r0, [sp, #28]
 800cc2a:	f7f3 fbeb 	bl	8000404 <__aeabi_i2d>
 800cc2e:	4602      	mov	r2, r0
 800cc30:	460b      	mov	r3, r1
 800cc32:	4620      	mov	r0, r4
 800cc34:	4629      	mov	r1, r5
 800cc36:	f7f3 fa97 	bl	8000168 <__aeabi_dsub>
 800cc3a:	f1ba 0f00 	cmp.w	sl, #0
 800cc3e:	4680      	mov	r8, r0
 800cc40:	4689      	mov	r9, r1
 800cc42:	dd70      	ble.n	800cd26 <__kernel_rem_pio2+0x24a>
 800cc44:	1e7a      	subs	r2, r7, #1
 800cc46:	ab0c      	add	r3, sp, #48	; 0x30
 800cc48:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800cc4c:	9c07      	ldr	r4, [sp, #28]
 800cc4e:	f1ca 0118 	rsb	r1, sl, #24
 800cc52:	fa40 f301 	asr.w	r3, r0, r1
 800cc56:	441c      	add	r4, r3
 800cc58:	408b      	lsls	r3, r1
 800cc5a:	1ac0      	subs	r0, r0, r3
 800cc5c:	ab0c      	add	r3, sp, #48	; 0x30
 800cc5e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800cc62:	f1ca 0317 	rsb	r3, sl, #23
 800cc66:	9407      	str	r4, [sp, #28]
 800cc68:	fa40 f303 	asr.w	r3, r0, r3
 800cc6c:	9302      	str	r3, [sp, #8]
 800cc6e:	9b02      	ldr	r3, [sp, #8]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	dd66      	ble.n	800cd42 <__kernel_rem_pio2+0x266>
 800cc74:	2200      	movs	r2, #0
 800cc76:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800cc7a:	4614      	mov	r4, r2
 800cc7c:	9b07      	ldr	r3, [sp, #28]
 800cc7e:	3301      	adds	r3, #1
 800cc80:	9307      	str	r3, [sp, #28]
 800cc82:	4297      	cmp	r7, r2
 800cc84:	f300 809f 	bgt.w	800cdc6 <__kernel_rem_pio2+0x2ea>
 800cc88:	f1ba 0f00 	cmp.w	sl, #0
 800cc8c:	dd07      	ble.n	800cc9e <__kernel_rem_pio2+0x1c2>
 800cc8e:	f1ba 0f01 	cmp.w	sl, #1
 800cc92:	f000 80b9 	beq.w	800ce08 <__kernel_rem_pio2+0x32c>
 800cc96:	f1ba 0f02 	cmp.w	sl, #2
 800cc9a:	f000 80bf 	beq.w	800ce1c <__kernel_rem_pio2+0x340>
 800cc9e:	9b02      	ldr	r3, [sp, #8]
 800cca0:	2b02      	cmp	r3, #2
 800cca2:	d14e      	bne.n	800cd42 <__kernel_rem_pio2+0x266>
 800cca4:	4642      	mov	r2, r8
 800cca6:	464b      	mov	r3, r9
 800cca8:	2000      	movs	r0, #0
 800ccaa:	4952      	ldr	r1, [pc, #328]	; (800cdf4 <__kernel_rem_pio2+0x318>)
 800ccac:	f7f3 fa5c 	bl	8000168 <__aeabi_dsub>
 800ccb0:	4680      	mov	r8, r0
 800ccb2:	4689      	mov	r9, r1
 800ccb4:	2c00      	cmp	r4, #0
 800ccb6:	d044      	beq.n	800cd42 <__kernel_rem_pio2+0x266>
 800ccb8:	4652      	mov	r2, sl
 800ccba:	2000      	movs	r0, #0
 800ccbc:	494d      	ldr	r1, [pc, #308]	; (800cdf4 <__kernel_rem_pio2+0x318>)
 800ccbe:	f000 fb93 	bl	800d3e8 <scalbn>
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	460b      	mov	r3, r1
 800ccc6:	4640      	mov	r0, r8
 800ccc8:	4649      	mov	r1, r9
 800ccca:	f7f3 fa4d 	bl	8000168 <__aeabi_dsub>
 800ccce:	4680      	mov	r8, r0
 800ccd0:	4689      	mov	r9, r1
 800ccd2:	e036      	b.n	800cd42 <__kernel_rem_pio2+0x266>
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	4b48      	ldr	r3, [pc, #288]	; (800cdf8 <__kernel_rem_pio2+0x31c>)
 800ccd8:	4620      	mov	r0, r4
 800ccda:	4629      	mov	r1, r5
 800ccdc:	f7f3 fbfc 	bl	80004d8 <__aeabi_dmul>
 800cce0:	f7f3 fe94 	bl	8000a0c <__aeabi_d2iz>
 800cce4:	f7f3 fb8e 	bl	8000404 <__aeabi_i2d>
 800cce8:	2200      	movs	r2, #0
 800ccea:	4b44      	ldr	r3, [pc, #272]	; (800cdfc <__kernel_rem_pio2+0x320>)
 800ccec:	4680      	mov	r8, r0
 800ccee:	4689      	mov	r9, r1
 800ccf0:	f7f3 fbf2 	bl	80004d8 <__aeabi_dmul>
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	460b      	mov	r3, r1
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	4629      	mov	r1, r5
 800ccfc:	f7f3 fa34 	bl	8000168 <__aeabi_dsub>
 800cd00:	f7f3 fe84 	bl	8000a0c <__aeabi_d2iz>
 800cd04:	9b02      	ldr	r3, [sp, #8]
 800cd06:	3e01      	subs	r6, #1
 800cd08:	f843 0b04 	str.w	r0, [r3], #4
 800cd0c:	9302      	str	r3, [sp, #8]
 800cd0e:	ab70      	add	r3, sp, #448	; 0x1c0
 800cd10:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cd14:	4640      	mov	r0, r8
 800cd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd1a:	4649      	mov	r1, r9
 800cd1c:	f7f3 fa26 	bl	800016c <__adddf3>
 800cd20:	4604      	mov	r4, r0
 800cd22:	460d      	mov	r5, r1
 800cd24:	e762      	b.n	800cbec <__kernel_rem_pio2+0x110>
 800cd26:	d105      	bne.n	800cd34 <__kernel_rem_pio2+0x258>
 800cd28:	1e7b      	subs	r3, r7, #1
 800cd2a:	aa0c      	add	r2, sp, #48	; 0x30
 800cd2c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cd30:	15c3      	asrs	r3, r0, #23
 800cd32:	e79b      	b.n	800cc6c <__kernel_rem_pio2+0x190>
 800cd34:	2200      	movs	r2, #0
 800cd36:	4b32      	ldr	r3, [pc, #200]	; (800ce00 <__kernel_rem_pio2+0x324>)
 800cd38:	f7f3 fe54 	bl	80009e4 <__aeabi_dcmpge>
 800cd3c:	2800      	cmp	r0, #0
 800cd3e:	d13f      	bne.n	800cdc0 <__kernel_rem_pio2+0x2e4>
 800cd40:	9002      	str	r0, [sp, #8]
 800cd42:	2200      	movs	r2, #0
 800cd44:	2300      	movs	r3, #0
 800cd46:	4640      	mov	r0, r8
 800cd48:	4649      	mov	r1, r9
 800cd4a:	f7f3 fe2d 	bl	80009a8 <__aeabi_dcmpeq>
 800cd4e:	2800      	cmp	r0, #0
 800cd50:	f000 80b5 	beq.w	800cebe <__kernel_rem_pio2+0x3e2>
 800cd54:	1e7c      	subs	r4, r7, #1
 800cd56:	4623      	mov	r3, r4
 800cd58:	2200      	movs	r2, #0
 800cd5a:	9904      	ldr	r1, [sp, #16]
 800cd5c:	428b      	cmp	r3, r1
 800cd5e:	da64      	bge.n	800ce2a <__kernel_rem_pio2+0x34e>
 800cd60:	2a00      	cmp	r2, #0
 800cd62:	d078      	beq.n	800ce56 <__kernel_rem_pio2+0x37a>
 800cd64:	ab0c      	add	r3, sp, #48	; 0x30
 800cd66:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800cd6a:	f1aa 0a18 	sub.w	sl, sl, #24
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	f000 80a3 	beq.w	800ceba <__kernel_rem_pio2+0x3de>
 800cd74:	4652      	mov	r2, sl
 800cd76:	2000      	movs	r0, #0
 800cd78:	491e      	ldr	r1, [pc, #120]	; (800cdf4 <__kernel_rem_pio2+0x318>)
 800cd7a:	f000 fb35 	bl	800d3e8 <scalbn>
 800cd7e:	46a2      	mov	sl, r4
 800cd80:	4606      	mov	r6, r0
 800cd82:	460f      	mov	r7, r1
 800cd84:	f04f 0800 	mov.w	r8, #0
 800cd88:	00e3      	lsls	r3, r4, #3
 800cd8a:	9306      	str	r3, [sp, #24]
 800cd8c:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800cdf8 <__kernel_rem_pio2+0x31c>
 800cd90:	ab70      	add	r3, sp, #448	; 0x1c0
 800cd92:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800cd96:	f1ba 0f00 	cmp.w	sl, #0
 800cd9a:	f280 80c6 	bge.w	800cf2a <__kernel_rem_pio2+0x44e>
 800cd9e:	4627      	mov	r7, r4
 800cda0:	f04f 0800 	mov.w	r8, #0
 800cda4:	2f00      	cmp	r7, #0
 800cda6:	f2c0 80f3 	blt.w	800cf90 <__kernel_rem_pio2+0x4b4>
 800cdaa:	4b16      	ldr	r3, [pc, #88]	; (800ce04 <__kernel_rem_pio2+0x328>)
 800cdac:	f04f 0a00 	mov.w	sl, #0
 800cdb0:	461d      	mov	r5, r3
 800cdb2:	ab70      	add	r3, sp, #448	; 0x1c0
 800cdb4:	f04f 0b00 	mov.w	fp, #0
 800cdb8:	2600      	movs	r6, #0
 800cdba:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800cdbe:	e0d9      	b.n	800cf74 <__kernel_rem_pio2+0x498>
 800cdc0:	2302      	movs	r3, #2
 800cdc2:	9302      	str	r3, [sp, #8]
 800cdc4:	e756      	b.n	800cc74 <__kernel_rem_pio2+0x198>
 800cdc6:	f8db 3000 	ldr.w	r3, [fp]
 800cdca:	b954      	cbnz	r4, 800cde2 <__kernel_rem_pio2+0x306>
 800cdcc:	b123      	cbz	r3, 800cdd8 <__kernel_rem_pio2+0x2fc>
 800cdce:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800cdd2:	f8cb 3000 	str.w	r3, [fp]
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	461c      	mov	r4, r3
 800cdda:	3201      	adds	r2, #1
 800cddc:	f10b 0b04 	add.w	fp, fp, #4
 800cde0:	e74f      	b.n	800cc82 <__kernel_rem_pio2+0x1a6>
 800cde2:	1acb      	subs	r3, r1, r3
 800cde4:	f8cb 3000 	str.w	r3, [fp]
 800cde8:	4623      	mov	r3, r4
 800cdea:	e7f5      	b.n	800cdd8 <__kernel_rem_pio2+0x2fc>
 800cdec:	0800ece0 	.word	0x0800ece0
 800cdf0:	40200000 	.word	0x40200000
 800cdf4:	3ff00000 	.word	0x3ff00000
 800cdf8:	3e700000 	.word	0x3e700000
 800cdfc:	41700000 	.word	0x41700000
 800ce00:	3fe00000 	.word	0x3fe00000
 800ce04:	0800eca0 	.word	0x0800eca0
 800ce08:	1e7a      	subs	r2, r7, #1
 800ce0a:	ab0c      	add	r3, sp, #48	; 0x30
 800ce0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce10:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ce14:	a90c      	add	r1, sp, #48	; 0x30
 800ce16:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ce1a:	e740      	b.n	800cc9e <__kernel_rem_pio2+0x1c2>
 800ce1c:	1e7a      	subs	r2, r7, #1
 800ce1e:	ab0c      	add	r3, sp, #48	; 0x30
 800ce20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce24:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ce28:	e7f4      	b.n	800ce14 <__kernel_rem_pio2+0x338>
 800ce2a:	a90c      	add	r1, sp, #48	; 0x30
 800ce2c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ce30:	3b01      	subs	r3, #1
 800ce32:	430a      	orrs	r2, r1
 800ce34:	e791      	b.n	800cd5a <__kernel_rem_pio2+0x27e>
 800ce36:	3401      	adds	r4, #1
 800ce38:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ce3c:	2a00      	cmp	r2, #0
 800ce3e:	d0fa      	beq.n	800ce36 <__kernel_rem_pio2+0x35a>
 800ce40:	9b08      	ldr	r3, [sp, #32]
 800ce42:	1c7e      	adds	r6, r7, #1
 800ce44:	18fd      	adds	r5, r7, r3
 800ce46:	ab20      	add	r3, sp, #128	; 0x80
 800ce48:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ce4c:	443c      	add	r4, r7
 800ce4e:	42b4      	cmp	r4, r6
 800ce50:	da04      	bge.n	800ce5c <__kernel_rem_pio2+0x380>
 800ce52:	4627      	mov	r7, r4
 800ce54:	e6c0      	b.n	800cbd8 <__kernel_rem_pio2+0xfc>
 800ce56:	2401      	movs	r4, #1
 800ce58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce5a:	e7ed      	b.n	800ce38 <__kernel_rem_pio2+0x35c>
 800ce5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce5e:	462f      	mov	r7, r5
 800ce60:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ce64:	f7f3 face 	bl	8000404 <__aeabi_i2d>
 800ce68:	f04f 0b00 	mov.w	fp, #0
 800ce6c:	f04f 0800 	mov.w	r8, #0
 800ce70:	f04f 0900 	mov.w	r9, #0
 800ce74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce76:	e8e7 0102 	strd	r0, r1, [r7], #8
 800ce7a:	3b08      	subs	r3, #8
 800ce7c:	9302      	str	r3, [sp, #8]
 800ce7e:	9b06      	ldr	r3, [sp, #24]
 800ce80:	459b      	cmp	fp, r3
 800ce82:	dd07      	ble.n	800ce94 <__kernel_rem_pio2+0x3b8>
 800ce84:	ab70      	add	r3, sp, #448	; 0x1c0
 800ce86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ce8a:	463d      	mov	r5, r7
 800ce8c:	e9c3 8900 	strd	r8, r9, [r3]
 800ce90:	3601      	adds	r6, #1
 800ce92:	e7dc      	b.n	800ce4e <__kernel_rem_pio2+0x372>
 800ce94:	9902      	ldr	r1, [sp, #8]
 800ce96:	f10b 0b01 	add.w	fp, fp, #1
 800ce9a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800ce9e:	9102      	str	r1, [sp, #8]
 800cea0:	e875 0102 	ldrd	r0, r1, [r5], #-8
 800cea4:	f7f3 fb18 	bl	80004d8 <__aeabi_dmul>
 800cea8:	4602      	mov	r2, r0
 800ceaa:	460b      	mov	r3, r1
 800ceac:	4640      	mov	r0, r8
 800ceae:	4649      	mov	r1, r9
 800ceb0:	f7f3 f95c 	bl	800016c <__adddf3>
 800ceb4:	4680      	mov	r8, r0
 800ceb6:	4689      	mov	r9, r1
 800ceb8:	e7e1      	b.n	800ce7e <__kernel_rem_pio2+0x3a2>
 800ceba:	3c01      	subs	r4, #1
 800cebc:	e752      	b.n	800cd64 <__kernel_rem_pio2+0x288>
 800cebe:	f1ca 0200 	rsb	r2, sl, #0
 800cec2:	4640      	mov	r0, r8
 800cec4:	4649      	mov	r1, r9
 800cec6:	f000 fa8f 	bl	800d3e8 <scalbn>
 800ceca:	2200      	movs	r2, #0
 800cecc:	4ba5      	ldr	r3, [pc, #660]	; (800d164 <__kernel_rem_pio2+0x688>)
 800cece:	4604      	mov	r4, r0
 800ced0:	460d      	mov	r5, r1
 800ced2:	f7f3 fd87 	bl	80009e4 <__aeabi_dcmpge>
 800ced6:	b1f8      	cbz	r0, 800cf18 <__kernel_rem_pio2+0x43c>
 800ced8:	2200      	movs	r2, #0
 800ceda:	4ba3      	ldr	r3, [pc, #652]	; (800d168 <__kernel_rem_pio2+0x68c>)
 800cedc:	4620      	mov	r0, r4
 800cede:	4629      	mov	r1, r5
 800cee0:	f7f3 fafa 	bl	80004d8 <__aeabi_dmul>
 800cee4:	f7f3 fd92 	bl	8000a0c <__aeabi_d2iz>
 800cee8:	4606      	mov	r6, r0
 800ceea:	f7f3 fa8b 	bl	8000404 <__aeabi_i2d>
 800ceee:	2200      	movs	r2, #0
 800cef0:	4b9c      	ldr	r3, [pc, #624]	; (800d164 <__kernel_rem_pio2+0x688>)
 800cef2:	f7f3 faf1 	bl	80004d8 <__aeabi_dmul>
 800cef6:	460b      	mov	r3, r1
 800cef8:	4602      	mov	r2, r0
 800cefa:	4629      	mov	r1, r5
 800cefc:	4620      	mov	r0, r4
 800cefe:	f7f3 f933 	bl	8000168 <__aeabi_dsub>
 800cf02:	f7f3 fd83 	bl	8000a0c <__aeabi_d2iz>
 800cf06:	1c7c      	adds	r4, r7, #1
 800cf08:	ab0c      	add	r3, sp, #48	; 0x30
 800cf0a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800cf0e:	f10a 0a18 	add.w	sl, sl, #24
 800cf12:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800cf16:	e72d      	b.n	800cd74 <__kernel_rem_pio2+0x298>
 800cf18:	4620      	mov	r0, r4
 800cf1a:	4629      	mov	r1, r5
 800cf1c:	f7f3 fd76 	bl	8000a0c <__aeabi_d2iz>
 800cf20:	ab0c      	add	r3, sp, #48	; 0x30
 800cf22:	463c      	mov	r4, r7
 800cf24:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800cf28:	e724      	b.n	800cd74 <__kernel_rem_pio2+0x298>
 800cf2a:	ab0c      	add	r3, sp, #48	; 0x30
 800cf2c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800cf30:	f7f3 fa68 	bl	8000404 <__aeabi_i2d>
 800cf34:	4632      	mov	r2, r6
 800cf36:	463b      	mov	r3, r7
 800cf38:	f7f3 face 	bl	80004d8 <__aeabi_dmul>
 800cf3c:	4642      	mov	r2, r8
 800cf3e:	e86b 0102 	strd	r0, r1, [fp], #-8
 800cf42:	464b      	mov	r3, r9
 800cf44:	4630      	mov	r0, r6
 800cf46:	4639      	mov	r1, r7
 800cf48:	f7f3 fac6 	bl	80004d8 <__aeabi_dmul>
 800cf4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cf50:	4606      	mov	r6, r0
 800cf52:	460f      	mov	r7, r1
 800cf54:	e71f      	b.n	800cd96 <__kernel_rem_pio2+0x2ba>
 800cf56:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800cf5a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800cf5e:	f7f3 fabb 	bl	80004d8 <__aeabi_dmul>
 800cf62:	4602      	mov	r2, r0
 800cf64:	460b      	mov	r3, r1
 800cf66:	4650      	mov	r0, sl
 800cf68:	4659      	mov	r1, fp
 800cf6a:	f7f3 f8ff 	bl	800016c <__adddf3>
 800cf6e:	4682      	mov	sl, r0
 800cf70:	468b      	mov	fp, r1
 800cf72:	3601      	adds	r6, #1
 800cf74:	9b04      	ldr	r3, [sp, #16]
 800cf76:	429e      	cmp	r6, r3
 800cf78:	dc01      	bgt.n	800cf7e <__kernel_rem_pio2+0x4a2>
 800cf7a:	45b0      	cmp	r8, r6
 800cf7c:	daeb      	bge.n	800cf56 <__kernel_rem_pio2+0x47a>
 800cf7e:	ab48      	add	r3, sp, #288	; 0x120
 800cf80:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cf84:	e9c3 ab00 	strd	sl, fp, [r3]
 800cf88:	3f01      	subs	r7, #1
 800cf8a:	f108 0801 	add.w	r8, r8, #1
 800cf8e:	e709      	b.n	800cda4 <__kernel_rem_pio2+0x2c8>
 800cf90:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800cf92:	2b02      	cmp	r3, #2
 800cf94:	dc09      	bgt.n	800cfaa <__kernel_rem_pio2+0x4ce>
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	dc34      	bgt.n	800d004 <__kernel_rem_pio2+0x528>
 800cf9a:	d05e      	beq.n	800d05a <__kernel_rem_pio2+0x57e>
 800cf9c:	9b07      	ldr	r3, [sp, #28]
 800cf9e:	f003 0007 	and.w	r0, r3, #7
 800cfa2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800cfa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfaa:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800cfac:	2b03      	cmp	r3, #3
 800cfae:	d1f5      	bne.n	800cf9c <__kernel_rem_pio2+0x4c0>
 800cfb0:	9a06      	ldr	r2, [sp, #24]
 800cfb2:	ab48      	add	r3, sp, #288	; 0x120
 800cfb4:	441a      	add	r2, r3
 800cfb6:	4615      	mov	r5, r2
 800cfb8:	4692      	mov	sl, r2
 800cfba:	46a3      	mov	fp, r4
 800cfbc:	f1bb 0f00 	cmp.w	fp, #0
 800cfc0:	dc7a      	bgt.n	800d0b8 <__kernel_rem_pio2+0x5dc>
 800cfc2:	46aa      	mov	sl, r5
 800cfc4:	46a3      	mov	fp, r4
 800cfc6:	f1bb 0f01 	cmp.w	fp, #1
 800cfca:	f300 8094 	bgt.w	800d0f6 <__kernel_rem_pio2+0x61a>
 800cfce:	2700      	movs	r7, #0
 800cfd0:	463e      	mov	r6, r7
 800cfd2:	2c01      	cmp	r4, #1
 800cfd4:	f300 80ae 	bgt.w	800d134 <__kernel_rem_pio2+0x658>
 800cfd8:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800cfdc:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800cfe0:	9b02      	ldr	r3, [sp, #8]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	f040 80b0 	bne.w	800d148 <__kernel_rem_pio2+0x66c>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	462a      	mov	r2, r5
 800cfec:	9801      	ldr	r0, [sp, #4]
 800cfee:	e9c0 2300 	strd	r2, r3, [r0]
 800cff2:	4622      	mov	r2, r4
 800cff4:	460b      	mov	r3, r1
 800cff6:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cffa:	463a      	mov	r2, r7
 800cffc:	4633      	mov	r3, r6
 800cffe:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800d002:	e7cb      	b.n	800cf9c <__kernel_rem_pio2+0x4c0>
 800d004:	2000      	movs	r0, #0
 800d006:	9a06      	ldr	r2, [sp, #24]
 800d008:	ab48      	add	r3, sp, #288	; 0x120
 800d00a:	441a      	add	r2, r3
 800d00c:	4615      	mov	r5, r2
 800d00e:	46a0      	mov	r8, r4
 800d010:	4601      	mov	r1, r0
 800d012:	f1b8 0f00 	cmp.w	r8, #0
 800d016:	da3c      	bge.n	800d092 <__kernel_rem_pio2+0x5b6>
 800d018:	9b02      	ldr	r3, [sp, #8]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d040      	beq.n	800d0a0 <__kernel_rem_pio2+0x5c4>
 800d01e:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800d022:	4602      	mov	r2, r0
 800d024:	462b      	mov	r3, r5
 800d026:	9d01      	ldr	r5, [sp, #4]
 800d028:	2601      	movs	r6, #1
 800d02a:	e9c5 2300 	strd	r2, r3, [r5]
 800d02e:	460b      	mov	r3, r1
 800d030:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800d034:	f7f3 f898 	bl	8000168 <__aeabi_dsub>
 800d038:	4684      	mov	ip, r0
 800d03a:	460f      	mov	r7, r1
 800d03c:	ad48      	add	r5, sp, #288	; 0x120
 800d03e:	42b4      	cmp	r4, r6
 800d040:	f105 0508 	add.w	r5, r5, #8
 800d044:	da2e      	bge.n	800d0a4 <__kernel_rem_pio2+0x5c8>
 800d046:	9b02      	ldr	r3, [sp, #8]
 800d048:	b10b      	cbz	r3, 800d04e <__kernel_rem_pio2+0x572>
 800d04a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800d04e:	4662      	mov	r2, ip
 800d050:	463b      	mov	r3, r7
 800d052:	9901      	ldr	r1, [sp, #4]
 800d054:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800d058:	e7a0      	b.n	800cf9c <__kernel_rem_pio2+0x4c0>
 800d05a:	9a06      	ldr	r2, [sp, #24]
 800d05c:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800d05e:	ab48      	add	r3, sp, #288	; 0x120
 800d060:	441a      	add	r2, r3
 800d062:	4615      	mov	r5, r2
 800d064:	4637      	mov	r7, r6
 800d066:	2c00      	cmp	r4, #0
 800d068:	da09      	bge.n	800d07e <__kernel_rem_pio2+0x5a2>
 800d06a:	9b02      	ldr	r3, [sp, #8]
 800d06c:	b10b      	cbz	r3, 800d072 <__kernel_rem_pio2+0x596>
 800d06e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800d072:	4632      	mov	r2, r6
 800d074:	463b      	mov	r3, r7
 800d076:	9901      	ldr	r1, [sp, #4]
 800d078:	e9c1 2300 	strd	r2, r3, [r1]
 800d07c:	e78e      	b.n	800cf9c <__kernel_rem_pio2+0x4c0>
 800d07e:	4630      	mov	r0, r6
 800d080:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800d084:	4639      	mov	r1, r7
 800d086:	f7f3 f871 	bl	800016c <__adddf3>
 800d08a:	3c01      	subs	r4, #1
 800d08c:	4606      	mov	r6, r0
 800d08e:	460f      	mov	r7, r1
 800d090:	e7e9      	b.n	800d066 <__kernel_rem_pio2+0x58a>
 800d092:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800d096:	f7f3 f869 	bl	800016c <__adddf3>
 800d09a:	f108 38ff 	add.w	r8, r8, #4294967295
 800d09e:	e7b8      	b.n	800d012 <__kernel_rem_pio2+0x536>
 800d0a0:	460d      	mov	r5, r1
 800d0a2:	e7be      	b.n	800d022 <__kernel_rem_pio2+0x546>
 800d0a4:	4660      	mov	r0, ip
 800d0a6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d0aa:	4639      	mov	r1, r7
 800d0ac:	f7f3 f85e 	bl	800016c <__adddf3>
 800d0b0:	3601      	adds	r6, #1
 800d0b2:	4684      	mov	ip, r0
 800d0b4:	460f      	mov	r7, r1
 800d0b6:	e7c2      	b.n	800d03e <__kernel_rem_pio2+0x562>
 800d0b8:	e9da 6700 	ldrd	r6, r7, [sl]
 800d0bc:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800d0c0:	4632      	mov	r2, r6
 800d0c2:	463b      	mov	r3, r7
 800d0c4:	4640      	mov	r0, r8
 800d0c6:	4649      	mov	r1, r9
 800d0c8:	f7f3 f850 	bl	800016c <__adddf3>
 800d0cc:	4602      	mov	r2, r0
 800d0ce:	460b      	mov	r3, r1
 800d0d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d0d4:	4640      	mov	r0, r8
 800d0d6:	4649      	mov	r1, r9
 800d0d8:	f7f3 f846 	bl	8000168 <__aeabi_dsub>
 800d0dc:	4632      	mov	r2, r6
 800d0de:	463b      	mov	r3, r7
 800d0e0:	f7f3 f844 	bl	800016c <__adddf3>
 800d0e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d0e8:	e86a 0102 	strd	r0, r1, [sl], #-8
 800d0ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d0f0:	e9ca 2300 	strd	r2, r3, [sl]
 800d0f4:	e762      	b.n	800cfbc <__kernel_rem_pio2+0x4e0>
 800d0f6:	e9da 8900 	ldrd	r8, r9, [sl]
 800d0fa:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800d0fe:	4642      	mov	r2, r8
 800d100:	464b      	mov	r3, r9
 800d102:	4630      	mov	r0, r6
 800d104:	4639      	mov	r1, r7
 800d106:	f7f3 f831 	bl	800016c <__adddf3>
 800d10a:	4602      	mov	r2, r0
 800d10c:	460b      	mov	r3, r1
 800d10e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d112:	4630      	mov	r0, r6
 800d114:	4639      	mov	r1, r7
 800d116:	f7f3 f827 	bl	8000168 <__aeabi_dsub>
 800d11a:	4642      	mov	r2, r8
 800d11c:	464b      	mov	r3, r9
 800d11e:	f7f3 f825 	bl	800016c <__adddf3>
 800d122:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d126:	e86a 0102 	strd	r0, r1, [sl], #-8
 800d12a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d12e:	e9ca 2300 	strd	r2, r3, [sl]
 800d132:	e748      	b.n	800cfc6 <__kernel_rem_pio2+0x4ea>
 800d134:	4638      	mov	r0, r7
 800d136:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800d13a:	4631      	mov	r1, r6
 800d13c:	f7f3 f816 	bl	800016c <__adddf3>
 800d140:	3c01      	subs	r4, #1
 800d142:	4607      	mov	r7, r0
 800d144:	460e      	mov	r6, r1
 800d146:	e744      	b.n	800cfd2 <__kernel_rem_pio2+0x4f6>
 800d148:	9b01      	ldr	r3, [sp, #4]
 800d14a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d14e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800d152:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800d156:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800d15a:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800d15e:	601d      	str	r5, [r3, #0]
 800d160:	615e      	str	r6, [r3, #20]
 800d162:	e71b      	b.n	800cf9c <__kernel_rem_pio2+0x4c0>
 800d164:	41700000 	.word	0x41700000
 800d168:	3e700000 	.word	0x3e700000
 800d16c:	00000000 	.word	0x00000000

0800d170 <__kernel_sin>:
 800d170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d174:	b086      	sub	sp, #24
 800d176:	e9cd 2300 	strd	r2, r3, [sp]
 800d17a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d17e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d182:	4682      	mov	sl, r0
 800d184:	460c      	mov	r4, r1
 800d186:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800d188:	da03      	bge.n	800d192 <__kernel_sin+0x22>
 800d18a:	f7f3 fc3f 	bl	8000a0c <__aeabi_d2iz>
 800d18e:	2800      	cmp	r0, #0
 800d190:	d050      	beq.n	800d234 <__kernel_sin+0xc4>
 800d192:	4652      	mov	r2, sl
 800d194:	4623      	mov	r3, r4
 800d196:	4650      	mov	r0, sl
 800d198:	4621      	mov	r1, r4
 800d19a:	f7f3 f99d 	bl	80004d8 <__aeabi_dmul>
 800d19e:	4606      	mov	r6, r0
 800d1a0:	460f      	mov	r7, r1
 800d1a2:	4602      	mov	r2, r0
 800d1a4:	460b      	mov	r3, r1
 800d1a6:	4650      	mov	r0, sl
 800d1a8:	4621      	mov	r1, r4
 800d1aa:	f7f3 f995 	bl	80004d8 <__aeabi_dmul>
 800d1ae:	a33e      	add	r3, pc, #248	; (adr r3, 800d2a8 <__kernel_sin+0x138>)
 800d1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b4:	4680      	mov	r8, r0
 800d1b6:	4689      	mov	r9, r1
 800d1b8:	4630      	mov	r0, r6
 800d1ba:	4639      	mov	r1, r7
 800d1bc:	f7f3 f98c 	bl	80004d8 <__aeabi_dmul>
 800d1c0:	a33b      	add	r3, pc, #236	; (adr r3, 800d2b0 <__kernel_sin+0x140>)
 800d1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c6:	f7f2 ffcf 	bl	8000168 <__aeabi_dsub>
 800d1ca:	4632      	mov	r2, r6
 800d1cc:	463b      	mov	r3, r7
 800d1ce:	f7f3 f983 	bl	80004d8 <__aeabi_dmul>
 800d1d2:	a339      	add	r3, pc, #228	; (adr r3, 800d2b8 <__kernel_sin+0x148>)
 800d1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d8:	f7f2 ffc8 	bl	800016c <__adddf3>
 800d1dc:	4632      	mov	r2, r6
 800d1de:	463b      	mov	r3, r7
 800d1e0:	f7f3 f97a 	bl	80004d8 <__aeabi_dmul>
 800d1e4:	a336      	add	r3, pc, #216	; (adr r3, 800d2c0 <__kernel_sin+0x150>)
 800d1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ea:	f7f2 ffbd 	bl	8000168 <__aeabi_dsub>
 800d1ee:	4632      	mov	r2, r6
 800d1f0:	463b      	mov	r3, r7
 800d1f2:	f7f3 f971 	bl	80004d8 <__aeabi_dmul>
 800d1f6:	a334      	add	r3, pc, #208	; (adr r3, 800d2c8 <__kernel_sin+0x158>)
 800d1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1fc:	f7f2 ffb6 	bl	800016c <__adddf3>
 800d200:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d204:	b9dd      	cbnz	r5, 800d23e <__kernel_sin+0xce>
 800d206:	4602      	mov	r2, r0
 800d208:	460b      	mov	r3, r1
 800d20a:	4630      	mov	r0, r6
 800d20c:	4639      	mov	r1, r7
 800d20e:	f7f3 f963 	bl	80004d8 <__aeabi_dmul>
 800d212:	a32f      	add	r3, pc, #188	; (adr r3, 800d2d0 <__kernel_sin+0x160>)
 800d214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d218:	f7f2 ffa6 	bl	8000168 <__aeabi_dsub>
 800d21c:	4642      	mov	r2, r8
 800d21e:	464b      	mov	r3, r9
 800d220:	f7f3 f95a 	bl	80004d8 <__aeabi_dmul>
 800d224:	4602      	mov	r2, r0
 800d226:	460b      	mov	r3, r1
 800d228:	4650      	mov	r0, sl
 800d22a:	4621      	mov	r1, r4
 800d22c:	f7f2 ff9e 	bl	800016c <__adddf3>
 800d230:	4682      	mov	sl, r0
 800d232:	460c      	mov	r4, r1
 800d234:	4650      	mov	r0, sl
 800d236:	4621      	mov	r1, r4
 800d238:	b006      	add	sp, #24
 800d23a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d23e:	2200      	movs	r2, #0
 800d240:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d244:	4b24      	ldr	r3, [pc, #144]	; (800d2d8 <__kernel_sin+0x168>)
 800d246:	f7f3 f947 	bl	80004d8 <__aeabi_dmul>
 800d24a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d24e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d252:	4640      	mov	r0, r8
 800d254:	4649      	mov	r1, r9
 800d256:	f7f3 f93f 	bl	80004d8 <__aeabi_dmul>
 800d25a:	4602      	mov	r2, r0
 800d25c:	460b      	mov	r3, r1
 800d25e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d262:	f7f2 ff81 	bl	8000168 <__aeabi_dsub>
 800d266:	4632      	mov	r2, r6
 800d268:	463b      	mov	r3, r7
 800d26a:	f7f3 f935 	bl	80004d8 <__aeabi_dmul>
 800d26e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d272:	f7f2 ff79 	bl	8000168 <__aeabi_dsub>
 800d276:	a316      	add	r3, pc, #88	; (adr r3, 800d2d0 <__kernel_sin+0x160>)
 800d278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d27c:	4606      	mov	r6, r0
 800d27e:	460f      	mov	r7, r1
 800d280:	4640      	mov	r0, r8
 800d282:	4649      	mov	r1, r9
 800d284:	f7f3 f928 	bl	80004d8 <__aeabi_dmul>
 800d288:	4602      	mov	r2, r0
 800d28a:	460b      	mov	r3, r1
 800d28c:	4630      	mov	r0, r6
 800d28e:	4639      	mov	r1, r7
 800d290:	f7f2 ff6c 	bl	800016c <__adddf3>
 800d294:	4602      	mov	r2, r0
 800d296:	460b      	mov	r3, r1
 800d298:	4650      	mov	r0, sl
 800d29a:	4621      	mov	r1, r4
 800d29c:	f7f2 ff64 	bl	8000168 <__aeabi_dsub>
 800d2a0:	e7c6      	b.n	800d230 <__kernel_sin+0xc0>
 800d2a2:	bf00      	nop
 800d2a4:	f3af 8000 	nop.w
 800d2a8:	5acfd57c 	.word	0x5acfd57c
 800d2ac:	3de5d93a 	.word	0x3de5d93a
 800d2b0:	8a2b9ceb 	.word	0x8a2b9ceb
 800d2b4:	3e5ae5e6 	.word	0x3e5ae5e6
 800d2b8:	57b1fe7d 	.word	0x57b1fe7d
 800d2bc:	3ec71de3 	.word	0x3ec71de3
 800d2c0:	19c161d5 	.word	0x19c161d5
 800d2c4:	3f2a01a0 	.word	0x3f2a01a0
 800d2c8:	1110f8a6 	.word	0x1110f8a6
 800d2cc:	3f811111 	.word	0x3f811111
 800d2d0:	55555549 	.word	0x55555549
 800d2d4:	3fc55555 	.word	0x3fc55555
 800d2d8:	3fe00000 	.word	0x3fe00000

0800d2dc <fabs>:
 800d2dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d2e0:	4770      	bx	lr
 800d2e2:	0000      	movs	r0, r0
 800d2e4:	0000      	movs	r0, r0
	...

0800d2e8 <floor>:
 800d2e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2ec:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800d2f0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800d2f4:	2e13      	cmp	r6, #19
 800d2f6:	4602      	mov	r2, r0
 800d2f8:	460b      	mov	r3, r1
 800d2fa:	4607      	mov	r7, r0
 800d2fc:	460c      	mov	r4, r1
 800d2fe:	4605      	mov	r5, r0
 800d300:	dc34      	bgt.n	800d36c <floor+0x84>
 800d302:	2e00      	cmp	r6, #0
 800d304:	da15      	bge.n	800d332 <floor+0x4a>
 800d306:	a334      	add	r3, pc, #208	; (adr r3, 800d3d8 <floor+0xf0>)
 800d308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d30c:	f7f2 ff2e 	bl	800016c <__adddf3>
 800d310:	2200      	movs	r2, #0
 800d312:	2300      	movs	r3, #0
 800d314:	f7f3 fb70 	bl	80009f8 <__aeabi_dcmpgt>
 800d318:	b140      	cbz	r0, 800d32c <floor+0x44>
 800d31a:	2c00      	cmp	r4, #0
 800d31c:	da59      	bge.n	800d3d2 <floor+0xea>
 800d31e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d322:	ea57 0503 	orrs.w	r5, r7, r3
 800d326:	d001      	beq.n	800d32c <floor+0x44>
 800d328:	2500      	movs	r5, #0
 800d32a:	4c2d      	ldr	r4, [pc, #180]	; (800d3e0 <floor+0xf8>)
 800d32c:	4623      	mov	r3, r4
 800d32e:	462f      	mov	r7, r5
 800d330:	e025      	b.n	800d37e <floor+0x96>
 800d332:	4a2c      	ldr	r2, [pc, #176]	; (800d3e4 <floor+0xfc>)
 800d334:	fa42 f806 	asr.w	r8, r2, r6
 800d338:	ea01 0208 	and.w	r2, r1, r8
 800d33c:	4302      	orrs	r2, r0
 800d33e:	d01e      	beq.n	800d37e <floor+0x96>
 800d340:	a325      	add	r3, pc, #148	; (adr r3, 800d3d8 <floor+0xf0>)
 800d342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d346:	f7f2 ff11 	bl	800016c <__adddf3>
 800d34a:	2200      	movs	r2, #0
 800d34c:	2300      	movs	r3, #0
 800d34e:	f7f3 fb53 	bl	80009f8 <__aeabi_dcmpgt>
 800d352:	2800      	cmp	r0, #0
 800d354:	d0ea      	beq.n	800d32c <floor+0x44>
 800d356:	2c00      	cmp	r4, #0
 800d358:	bfbe      	ittt	lt
 800d35a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d35e:	fa43 f606 	asrlt.w	r6, r3, r6
 800d362:	19a4      	addlt	r4, r4, r6
 800d364:	2500      	movs	r5, #0
 800d366:	ea24 0408 	bic.w	r4, r4, r8
 800d36a:	e7df      	b.n	800d32c <floor+0x44>
 800d36c:	2e33      	cmp	r6, #51	; 0x33
 800d36e:	dd0a      	ble.n	800d386 <floor+0x9e>
 800d370:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d374:	d103      	bne.n	800d37e <floor+0x96>
 800d376:	f7f2 fef9 	bl	800016c <__adddf3>
 800d37a:	4607      	mov	r7, r0
 800d37c:	460b      	mov	r3, r1
 800d37e:	4638      	mov	r0, r7
 800d380:	4619      	mov	r1, r3
 800d382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d386:	f04f 32ff 	mov.w	r2, #4294967295
 800d38a:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800d38e:	fa22 f808 	lsr.w	r8, r2, r8
 800d392:	ea18 0f00 	tst.w	r8, r0
 800d396:	d0f2      	beq.n	800d37e <floor+0x96>
 800d398:	a30f      	add	r3, pc, #60	; (adr r3, 800d3d8 <floor+0xf0>)
 800d39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d39e:	f7f2 fee5 	bl	800016c <__adddf3>
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	f7f3 fb27 	bl	80009f8 <__aeabi_dcmpgt>
 800d3aa:	2800      	cmp	r0, #0
 800d3ac:	d0be      	beq.n	800d32c <floor+0x44>
 800d3ae:	2c00      	cmp	r4, #0
 800d3b0:	da02      	bge.n	800d3b8 <floor+0xd0>
 800d3b2:	2e14      	cmp	r6, #20
 800d3b4:	d103      	bne.n	800d3be <floor+0xd6>
 800d3b6:	3401      	adds	r4, #1
 800d3b8:	ea25 0508 	bic.w	r5, r5, r8
 800d3bc:	e7b6      	b.n	800d32c <floor+0x44>
 800d3be:	2301      	movs	r3, #1
 800d3c0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d3c4:	fa03 f606 	lsl.w	r6, r3, r6
 800d3c8:	4435      	add	r5, r6
 800d3ca:	42bd      	cmp	r5, r7
 800d3cc:	bf38      	it	cc
 800d3ce:	18e4      	addcc	r4, r4, r3
 800d3d0:	e7f2      	b.n	800d3b8 <floor+0xd0>
 800d3d2:	2500      	movs	r5, #0
 800d3d4:	462c      	mov	r4, r5
 800d3d6:	e7a9      	b.n	800d32c <floor+0x44>
 800d3d8:	8800759c 	.word	0x8800759c
 800d3dc:	7e37e43c 	.word	0x7e37e43c
 800d3e0:	bff00000 	.word	0xbff00000
 800d3e4:	000fffff 	.word	0x000fffff

0800d3e8 <scalbn>:
 800d3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ea:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800d3ee:	4604      	mov	r4, r0
 800d3f0:	460d      	mov	r5, r1
 800d3f2:	4617      	mov	r7, r2
 800d3f4:	460b      	mov	r3, r1
 800d3f6:	b996      	cbnz	r6, 800d41e <scalbn+0x36>
 800d3f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d3fc:	4303      	orrs	r3, r0
 800d3fe:	d039      	beq.n	800d474 <scalbn+0x8c>
 800d400:	4b35      	ldr	r3, [pc, #212]	; (800d4d8 <scalbn+0xf0>)
 800d402:	2200      	movs	r2, #0
 800d404:	f7f3 f868 	bl	80004d8 <__aeabi_dmul>
 800d408:	4b34      	ldr	r3, [pc, #208]	; (800d4dc <scalbn+0xf4>)
 800d40a:	4604      	mov	r4, r0
 800d40c:	429f      	cmp	r7, r3
 800d40e:	460d      	mov	r5, r1
 800d410:	da0f      	bge.n	800d432 <scalbn+0x4a>
 800d412:	a32d      	add	r3, pc, #180	; (adr r3, 800d4c8 <scalbn+0xe0>)
 800d414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d418:	f7f3 f85e 	bl	80004d8 <__aeabi_dmul>
 800d41c:	e006      	b.n	800d42c <scalbn+0x44>
 800d41e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d422:	4296      	cmp	r6, r2
 800d424:	d10a      	bne.n	800d43c <scalbn+0x54>
 800d426:	4602      	mov	r2, r0
 800d428:	f7f2 fea0 	bl	800016c <__adddf3>
 800d42c:	4604      	mov	r4, r0
 800d42e:	460d      	mov	r5, r1
 800d430:	e020      	b.n	800d474 <scalbn+0x8c>
 800d432:	460b      	mov	r3, r1
 800d434:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d438:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800d43c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800d440:	19b9      	adds	r1, r7, r6
 800d442:	4291      	cmp	r1, r2
 800d444:	dd0e      	ble.n	800d464 <scalbn+0x7c>
 800d446:	a322      	add	r3, pc, #136	; (adr r3, 800d4d0 <scalbn+0xe8>)
 800d448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d44c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800d450:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800d454:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800d458:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800d45c:	4820      	ldr	r0, [pc, #128]	; (800d4e0 <scalbn+0xf8>)
 800d45e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800d462:	e7d9      	b.n	800d418 <scalbn+0x30>
 800d464:	2900      	cmp	r1, #0
 800d466:	dd08      	ble.n	800d47a <scalbn+0x92>
 800d468:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d46c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d470:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800d474:	4620      	mov	r0, r4
 800d476:	4629      	mov	r1, r5
 800d478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d47a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800d47e:	da16      	bge.n	800d4ae <scalbn+0xc6>
 800d480:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d484:	429f      	cmp	r7, r3
 800d486:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800d48a:	dd08      	ble.n	800d49e <scalbn+0xb6>
 800d48c:	4c15      	ldr	r4, [pc, #84]	; (800d4e4 <scalbn+0xfc>)
 800d48e:	4814      	ldr	r0, [pc, #80]	; (800d4e0 <scalbn+0xf8>)
 800d490:	f363 74df 	bfi	r4, r3, #31, #1
 800d494:	a30e      	add	r3, pc, #56	; (adr r3, 800d4d0 <scalbn+0xe8>)
 800d496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d49a:	4621      	mov	r1, r4
 800d49c:	e7bc      	b.n	800d418 <scalbn+0x30>
 800d49e:	4c12      	ldr	r4, [pc, #72]	; (800d4e8 <scalbn+0x100>)
 800d4a0:	4812      	ldr	r0, [pc, #72]	; (800d4ec <scalbn+0x104>)
 800d4a2:	f363 74df 	bfi	r4, r3, #31, #1
 800d4a6:	a308      	add	r3, pc, #32	; (adr r3, 800d4c8 <scalbn+0xe0>)
 800d4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ac:	e7f5      	b.n	800d49a <scalbn+0xb2>
 800d4ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d4b2:	3136      	adds	r1, #54	; 0x36
 800d4b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d4b8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800d4bc:	4620      	mov	r0, r4
 800d4be:	4629      	mov	r1, r5
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	4b0b      	ldr	r3, [pc, #44]	; (800d4f0 <scalbn+0x108>)
 800d4c4:	e7a8      	b.n	800d418 <scalbn+0x30>
 800d4c6:	bf00      	nop
 800d4c8:	c2f8f359 	.word	0xc2f8f359
 800d4cc:	01a56e1f 	.word	0x01a56e1f
 800d4d0:	8800759c 	.word	0x8800759c
 800d4d4:	7e37e43c 	.word	0x7e37e43c
 800d4d8:	43500000 	.word	0x43500000
 800d4dc:	ffff3cb0 	.word	0xffff3cb0
 800d4e0:	8800759c 	.word	0x8800759c
 800d4e4:	7e37e43c 	.word	0x7e37e43c
 800d4e8:	01a56e1f 	.word	0x01a56e1f
 800d4ec:	c2f8f359 	.word	0xc2f8f359
 800d4f0:	3c900000 	.word	0x3c900000

0800d4f4 <__errno>:
 800d4f4:	4b01      	ldr	r3, [pc, #4]	; (800d4fc <__errno+0x8>)
 800d4f6:	6818      	ldr	r0, [r3, #0]
 800d4f8:	4770      	bx	lr
 800d4fa:	bf00      	nop
 800d4fc:	20000184 	.word	0x20000184

0800d500 <__libc_init_array>:
 800d500:	b570      	push	{r4, r5, r6, lr}
 800d502:	2600      	movs	r6, #0
 800d504:	4d0c      	ldr	r5, [pc, #48]	; (800d538 <__libc_init_array+0x38>)
 800d506:	4c0d      	ldr	r4, [pc, #52]	; (800d53c <__libc_init_array+0x3c>)
 800d508:	1b64      	subs	r4, r4, r5
 800d50a:	10a4      	asrs	r4, r4, #2
 800d50c:	42a6      	cmp	r6, r4
 800d50e:	d109      	bne.n	800d524 <__libc_init_array+0x24>
 800d510:	f001 f85a 	bl	800e5c8 <_init>
 800d514:	2600      	movs	r6, #0
 800d516:	4d0a      	ldr	r5, [pc, #40]	; (800d540 <__libc_init_array+0x40>)
 800d518:	4c0a      	ldr	r4, [pc, #40]	; (800d544 <__libc_init_array+0x44>)
 800d51a:	1b64      	subs	r4, r4, r5
 800d51c:	10a4      	asrs	r4, r4, #2
 800d51e:	42a6      	cmp	r6, r4
 800d520:	d105      	bne.n	800d52e <__libc_init_array+0x2e>
 800d522:	bd70      	pop	{r4, r5, r6, pc}
 800d524:	f855 3b04 	ldr.w	r3, [r5], #4
 800d528:	4798      	blx	r3
 800d52a:	3601      	adds	r6, #1
 800d52c:	e7ee      	b.n	800d50c <__libc_init_array+0xc>
 800d52e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d532:	4798      	blx	r3
 800d534:	3601      	adds	r6, #1
 800d536:	e7f2      	b.n	800d51e <__libc_init_array+0x1e>
 800d538:	0800ed88 	.word	0x0800ed88
 800d53c:	0800ed88 	.word	0x0800ed88
 800d540:	0800ed88 	.word	0x0800ed88
 800d544:	0800ed98 	.word	0x0800ed98

0800d548 <memset>:
 800d548:	4603      	mov	r3, r0
 800d54a:	4402      	add	r2, r0
 800d54c:	4293      	cmp	r3, r2
 800d54e:	d100      	bne.n	800d552 <memset+0xa>
 800d550:	4770      	bx	lr
 800d552:	f803 1b01 	strb.w	r1, [r3], #1
 800d556:	e7f9      	b.n	800d54c <memset+0x4>

0800d558 <_puts_r>:
 800d558:	b570      	push	{r4, r5, r6, lr}
 800d55a:	460e      	mov	r6, r1
 800d55c:	4605      	mov	r5, r0
 800d55e:	b118      	cbz	r0, 800d568 <_puts_r+0x10>
 800d560:	6983      	ldr	r3, [r0, #24]
 800d562:	b90b      	cbnz	r3, 800d568 <_puts_r+0x10>
 800d564:	f000 fa68 	bl	800da38 <__sinit>
 800d568:	69ab      	ldr	r3, [r5, #24]
 800d56a:	68ac      	ldr	r4, [r5, #8]
 800d56c:	b913      	cbnz	r3, 800d574 <_puts_r+0x1c>
 800d56e:	4628      	mov	r0, r5
 800d570:	f000 fa62 	bl	800da38 <__sinit>
 800d574:	4b2c      	ldr	r3, [pc, #176]	; (800d628 <_puts_r+0xd0>)
 800d576:	429c      	cmp	r4, r3
 800d578:	d120      	bne.n	800d5bc <_puts_r+0x64>
 800d57a:	686c      	ldr	r4, [r5, #4]
 800d57c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d57e:	07db      	lsls	r3, r3, #31
 800d580:	d405      	bmi.n	800d58e <_puts_r+0x36>
 800d582:	89a3      	ldrh	r3, [r4, #12]
 800d584:	0598      	lsls	r0, r3, #22
 800d586:	d402      	bmi.n	800d58e <_puts_r+0x36>
 800d588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d58a:	f000 faf3 	bl	800db74 <__retarget_lock_acquire_recursive>
 800d58e:	89a3      	ldrh	r3, [r4, #12]
 800d590:	0719      	lsls	r1, r3, #28
 800d592:	d51d      	bpl.n	800d5d0 <_puts_r+0x78>
 800d594:	6923      	ldr	r3, [r4, #16]
 800d596:	b1db      	cbz	r3, 800d5d0 <_puts_r+0x78>
 800d598:	3e01      	subs	r6, #1
 800d59a:	68a3      	ldr	r3, [r4, #8]
 800d59c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d5a0:	3b01      	subs	r3, #1
 800d5a2:	60a3      	str	r3, [r4, #8]
 800d5a4:	bb39      	cbnz	r1, 800d5f6 <_puts_r+0x9e>
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	da38      	bge.n	800d61c <_puts_r+0xc4>
 800d5aa:	4622      	mov	r2, r4
 800d5ac:	210a      	movs	r1, #10
 800d5ae:	4628      	mov	r0, r5
 800d5b0:	f000 f868 	bl	800d684 <__swbuf_r>
 800d5b4:	3001      	adds	r0, #1
 800d5b6:	d011      	beq.n	800d5dc <_puts_r+0x84>
 800d5b8:	250a      	movs	r5, #10
 800d5ba:	e011      	b.n	800d5e0 <_puts_r+0x88>
 800d5bc:	4b1b      	ldr	r3, [pc, #108]	; (800d62c <_puts_r+0xd4>)
 800d5be:	429c      	cmp	r4, r3
 800d5c0:	d101      	bne.n	800d5c6 <_puts_r+0x6e>
 800d5c2:	68ac      	ldr	r4, [r5, #8]
 800d5c4:	e7da      	b.n	800d57c <_puts_r+0x24>
 800d5c6:	4b1a      	ldr	r3, [pc, #104]	; (800d630 <_puts_r+0xd8>)
 800d5c8:	429c      	cmp	r4, r3
 800d5ca:	bf08      	it	eq
 800d5cc:	68ec      	ldreq	r4, [r5, #12]
 800d5ce:	e7d5      	b.n	800d57c <_puts_r+0x24>
 800d5d0:	4621      	mov	r1, r4
 800d5d2:	4628      	mov	r0, r5
 800d5d4:	f000 f8a8 	bl	800d728 <__swsetup_r>
 800d5d8:	2800      	cmp	r0, #0
 800d5da:	d0dd      	beq.n	800d598 <_puts_r+0x40>
 800d5dc:	f04f 35ff 	mov.w	r5, #4294967295
 800d5e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d5e2:	07da      	lsls	r2, r3, #31
 800d5e4:	d405      	bmi.n	800d5f2 <_puts_r+0x9a>
 800d5e6:	89a3      	ldrh	r3, [r4, #12]
 800d5e8:	059b      	lsls	r3, r3, #22
 800d5ea:	d402      	bmi.n	800d5f2 <_puts_r+0x9a>
 800d5ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d5ee:	f000 fac2 	bl	800db76 <__retarget_lock_release_recursive>
 800d5f2:	4628      	mov	r0, r5
 800d5f4:	bd70      	pop	{r4, r5, r6, pc}
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	da04      	bge.n	800d604 <_puts_r+0xac>
 800d5fa:	69a2      	ldr	r2, [r4, #24]
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	dc06      	bgt.n	800d60e <_puts_r+0xb6>
 800d600:	290a      	cmp	r1, #10
 800d602:	d004      	beq.n	800d60e <_puts_r+0xb6>
 800d604:	6823      	ldr	r3, [r4, #0]
 800d606:	1c5a      	adds	r2, r3, #1
 800d608:	6022      	str	r2, [r4, #0]
 800d60a:	7019      	strb	r1, [r3, #0]
 800d60c:	e7c5      	b.n	800d59a <_puts_r+0x42>
 800d60e:	4622      	mov	r2, r4
 800d610:	4628      	mov	r0, r5
 800d612:	f000 f837 	bl	800d684 <__swbuf_r>
 800d616:	3001      	adds	r0, #1
 800d618:	d1bf      	bne.n	800d59a <_puts_r+0x42>
 800d61a:	e7df      	b.n	800d5dc <_puts_r+0x84>
 800d61c:	250a      	movs	r5, #10
 800d61e:	6823      	ldr	r3, [r4, #0]
 800d620:	1c5a      	adds	r2, r3, #1
 800d622:	6022      	str	r2, [r4, #0]
 800d624:	701d      	strb	r5, [r3, #0]
 800d626:	e7db      	b.n	800d5e0 <_puts_r+0x88>
 800d628:	0800ed14 	.word	0x0800ed14
 800d62c:	0800ed34 	.word	0x0800ed34
 800d630:	0800ecf4 	.word	0x0800ecf4

0800d634 <puts>:
 800d634:	4b02      	ldr	r3, [pc, #8]	; (800d640 <puts+0xc>)
 800d636:	4601      	mov	r1, r0
 800d638:	6818      	ldr	r0, [r3, #0]
 800d63a:	f7ff bf8d 	b.w	800d558 <_puts_r>
 800d63e:	bf00      	nop
 800d640:	20000184 	.word	0x20000184

0800d644 <siprintf>:
 800d644:	b40e      	push	{r1, r2, r3}
 800d646:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d64a:	b500      	push	{lr}
 800d64c:	b09c      	sub	sp, #112	; 0x70
 800d64e:	ab1d      	add	r3, sp, #116	; 0x74
 800d650:	9002      	str	r0, [sp, #8]
 800d652:	9006      	str	r0, [sp, #24]
 800d654:	9107      	str	r1, [sp, #28]
 800d656:	9104      	str	r1, [sp, #16]
 800d658:	4808      	ldr	r0, [pc, #32]	; (800d67c <siprintf+0x38>)
 800d65a:	4909      	ldr	r1, [pc, #36]	; (800d680 <siprintf+0x3c>)
 800d65c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d660:	9105      	str	r1, [sp, #20]
 800d662:	6800      	ldr	r0, [r0, #0]
 800d664:	a902      	add	r1, sp, #8
 800d666:	9301      	str	r3, [sp, #4]
 800d668:	f000 fbec 	bl	800de44 <_svfiprintf_r>
 800d66c:	2200      	movs	r2, #0
 800d66e:	9b02      	ldr	r3, [sp, #8]
 800d670:	701a      	strb	r2, [r3, #0]
 800d672:	b01c      	add	sp, #112	; 0x70
 800d674:	f85d eb04 	ldr.w	lr, [sp], #4
 800d678:	b003      	add	sp, #12
 800d67a:	4770      	bx	lr
 800d67c:	20000184 	.word	0x20000184
 800d680:	ffff0208 	.word	0xffff0208

0800d684 <__swbuf_r>:
 800d684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d686:	460e      	mov	r6, r1
 800d688:	4614      	mov	r4, r2
 800d68a:	4605      	mov	r5, r0
 800d68c:	b118      	cbz	r0, 800d696 <__swbuf_r+0x12>
 800d68e:	6983      	ldr	r3, [r0, #24]
 800d690:	b90b      	cbnz	r3, 800d696 <__swbuf_r+0x12>
 800d692:	f000 f9d1 	bl	800da38 <__sinit>
 800d696:	4b21      	ldr	r3, [pc, #132]	; (800d71c <__swbuf_r+0x98>)
 800d698:	429c      	cmp	r4, r3
 800d69a:	d12b      	bne.n	800d6f4 <__swbuf_r+0x70>
 800d69c:	686c      	ldr	r4, [r5, #4]
 800d69e:	69a3      	ldr	r3, [r4, #24]
 800d6a0:	60a3      	str	r3, [r4, #8]
 800d6a2:	89a3      	ldrh	r3, [r4, #12]
 800d6a4:	071a      	lsls	r2, r3, #28
 800d6a6:	d52f      	bpl.n	800d708 <__swbuf_r+0x84>
 800d6a8:	6923      	ldr	r3, [r4, #16]
 800d6aa:	b36b      	cbz	r3, 800d708 <__swbuf_r+0x84>
 800d6ac:	6923      	ldr	r3, [r4, #16]
 800d6ae:	6820      	ldr	r0, [r4, #0]
 800d6b0:	b2f6      	uxtb	r6, r6
 800d6b2:	1ac0      	subs	r0, r0, r3
 800d6b4:	6963      	ldr	r3, [r4, #20]
 800d6b6:	4637      	mov	r7, r6
 800d6b8:	4283      	cmp	r3, r0
 800d6ba:	dc04      	bgt.n	800d6c6 <__swbuf_r+0x42>
 800d6bc:	4621      	mov	r1, r4
 800d6be:	4628      	mov	r0, r5
 800d6c0:	f000 f926 	bl	800d910 <_fflush_r>
 800d6c4:	bb30      	cbnz	r0, 800d714 <__swbuf_r+0x90>
 800d6c6:	68a3      	ldr	r3, [r4, #8]
 800d6c8:	3001      	adds	r0, #1
 800d6ca:	3b01      	subs	r3, #1
 800d6cc:	60a3      	str	r3, [r4, #8]
 800d6ce:	6823      	ldr	r3, [r4, #0]
 800d6d0:	1c5a      	adds	r2, r3, #1
 800d6d2:	6022      	str	r2, [r4, #0]
 800d6d4:	701e      	strb	r6, [r3, #0]
 800d6d6:	6963      	ldr	r3, [r4, #20]
 800d6d8:	4283      	cmp	r3, r0
 800d6da:	d004      	beq.n	800d6e6 <__swbuf_r+0x62>
 800d6dc:	89a3      	ldrh	r3, [r4, #12]
 800d6de:	07db      	lsls	r3, r3, #31
 800d6e0:	d506      	bpl.n	800d6f0 <__swbuf_r+0x6c>
 800d6e2:	2e0a      	cmp	r6, #10
 800d6e4:	d104      	bne.n	800d6f0 <__swbuf_r+0x6c>
 800d6e6:	4621      	mov	r1, r4
 800d6e8:	4628      	mov	r0, r5
 800d6ea:	f000 f911 	bl	800d910 <_fflush_r>
 800d6ee:	b988      	cbnz	r0, 800d714 <__swbuf_r+0x90>
 800d6f0:	4638      	mov	r0, r7
 800d6f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6f4:	4b0a      	ldr	r3, [pc, #40]	; (800d720 <__swbuf_r+0x9c>)
 800d6f6:	429c      	cmp	r4, r3
 800d6f8:	d101      	bne.n	800d6fe <__swbuf_r+0x7a>
 800d6fa:	68ac      	ldr	r4, [r5, #8]
 800d6fc:	e7cf      	b.n	800d69e <__swbuf_r+0x1a>
 800d6fe:	4b09      	ldr	r3, [pc, #36]	; (800d724 <__swbuf_r+0xa0>)
 800d700:	429c      	cmp	r4, r3
 800d702:	bf08      	it	eq
 800d704:	68ec      	ldreq	r4, [r5, #12]
 800d706:	e7ca      	b.n	800d69e <__swbuf_r+0x1a>
 800d708:	4621      	mov	r1, r4
 800d70a:	4628      	mov	r0, r5
 800d70c:	f000 f80c 	bl	800d728 <__swsetup_r>
 800d710:	2800      	cmp	r0, #0
 800d712:	d0cb      	beq.n	800d6ac <__swbuf_r+0x28>
 800d714:	f04f 37ff 	mov.w	r7, #4294967295
 800d718:	e7ea      	b.n	800d6f0 <__swbuf_r+0x6c>
 800d71a:	bf00      	nop
 800d71c:	0800ed14 	.word	0x0800ed14
 800d720:	0800ed34 	.word	0x0800ed34
 800d724:	0800ecf4 	.word	0x0800ecf4

0800d728 <__swsetup_r>:
 800d728:	4b32      	ldr	r3, [pc, #200]	; (800d7f4 <__swsetup_r+0xcc>)
 800d72a:	b570      	push	{r4, r5, r6, lr}
 800d72c:	681d      	ldr	r5, [r3, #0]
 800d72e:	4606      	mov	r6, r0
 800d730:	460c      	mov	r4, r1
 800d732:	b125      	cbz	r5, 800d73e <__swsetup_r+0x16>
 800d734:	69ab      	ldr	r3, [r5, #24]
 800d736:	b913      	cbnz	r3, 800d73e <__swsetup_r+0x16>
 800d738:	4628      	mov	r0, r5
 800d73a:	f000 f97d 	bl	800da38 <__sinit>
 800d73e:	4b2e      	ldr	r3, [pc, #184]	; (800d7f8 <__swsetup_r+0xd0>)
 800d740:	429c      	cmp	r4, r3
 800d742:	d10f      	bne.n	800d764 <__swsetup_r+0x3c>
 800d744:	686c      	ldr	r4, [r5, #4]
 800d746:	89a3      	ldrh	r3, [r4, #12]
 800d748:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d74c:	0719      	lsls	r1, r3, #28
 800d74e:	d42c      	bmi.n	800d7aa <__swsetup_r+0x82>
 800d750:	06dd      	lsls	r5, r3, #27
 800d752:	d411      	bmi.n	800d778 <__swsetup_r+0x50>
 800d754:	2309      	movs	r3, #9
 800d756:	6033      	str	r3, [r6, #0]
 800d758:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d75c:	f04f 30ff 	mov.w	r0, #4294967295
 800d760:	81a3      	strh	r3, [r4, #12]
 800d762:	e03e      	b.n	800d7e2 <__swsetup_r+0xba>
 800d764:	4b25      	ldr	r3, [pc, #148]	; (800d7fc <__swsetup_r+0xd4>)
 800d766:	429c      	cmp	r4, r3
 800d768:	d101      	bne.n	800d76e <__swsetup_r+0x46>
 800d76a:	68ac      	ldr	r4, [r5, #8]
 800d76c:	e7eb      	b.n	800d746 <__swsetup_r+0x1e>
 800d76e:	4b24      	ldr	r3, [pc, #144]	; (800d800 <__swsetup_r+0xd8>)
 800d770:	429c      	cmp	r4, r3
 800d772:	bf08      	it	eq
 800d774:	68ec      	ldreq	r4, [r5, #12]
 800d776:	e7e6      	b.n	800d746 <__swsetup_r+0x1e>
 800d778:	0758      	lsls	r0, r3, #29
 800d77a:	d512      	bpl.n	800d7a2 <__swsetup_r+0x7a>
 800d77c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d77e:	b141      	cbz	r1, 800d792 <__swsetup_r+0x6a>
 800d780:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d784:	4299      	cmp	r1, r3
 800d786:	d002      	beq.n	800d78e <__swsetup_r+0x66>
 800d788:	4630      	mov	r0, r6
 800d78a:	f000 fa59 	bl	800dc40 <_free_r>
 800d78e:	2300      	movs	r3, #0
 800d790:	6363      	str	r3, [r4, #52]	; 0x34
 800d792:	89a3      	ldrh	r3, [r4, #12]
 800d794:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d798:	81a3      	strh	r3, [r4, #12]
 800d79a:	2300      	movs	r3, #0
 800d79c:	6063      	str	r3, [r4, #4]
 800d79e:	6923      	ldr	r3, [r4, #16]
 800d7a0:	6023      	str	r3, [r4, #0]
 800d7a2:	89a3      	ldrh	r3, [r4, #12]
 800d7a4:	f043 0308 	orr.w	r3, r3, #8
 800d7a8:	81a3      	strh	r3, [r4, #12]
 800d7aa:	6923      	ldr	r3, [r4, #16]
 800d7ac:	b94b      	cbnz	r3, 800d7c2 <__swsetup_r+0x9a>
 800d7ae:	89a3      	ldrh	r3, [r4, #12]
 800d7b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d7b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d7b8:	d003      	beq.n	800d7c2 <__swsetup_r+0x9a>
 800d7ba:	4621      	mov	r1, r4
 800d7bc:	4630      	mov	r0, r6
 800d7be:	f000 f9ff 	bl	800dbc0 <__smakebuf_r>
 800d7c2:	89a0      	ldrh	r0, [r4, #12]
 800d7c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d7c8:	f010 0301 	ands.w	r3, r0, #1
 800d7cc:	d00a      	beq.n	800d7e4 <__swsetup_r+0xbc>
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	60a3      	str	r3, [r4, #8]
 800d7d2:	6963      	ldr	r3, [r4, #20]
 800d7d4:	425b      	negs	r3, r3
 800d7d6:	61a3      	str	r3, [r4, #24]
 800d7d8:	6923      	ldr	r3, [r4, #16]
 800d7da:	b943      	cbnz	r3, 800d7ee <__swsetup_r+0xc6>
 800d7dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d7e0:	d1ba      	bne.n	800d758 <__swsetup_r+0x30>
 800d7e2:	bd70      	pop	{r4, r5, r6, pc}
 800d7e4:	0781      	lsls	r1, r0, #30
 800d7e6:	bf58      	it	pl
 800d7e8:	6963      	ldrpl	r3, [r4, #20]
 800d7ea:	60a3      	str	r3, [r4, #8]
 800d7ec:	e7f4      	b.n	800d7d8 <__swsetup_r+0xb0>
 800d7ee:	2000      	movs	r0, #0
 800d7f0:	e7f7      	b.n	800d7e2 <__swsetup_r+0xba>
 800d7f2:	bf00      	nop
 800d7f4:	20000184 	.word	0x20000184
 800d7f8:	0800ed14 	.word	0x0800ed14
 800d7fc:	0800ed34 	.word	0x0800ed34
 800d800:	0800ecf4 	.word	0x0800ecf4

0800d804 <__sflush_r>:
 800d804:	898a      	ldrh	r2, [r1, #12]
 800d806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d80a:	4605      	mov	r5, r0
 800d80c:	0710      	lsls	r0, r2, #28
 800d80e:	460c      	mov	r4, r1
 800d810:	d458      	bmi.n	800d8c4 <__sflush_r+0xc0>
 800d812:	684b      	ldr	r3, [r1, #4]
 800d814:	2b00      	cmp	r3, #0
 800d816:	dc05      	bgt.n	800d824 <__sflush_r+0x20>
 800d818:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	dc02      	bgt.n	800d824 <__sflush_r+0x20>
 800d81e:	2000      	movs	r0, #0
 800d820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d824:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d826:	2e00      	cmp	r6, #0
 800d828:	d0f9      	beq.n	800d81e <__sflush_r+0x1a>
 800d82a:	2300      	movs	r3, #0
 800d82c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d830:	682f      	ldr	r7, [r5, #0]
 800d832:	602b      	str	r3, [r5, #0]
 800d834:	d032      	beq.n	800d89c <__sflush_r+0x98>
 800d836:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d838:	89a3      	ldrh	r3, [r4, #12]
 800d83a:	075a      	lsls	r2, r3, #29
 800d83c:	d505      	bpl.n	800d84a <__sflush_r+0x46>
 800d83e:	6863      	ldr	r3, [r4, #4]
 800d840:	1ac0      	subs	r0, r0, r3
 800d842:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d844:	b10b      	cbz	r3, 800d84a <__sflush_r+0x46>
 800d846:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d848:	1ac0      	subs	r0, r0, r3
 800d84a:	2300      	movs	r3, #0
 800d84c:	4602      	mov	r2, r0
 800d84e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d850:	4628      	mov	r0, r5
 800d852:	6a21      	ldr	r1, [r4, #32]
 800d854:	47b0      	blx	r6
 800d856:	1c43      	adds	r3, r0, #1
 800d858:	89a3      	ldrh	r3, [r4, #12]
 800d85a:	d106      	bne.n	800d86a <__sflush_r+0x66>
 800d85c:	6829      	ldr	r1, [r5, #0]
 800d85e:	291d      	cmp	r1, #29
 800d860:	d82c      	bhi.n	800d8bc <__sflush_r+0xb8>
 800d862:	4a2a      	ldr	r2, [pc, #168]	; (800d90c <__sflush_r+0x108>)
 800d864:	40ca      	lsrs	r2, r1
 800d866:	07d6      	lsls	r6, r2, #31
 800d868:	d528      	bpl.n	800d8bc <__sflush_r+0xb8>
 800d86a:	2200      	movs	r2, #0
 800d86c:	6062      	str	r2, [r4, #4]
 800d86e:	6922      	ldr	r2, [r4, #16]
 800d870:	04d9      	lsls	r1, r3, #19
 800d872:	6022      	str	r2, [r4, #0]
 800d874:	d504      	bpl.n	800d880 <__sflush_r+0x7c>
 800d876:	1c42      	adds	r2, r0, #1
 800d878:	d101      	bne.n	800d87e <__sflush_r+0x7a>
 800d87a:	682b      	ldr	r3, [r5, #0]
 800d87c:	b903      	cbnz	r3, 800d880 <__sflush_r+0x7c>
 800d87e:	6560      	str	r0, [r4, #84]	; 0x54
 800d880:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d882:	602f      	str	r7, [r5, #0]
 800d884:	2900      	cmp	r1, #0
 800d886:	d0ca      	beq.n	800d81e <__sflush_r+0x1a>
 800d888:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d88c:	4299      	cmp	r1, r3
 800d88e:	d002      	beq.n	800d896 <__sflush_r+0x92>
 800d890:	4628      	mov	r0, r5
 800d892:	f000 f9d5 	bl	800dc40 <_free_r>
 800d896:	2000      	movs	r0, #0
 800d898:	6360      	str	r0, [r4, #52]	; 0x34
 800d89a:	e7c1      	b.n	800d820 <__sflush_r+0x1c>
 800d89c:	6a21      	ldr	r1, [r4, #32]
 800d89e:	2301      	movs	r3, #1
 800d8a0:	4628      	mov	r0, r5
 800d8a2:	47b0      	blx	r6
 800d8a4:	1c41      	adds	r1, r0, #1
 800d8a6:	d1c7      	bne.n	800d838 <__sflush_r+0x34>
 800d8a8:	682b      	ldr	r3, [r5, #0]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d0c4      	beq.n	800d838 <__sflush_r+0x34>
 800d8ae:	2b1d      	cmp	r3, #29
 800d8b0:	d001      	beq.n	800d8b6 <__sflush_r+0xb2>
 800d8b2:	2b16      	cmp	r3, #22
 800d8b4:	d101      	bne.n	800d8ba <__sflush_r+0xb6>
 800d8b6:	602f      	str	r7, [r5, #0]
 800d8b8:	e7b1      	b.n	800d81e <__sflush_r+0x1a>
 800d8ba:	89a3      	ldrh	r3, [r4, #12]
 800d8bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8c0:	81a3      	strh	r3, [r4, #12]
 800d8c2:	e7ad      	b.n	800d820 <__sflush_r+0x1c>
 800d8c4:	690f      	ldr	r7, [r1, #16]
 800d8c6:	2f00      	cmp	r7, #0
 800d8c8:	d0a9      	beq.n	800d81e <__sflush_r+0x1a>
 800d8ca:	0793      	lsls	r3, r2, #30
 800d8cc:	bf18      	it	ne
 800d8ce:	2300      	movne	r3, #0
 800d8d0:	680e      	ldr	r6, [r1, #0]
 800d8d2:	bf08      	it	eq
 800d8d4:	694b      	ldreq	r3, [r1, #20]
 800d8d6:	eba6 0807 	sub.w	r8, r6, r7
 800d8da:	600f      	str	r7, [r1, #0]
 800d8dc:	608b      	str	r3, [r1, #8]
 800d8de:	f1b8 0f00 	cmp.w	r8, #0
 800d8e2:	dd9c      	ble.n	800d81e <__sflush_r+0x1a>
 800d8e4:	4643      	mov	r3, r8
 800d8e6:	463a      	mov	r2, r7
 800d8e8:	4628      	mov	r0, r5
 800d8ea:	6a21      	ldr	r1, [r4, #32]
 800d8ec:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d8ee:	47b0      	blx	r6
 800d8f0:	2800      	cmp	r0, #0
 800d8f2:	dc06      	bgt.n	800d902 <__sflush_r+0xfe>
 800d8f4:	89a3      	ldrh	r3, [r4, #12]
 800d8f6:	f04f 30ff 	mov.w	r0, #4294967295
 800d8fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8fe:	81a3      	strh	r3, [r4, #12]
 800d900:	e78e      	b.n	800d820 <__sflush_r+0x1c>
 800d902:	4407      	add	r7, r0
 800d904:	eba8 0800 	sub.w	r8, r8, r0
 800d908:	e7e9      	b.n	800d8de <__sflush_r+0xda>
 800d90a:	bf00      	nop
 800d90c:	20400001 	.word	0x20400001

0800d910 <_fflush_r>:
 800d910:	b538      	push	{r3, r4, r5, lr}
 800d912:	690b      	ldr	r3, [r1, #16]
 800d914:	4605      	mov	r5, r0
 800d916:	460c      	mov	r4, r1
 800d918:	b913      	cbnz	r3, 800d920 <_fflush_r+0x10>
 800d91a:	2500      	movs	r5, #0
 800d91c:	4628      	mov	r0, r5
 800d91e:	bd38      	pop	{r3, r4, r5, pc}
 800d920:	b118      	cbz	r0, 800d92a <_fflush_r+0x1a>
 800d922:	6983      	ldr	r3, [r0, #24]
 800d924:	b90b      	cbnz	r3, 800d92a <_fflush_r+0x1a>
 800d926:	f000 f887 	bl	800da38 <__sinit>
 800d92a:	4b14      	ldr	r3, [pc, #80]	; (800d97c <_fflush_r+0x6c>)
 800d92c:	429c      	cmp	r4, r3
 800d92e:	d11b      	bne.n	800d968 <_fflush_r+0x58>
 800d930:	686c      	ldr	r4, [r5, #4]
 800d932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d0ef      	beq.n	800d91a <_fflush_r+0xa>
 800d93a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d93c:	07d0      	lsls	r0, r2, #31
 800d93e:	d404      	bmi.n	800d94a <_fflush_r+0x3a>
 800d940:	0599      	lsls	r1, r3, #22
 800d942:	d402      	bmi.n	800d94a <_fflush_r+0x3a>
 800d944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d946:	f000 f915 	bl	800db74 <__retarget_lock_acquire_recursive>
 800d94a:	4628      	mov	r0, r5
 800d94c:	4621      	mov	r1, r4
 800d94e:	f7ff ff59 	bl	800d804 <__sflush_r>
 800d952:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d954:	4605      	mov	r5, r0
 800d956:	07da      	lsls	r2, r3, #31
 800d958:	d4e0      	bmi.n	800d91c <_fflush_r+0xc>
 800d95a:	89a3      	ldrh	r3, [r4, #12]
 800d95c:	059b      	lsls	r3, r3, #22
 800d95e:	d4dd      	bmi.n	800d91c <_fflush_r+0xc>
 800d960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d962:	f000 f908 	bl	800db76 <__retarget_lock_release_recursive>
 800d966:	e7d9      	b.n	800d91c <_fflush_r+0xc>
 800d968:	4b05      	ldr	r3, [pc, #20]	; (800d980 <_fflush_r+0x70>)
 800d96a:	429c      	cmp	r4, r3
 800d96c:	d101      	bne.n	800d972 <_fflush_r+0x62>
 800d96e:	68ac      	ldr	r4, [r5, #8]
 800d970:	e7df      	b.n	800d932 <_fflush_r+0x22>
 800d972:	4b04      	ldr	r3, [pc, #16]	; (800d984 <_fflush_r+0x74>)
 800d974:	429c      	cmp	r4, r3
 800d976:	bf08      	it	eq
 800d978:	68ec      	ldreq	r4, [r5, #12]
 800d97a:	e7da      	b.n	800d932 <_fflush_r+0x22>
 800d97c:	0800ed14 	.word	0x0800ed14
 800d980:	0800ed34 	.word	0x0800ed34
 800d984:	0800ecf4 	.word	0x0800ecf4

0800d988 <std>:
 800d988:	2300      	movs	r3, #0
 800d98a:	b510      	push	{r4, lr}
 800d98c:	4604      	mov	r4, r0
 800d98e:	e9c0 3300 	strd	r3, r3, [r0]
 800d992:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d996:	6083      	str	r3, [r0, #8]
 800d998:	8181      	strh	r1, [r0, #12]
 800d99a:	6643      	str	r3, [r0, #100]	; 0x64
 800d99c:	81c2      	strh	r2, [r0, #14]
 800d99e:	6183      	str	r3, [r0, #24]
 800d9a0:	4619      	mov	r1, r3
 800d9a2:	2208      	movs	r2, #8
 800d9a4:	305c      	adds	r0, #92	; 0x5c
 800d9a6:	f7ff fdcf 	bl	800d548 <memset>
 800d9aa:	4b05      	ldr	r3, [pc, #20]	; (800d9c0 <std+0x38>)
 800d9ac:	6224      	str	r4, [r4, #32]
 800d9ae:	6263      	str	r3, [r4, #36]	; 0x24
 800d9b0:	4b04      	ldr	r3, [pc, #16]	; (800d9c4 <std+0x3c>)
 800d9b2:	62a3      	str	r3, [r4, #40]	; 0x28
 800d9b4:	4b04      	ldr	r3, [pc, #16]	; (800d9c8 <std+0x40>)
 800d9b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d9b8:	4b04      	ldr	r3, [pc, #16]	; (800d9cc <std+0x44>)
 800d9ba:	6323      	str	r3, [r4, #48]	; 0x30
 800d9bc:	bd10      	pop	{r4, pc}
 800d9be:	bf00      	nop
 800d9c0:	0800e391 	.word	0x0800e391
 800d9c4:	0800e3b3 	.word	0x0800e3b3
 800d9c8:	0800e3eb 	.word	0x0800e3eb
 800d9cc:	0800e40f 	.word	0x0800e40f

0800d9d0 <_cleanup_r>:
 800d9d0:	4901      	ldr	r1, [pc, #4]	; (800d9d8 <_cleanup_r+0x8>)
 800d9d2:	f000 b8af 	b.w	800db34 <_fwalk_reent>
 800d9d6:	bf00      	nop
 800d9d8:	0800d911 	.word	0x0800d911

0800d9dc <__sfmoreglue>:
 800d9dc:	b570      	push	{r4, r5, r6, lr}
 800d9de:	2568      	movs	r5, #104	; 0x68
 800d9e0:	1e4a      	subs	r2, r1, #1
 800d9e2:	4355      	muls	r5, r2
 800d9e4:	460e      	mov	r6, r1
 800d9e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d9ea:	f000 f975 	bl	800dcd8 <_malloc_r>
 800d9ee:	4604      	mov	r4, r0
 800d9f0:	b140      	cbz	r0, 800da04 <__sfmoreglue+0x28>
 800d9f2:	2100      	movs	r1, #0
 800d9f4:	e9c0 1600 	strd	r1, r6, [r0]
 800d9f8:	300c      	adds	r0, #12
 800d9fa:	60a0      	str	r0, [r4, #8]
 800d9fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800da00:	f7ff fda2 	bl	800d548 <memset>
 800da04:	4620      	mov	r0, r4
 800da06:	bd70      	pop	{r4, r5, r6, pc}

0800da08 <__sfp_lock_acquire>:
 800da08:	4801      	ldr	r0, [pc, #4]	; (800da10 <__sfp_lock_acquire+0x8>)
 800da0a:	f000 b8b3 	b.w	800db74 <__retarget_lock_acquire_recursive>
 800da0e:	bf00      	nop
 800da10:	200017ac 	.word	0x200017ac

0800da14 <__sfp_lock_release>:
 800da14:	4801      	ldr	r0, [pc, #4]	; (800da1c <__sfp_lock_release+0x8>)
 800da16:	f000 b8ae 	b.w	800db76 <__retarget_lock_release_recursive>
 800da1a:	bf00      	nop
 800da1c:	200017ac 	.word	0x200017ac

0800da20 <__sinit_lock_acquire>:
 800da20:	4801      	ldr	r0, [pc, #4]	; (800da28 <__sinit_lock_acquire+0x8>)
 800da22:	f000 b8a7 	b.w	800db74 <__retarget_lock_acquire_recursive>
 800da26:	bf00      	nop
 800da28:	200017a7 	.word	0x200017a7

0800da2c <__sinit_lock_release>:
 800da2c:	4801      	ldr	r0, [pc, #4]	; (800da34 <__sinit_lock_release+0x8>)
 800da2e:	f000 b8a2 	b.w	800db76 <__retarget_lock_release_recursive>
 800da32:	bf00      	nop
 800da34:	200017a7 	.word	0x200017a7

0800da38 <__sinit>:
 800da38:	b510      	push	{r4, lr}
 800da3a:	4604      	mov	r4, r0
 800da3c:	f7ff fff0 	bl	800da20 <__sinit_lock_acquire>
 800da40:	69a3      	ldr	r3, [r4, #24]
 800da42:	b11b      	cbz	r3, 800da4c <__sinit+0x14>
 800da44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da48:	f7ff bff0 	b.w	800da2c <__sinit_lock_release>
 800da4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800da50:	6523      	str	r3, [r4, #80]	; 0x50
 800da52:	4b13      	ldr	r3, [pc, #76]	; (800daa0 <__sinit+0x68>)
 800da54:	4a13      	ldr	r2, [pc, #76]	; (800daa4 <__sinit+0x6c>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	62a2      	str	r2, [r4, #40]	; 0x28
 800da5a:	42a3      	cmp	r3, r4
 800da5c:	bf08      	it	eq
 800da5e:	2301      	moveq	r3, #1
 800da60:	4620      	mov	r0, r4
 800da62:	bf08      	it	eq
 800da64:	61a3      	streq	r3, [r4, #24]
 800da66:	f000 f81f 	bl	800daa8 <__sfp>
 800da6a:	6060      	str	r0, [r4, #4]
 800da6c:	4620      	mov	r0, r4
 800da6e:	f000 f81b 	bl	800daa8 <__sfp>
 800da72:	60a0      	str	r0, [r4, #8]
 800da74:	4620      	mov	r0, r4
 800da76:	f000 f817 	bl	800daa8 <__sfp>
 800da7a:	2200      	movs	r2, #0
 800da7c:	2104      	movs	r1, #4
 800da7e:	60e0      	str	r0, [r4, #12]
 800da80:	6860      	ldr	r0, [r4, #4]
 800da82:	f7ff ff81 	bl	800d988 <std>
 800da86:	2201      	movs	r2, #1
 800da88:	2109      	movs	r1, #9
 800da8a:	68a0      	ldr	r0, [r4, #8]
 800da8c:	f7ff ff7c 	bl	800d988 <std>
 800da90:	2202      	movs	r2, #2
 800da92:	2112      	movs	r1, #18
 800da94:	68e0      	ldr	r0, [r4, #12]
 800da96:	f7ff ff77 	bl	800d988 <std>
 800da9a:	2301      	movs	r3, #1
 800da9c:	61a3      	str	r3, [r4, #24]
 800da9e:	e7d1      	b.n	800da44 <__sinit+0xc>
 800daa0:	0800ecf0 	.word	0x0800ecf0
 800daa4:	0800d9d1 	.word	0x0800d9d1

0800daa8 <__sfp>:
 800daa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daaa:	4607      	mov	r7, r0
 800daac:	f7ff ffac 	bl	800da08 <__sfp_lock_acquire>
 800dab0:	4b1e      	ldr	r3, [pc, #120]	; (800db2c <__sfp+0x84>)
 800dab2:	681e      	ldr	r6, [r3, #0]
 800dab4:	69b3      	ldr	r3, [r6, #24]
 800dab6:	b913      	cbnz	r3, 800dabe <__sfp+0x16>
 800dab8:	4630      	mov	r0, r6
 800daba:	f7ff ffbd 	bl	800da38 <__sinit>
 800dabe:	3648      	adds	r6, #72	; 0x48
 800dac0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dac4:	3b01      	subs	r3, #1
 800dac6:	d503      	bpl.n	800dad0 <__sfp+0x28>
 800dac8:	6833      	ldr	r3, [r6, #0]
 800daca:	b30b      	cbz	r3, 800db10 <__sfp+0x68>
 800dacc:	6836      	ldr	r6, [r6, #0]
 800dace:	e7f7      	b.n	800dac0 <__sfp+0x18>
 800dad0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dad4:	b9d5      	cbnz	r5, 800db0c <__sfp+0x64>
 800dad6:	4b16      	ldr	r3, [pc, #88]	; (800db30 <__sfp+0x88>)
 800dad8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dadc:	60e3      	str	r3, [r4, #12]
 800dade:	6665      	str	r5, [r4, #100]	; 0x64
 800dae0:	f000 f847 	bl	800db72 <__retarget_lock_init_recursive>
 800dae4:	f7ff ff96 	bl	800da14 <__sfp_lock_release>
 800dae8:	2208      	movs	r2, #8
 800daea:	4629      	mov	r1, r5
 800daec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800daf0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800daf4:	6025      	str	r5, [r4, #0]
 800daf6:	61a5      	str	r5, [r4, #24]
 800daf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dafc:	f7ff fd24 	bl	800d548 <memset>
 800db00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800db04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800db08:	4620      	mov	r0, r4
 800db0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db0c:	3468      	adds	r4, #104	; 0x68
 800db0e:	e7d9      	b.n	800dac4 <__sfp+0x1c>
 800db10:	2104      	movs	r1, #4
 800db12:	4638      	mov	r0, r7
 800db14:	f7ff ff62 	bl	800d9dc <__sfmoreglue>
 800db18:	4604      	mov	r4, r0
 800db1a:	6030      	str	r0, [r6, #0]
 800db1c:	2800      	cmp	r0, #0
 800db1e:	d1d5      	bne.n	800dacc <__sfp+0x24>
 800db20:	f7ff ff78 	bl	800da14 <__sfp_lock_release>
 800db24:	230c      	movs	r3, #12
 800db26:	603b      	str	r3, [r7, #0]
 800db28:	e7ee      	b.n	800db08 <__sfp+0x60>
 800db2a:	bf00      	nop
 800db2c:	0800ecf0 	.word	0x0800ecf0
 800db30:	ffff0001 	.word	0xffff0001

0800db34 <_fwalk_reent>:
 800db34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db38:	4606      	mov	r6, r0
 800db3a:	4688      	mov	r8, r1
 800db3c:	2700      	movs	r7, #0
 800db3e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800db42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800db46:	f1b9 0901 	subs.w	r9, r9, #1
 800db4a:	d505      	bpl.n	800db58 <_fwalk_reent+0x24>
 800db4c:	6824      	ldr	r4, [r4, #0]
 800db4e:	2c00      	cmp	r4, #0
 800db50:	d1f7      	bne.n	800db42 <_fwalk_reent+0xe>
 800db52:	4638      	mov	r0, r7
 800db54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db58:	89ab      	ldrh	r3, [r5, #12]
 800db5a:	2b01      	cmp	r3, #1
 800db5c:	d907      	bls.n	800db6e <_fwalk_reent+0x3a>
 800db5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800db62:	3301      	adds	r3, #1
 800db64:	d003      	beq.n	800db6e <_fwalk_reent+0x3a>
 800db66:	4629      	mov	r1, r5
 800db68:	4630      	mov	r0, r6
 800db6a:	47c0      	blx	r8
 800db6c:	4307      	orrs	r7, r0
 800db6e:	3568      	adds	r5, #104	; 0x68
 800db70:	e7e9      	b.n	800db46 <_fwalk_reent+0x12>

0800db72 <__retarget_lock_init_recursive>:
 800db72:	4770      	bx	lr

0800db74 <__retarget_lock_acquire_recursive>:
 800db74:	4770      	bx	lr

0800db76 <__retarget_lock_release_recursive>:
 800db76:	4770      	bx	lr

0800db78 <__swhatbuf_r>:
 800db78:	b570      	push	{r4, r5, r6, lr}
 800db7a:	460e      	mov	r6, r1
 800db7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db80:	4614      	mov	r4, r2
 800db82:	2900      	cmp	r1, #0
 800db84:	461d      	mov	r5, r3
 800db86:	b096      	sub	sp, #88	; 0x58
 800db88:	da07      	bge.n	800db9a <__swhatbuf_r+0x22>
 800db8a:	2300      	movs	r3, #0
 800db8c:	602b      	str	r3, [r5, #0]
 800db8e:	89b3      	ldrh	r3, [r6, #12]
 800db90:	061a      	lsls	r2, r3, #24
 800db92:	d410      	bmi.n	800dbb6 <__swhatbuf_r+0x3e>
 800db94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db98:	e00e      	b.n	800dbb8 <__swhatbuf_r+0x40>
 800db9a:	466a      	mov	r2, sp
 800db9c:	f000 fc5e 	bl	800e45c <_fstat_r>
 800dba0:	2800      	cmp	r0, #0
 800dba2:	dbf2      	blt.n	800db8a <__swhatbuf_r+0x12>
 800dba4:	9a01      	ldr	r2, [sp, #4]
 800dba6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dbaa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dbae:	425a      	negs	r2, r3
 800dbb0:	415a      	adcs	r2, r3
 800dbb2:	602a      	str	r2, [r5, #0]
 800dbb4:	e7ee      	b.n	800db94 <__swhatbuf_r+0x1c>
 800dbb6:	2340      	movs	r3, #64	; 0x40
 800dbb8:	2000      	movs	r0, #0
 800dbba:	6023      	str	r3, [r4, #0]
 800dbbc:	b016      	add	sp, #88	; 0x58
 800dbbe:	bd70      	pop	{r4, r5, r6, pc}

0800dbc0 <__smakebuf_r>:
 800dbc0:	898b      	ldrh	r3, [r1, #12]
 800dbc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dbc4:	079d      	lsls	r5, r3, #30
 800dbc6:	4606      	mov	r6, r0
 800dbc8:	460c      	mov	r4, r1
 800dbca:	d507      	bpl.n	800dbdc <__smakebuf_r+0x1c>
 800dbcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dbd0:	6023      	str	r3, [r4, #0]
 800dbd2:	6123      	str	r3, [r4, #16]
 800dbd4:	2301      	movs	r3, #1
 800dbd6:	6163      	str	r3, [r4, #20]
 800dbd8:	b002      	add	sp, #8
 800dbda:	bd70      	pop	{r4, r5, r6, pc}
 800dbdc:	466a      	mov	r2, sp
 800dbde:	ab01      	add	r3, sp, #4
 800dbe0:	f7ff ffca 	bl	800db78 <__swhatbuf_r>
 800dbe4:	9900      	ldr	r1, [sp, #0]
 800dbe6:	4605      	mov	r5, r0
 800dbe8:	4630      	mov	r0, r6
 800dbea:	f000 f875 	bl	800dcd8 <_malloc_r>
 800dbee:	b948      	cbnz	r0, 800dc04 <__smakebuf_r+0x44>
 800dbf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbf4:	059a      	lsls	r2, r3, #22
 800dbf6:	d4ef      	bmi.n	800dbd8 <__smakebuf_r+0x18>
 800dbf8:	f023 0303 	bic.w	r3, r3, #3
 800dbfc:	f043 0302 	orr.w	r3, r3, #2
 800dc00:	81a3      	strh	r3, [r4, #12]
 800dc02:	e7e3      	b.n	800dbcc <__smakebuf_r+0xc>
 800dc04:	4b0d      	ldr	r3, [pc, #52]	; (800dc3c <__smakebuf_r+0x7c>)
 800dc06:	62b3      	str	r3, [r6, #40]	; 0x28
 800dc08:	89a3      	ldrh	r3, [r4, #12]
 800dc0a:	6020      	str	r0, [r4, #0]
 800dc0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc10:	81a3      	strh	r3, [r4, #12]
 800dc12:	9b00      	ldr	r3, [sp, #0]
 800dc14:	6120      	str	r0, [r4, #16]
 800dc16:	6163      	str	r3, [r4, #20]
 800dc18:	9b01      	ldr	r3, [sp, #4]
 800dc1a:	b15b      	cbz	r3, 800dc34 <__smakebuf_r+0x74>
 800dc1c:	4630      	mov	r0, r6
 800dc1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc22:	f000 fc2d 	bl	800e480 <_isatty_r>
 800dc26:	b128      	cbz	r0, 800dc34 <__smakebuf_r+0x74>
 800dc28:	89a3      	ldrh	r3, [r4, #12]
 800dc2a:	f023 0303 	bic.w	r3, r3, #3
 800dc2e:	f043 0301 	orr.w	r3, r3, #1
 800dc32:	81a3      	strh	r3, [r4, #12]
 800dc34:	89a0      	ldrh	r0, [r4, #12]
 800dc36:	4305      	orrs	r5, r0
 800dc38:	81a5      	strh	r5, [r4, #12]
 800dc3a:	e7cd      	b.n	800dbd8 <__smakebuf_r+0x18>
 800dc3c:	0800d9d1 	.word	0x0800d9d1

0800dc40 <_free_r>:
 800dc40:	b538      	push	{r3, r4, r5, lr}
 800dc42:	4605      	mov	r5, r0
 800dc44:	2900      	cmp	r1, #0
 800dc46:	d043      	beq.n	800dcd0 <_free_r+0x90>
 800dc48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc4c:	1f0c      	subs	r4, r1, #4
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	bfb8      	it	lt
 800dc52:	18e4      	addlt	r4, r4, r3
 800dc54:	f000 fc6c 	bl	800e530 <__malloc_lock>
 800dc58:	4a1e      	ldr	r2, [pc, #120]	; (800dcd4 <_free_r+0x94>)
 800dc5a:	6813      	ldr	r3, [r2, #0]
 800dc5c:	4610      	mov	r0, r2
 800dc5e:	b933      	cbnz	r3, 800dc6e <_free_r+0x2e>
 800dc60:	6063      	str	r3, [r4, #4]
 800dc62:	6014      	str	r4, [r2, #0]
 800dc64:	4628      	mov	r0, r5
 800dc66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc6a:	f000 bc67 	b.w	800e53c <__malloc_unlock>
 800dc6e:	42a3      	cmp	r3, r4
 800dc70:	d90a      	bls.n	800dc88 <_free_r+0x48>
 800dc72:	6821      	ldr	r1, [r4, #0]
 800dc74:	1862      	adds	r2, r4, r1
 800dc76:	4293      	cmp	r3, r2
 800dc78:	bf01      	itttt	eq
 800dc7a:	681a      	ldreq	r2, [r3, #0]
 800dc7c:	685b      	ldreq	r3, [r3, #4]
 800dc7e:	1852      	addeq	r2, r2, r1
 800dc80:	6022      	streq	r2, [r4, #0]
 800dc82:	6063      	str	r3, [r4, #4]
 800dc84:	6004      	str	r4, [r0, #0]
 800dc86:	e7ed      	b.n	800dc64 <_free_r+0x24>
 800dc88:	461a      	mov	r2, r3
 800dc8a:	685b      	ldr	r3, [r3, #4]
 800dc8c:	b10b      	cbz	r3, 800dc92 <_free_r+0x52>
 800dc8e:	42a3      	cmp	r3, r4
 800dc90:	d9fa      	bls.n	800dc88 <_free_r+0x48>
 800dc92:	6811      	ldr	r1, [r2, #0]
 800dc94:	1850      	adds	r0, r2, r1
 800dc96:	42a0      	cmp	r0, r4
 800dc98:	d10b      	bne.n	800dcb2 <_free_r+0x72>
 800dc9a:	6820      	ldr	r0, [r4, #0]
 800dc9c:	4401      	add	r1, r0
 800dc9e:	1850      	adds	r0, r2, r1
 800dca0:	4283      	cmp	r3, r0
 800dca2:	6011      	str	r1, [r2, #0]
 800dca4:	d1de      	bne.n	800dc64 <_free_r+0x24>
 800dca6:	6818      	ldr	r0, [r3, #0]
 800dca8:	685b      	ldr	r3, [r3, #4]
 800dcaa:	4401      	add	r1, r0
 800dcac:	6011      	str	r1, [r2, #0]
 800dcae:	6053      	str	r3, [r2, #4]
 800dcb0:	e7d8      	b.n	800dc64 <_free_r+0x24>
 800dcb2:	d902      	bls.n	800dcba <_free_r+0x7a>
 800dcb4:	230c      	movs	r3, #12
 800dcb6:	602b      	str	r3, [r5, #0]
 800dcb8:	e7d4      	b.n	800dc64 <_free_r+0x24>
 800dcba:	6820      	ldr	r0, [r4, #0]
 800dcbc:	1821      	adds	r1, r4, r0
 800dcbe:	428b      	cmp	r3, r1
 800dcc0:	bf01      	itttt	eq
 800dcc2:	6819      	ldreq	r1, [r3, #0]
 800dcc4:	685b      	ldreq	r3, [r3, #4]
 800dcc6:	1809      	addeq	r1, r1, r0
 800dcc8:	6021      	streq	r1, [r4, #0]
 800dcca:	6063      	str	r3, [r4, #4]
 800dccc:	6054      	str	r4, [r2, #4]
 800dcce:	e7c9      	b.n	800dc64 <_free_r+0x24>
 800dcd0:	bd38      	pop	{r3, r4, r5, pc}
 800dcd2:	bf00      	nop
 800dcd4:	2000082c 	.word	0x2000082c

0800dcd8 <_malloc_r>:
 800dcd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcda:	1ccd      	adds	r5, r1, #3
 800dcdc:	f025 0503 	bic.w	r5, r5, #3
 800dce0:	3508      	adds	r5, #8
 800dce2:	2d0c      	cmp	r5, #12
 800dce4:	bf38      	it	cc
 800dce6:	250c      	movcc	r5, #12
 800dce8:	2d00      	cmp	r5, #0
 800dcea:	4606      	mov	r6, r0
 800dcec:	db01      	blt.n	800dcf2 <_malloc_r+0x1a>
 800dcee:	42a9      	cmp	r1, r5
 800dcf0:	d903      	bls.n	800dcfa <_malloc_r+0x22>
 800dcf2:	230c      	movs	r3, #12
 800dcf4:	6033      	str	r3, [r6, #0]
 800dcf6:	2000      	movs	r0, #0
 800dcf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcfa:	f000 fc19 	bl	800e530 <__malloc_lock>
 800dcfe:	4921      	ldr	r1, [pc, #132]	; (800dd84 <_malloc_r+0xac>)
 800dd00:	680a      	ldr	r2, [r1, #0]
 800dd02:	4614      	mov	r4, r2
 800dd04:	b99c      	cbnz	r4, 800dd2e <_malloc_r+0x56>
 800dd06:	4f20      	ldr	r7, [pc, #128]	; (800dd88 <_malloc_r+0xb0>)
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	b923      	cbnz	r3, 800dd16 <_malloc_r+0x3e>
 800dd0c:	4621      	mov	r1, r4
 800dd0e:	4630      	mov	r0, r6
 800dd10:	f000 fb2e 	bl	800e370 <_sbrk_r>
 800dd14:	6038      	str	r0, [r7, #0]
 800dd16:	4629      	mov	r1, r5
 800dd18:	4630      	mov	r0, r6
 800dd1a:	f000 fb29 	bl	800e370 <_sbrk_r>
 800dd1e:	1c43      	adds	r3, r0, #1
 800dd20:	d123      	bne.n	800dd6a <_malloc_r+0x92>
 800dd22:	230c      	movs	r3, #12
 800dd24:	4630      	mov	r0, r6
 800dd26:	6033      	str	r3, [r6, #0]
 800dd28:	f000 fc08 	bl	800e53c <__malloc_unlock>
 800dd2c:	e7e3      	b.n	800dcf6 <_malloc_r+0x1e>
 800dd2e:	6823      	ldr	r3, [r4, #0]
 800dd30:	1b5b      	subs	r3, r3, r5
 800dd32:	d417      	bmi.n	800dd64 <_malloc_r+0x8c>
 800dd34:	2b0b      	cmp	r3, #11
 800dd36:	d903      	bls.n	800dd40 <_malloc_r+0x68>
 800dd38:	6023      	str	r3, [r4, #0]
 800dd3a:	441c      	add	r4, r3
 800dd3c:	6025      	str	r5, [r4, #0]
 800dd3e:	e004      	b.n	800dd4a <_malloc_r+0x72>
 800dd40:	6863      	ldr	r3, [r4, #4]
 800dd42:	42a2      	cmp	r2, r4
 800dd44:	bf0c      	ite	eq
 800dd46:	600b      	streq	r3, [r1, #0]
 800dd48:	6053      	strne	r3, [r2, #4]
 800dd4a:	4630      	mov	r0, r6
 800dd4c:	f000 fbf6 	bl	800e53c <__malloc_unlock>
 800dd50:	f104 000b 	add.w	r0, r4, #11
 800dd54:	1d23      	adds	r3, r4, #4
 800dd56:	f020 0007 	bic.w	r0, r0, #7
 800dd5a:	1ac2      	subs	r2, r0, r3
 800dd5c:	d0cc      	beq.n	800dcf8 <_malloc_r+0x20>
 800dd5e:	1a1b      	subs	r3, r3, r0
 800dd60:	50a3      	str	r3, [r4, r2]
 800dd62:	e7c9      	b.n	800dcf8 <_malloc_r+0x20>
 800dd64:	4622      	mov	r2, r4
 800dd66:	6864      	ldr	r4, [r4, #4]
 800dd68:	e7cc      	b.n	800dd04 <_malloc_r+0x2c>
 800dd6a:	1cc4      	adds	r4, r0, #3
 800dd6c:	f024 0403 	bic.w	r4, r4, #3
 800dd70:	42a0      	cmp	r0, r4
 800dd72:	d0e3      	beq.n	800dd3c <_malloc_r+0x64>
 800dd74:	1a21      	subs	r1, r4, r0
 800dd76:	4630      	mov	r0, r6
 800dd78:	f000 fafa 	bl	800e370 <_sbrk_r>
 800dd7c:	3001      	adds	r0, #1
 800dd7e:	d1dd      	bne.n	800dd3c <_malloc_r+0x64>
 800dd80:	e7cf      	b.n	800dd22 <_malloc_r+0x4a>
 800dd82:	bf00      	nop
 800dd84:	2000082c 	.word	0x2000082c
 800dd88:	20000830 	.word	0x20000830

0800dd8c <__ssputs_r>:
 800dd8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd90:	688e      	ldr	r6, [r1, #8]
 800dd92:	4682      	mov	sl, r0
 800dd94:	429e      	cmp	r6, r3
 800dd96:	460c      	mov	r4, r1
 800dd98:	4690      	mov	r8, r2
 800dd9a:	461f      	mov	r7, r3
 800dd9c:	d838      	bhi.n	800de10 <__ssputs_r+0x84>
 800dd9e:	898a      	ldrh	r2, [r1, #12]
 800dda0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dda4:	d032      	beq.n	800de0c <__ssputs_r+0x80>
 800dda6:	6825      	ldr	r5, [r4, #0]
 800dda8:	6909      	ldr	r1, [r1, #16]
 800ddaa:	3301      	adds	r3, #1
 800ddac:	eba5 0901 	sub.w	r9, r5, r1
 800ddb0:	6965      	ldr	r5, [r4, #20]
 800ddb2:	444b      	add	r3, r9
 800ddb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ddb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ddbc:	106d      	asrs	r5, r5, #1
 800ddbe:	429d      	cmp	r5, r3
 800ddc0:	bf38      	it	cc
 800ddc2:	461d      	movcc	r5, r3
 800ddc4:	0553      	lsls	r3, r2, #21
 800ddc6:	d531      	bpl.n	800de2c <__ssputs_r+0xa0>
 800ddc8:	4629      	mov	r1, r5
 800ddca:	f7ff ff85 	bl	800dcd8 <_malloc_r>
 800ddce:	4606      	mov	r6, r0
 800ddd0:	b950      	cbnz	r0, 800dde8 <__ssputs_r+0x5c>
 800ddd2:	230c      	movs	r3, #12
 800ddd4:	f04f 30ff 	mov.w	r0, #4294967295
 800ddd8:	f8ca 3000 	str.w	r3, [sl]
 800dddc:	89a3      	ldrh	r3, [r4, #12]
 800ddde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dde2:	81a3      	strh	r3, [r4, #12]
 800dde4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dde8:	464a      	mov	r2, r9
 800ddea:	6921      	ldr	r1, [r4, #16]
 800ddec:	f000 fb78 	bl	800e4e0 <memcpy>
 800ddf0:	89a3      	ldrh	r3, [r4, #12]
 800ddf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ddf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddfa:	81a3      	strh	r3, [r4, #12]
 800ddfc:	6126      	str	r6, [r4, #16]
 800ddfe:	444e      	add	r6, r9
 800de00:	6026      	str	r6, [r4, #0]
 800de02:	463e      	mov	r6, r7
 800de04:	6165      	str	r5, [r4, #20]
 800de06:	eba5 0509 	sub.w	r5, r5, r9
 800de0a:	60a5      	str	r5, [r4, #8]
 800de0c:	42be      	cmp	r6, r7
 800de0e:	d900      	bls.n	800de12 <__ssputs_r+0x86>
 800de10:	463e      	mov	r6, r7
 800de12:	4632      	mov	r2, r6
 800de14:	4641      	mov	r1, r8
 800de16:	6820      	ldr	r0, [r4, #0]
 800de18:	f000 fb70 	bl	800e4fc <memmove>
 800de1c:	68a3      	ldr	r3, [r4, #8]
 800de1e:	6822      	ldr	r2, [r4, #0]
 800de20:	1b9b      	subs	r3, r3, r6
 800de22:	4432      	add	r2, r6
 800de24:	2000      	movs	r0, #0
 800de26:	60a3      	str	r3, [r4, #8]
 800de28:	6022      	str	r2, [r4, #0]
 800de2a:	e7db      	b.n	800dde4 <__ssputs_r+0x58>
 800de2c:	462a      	mov	r2, r5
 800de2e:	f000 fb8b 	bl	800e548 <_realloc_r>
 800de32:	4606      	mov	r6, r0
 800de34:	2800      	cmp	r0, #0
 800de36:	d1e1      	bne.n	800ddfc <__ssputs_r+0x70>
 800de38:	4650      	mov	r0, sl
 800de3a:	6921      	ldr	r1, [r4, #16]
 800de3c:	f7ff ff00 	bl	800dc40 <_free_r>
 800de40:	e7c7      	b.n	800ddd2 <__ssputs_r+0x46>
	...

0800de44 <_svfiprintf_r>:
 800de44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de48:	4698      	mov	r8, r3
 800de4a:	898b      	ldrh	r3, [r1, #12]
 800de4c:	4607      	mov	r7, r0
 800de4e:	061b      	lsls	r3, r3, #24
 800de50:	460d      	mov	r5, r1
 800de52:	4614      	mov	r4, r2
 800de54:	b09d      	sub	sp, #116	; 0x74
 800de56:	d50e      	bpl.n	800de76 <_svfiprintf_r+0x32>
 800de58:	690b      	ldr	r3, [r1, #16]
 800de5a:	b963      	cbnz	r3, 800de76 <_svfiprintf_r+0x32>
 800de5c:	2140      	movs	r1, #64	; 0x40
 800de5e:	f7ff ff3b 	bl	800dcd8 <_malloc_r>
 800de62:	6028      	str	r0, [r5, #0]
 800de64:	6128      	str	r0, [r5, #16]
 800de66:	b920      	cbnz	r0, 800de72 <_svfiprintf_r+0x2e>
 800de68:	230c      	movs	r3, #12
 800de6a:	603b      	str	r3, [r7, #0]
 800de6c:	f04f 30ff 	mov.w	r0, #4294967295
 800de70:	e0d1      	b.n	800e016 <_svfiprintf_r+0x1d2>
 800de72:	2340      	movs	r3, #64	; 0x40
 800de74:	616b      	str	r3, [r5, #20]
 800de76:	2300      	movs	r3, #0
 800de78:	9309      	str	r3, [sp, #36]	; 0x24
 800de7a:	2320      	movs	r3, #32
 800de7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de80:	2330      	movs	r3, #48	; 0x30
 800de82:	f04f 0901 	mov.w	r9, #1
 800de86:	f8cd 800c 	str.w	r8, [sp, #12]
 800de8a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e030 <_svfiprintf_r+0x1ec>
 800de8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de92:	4623      	mov	r3, r4
 800de94:	469a      	mov	sl, r3
 800de96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de9a:	b10a      	cbz	r2, 800dea0 <_svfiprintf_r+0x5c>
 800de9c:	2a25      	cmp	r2, #37	; 0x25
 800de9e:	d1f9      	bne.n	800de94 <_svfiprintf_r+0x50>
 800dea0:	ebba 0b04 	subs.w	fp, sl, r4
 800dea4:	d00b      	beq.n	800debe <_svfiprintf_r+0x7a>
 800dea6:	465b      	mov	r3, fp
 800dea8:	4622      	mov	r2, r4
 800deaa:	4629      	mov	r1, r5
 800deac:	4638      	mov	r0, r7
 800deae:	f7ff ff6d 	bl	800dd8c <__ssputs_r>
 800deb2:	3001      	adds	r0, #1
 800deb4:	f000 80aa 	beq.w	800e00c <_svfiprintf_r+0x1c8>
 800deb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800deba:	445a      	add	r2, fp
 800debc:	9209      	str	r2, [sp, #36]	; 0x24
 800debe:	f89a 3000 	ldrb.w	r3, [sl]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	f000 80a2 	beq.w	800e00c <_svfiprintf_r+0x1c8>
 800dec8:	2300      	movs	r3, #0
 800deca:	f04f 32ff 	mov.w	r2, #4294967295
 800dece:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ded2:	f10a 0a01 	add.w	sl, sl, #1
 800ded6:	9304      	str	r3, [sp, #16]
 800ded8:	9307      	str	r3, [sp, #28]
 800deda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dede:	931a      	str	r3, [sp, #104]	; 0x68
 800dee0:	4654      	mov	r4, sl
 800dee2:	2205      	movs	r2, #5
 800dee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dee8:	4851      	ldr	r0, [pc, #324]	; (800e030 <_svfiprintf_r+0x1ec>)
 800deea:	f000 faeb 	bl	800e4c4 <memchr>
 800deee:	9a04      	ldr	r2, [sp, #16]
 800def0:	b9d8      	cbnz	r0, 800df2a <_svfiprintf_r+0xe6>
 800def2:	06d0      	lsls	r0, r2, #27
 800def4:	bf44      	itt	mi
 800def6:	2320      	movmi	r3, #32
 800def8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800defc:	0711      	lsls	r1, r2, #28
 800defe:	bf44      	itt	mi
 800df00:	232b      	movmi	r3, #43	; 0x2b
 800df02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df06:	f89a 3000 	ldrb.w	r3, [sl]
 800df0a:	2b2a      	cmp	r3, #42	; 0x2a
 800df0c:	d015      	beq.n	800df3a <_svfiprintf_r+0xf6>
 800df0e:	4654      	mov	r4, sl
 800df10:	2000      	movs	r0, #0
 800df12:	f04f 0c0a 	mov.w	ip, #10
 800df16:	9a07      	ldr	r2, [sp, #28]
 800df18:	4621      	mov	r1, r4
 800df1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df1e:	3b30      	subs	r3, #48	; 0x30
 800df20:	2b09      	cmp	r3, #9
 800df22:	d94e      	bls.n	800dfc2 <_svfiprintf_r+0x17e>
 800df24:	b1b0      	cbz	r0, 800df54 <_svfiprintf_r+0x110>
 800df26:	9207      	str	r2, [sp, #28]
 800df28:	e014      	b.n	800df54 <_svfiprintf_r+0x110>
 800df2a:	eba0 0308 	sub.w	r3, r0, r8
 800df2e:	fa09 f303 	lsl.w	r3, r9, r3
 800df32:	4313      	orrs	r3, r2
 800df34:	46a2      	mov	sl, r4
 800df36:	9304      	str	r3, [sp, #16]
 800df38:	e7d2      	b.n	800dee0 <_svfiprintf_r+0x9c>
 800df3a:	9b03      	ldr	r3, [sp, #12]
 800df3c:	1d19      	adds	r1, r3, #4
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	9103      	str	r1, [sp, #12]
 800df42:	2b00      	cmp	r3, #0
 800df44:	bfbb      	ittet	lt
 800df46:	425b      	neglt	r3, r3
 800df48:	f042 0202 	orrlt.w	r2, r2, #2
 800df4c:	9307      	strge	r3, [sp, #28]
 800df4e:	9307      	strlt	r3, [sp, #28]
 800df50:	bfb8      	it	lt
 800df52:	9204      	strlt	r2, [sp, #16]
 800df54:	7823      	ldrb	r3, [r4, #0]
 800df56:	2b2e      	cmp	r3, #46	; 0x2e
 800df58:	d10c      	bne.n	800df74 <_svfiprintf_r+0x130>
 800df5a:	7863      	ldrb	r3, [r4, #1]
 800df5c:	2b2a      	cmp	r3, #42	; 0x2a
 800df5e:	d135      	bne.n	800dfcc <_svfiprintf_r+0x188>
 800df60:	9b03      	ldr	r3, [sp, #12]
 800df62:	3402      	adds	r4, #2
 800df64:	1d1a      	adds	r2, r3, #4
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	9203      	str	r2, [sp, #12]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	bfb8      	it	lt
 800df6e:	f04f 33ff 	movlt.w	r3, #4294967295
 800df72:	9305      	str	r3, [sp, #20]
 800df74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e040 <_svfiprintf_r+0x1fc>
 800df78:	2203      	movs	r2, #3
 800df7a:	4650      	mov	r0, sl
 800df7c:	7821      	ldrb	r1, [r4, #0]
 800df7e:	f000 faa1 	bl	800e4c4 <memchr>
 800df82:	b140      	cbz	r0, 800df96 <_svfiprintf_r+0x152>
 800df84:	2340      	movs	r3, #64	; 0x40
 800df86:	eba0 000a 	sub.w	r0, r0, sl
 800df8a:	fa03 f000 	lsl.w	r0, r3, r0
 800df8e:	9b04      	ldr	r3, [sp, #16]
 800df90:	3401      	adds	r4, #1
 800df92:	4303      	orrs	r3, r0
 800df94:	9304      	str	r3, [sp, #16]
 800df96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df9a:	2206      	movs	r2, #6
 800df9c:	4825      	ldr	r0, [pc, #148]	; (800e034 <_svfiprintf_r+0x1f0>)
 800df9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dfa2:	f000 fa8f 	bl	800e4c4 <memchr>
 800dfa6:	2800      	cmp	r0, #0
 800dfa8:	d038      	beq.n	800e01c <_svfiprintf_r+0x1d8>
 800dfaa:	4b23      	ldr	r3, [pc, #140]	; (800e038 <_svfiprintf_r+0x1f4>)
 800dfac:	bb1b      	cbnz	r3, 800dff6 <_svfiprintf_r+0x1b2>
 800dfae:	9b03      	ldr	r3, [sp, #12]
 800dfb0:	3307      	adds	r3, #7
 800dfb2:	f023 0307 	bic.w	r3, r3, #7
 800dfb6:	3308      	adds	r3, #8
 800dfb8:	9303      	str	r3, [sp, #12]
 800dfba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfbc:	4433      	add	r3, r6
 800dfbe:	9309      	str	r3, [sp, #36]	; 0x24
 800dfc0:	e767      	b.n	800de92 <_svfiprintf_r+0x4e>
 800dfc2:	460c      	mov	r4, r1
 800dfc4:	2001      	movs	r0, #1
 800dfc6:	fb0c 3202 	mla	r2, ip, r2, r3
 800dfca:	e7a5      	b.n	800df18 <_svfiprintf_r+0xd4>
 800dfcc:	2300      	movs	r3, #0
 800dfce:	f04f 0c0a 	mov.w	ip, #10
 800dfd2:	4619      	mov	r1, r3
 800dfd4:	3401      	adds	r4, #1
 800dfd6:	9305      	str	r3, [sp, #20]
 800dfd8:	4620      	mov	r0, r4
 800dfda:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfde:	3a30      	subs	r2, #48	; 0x30
 800dfe0:	2a09      	cmp	r2, #9
 800dfe2:	d903      	bls.n	800dfec <_svfiprintf_r+0x1a8>
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d0c5      	beq.n	800df74 <_svfiprintf_r+0x130>
 800dfe8:	9105      	str	r1, [sp, #20]
 800dfea:	e7c3      	b.n	800df74 <_svfiprintf_r+0x130>
 800dfec:	4604      	mov	r4, r0
 800dfee:	2301      	movs	r3, #1
 800dff0:	fb0c 2101 	mla	r1, ip, r1, r2
 800dff4:	e7f0      	b.n	800dfd8 <_svfiprintf_r+0x194>
 800dff6:	ab03      	add	r3, sp, #12
 800dff8:	9300      	str	r3, [sp, #0]
 800dffa:	462a      	mov	r2, r5
 800dffc:	4638      	mov	r0, r7
 800dffe:	4b0f      	ldr	r3, [pc, #60]	; (800e03c <_svfiprintf_r+0x1f8>)
 800e000:	a904      	add	r1, sp, #16
 800e002:	f3af 8000 	nop.w
 800e006:	1c42      	adds	r2, r0, #1
 800e008:	4606      	mov	r6, r0
 800e00a:	d1d6      	bne.n	800dfba <_svfiprintf_r+0x176>
 800e00c:	89ab      	ldrh	r3, [r5, #12]
 800e00e:	065b      	lsls	r3, r3, #25
 800e010:	f53f af2c 	bmi.w	800de6c <_svfiprintf_r+0x28>
 800e014:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e016:	b01d      	add	sp, #116	; 0x74
 800e018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e01c:	ab03      	add	r3, sp, #12
 800e01e:	9300      	str	r3, [sp, #0]
 800e020:	462a      	mov	r2, r5
 800e022:	4638      	mov	r0, r7
 800e024:	4b05      	ldr	r3, [pc, #20]	; (800e03c <_svfiprintf_r+0x1f8>)
 800e026:	a904      	add	r1, sp, #16
 800e028:	f000 f87c 	bl	800e124 <_printf_i>
 800e02c:	e7eb      	b.n	800e006 <_svfiprintf_r+0x1c2>
 800e02e:	bf00      	nop
 800e030:	0800ed54 	.word	0x0800ed54
 800e034:	0800ed5e 	.word	0x0800ed5e
 800e038:	00000000 	.word	0x00000000
 800e03c:	0800dd8d 	.word	0x0800dd8d
 800e040:	0800ed5a 	.word	0x0800ed5a

0800e044 <_printf_common>:
 800e044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e048:	4616      	mov	r6, r2
 800e04a:	4699      	mov	r9, r3
 800e04c:	688a      	ldr	r2, [r1, #8]
 800e04e:	690b      	ldr	r3, [r1, #16]
 800e050:	4607      	mov	r7, r0
 800e052:	4293      	cmp	r3, r2
 800e054:	bfb8      	it	lt
 800e056:	4613      	movlt	r3, r2
 800e058:	6033      	str	r3, [r6, #0]
 800e05a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e05e:	460c      	mov	r4, r1
 800e060:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e064:	b10a      	cbz	r2, 800e06a <_printf_common+0x26>
 800e066:	3301      	adds	r3, #1
 800e068:	6033      	str	r3, [r6, #0]
 800e06a:	6823      	ldr	r3, [r4, #0]
 800e06c:	0699      	lsls	r1, r3, #26
 800e06e:	bf42      	ittt	mi
 800e070:	6833      	ldrmi	r3, [r6, #0]
 800e072:	3302      	addmi	r3, #2
 800e074:	6033      	strmi	r3, [r6, #0]
 800e076:	6825      	ldr	r5, [r4, #0]
 800e078:	f015 0506 	ands.w	r5, r5, #6
 800e07c:	d106      	bne.n	800e08c <_printf_common+0x48>
 800e07e:	f104 0a19 	add.w	sl, r4, #25
 800e082:	68e3      	ldr	r3, [r4, #12]
 800e084:	6832      	ldr	r2, [r6, #0]
 800e086:	1a9b      	subs	r3, r3, r2
 800e088:	42ab      	cmp	r3, r5
 800e08a:	dc28      	bgt.n	800e0de <_printf_common+0x9a>
 800e08c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e090:	1e13      	subs	r3, r2, #0
 800e092:	6822      	ldr	r2, [r4, #0]
 800e094:	bf18      	it	ne
 800e096:	2301      	movne	r3, #1
 800e098:	0692      	lsls	r2, r2, #26
 800e09a:	d42d      	bmi.n	800e0f8 <_printf_common+0xb4>
 800e09c:	4649      	mov	r1, r9
 800e09e:	4638      	mov	r0, r7
 800e0a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e0a4:	47c0      	blx	r8
 800e0a6:	3001      	adds	r0, #1
 800e0a8:	d020      	beq.n	800e0ec <_printf_common+0xa8>
 800e0aa:	6823      	ldr	r3, [r4, #0]
 800e0ac:	68e5      	ldr	r5, [r4, #12]
 800e0ae:	f003 0306 	and.w	r3, r3, #6
 800e0b2:	2b04      	cmp	r3, #4
 800e0b4:	bf18      	it	ne
 800e0b6:	2500      	movne	r5, #0
 800e0b8:	6832      	ldr	r2, [r6, #0]
 800e0ba:	f04f 0600 	mov.w	r6, #0
 800e0be:	68a3      	ldr	r3, [r4, #8]
 800e0c0:	bf08      	it	eq
 800e0c2:	1aad      	subeq	r5, r5, r2
 800e0c4:	6922      	ldr	r2, [r4, #16]
 800e0c6:	bf08      	it	eq
 800e0c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e0cc:	4293      	cmp	r3, r2
 800e0ce:	bfc4      	itt	gt
 800e0d0:	1a9b      	subgt	r3, r3, r2
 800e0d2:	18ed      	addgt	r5, r5, r3
 800e0d4:	341a      	adds	r4, #26
 800e0d6:	42b5      	cmp	r5, r6
 800e0d8:	d11a      	bne.n	800e110 <_printf_common+0xcc>
 800e0da:	2000      	movs	r0, #0
 800e0dc:	e008      	b.n	800e0f0 <_printf_common+0xac>
 800e0de:	2301      	movs	r3, #1
 800e0e0:	4652      	mov	r2, sl
 800e0e2:	4649      	mov	r1, r9
 800e0e4:	4638      	mov	r0, r7
 800e0e6:	47c0      	blx	r8
 800e0e8:	3001      	adds	r0, #1
 800e0ea:	d103      	bne.n	800e0f4 <_printf_common+0xb0>
 800e0ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e0f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0f4:	3501      	adds	r5, #1
 800e0f6:	e7c4      	b.n	800e082 <_printf_common+0x3e>
 800e0f8:	2030      	movs	r0, #48	; 0x30
 800e0fa:	18e1      	adds	r1, r4, r3
 800e0fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e100:	1c5a      	adds	r2, r3, #1
 800e102:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e106:	4422      	add	r2, r4
 800e108:	3302      	adds	r3, #2
 800e10a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e10e:	e7c5      	b.n	800e09c <_printf_common+0x58>
 800e110:	2301      	movs	r3, #1
 800e112:	4622      	mov	r2, r4
 800e114:	4649      	mov	r1, r9
 800e116:	4638      	mov	r0, r7
 800e118:	47c0      	blx	r8
 800e11a:	3001      	adds	r0, #1
 800e11c:	d0e6      	beq.n	800e0ec <_printf_common+0xa8>
 800e11e:	3601      	adds	r6, #1
 800e120:	e7d9      	b.n	800e0d6 <_printf_common+0x92>
	...

0800e124 <_printf_i>:
 800e124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e128:	460c      	mov	r4, r1
 800e12a:	7e27      	ldrb	r7, [r4, #24]
 800e12c:	4691      	mov	r9, r2
 800e12e:	2f78      	cmp	r7, #120	; 0x78
 800e130:	4680      	mov	r8, r0
 800e132:	469a      	mov	sl, r3
 800e134:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e136:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e13a:	d807      	bhi.n	800e14c <_printf_i+0x28>
 800e13c:	2f62      	cmp	r7, #98	; 0x62
 800e13e:	d80a      	bhi.n	800e156 <_printf_i+0x32>
 800e140:	2f00      	cmp	r7, #0
 800e142:	f000 80d9 	beq.w	800e2f8 <_printf_i+0x1d4>
 800e146:	2f58      	cmp	r7, #88	; 0x58
 800e148:	f000 80a4 	beq.w	800e294 <_printf_i+0x170>
 800e14c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e150:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e154:	e03a      	b.n	800e1cc <_printf_i+0xa8>
 800e156:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e15a:	2b15      	cmp	r3, #21
 800e15c:	d8f6      	bhi.n	800e14c <_printf_i+0x28>
 800e15e:	a001      	add	r0, pc, #4	; (adr r0, 800e164 <_printf_i+0x40>)
 800e160:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e164:	0800e1bd 	.word	0x0800e1bd
 800e168:	0800e1d1 	.word	0x0800e1d1
 800e16c:	0800e14d 	.word	0x0800e14d
 800e170:	0800e14d 	.word	0x0800e14d
 800e174:	0800e14d 	.word	0x0800e14d
 800e178:	0800e14d 	.word	0x0800e14d
 800e17c:	0800e1d1 	.word	0x0800e1d1
 800e180:	0800e14d 	.word	0x0800e14d
 800e184:	0800e14d 	.word	0x0800e14d
 800e188:	0800e14d 	.word	0x0800e14d
 800e18c:	0800e14d 	.word	0x0800e14d
 800e190:	0800e2df 	.word	0x0800e2df
 800e194:	0800e201 	.word	0x0800e201
 800e198:	0800e2c1 	.word	0x0800e2c1
 800e19c:	0800e14d 	.word	0x0800e14d
 800e1a0:	0800e14d 	.word	0x0800e14d
 800e1a4:	0800e301 	.word	0x0800e301
 800e1a8:	0800e14d 	.word	0x0800e14d
 800e1ac:	0800e201 	.word	0x0800e201
 800e1b0:	0800e14d 	.word	0x0800e14d
 800e1b4:	0800e14d 	.word	0x0800e14d
 800e1b8:	0800e2c9 	.word	0x0800e2c9
 800e1bc:	680b      	ldr	r3, [r1, #0]
 800e1be:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e1c2:	1d1a      	adds	r2, r3, #4
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	600a      	str	r2, [r1, #0]
 800e1c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e1cc:	2301      	movs	r3, #1
 800e1ce:	e0a4      	b.n	800e31a <_printf_i+0x1f6>
 800e1d0:	6825      	ldr	r5, [r4, #0]
 800e1d2:	6808      	ldr	r0, [r1, #0]
 800e1d4:	062e      	lsls	r6, r5, #24
 800e1d6:	f100 0304 	add.w	r3, r0, #4
 800e1da:	d50a      	bpl.n	800e1f2 <_printf_i+0xce>
 800e1dc:	6805      	ldr	r5, [r0, #0]
 800e1de:	600b      	str	r3, [r1, #0]
 800e1e0:	2d00      	cmp	r5, #0
 800e1e2:	da03      	bge.n	800e1ec <_printf_i+0xc8>
 800e1e4:	232d      	movs	r3, #45	; 0x2d
 800e1e6:	426d      	negs	r5, r5
 800e1e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e1ec:	230a      	movs	r3, #10
 800e1ee:	485e      	ldr	r0, [pc, #376]	; (800e368 <_printf_i+0x244>)
 800e1f0:	e019      	b.n	800e226 <_printf_i+0x102>
 800e1f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e1f6:	6805      	ldr	r5, [r0, #0]
 800e1f8:	600b      	str	r3, [r1, #0]
 800e1fa:	bf18      	it	ne
 800e1fc:	b22d      	sxthne	r5, r5
 800e1fe:	e7ef      	b.n	800e1e0 <_printf_i+0xbc>
 800e200:	680b      	ldr	r3, [r1, #0]
 800e202:	6825      	ldr	r5, [r4, #0]
 800e204:	1d18      	adds	r0, r3, #4
 800e206:	6008      	str	r0, [r1, #0]
 800e208:	0628      	lsls	r0, r5, #24
 800e20a:	d501      	bpl.n	800e210 <_printf_i+0xec>
 800e20c:	681d      	ldr	r5, [r3, #0]
 800e20e:	e002      	b.n	800e216 <_printf_i+0xf2>
 800e210:	0669      	lsls	r1, r5, #25
 800e212:	d5fb      	bpl.n	800e20c <_printf_i+0xe8>
 800e214:	881d      	ldrh	r5, [r3, #0]
 800e216:	2f6f      	cmp	r7, #111	; 0x6f
 800e218:	bf0c      	ite	eq
 800e21a:	2308      	moveq	r3, #8
 800e21c:	230a      	movne	r3, #10
 800e21e:	4852      	ldr	r0, [pc, #328]	; (800e368 <_printf_i+0x244>)
 800e220:	2100      	movs	r1, #0
 800e222:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e226:	6866      	ldr	r6, [r4, #4]
 800e228:	2e00      	cmp	r6, #0
 800e22a:	bfa8      	it	ge
 800e22c:	6821      	ldrge	r1, [r4, #0]
 800e22e:	60a6      	str	r6, [r4, #8]
 800e230:	bfa4      	itt	ge
 800e232:	f021 0104 	bicge.w	r1, r1, #4
 800e236:	6021      	strge	r1, [r4, #0]
 800e238:	b90d      	cbnz	r5, 800e23e <_printf_i+0x11a>
 800e23a:	2e00      	cmp	r6, #0
 800e23c:	d04d      	beq.n	800e2da <_printf_i+0x1b6>
 800e23e:	4616      	mov	r6, r2
 800e240:	fbb5 f1f3 	udiv	r1, r5, r3
 800e244:	fb03 5711 	mls	r7, r3, r1, r5
 800e248:	5dc7      	ldrb	r7, [r0, r7]
 800e24a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e24e:	462f      	mov	r7, r5
 800e250:	42bb      	cmp	r3, r7
 800e252:	460d      	mov	r5, r1
 800e254:	d9f4      	bls.n	800e240 <_printf_i+0x11c>
 800e256:	2b08      	cmp	r3, #8
 800e258:	d10b      	bne.n	800e272 <_printf_i+0x14e>
 800e25a:	6823      	ldr	r3, [r4, #0]
 800e25c:	07df      	lsls	r7, r3, #31
 800e25e:	d508      	bpl.n	800e272 <_printf_i+0x14e>
 800e260:	6923      	ldr	r3, [r4, #16]
 800e262:	6861      	ldr	r1, [r4, #4]
 800e264:	4299      	cmp	r1, r3
 800e266:	bfde      	ittt	le
 800e268:	2330      	movle	r3, #48	; 0x30
 800e26a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e26e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e272:	1b92      	subs	r2, r2, r6
 800e274:	6122      	str	r2, [r4, #16]
 800e276:	464b      	mov	r3, r9
 800e278:	4621      	mov	r1, r4
 800e27a:	4640      	mov	r0, r8
 800e27c:	f8cd a000 	str.w	sl, [sp]
 800e280:	aa03      	add	r2, sp, #12
 800e282:	f7ff fedf 	bl	800e044 <_printf_common>
 800e286:	3001      	adds	r0, #1
 800e288:	d14c      	bne.n	800e324 <_printf_i+0x200>
 800e28a:	f04f 30ff 	mov.w	r0, #4294967295
 800e28e:	b004      	add	sp, #16
 800e290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e294:	4834      	ldr	r0, [pc, #208]	; (800e368 <_printf_i+0x244>)
 800e296:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e29a:	680e      	ldr	r6, [r1, #0]
 800e29c:	6823      	ldr	r3, [r4, #0]
 800e29e:	f856 5b04 	ldr.w	r5, [r6], #4
 800e2a2:	061f      	lsls	r7, r3, #24
 800e2a4:	600e      	str	r6, [r1, #0]
 800e2a6:	d514      	bpl.n	800e2d2 <_printf_i+0x1ae>
 800e2a8:	07d9      	lsls	r1, r3, #31
 800e2aa:	bf44      	itt	mi
 800e2ac:	f043 0320 	orrmi.w	r3, r3, #32
 800e2b0:	6023      	strmi	r3, [r4, #0]
 800e2b2:	b91d      	cbnz	r5, 800e2bc <_printf_i+0x198>
 800e2b4:	6823      	ldr	r3, [r4, #0]
 800e2b6:	f023 0320 	bic.w	r3, r3, #32
 800e2ba:	6023      	str	r3, [r4, #0]
 800e2bc:	2310      	movs	r3, #16
 800e2be:	e7af      	b.n	800e220 <_printf_i+0xfc>
 800e2c0:	6823      	ldr	r3, [r4, #0]
 800e2c2:	f043 0320 	orr.w	r3, r3, #32
 800e2c6:	6023      	str	r3, [r4, #0]
 800e2c8:	2378      	movs	r3, #120	; 0x78
 800e2ca:	4828      	ldr	r0, [pc, #160]	; (800e36c <_printf_i+0x248>)
 800e2cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e2d0:	e7e3      	b.n	800e29a <_printf_i+0x176>
 800e2d2:	065e      	lsls	r6, r3, #25
 800e2d4:	bf48      	it	mi
 800e2d6:	b2ad      	uxthmi	r5, r5
 800e2d8:	e7e6      	b.n	800e2a8 <_printf_i+0x184>
 800e2da:	4616      	mov	r6, r2
 800e2dc:	e7bb      	b.n	800e256 <_printf_i+0x132>
 800e2de:	680b      	ldr	r3, [r1, #0]
 800e2e0:	6826      	ldr	r6, [r4, #0]
 800e2e2:	1d1d      	adds	r5, r3, #4
 800e2e4:	6960      	ldr	r0, [r4, #20]
 800e2e6:	600d      	str	r5, [r1, #0]
 800e2e8:	0635      	lsls	r5, r6, #24
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	d501      	bpl.n	800e2f2 <_printf_i+0x1ce>
 800e2ee:	6018      	str	r0, [r3, #0]
 800e2f0:	e002      	b.n	800e2f8 <_printf_i+0x1d4>
 800e2f2:	0671      	lsls	r1, r6, #25
 800e2f4:	d5fb      	bpl.n	800e2ee <_printf_i+0x1ca>
 800e2f6:	8018      	strh	r0, [r3, #0]
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	4616      	mov	r6, r2
 800e2fc:	6123      	str	r3, [r4, #16]
 800e2fe:	e7ba      	b.n	800e276 <_printf_i+0x152>
 800e300:	680b      	ldr	r3, [r1, #0]
 800e302:	1d1a      	adds	r2, r3, #4
 800e304:	600a      	str	r2, [r1, #0]
 800e306:	681e      	ldr	r6, [r3, #0]
 800e308:	2100      	movs	r1, #0
 800e30a:	4630      	mov	r0, r6
 800e30c:	6862      	ldr	r2, [r4, #4]
 800e30e:	f000 f8d9 	bl	800e4c4 <memchr>
 800e312:	b108      	cbz	r0, 800e318 <_printf_i+0x1f4>
 800e314:	1b80      	subs	r0, r0, r6
 800e316:	6060      	str	r0, [r4, #4]
 800e318:	6863      	ldr	r3, [r4, #4]
 800e31a:	6123      	str	r3, [r4, #16]
 800e31c:	2300      	movs	r3, #0
 800e31e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e322:	e7a8      	b.n	800e276 <_printf_i+0x152>
 800e324:	4632      	mov	r2, r6
 800e326:	4649      	mov	r1, r9
 800e328:	4640      	mov	r0, r8
 800e32a:	6923      	ldr	r3, [r4, #16]
 800e32c:	47d0      	blx	sl
 800e32e:	3001      	adds	r0, #1
 800e330:	d0ab      	beq.n	800e28a <_printf_i+0x166>
 800e332:	6823      	ldr	r3, [r4, #0]
 800e334:	079b      	lsls	r3, r3, #30
 800e336:	d413      	bmi.n	800e360 <_printf_i+0x23c>
 800e338:	68e0      	ldr	r0, [r4, #12]
 800e33a:	9b03      	ldr	r3, [sp, #12]
 800e33c:	4298      	cmp	r0, r3
 800e33e:	bfb8      	it	lt
 800e340:	4618      	movlt	r0, r3
 800e342:	e7a4      	b.n	800e28e <_printf_i+0x16a>
 800e344:	2301      	movs	r3, #1
 800e346:	4632      	mov	r2, r6
 800e348:	4649      	mov	r1, r9
 800e34a:	4640      	mov	r0, r8
 800e34c:	47d0      	blx	sl
 800e34e:	3001      	adds	r0, #1
 800e350:	d09b      	beq.n	800e28a <_printf_i+0x166>
 800e352:	3501      	adds	r5, #1
 800e354:	68e3      	ldr	r3, [r4, #12]
 800e356:	9903      	ldr	r1, [sp, #12]
 800e358:	1a5b      	subs	r3, r3, r1
 800e35a:	42ab      	cmp	r3, r5
 800e35c:	dcf2      	bgt.n	800e344 <_printf_i+0x220>
 800e35e:	e7eb      	b.n	800e338 <_printf_i+0x214>
 800e360:	2500      	movs	r5, #0
 800e362:	f104 0619 	add.w	r6, r4, #25
 800e366:	e7f5      	b.n	800e354 <_printf_i+0x230>
 800e368:	0800ed65 	.word	0x0800ed65
 800e36c:	0800ed76 	.word	0x0800ed76

0800e370 <_sbrk_r>:
 800e370:	b538      	push	{r3, r4, r5, lr}
 800e372:	2300      	movs	r3, #0
 800e374:	4d05      	ldr	r5, [pc, #20]	; (800e38c <_sbrk_r+0x1c>)
 800e376:	4604      	mov	r4, r0
 800e378:	4608      	mov	r0, r1
 800e37a:	602b      	str	r3, [r5, #0]
 800e37c:	f7f5 f93a 	bl	80035f4 <_sbrk>
 800e380:	1c43      	adds	r3, r0, #1
 800e382:	d102      	bne.n	800e38a <_sbrk_r+0x1a>
 800e384:	682b      	ldr	r3, [r5, #0]
 800e386:	b103      	cbz	r3, 800e38a <_sbrk_r+0x1a>
 800e388:	6023      	str	r3, [r4, #0]
 800e38a:	bd38      	pop	{r3, r4, r5, pc}
 800e38c:	200017b0 	.word	0x200017b0

0800e390 <__sread>:
 800e390:	b510      	push	{r4, lr}
 800e392:	460c      	mov	r4, r1
 800e394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e398:	f000 f8fc 	bl	800e594 <_read_r>
 800e39c:	2800      	cmp	r0, #0
 800e39e:	bfab      	itete	ge
 800e3a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e3a2:	89a3      	ldrhlt	r3, [r4, #12]
 800e3a4:	181b      	addge	r3, r3, r0
 800e3a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e3aa:	bfac      	ite	ge
 800e3ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800e3ae:	81a3      	strhlt	r3, [r4, #12]
 800e3b0:	bd10      	pop	{r4, pc}

0800e3b2 <__swrite>:
 800e3b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3b6:	461f      	mov	r7, r3
 800e3b8:	898b      	ldrh	r3, [r1, #12]
 800e3ba:	4605      	mov	r5, r0
 800e3bc:	05db      	lsls	r3, r3, #23
 800e3be:	460c      	mov	r4, r1
 800e3c0:	4616      	mov	r6, r2
 800e3c2:	d505      	bpl.n	800e3d0 <__swrite+0x1e>
 800e3c4:	2302      	movs	r3, #2
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3cc:	f000 f868 	bl	800e4a0 <_lseek_r>
 800e3d0:	89a3      	ldrh	r3, [r4, #12]
 800e3d2:	4632      	mov	r2, r6
 800e3d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e3d8:	81a3      	strh	r3, [r4, #12]
 800e3da:	4628      	mov	r0, r5
 800e3dc:	463b      	mov	r3, r7
 800e3de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3e6:	f000 b817 	b.w	800e418 <_write_r>

0800e3ea <__sseek>:
 800e3ea:	b510      	push	{r4, lr}
 800e3ec:	460c      	mov	r4, r1
 800e3ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3f2:	f000 f855 	bl	800e4a0 <_lseek_r>
 800e3f6:	1c43      	adds	r3, r0, #1
 800e3f8:	89a3      	ldrh	r3, [r4, #12]
 800e3fa:	bf15      	itete	ne
 800e3fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800e3fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e402:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e406:	81a3      	strheq	r3, [r4, #12]
 800e408:	bf18      	it	ne
 800e40a:	81a3      	strhne	r3, [r4, #12]
 800e40c:	bd10      	pop	{r4, pc}

0800e40e <__sclose>:
 800e40e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e412:	f000 b813 	b.w	800e43c <_close_r>
	...

0800e418 <_write_r>:
 800e418:	b538      	push	{r3, r4, r5, lr}
 800e41a:	4604      	mov	r4, r0
 800e41c:	4608      	mov	r0, r1
 800e41e:	4611      	mov	r1, r2
 800e420:	2200      	movs	r2, #0
 800e422:	4d05      	ldr	r5, [pc, #20]	; (800e438 <_write_r+0x20>)
 800e424:	602a      	str	r2, [r5, #0]
 800e426:	461a      	mov	r2, r3
 800e428:	f7f5 f897 	bl	800355a <_write>
 800e42c:	1c43      	adds	r3, r0, #1
 800e42e:	d102      	bne.n	800e436 <_write_r+0x1e>
 800e430:	682b      	ldr	r3, [r5, #0]
 800e432:	b103      	cbz	r3, 800e436 <_write_r+0x1e>
 800e434:	6023      	str	r3, [r4, #0]
 800e436:	bd38      	pop	{r3, r4, r5, pc}
 800e438:	200017b0 	.word	0x200017b0

0800e43c <_close_r>:
 800e43c:	b538      	push	{r3, r4, r5, lr}
 800e43e:	2300      	movs	r3, #0
 800e440:	4d05      	ldr	r5, [pc, #20]	; (800e458 <_close_r+0x1c>)
 800e442:	4604      	mov	r4, r0
 800e444:	4608      	mov	r0, r1
 800e446:	602b      	str	r3, [r5, #0]
 800e448:	f7f5 f8a3 	bl	8003592 <_close>
 800e44c:	1c43      	adds	r3, r0, #1
 800e44e:	d102      	bne.n	800e456 <_close_r+0x1a>
 800e450:	682b      	ldr	r3, [r5, #0]
 800e452:	b103      	cbz	r3, 800e456 <_close_r+0x1a>
 800e454:	6023      	str	r3, [r4, #0]
 800e456:	bd38      	pop	{r3, r4, r5, pc}
 800e458:	200017b0 	.word	0x200017b0

0800e45c <_fstat_r>:
 800e45c:	b538      	push	{r3, r4, r5, lr}
 800e45e:	2300      	movs	r3, #0
 800e460:	4d06      	ldr	r5, [pc, #24]	; (800e47c <_fstat_r+0x20>)
 800e462:	4604      	mov	r4, r0
 800e464:	4608      	mov	r0, r1
 800e466:	4611      	mov	r1, r2
 800e468:	602b      	str	r3, [r5, #0]
 800e46a:	f7f5 f89d 	bl	80035a8 <_fstat>
 800e46e:	1c43      	adds	r3, r0, #1
 800e470:	d102      	bne.n	800e478 <_fstat_r+0x1c>
 800e472:	682b      	ldr	r3, [r5, #0]
 800e474:	b103      	cbz	r3, 800e478 <_fstat_r+0x1c>
 800e476:	6023      	str	r3, [r4, #0]
 800e478:	bd38      	pop	{r3, r4, r5, pc}
 800e47a:	bf00      	nop
 800e47c:	200017b0 	.word	0x200017b0

0800e480 <_isatty_r>:
 800e480:	b538      	push	{r3, r4, r5, lr}
 800e482:	2300      	movs	r3, #0
 800e484:	4d05      	ldr	r5, [pc, #20]	; (800e49c <_isatty_r+0x1c>)
 800e486:	4604      	mov	r4, r0
 800e488:	4608      	mov	r0, r1
 800e48a:	602b      	str	r3, [r5, #0]
 800e48c:	f7f5 f89b 	bl	80035c6 <_isatty>
 800e490:	1c43      	adds	r3, r0, #1
 800e492:	d102      	bne.n	800e49a <_isatty_r+0x1a>
 800e494:	682b      	ldr	r3, [r5, #0]
 800e496:	b103      	cbz	r3, 800e49a <_isatty_r+0x1a>
 800e498:	6023      	str	r3, [r4, #0]
 800e49a:	bd38      	pop	{r3, r4, r5, pc}
 800e49c:	200017b0 	.word	0x200017b0

0800e4a0 <_lseek_r>:
 800e4a0:	b538      	push	{r3, r4, r5, lr}
 800e4a2:	4604      	mov	r4, r0
 800e4a4:	4608      	mov	r0, r1
 800e4a6:	4611      	mov	r1, r2
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	4d05      	ldr	r5, [pc, #20]	; (800e4c0 <_lseek_r+0x20>)
 800e4ac:	602a      	str	r2, [r5, #0]
 800e4ae:	461a      	mov	r2, r3
 800e4b0:	f7f5 f893 	bl	80035da <_lseek>
 800e4b4:	1c43      	adds	r3, r0, #1
 800e4b6:	d102      	bne.n	800e4be <_lseek_r+0x1e>
 800e4b8:	682b      	ldr	r3, [r5, #0]
 800e4ba:	b103      	cbz	r3, 800e4be <_lseek_r+0x1e>
 800e4bc:	6023      	str	r3, [r4, #0]
 800e4be:	bd38      	pop	{r3, r4, r5, pc}
 800e4c0:	200017b0 	.word	0x200017b0

0800e4c4 <memchr>:
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	b510      	push	{r4, lr}
 800e4c8:	b2c9      	uxtb	r1, r1
 800e4ca:	4402      	add	r2, r0
 800e4cc:	4293      	cmp	r3, r2
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	d101      	bne.n	800e4d6 <memchr+0x12>
 800e4d2:	2000      	movs	r0, #0
 800e4d4:	e003      	b.n	800e4de <memchr+0x1a>
 800e4d6:	7804      	ldrb	r4, [r0, #0]
 800e4d8:	3301      	adds	r3, #1
 800e4da:	428c      	cmp	r4, r1
 800e4dc:	d1f6      	bne.n	800e4cc <memchr+0x8>
 800e4de:	bd10      	pop	{r4, pc}

0800e4e0 <memcpy>:
 800e4e0:	440a      	add	r2, r1
 800e4e2:	4291      	cmp	r1, r2
 800e4e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e4e8:	d100      	bne.n	800e4ec <memcpy+0xc>
 800e4ea:	4770      	bx	lr
 800e4ec:	b510      	push	{r4, lr}
 800e4ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4f2:	4291      	cmp	r1, r2
 800e4f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e4f8:	d1f9      	bne.n	800e4ee <memcpy+0xe>
 800e4fa:	bd10      	pop	{r4, pc}

0800e4fc <memmove>:
 800e4fc:	4288      	cmp	r0, r1
 800e4fe:	b510      	push	{r4, lr}
 800e500:	eb01 0402 	add.w	r4, r1, r2
 800e504:	d902      	bls.n	800e50c <memmove+0x10>
 800e506:	4284      	cmp	r4, r0
 800e508:	4623      	mov	r3, r4
 800e50a:	d807      	bhi.n	800e51c <memmove+0x20>
 800e50c:	1e43      	subs	r3, r0, #1
 800e50e:	42a1      	cmp	r1, r4
 800e510:	d008      	beq.n	800e524 <memmove+0x28>
 800e512:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e516:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e51a:	e7f8      	b.n	800e50e <memmove+0x12>
 800e51c:	4601      	mov	r1, r0
 800e51e:	4402      	add	r2, r0
 800e520:	428a      	cmp	r2, r1
 800e522:	d100      	bne.n	800e526 <memmove+0x2a>
 800e524:	bd10      	pop	{r4, pc}
 800e526:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e52a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e52e:	e7f7      	b.n	800e520 <memmove+0x24>

0800e530 <__malloc_lock>:
 800e530:	4801      	ldr	r0, [pc, #4]	; (800e538 <__malloc_lock+0x8>)
 800e532:	f7ff bb1f 	b.w	800db74 <__retarget_lock_acquire_recursive>
 800e536:	bf00      	nop
 800e538:	200017a8 	.word	0x200017a8

0800e53c <__malloc_unlock>:
 800e53c:	4801      	ldr	r0, [pc, #4]	; (800e544 <__malloc_unlock+0x8>)
 800e53e:	f7ff bb1a 	b.w	800db76 <__retarget_lock_release_recursive>
 800e542:	bf00      	nop
 800e544:	200017a8 	.word	0x200017a8

0800e548 <_realloc_r>:
 800e548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e54a:	4607      	mov	r7, r0
 800e54c:	4614      	mov	r4, r2
 800e54e:	460e      	mov	r6, r1
 800e550:	b921      	cbnz	r1, 800e55c <_realloc_r+0x14>
 800e552:	4611      	mov	r1, r2
 800e554:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e558:	f7ff bbbe 	b.w	800dcd8 <_malloc_r>
 800e55c:	b922      	cbnz	r2, 800e568 <_realloc_r+0x20>
 800e55e:	f7ff fb6f 	bl	800dc40 <_free_r>
 800e562:	4625      	mov	r5, r4
 800e564:	4628      	mov	r0, r5
 800e566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e568:	f000 f826 	bl	800e5b8 <_malloc_usable_size_r>
 800e56c:	42a0      	cmp	r0, r4
 800e56e:	d20f      	bcs.n	800e590 <_realloc_r+0x48>
 800e570:	4621      	mov	r1, r4
 800e572:	4638      	mov	r0, r7
 800e574:	f7ff fbb0 	bl	800dcd8 <_malloc_r>
 800e578:	4605      	mov	r5, r0
 800e57a:	2800      	cmp	r0, #0
 800e57c:	d0f2      	beq.n	800e564 <_realloc_r+0x1c>
 800e57e:	4631      	mov	r1, r6
 800e580:	4622      	mov	r2, r4
 800e582:	f7ff ffad 	bl	800e4e0 <memcpy>
 800e586:	4631      	mov	r1, r6
 800e588:	4638      	mov	r0, r7
 800e58a:	f7ff fb59 	bl	800dc40 <_free_r>
 800e58e:	e7e9      	b.n	800e564 <_realloc_r+0x1c>
 800e590:	4635      	mov	r5, r6
 800e592:	e7e7      	b.n	800e564 <_realloc_r+0x1c>

0800e594 <_read_r>:
 800e594:	b538      	push	{r3, r4, r5, lr}
 800e596:	4604      	mov	r4, r0
 800e598:	4608      	mov	r0, r1
 800e59a:	4611      	mov	r1, r2
 800e59c:	2200      	movs	r2, #0
 800e59e:	4d05      	ldr	r5, [pc, #20]	; (800e5b4 <_read_r+0x20>)
 800e5a0:	602a      	str	r2, [r5, #0]
 800e5a2:	461a      	mov	r2, r3
 800e5a4:	f7f4 ffbc 	bl	8003520 <_read>
 800e5a8:	1c43      	adds	r3, r0, #1
 800e5aa:	d102      	bne.n	800e5b2 <_read_r+0x1e>
 800e5ac:	682b      	ldr	r3, [r5, #0]
 800e5ae:	b103      	cbz	r3, 800e5b2 <_read_r+0x1e>
 800e5b0:	6023      	str	r3, [r4, #0]
 800e5b2:	bd38      	pop	{r3, r4, r5, pc}
 800e5b4:	200017b0 	.word	0x200017b0

0800e5b8 <_malloc_usable_size_r>:
 800e5b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5bc:	1f18      	subs	r0, r3, #4
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	bfbc      	itt	lt
 800e5c2:	580b      	ldrlt	r3, [r1, r0]
 800e5c4:	18c0      	addlt	r0, r0, r3
 800e5c6:	4770      	bx	lr

0800e5c8 <_init>:
 800e5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5ca:	bf00      	nop
 800e5cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5ce:	bc08      	pop	{r3}
 800e5d0:	469e      	mov	lr, r3
 800e5d2:	4770      	bx	lr

0800e5d4 <_fini>:
 800e5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5d6:	bf00      	nop
 800e5d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5da:	bc08      	pop	{r3}
 800e5dc:	469e      	mov	lr, r3
 800e5de:	4770      	bx	lr
