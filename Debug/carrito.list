
carrito.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a148  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  0800a254  0800a254  0001a254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a358  0800a358  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a358  0800a358  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a358  0800a358  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800a358  0800a358  0001a358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a364  0800a364  0001a364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014b0  200001e4  0800a54c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001694  0800a54c  00021694  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022b51  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ed1  00000000  00000000  00042d5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  00047c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001260  00000000  00000000  00049040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eb84  00000000  00000000  0004a2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b77a  00000000  00000000  00068e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096827  00000000  00000000  0008459e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011adc5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005808  00000000  00000000  0011ae18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e4 	.word	0x200001e4
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a23c 	.word	0x0800a23c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e8 	.word	0x200001e8
 8000148:	0800a23c 	.word	0x0800a23c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <__aeabi_f2uiz>:
 8000740:	0042      	lsls	r2, r0, #1
 8000742:	d20e      	bcs.n	8000762 <__aeabi_f2uiz+0x22>
 8000744:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000748:	d30b      	bcc.n	8000762 <__aeabi_f2uiz+0x22>
 800074a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800074e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000752:	d409      	bmi.n	8000768 <__aeabi_f2uiz+0x28>
 8000754:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000758:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800075c:	fa23 f002 	lsr.w	r0, r3, r2
 8000760:	4770      	bx	lr
 8000762:	f04f 0000 	mov.w	r0, #0
 8000766:	4770      	bx	lr
 8000768:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800076c:	d101      	bne.n	8000772 <__aeabi_f2uiz+0x32>
 800076e:	0242      	lsls	r2, r0, #9
 8000770:	d102      	bne.n	8000778 <__aeabi_f2uiz+0x38>
 8000772:	f04f 30ff 	mov.w	r0, #4294967295
 8000776:	4770      	bx	lr
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop

08000780 <_ZN5MotorC1Ev>:
 *      Author: Sanci
 */

#include "Motor.h"

Motor::Motor()
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af04      	add	r7, sp, #16
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	331c      	adds	r3, #28
 800078c:	4618      	mov	r0, r3
 800078e:	f000 fb69 	bl	8000e64 <_ZN3PIDC1Ev>
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2200      	movs	r2, #0
 8000796:	645a      	str	r2, [r3, #68]	; 0x44
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2200      	movs	r2, #0
 800079c:	64da      	str	r2, [r3, #76]	; 0x4c
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2200      	movs	r2, #0
 80007a2:	651a      	str	r2, [r3, #80]	; 0x50
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	f04f 0200 	mov.w	r2, #0
 80007aa:	655a      	str	r2, [r3, #84]	; 0x54
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f04f 0200 	mov.w	r2, #0
 80007b2:	659a      	str	r2, [r3, #88]	; 0x58
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f04f 0200 	mov.w	r2, #0
 80007ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	f04f 0200 	mov.w	r2, #0
 80007c2:	661a      	str	r2, [r3, #96]	; 0x60
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80007ca:	665a      	str	r2, [r3, #100]	; 0x64
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f04f 0200 	mov.w	r2, #0
 80007d2:	669a      	str	r2, [r3, #104]	; 0x68
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f04f 0200 	mov.w	r2, #0
 80007da:	66da      	str	r2, [r3, #108]	; 0x6c
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	f04f 0200 	mov.w	r2, #0
 80007e2:	671a      	str	r2, [r3, #112]	; 0x70
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	f04f 0200 	mov.w	r2, #0
 80007ea:	675a      	str	r2, [r3, #116]	; 0x74
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	f04f 0200 	mov.w	r2, #0
 80007f2:	679a      	str	r2, [r3, #120]	; 0x78
{
    pidController.set(Constants::kMotorKP, Constants::kMotorKI, Constants::kMotorKD, Constants::kMotorKImax, Constants::kMotorMinOut, Constants::kMotorMaxOut);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f103 001c 	add.w	r0, r3, #28
 80007fa:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <_ZN5MotorC1Ev+0xa4>)
 80007fc:	9302      	str	r3, [sp, #8]
 80007fe:	f04f 0300 	mov.w	r3, #0
 8000802:	9301      	str	r3, [sp, #4]
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <_ZN5MotorC1Ev+0xa8>)
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	f04f 0300 	mov.w	r3, #0
 800080c:	f04f 0200 	mov.w	r2, #0
 8000810:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000814:	f000 fb38 	bl	8000e88 <_ZN3PID3setEffffff>
}
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	41200000 	.word	0x41200000
 8000828:	3d4ccccd 	.word	0x3d4ccccd

0800082c <_ZN5Motor4initE3PinS0_tmP17TIM_HandleTypeDef>:
void Motor::init(Pin _pinA, Pin _pinB, uint16_t _encoder, uint32_t _pwm_channel, TIM_HandleTypeDef *_htim)
{
 800082c:	b082      	sub	sp, #8
 800082e:	b580      	push	{r7, lr}
 8000830:	b088      	sub	sp, #32
 8000832:	af04      	add	r7, sp, #16
 8000834:	60f8      	str	r0, [r7, #12]
 8000836:	1d38      	adds	r0, r7, #4
 8000838:	e880 0006 	stmia.w	r0, {r1, r2}
 800083c:	61fb      	str	r3, [r7, #28]
    this->pinA = _pinA;
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	3308      	adds	r3, #8
 8000842:	1d3a      	adds	r2, r7, #4
 8000844:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000848:	e883 0003 	stmia.w	r3, {r0, r1}
    this->pinB = _pinB;
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	3310      	adds	r3, #16
 8000850:	f107 021c 	add.w	r2, r7, #28
 8000854:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000858:	e883 0003 	stmia.w	r3, {r0, r1}
    this->encoder = _encoder;
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000860:	831a      	strh	r2, [r3, #24]
    this->pwm_channel = _pwm_channel;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000866:	641a      	str	r2, [r3, #64]	; 0x40
    this->htim = _htim;
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800086c:	63da      	str	r2, [r3, #60]	; 0x3c
    pidController.set(Constants::kMotorKP, Constants::kMotorKI, Constants::kMotorKD, Constants::kMotorKImax, Constants::kMotorMinOut, Constants::kMotorMaxOut);
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	f103 001c 	add.w	r0, r3, #28
 8000874:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <_ZN5Motor4initE3PinS0_tmP17TIM_HandleTypeDef+0x74>)
 8000876:	9302      	str	r3, [sp, #8]
 8000878:	f04f 0300 	mov.w	r3, #0
 800087c:	9301      	str	r3, [sp, #4]
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <_ZN5Motor4initE3PinS0_tmP17TIM_HandleTypeDef+0x78>)
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	f04f 0300 	mov.w	r3, #0
 8000886:	f04f 0200 	mov.w	r2, #0
 800088a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800088e:	f000 fafb 	bl	8000e88 <_ZN3PID3setEffffff>
}
 8000892:	bf00      	nop
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800089c:	b002      	add	sp, #8
 800089e:	4770      	bx	lr
 80008a0:	41200000 	.word	0x41200000
 80008a4:	3d4ccccd 	.word	0x3d4ccccd

080008a8 <_ZN5Motor12update_motorEm>:
    // Enviar PWM
    HAL_TIM_PWM_Start(htim, pwm_channel);
    __HAL_TIM_SET_COMPARE(htim, pwm_channel, duty);
}
void Motor::update_motor(uint32_t current_time)
{
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b089      	sub	sp, #36	; 0x24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
    float dt = (current_time - last_time_ms) / 1000.0f;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	683a      	ldr	r2, [r7, #0]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff fcfc 	bl	80002b8 <__aeabi_ui2f>
 80008c0:	4603      	mov	r3, r0
 80008c2:	4980      	ldr	r1, [pc, #512]	; (8000ac4 <_ZN5Motor12update_motorEm+0x21c>)
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fe03 	bl	80004d0 <__aeabi_fdiv>
 80008ca:	4603      	mov	r3, r0
 80008cc:	61fb      	str	r3, [r7, #28]
    if (dt <= 0.0f)
 80008ce:	f04f 0100 	mov.w	r1, #0
 80008d2:	69f8      	ldr	r0, [r7, #28]
 80008d4:	f7ff fef0 	bl	80006b8 <__aeabi_fcmple>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	f040 80ee 	bne.w	8000abc <_ZN5Motor12update_motorEm+0x214>
        return;

    delta_ticks = ticks - last_ticks;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fce4 	bl	80002b8 <__aeabi_ui2f>
 80008f0:	4602      	mov	r2, r0
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	655a      	str	r2, [r3, #84]	; 0x54
    distance_cm += delta_ticks * Constants::kCMPerTick;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80008fe:	4972      	ldr	r1, [pc, #456]	; (8000ac8 <_ZN5Motor12update_motorEm+0x220>)
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff fd31 	bl	8000368 <__aeabi_fmul>
 8000906:	4603      	mov	r3, r0
 8000908:	4619      	mov	r1, r3
 800090a:	4620      	mov	r0, r4
 800090c:	f7ff fc24 	bl	8000158 <__addsf3>
 8000910:	4603      	mov	r3, r0
 8000912:	461a      	mov	r2, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	659a      	str	r2, [r3, #88]	; 0x58
    actual_speed_cm_s = (delta_ticks * Constants::kCMPerTick) / dt;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800091c:	496a      	ldr	r1, [pc, #424]	; (8000ac8 <_ZN5Motor12update_motorEm+0x220>)
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff fd22 	bl	8000368 <__aeabi_fmul>
 8000924:	4603      	mov	r3, r0
 8000926:	69f9      	ldr	r1, [r7, #28]
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fdd1 	bl	80004d0 <__aeabi_fdiv>
 800092e:	4603      	mov	r3, r0
 8000930:	461a      	mov	r2, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	661a      	str	r2, [r3, #96]	; 0x60

    // Convert cm/s to PWM equivalent
    float max_cm_s = (Constants::kMotorsRPM * 3.14159f * Constants::kWheelDiameter) / 60.0f;
 8000936:	4b65      	ldr	r3, [pc, #404]	; (8000acc <_ZN5Motor12update_motorEm+0x224>)
 8000938:	61bb      	str	r3, [r7, #24]

    float error = ((target_speed_cm_s - actual_speed_cm_s) / max_cm_s) * Constants::kMaxPWM;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000942:	4619      	mov	r1, r3
 8000944:	4610      	mov	r0, r2
 8000946:	f7ff fc05 	bl	8000154 <__aeabi_fsub>
 800094a:	4603      	mov	r3, r0
 800094c:	69b9      	ldr	r1, [r7, #24]
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fdbe 	bl	80004d0 <__aeabi_fdiv>
 8000954:	4603      	mov	r3, r0
 8000956:	495e      	ldr	r1, [pc, #376]	; (8000ad0 <_ZN5Motor12update_motorEm+0x228>)
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fd05 	bl	8000368 <__aeabi_fmul>
 800095e:	4603      	mov	r3, r0
 8000960:	617b      	str	r3, [r7, #20]
    integral += error * dt;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 8000966:	69f9      	ldr	r1, [r7, #28]
 8000968:	6978      	ldr	r0, [r7, #20]
 800096a:	f7ff fcfd 	bl	8000368 <__aeabi_fmul>
 800096e:	4603      	mov	r3, r0
 8000970:	4619      	mov	r1, r3
 8000972:	4620      	mov	r0, r4
 8000974:	f7ff fbf0 	bl	8000158 <__addsf3>
 8000978:	4603      	mov	r3, r0
 800097a:	461a      	mov	r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	671a      	str	r2, [r3, #112]	; 0x70
    float derivative = (error - last_error) / dt;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000984:	4619      	mov	r1, r3
 8000986:	6978      	ldr	r0, [r7, #20]
 8000988:	f7ff fbe4 	bl	8000154 <__aeabi_fsub>
 800098c:	4603      	mov	r3, r0
 800098e:	69f9      	ldr	r1, [r7, #28]
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fd9d 	bl	80004d0 <__aeabi_fdiv>
 8000996:	4603      	mov	r3, r0
 8000998:	613b      	str	r3, [r7, #16]

    float output = kp * error + ki * integral + kd * derivative;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800099e:	6979      	ldr	r1, [r7, #20]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fce1 	bl	8000368 <__aeabi_fmul>
 80009a6:	4603      	mov	r3, r0
 80009a8:	461c      	mov	r4, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80009b2:	4619      	mov	r1, r3
 80009b4:	4610      	mov	r0, r2
 80009b6:	f7ff fcd7 	bl	8000368 <__aeabi_fmul>
 80009ba:	4603      	mov	r3, r0
 80009bc:	4619      	mov	r1, r3
 80009be:	4620      	mov	r0, r4
 80009c0:	f7ff fbca 	bl	8000158 <__addsf3>
 80009c4:	4603      	mov	r3, r0
 80009c6:	461c      	mov	r4, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80009cc:	6939      	ldr	r1, [r7, #16]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fcca 	bl	8000368 <__aeabi_fmul>
 80009d4:	4603      	mov	r3, r0
 80009d6:	4619      	mov	r1, r3
 80009d8:	4620      	mov	r0, r4
 80009da:	f7ff fbbd 	bl	8000158 <__addsf3>
 80009de:	4603      	mov	r3, r0
 80009e0:	60fb      	str	r3, [r7, #12]
    pwm_out = std::min(std::max(output, Constants::kMinPWM), Constants::kMaxPWM); // Clamp to 0–50
 80009e2:	f107 030c 	add.w	r3, r7, #12
 80009e6:	493b      	ldr	r1, [pc, #236]	; (8000ad4 <_ZN5Motor12update_motorEm+0x22c>)
 80009e8:	4618      	mov	r0, r3
 80009ea:	f000 f8d8 	bl	8000b9e <_ZSt3maxIfERKT_S2_S2_>
 80009ee:	4603      	mov	r3, r0
 80009f0:	4939      	ldr	r1, [pc, #228]	; (8000ad8 <_ZN5Motor12update_motorEm+0x230>)
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 f8ea 	bl	8000bcc <_ZSt3minIfERKT_S2_S2_>
 80009f8:	4603      	mov	r3, r0
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	679a      	str	r2, [r3, #120]	; 0x78

    // Dirección hacia adelante
    HAL_GPIO_WritePin(pinA.port, pinA.pin, GPIO_PIN_SET);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6898      	ldr	r0, [r3, #8]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	899b      	ldrh	r3, [r3, #12]
 8000a08:	2201      	movs	r2, #1
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	f001 fb66 	bl	80020dc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pinB.port, pinB.pin, GPIO_PIN_RESET);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6918      	ldr	r0, [r3, #16]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	8a9b      	ldrh	r3, [r3, #20]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	f001 fb5e 	bl	80020dc <HAL_GPIO_WritePin>

    __HAL_TIM_SET_COMPARE(htim, pwm_channel, (uint16_t)pwm_out);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d10b      	bne.n	8000a40 <_ZN5Motor12update_motorEm+0x198>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fe87 	bl	8000740 <__aeabi_f2uiz>
 8000a32:	4603      	mov	r3, r0
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a3e:	e02a      	b.n	8000a96 <_ZN5Motor12update_motorEm+0x1ee>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a44:	2b04      	cmp	r3, #4
 8000a46:	d10b      	bne.n	8000a60 <_ZN5Motor12update_motorEm+0x1b8>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fe77 	bl	8000740 <__aeabi_f2uiz>
 8000a52:	4603      	mov	r3, r0
 8000a54:	b29a      	uxth	r2, r3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	639a      	str	r2, [r3, #56]	; 0x38
 8000a5e:	e01a      	b.n	8000a96 <_ZN5Motor12update_motorEm+0x1ee>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	2b08      	cmp	r3, #8
 8000a66:	d10b      	bne.n	8000a80 <_ZN5Motor12update_motorEm+0x1d8>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fe67 	bl	8000740 <__aeabi_f2uiz>
 8000a72:	4603      	mov	r3, r0
 8000a74:	b29a      	uxth	r2, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a7e:	e00a      	b.n	8000a96 <_ZN5Motor12update_motorEm+0x1ee>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff fe5b 	bl	8000740 <__aeabi_f2uiz>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_TIM_PWM_Start(htim, pwm_channel);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4610      	mov	r0, r2
 8000aa2:	f004 fa4b 	bl	8004f3c <HAL_TIM_PWM_Start>

    last_error = error;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	697a      	ldr	r2, [r7, #20]
 8000aaa:	675a      	str	r2, [r3, #116]	; 0x74
    last_ticks = ticks;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	651a      	str	r2, [r3, #80]	; 0x50
    last_time_ms = current_time;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	683a      	ldr	r2, [r7, #0]
 8000ab8:	645a      	str	r2, [r3, #68]	; 0x44
 8000aba:	e000      	b.n	8000abe <_ZN5Motor12update_motorEm+0x216>
        return;
 8000abc:	bf00      	nop
}
 8000abe:	3724      	adds	r7, #36	; 0x24
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd90      	pop	{r4, r7, pc}
 8000ac4:	447a0000 	.word	0x447a0000
 8000ac8:	3d14a20d 	.word	0x3d14a20d
 8000acc:	4218e406 	.word	0x4218e406
 8000ad0:	42480000 	.word	0x42480000
 8000ad4:	0800a2b4 	.word	0x0800a2b4
 8000ad8:	0800a2b0 	.word	0x0800a2b0

08000adc <_ZN5Motor10stop_motorEv>:
void Motor::stop_motor()
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
    // Active brake: both inputs HIGH
    HAL_GPIO_WritePin(pinA.port, pinA.pin, GPIO_PIN_SET);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6898      	ldr	r0, [r3, #8]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	899b      	ldrh	r3, [r3, #12]
 8000aec:	2201      	movs	r2, #1
 8000aee:	4619      	mov	r1, r3
 8000af0:	f001 faf4 	bl	80020dc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pinB.port, pinB.pin, GPIO_PIN_SET);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6918      	ldr	r0, [r3, #16]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	8a9b      	ldrh	r3, [r3, #20]
 8000afc:	2201      	movs	r2, #1
 8000afe:	4619      	mov	r1, r3
 8000b00:	f001 faec 	bl	80020dc <HAL_GPIO_WritePin>

    // Stop PWM signal
    __HAL_TIM_SET_COMPARE(htim, pwm_channel, 0);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d105      	bne.n	8000b18 <_ZN5Motor10stop_motorEv+0x3c>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2200      	movs	r2, #0
 8000b14:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b16:	e018      	b.n	8000b4a <_ZN5Motor10stop_motorEv+0x6e>
    __HAL_TIM_SET_COMPARE(htim, pwm_channel, 0);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1c:	2b04      	cmp	r3, #4
 8000b1e:	d105      	bne.n	8000b2c <_ZN5Motor10stop_motorEv+0x50>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2200      	movs	r2, #0
 8000b28:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000b2a:	e00e      	b.n	8000b4a <_ZN5Motor10stop_motorEv+0x6e>
    __HAL_TIM_SET_COMPARE(htim, pwm_channel, 0);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	2b08      	cmp	r3, #8
 8000b32:	d105      	bne.n	8000b40 <_ZN5Motor10stop_motorEv+0x64>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000b3e:	e004      	b.n	8000b4a <_ZN5Motor10stop_motorEv+0x6e>
    __HAL_TIM_SET_COMPARE(htim, pwm_channel, 0);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2200      	movs	r2, #0
 8000b48:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <_ZN5Motor9setTargetEf>:

void Motor::setTarget(float _target_speed_cm_s)
{
 8000b52:	b480      	push	{r7}
 8000b54:	b083      	sub	sp, #12
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
 8000b5a:	6039      	str	r1, [r7, #0]
    target_speed_cm_s = _target_speed_cm_s;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	683a      	ldr	r2, [r7, #0]
 8000b60:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr

08000b6c <_ZN5Motor8addTicksEv>:
{
    return distance_cm;
}

void Motor::addTicks()
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
    ticks++;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b78:	1c5a      	adds	r2, r3, #1
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr

08000b88 <_ZN5Motor6getPWMEv>:

float Motor::getPWM()
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
    return pwm_out;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000b94:	4618      	mov	r0, r3
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr

08000b9e <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
 8000ba6:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4610      	mov	r0, r2
 8000bb4:	f7ff fd76 	bl	80006a4 <__aeabi_fcmplt>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	e000      	b.n	8000bc4 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8000bc2:	687b      	ldr	r3, [r7, #4]
    }
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4619      	mov	r1, r3
 8000be0:	4610      	mov	r0, r2
 8000be2:	f7ff fd5f 	bl	80006a4 <__aeabi_fcmplt>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	e000      	b.n	8000bf2 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8000bf0:	687b      	ldr	r3, [r7, #4]
    }
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <_Z12movementInitv>:
 */

#include "Movement.h"

void movementInit()
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af04      	add	r7, sp, #16
    // Motores (Checar que los canales sean los correctos)
    frontLeftMotor.init(
 8000c02:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <_Z12movementInitv+0x84>)
 8000c04:	491f      	ldr	r1, [pc, #124]	; (8000c84 <_Z12movementInitv+0x88>)
 8000c06:	4a20      	ldr	r2, [pc, #128]	; (8000c88 <_Z12movementInitv+0x8c>)
 8000c08:	9203      	str	r2, [sp, #12]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	9202      	str	r2, [sp, #8]
 8000c0e:	2202      	movs	r2, #2
 8000c10:	9201      	str	r2, [sp, #4]
 8000c12:	685a      	ldr	r2, [r3, #4]
 8000c14:	9200      	str	r2, [sp, #0]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	c906      	ldmia	r1, {r1, r2}
 8000c1a:	481c      	ldr	r0, [pc, #112]	; (8000c8c <_Z12movementInitv+0x90>)
 8000c1c:	f7ff fe06 	bl	800082c <_ZN5Motor4initE3PinS0_tmP17TIM_HandleTypeDef>
        Constants::kFrontLeftA,
        Constants::kFrontLeftB,
        Constants::kFrontLeftEncoder,
        TIM_CHANNEL_1,
        &htim3);
    frontRightMotor.init(
 8000c20:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <_Z12movementInitv+0x94>)
 8000c22:	491c      	ldr	r1, [pc, #112]	; (8000c94 <_Z12movementInitv+0x98>)
 8000c24:	4a1c      	ldr	r2, [pc, #112]	; (8000c98 <_Z12movementInitv+0x9c>)
 8000c26:	9203      	str	r2, [sp, #12]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	9202      	str	r2, [sp, #8]
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	9201      	str	r2, [sp, #4]
 8000c30:	685a      	ldr	r2, [r3, #4]
 8000c32:	9200      	str	r2, [sp, #0]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	c906      	ldmia	r1, {r1, r2}
 8000c38:	4818      	ldr	r0, [pc, #96]	; (8000c9c <_Z12movementInitv+0xa0>)
 8000c3a:	f7ff fdf7 	bl	800082c <_ZN5Motor4initE3PinS0_tmP17TIM_HandleTypeDef>
        Constants::kFrontRightB,
        Constants::kFrontRightEncoder,
        TIM_CHANNEL_1,
        &htim1);

    backRightMotor.init(
 8000c3e:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <_Z12movementInitv+0xa4>)
 8000c40:	4918      	ldr	r1, [pc, #96]	; (8000ca4 <_Z12movementInitv+0xa8>)
 8000c42:	4a11      	ldr	r2, [pc, #68]	; (8000c88 <_Z12movementInitv+0x8c>)
 8000c44:	9203      	str	r2, [sp, #12]
 8000c46:	220c      	movs	r2, #12
 8000c48:	9202      	str	r2, [sp, #8]
 8000c4a:	2208      	movs	r2, #8
 8000c4c:	9201      	str	r2, [sp, #4]
 8000c4e:	685a      	ldr	r2, [r3, #4]
 8000c50:	9200      	str	r2, [sp, #0]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	c906      	ldmia	r1, {r1, r2}
 8000c56:	4814      	ldr	r0, [pc, #80]	; (8000ca8 <_Z12movementInitv+0xac>)
 8000c58:	f7ff fde8 	bl	800082c <_ZN5Motor4initE3PinS0_tmP17TIM_HandleTypeDef>
        Constants::kBackRightB,
        Constants::kBackRightEncoder,
        TIM_CHANNEL_4,
        &htim3);

    backLeftMotor.init(
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <_Z12movementInitv+0xb0>)
 8000c5e:	4914      	ldr	r1, [pc, #80]	; (8000cb0 <_Z12movementInitv+0xb4>)
 8000c60:	4a09      	ldr	r2, [pc, #36]	; (8000c88 <_Z12movementInitv+0x8c>)
 8000c62:	9203      	str	r2, [sp, #12]
 8000c64:	2204      	movs	r2, #4
 8000c66:	9202      	str	r2, [sp, #8]
 8000c68:	2204      	movs	r2, #4
 8000c6a:	9201      	str	r2, [sp, #4]
 8000c6c:	685a      	ldr	r2, [r3, #4]
 8000c6e:	9200      	str	r2, [sp, #0]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	c906      	ldmia	r1, {r1, r2}
 8000c74:	480f      	ldr	r0, [pc, #60]	; (8000cb4 <_Z12movementInitv+0xb8>)
 8000c76:	f7ff fdd9 	bl	800082c <_ZN5Motor4initE3PinS0_tmP17TIM_HandleTypeDef>
        Constants::kBackLeftA,
        Constants::kBackLeftB,
        Constants::kBackLeftEncoder,
        TIM_CHANNEL_2,
        &htim3);
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	0800a2c0 	.word	0x0800a2c0
 8000c84:	0800a2b8 	.word	0x0800a2b8
 8000c88:	20000248 	.word	0x20000248
 8000c8c:	20000290 	.word	0x20000290
 8000c90:	0800a2d0 	.word	0x0800a2d0
 8000c94:	0800a2c8 	.word	0x0800a2c8
 8000c98:	20000200 	.word	0x20000200
 8000c9c:	2000030c 	.word	0x2000030c
 8000ca0:	0800a2f0 	.word	0x0800a2f0
 8000ca4:	0800a2e8 	.word	0x0800a2e8
 8000ca8:	20000404 	.word	0x20000404
 8000cac:	0800a2e0 	.word	0x0800a2e0
 8000cb0:	0800a2d8 	.word	0x0800a2d8
 8000cb4:	20000388 	.word	0x20000388

08000cb8 <_Z8setSpeedi>:
void distance() {}
void setSpeed(int speed)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
    frontLeftMotor.setTarget(speed);
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff fafd 	bl	80002c0 <__aeabi_i2f>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	4619      	mov	r1, r3
 8000cca:	480f      	ldr	r0, [pc, #60]	; (8000d08 <_Z8setSpeedi+0x50>)
 8000ccc:	f7ff ff41 	bl	8000b52 <_ZN5Motor9setTargetEf>
    frontRightMotor.setTarget(speed);
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff faf5 	bl	80002c0 <__aeabi_i2f>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	4619      	mov	r1, r3
 8000cda:	480c      	ldr	r0, [pc, #48]	; (8000d0c <_Z8setSpeedi+0x54>)
 8000cdc:	f7ff ff39 	bl	8000b52 <_ZN5Motor9setTargetEf>
    backLeftMotor.setTarget(speed);
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff faed 	bl	80002c0 <__aeabi_i2f>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4809      	ldr	r0, [pc, #36]	; (8000d10 <_Z8setSpeedi+0x58>)
 8000cec:	f7ff ff31 	bl	8000b52 <_ZN5Motor9setTargetEf>
    backRightMotor.setTarget(speed);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff fae5 	bl	80002c0 <__aeabi_i2f>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4806      	ldr	r0, [pc, #24]	; (8000d14 <_Z8setSpeedi+0x5c>)
 8000cfc:	f7ff ff29 	bl	8000b52 <_ZN5Motor9setTargetEf>
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000290 	.word	0x20000290
 8000d0c:	2000030c 	.word	0x2000030c
 8000d10:	20000388 	.word	0x20000388
 8000d14:	20000404 	.word	0x20000404

08000d18 <_Z4stopv>:
void stop()
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
    frontLeftMotor.stop_motor();
 8000d1c:	4806      	ldr	r0, [pc, #24]	; (8000d38 <_Z4stopv+0x20>)
 8000d1e:	f7ff fedd 	bl	8000adc <_ZN5Motor10stop_motorEv>
    frontRightMotor.stop_motor();
 8000d22:	4806      	ldr	r0, [pc, #24]	; (8000d3c <_Z4stopv+0x24>)
 8000d24:	f7ff feda 	bl	8000adc <_ZN5Motor10stop_motorEv>
    backLeftMotor.stop_motor();
 8000d28:	4805      	ldr	r0, [pc, #20]	; (8000d40 <_Z4stopv+0x28>)
 8000d2a:	f7ff fed7 	bl	8000adc <_ZN5Motor10stop_motorEv>
    backRightMotor.stop_motor();
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <_Z4stopv+0x2c>)
 8000d30:	f7ff fed4 	bl	8000adc <_ZN5Motor10stop_motorEv>
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000290 	.word	0x20000290
 8000d3c:	2000030c 	.word	0x2000030c
 8000d40:	20000388 	.word	0x20000388
 8000d44:	20000404 	.word	0x20000404

08000d48 <_Z14updateMovementm>:
void updateMovement(uint32_t current_time)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
    frontLeftMotor.update_motor(current_time);
 8000d50:	6879      	ldr	r1, [r7, #4]
 8000d52:	4809      	ldr	r0, [pc, #36]	; (8000d78 <_Z14updateMovementm+0x30>)
 8000d54:	f7ff fda8 	bl	80008a8 <_ZN5Motor12update_motorEm>
    frontRightMotor.update_motor(current_time);
 8000d58:	6879      	ldr	r1, [r7, #4]
 8000d5a:	4808      	ldr	r0, [pc, #32]	; (8000d7c <_Z14updateMovementm+0x34>)
 8000d5c:	f7ff fda4 	bl	80008a8 <_ZN5Motor12update_motorEm>
    backLeftMotor.update_motor(current_time);
 8000d60:	6879      	ldr	r1, [r7, #4]
 8000d62:	4807      	ldr	r0, [pc, #28]	; (8000d80 <_Z14updateMovementm+0x38>)
 8000d64:	f7ff fda0 	bl	80008a8 <_ZN5Motor12update_motorEm>
    backRightMotor.update_motor(current_time);
 8000d68:	6879      	ldr	r1, [r7, #4]
 8000d6a:	4806      	ldr	r0, [pc, #24]	; (8000d84 <_Z14updateMovementm+0x3c>)
 8000d6c:	f7ff fd9c 	bl	80008a8 <_ZN5Motor12update_motorEm>
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000290 	.word	0x20000290
 8000d7c:	2000030c 	.word	0x2000030c
 8000d80:	20000388 	.word	0x20000388
 8000d84:	20000404 	.word	0x20000404

08000d88 <_Z41__static_initialization_and_destruction_0ii>:
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d148      	bne.n	8000e2a <_Z41__static_initialization_and_destruction_0ii+0xa2>
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d143      	bne.n	8000e2a <_Z41__static_initialization_and_destruction_0ii+0xa2>
void setSpeed(int speed);
void stop();
void updateMovement(uint32_t current_time);

// Motors
inline Motor frontLeftMotor;
 8000da2:	4b24      	ldr	r3, [pc, #144]	; (8000e34 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	3301      	adds	r3, #1
 8000da8:	4a22      	ldr	r2, [pc, #136]	; (8000e34 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8000daa:	6013      	str	r3, [r2, #0]
 8000dac:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	bf0c      	ite	eq
 8000db4:	2301      	moveq	r3, #1
 8000db6:	2300      	movne	r3, #0
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d002      	beq.n	8000dc4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8000dbe:	481e      	ldr	r0, [pc, #120]	; (8000e38 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8000dc0:	f7ff fcde 	bl	8000780 <_ZN5MotorC1Ev>
inline Motor frontRightMotor;
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	4a1c      	ldr	r2, [pc, #112]	; (8000e3c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	bf0c      	ite	eq
 8000dd6:	2301      	moveq	r3, #1
 8000dd8:	2300      	movne	r3, #0
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d002      	beq.n	8000de6 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8000de0:	4817      	ldr	r0, [pc, #92]	; (8000e40 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8000de2:	f7ff fccd 	bl	8000780 <_ZN5MotorC1Ev>
inline Motor backLeftMotor;
 8000de6:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	3301      	adds	r3, #1
 8000dec:	4a15      	ldr	r2, [pc, #84]	; (8000e44 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000dee:	6013      	str	r3, [r2, #0]
 8000df0:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	bf0c      	ite	eq
 8000df8:	2301      	moveq	r3, #1
 8000dfa:	2300      	movne	r3, #0
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d002      	beq.n	8000e08 <_Z41__static_initialization_and_destruction_0ii+0x80>
 8000e02:	4811      	ldr	r0, [pc, #68]	; (8000e48 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8000e04:	f7ff fcbc 	bl	8000780 <_ZN5MotorC1Ev>
inline Motor backRightMotor;
 8000e08:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	4a0f      	ldr	r2, [pc, #60]	; (8000e4c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8000e10:	6013      	str	r3, [r2, #0]
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	bf0c      	ite	eq
 8000e1a:	2301      	moveq	r3, #1
 8000e1c:	2300      	movne	r3, #0
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d002      	beq.n	8000e2a <_Z41__static_initialization_and_destruction_0ii+0xa2>
 8000e24:	480a      	ldr	r0, [pc, #40]	; (8000e50 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8000e26:	f7ff fcab 	bl	8000780 <_ZN5MotorC1Ev>
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000480 	.word	0x20000480
 8000e38:	20000290 	.word	0x20000290
 8000e3c:	20000484 	.word	0x20000484
 8000e40:	2000030c 	.word	0x2000030c
 8000e44:	20000488 	.word	0x20000488
 8000e48:	20000388 	.word	0x20000388
 8000e4c:	2000048c 	.word	0x2000048c
 8000e50:	20000404 	.word	0x20000404

08000e54 <_GLOBAL__sub_I__Z12movementInitv>:
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f7ff ff93 	bl	8000d88 <_Z41__static_initialization_and_destruction_0ii>
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <_ZN3PIDC1Ev>:
 *      Author: Sanci
 */

#include "PID.h"

PID::PID(){
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f04f 0200 	mov.w	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f04f 0200 	mov.w	r2, #0
 8000e7a:	605a      	str	r2, [r3, #4]
}
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr

08000e88 <_ZN3PID3setEffffff>:

void PID::set(float kP, float kI, float kD, float kImax, float out_min, float out_max){
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
 8000e94:	603b      	str	r3, [r7, #0]
    this->kP = kP;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	68ba      	ldr	r2, [r7, #8]
 8000e9a:	609a      	str	r2, [r3, #8]
    this->kI = kI;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	60da      	str	r2, [r3, #12]
    this->kD = kD;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	683a      	ldr	r2, [r7, #0]
 8000ea6:	611a      	str	r2, [r3, #16]
    this->kImax = kImax;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	615a      	str	r2, [r3, #20]
    this->out_min = out_min;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	69fa      	ldr	r2, [r7, #28]
 8000eb2:	61da      	str	r2, [r3, #28]
    this->out_max = out_max;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	6a3a      	ldr	r2, [r7, #32]
 8000eb8:	619a      	str	r2, [r3, #24]
}
 8000eba:	bf00      	nop
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr

08000ec4 <_Z9lcd_beginv>:
#include "lcd.h"


void lcd_begin(){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
	uint8_t data;
	HAL_Delay(50);
 8000eca:	2032      	movs	r0, #50	; 0x32
 8000ecc:	f000 fe50 	bl	8001b70 <HAL_Delay>
	data=0b00111100;
 8000ed0:	233c      	movs	r3, #60	; 0x3c
 8000ed2:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(5,data);//Wait 4ms
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	2005      	movs	r0, #5
 8000eda:	f000 f851 	bl	8000f80 <_Z16send_lcd_commandhh>

	data=0b00111100;
 8000ede:	233c      	movs	r3, #60	; 0x3c
 8000ee0:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1,data);//Wait 100us
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	f000 f84a 	bl	8000f80 <_Z16send_lcd_commandhh>

	data=0b00111100;
 8000eec:	233c      	movs	r3, #60	; 0x3c
 8000eee:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1,data);//Wait 100us
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f000 f843 	bl	8000f80 <_Z16send_lcd_commandhh>

	data=0b00101100;
 8000efa:	232c      	movs	r3, #44	; 0x2c
 8000efc:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1,data);//Wait 100us
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	4619      	mov	r1, r3
 8000f02:	2001      	movs	r0, #1
 8000f04:	f000 f83c 	bl	8000f80 <_Z16send_lcd_commandhh>

	data=0b00101100;
 8000f08:	232c      	movs	r3, #44	; 0x2c
 8000f0a:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1,data);//Wait 100us
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	2001      	movs	r0, #1
 8000f12:	f000 f835 	bl	8000f80 <_Z16send_lcd_commandhh>

	data=0b10001100;
 8000f16:	238c      	movs	r3, #140	; 0x8c
 8000f18:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1,data);//NF
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f000 f82e 	bl	8000f80 <_Z16send_lcd_commandhh>

	data=0x0C;
 8000f24:	230c      	movs	r3, #12
 8000f26:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1,data);
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f000 f827 	bl	8000f80 <_Z16send_lcd_commandhh>
	//-----------------------------------------------------------
	data=(0xC0)|(1<<2);
 8000f32:	23c4      	movs	r3, #196	; 0xc4
 8000f34:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(5,data);//6b
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	2005      	movs	r0, #5
 8000f3c:	f000 f820 	bl	8000f80 <_Z16send_lcd_commandhh>

	data=(0x00)|(1<<2);
 8000f40:	2304      	movs	r3, #4
 8000f42:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1,data);//7a
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	4619      	mov	r1, r3
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f000 f819 	bl	8000f80 <_Z16send_lcd_commandhh>

	data=(0x10)|(1<<2);
 8000f4e:	2314      	movs	r3, #20
 8000f50:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1,data);//7b
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	4619      	mov	r1, r3
 8000f56:	2001      	movs	r0, #1
 8000f58:	f000 f812 	bl	8000f80 <_Z16send_lcd_commandhh>

	data=(0x00)|(1<<2);
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1,data);//8a
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	4619      	mov	r1, r3
 8000f64:	2001      	movs	r0, #1
 8000f66:	f000 f80b 	bl	8000f80 <_Z16send_lcd_commandhh>

	data=(0x60)|(1<<2);
 8000f6a:	2364      	movs	r3, #100	; 0x64
 8000f6c:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(5,data);//8b
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	4619      	mov	r1, r3
 8000f72:	2005      	movs	r0, #5
 8000f74:	f000 f804 	bl	8000f80 <_Z16send_lcd_commandhh>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <_Z16send_lcd_commandhh>:

void send_lcd_command(uint8_t delay, uint8_t info){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af02      	add	r7, sp, #8
 8000f86:	4603      	mov	r3, r0
 8000f88:	460a      	mov	r2, r1
 8000f8a:	71fb      	strb	r3, [r7, #7]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, 0x27<<1, &info, 1, 1000);
 8000f90:	1dba      	adds	r2, r7, #6
 8000f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	2301      	movs	r3, #1
 8000f9a:	214e      	movs	r1, #78	; 0x4e
 8000f9c:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <_Z16send_lcd_commandhh+0x54>)
 8000f9e:	f001 fa11 	bl	80023c4 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	f000 fde4 	bl	8001b70 <HAL_Delay>
	info=info&~(1<<2);
 8000fa8:	79bb      	ldrb	r3, [r7, #6]
 8000faa:	f023 0304 	bic.w	r3, r3, #4
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, 0x27<<1, &info, 1, 1000);
 8000fb2:	1dba      	adds	r2, r7, #6
 8000fb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2301      	movs	r3, #1
 8000fbc:	214e      	movs	r1, #78	; 0x4e
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <_Z16send_lcd_commandhh+0x54>)
 8000fc0:	f001 fa00 	bl	80023c4 <HAL_I2C_Master_Transmit>
	HAL_Delay(delay);//Wait 100us
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 fdd2 	bl	8001b70 <HAL_Delay>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000490 	.word	0x20000490

08000fd8 <_Z8send_msgPc>:

void send_msg(char* text) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
    uint8_t data;

    while (*text) {
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d01d      	beq.n	8001024 <_Z8send_msgPc+0x4c>
        data = (*text & 0xF0) | 0x0D | 0x08;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	f023 030f 	bic.w	r3, r3, #15
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	f043 030d 	orr.w	r3, r3, #13
 8000ff6:	73fb      	strb	r3, [r7, #15]
        send_lcd_command(1, data);
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f7ff ffbf 	bl	8000f80 <_Z16send_lcd_commandhh>
        data = ((*text << 4) & 0xF0) | 0x0D | 0x08;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	011b      	lsls	r3, r3, #4
 8001008:	b25b      	sxtb	r3, r3
 800100a:	f043 030d 	orr.w	r3, r3, #13
 800100e:	b25b      	sxtb	r3, r3
 8001010:	73fb      	strb	r3, [r7, #15]
        send_lcd_command(1, data);
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	4619      	mov	r1, r3
 8001016:	2001      	movs	r0, #1
 8001018:	f7ff ffb2 	bl	8000f80 <_Z16send_lcd_commandhh>
        text++;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3301      	adds	r3, #1
 8001020:	607b      	str	r3, [r7, #4]
    while (*text) {
 8001022:	e7dd      	b.n	8000fe0 <_Z8send_msgPc+0x8>
    }
}
 8001024:	bf00      	nop
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <_Z9lcd_cleanv>:

void lcd_clean(){
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af02      	add	r7, sp, #8
	uint8_t data=(0x08)|(1<<2);
 8001032:	230c      	movs	r3, #12
 8001034:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1,  0x27<<1 , &data, 1, 1000);
 8001036:	1dfa      	adds	r2, r7, #7
 8001038:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2301      	movs	r3, #1
 8001040:	214e      	movs	r1, #78	; 0x4e
 8001042:	4809      	ldr	r0, [pc, #36]	; (8001068 <_Z9lcd_cleanv+0x3c>)
 8001044:	f001 f9be 	bl	80023c4 <HAL_I2C_Master_Transmit>
	send_lcd_command(5, data);
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	4619      	mov	r1, r3
 800104c:	2005      	movs	r0, #5
 800104e:	f7ff ff97 	bl	8000f80 <_Z16send_lcd_commandhh>
	data=(0x18)|(1<<2);
 8001052:	231c      	movs	r3, #28
 8001054:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(5, data);
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	4619      	mov	r1, r3
 800105a:	2005      	movs	r0, #5
 800105c:	f7ff ff90 	bl	8000f80 <_Z16send_lcd_commandhh>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000490 	.word	0x20000490

0800106c <HAL_GPIO_EXTI_Callback>:
static void MX_TIM1_Init(void);
static void MX_TIM3_Init(void);

/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001076:	88fb      	ldrh	r3, [r7, #6]
 8001078:	3b01      	subs	r3, #1
 800107a:	2b07      	cmp	r3, #7
 800107c:	d822      	bhi.n	80010c4 <HAL_GPIO_EXTI_Callback+0x58>
 800107e:	a201      	add	r2, pc, #4	; (adr r2, 8001084 <HAL_GPIO_EXTI_Callback+0x18>)
 8001080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001084:	080010ad 	.word	0x080010ad
 8001088:	080010a5 	.word	0x080010a5
 800108c:	080010c5 	.word	0x080010c5
 8001090:	080010b5 	.word	0x080010b5
 8001094:	080010c5 	.word	0x080010c5
 8001098:	080010c5 	.word	0x080010c5
 800109c:	080010c5 	.word	0x080010c5
 80010a0:	080010bd 	.word	0x080010bd
  {
  case Constants::kFrontLeftEncoder:
    frontLeftMotor.addTicks();
 80010a4:	4809      	ldr	r0, [pc, #36]	; (80010cc <HAL_GPIO_EXTI_Callback+0x60>)
 80010a6:	f7ff fd61 	bl	8000b6c <_ZN5Motor8addTicksEv>
    break;
 80010aa:	e00b      	b.n	80010c4 <HAL_GPIO_EXTI_Callback+0x58>
  case Constants::kFrontRightEncoder:
    frontRightMotor.addTicks();
 80010ac:	4808      	ldr	r0, [pc, #32]	; (80010d0 <HAL_GPIO_EXTI_Callback+0x64>)
 80010ae:	f7ff fd5d 	bl	8000b6c <_ZN5Motor8addTicksEv>
    break;
 80010b2:	e007      	b.n	80010c4 <HAL_GPIO_EXTI_Callback+0x58>
  case Constants::kBackLeftEncoder:
    backLeftMotor.addTicks();
 80010b4:	4807      	ldr	r0, [pc, #28]	; (80010d4 <HAL_GPIO_EXTI_Callback+0x68>)
 80010b6:	f7ff fd59 	bl	8000b6c <_ZN5Motor8addTicksEv>
    break;
 80010ba:	e003      	b.n	80010c4 <HAL_GPIO_EXTI_Callback+0x58>
  case Constants::kBackRightEncoder:
    backRightMotor.addTicks();
 80010bc:	4806      	ldr	r0, [pc, #24]	; (80010d8 <HAL_GPIO_EXTI_Callback+0x6c>)
 80010be:	f7ff fd55 	bl	8000b6c <_ZN5Motor8addTicksEv>
    break;
 80010c2:	bf00      	nop
  }
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000290 	.word	0x20000290
 80010d0:	2000030c 	.word	0x2000030c
 80010d4:	20000388 	.word	0x20000388
 80010d8:	20000404 	.word	0x20000404

080010dc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08c      	sub	sp, #48	; 0x30
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e2:	f000 fce3 	bl	8001aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e6:	f000 f857 	bl	8001198 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ea:	f000 fa11 	bl	8001510 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 80010ee:	f000 f8bd 	bl	800126c <_ZL12MX_I2C1_Initv>
  MX_USB_DEVICE_Init();
 80010f2:	f007 ffc1 	bl	8009078 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80010f6:	f000 f8ed 	bl	80012d4 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 80010fa:	f000 f981 	bl	8001400 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */
  MX_GPIO_Init();
 80010fe:	f000 fa07 	bl	8001510 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 8001102:	f000 f8b3 	bl	800126c <_ZL12MX_I2C1_Initv>
  MX_USB_DEVICE_Init();
 8001106:	f007 ffb7 	bl	8009078 <MX_USB_DEVICE_Init>
  // EXTI->FTSR &= ~(1 << 0); // Desactiva flanco de bajada (falling)
  // EXTI->FTSR &= ~(1 << 1);
  // EXTI->FTSR &= ~(1 << 2);
  // EXTI->FTSR &= ~(1 << 3);

  HAL_Init();
 800110a:	f000 fccf 	bl	8001aac <HAL_Init>
  SystemClock_Config();
 800110e:	f000 f843 	bl	8001198 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 8001112:	f000 f9fd 	bl	8001510 <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 8001116:	f000 f8dd 	bl	80012d4 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 800111a:	f000 f971 	bl	8001400 <_ZL12MX_TIM3_Initv>

  lcd_begin();
 800111e:	f7ff fed1 	bl	8000ec4 <_Z9lcd_beginv>
  send_msg("Equipo4");
 8001122:	4819      	ldr	r0, [pc, #100]	; (8001188 <main+0xac>)
 8001124:	f7ff ff58 	bl	8000fd8 <_Z8send_msgPc>

  movementInit();
 8001128:	f7ff fd68 	bl	8000bfc <_Z12movementInitv>

  /// SPEED
  setSpeed(speed);
 800112c:	4b17      	ldr	r3, [pc, #92]	; (800118c <main+0xb0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fdc1 	bl	8000cb8 <_Z8setSpeedi>
  uint32_t last_average_time = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
  float total_distance = 0;
 800113a:	f04f 0300 	mov.w	r3, #0
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    uint32_t now = HAL_GetTick();
 8001140:	f000 fd0c 	bl	8001b5c <HAL_GetTick>
 8001144:	6278      	str	r0, [r7, #36]	; 0x24
    updateMovement(now);
 8001146:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001148:	f7ff fdfe 	bl	8000d48 <_Z14updateMovementm>
    //   send_msg(buffer);

    //   last_average_time = now;
    // }
    char buffer[32];
    sprintf(buffer, "Dist: %d cm", (int)frontLeftMotor.getPWM());
 800114c:	4810      	ldr	r0, [pc, #64]	; (8001190 <main+0xb4>)
 800114e:	f7ff fd1b 	bl	8000b88 <_ZN5Motor6getPWMEv>
 8001152:	4603      	mov	r3, r0
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff facd 	bl	80006f4 <__aeabi_f2iz>
 800115a:	4602      	mov	r2, r0
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	490d      	ldr	r1, [pc, #52]	; (8001194 <main+0xb8>)
 8001160:	4618      	mov	r0, r3
 8001162:	f008 fc31 	bl	80099c8 <siprintf>
    lcd_clean();
 8001166:	f7ff ff61 	bl	800102c <_Z9lcd_cleanv>
    send_msg(buffer);
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff33 	bl	8000fd8 <_Z8send_msgPc>
    HAL_Delay(100);
 8001172:	2064      	movs	r0, #100	; 0x64
 8001174:	f000 fcfc 	bl	8001b70 <HAL_Delay>
    while (now > 10000)
 8001178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117a:	f242 7210 	movw	r2, #10000	; 0x2710
 800117e:	4293      	cmp	r3, r2
 8001180:	d9de      	bls.n	8001140 <main+0x64>
    {
      stop();
 8001182:	f7ff fdc9 	bl	8000d18 <_Z4stopv>
    while (now > 10000)
 8001186:	e7f7      	b.n	8001178 <main+0x9c>
 8001188:	0800a254 	.word	0x0800a254
 800118c:	20000000 	.word	0x20000000
 8001190:	20000290 	.word	0x20000290
 8001194:	0800a25c 	.word	0x0800a25c

08001198 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b094      	sub	sp, #80	; 0x50
 800119c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011a2:	2228      	movs	r2, #40	; 0x28
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f008 fc06 	bl	80099b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011c8:	2301      	movs	r3, #1
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d6:	2301      	movs	r3, #1
 80011d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011da:	2302      	movs	r3, #2
 80011dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ee:	4618      	mov	r0, r3
 80011f0:	f003 f9a4 	bl	800453c <HAL_RCC_OscConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	bf14      	ite	ne
 80011fa:	2301      	movne	r3, #1
 80011fc:	2300      	moveq	r3, #0
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001204:	f000 fa1e 	bl	8001644 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001208:	230f      	movs	r3, #15
 800120a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120c:	2302      	movs	r3, #2
 800120e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001218:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800121a:	2300      	movs	r3, #0
 800121c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	2102      	movs	r1, #2
 8001224:	4618      	mov	r0, r3
 8001226:	f003 fc09 	bl	8004a3c <HAL_RCC_ClockConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	bf14      	ite	ne
 8001230:	2301      	movne	r3, #1
 8001232:	2300      	moveq	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800123a:	f000 fa03 	bl	8001644 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800123e:	2310      	movs	r3, #16
 8001240:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	4618      	mov	r0, r3
 800124a:	f003 fd71 	bl	8004d30 <HAL_RCCEx_PeriphCLKConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	bf14      	ite	ne
 8001254:	2301      	movne	r3, #1
 8001256:	2300      	moveq	r3, #0
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 800125e:	f000 f9f1 	bl	8001644 <Error_Handler>
  }
}
 8001262:	bf00      	nop
 8001264:	3750      	adds	r7, #80	; 0x50
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <_ZL12MX_I2C1_Initv>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001270:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001272:	4a16      	ldr	r2, [pc, #88]	; (80012cc <_ZL12MX_I2C1_Initv+0x60>)
 8001274:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001276:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001278:	4a15      	ldr	r2, [pc, #84]	; (80012d0 <_ZL12MX_I2C1_Initv+0x64>)
 800127a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <_ZL12MX_I2C1_Initv+0x5c>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001284:	2200      	movs	r2, #0
 8001286:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <_ZL12MX_I2C1_Initv+0x5c>)
 800128a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800128e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001290:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001292:	2200      	movs	r2, #0
 8001294:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001296:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800129c:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <_ZL12MX_I2C1_Initv+0x5c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <_ZL12MX_I2C1_Initv+0x5c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012a8:	4807      	ldr	r0, [pc, #28]	; (80012c8 <_ZL12MX_I2C1_Initv+0x5c>)
 80012aa:	f000 ff47 	bl	800213c <HAL_I2C_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	bf14      	ite	ne
 80012b4:	2301      	movne	r3, #1
 80012b6:	2300      	moveq	r3, #0
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80012be:	f000 f9c1 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000490 	.word	0x20000490
 80012cc:	40005400 	.word	0x40005400
 80012d0:	000186a0 	.word	0x000186a0

080012d4 <_ZL12MX_TIM1_Initv>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b092      	sub	sp, #72	; 0x48
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
 80012f4:	615a      	str	r2, [r3, #20]
 80012f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	2220      	movs	r2, #32
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f008 fb5a 	bl	80099b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001304:	4b3c      	ldr	r3, [pc, #240]	; (80013f8 <_ZL12MX_TIM1_Initv+0x124>)
 8001306:	4a3d      	ldr	r2, [pc, #244]	; (80013fc <_ZL12MX_TIM1_Initv+0x128>)
 8001308:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800130a:	4b3b      	ldr	r3, [pc, #236]	; (80013f8 <_ZL12MX_TIM1_Initv+0x124>)
 800130c:	2247      	movs	r2, #71	; 0x47
 800130e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001310:	4b39      	ldr	r3, [pc, #228]	; (80013f8 <_ZL12MX_TIM1_Initv+0x124>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50;
 8001316:	4b38      	ldr	r3, [pc, #224]	; (80013f8 <_ZL12MX_TIM1_Initv+0x124>)
 8001318:	2232      	movs	r2, #50	; 0x32
 800131a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131c:	4b36      	ldr	r3, [pc, #216]	; (80013f8 <_ZL12MX_TIM1_Initv+0x124>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001322:	4b35      	ldr	r3, [pc, #212]	; (80013f8 <_ZL12MX_TIM1_Initv+0x124>)
 8001324:	2200      	movs	r2, #0
 8001326:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001328:	4b33      	ldr	r3, [pc, #204]	; (80013f8 <_ZL12MX_TIM1_Initv+0x124>)
 800132a:	2200      	movs	r2, #0
 800132c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800132e:	4832      	ldr	r0, [pc, #200]	; (80013f8 <_ZL12MX_TIM1_Initv+0x124>)
 8001330:	f003 fdb4 	bl	8004e9c <HAL_TIM_PWM_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	bf14      	ite	ne
 800133a:	2301      	movne	r3, #1
 800133c:	2300      	moveq	r3, #0
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <_ZL12MX_TIM1_Initv+0x74>
  {
    Error_Handler();
 8001344:	f000 f97e 	bl	8001644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001348:	2300      	movs	r3, #0
 800134a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001350:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001354:	4619      	mov	r1, r3
 8001356:	4828      	ldr	r0, [pc, #160]	; (80013f8 <_ZL12MX_TIM1_Initv+0x124>)
 8001358:	f004 f96e 	bl	8005638 <HAL_TIMEx_MasterConfigSynchronization>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	bf14      	ite	ne
 8001362:	2301      	movne	r3, #1
 8001364:	2300      	moveq	r3, #0
 8001366:	b2db      	uxtb	r3, r3
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <_ZL12MX_TIM1_Initv+0x9c>
  {
    Error_Handler();
 800136c:	f000 f96a 	bl	8001644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001370:	2360      	movs	r3, #96	; 0x60
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001378:	2300      	movs	r3, #0
 800137a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800137c:	2300      	movs	r3, #0
 800137e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001380:	2300      	movs	r3, #0
 8001382:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001384:	2300      	movs	r3, #0
 8001386:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001388:	2300      	movs	r3, #0
 800138a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800138c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001390:	2200      	movs	r2, #0
 8001392:	4619      	mov	r1, r3
 8001394:	4818      	ldr	r0, [pc, #96]	; (80013f8 <_ZL12MX_TIM1_Initv+0x124>)
 8001396:	f003 fe73 	bl	8005080 <HAL_TIM_PWM_ConfigChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	bf14      	ite	ne
 80013a0:	2301      	movne	r3, #1
 80013a2:	2300      	moveq	r3, #0
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <_ZL12MX_TIM1_Initv+0xda>
  {
    Error_Handler();
 80013aa:	f000 f94b 	bl	8001644 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	4619      	mov	r1, r3
 80013d0:	4809      	ldr	r0, [pc, #36]	; (80013f8 <_ZL12MX_TIM1_Initv+0x124>)
 80013d2:	f004 f98f 	bl	80056f4 <HAL_TIMEx_ConfigBreakDeadTime>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	bf14      	ite	ne
 80013dc:	2301      	movne	r3, #1
 80013de:	2300      	moveq	r3, #0
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <_ZL12MX_TIM1_Initv+0x116>
  {
    Error_Handler();
 80013e6:	f000 f92d 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013ea:	4803      	ldr	r0, [pc, #12]	; (80013f8 <_ZL12MX_TIM1_Initv+0x124>)
 80013ec:	f000 fa40 	bl	8001870 <HAL_TIM_MspPostInit>
}
 80013f0:	bf00      	nop
 80013f2:	3748      	adds	r7, #72	; 0x48
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000200 	.word	0x20000200
 80013fc:	40012c00 	.word	0x40012c00

08001400 <_ZL12MX_TIM3_Initv>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	; 0x28
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001406:	f107 0320 	add.w	r3, r7, #32
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]
 800141e:	615a      	str	r2, [r3, #20]
 8001420:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001422:	4b39      	ldr	r3, [pc, #228]	; (8001508 <_ZL12MX_TIM3_Initv+0x108>)
 8001424:	4a39      	ldr	r2, [pc, #228]	; (800150c <_ZL12MX_TIM3_Initv+0x10c>)
 8001426:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001428:	4b37      	ldr	r3, [pc, #220]	; (8001508 <_ZL12MX_TIM3_Initv+0x108>)
 800142a:	2247      	movs	r2, #71	; 0x47
 800142c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142e:	4b36      	ldr	r3, [pc, #216]	; (8001508 <_ZL12MX_TIM3_Initv+0x108>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50;
 8001434:	4b34      	ldr	r3, [pc, #208]	; (8001508 <_ZL12MX_TIM3_Initv+0x108>)
 8001436:	2232      	movs	r2, #50	; 0x32
 8001438:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143a:	4b33      	ldr	r3, [pc, #204]	; (8001508 <_ZL12MX_TIM3_Initv+0x108>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001440:	4b31      	ldr	r3, [pc, #196]	; (8001508 <_ZL12MX_TIM3_Initv+0x108>)
 8001442:	2200      	movs	r2, #0
 8001444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001446:	4830      	ldr	r0, [pc, #192]	; (8001508 <_ZL12MX_TIM3_Initv+0x108>)
 8001448:	f003 fd28 	bl	8004e9c <HAL_TIM_PWM_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	bf14      	ite	ne
 8001452:	2301      	movne	r3, #1
 8001454:	2300      	moveq	r3, #0
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <_ZL12MX_TIM3_Initv+0x60>
  {
    Error_Handler();
 800145c:	f000 f8f2 	bl	8001644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001460:	2300      	movs	r3, #0
 8001462:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001464:	2300      	movs	r3, #0
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001468:	f107 0320 	add.w	r3, r7, #32
 800146c:	4619      	mov	r1, r3
 800146e:	4826      	ldr	r0, [pc, #152]	; (8001508 <_ZL12MX_TIM3_Initv+0x108>)
 8001470:	f004 f8e2 	bl	8005638 <HAL_TIMEx_MasterConfigSynchronization>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	bf14      	ite	ne
 800147a:	2301      	movne	r3, #1
 800147c:	2300      	moveq	r3, #0
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <_ZL12MX_TIM3_Initv+0x88>
  {
    Error_Handler();
 8001484:	f000 f8de 	bl	8001644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001488:	2360      	movs	r3, #96	; 0x60
 800148a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	2200      	movs	r2, #0
 800149c:	4619      	mov	r1, r3
 800149e:	481a      	ldr	r0, [pc, #104]	; (8001508 <_ZL12MX_TIM3_Initv+0x108>)
 80014a0:	f003 fdee 	bl	8005080 <HAL_TIM_PWM_ConfigChannel>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	bf14      	ite	ne
 80014aa:	2301      	movne	r3, #1
 80014ac:	2300      	moveq	r3, #0
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <_ZL12MX_TIM3_Initv+0xb8>
  {
    Error_Handler();
 80014b4:	f000 f8c6 	bl	8001644 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	2204      	movs	r2, #4
 80014bc:	4619      	mov	r1, r3
 80014be:	4812      	ldr	r0, [pc, #72]	; (8001508 <_ZL12MX_TIM3_Initv+0x108>)
 80014c0:	f003 fdde 	bl	8005080 <HAL_TIM_PWM_ConfigChannel>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	bf14      	ite	ne
 80014ca:	2301      	movne	r3, #1
 80014cc:	2300      	moveq	r3, #0
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 80014d4:	f000 f8b6 	bl	8001644 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	220c      	movs	r2, #12
 80014dc:	4619      	mov	r1, r3
 80014de:	480a      	ldr	r0, [pc, #40]	; (8001508 <_ZL12MX_TIM3_Initv+0x108>)
 80014e0:	f003 fdce 	bl	8005080 <HAL_TIM_PWM_ConfigChannel>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	bf14      	ite	ne
 80014ea:	2301      	movne	r3, #1
 80014ec:	2300      	moveq	r3, #0
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <_ZL12MX_TIM3_Initv+0xf8>
  {
    Error_Handler();
 80014f4:	f000 f8a6 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014f8:	4803      	ldr	r0, [pc, #12]	; (8001508 <_ZL12MX_TIM3_Initv+0x108>)
 80014fa:	f000 f9b9 	bl	8001870 <HAL_TIM_MspPostInit>
}
 80014fe:	bf00      	nop
 8001500:	3728      	adds	r7, #40	; 0x28
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000248 	.word	0x20000248
 800150c:	40000400 	.word	0x40000400

08001510 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001516:	f107 0310 	add.w	r3, r7, #16
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001524:	4b43      	ldr	r3, [pc, #268]	; (8001634 <_ZL12MX_GPIO_Initv+0x124>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	4a42      	ldr	r2, [pc, #264]	; (8001634 <_ZL12MX_GPIO_Initv+0x124>)
 800152a:	f043 0310 	orr.w	r3, r3, #16
 800152e:	6193      	str	r3, [r2, #24]
 8001530:	4b40      	ldr	r3, [pc, #256]	; (8001634 <_ZL12MX_GPIO_Initv+0x124>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	f003 0310 	and.w	r3, r3, #16
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800153c:	4b3d      	ldr	r3, [pc, #244]	; (8001634 <_ZL12MX_GPIO_Initv+0x124>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	4a3c      	ldr	r2, [pc, #240]	; (8001634 <_ZL12MX_GPIO_Initv+0x124>)
 8001542:	f043 0320 	orr.w	r3, r3, #32
 8001546:	6193      	str	r3, [r2, #24]
 8001548:	4b3a      	ldr	r3, [pc, #232]	; (8001634 <_ZL12MX_GPIO_Initv+0x124>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f003 0320 	and.w	r3, r3, #32
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001554:	4b37      	ldr	r3, [pc, #220]	; (8001634 <_ZL12MX_GPIO_Initv+0x124>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	4a36      	ldr	r2, [pc, #216]	; (8001634 <_ZL12MX_GPIO_Initv+0x124>)
 800155a:	f043 0304 	orr.w	r3, r3, #4
 800155e:	6193      	str	r3, [r2, #24]
 8001560:	4b34      	ldr	r3, [pc, #208]	; (8001634 <_ZL12MX_GPIO_Initv+0x124>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156c:	4b31      	ldr	r3, [pc, #196]	; (8001634 <_ZL12MX_GPIO_Initv+0x124>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	4a30      	ldr	r2, [pc, #192]	; (8001634 <_ZL12MX_GPIO_Initv+0x124>)
 8001572:	f043 0308 	orr.w	r3, r3, #8
 8001576:	6193      	str	r3, [r2, #24]
 8001578:	4b2e      	ldr	r3, [pc, #184]	; (8001634 <_ZL12MX_GPIO_Initv+0x124>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	f003 0308 	and.w	r3, r3, #8
 8001580:	603b      	str	r3, [r7, #0]
 8001582:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8001584:	2200      	movs	r2, #0
 8001586:	2130      	movs	r1, #48	; 0x30
 8001588:	482b      	ldr	r0, [pc, #172]	; (8001638 <_ZL12MX_GPIO_Initv+0x128>)
 800158a:	f000 fda7 	bl	80020dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	f64e 4101 	movw	r1, #60417	; 0xec01
 8001594:	4829      	ldr	r0, [pc, #164]	; (800163c <_ZL12MX_GPIO_Initv+0x12c>)
 8001596:	f000 fda1 	bl	80020dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 PA4*/
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4;
 800159a:	231f      	movs	r3, #31
 800159c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800159e:	4b28      	ldr	r3, [pc, #160]	; (8001640 <_ZL12MX_GPIO_Initv+0x130>)
 80015a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015a2:	2301      	movs	r3, #1
 80015a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a6:	f107 0310 	add.w	r3, r7, #16
 80015aa:	4619      	mov	r1, r3
 80015ac:	4822      	ldr	r0, [pc, #136]	; (8001638 <_ZL12MX_GPIO_Initv+0x128>)
 80015ae:	f000 fc11 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 80015b2:	2330      	movs	r3, #48	; 0x30
 80015b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2302      	movs	r3, #2
 80015c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c2:	f107 0310 	add.w	r3, r7, #16
 80015c6:	4619      	mov	r1, r3
 80015c8:	481b      	ldr	r0, [pc, #108]	; (8001638 <_ZL12MX_GPIO_Initv+0x128>)
 80015ca:	f000 fc03 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB11 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80015ce:	f64f 4301 	movw	r3, #64513	; 0xfc01
 80015d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d4:	2301      	movs	r3, #1
 80015d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	2302      	movs	r3, #2
 80015de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e0:	f107 0310 	add.w	r3, r7, #16
 80015e4:	4619      	mov	r1, r3
 80015e6:	4815      	ldr	r0, [pc, #84]	; (800163c <_ZL12MX_GPIO_Initv+0x12c>)
 80015e8:	f000 fbf4 	bl	8001dd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2100      	movs	r1, #0
 80015f0:	2006      	movs	r0, #6
 80015f2:	f000 fbb8 	bl	8001d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80015f6:	2006      	movs	r0, #6
 80015f8:	f000 fbd1 	bl	8001d9e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2100      	movs	r1, #0
 8001600:	2007      	movs	r0, #7
 8001602:	f000 fbb0 	bl	8001d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001606:	2007      	movs	r0, #7
 8001608:	f000 fbc9 	bl	8001d9e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800160c:	2200      	movs	r2, #0
 800160e:	2100      	movs	r1, #0
 8001610:	2008      	movs	r0, #8
 8001612:	f000 fba8 	bl	8001d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001616:	2008      	movs	r0, #8
 8001618:	f000 fbc1 	bl	8001d9e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800161c:	2200      	movs	r2, #0
 800161e:	2100      	movs	r1, #0
 8001620:	2009      	movs	r0, #9
 8001622:	f000 fba0 	bl	8001d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001626:	2009      	movs	r0, #9
 8001628:	f000 fbb9 	bl	8001d9e <HAL_NVIC_EnableIRQ>
}
 800162c:	bf00      	nop
 800162e:	3720      	adds	r7, #32
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40021000 	.word	0x40021000
 8001638:	40010800 	.word	0x40010800
 800163c:	40010c00 	.word	0x40010c00
 8001640:	10110000 	.word	0x10110000

08001644 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001648:	b672      	cpsid	i
}
 800164a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800164c:	e7fe      	b.n	800164c <Error_Handler+0x8>
	...

08001650 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d148      	bne.n	80016f2 <_Z41__static_initialization_and_destruction_0ii+0xa2>
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001666:	4293      	cmp	r3, r2
 8001668:	d143      	bne.n	80016f2 <_Z41__static_initialization_and_destruction_0ii+0xa2>
inline Motor frontLeftMotor;
 800166a:	4b24      	ldr	r3, [pc, #144]	; (80016fc <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	3301      	adds	r3, #1
 8001670:	4a22      	ldr	r2, [pc, #136]	; (80016fc <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	4b21      	ldr	r3, [pc, #132]	; (80016fc <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b01      	cmp	r3, #1
 800167a:	bf0c      	ite	eq
 800167c:	2301      	moveq	r3, #1
 800167e:	2300      	movne	r3, #0
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d002      	beq.n	800168c <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8001686:	481e      	ldr	r0, [pc, #120]	; (8001700 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8001688:	f7ff f87a 	bl	8000780 <_ZN5MotorC1Ev>
inline Motor frontRightMotor;
 800168c:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	3301      	adds	r3, #1
 8001692:	4a1c      	ldr	r2, [pc, #112]	; (8001704 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2b01      	cmp	r3, #1
 800169c:	bf0c      	ite	eq
 800169e:	2301      	moveq	r3, #1
 80016a0:	2300      	movne	r3, #0
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d002      	beq.n	80016ae <_Z41__static_initialization_and_destruction_0ii+0x5e>
 80016a8:	4817      	ldr	r0, [pc, #92]	; (8001708 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80016aa:	f7ff f869 	bl	8000780 <_ZN5MotorC1Ev>
inline Motor backLeftMotor;
 80016ae:	4b17      	ldr	r3, [pc, #92]	; (800170c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	3301      	adds	r3, #1
 80016b4:	4a15      	ldr	r2, [pc, #84]	; (800170c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	4b14      	ldr	r3, [pc, #80]	; (800170c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	bf0c      	ite	eq
 80016c0:	2301      	moveq	r3, #1
 80016c2:	2300      	movne	r3, #0
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d002      	beq.n	80016d0 <_Z41__static_initialization_and_destruction_0ii+0x80>
 80016ca:	4811      	ldr	r0, [pc, #68]	; (8001710 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80016cc:	f7ff f858 	bl	8000780 <_ZN5MotorC1Ev>
inline Motor backRightMotor;
 80016d0:	4b10      	ldr	r3, [pc, #64]	; (8001714 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	3301      	adds	r3, #1
 80016d6:	4a0f      	ldr	r2, [pc, #60]	; (8001714 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	bf0c      	ite	eq
 80016e2:	2301      	moveq	r3, #1
 80016e4:	2300      	movne	r3, #0
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d002      	beq.n	80016f2 <_Z41__static_initialization_and_destruction_0ii+0xa2>
 80016ec:	480a      	ldr	r0, [pc, #40]	; (8001718 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80016ee:	f7ff f847 	bl	8000780 <_ZN5MotorC1Ev>
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000480 	.word	0x20000480
 8001700:	20000290 	.word	0x20000290
 8001704:	20000484 	.word	0x20000484
 8001708:	2000030c 	.word	0x2000030c
 800170c:	20000488 	.word	0x20000488
 8001710:	20000388 	.word	0x20000388
 8001714:	2000048c 	.word	0x2000048c
 8001718:	20000404 	.word	0x20000404

0800171c <_GLOBAL__sub_I_hi2c1>:
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
 8001720:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001724:	2001      	movs	r0, #1
 8001726:	f7ff ff93 	bl	8001650 <_Z41__static_initialization_and_destruction_0ii>
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001732:	4b15      	ldr	r3, [pc, #84]	; (8001788 <HAL_MspInit+0x5c>)
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	4a14      	ldr	r2, [pc, #80]	; (8001788 <HAL_MspInit+0x5c>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6193      	str	r3, [r2, #24]
 800173e:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_MspInit+0x5c>)
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800174a:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <HAL_MspInit+0x5c>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	4a0e      	ldr	r2, [pc, #56]	; (8001788 <HAL_MspInit+0x5c>)
 8001750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001754:	61d3      	str	r3, [r2, #28]
 8001756:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <HAL_MspInit+0x5c>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <HAL_MspInit+0x60>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	4a04      	ldr	r2, [pc, #16]	; (800178c <HAL_MspInit+0x60>)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800177e:	bf00      	nop
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr
 8001788:	40021000 	.word	0x40021000
 800178c:	40010000 	.word	0x40010000

08001790 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 0310 	add.w	r3, r7, #16
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a15      	ldr	r2, [pc, #84]	; (8001800 <HAL_I2C_MspInit+0x70>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d123      	bne.n	80017f8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b0:	4b14      	ldr	r3, [pc, #80]	; (8001804 <HAL_I2C_MspInit+0x74>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	4a13      	ldr	r2, [pc, #76]	; (8001804 <HAL_I2C_MspInit+0x74>)
 80017b6:	f043 0308 	orr.w	r3, r3, #8
 80017ba:	6193      	str	r3, [r2, #24]
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <HAL_I2C_MspInit+0x74>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	f003 0308 	and.w	r3, r3, #8
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017c8:	23c0      	movs	r3, #192	; 0xc0
 80017ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017cc:	2312      	movs	r3, #18
 80017ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d0:	2303      	movs	r3, #3
 80017d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	4619      	mov	r1, r3
 80017da:	480b      	ldr	r0, [pc, #44]	; (8001808 <HAL_I2C_MspInit+0x78>)
 80017dc:	f000 fafa 	bl	8001dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <HAL_I2C_MspInit+0x74>)
 80017e2:	69db      	ldr	r3, [r3, #28]
 80017e4:	4a07      	ldr	r2, [pc, #28]	; (8001804 <HAL_I2C_MspInit+0x74>)
 80017e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017ea:	61d3      	str	r3, [r2, #28]
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <HAL_I2C_MspInit+0x74>)
 80017ee:	69db      	ldr	r3, [r3, #28]
 80017f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017f8:	bf00      	nop
 80017fa:	3720      	adds	r7, #32
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40005400 	.word	0x40005400
 8001804:	40021000 	.word	0x40021000
 8001808:	40010c00 	.word	0x40010c00

0800180c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a12      	ldr	r2, [pc, #72]	; (8001864 <HAL_TIM_PWM_MspInit+0x58>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d10c      	bne.n	8001838 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800181e:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_TIM_PWM_MspInit+0x5c>)
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	4a11      	ldr	r2, [pc, #68]	; (8001868 <HAL_TIM_PWM_MspInit+0x5c>)
 8001824:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001828:	6193      	str	r3, [r2, #24]
 800182a:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <HAL_TIM_PWM_MspInit+0x5c>)
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001836:	e010      	b.n	800185a <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0b      	ldr	r2, [pc, #44]	; (800186c <HAL_TIM_PWM_MspInit+0x60>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d10b      	bne.n	800185a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <HAL_TIM_PWM_MspInit+0x5c>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	4a08      	ldr	r2, [pc, #32]	; (8001868 <HAL_TIM_PWM_MspInit+0x5c>)
 8001848:	f043 0302 	orr.w	r3, r3, #2
 800184c:	61d3      	str	r3, [r2, #28]
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_TIM_PWM_MspInit+0x5c>)
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]
}
 800185a:	bf00      	nop
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr
 8001864:	40012c00 	.word	0x40012c00
 8001868:	40021000 	.word	0x40021000
 800186c:	40000400 	.word	0x40000400

08001870 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	; 0x28
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	f107 0318 	add.w	r3, r7, #24
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a2b      	ldr	r2, [pc, #172]	; (8001938 <HAL_TIM_MspPostInit+0xc8>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d119      	bne.n	80018c4 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001890:	4b2a      	ldr	r3, [pc, #168]	; (800193c <HAL_TIM_MspPostInit+0xcc>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	4a29      	ldr	r2, [pc, #164]	; (800193c <HAL_TIM_MspPostInit+0xcc>)
 8001896:	f043 0304 	orr.w	r3, r3, #4
 800189a:	6193      	str	r3, [r2, #24]
 800189c:	4b27      	ldr	r3, [pc, #156]	; (800193c <HAL_TIM_MspPostInit+0xcc>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2302      	movs	r3, #2
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b6:	f107 0318 	add.w	r3, r7, #24
 80018ba:	4619      	mov	r1, r3
 80018bc:	4820      	ldr	r0, [pc, #128]	; (8001940 <HAL_TIM_MspPostInit+0xd0>)
 80018be:	f000 fa89 	bl	8001dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018c2:	e034      	b.n	800192e <HAL_TIM_MspPostInit+0xbe>
  else if(htim->Instance==TIM3)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a1e      	ldr	r2, [pc, #120]	; (8001944 <HAL_TIM_MspPostInit+0xd4>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d12f      	bne.n	800192e <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	4b1b      	ldr	r3, [pc, #108]	; (800193c <HAL_TIM_MspPostInit+0xcc>)
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	4a1a      	ldr	r2, [pc, #104]	; (800193c <HAL_TIM_MspPostInit+0xcc>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	6193      	str	r3, [r2, #24]
 80018da:	4b18      	ldr	r3, [pc, #96]	; (800193c <HAL_TIM_MspPostInit+0xcc>)
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <HAL_TIM_MspPostInit+0xcc>)
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	4a14      	ldr	r2, [pc, #80]	; (800193c <HAL_TIM_MspPostInit+0xcc>)
 80018ec:	f043 0308 	orr.w	r3, r3, #8
 80018f0:	6193      	str	r3, [r2, #24]
 80018f2:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_TIM_MspPostInit+0xcc>)
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018fe:	23c0      	movs	r3, #192	; 0xc0
 8001900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2302      	movs	r3, #2
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190a:	f107 0318 	add.w	r3, r7, #24
 800190e:	4619      	mov	r1, r3
 8001910:	480b      	ldr	r0, [pc, #44]	; (8001940 <HAL_TIM_MspPostInit+0xd0>)
 8001912:	f000 fa5f 	bl	8001dd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001916:	2302      	movs	r3, #2
 8001918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191a:	2302      	movs	r3, #2
 800191c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191e:	2302      	movs	r3, #2
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001922:	f107 0318 	add.w	r3, r7, #24
 8001926:	4619      	mov	r1, r3
 8001928:	4807      	ldr	r0, [pc, #28]	; (8001948 <HAL_TIM_MspPostInit+0xd8>)
 800192a:	f000 fa53 	bl	8001dd4 <HAL_GPIO_Init>
}
 800192e:	bf00      	nop
 8001930:	3728      	adds	r7, #40	; 0x28
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40012c00 	.word	0x40012c00
 800193c:	40021000 	.word	0x40021000
 8001940:	40010800 	.word	0x40010800
 8001944:	40000400 	.word	0x40000400
 8001948:	40010c00 	.word	0x40010c00

0800194c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <NMI_Handler+0x4>

08001952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001956:	e7fe      	b.n	8001956 <HardFault_Handler+0x4>

08001958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800195c:	e7fe      	b.n	800195c <MemManage_Handler+0x4>

0800195e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001962:	e7fe      	b.n	8001962 <BusFault_Handler+0x4>

08001964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001968:	e7fe      	b.n	8001968 <UsageFault_Handler+0x4>

0800196a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr

08001976 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr

08001982 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr

0800198e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001992:	f000 f8d1 	bl	8001b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}

0800199a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800199e:	2001      	movs	r0, #1
 80019a0:	f000 fbb4 	bl	800210c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80019ac:	2002      	movs	r0, #2
 80019ae:	f000 fbad 	bl	800210c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80019ba:	2004      	movs	r0, #4
 80019bc:	f000 fba6 	bl	800210c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80019c8:	2008      	movs	r0, #8
 80019ca:	f000 fb9f 	bl	800210c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80019d8:	4802      	ldr	r0, [pc, #8]	; (80019e4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80019da:	f001 f967 	bl	8002cac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200013ac 	.word	0x200013ac

080019e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f0:	4a14      	ldr	r2, [pc, #80]	; (8001a44 <_sbrk+0x5c>)
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <_sbrk+0x60>)
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019fc:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <_sbrk+0x64>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d102      	bne.n	8001a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <_sbrk+0x64>)
 8001a06:	4a12      	ldr	r2, [pc, #72]	; (8001a50 <_sbrk+0x68>)
 8001a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <_sbrk+0x64>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4413      	add	r3, r2
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d207      	bcs.n	8001a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a18:	f007 ffa4 	bl	8009964 <__errno>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	220c      	movs	r2, #12
 8001a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295
 8001a26:	e009      	b.n	8001a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <_sbrk+0x64>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a2e:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <_sbrk+0x64>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	4a05      	ldr	r2, [pc, #20]	; (8001a4c <_sbrk+0x64>)
 8001a38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20005000 	.word	0x20005000
 8001a48:	00000400 	.word	0x00000400
 8001a4c:	200004e4 	.word	0x200004e4
 8001a50:	20001698 	.word	0x20001698

08001a54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr

08001a60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a60:	f7ff fff8 	bl	8001a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a64:	480b      	ldr	r0, [pc, #44]	; (8001a94 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a66:	490c      	ldr	r1, [pc, #48]	; (8001a98 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a68:	4a0c      	ldr	r2, [pc, #48]	; (8001a9c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a6c:	e002      	b.n	8001a74 <LoopCopyDataInit>

08001a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a72:	3304      	adds	r3, #4

08001a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a78:	d3f9      	bcc.n	8001a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a7a:	4a09      	ldr	r2, [pc, #36]	; (8001aa0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a7c:	4c09      	ldr	r4, [pc, #36]	; (8001aa4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a80:	e001      	b.n	8001a86 <LoopFillZerobss>

08001a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a84:	3204      	adds	r2, #4

08001a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a88:	d3fb      	bcc.n	8001a82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a8a:	f007 ff71 	bl	8009970 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a8e:	f7ff fb25 	bl	80010dc <main>
  bx lr
 8001a92:	4770      	bx	lr
  ldr r0, =_sdata
 8001a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a98:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001a9c:	0800a368 	.word	0x0800a368
  ldr r2, =_sbss
 8001aa0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001aa4:	20001694 	.word	0x20001694

08001aa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001aa8:	e7fe      	b.n	8001aa8 <ADC1_2_IRQHandler>
	...

08001aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <HAL_Init+0x28>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a07      	ldr	r2, [pc, #28]	; (8001ad4 <HAL_Init+0x28>)
 8001ab6:	f043 0310 	orr.w	r3, r3, #16
 8001aba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001abc:	2003      	movs	r0, #3
 8001abe:	f000 f947 	bl	8001d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ac2:	200f      	movs	r0, #15
 8001ac4:	f000 f808 	bl	8001ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ac8:	f7ff fe30 	bl	800172c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40022000 	.word	0x40022000

08001ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ae0:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_InitTick+0x54>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_InitTick+0x58>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 f95f 	bl	8001dba <HAL_SYSTICK_Config>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e00e      	b.n	8001b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b0f      	cmp	r3, #15
 8001b0a:	d80a      	bhi.n	8001b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	f04f 30ff 	mov.w	r0, #4294967295
 8001b14:	f000 f927 	bl	8001d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b18:	4a06      	ldr	r2, [pc, #24]	; (8001b34 <HAL_InitTick+0x5c>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	e000      	b.n	8001b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000004 	.word	0x20000004
 8001b30:	2000000c 	.word	0x2000000c
 8001b34:	20000008 	.word	0x20000008

08001b38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_IncTick+0x1c>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <HAL_IncTick+0x20>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4413      	add	r3, r2
 8001b48:	4a03      	ldr	r2, [pc, #12]	; (8001b58 <HAL_IncTick+0x20>)
 8001b4a:	6013      	str	r3, [r2, #0]
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	2000000c 	.word	0x2000000c
 8001b58:	20000714 	.word	0x20000714

08001b5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b60:	4b02      	ldr	r3, [pc, #8]	; (8001b6c <HAL_GetTick+0x10>)
 8001b62:	681b      	ldr	r3, [r3, #0]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr
 8001b6c:	20000714 	.word	0x20000714

08001b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b78:	f7ff fff0 	bl	8001b5c <HAL_GetTick>
 8001b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b88:	d005      	beq.n	8001b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <HAL_Delay+0x44>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b96:	bf00      	nop
 8001b98:	f7ff ffe0 	bl	8001b5c <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d8f7      	bhi.n	8001b98 <HAL_Delay+0x28>
  {
  }
}
 8001ba8:	bf00      	nop
 8001baa:	bf00      	nop
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	2000000c 	.word	0x2000000c

08001bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <__NVIC_SetPriorityGrouping+0x44>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bea:	4a04      	ldr	r2, [pc, #16]	; (8001bfc <__NVIC_SetPriorityGrouping+0x44>)
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	60d3      	str	r3, [r2, #12]
}
 8001bf0:	bf00      	nop
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c04:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <__NVIC_GetPriorityGrouping+0x18>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	0a1b      	lsrs	r3, r3, #8
 8001c0a:	f003 0307 	and.w	r3, r3, #7
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	db0b      	blt.n	8001c46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	f003 021f 	and.w	r2, r3, #31
 8001c34:	4906      	ldr	r1, [pc, #24]	; (8001c50 <__NVIC_EnableIRQ+0x34>)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	095b      	lsrs	r3, r3, #5
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr
 8001c50:	e000e100 	.word	0xe000e100

08001c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	6039      	str	r1, [r7, #0]
 8001c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	db0a      	blt.n	8001c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	490c      	ldr	r1, [pc, #48]	; (8001ca0 <__NVIC_SetPriority+0x4c>)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	0112      	lsls	r2, r2, #4
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	440b      	add	r3, r1
 8001c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c7c:	e00a      	b.n	8001c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4908      	ldr	r1, [pc, #32]	; (8001ca4 <__NVIC_SetPriority+0x50>)
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	3b04      	subs	r3, #4
 8001c8c:	0112      	lsls	r2, r2, #4
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	440b      	add	r3, r1
 8001c92:	761a      	strb	r2, [r3, #24]
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000e100 	.word	0xe000e100
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b089      	sub	sp, #36	; 0x24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f1c3 0307 	rsb	r3, r3, #7
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	bf28      	it	cs
 8001cc6:	2304      	movcs	r3, #4
 8001cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3304      	adds	r3, #4
 8001cce:	2b06      	cmp	r3, #6
 8001cd0:	d902      	bls.n	8001cd8 <NVIC_EncodePriority+0x30>
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3b03      	subs	r3, #3
 8001cd6:	e000      	b.n	8001cda <NVIC_EncodePriority+0x32>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	401a      	ands	r2, r3
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfa:	43d9      	mvns	r1, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d00:	4313      	orrs	r3, r2
         );
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3724      	adds	r7, #36	; 0x24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr

08001d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d1c:	d301      	bcc.n	8001d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e00f      	b.n	8001d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d22:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <SysTick_Config+0x40>)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d2a:	210f      	movs	r1, #15
 8001d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d30:	f7ff ff90 	bl	8001c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <SysTick_Config+0x40>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d3a:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <SysTick_Config+0x40>)
 8001d3c:	2207      	movs	r2, #7
 8001d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	e000e010 	.word	0xe000e010

08001d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff ff2d 	bl	8001bb8 <__NVIC_SetPriorityGrouping>
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b086      	sub	sp, #24
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	60b9      	str	r1, [r7, #8]
 8001d70:	607a      	str	r2, [r7, #4]
 8001d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d78:	f7ff ff42 	bl	8001c00 <__NVIC_GetPriorityGrouping>
 8001d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	68b9      	ldr	r1, [r7, #8]
 8001d82:	6978      	ldr	r0, [r7, #20]
 8001d84:	f7ff ff90 	bl	8001ca8 <NVIC_EncodePriority>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d8e:	4611      	mov	r1, r2
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff5f 	bl	8001c54 <__NVIC_SetPriority>
}
 8001d96:	bf00      	nop
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff35 	bl	8001c1c <__NVIC_EnableIRQ>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff ffa2 	bl	8001d0c <SysTick_Config>
 8001dc8:	4603      	mov	r3, r0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b08b      	sub	sp, #44	; 0x2c
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dde:	2300      	movs	r3, #0
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001de2:	2300      	movs	r3, #0
 8001de4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de6:	e169      	b.n	80020bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001de8:	2201      	movs	r2, #1
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	69fa      	ldr	r2, [r7, #28]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	f040 8158 	bne.w	80020b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	4a9a      	ldr	r2, [pc, #616]	; (8002074 <HAL_GPIO_Init+0x2a0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d05e      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
 8001e10:	4a98      	ldr	r2, [pc, #608]	; (8002074 <HAL_GPIO_Init+0x2a0>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d875      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e16:	4a98      	ldr	r2, [pc, #608]	; (8002078 <HAL_GPIO_Init+0x2a4>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d058      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
 8001e1c:	4a96      	ldr	r2, [pc, #600]	; (8002078 <HAL_GPIO_Init+0x2a4>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d86f      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e22:	4a96      	ldr	r2, [pc, #600]	; (800207c <HAL_GPIO_Init+0x2a8>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d052      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
 8001e28:	4a94      	ldr	r2, [pc, #592]	; (800207c <HAL_GPIO_Init+0x2a8>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d869      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e2e:	4a94      	ldr	r2, [pc, #592]	; (8002080 <HAL_GPIO_Init+0x2ac>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d04c      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
 8001e34:	4a92      	ldr	r2, [pc, #584]	; (8002080 <HAL_GPIO_Init+0x2ac>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d863      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e3a:	4a92      	ldr	r2, [pc, #584]	; (8002084 <HAL_GPIO_Init+0x2b0>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d046      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
 8001e40:	4a90      	ldr	r2, [pc, #576]	; (8002084 <HAL_GPIO_Init+0x2b0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d85d      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e46:	2b12      	cmp	r3, #18
 8001e48:	d82a      	bhi.n	8001ea0 <HAL_GPIO_Init+0xcc>
 8001e4a:	2b12      	cmp	r3, #18
 8001e4c:	d859      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e4e:	a201      	add	r2, pc, #4	; (adr r2, 8001e54 <HAL_GPIO_Init+0x80>)
 8001e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e54:	08001ecf 	.word	0x08001ecf
 8001e58:	08001ea9 	.word	0x08001ea9
 8001e5c:	08001ebb 	.word	0x08001ebb
 8001e60:	08001efd 	.word	0x08001efd
 8001e64:	08001f03 	.word	0x08001f03
 8001e68:	08001f03 	.word	0x08001f03
 8001e6c:	08001f03 	.word	0x08001f03
 8001e70:	08001f03 	.word	0x08001f03
 8001e74:	08001f03 	.word	0x08001f03
 8001e78:	08001f03 	.word	0x08001f03
 8001e7c:	08001f03 	.word	0x08001f03
 8001e80:	08001f03 	.word	0x08001f03
 8001e84:	08001f03 	.word	0x08001f03
 8001e88:	08001f03 	.word	0x08001f03
 8001e8c:	08001f03 	.word	0x08001f03
 8001e90:	08001f03 	.word	0x08001f03
 8001e94:	08001f03 	.word	0x08001f03
 8001e98:	08001eb1 	.word	0x08001eb1
 8001e9c:	08001ec5 	.word	0x08001ec5
 8001ea0:	4a79      	ldr	r2, [pc, #484]	; (8002088 <HAL_GPIO_Init+0x2b4>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d013      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ea6:	e02c      	b.n	8001f02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	623b      	str	r3, [r7, #32]
          break;
 8001eae:	e029      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	623b      	str	r3, [r7, #32]
          break;
 8001eb8:	e024      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	3308      	adds	r3, #8
 8001ec0:	623b      	str	r3, [r7, #32]
          break;
 8001ec2:	e01f      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	330c      	adds	r3, #12
 8001eca:	623b      	str	r3, [r7, #32]
          break;
 8001ecc:	e01a      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d102      	bne.n	8001edc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ed6:	2304      	movs	r3, #4
 8001ed8:	623b      	str	r3, [r7, #32]
          break;
 8001eda:	e013      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d105      	bne.n	8001ef0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ee4:	2308      	movs	r3, #8
 8001ee6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69fa      	ldr	r2, [r7, #28]
 8001eec:	611a      	str	r2, [r3, #16]
          break;
 8001eee:	e009      	b.n	8001f04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ef0:	2308      	movs	r3, #8
 8001ef2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69fa      	ldr	r2, [r7, #28]
 8001ef8:	615a      	str	r2, [r3, #20]
          break;
 8001efa:	e003      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001efc:	2300      	movs	r3, #0
 8001efe:	623b      	str	r3, [r7, #32]
          break;
 8001f00:	e000      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          break;
 8001f02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	2bff      	cmp	r3, #255	; 0xff
 8001f08:	d801      	bhi.n	8001f0e <HAL_GPIO_Init+0x13a>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	e001      	b.n	8001f12 <HAL_GPIO_Init+0x13e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3304      	adds	r3, #4
 8001f12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	2bff      	cmp	r3, #255	; 0xff
 8001f18:	d802      	bhi.n	8001f20 <HAL_GPIO_Init+0x14c>
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	e002      	b.n	8001f26 <HAL_GPIO_Init+0x152>
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	3b08      	subs	r3, #8
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	210f      	movs	r1, #15
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	fa01 f303 	lsl.w	r3, r1, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	401a      	ands	r2, r3
 8001f38:	6a39      	ldr	r1, [r7, #32]
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f40:	431a      	orrs	r2, r3
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 80b1 	beq.w	80020b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f54:	4b4d      	ldr	r3, [pc, #308]	; (800208c <HAL_GPIO_Init+0x2b8>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	4a4c      	ldr	r2, [pc, #304]	; (800208c <HAL_GPIO_Init+0x2b8>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	6193      	str	r3, [r2, #24]
 8001f60:	4b4a      	ldr	r3, [pc, #296]	; (800208c <HAL_GPIO_Init+0x2b8>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f6c:	4a48      	ldr	r2, [pc, #288]	; (8002090 <HAL_GPIO_Init+0x2bc>)
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	089b      	lsrs	r3, r3, #2
 8001f72:	3302      	adds	r3, #2
 8001f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	220f      	movs	r2, #15
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a40      	ldr	r2, [pc, #256]	; (8002094 <HAL_GPIO_Init+0x2c0>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d013      	beq.n	8001fc0 <HAL_GPIO_Init+0x1ec>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a3f      	ldr	r2, [pc, #252]	; (8002098 <HAL_GPIO_Init+0x2c4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d00d      	beq.n	8001fbc <HAL_GPIO_Init+0x1e8>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a3e      	ldr	r2, [pc, #248]	; (800209c <HAL_GPIO_Init+0x2c8>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d007      	beq.n	8001fb8 <HAL_GPIO_Init+0x1e4>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a3d      	ldr	r2, [pc, #244]	; (80020a0 <HAL_GPIO_Init+0x2cc>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d101      	bne.n	8001fb4 <HAL_GPIO_Init+0x1e0>
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e006      	b.n	8001fc2 <HAL_GPIO_Init+0x1ee>
 8001fb4:	2304      	movs	r3, #4
 8001fb6:	e004      	b.n	8001fc2 <HAL_GPIO_Init+0x1ee>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e002      	b.n	8001fc2 <HAL_GPIO_Init+0x1ee>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <HAL_GPIO_Init+0x1ee>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc4:	f002 0203 	and.w	r2, r2, #3
 8001fc8:	0092      	lsls	r2, r2, #2
 8001fca:	4093      	lsls	r3, r2
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fd2:	492f      	ldr	r1, [pc, #188]	; (8002090 <HAL_GPIO_Init+0x2bc>)
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	089b      	lsrs	r3, r3, #2
 8001fd8:	3302      	adds	r3, #2
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d006      	beq.n	8001ffa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fec:	4b2d      	ldr	r3, [pc, #180]	; (80020a4 <HAL_GPIO_Init+0x2d0>)
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	492c      	ldr	r1, [pc, #176]	; (80020a4 <HAL_GPIO_Init+0x2d0>)
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	608b      	str	r3, [r1, #8]
 8001ff8:	e006      	b.n	8002008 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ffa:	4b2a      	ldr	r3, [pc, #168]	; (80020a4 <HAL_GPIO_Init+0x2d0>)
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	43db      	mvns	r3, r3
 8002002:	4928      	ldr	r1, [pc, #160]	; (80020a4 <HAL_GPIO_Init+0x2d0>)
 8002004:	4013      	ands	r3, r2
 8002006:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d006      	beq.n	8002022 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002014:	4b23      	ldr	r3, [pc, #140]	; (80020a4 <HAL_GPIO_Init+0x2d0>)
 8002016:	68da      	ldr	r2, [r3, #12]
 8002018:	4922      	ldr	r1, [pc, #136]	; (80020a4 <HAL_GPIO_Init+0x2d0>)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	4313      	orrs	r3, r2
 800201e:	60cb      	str	r3, [r1, #12]
 8002020:	e006      	b.n	8002030 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002022:	4b20      	ldr	r3, [pc, #128]	; (80020a4 <HAL_GPIO_Init+0x2d0>)
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	43db      	mvns	r3, r3
 800202a:	491e      	ldr	r1, [pc, #120]	; (80020a4 <HAL_GPIO_Init+0x2d0>)
 800202c:	4013      	ands	r3, r2
 800202e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d006      	beq.n	800204a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800203c:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <HAL_GPIO_Init+0x2d0>)
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	4918      	ldr	r1, [pc, #96]	; (80020a4 <HAL_GPIO_Init+0x2d0>)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	604b      	str	r3, [r1, #4]
 8002048:	e006      	b.n	8002058 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800204a:	4b16      	ldr	r3, [pc, #88]	; (80020a4 <HAL_GPIO_Init+0x2d0>)
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	43db      	mvns	r3, r3
 8002052:	4914      	ldr	r1, [pc, #80]	; (80020a4 <HAL_GPIO_Init+0x2d0>)
 8002054:	4013      	ands	r3, r2
 8002056:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d021      	beq.n	80020a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002064:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <HAL_GPIO_Init+0x2d0>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	490e      	ldr	r1, [pc, #56]	; (80020a4 <HAL_GPIO_Init+0x2d0>)
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	4313      	orrs	r3, r2
 800206e:	600b      	str	r3, [r1, #0]
 8002070:	e021      	b.n	80020b6 <HAL_GPIO_Init+0x2e2>
 8002072:	bf00      	nop
 8002074:	10320000 	.word	0x10320000
 8002078:	10310000 	.word	0x10310000
 800207c:	10220000 	.word	0x10220000
 8002080:	10210000 	.word	0x10210000
 8002084:	10120000 	.word	0x10120000
 8002088:	10110000 	.word	0x10110000
 800208c:	40021000 	.word	0x40021000
 8002090:	40010000 	.word	0x40010000
 8002094:	40010800 	.word	0x40010800
 8002098:	40010c00 	.word	0x40010c00
 800209c:	40011000 	.word	0x40011000
 80020a0:	40011400 	.word	0x40011400
 80020a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020a8:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <HAL_GPIO_Init+0x304>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	43db      	mvns	r3, r3
 80020b0:	4909      	ldr	r1, [pc, #36]	; (80020d8 <HAL_GPIO_Init+0x304>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	3301      	adds	r3, #1
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	fa22 f303 	lsr.w	r3, r2, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f47f ae8e 	bne.w	8001de8 <HAL_GPIO_Init+0x14>
  }
}
 80020cc:	bf00      	nop
 80020ce:	bf00      	nop
 80020d0:	372c      	adds	r7, #44	; 0x2c
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr
 80020d8:	40010400 	.word	0x40010400

080020dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	807b      	strh	r3, [r7, #2]
 80020e8:	4613      	mov	r3, r2
 80020ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020ec:	787b      	ldrb	r3, [r7, #1]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020f2:	887a      	ldrh	r2, [r7, #2]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020f8:	e003      	b.n	8002102 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020fa:	887b      	ldrh	r3, [r7, #2]
 80020fc:	041a      	lsls	r2, r3, #16
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	611a      	str	r2, [r3, #16]
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr

0800210c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002116:	4b08      	ldr	r3, [pc, #32]	; (8002138 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002118:	695a      	ldr	r2, [r3, #20]
 800211a:	88fb      	ldrh	r3, [r7, #6]
 800211c:	4013      	ands	r3, r2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d006      	beq.n	8002130 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002122:	4a05      	ldr	r2, [pc, #20]	; (8002138 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002124:	88fb      	ldrh	r3, [r7, #6]
 8002126:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002128:	88fb      	ldrh	r3, [r7, #6]
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe ff9e 	bl	800106c <HAL_GPIO_EXTI_Callback>
  }
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40010400 	.word	0x40010400

0800213c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e12b      	b.n	80023a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d106      	bne.n	8002168 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7ff fb14 	bl	8001790 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2224      	movs	r2, #36	; 0x24
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0201 	bic.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800218e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800219e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021a0:	f002 fd94 	bl	8004ccc <HAL_RCC_GetPCLK1Freq>
 80021a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	4a81      	ldr	r2, [pc, #516]	; (80023b0 <HAL_I2C_Init+0x274>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d807      	bhi.n	80021c0 <HAL_I2C_Init+0x84>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4a80      	ldr	r2, [pc, #512]	; (80023b4 <HAL_I2C_Init+0x278>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	bf94      	ite	ls
 80021b8:	2301      	movls	r3, #1
 80021ba:	2300      	movhi	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	e006      	b.n	80021ce <HAL_I2C_Init+0x92>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4a7d      	ldr	r2, [pc, #500]	; (80023b8 <HAL_I2C_Init+0x27c>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	bf94      	ite	ls
 80021c8:	2301      	movls	r3, #1
 80021ca:	2300      	movhi	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e0e7      	b.n	80023a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	4a78      	ldr	r2, [pc, #480]	; (80023bc <HAL_I2C_Init+0x280>)
 80021da:	fba2 2303 	umull	r2, r3, r2, r3
 80021de:	0c9b      	lsrs	r3, r3, #18
 80021e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	4a6a      	ldr	r2, [pc, #424]	; (80023b0 <HAL_I2C_Init+0x274>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d802      	bhi.n	8002210 <HAL_I2C_Init+0xd4>
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	3301      	adds	r3, #1
 800220e:	e009      	b.n	8002224 <HAL_I2C_Init+0xe8>
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002216:	fb02 f303 	mul.w	r3, r2, r3
 800221a:	4a69      	ldr	r2, [pc, #420]	; (80023c0 <HAL_I2C_Init+0x284>)
 800221c:	fba2 2303 	umull	r2, r3, r2, r3
 8002220:	099b      	lsrs	r3, r3, #6
 8002222:	3301      	adds	r3, #1
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	430b      	orrs	r3, r1
 800222a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002236:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	495c      	ldr	r1, [pc, #368]	; (80023b0 <HAL_I2C_Init+0x274>)
 8002240:	428b      	cmp	r3, r1
 8002242:	d819      	bhi.n	8002278 <HAL_I2C_Init+0x13c>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	1e59      	subs	r1, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002252:	1c59      	adds	r1, r3, #1
 8002254:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002258:	400b      	ands	r3, r1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00a      	beq.n	8002274 <HAL_I2C_Init+0x138>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	1e59      	subs	r1, r3, #1
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	fbb1 f3f3 	udiv	r3, r1, r3
 800226c:	3301      	adds	r3, #1
 800226e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002272:	e051      	b.n	8002318 <HAL_I2C_Init+0x1dc>
 8002274:	2304      	movs	r3, #4
 8002276:	e04f      	b.n	8002318 <HAL_I2C_Init+0x1dc>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d111      	bne.n	80022a4 <HAL_I2C_Init+0x168>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	1e58      	subs	r0, r3, #1
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6859      	ldr	r1, [r3, #4]
 8002288:	460b      	mov	r3, r1
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	440b      	add	r3, r1
 800228e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002292:	3301      	adds	r3, #1
 8002294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002298:	2b00      	cmp	r3, #0
 800229a:	bf0c      	ite	eq
 800229c:	2301      	moveq	r3, #1
 800229e:	2300      	movne	r3, #0
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	e012      	b.n	80022ca <HAL_I2C_Init+0x18e>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	1e58      	subs	r0, r3, #1
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6859      	ldr	r1, [r3, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	0099      	lsls	r1, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ba:	3301      	adds	r3, #1
 80022bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	bf0c      	ite	eq
 80022c4:	2301      	moveq	r3, #1
 80022c6:	2300      	movne	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_I2C_Init+0x196>
 80022ce:	2301      	movs	r3, #1
 80022d0:	e022      	b.n	8002318 <HAL_I2C_Init+0x1dc>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10e      	bne.n	80022f8 <HAL_I2C_Init+0x1bc>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	1e58      	subs	r0, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6859      	ldr	r1, [r3, #4]
 80022e2:	460b      	mov	r3, r1
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	440b      	add	r3, r1
 80022e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ec:	3301      	adds	r3, #1
 80022ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022f6:	e00f      	b.n	8002318 <HAL_I2C_Init+0x1dc>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	1e58      	subs	r0, r3, #1
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6859      	ldr	r1, [r3, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	0099      	lsls	r1, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	fbb0 f3f3 	udiv	r3, r0, r3
 800230e:	3301      	adds	r3, #1
 8002310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002314:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	6809      	ldr	r1, [r1, #0]
 800231c:	4313      	orrs	r3, r2
 800231e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69da      	ldr	r2, [r3, #28]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002346:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6911      	ldr	r1, [r2, #16]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	68d2      	ldr	r2, [r2, #12]
 8002352:	4311      	orrs	r1, r2
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6812      	ldr	r2, [r2, #0]
 8002358:	430b      	orrs	r3, r1
 800235a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695a      	ldr	r2, [r3, #20]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0201 	orr.w	r2, r2, #1
 8002386:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2220      	movs	r2, #32
 8002392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	000186a0 	.word	0x000186a0
 80023b4:	001e847f 	.word	0x001e847f
 80023b8:	003d08ff 	.word	0x003d08ff
 80023bc:	431bde83 	.word	0x431bde83
 80023c0:	10624dd3 	.word	0x10624dd3

080023c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	607a      	str	r2, [r7, #4]
 80023ce:	461a      	mov	r2, r3
 80023d0:	460b      	mov	r3, r1
 80023d2:	817b      	strh	r3, [r7, #10]
 80023d4:	4613      	mov	r3, r2
 80023d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023d8:	f7ff fbc0 	bl	8001b5c <HAL_GetTick>
 80023dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b20      	cmp	r3, #32
 80023e8:	f040 80e0 	bne.w	80025ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	2319      	movs	r3, #25
 80023f2:	2201      	movs	r2, #1
 80023f4:	4970      	ldr	r1, [pc, #448]	; (80025b8 <HAL_I2C_Master_Transmit+0x1f4>)
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 f964 	bl	80026c4 <I2C_WaitOnFlagUntilTimeout>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002402:	2302      	movs	r3, #2
 8002404:	e0d3      	b.n	80025ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <HAL_I2C_Master_Transmit+0x50>
 8002410:	2302      	movs	r3, #2
 8002412:	e0cc      	b.n	80025ae <HAL_I2C_Master_Transmit+0x1ea>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b01      	cmp	r3, #1
 8002428:	d007      	beq.n	800243a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 0201 	orr.w	r2, r2, #1
 8002438:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002448:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2221      	movs	r2, #33	; 0x21
 800244e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2210      	movs	r2, #16
 8002456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	893a      	ldrh	r2, [r7, #8]
 800246a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002470:	b29a      	uxth	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4a50      	ldr	r2, [pc, #320]	; (80025bc <HAL_I2C_Master_Transmit+0x1f8>)
 800247a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800247c:	8979      	ldrh	r1, [r7, #10]
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	6a3a      	ldr	r2, [r7, #32]
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 f89c 	bl	80025c0 <I2C_MasterRequestWrite>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e08d      	b.n	80025ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002492:	2300      	movs	r3, #0
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	613b      	str	r3, [r7, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024a8:	e066      	b.n	8002578 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	6a39      	ldr	r1, [r7, #32]
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 fa22 	bl	80028f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00d      	beq.n	80024d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d107      	bne.n	80024d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e06b      	b.n	80025ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	781a      	ldrb	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fe:	3b01      	subs	r3, #1
 8002500:	b29a      	uxth	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b04      	cmp	r3, #4
 8002512:	d11b      	bne.n	800254c <HAL_I2C_Master_Transmit+0x188>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002518:	2b00      	cmp	r3, #0
 800251a:	d017      	beq.n	800254c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	781a      	ldrb	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002536:	b29b      	uxth	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	6a39      	ldr	r1, [r7, #32]
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 fa19 	bl	8002988 <I2C_WaitOnBTFFlagUntilTimeout>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00d      	beq.n	8002578 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	2b04      	cmp	r3, #4
 8002562:	d107      	bne.n	8002574 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002572:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e01a      	b.n	80025ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257c:	2b00      	cmp	r3, #0
 800257e:	d194      	bne.n	80024aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800258e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2220      	movs	r2, #32
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	e000      	b.n	80025ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025ac:	2302      	movs	r3, #2
  }
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	00100002 	.word	0x00100002
 80025bc:	ffff0000 	.word	0xffff0000

080025c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af02      	add	r7, sp, #8
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	607a      	str	r2, [r7, #4]
 80025ca:	603b      	str	r3, [r7, #0]
 80025cc:	460b      	mov	r3, r1
 80025ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d006      	beq.n	80025ea <I2C_MasterRequestWrite+0x2a>
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d003      	beq.n	80025ea <I2C_MasterRequestWrite+0x2a>
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025e8:	d108      	bne.n	80025fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	e00b      	b.n	8002614 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	2b12      	cmp	r3, #18
 8002602:	d107      	bne.n	8002614 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002612:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 f84f 	bl	80026c4 <I2C_WaitOnFlagUntilTimeout>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00d      	beq.n	8002648 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800263a:	d103      	bne.n	8002644 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002642:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e035      	b.n	80026b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002650:	d108      	bne.n	8002664 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002652:	897b      	ldrh	r3, [r7, #10]
 8002654:	b2db      	uxtb	r3, r3
 8002656:	461a      	mov	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002660:	611a      	str	r2, [r3, #16]
 8002662:	e01b      	b.n	800269c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002664:	897b      	ldrh	r3, [r7, #10]
 8002666:	11db      	asrs	r3, r3, #7
 8002668:	b2db      	uxtb	r3, r3
 800266a:	f003 0306 	and.w	r3, r3, #6
 800266e:	b2db      	uxtb	r3, r3
 8002670:	f063 030f 	orn	r3, r3, #15
 8002674:	b2da      	uxtb	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	490e      	ldr	r1, [pc, #56]	; (80026bc <I2C_MasterRequestWrite+0xfc>)
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 f898 	bl	80027b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e010      	b.n	80026b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002692:	897b      	ldrh	r3, [r7, #10]
 8002694:	b2da      	uxtb	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	4907      	ldr	r1, [pc, #28]	; (80026c0 <I2C_MasterRequestWrite+0x100>)
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f000 f888 	bl	80027b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	00010008 	.word	0x00010008
 80026c0:	00010002 	.word	0x00010002

080026c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	4613      	mov	r3, r2
 80026d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026d4:	e048      	b.n	8002768 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026dc:	d044      	beq.n	8002768 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026de:	f7ff fa3d 	bl	8001b5c <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d302      	bcc.n	80026f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d139      	bne.n	8002768 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	0c1b      	lsrs	r3, r3, #16
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d10d      	bne.n	800271a <I2C_WaitOnFlagUntilTimeout+0x56>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	43da      	mvns	r2, r3
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	4013      	ands	r3, r2
 800270a:	b29b      	uxth	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	bf0c      	ite	eq
 8002710:	2301      	moveq	r3, #1
 8002712:	2300      	movne	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	461a      	mov	r2, r3
 8002718:	e00c      	b.n	8002734 <I2C_WaitOnFlagUntilTimeout+0x70>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	43da      	mvns	r2, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	4013      	ands	r3, r2
 8002726:	b29b      	uxth	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	bf0c      	ite	eq
 800272c:	2301      	moveq	r3, #1
 800272e:	2300      	movne	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	461a      	mov	r2, r3
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	429a      	cmp	r2, r3
 8002738:	d116      	bne.n	8002768 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2220      	movs	r2, #32
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002754:	f043 0220 	orr.w	r2, r3, #32
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e023      	b.n	80027b0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	0c1b      	lsrs	r3, r3, #16
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b01      	cmp	r3, #1
 8002770:	d10d      	bne.n	800278e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	43da      	mvns	r2, r3
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	4013      	ands	r3, r2
 800277e:	b29b      	uxth	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	bf0c      	ite	eq
 8002784:	2301      	moveq	r3, #1
 8002786:	2300      	movne	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	461a      	mov	r2, r3
 800278c:	e00c      	b.n	80027a8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	43da      	mvns	r2, r3
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	4013      	ands	r3, r2
 800279a:	b29b      	uxth	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	bf0c      	ite	eq
 80027a0:	2301      	moveq	r3, #1
 80027a2:	2300      	movne	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	79fb      	ldrb	r3, [r7, #7]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d093      	beq.n	80026d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
 80027c4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027c6:	e071      	b.n	80028ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027d6:	d123      	bne.n	8002820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2220      	movs	r2, #32
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	f043 0204 	orr.w	r2, r3, #4
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e067      	b.n	80028f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002826:	d041      	beq.n	80028ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002828:	f7ff f998 	bl	8001b5c <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	429a      	cmp	r2, r3
 8002836:	d302      	bcc.n	800283e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d136      	bne.n	80028ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	0c1b      	lsrs	r3, r3, #16
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b01      	cmp	r3, #1
 8002846:	d10c      	bne.n	8002862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	43da      	mvns	r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	4013      	ands	r3, r2
 8002854:	b29b      	uxth	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	bf14      	ite	ne
 800285a:	2301      	movne	r3, #1
 800285c:	2300      	moveq	r3, #0
 800285e:	b2db      	uxtb	r3, r3
 8002860:	e00b      	b.n	800287a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	43da      	mvns	r2, r3
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	4013      	ands	r3, r2
 800286e:	b29b      	uxth	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	bf14      	ite	ne
 8002874:	2301      	movne	r3, #1
 8002876:	2300      	moveq	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d016      	beq.n	80028ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2220      	movs	r2, #32
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	f043 0220 	orr.w	r2, r3, #32
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e021      	b.n	80028f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	0c1b      	lsrs	r3, r3, #16
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d10c      	bne.n	80028d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	43da      	mvns	r2, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	4013      	ands	r3, r2
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	bf14      	ite	ne
 80028c8:	2301      	movne	r3, #1
 80028ca:	2300      	moveq	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	e00b      	b.n	80028e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	43da      	mvns	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4013      	ands	r3, r2
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	bf14      	ite	ne
 80028e2:	2301      	movne	r3, #1
 80028e4:	2300      	moveq	r3, #0
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f47f af6d 	bne.w	80027c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002904:	e034      	b.n	8002970 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 f886 	bl	8002a18 <I2C_IsAcknowledgeFailed>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e034      	b.n	8002980 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291c:	d028      	beq.n	8002970 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800291e:	f7ff f91d 	bl	8001b5c <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	429a      	cmp	r2, r3
 800292c:	d302      	bcc.n	8002934 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d11d      	bne.n	8002970 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293e:	2b80      	cmp	r3, #128	; 0x80
 8002940:	d016      	beq.n	8002970 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	f043 0220 	orr.w	r2, r3, #32
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e007      	b.n	8002980 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297a:	2b80      	cmp	r3, #128	; 0x80
 800297c:	d1c3      	bne.n	8002906 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002994:	e034      	b.n	8002a00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 f83e 	bl	8002a18 <I2C_IsAcknowledgeFailed>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e034      	b.n	8002a10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ac:	d028      	beq.n	8002a00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ae:	f7ff f8d5 	bl	8001b5c <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d302      	bcc.n	80029c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d11d      	bne.n	8002a00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d016      	beq.n	8002a00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	f043 0220 	orr.w	r2, r3, #32
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e007      	b.n	8002a10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d1c3      	bne.n	8002996 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a2e:	d11b      	bne.n	8002a68 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a38:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	f043 0204 	orr.w	r2, r3, #4
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e000      	b.n	8002a6a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e0e8      	b.n	8002c58 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d106      	bne.n	8002aa0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f006 fcb8 	bl	8009410 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2203      	movs	r2, #3
 8002aa4:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f002 fe92 	bl	80057dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6818      	ldr	r0, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3304      	adds	r3, #4
 8002ac0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ac2:	f002 fe68 	bl	8005796 <USB_CoreInit>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d005      	beq.n	8002ad8 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0bf      	b.n	8002c58 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2100      	movs	r1, #0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f002 fe96 	bl	8005810 <USB_SetCurrentMode>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d005      	beq.n	8002af6 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2202      	movs	r2, #2
 8002aee:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e0b0      	b.n	8002c58 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002af6:	2300      	movs	r3, #0
 8002af8:	73fb      	strb	r3, [r7, #15]
 8002afa:	e03e      	b.n	8002b7a <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002afc:	7bfa      	ldrb	r2, [r7, #15]
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	440b      	add	r3, r1
 8002b0a:	3311      	adds	r3, #17
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b10:	7bfa      	ldrb	r2, [r7, #15]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	440b      	add	r3, r1
 8002b1e:	3310      	adds	r3, #16
 8002b20:	7bfa      	ldrb	r2, [r7, #15]
 8002b22:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b24:	7bfa      	ldrb	r2, [r7, #15]
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	440b      	add	r3, r1
 8002b32:	3313      	adds	r3, #19
 8002b34:	2200      	movs	r2, #0
 8002b36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b38:	7bfa      	ldrb	r2, [r7, #15]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	440b      	add	r3, r1
 8002b46:	3320      	adds	r3, #32
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b4c:	7bfa      	ldrb	r2, [r7, #15]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	440b      	add	r3, r1
 8002b5a:	3324      	adds	r3, #36	; 0x24
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	440b      	add	r3, r1
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
 8002b76:	3301      	adds	r3, #1
 8002b78:	73fb      	strb	r3, [r7, #15]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	791b      	ldrb	r3, [r3, #4]
 8002b7e:	7bfa      	ldrb	r2, [r7, #15]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d3bb      	bcc.n	8002afc <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b84:	2300      	movs	r3, #0
 8002b86:	73fb      	strb	r3, [r7, #15]
 8002b88:	e044      	b.n	8002c14 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b8a:	7bfa      	ldrb	r2, [r7, #15]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	440b      	add	r3, r1
 8002b98:	f203 1351 	addw	r3, r3, #337	; 0x151
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	440b      	add	r3, r1
 8002bae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002bb2:	7bfa      	ldrb	r2, [r7, #15]
 8002bb4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bb6:	7bfa      	ldrb	r2, [r7, #15]
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f203 1353 	addw	r3, r3, #339	; 0x153
 8002bc8:	2200      	movs	r2, #0
 8002bca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	440b      	add	r3, r1
 8002bda:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002be2:	7bfa      	ldrb	r2, [r7, #15]
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	440b      	add	r3, r1
 8002bf0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bf8:	7bfa      	ldrb	r2, [r7, #15]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	440b      	add	r3, r1
 8002c06:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
 8002c10:	3301      	adds	r3, #1
 8002c12:	73fb      	strb	r3, [r7, #15]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	791b      	ldrb	r3, [r3, #4]
 8002c18:	7bfa      	ldrb	r2, [r7, #15]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d3b5      	bcc.n	8002b8a <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6818      	ldr	r0, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3304      	adds	r3, #4
 8002c26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c28:	f002 fdfe 	bl	8005828 <USB_DevInit>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d005      	beq.n	8002c3e <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2202      	movs	r2, #2
 8002c36:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e00c      	b.n	8002c58 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f004 fe19 	bl	8007888 <USB_DevDisconnect>

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d101      	bne.n	8002c76 <HAL_PCD_Start+0x16>
 8002c72:	2302      	movs	r3, #2
 8002c74:	e016      	b.n	8002ca4 <HAL_PCD_Start+0x44>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f002 fd94 	bl	80057b0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002c88:	2101      	movs	r1, #1
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f006 fe33 	bl	80098f6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f004 fded 	bl	8007874 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f004 fdef 	bl	800789c <USB_ReadInterrupts>
 8002cbe:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 fb1c 	bl	8003308 <PCD_EP_ISR_Handler>

    return;
 8002cd0:	e11b      	b.n	8002f0a <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d013      	beq.n	8002d04 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cee:	b292      	uxth	r2, r2
 8002cf0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f006 fc06 	bl	8009506 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f907 	bl	8002f10 <HAL_PCD_SetAddress>

    return;
 8002d02:	e102      	b.n	8002f0a <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00c      	beq.n	8002d28 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d20:	b292      	uxth	r2, r2
 8002d22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002d26:	e0f0      	b.n	8002f0a <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00c      	beq.n	8002d4c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d44:	b292      	uxth	r2, r2
 8002d46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002d4a:	e0de      	b.n	8002f0a <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d027      	beq.n	8002da6 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 0204 	bic.w	r2, r2, #4
 8002d68:	b292      	uxth	r2, r2
 8002d6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0208 	bic.w	r2, r2, #8
 8002d80:	b292      	uxth	r2, r2
 8002d82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f006 fbf6 	bl	8009578 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d9e:	b292      	uxth	r2, r2
 8002da0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002da4:	e0b1      	b.n	8002f0a <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 8085 	beq.w	8002ebc <HAL_PCD_IRQHandler+0x210>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002db2:	2300      	movs	r3, #0
 8002db4:	77fb      	strb	r3, [r7, #31]
 8002db6:	e011      	b.n	8002ddc <HAL_PCD_IRQHandler+0x130>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	7ffb      	ldrb	r3, [r7, #31]
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	441a      	add	r2, r3
 8002dc4:	7ffb      	ldrb	r3, [r7, #31]
 8002dc6:	8812      	ldrh	r2, [r2, #0]
 8002dc8:	b292      	uxth	r2, r2
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	f107 0120 	add.w	r1, r7, #32
 8002dd0:	440b      	add	r3, r1
 8002dd2:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002dd6:	7ffb      	ldrb	r3, [r7, #31]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	77fb      	strb	r3, [r7, #31]
 8002ddc:	7ffb      	ldrb	r3, [r7, #31]
 8002dde:	2b07      	cmp	r3, #7
 8002de0:	d9ea      	bls.n	8002db8 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f042 0201 	orr.w	r2, r2, #1
 8002df4:	b292      	uxth	r2, r2
 8002df6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0201 	bic.w	r2, r2, #1
 8002e0c:	b292      	uxth	r2, r2
 8002e0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002e12:	bf00      	nop
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f6      	beq.n	8002e14 <HAL_PCD_IRQHandler+0x168>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e38:	b292      	uxth	r2, r2
 8002e3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002e3e:	2300      	movs	r3, #0
 8002e40:	77fb      	strb	r3, [r7, #31]
 8002e42:	e010      	b.n	8002e66 <HAL_PCD_IRQHandler+0x1ba>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002e44:	7ffb      	ldrb	r3, [r7, #31]
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6812      	ldr	r2, [r2, #0]
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	7ffa      	ldrb	r2, [r7, #31]
 8002e4e:	0092      	lsls	r2, r2, #2
 8002e50:	440a      	add	r2, r1
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	f107 0120 	add.w	r1, r7, #32
 8002e58:	440b      	add	r3, r1
 8002e5a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002e5e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002e60:	7ffb      	ldrb	r3, [r7, #31]
 8002e62:	3301      	adds	r3, #1
 8002e64:	77fb      	strb	r3, [r7, #31]
 8002e66:	7ffb      	ldrb	r3, [r7, #31]
 8002e68:	2b07      	cmp	r3, #7
 8002e6a:	d9eb      	bls.n	8002e44 <HAL_PCD_IRQHandler+0x198>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0208 	orr.w	r2, r2, #8
 8002e7e:	b292      	uxth	r2, r2
 8002e80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e96:	b292      	uxth	r2, r2
 8002e98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0204 	orr.w	r2, r2, #4
 8002eae:	b292      	uxth	r2, r2
 8002eb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f006 fb45 	bl	8009544 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002eba:	e026      	b.n	8002f0a <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00f      	beq.n	8002ee6 <HAL_PCD_IRQHandler+0x23a>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ed8:	b292      	uxth	r2, r2
 8002eda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f006 fb03 	bl	80094ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002ee4:	e011      	b.n	8002f0a <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00c      	beq.n	8002f0a <HAL_PCD_IRQHandler+0x25e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f02:	b292      	uxth	r2, r2
 8002f04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002f08:	bf00      	nop
  }
}
 8002f0a:	3720      	adds	r7, #32
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d101      	bne.n	8002f2a <HAL_PCD_SetAddress+0x1a>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e012      	b.n	8002f50 <HAL_PCD_SetAddress+0x40>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	78fa      	ldrb	r2, [r7, #3]
 8002f36:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	78fa      	ldrb	r2, [r7, #3]
 8002f3e:	4611      	mov	r1, r2
 8002f40:	4618      	mov	r0, r3
 8002f42:	f004 fc84 	bl	800784e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	4608      	mov	r0, r1
 8002f62:	4611      	mov	r1, r2
 8002f64:	461a      	mov	r2, r3
 8002f66:	4603      	mov	r3, r0
 8002f68:	70fb      	strb	r3, [r7, #3]
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	803b      	strh	r3, [r7, #0]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	da0e      	bge.n	8002f9c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f7e:	78fb      	ldrb	r3, [r7, #3]
 8002f80:	f003 0207 	and.w	r2, r3, #7
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	3310      	adds	r3, #16
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	4413      	add	r3, r2
 8002f92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2201      	movs	r2, #1
 8002f98:	705a      	strb	r2, [r3, #1]
 8002f9a:	e00e      	b.n	8002fba <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f9c:	78fb      	ldrb	r3, [r7, #3]
 8002f9e:	f003 0207 	and.w	r2, r3, #7
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002fba:	78fb      	ldrb	r3, [r7, #3]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002fc6:	883a      	ldrh	r2, [r7, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	78ba      	ldrb	r2, [r7, #2]
 8002fd0:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002fd2:	78bb      	ldrb	r3, [r7, #2]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d102      	bne.n	8002fde <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_PCD_EP_Open+0x94>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e00e      	b.n	800300a <HAL_PCD_EP_Open+0xb2>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68f9      	ldr	r1, [r7, #12]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f002 fc32 	bl	8005864 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8003008:	7afb      	ldrb	r3, [r7, #11]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b084      	sub	sp, #16
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
 800301a:	460b      	mov	r3, r1
 800301c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800301e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003022:	2b00      	cmp	r3, #0
 8003024:	da0e      	bge.n	8003044 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003026:	78fb      	ldrb	r3, [r7, #3]
 8003028:	f003 0207 	and.w	r2, r3, #7
 800302c:	4613      	mov	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	3310      	adds	r3, #16
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	4413      	add	r3, r2
 800303a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2201      	movs	r2, #1
 8003040:	705a      	strb	r2, [r3, #1]
 8003042:	e00e      	b.n	8003062 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003044:	78fb      	ldrb	r3, [r7, #3]
 8003046:	f003 0207 	and.w	r2, r3, #7
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	4413      	add	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003062:	78fb      	ldrb	r3, [r7, #3]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	b2da      	uxtb	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <HAL_PCD_EP_Close+0x6a>
 8003078:	2302      	movs	r3, #2
 800307a:	e00e      	b.n	800309a <HAL_PCD_EP_Close+0x88>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68f9      	ldr	r1, [r7, #12]
 800308a:	4618      	mov	r0, r3
 800308c:	f002 ffaa 	bl	8005fe4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b086      	sub	sp, #24
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	60f8      	str	r0, [r7, #12]
 80030aa:	607a      	str	r2, [r7, #4]
 80030ac:	603b      	str	r3, [r7, #0]
 80030ae:	460b      	mov	r3, r1
 80030b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030b2:	7afb      	ldrb	r3, [r7, #11]
 80030b4:	f003 0207 	and.w	r2, r3, #7
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	4413      	add	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2200      	movs	r2, #0
 80030da:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	2200      	movs	r2, #0
 80030e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030e2:	7afb      	ldrb	r3, [r7, #11]
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6979      	ldr	r1, [r7, #20]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f003 f961 	bl	80063bc <USB_EPStartXfer>

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3718      	adds	r7, #24
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003110:	78fb      	ldrb	r3, [r7, #3]
 8003112:	f003 0207 	and.w	r2, r3, #7
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	440b      	add	r3, r1
 8003122:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8003126:	681b      	ldr	r3, [r3, #0]
}
 8003128:	4618      	mov	r0, r3
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr

08003132 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b086      	sub	sp, #24
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	607a      	str	r2, [r7, #4]
 800313c:	603b      	str	r3, [r7, #0]
 800313e:	460b      	mov	r3, r1
 8003140:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003142:	7afb      	ldrb	r3, [r7, #11]
 8003144:	f003 0207 	and.w	r2, r3, #7
 8003148:	4613      	mov	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	3310      	adds	r3, #16
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	4413      	add	r3, r2
 8003156:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2200      	movs	r2, #0
 8003176:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	2201      	movs	r2, #1
 800317c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800317e:	7afb      	ldrb	r3, [r7, #11]
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	b2da      	uxtb	r2, r3
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6979      	ldr	r1, [r7, #20]
 8003190:	4618      	mov	r0, r3
 8003192:	f003 f913 	bl	80063bc <USB_EPStartXfer>

  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3718      	adds	r7, #24
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	7912      	ldrb	r2, [r2, #4]
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d901      	bls.n	80031be <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e04c      	b.n	8003258 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	da0e      	bge.n	80031e4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031c6:	78fb      	ldrb	r3, [r7, #3]
 80031c8:	f003 0207 	and.w	r2, r3, #7
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	3310      	adds	r3, #16
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	4413      	add	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2201      	movs	r2, #1
 80031e0:	705a      	strb	r2, [r3, #1]
 80031e2:	e00c      	b.n	80031fe <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031e4:	78fa      	ldrb	r2, [r7, #3]
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	4413      	add	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2201      	movs	r2, #1
 8003202:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	b2da      	uxtb	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_PCD_EP_SetStall+0x7e>
 800321a:	2302      	movs	r3, #2
 800321c:	e01c      	b.n	8003258 <HAL_PCD_EP_SetStall+0xb8>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68f9      	ldr	r1, [r7, #12]
 800322c:	4618      	mov	r0, r3
 800322e:	f004 fa11 	bl	8007654 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003232:	78fb      	ldrb	r3, [r7, #3]
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	2b00      	cmp	r3, #0
 800323a:	d108      	bne.n	800324e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8003246:	4619      	mov	r1, r3
 8003248:	4610      	mov	r0, r2
 800324a:	f004 fb36 	bl	80078ba <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	7912      	ldrb	r2, [r2, #4]
 8003276:	4293      	cmp	r3, r2
 8003278:	d901      	bls.n	800327e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e040      	b.n	8003300 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800327e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003282:	2b00      	cmp	r3, #0
 8003284:	da0e      	bge.n	80032a4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003286:	78fb      	ldrb	r3, [r7, #3]
 8003288:	f003 0207 	and.w	r2, r3, #7
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	3310      	adds	r3, #16
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	4413      	add	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2201      	movs	r2, #1
 80032a0:	705a      	strb	r2, [r3, #1]
 80032a2:	e00e      	b.n	80032c2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032a4:	78fb      	ldrb	r3, [r7, #3]
 80032a6:	f003 0207 	and.w	r2, r3, #7
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	4413      	add	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032c8:	78fb      	ldrb	r3, [r7, #3]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_PCD_EP_ClrStall+0x82>
 80032de:	2302      	movs	r3, #2
 80032e0:	e00e      	b.n	8003300 <HAL_PCD_EP_ClrStall+0xa0>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68f9      	ldr	r1, [r7, #12]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f004 f9ff 	bl	80076f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b096      	sub	sp, #88	; 0x58
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003310:	e3bc      	b.n	8003a8c <PCD_EP_ISR_Handler+0x784>
  {
    wIstr = hpcd->Instance->ISTR;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800331a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800331e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003322:	b2db      	uxtb	r3, r3
 8003324:	f003 030f 	and.w	r3, r3, #15
 8003328:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800332c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003330:	2b00      	cmp	r3, #0
 8003332:	f040 8176 	bne.w	8003622 <PCD_EP_ISR_Handler+0x31a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003336:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800333a:	f003 0310 	and.w	r3, r3, #16
 800333e:	2b00      	cmp	r3, #0
 8003340:	d14f      	bne.n	80033e2 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	b29b      	uxth	r3, r3
 800334a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800334e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003352:	81fb      	strh	r3, [r7, #14]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	89fb      	ldrh	r3, [r7, #14]
 800335a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800335e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003362:	b29b      	uxth	r3, r3
 8003364:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3310      	adds	r3, #16
 800336a:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003374:	b29b      	uxth	r3, r3
 8003376:	461a      	mov	r2, r3
 8003378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	4413      	add	r3, r2
 8003380:	3302      	adds	r3, #2
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	4413      	add	r3, r2
 800338a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003396:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800339a:	695a      	ldr	r2, [r3, #20]
 800339c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	441a      	add	r2, r3
 80033a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033a4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80033a6:	2100      	movs	r1, #0
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f006 f884 	bl	80094b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	7b5b      	ldrb	r3, [r3, #13]
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 8369 	beq.w	8003a8c <PCD_EP_ISR_Handler+0x784>
 80033ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f040 8364 	bne.w	8003a8c <PCD_EP_ISR_Handler+0x784>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	7b5b      	ldrb	r3, [r3, #13]
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	b292      	uxth	r2, r2
 80033d6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	735a      	strb	r2, [r3, #13]
 80033e0:	e354      	b.n	8003a8c <PCD_EP_ISR_Handler+0x784>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80033e8:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	881b      	ldrh	r3, [r3, #0]
 80033f0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80033f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80033f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d034      	beq.n	800346a <PCD_EP_ISR_Handler+0x162>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003408:	b29b      	uxth	r3, r3
 800340a:	461a      	mov	r2, r3
 800340c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	4413      	add	r3, r2
 8003414:	3306      	adds	r3, #6
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6812      	ldr	r2, [r2, #0]
 800341c:	4413      	add	r3, r2
 800341e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800342a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6818      	ldr	r0, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8003436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003438:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800343a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800343c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800343e:	b29b      	uxth	r3, r3
 8003440:	f004 fa8b 	bl	800795a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	b29a      	uxth	r2, r3
 800344c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003450:	4013      	ands	r3, r2
 8003452:	823b      	strh	r3, [r7, #16]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	8a3a      	ldrh	r2, [r7, #16]
 800345a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800345e:	b292      	uxth	r2, r2
 8003460:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f005 fffa 	bl	800945c <HAL_PCD_SetupStageCallback>
 8003468:	e310      	b.n	8003a8c <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800346a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800346e:	2b00      	cmp	r3, #0
 8003470:	f280 830c 	bge.w	8003a8c <PCD_EP_ISR_Handler+0x784>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	b29a      	uxth	r2, r3
 800347c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003480:	4013      	ands	r3, r2
 8003482:	83fb      	strh	r3, [r7, #30]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	8bfa      	ldrh	r2, [r7, #30]
 800348a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800348e:	b292      	uxth	r2, r2
 8003490:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800349a:	b29b      	uxth	r3, r3
 800349c:	461a      	mov	r2, r3
 800349e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	4413      	add	r3, r2
 80034a6:	3306      	adds	r3, #6
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6812      	ldr	r2, [r2, #0]
 80034ae:	4413      	add	r3, r2
 80034b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034b4:	881b      	ldrh	r3, [r3, #0]
 80034b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034bc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80034be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d019      	beq.n	80034fa <PCD_EP_ISR_Handler+0x1f2>
 80034c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d015      	beq.n	80034fa <PCD_EP_ISR_Handler+0x1f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6818      	ldr	r0, [r3, #0]
 80034d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034d4:	6959      	ldr	r1, [r3, #20]
 80034d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034d8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80034da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034dc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80034de:	b29b      	uxth	r3, r3
 80034e0:	f004 fa3b 	bl	800795a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80034e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034e6:	695a      	ldr	r2, [r3, #20]
 80034e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	441a      	add	r2, r3
 80034ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034f0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80034f2:	2100      	movs	r1, #0
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f005 ffc3 	bl	8009480 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	881b      	ldrh	r3, [r3, #0]
 8003500:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003504:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800350c:	2b00      	cmp	r3, #0
 800350e:	f040 82bd 	bne.w	8003a8c <PCD_EP_ISR_Handler+0x784>
 8003512:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003516:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800351a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800351e:	f000 82b5 	beq.w	8003a8c <PCD_EP_ISR_Handler+0x784>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	61bb      	str	r3, [r7, #24]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003530:	b29b      	uxth	r3, r3
 8003532:	461a      	mov	r2, r3
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	4413      	add	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003540:	617b      	str	r3, [r7, #20]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	881b      	ldrh	r3, [r3, #0]
 8003546:	b29b      	uxth	r3, r3
 8003548:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800354c:	b29a      	uxth	r2, r3
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	801a      	strh	r2, [r3, #0]
 8003552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	2b3e      	cmp	r3, #62	; 0x3e
 8003558:	d91d      	bls.n	8003596 <PCD_EP_ISR_Handler+0x28e>
 800355a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	095b      	lsrs	r3, r3, #5
 8003560:	647b      	str	r3, [r7, #68]	; 0x44
 8003562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f003 031f 	and.w	r3, r3, #31
 800356a:	2b00      	cmp	r3, #0
 800356c:	d102      	bne.n	8003574 <PCD_EP_ISR_Handler+0x26c>
 800356e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003570:	3b01      	subs	r3, #1
 8003572:	647b      	str	r3, [r7, #68]	; 0x44
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	b29a      	uxth	r2, r3
 800357a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800357c:	b29b      	uxth	r3, r3
 800357e:	029b      	lsls	r3, r3, #10
 8003580:	b29b      	uxth	r3, r3
 8003582:	4313      	orrs	r3, r2
 8003584:	b29b      	uxth	r3, r3
 8003586:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800358a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800358e:	b29a      	uxth	r2, r3
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	801a      	strh	r2, [r3, #0]
 8003594:	e026      	b.n	80035e4 <PCD_EP_ISR_Handler+0x2dc>
 8003596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10a      	bne.n	80035b4 <PCD_EP_ISR_Handler+0x2ac>
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	881b      	ldrh	r3, [r3, #0]
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	801a      	strh	r2, [r3, #0]
 80035b2:	e017      	b.n	80035e4 <PCD_EP_ISR_Handler+0x2dc>
 80035b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	085b      	lsrs	r3, r3, #1
 80035ba:	647b      	str	r3, [r7, #68]	; 0x44
 80035bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d002      	beq.n	80035ce <PCD_EP_ISR_Handler+0x2c6>
 80035c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ca:	3301      	adds	r3, #1
 80035cc:	647b      	str	r3, [r7, #68]	; 0x44
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	029b      	lsls	r3, r3, #10
 80035da:	b29b      	uxth	r3, r3
 80035dc:	4313      	orrs	r3, r2
 80035de:	b29a      	uxth	r2, r3
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f4:	827b      	strh	r3, [r7, #18]
 80035f6:	8a7b      	ldrh	r3, [r7, #18]
 80035f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80035fc:	827b      	strh	r3, [r7, #18]
 80035fe:	8a7b      	ldrh	r3, [r7, #18]
 8003600:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003604:	827b      	strh	r3, [r7, #18]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	8a7b      	ldrh	r3, [r7, #18]
 800360c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003610:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003614:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800361c:	b29b      	uxth	r3, r3
 800361e:	8013      	strh	r3, [r2, #0]
 8003620:	e234      	b.n	8003a8c <PCD_EP_ISR_Handler+0x784>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	881b      	ldrh	r3, [r3, #0]
 8003632:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003636:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800363a:	2b00      	cmp	r3, #0
 800363c:	f280 80fc 	bge.w	8003838 <PCD_EP_ISR_Handler+0x530>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	461a      	mov	r2, r3
 8003646:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	b29a      	uxth	r2, r3
 8003652:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003656:	4013      	ands	r3, r2
 8003658:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	461a      	mov	r2, r3
 8003662:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800366e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003672:	b292      	uxth	r2, r2
 8003674:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003676:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800367a:	4613      	mov	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	4413      	add	r3, r2
 800368a:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800368c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800368e:	7b1b      	ldrb	r3, [r3, #12]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d125      	bne.n	80036e0 <PCD_EP_ISR_Handler+0x3d8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800369c:	b29b      	uxth	r3, r3
 800369e:	461a      	mov	r2, r3
 80036a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	4413      	add	r3, r2
 80036a8:	3306      	adds	r3, #6
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6812      	ldr	r2, [r2, #0]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036b6:	881b      	ldrh	r3, [r3, #0]
 80036b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036bc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80036c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 8092 	beq.w	80037ee <PCD_EP_ISR_Handler+0x4e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6818      	ldr	r0, [r3, #0]
 80036ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036d0:	6959      	ldr	r1, [r3, #20]
 80036d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036d4:	88da      	ldrh	r2, [r3, #6]
 80036d6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80036da:	f004 f93e 	bl	800795a <USB_ReadPMA>
 80036de:	e086      	b.n	80037ee <PCD_EP_ISR_Handler+0x4e6>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80036e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036e2:	78db      	ldrb	r3, [r3, #3]
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d10a      	bne.n	80036fe <PCD_EP_ISR_Handler+0x3f6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80036e8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80036ec:	461a      	mov	r2, r3
 80036ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f9d9 	bl	8003aa8 <HAL_PCD_EP_DB_Receive>
 80036f6:	4603      	mov	r3, r0
 80036f8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80036fc:	e077      	b.n	80037ee <PCD_EP_ISR_Handler+0x4e6>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	461a      	mov	r2, r3
 8003704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	b29b      	uxth	r3, r3
 8003710:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003718:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	461a      	mov	r2, r3
 8003722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	441a      	add	r2, r3
 800372a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800372e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003732:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800373a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800373e:	b29b      	uxth	r3, r3
 8003740:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	461a      	mov	r2, r3
 8003748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	881b      	ldrh	r3, [r3, #0]
 8003752:	b29b      	uxth	r3, r3
 8003754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d024      	beq.n	80037a6 <PCD_EP_ISR_Handler+0x49e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003764:	b29b      	uxth	r3, r3
 8003766:	461a      	mov	r2, r3
 8003768:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	4413      	add	r3, r2
 8003770:	3302      	adds	r3, #2
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6812      	ldr	r2, [r2, #0]
 8003778:	4413      	add	r3, r2
 800377a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003784:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003788:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800378c:	2b00      	cmp	r3, #0
 800378e:	d02e      	beq.n	80037ee <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6818      	ldr	r0, [r3, #0]
 8003794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003796:	6959      	ldr	r1, [r3, #20]
 8003798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800379a:	891a      	ldrh	r2, [r3, #8]
 800379c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80037a0:	f004 f8db 	bl	800795a <USB_ReadPMA>
 80037a4:	e023      	b.n	80037ee <PCD_EP_ISR_Handler+0x4e6>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	461a      	mov	r2, r3
 80037b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4413      	add	r3, r2
 80037ba:	3306      	adds	r3, #6
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6812      	ldr	r2, [r2, #0]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037c8:	881b      	ldrh	r3, [r3, #0]
 80037ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037ce:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80037d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d009      	beq.n	80037ee <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6818      	ldr	r0, [r3, #0]
 80037de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037e0:	6959      	ldr	r1, [r3, #20]
 80037e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037e4:	895a      	ldrh	r2, [r3, #10]
 80037e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80037ea:	f004 f8b6 	bl	800795a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80037ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037f0:	69da      	ldr	r2, [r3, #28]
 80037f2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80037f6:	441a      	add	r2, r3
 80037f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037fa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80037fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037fe:	695a      	ldr	r2, [r3, #20]
 8003800:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003804:	441a      	add	r2, r3
 8003806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003808:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800380a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d005      	beq.n	800381e <PCD_EP_ISR_Handler+0x516>
 8003812:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	429a      	cmp	r2, r3
 800381c:	d206      	bcs.n	800382c <PCD_EP_ISR_Handler+0x524>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800381e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	4619      	mov	r1, r3
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f005 fe2b 	bl	8009480 <HAL_PCD_DataOutStageCallback>
 800382a:	e005      	b.n	8003838 <PCD_EP_ISR_Handler+0x530>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003832:	4618      	mov	r0, r3
 8003834:	f002 fdc2 	bl	80063bc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003838:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800383c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 8123 	beq.w	8003a8c <PCD_EP_ISR_Handler+0x784>
      {
        ep = &hpcd->IN_ep[epindex];
 8003846:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800384a:	4613      	mov	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	3310      	adds	r3, #16
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	4413      	add	r3, r2
 8003858:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	461a      	mov	r2, r3
 8003860:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	b29b      	uxth	r3, r3
 800386c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003874:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	461a      	mov	r2, r3
 800387e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	441a      	add	r2, r3
 8003886:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800388a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800388e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003892:	b29b      	uxth	r3, r3
 8003894:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003898:	78db      	ldrb	r3, [r3, #3]
 800389a:	2b01      	cmp	r3, #1
 800389c:	f040 80a2 	bne.w	80039e4 <PCD_EP_ISR_Handler+0x6dc>
        {
          ep->xfer_len = 0U;
 80038a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038a2:	2200      	movs	r2, #0
 80038a4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80038a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038a8:	7b1b      	ldrb	r3, [r3, #12]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 8093 	beq.w	80039d6 <PCD_EP_ISR_Handler+0x6ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80038b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80038b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d046      	beq.n	800394a <PCD_EP_ISR_Handler+0x642>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038be:	785b      	ldrb	r3, [r3, #1]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d126      	bne.n	8003912 <PCD_EP_ISR_Handler+0x60a>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	461a      	mov	r2, r3
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	4413      	add	r3, r2
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
 80038dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	011a      	lsls	r2, r3, #4
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	4413      	add	r3, r2
 80038e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80038ea:	623b      	str	r3, [r7, #32]
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	881b      	ldrh	r3, [r3, #0]
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	6a3b      	ldr	r3, [r7, #32]
 80038fa:	801a      	strh	r2, [r3, #0]
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	881b      	ldrh	r3, [r3, #0]
 8003900:	b29b      	uxth	r3, r3
 8003902:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003906:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800390a:	b29a      	uxth	r2, r3
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	801a      	strh	r2, [r3, #0]
 8003910:	e061      	b.n	80039d6 <PCD_EP_ISR_Handler+0x6ce>
 8003912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003914:	785b      	ldrb	r3, [r3, #1]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d15d      	bne.n	80039d6 <PCD_EP_ISR_Handler+0x6ce>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003928:	b29b      	uxth	r3, r3
 800392a:	461a      	mov	r2, r3
 800392c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392e:	4413      	add	r3, r2
 8003930:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	011a      	lsls	r2, r3, #4
 8003938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393a:	4413      	add	r3, r2
 800393c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003940:	62bb      	str	r3, [r7, #40]	; 0x28
 8003942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003944:	2200      	movs	r2, #0
 8003946:	801a      	strh	r2, [r3, #0]
 8003948:	e045      	b.n	80039d6 <PCD_EP_ISR_Handler+0x6ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003952:	785b      	ldrb	r3, [r3, #1]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d126      	bne.n	80039a6 <PCD_EP_ISR_Handler+0x69e>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	637b      	str	r3, [r7, #52]	; 0x34
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003966:	b29b      	uxth	r3, r3
 8003968:	461a      	mov	r2, r3
 800396a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800396c:	4413      	add	r3, r2
 800396e:	637b      	str	r3, [r7, #52]	; 0x34
 8003970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	011a      	lsls	r2, r3, #4
 8003976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003978:	4413      	add	r3, r2
 800397a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800397e:	633b      	str	r3, [r7, #48]	; 0x30
 8003980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	b29b      	uxth	r3, r3
 8003986:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800398a:	b29a      	uxth	r2, r3
 800398c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398e:	801a      	strh	r2, [r3, #0]
 8003990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	b29b      	uxth	r3, r3
 8003996:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800399a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800399e:	b29a      	uxth	r2, r3
 80039a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a2:	801a      	strh	r2, [r3, #0]
 80039a4:	e017      	b.n	80039d6 <PCD_EP_ISR_Handler+0x6ce>
 80039a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039a8:	785b      	ldrb	r3, [r3, #1]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d113      	bne.n	80039d6 <PCD_EP_ISR_Handler+0x6ce>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	461a      	mov	r2, r3
 80039ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039bc:	4413      	add	r3, r2
 80039be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	011a      	lsls	r2, r3, #4
 80039c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c8:	4413      	add	r3, r2
 80039ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80039ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80039d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d2:	2200      	movs	r2, #0
 80039d4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	4619      	mov	r1, r3
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f005 fd6a 	bl	80094b6 <HAL_PCD_DataInStageCallback>
 80039e2:	e053      	b.n	8003a8c <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80039e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80039e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d146      	bne.n	8003a7e <PCD_EP_ISR_Handler+0x776>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	461a      	mov	r2, r3
 80039fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	4413      	add	r3, r2
 8003a04:	3302      	adds	r3, #2
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6812      	ldr	r2, [r2, #0]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a12:	881b      	ldrh	r3, [r3, #0]
 8003a14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a18:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a1e:	699a      	ldr	r2, [r3, #24]
 8003a20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d907      	bls.n	8003a38 <PCD_EP_ISR_Handler+0x730>
            {
              ep->xfer_len -= TxPctSize;
 8003a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a2a:	699a      	ldr	r2, [r3, #24]
 8003a2c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003a30:	1ad2      	subs	r2, r2, r3
 8003a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a34:	619a      	str	r2, [r3, #24]
 8003a36:	e002      	b.n	8003a3e <PCD_EP_ISR_Handler+0x736>
            }
            else
            {
              ep->xfer_len = 0U;
 8003a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d106      	bne.n	8003a54 <PCD_EP_ISR_Handler+0x74c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f005 fd32 	bl	80094b6 <HAL_PCD_DataInStageCallback>
 8003a52:	e01b      	b.n	8003a8c <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a56:	695a      	ldr	r2, [r3, #20]
 8003a58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003a5c:	441a      	add	r2, r3
 8003a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a60:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a64:	69da      	ldr	r2, [r3, #28]
 8003a66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003a6a:	441a      	add	r2, r3
 8003a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a6e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a76:	4618      	mov	r0, r3
 8003a78:	f002 fca0 	bl	80063bc <USB_EPStartXfer>
 8003a7c:	e006      	b.n	8003a8c <PCD_EP_ISR_Handler+0x784>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003a7e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003a82:	461a      	mov	r2, r3
 8003a84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f91b 	bl	8003cc2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	b21b      	sxth	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f6ff ac3a 	blt.w	8003312 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3758      	adds	r7, #88	; 0x58
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ab6:	88fb      	ldrh	r3, [r7, #6]
 8003ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d07e      	beq.n	8003bbe <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	461a      	mov	r2, r3
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	4413      	add	r3, r2
 8003ad4:	3302      	adds	r3, #2
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	6812      	ldr	r2, [r2, #0]
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ae2:	881b      	ldrh	r3, [r3, #0]
 8003ae4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ae8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	699a      	ldr	r2, [r3, #24]
 8003aee:	8b7b      	ldrh	r3, [r7, #26]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d306      	bcc.n	8003b02 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	699a      	ldr	r2, [r3, #24]
 8003af8:	8b7b      	ldrh	r3, [r7, #26]
 8003afa:	1ad2      	subs	r2, r2, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	619a      	str	r2, [r3, #24]
 8003b00:	e002      	b.n	8003b08 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2200      	movs	r2, #0
 8003b06:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d123      	bne.n	8003b58 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	461a      	mov	r2, r3
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b2a:	833b      	strh	r3, [r7, #24]
 8003b2c:	8b3b      	ldrh	r3, [r7, #24]
 8003b2e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b32:	833b      	strh	r3, [r7, #24]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	441a      	add	r2, r3
 8003b42:	8b3b      	ldrh	r3, [r7, #24]
 8003b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b58:	88fb      	ldrh	r3, [r7, #6]
 8003b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d01f      	beq.n	8003ba2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	461a      	mov	r2, r3
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	881b      	ldrh	r3, [r3, #0]
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7c:	82fb      	strh	r3, [r7, #22]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	461a      	mov	r2, r3
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	441a      	add	r2, r3
 8003b8c:	8afb      	ldrh	r3, [r7, #22]
 8003b8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003ba2:	8b7b      	ldrh	r3, [r7, #26]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 8087 	beq.w	8003cb8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6818      	ldr	r0, [r3, #0]
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	6959      	ldr	r1, [r3, #20]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	891a      	ldrh	r2, [r3, #8]
 8003bb6:	8b7b      	ldrh	r3, [r7, #26]
 8003bb8:	f003 fecf 	bl	800795a <USB_ReadPMA>
 8003bbc:	e07c      	b.n	8003cb8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	461a      	mov	r2, r3
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	3306      	adds	r3, #6
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	6812      	ldr	r2, [r2, #0]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003be6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	699a      	ldr	r2, [r3, #24]
 8003bec:	8b7b      	ldrh	r3, [r7, #26]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d306      	bcc.n	8003c00 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	699a      	ldr	r2, [r3, #24]
 8003bf6:	8b7b      	ldrh	r3, [r7, #26]
 8003bf8:	1ad2      	subs	r2, r2, r3
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	619a      	str	r2, [r3, #24]
 8003bfe:	e002      	b.n	8003c06 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2200      	movs	r2, #0
 8003c04:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d123      	bne.n	8003c56 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c28:	83fb      	strh	r3, [r7, #30]
 8003c2a:	8bfb      	ldrh	r3, [r7, #30]
 8003c2c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c30:	83fb      	strh	r3, [r7, #30]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	441a      	add	r2, r3
 8003c40:	8bfb      	ldrh	r3, [r7, #30]
 8003c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003c56:	88fb      	ldrh	r3, [r7, #6]
 8003c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d11f      	bne.n	8003ca0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	461a      	mov	r2, r3
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c7a:	83bb      	strh	r3, [r7, #28]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	461a      	mov	r2, r3
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	441a      	add	r2, r3
 8003c8a:	8bbb      	ldrh	r3, [r7, #28]
 8003c8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003ca0:	8b7b      	ldrh	r3, [r7, #26]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d008      	beq.n	8003cb8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6818      	ldr	r0, [r3, #0]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	6959      	ldr	r1, [r3, #20]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	895a      	ldrh	r2, [r3, #10]
 8003cb2:	8b7b      	ldrh	r3, [r7, #26]
 8003cb4:	f003 fe51 	bl	800795a <USB_ReadPMA>
    }
  }

  return count;
 8003cb8:	8b7b      	ldrh	r3, [r7, #26]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3720      	adds	r7, #32
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b0a4      	sub	sp, #144	; 0x90
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	60f8      	str	r0, [r7, #12]
 8003cca:	60b9      	str	r1, [r7, #8]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003cd0:	88fb      	ldrh	r3, [r7, #6]
 8003cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 81dd 	beq.w	8004096 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	4413      	add	r3, r2
 8003cf0:	3302      	adds	r3, #2
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	6812      	ldr	r2, [r2, #0]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cfe:	881b      	ldrh	r3, [r3, #0]
 8003d00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d04:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	699a      	ldr	r2, [r3, #24]
 8003d0c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d907      	bls.n	8003d24 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	699a      	ldr	r2, [r3, #24]
 8003d18:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003d1c:	1ad2      	subs	r2, r2, r3
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	619a      	str	r2, [r3, #24]
 8003d22:	e002      	b.n	8003d2a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2200      	movs	r2, #0
 8003d28:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f040 80b9 	bne.w	8003ea6 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	785b      	ldrb	r3, [r3, #1]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d126      	bne.n	8003d8a <HAL_PCD_EP_DB_Transmit+0xc8>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d50:	4413      	add	r3, r2
 8003d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	011a      	lsls	r2, r3, #4
 8003d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d62:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d72:	801a      	strh	r2, [r3, #0]
 8003d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d86:	801a      	strh	r2, [r3, #0]
 8003d88:	e01a      	b.n	8003dc0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	785b      	ldrb	r3, [r3, #1]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d116      	bne.n	8003dc0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	637b      	str	r3, [r7, #52]	; 0x34
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	461a      	mov	r2, r3
 8003da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da6:	4413      	add	r3, r2
 8003da8:	637b      	str	r3, [r7, #52]	; 0x34
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	011a      	lsls	r2, r3, #4
 8003db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db2:	4413      	add	r3, r2
 8003db4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003db8:	633b      	str	r3, [r7, #48]	; 0x30
 8003dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	785b      	ldrb	r3, [r3, #1]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d126      	bne.n	8003e1c <HAL_PCD_EP_DB_Transmit+0x15a>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	61fb      	str	r3, [r7, #28]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	461a      	mov	r2, r3
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	4413      	add	r3, r2
 8003de4:	61fb      	str	r3, [r7, #28]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	011a      	lsls	r2, r3, #4
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	4413      	add	r3, r2
 8003df0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003df4:	61bb      	str	r3, [r7, #24]
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	801a      	strh	r2, [r3, #0]
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	801a      	strh	r2, [r3, #0]
 8003e1a:	e017      	b.n	8003e4c <HAL_PCD_EP_DB_Transmit+0x18a>
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	785b      	ldrb	r3, [r3, #1]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d113      	bne.n	8003e4c <HAL_PCD_EP_DB_Transmit+0x18a>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	461a      	mov	r2, r3
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	4413      	add	r3, r2
 8003e34:	627b      	str	r3, [r7, #36]	; 0x24
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	011a      	lsls	r2, r3, #4
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	4413      	add	r3, r2
 8003e40:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e44:	623b      	str	r3, [r7, #32]
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	4619      	mov	r1, r3
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f005 fb2f 	bl	80094b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e58:	88fb      	ldrh	r3, [r7, #6]
 8003e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 82fc 	beq.w	800445c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	461a      	mov	r2, r3
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7e:	82fb      	strh	r3, [r7, #22]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	461a      	mov	r2, r3
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	441a      	add	r2, r3
 8003e8e:	8afb      	ldrh	r3, [r7, #22]
 8003e90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	8013      	strh	r3, [r2, #0]
 8003ea4:	e2da      	b.n	800445c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ea6:	88fb      	ldrh	r3, [r7, #6]
 8003ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d021      	beq.n	8003ef4 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eca:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	441a      	add	r2, r3
 8003edc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ee8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	f040 82ae 	bne.w	800445c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	695a      	ldr	r2, [r3, #20]
 8003f04:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003f08:	441a      	add	r2, r3
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	69da      	ldr	r2, [r3, #28]
 8003f12:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003f16:	441a      	add	r2, r3
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	6a1a      	ldr	r2, [r3, #32]
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d30b      	bcc.n	8003f40 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	6a1a      	ldr	r2, [r3, #32]
 8003f34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f38:	1ad2      	subs	r2, r2, r3
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	621a      	str	r2, [r3, #32]
 8003f3e:	e017      	b.n	8003f70 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d108      	bne.n	8003f5a <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003f48:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003f4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003f58:	e00a      	b.n	8003f70 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	785b      	ldrb	r3, [r3, #1]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d165      	bne.n	8004044 <HAL_PCD_EP_DB_Transmit+0x382>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	461a      	mov	r2, r3
 8003f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f8c:	4413      	add	r3, r2
 8003f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	011a      	lsls	r2, r3, #4
 8003f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f98:	4413      	add	r3, r2
 8003f9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fae:	801a      	strh	r2, [r3, #0]
 8003fb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fb4:	2b3e      	cmp	r3, #62	; 0x3e
 8003fb6:	d91d      	bls.n	8003ff4 <HAL_PCD_EP_DB_Transmit+0x332>
 8003fb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fbc:	095b      	lsrs	r3, r3, #5
 8003fbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fc4:	f003 031f 	and.w	r3, r3, #31
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d102      	bne.n	8003fd2 <HAL_PCD_EP_DB_Transmit+0x310>
 8003fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	029b      	lsls	r3, r3, #10
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff0:	801a      	strh	r2, [r3, #0]
 8003ff2:	e044      	b.n	800407e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003ff4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10a      	bne.n	8004012 <HAL_PCD_EP_DB_Transmit+0x350>
 8003ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	b29b      	uxth	r3, r3
 8004002:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004006:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800400a:	b29a      	uxth	r2, r3
 800400c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400e:	801a      	strh	r2, [r3, #0]
 8004010:	e035      	b.n	800407e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004012:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004016:	085b      	lsrs	r3, r3, #1
 8004018:	64bb      	str	r3, [r7, #72]	; 0x48
 800401a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <HAL_PCD_EP_DB_Transmit+0x36a>
 8004026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004028:	3301      	adds	r3, #1
 800402a:	64bb      	str	r3, [r7, #72]	; 0x48
 800402c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	b29a      	uxth	r2, r3
 8004032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004034:	b29b      	uxth	r3, r3
 8004036:	029b      	lsls	r3, r3, #10
 8004038:	b29b      	uxth	r3, r3
 800403a:	4313      	orrs	r3, r2
 800403c:	b29a      	uxth	r2, r3
 800403e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004040:	801a      	strh	r2, [r3, #0]
 8004042:	e01c      	b.n	800407e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	785b      	ldrb	r3, [r3, #1]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d118      	bne.n	800407e <HAL_PCD_EP_DB_Transmit+0x3bc>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	647b      	str	r3, [r7, #68]	; 0x44
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800405a:	b29b      	uxth	r3, r3
 800405c:	461a      	mov	r2, r3
 800405e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004060:	4413      	add	r3, r2
 8004062:	647b      	str	r3, [r7, #68]	; 0x44
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	011a      	lsls	r2, r3, #4
 800406a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800406c:	4413      	add	r3, r2
 800406e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004072:	643b      	str	r3, [r7, #64]	; 0x40
 8004074:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004078:	b29a      	uxth	r2, r3
 800407a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800407c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6818      	ldr	r0, [r3, #0]
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	6959      	ldr	r1, [r3, #20]
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	891a      	ldrh	r2, [r3, #8]
 800408a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800408e:	b29b      	uxth	r3, r3
 8004090:	f003 fc1e 	bl	80078d0 <USB_WritePMA>
 8004094:	e1e2      	b.n	800445c <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800409e:	b29b      	uxth	r3, r3
 80040a0:	461a      	mov	r2, r3
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	4413      	add	r3, r2
 80040aa:	3306      	adds	r3, #6
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	6812      	ldr	r2, [r2, #0]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040be:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	699a      	ldr	r2, [r3, #24]
 80040c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d307      	bcc.n	80040de <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	699a      	ldr	r2, [r3, #24]
 80040d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80040d6:	1ad2      	subs	r2, r2, r3
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	619a      	str	r2, [r3, #24]
 80040dc:	e002      	b.n	80040e4 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2200      	movs	r2, #0
 80040e2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f040 80c0 	bne.w	800426e <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	785b      	ldrb	r3, [r3, #1]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d126      	bne.n	8004144 <HAL_PCD_EP_DB_Transmit+0x482>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004104:	b29b      	uxth	r3, r3
 8004106:	461a      	mov	r2, r3
 8004108:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800410a:	4413      	add	r3, r2
 800410c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	011a      	lsls	r2, r3, #4
 8004114:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004116:	4413      	add	r3, r2
 8004118:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800411c:	67bb      	str	r3, [r7, #120]	; 0x78
 800411e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	b29b      	uxth	r3, r3
 8004124:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004128:	b29a      	uxth	r2, r3
 800412a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800412c:	801a      	strh	r2, [r3, #0]
 800412e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	b29b      	uxth	r3, r3
 8004134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800413c:	b29a      	uxth	r2, r3
 800413e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004140:	801a      	strh	r2, [r3, #0]
 8004142:	e01a      	b.n	800417a <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	785b      	ldrb	r3, [r3, #1]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d116      	bne.n	800417a <HAL_PCD_EP_DB_Transmit+0x4b8>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	667b      	str	r3, [r7, #100]	; 0x64
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800415a:	b29b      	uxth	r3, r3
 800415c:	461a      	mov	r2, r3
 800415e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004160:	4413      	add	r3, r2
 8004162:	667b      	str	r3, [r7, #100]	; 0x64
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	011a      	lsls	r2, r3, #4
 800416a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800416c:	4413      	add	r3, r2
 800416e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004172:	663b      	str	r3, [r7, #96]	; 0x60
 8004174:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004176:	2200      	movs	r2, #0
 8004178:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	677b      	str	r3, [r7, #116]	; 0x74
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	785b      	ldrb	r3, [r3, #1]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d12b      	bne.n	80041e0 <HAL_PCD_EP_DB_Transmit+0x51e>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004196:	b29b      	uxth	r3, r3
 8004198:	461a      	mov	r2, r3
 800419a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800419c:	4413      	add	r3, r2
 800419e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	011a      	lsls	r2, r3, #4
 80041a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a8:	4413      	add	r3, r2
 80041aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041be:	b29a      	uxth	r2, r3
 80041c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80041c4:	801a      	strh	r2, [r3, #0]
 80041c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80041dc:	801a      	strh	r2, [r3, #0]
 80041de:	e017      	b.n	8004210 <HAL_PCD_EP_DB_Transmit+0x54e>
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	785b      	ldrb	r3, [r3, #1]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d113      	bne.n	8004210 <HAL_PCD_EP_DB_Transmit+0x54e>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	461a      	mov	r2, r3
 80041f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041f6:	4413      	add	r3, r2
 80041f8:	677b      	str	r3, [r7, #116]	; 0x74
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	011a      	lsls	r2, r3, #4
 8004200:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004202:	4413      	add	r3, r2
 8004204:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004208:	673b      	str	r3, [r7, #112]	; 0x70
 800420a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800420c:	2200      	movs	r2, #0
 800420e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	4619      	mov	r1, r3
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f005 f94d 	bl	80094b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800421c:	88fb      	ldrh	r3, [r7, #6]
 800421e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004222:	2b00      	cmp	r3, #0
 8004224:	f040 811a 	bne.w	800445c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	461a      	mov	r2, r3
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	b29b      	uxth	r3, r3
 800423a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800423e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004242:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	461a      	mov	r2, r3
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	441a      	add	r2, r3
 8004254:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004258:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800425c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004260:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004268:	b29b      	uxth	r3, r3
 800426a:	8013      	strh	r3, [r2, #0]
 800426c:	e0f6      	b.n	800445c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800426e:	88fb      	ldrh	r3, [r7, #6]
 8004270:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d121      	bne.n	80042bc <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	461a      	mov	r2, r3
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4413      	add	r3, r2
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	b29b      	uxth	r3, r3
 800428a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800428e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004292:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	461a      	mov	r2, r3
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	441a      	add	r2, r3
 80042a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80042a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	f040 80ca 	bne.w	800445c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	695a      	ldr	r2, [r3, #20]
 80042cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80042d0:	441a      	add	r2, r3
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	69da      	ldr	r2, [r3, #28]
 80042da:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80042de:	441a      	add	r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	6a1a      	ldr	r2, [r3, #32]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d30b      	bcc.n	8004308 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	6a1a      	ldr	r2, [r3, #32]
 80042fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004300:	1ad2      	subs	r2, r2, r3
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	621a      	str	r2, [r3, #32]
 8004306:	e017      	b.n	8004338 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d108      	bne.n	8004322 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004310:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004314:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004320:	e00a      	b.n	8004338 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2200      	movs	r2, #0
 800432e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	657b      	str	r3, [r7, #84]	; 0x54
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	785b      	ldrb	r3, [r3, #1]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d165      	bne.n	8004412 <HAL_PCD_EP_DB_Transmit+0x750>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004354:	b29b      	uxth	r3, r3
 8004356:	461a      	mov	r2, r3
 8004358:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800435a:	4413      	add	r3, r2
 800435c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	011a      	lsls	r2, r3, #4
 8004364:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004366:	4413      	add	r3, r2
 8004368:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800436c:	65bb      	str	r3, [r7, #88]	; 0x58
 800436e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	b29b      	uxth	r3, r3
 8004374:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004378:	b29a      	uxth	r2, r3
 800437a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800437c:	801a      	strh	r2, [r3, #0]
 800437e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004382:	2b3e      	cmp	r3, #62	; 0x3e
 8004384:	d91d      	bls.n	80043c2 <HAL_PCD_EP_DB_Transmit+0x700>
 8004386:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800438a:	095b      	lsrs	r3, r3, #5
 800438c:	66bb      	str	r3, [r7, #104]	; 0x68
 800438e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004392:	f003 031f 	and.w	r3, r3, #31
 8004396:	2b00      	cmp	r3, #0
 8004398:	d102      	bne.n	80043a0 <HAL_PCD_EP_DB_Transmit+0x6de>
 800439a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800439c:	3b01      	subs	r3, #1
 800439e:	66bb      	str	r3, [r7, #104]	; 0x68
 80043a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043a2:	881b      	ldrh	r3, [r3, #0]
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	029b      	lsls	r3, r3, #10
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	4313      	orrs	r3, r2
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043be:	801a      	strh	r2, [r3, #0]
 80043c0:	e041      	b.n	8004446 <HAL_PCD_EP_DB_Transmit+0x784>
 80043c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10a      	bne.n	80043e0 <HAL_PCD_EP_DB_Transmit+0x71e>
 80043ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043cc:	881b      	ldrh	r3, [r3, #0]
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043d8:	b29a      	uxth	r2, r3
 80043da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043dc:	801a      	strh	r2, [r3, #0]
 80043de:	e032      	b.n	8004446 <HAL_PCD_EP_DB_Transmit+0x784>
 80043e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043e4:	085b      	lsrs	r3, r3, #1
 80043e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80043e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d002      	beq.n	80043fa <HAL_PCD_EP_DB_Transmit+0x738>
 80043f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043f6:	3301      	adds	r3, #1
 80043f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80043fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	b29a      	uxth	r2, r3
 8004400:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004402:	b29b      	uxth	r3, r3
 8004404:	029b      	lsls	r3, r3, #10
 8004406:	b29b      	uxth	r3, r3
 8004408:	4313      	orrs	r3, r2
 800440a:	b29a      	uxth	r2, r3
 800440c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800440e:	801a      	strh	r2, [r3, #0]
 8004410:	e019      	b.n	8004446 <HAL_PCD_EP_DB_Transmit+0x784>
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	785b      	ldrb	r3, [r3, #1]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d115      	bne.n	8004446 <HAL_PCD_EP_DB_Transmit+0x784>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004422:	b29b      	uxth	r3, r3
 8004424:	461a      	mov	r2, r3
 8004426:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004428:	4413      	add	r3, r2
 800442a:	657b      	str	r3, [r7, #84]	; 0x54
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	011a      	lsls	r2, r3, #4
 8004432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004434:	4413      	add	r3, r2
 8004436:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800443a:	653b      	str	r3, [r7, #80]	; 0x50
 800443c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004440:	b29a      	uxth	r2, r3
 8004442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004444:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6818      	ldr	r0, [r3, #0]
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	6959      	ldr	r1, [r3, #20]
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	895a      	ldrh	r2, [r3, #10]
 8004452:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004456:	b29b      	uxth	r3, r3
 8004458:	f003 fa3a 	bl	80078d0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	461a      	mov	r2, r3
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	881b      	ldrh	r3, [r3, #0]
 800446c:	b29b      	uxth	r3, r3
 800446e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004472:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004476:	82bb      	strh	r3, [r7, #20]
 8004478:	8abb      	ldrh	r3, [r7, #20]
 800447a:	f083 0310 	eor.w	r3, r3, #16
 800447e:	82bb      	strh	r3, [r7, #20]
 8004480:	8abb      	ldrh	r3, [r7, #20]
 8004482:	f083 0320 	eor.w	r3, r3, #32
 8004486:	82bb      	strh	r3, [r7, #20]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	461a      	mov	r2, r3
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	441a      	add	r2, r3
 8004496:	8abb      	ldrh	r3, [r7, #20]
 8004498:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800449c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3790      	adds	r7, #144	; 0x90
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b087      	sub	sp, #28
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	60f8      	str	r0, [r7, #12]
 80044be:	607b      	str	r3, [r7, #4]
 80044c0:	460b      	mov	r3, r1
 80044c2:	817b      	strh	r3, [r7, #10]
 80044c4:	4613      	mov	r3, r2
 80044c6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80044c8:	897b      	ldrh	r3, [r7, #10]
 80044ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00b      	beq.n	80044ec <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044d4:	897b      	ldrh	r3, [r7, #10]
 80044d6:	f003 0207 	and.w	r2, r3, #7
 80044da:	4613      	mov	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	3310      	adds	r3, #16
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	4413      	add	r3, r2
 80044e8:	617b      	str	r3, [r7, #20]
 80044ea:	e009      	b.n	8004500 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80044ec:	897a      	ldrh	r2, [r7, #10]
 80044ee:	4613      	mov	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4413      	add	r3, r2
 80044f4:	00db      	lsls	r3, r3, #3
 80044f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	4413      	add	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004500:	893b      	ldrh	r3, [r7, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d107      	bne.n	8004516 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2200      	movs	r2, #0
 800450a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	b29a      	uxth	r2, r3
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	80da      	strh	r2, [r3, #6]
 8004514:	e00b      	b.n	800452e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	2201      	movs	r2, #1
 800451a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	b29a      	uxth	r2, r3
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	0c1b      	lsrs	r3, r3, #16
 8004528:	b29a      	uxth	r2, r3
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	371c      	adds	r7, #28
 8004534:	46bd      	mov	sp, r7
 8004536:	bc80      	pop	{r7}
 8004538:	4770      	bx	lr
	...

0800453c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e26c      	b.n	8004a28 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 8087 	beq.w	800466a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800455c:	4b92      	ldr	r3, [pc, #584]	; (80047a8 <HAL_RCC_OscConfig+0x26c>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f003 030c 	and.w	r3, r3, #12
 8004564:	2b04      	cmp	r3, #4
 8004566:	d00c      	beq.n	8004582 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004568:	4b8f      	ldr	r3, [pc, #572]	; (80047a8 <HAL_RCC_OscConfig+0x26c>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f003 030c 	and.w	r3, r3, #12
 8004570:	2b08      	cmp	r3, #8
 8004572:	d112      	bne.n	800459a <HAL_RCC_OscConfig+0x5e>
 8004574:	4b8c      	ldr	r3, [pc, #560]	; (80047a8 <HAL_RCC_OscConfig+0x26c>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800457c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004580:	d10b      	bne.n	800459a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004582:	4b89      	ldr	r3, [pc, #548]	; (80047a8 <HAL_RCC_OscConfig+0x26c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d06c      	beq.n	8004668 <HAL_RCC_OscConfig+0x12c>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d168      	bne.n	8004668 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e246      	b.n	8004a28 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a2:	d106      	bne.n	80045b2 <HAL_RCC_OscConfig+0x76>
 80045a4:	4b80      	ldr	r3, [pc, #512]	; (80047a8 <HAL_RCC_OscConfig+0x26c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a7f      	ldr	r2, [pc, #508]	; (80047a8 <HAL_RCC_OscConfig+0x26c>)
 80045aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ae:	6013      	str	r3, [r2, #0]
 80045b0:	e02e      	b.n	8004610 <HAL_RCC_OscConfig+0xd4>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10c      	bne.n	80045d4 <HAL_RCC_OscConfig+0x98>
 80045ba:	4b7b      	ldr	r3, [pc, #492]	; (80047a8 <HAL_RCC_OscConfig+0x26c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a7a      	ldr	r2, [pc, #488]	; (80047a8 <HAL_RCC_OscConfig+0x26c>)
 80045c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045c4:	6013      	str	r3, [r2, #0]
 80045c6:	4b78      	ldr	r3, [pc, #480]	; (80047a8 <HAL_RCC_OscConfig+0x26c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a77      	ldr	r2, [pc, #476]	; (80047a8 <HAL_RCC_OscConfig+0x26c>)
 80045cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045d0:	6013      	str	r3, [r2, #0]
 80045d2:	e01d      	b.n	8004610 <HAL_RCC_OscConfig+0xd4>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045dc:	d10c      	bne.n	80045f8 <HAL_RCC_OscConfig+0xbc>
 80045de:	4b72      	ldr	r3, [pc, #456]	; (80047a8 <HAL_RCC_OscConfig+0x26c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a71      	ldr	r2, [pc, #452]	; (80047a8 <HAL_RCC_OscConfig+0x26c>)
 80045e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	4b6f      	ldr	r3, [pc, #444]	; (80047a8 <HAL_RCC_OscConfig+0x26c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a6e      	ldr	r2, [pc, #440]	; (80047a8 <HAL_RCC_OscConfig+0x26c>)
 80045f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f4:	6013      	str	r3, [r2, #0]
 80045f6:	e00b      	b.n	8004610 <HAL_RCC_OscConfig+0xd4>
 80045f8:	4b6b      	ldr	r3, [pc, #428]	; (80047a8 <HAL_RCC_OscConfig+0x26c>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a6a      	ldr	r2, [pc, #424]	; (80047a8 <HAL_RCC_OscConfig+0x26c>)
 80045fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004602:	6013      	str	r3, [r2, #0]
 8004604:	4b68      	ldr	r3, [pc, #416]	; (80047a8 <HAL_RCC_OscConfig+0x26c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a67      	ldr	r2, [pc, #412]	; (80047a8 <HAL_RCC_OscConfig+0x26c>)
 800460a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800460e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d013      	beq.n	8004640 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004618:	f7fd faa0 	bl	8001b5c <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004620:	f7fd fa9c 	bl	8001b5c <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b64      	cmp	r3, #100	; 0x64
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e1fa      	b.n	8004a28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004632:	4b5d      	ldr	r3, [pc, #372]	; (80047a8 <HAL_RCC_OscConfig+0x26c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0f0      	beq.n	8004620 <HAL_RCC_OscConfig+0xe4>
 800463e:	e014      	b.n	800466a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004640:	f7fd fa8c 	bl	8001b5c <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004648:	f7fd fa88 	bl	8001b5c <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b64      	cmp	r3, #100	; 0x64
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e1e6      	b.n	8004a28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800465a:	4b53      	ldr	r3, [pc, #332]	; (80047a8 <HAL_RCC_OscConfig+0x26c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1f0      	bne.n	8004648 <HAL_RCC_OscConfig+0x10c>
 8004666:	e000      	b.n	800466a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d063      	beq.n	800473e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004676:	4b4c      	ldr	r3, [pc, #304]	; (80047a8 <HAL_RCC_OscConfig+0x26c>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f003 030c 	and.w	r3, r3, #12
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00b      	beq.n	800469a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004682:	4b49      	ldr	r3, [pc, #292]	; (80047a8 <HAL_RCC_OscConfig+0x26c>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f003 030c 	and.w	r3, r3, #12
 800468a:	2b08      	cmp	r3, #8
 800468c:	d11c      	bne.n	80046c8 <HAL_RCC_OscConfig+0x18c>
 800468e:	4b46      	ldr	r3, [pc, #280]	; (80047a8 <HAL_RCC_OscConfig+0x26c>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d116      	bne.n	80046c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800469a:	4b43      	ldr	r3, [pc, #268]	; (80047a8 <HAL_RCC_OscConfig+0x26c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d005      	beq.n	80046b2 <HAL_RCC_OscConfig+0x176>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d001      	beq.n	80046b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e1ba      	b.n	8004a28 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b2:	4b3d      	ldr	r3, [pc, #244]	; (80047a8 <HAL_RCC_OscConfig+0x26c>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4939      	ldr	r1, [pc, #228]	; (80047a8 <HAL_RCC_OscConfig+0x26c>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046c6:	e03a      	b.n	800473e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d020      	beq.n	8004712 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046d0:	4b36      	ldr	r3, [pc, #216]	; (80047ac <HAL_RCC_OscConfig+0x270>)
 80046d2:	2201      	movs	r2, #1
 80046d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d6:	f7fd fa41 	bl	8001b5c <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046de:	f7fd fa3d 	bl	8001b5c <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e19b      	b.n	8004a28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f0:	4b2d      	ldr	r3, [pc, #180]	; (80047a8 <HAL_RCC_OscConfig+0x26c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0f0      	beq.n	80046de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046fc:	4b2a      	ldr	r3, [pc, #168]	; (80047a8 <HAL_RCC_OscConfig+0x26c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	4927      	ldr	r1, [pc, #156]	; (80047a8 <HAL_RCC_OscConfig+0x26c>)
 800470c:	4313      	orrs	r3, r2
 800470e:	600b      	str	r3, [r1, #0]
 8004710:	e015      	b.n	800473e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004712:	4b26      	ldr	r3, [pc, #152]	; (80047ac <HAL_RCC_OscConfig+0x270>)
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004718:	f7fd fa20 	bl	8001b5c <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004720:	f7fd fa1c 	bl	8001b5c <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e17a      	b.n	8004a28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004732:	4b1d      	ldr	r3, [pc, #116]	; (80047a8 <HAL_RCC_OscConfig+0x26c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1f0      	bne.n	8004720 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0308 	and.w	r3, r3, #8
 8004746:	2b00      	cmp	r3, #0
 8004748:	d03a      	beq.n	80047c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d019      	beq.n	8004786 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004752:	4b17      	ldr	r3, [pc, #92]	; (80047b0 <HAL_RCC_OscConfig+0x274>)
 8004754:	2201      	movs	r2, #1
 8004756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004758:	f7fd fa00 	bl	8001b5c <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004760:	f7fd f9fc 	bl	8001b5c <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e15a      	b.n	8004a28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004772:	4b0d      	ldr	r3, [pc, #52]	; (80047a8 <HAL_RCC_OscConfig+0x26c>)
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0f0      	beq.n	8004760 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800477e:	2001      	movs	r0, #1
 8004780:	f000 fab8 	bl	8004cf4 <RCC_Delay>
 8004784:	e01c      	b.n	80047c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004786:	4b0a      	ldr	r3, [pc, #40]	; (80047b0 <HAL_RCC_OscConfig+0x274>)
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800478c:	f7fd f9e6 	bl	8001b5c <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004792:	e00f      	b.n	80047b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004794:	f7fd f9e2 	bl	8001b5c <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d908      	bls.n	80047b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e140      	b.n	8004a28 <HAL_RCC_OscConfig+0x4ec>
 80047a6:	bf00      	nop
 80047a8:	40021000 	.word	0x40021000
 80047ac:	42420000 	.word	0x42420000
 80047b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047b4:	4b9e      	ldr	r3, [pc, #632]	; (8004a30 <HAL_RCC_OscConfig+0x4f4>)
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1e9      	bne.n	8004794 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 80a6 	beq.w	800491a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ce:	2300      	movs	r3, #0
 80047d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047d2:	4b97      	ldr	r3, [pc, #604]	; (8004a30 <HAL_RCC_OscConfig+0x4f4>)
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10d      	bne.n	80047fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047de:	4b94      	ldr	r3, [pc, #592]	; (8004a30 <HAL_RCC_OscConfig+0x4f4>)
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	4a93      	ldr	r2, [pc, #588]	; (8004a30 <HAL_RCC_OscConfig+0x4f4>)
 80047e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e8:	61d3      	str	r3, [r2, #28]
 80047ea:	4b91      	ldr	r3, [pc, #580]	; (8004a30 <HAL_RCC_OscConfig+0x4f4>)
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f2:	60bb      	str	r3, [r7, #8]
 80047f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047f6:	2301      	movs	r3, #1
 80047f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047fa:	4b8e      	ldr	r3, [pc, #568]	; (8004a34 <HAL_RCC_OscConfig+0x4f8>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004802:	2b00      	cmp	r3, #0
 8004804:	d118      	bne.n	8004838 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004806:	4b8b      	ldr	r3, [pc, #556]	; (8004a34 <HAL_RCC_OscConfig+0x4f8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a8a      	ldr	r2, [pc, #552]	; (8004a34 <HAL_RCC_OscConfig+0x4f8>)
 800480c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004812:	f7fd f9a3 	bl	8001b5c <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800481a:	f7fd f99f 	bl	8001b5c <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b64      	cmp	r3, #100	; 0x64
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e0fd      	b.n	8004a28 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800482c:	4b81      	ldr	r3, [pc, #516]	; (8004a34 <HAL_RCC_OscConfig+0x4f8>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0f0      	beq.n	800481a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d106      	bne.n	800484e <HAL_RCC_OscConfig+0x312>
 8004840:	4b7b      	ldr	r3, [pc, #492]	; (8004a30 <HAL_RCC_OscConfig+0x4f4>)
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	4a7a      	ldr	r2, [pc, #488]	; (8004a30 <HAL_RCC_OscConfig+0x4f4>)
 8004846:	f043 0301 	orr.w	r3, r3, #1
 800484a:	6213      	str	r3, [r2, #32]
 800484c:	e02d      	b.n	80048aa <HAL_RCC_OscConfig+0x36e>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10c      	bne.n	8004870 <HAL_RCC_OscConfig+0x334>
 8004856:	4b76      	ldr	r3, [pc, #472]	; (8004a30 <HAL_RCC_OscConfig+0x4f4>)
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	4a75      	ldr	r2, [pc, #468]	; (8004a30 <HAL_RCC_OscConfig+0x4f4>)
 800485c:	f023 0301 	bic.w	r3, r3, #1
 8004860:	6213      	str	r3, [r2, #32]
 8004862:	4b73      	ldr	r3, [pc, #460]	; (8004a30 <HAL_RCC_OscConfig+0x4f4>)
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	4a72      	ldr	r2, [pc, #456]	; (8004a30 <HAL_RCC_OscConfig+0x4f4>)
 8004868:	f023 0304 	bic.w	r3, r3, #4
 800486c:	6213      	str	r3, [r2, #32]
 800486e:	e01c      	b.n	80048aa <HAL_RCC_OscConfig+0x36e>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	2b05      	cmp	r3, #5
 8004876:	d10c      	bne.n	8004892 <HAL_RCC_OscConfig+0x356>
 8004878:	4b6d      	ldr	r3, [pc, #436]	; (8004a30 <HAL_RCC_OscConfig+0x4f4>)
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	4a6c      	ldr	r2, [pc, #432]	; (8004a30 <HAL_RCC_OscConfig+0x4f4>)
 800487e:	f043 0304 	orr.w	r3, r3, #4
 8004882:	6213      	str	r3, [r2, #32]
 8004884:	4b6a      	ldr	r3, [pc, #424]	; (8004a30 <HAL_RCC_OscConfig+0x4f4>)
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	4a69      	ldr	r2, [pc, #420]	; (8004a30 <HAL_RCC_OscConfig+0x4f4>)
 800488a:	f043 0301 	orr.w	r3, r3, #1
 800488e:	6213      	str	r3, [r2, #32]
 8004890:	e00b      	b.n	80048aa <HAL_RCC_OscConfig+0x36e>
 8004892:	4b67      	ldr	r3, [pc, #412]	; (8004a30 <HAL_RCC_OscConfig+0x4f4>)
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	4a66      	ldr	r2, [pc, #408]	; (8004a30 <HAL_RCC_OscConfig+0x4f4>)
 8004898:	f023 0301 	bic.w	r3, r3, #1
 800489c:	6213      	str	r3, [r2, #32]
 800489e:	4b64      	ldr	r3, [pc, #400]	; (8004a30 <HAL_RCC_OscConfig+0x4f4>)
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	4a63      	ldr	r2, [pc, #396]	; (8004a30 <HAL_RCC_OscConfig+0x4f4>)
 80048a4:	f023 0304 	bic.w	r3, r3, #4
 80048a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d015      	beq.n	80048de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048b2:	f7fd f953 	bl	8001b5c <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b8:	e00a      	b.n	80048d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ba:	f7fd f94f 	bl	8001b5c <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e0ab      	b.n	8004a28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048d0:	4b57      	ldr	r3, [pc, #348]	; (8004a30 <HAL_RCC_OscConfig+0x4f4>)
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0ee      	beq.n	80048ba <HAL_RCC_OscConfig+0x37e>
 80048dc:	e014      	b.n	8004908 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048de:	f7fd f93d 	bl	8001b5c <HAL_GetTick>
 80048e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048e4:	e00a      	b.n	80048fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e6:	f7fd f939 	bl	8001b5c <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e095      	b.n	8004a28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048fc:	4b4c      	ldr	r3, [pc, #304]	; (8004a30 <HAL_RCC_OscConfig+0x4f4>)
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1ee      	bne.n	80048e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004908:	7dfb      	ldrb	r3, [r7, #23]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d105      	bne.n	800491a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800490e:	4b48      	ldr	r3, [pc, #288]	; (8004a30 <HAL_RCC_OscConfig+0x4f4>)
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	4a47      	ldr	r2, [pc, #284]	; (8004a30 <HAL_RCC_OscConfig+0x4f4>)
 8004914:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004918:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 8081 	beq.w	8004a26 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004924:	4b42      	ldr	r3, [pc, #264]	; (8004a30 <HAL_RCC_OscConfig+0x4f4>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f003 030c 	and.w	r3, r3, #12
 800492c:	2b08      	cmp	r3, #8
 800492e:	d061      	beq.n	80049f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	2b02      	cmp	r3, #2
 8004936:	d146      	bne.n	80049c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004938:	4b3f      	ldr	r3, [pc, #252]	; (8004a38 <HAL_RCC_OscConfig+0x4fc>)
 800493a:	2200      	movs	r2, #0
 800493c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800493e:	f7fd f90d 	bl	8001b5c <HAL_GetTick>
 8004942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004944:	e008      	b.n	8004958 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004946:	f7fd f909 	bl	8001b5c <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e067      	b.n	8004a28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004958:	4b35      	ldr	r3, [pc, #212]	; (8004a30 <HAL_RCC_OscConfig+0x4f4>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1f0      	bne.n	8004946 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800496c:	d108      	bne.n	8004980 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800496e:	4b30      	ldr	r3, [pc, #192]	; (8004a30 <HAL_RCC_OscConfig+0x4f4>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	492d      	ldr	r1, [pc, #180]	; (8004a30 <HAL_RCC_OscConfig+0x4f4>)
 800497c:	4313      	orrs	r3, r2
 800497e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004980:	4b2b      	ldr	r3, [pc, #172]	; (8004a30 <HAL_RCC_OscConfig+0x4f4>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a19      	ldr	r1, [r3, #32]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	430b      	orrs	r3, r1
 8004992:	4927      	ldr	r1, [pc, #156]	; (8004a30 <HAL_RCC_OscConfig+0x4f4>)
 8004994:	4313      	orrs	r3, r2
 8004996:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004998:	4b27      	ldr	r3, [pc, #156]	; (8004a38 <HAL_RCC_OscConfig+0x4fc>)
 800499a:	2201      	movs	r2, #1
 800499c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800499e:	f7fd f8dd 	bl	8001b5c <HAL_GetTick>
 80049a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049a4:	e008      	b.n	80049b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a6:	f7fd f8d9 	bl	8001b5c <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e037      	b.n	8004a28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049b8:	4b1d      	ldr	r3, [pc, #116]	; (8004a30 <HAL_RCC_OscConfig+0x4f4>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d0f0      	beq.n	80049a6 <HAL_RCC_OscConfig+0x46a>
 80049c4:	e02f      	b.n	8004a26 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049c6:	4b1c      	ldr	r3, [pc, #112]	; (8004a38 <HAL_RCC_OscConfig+0x4fc>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049cc:	f7fd f8c6 	bl	8001b5c <HAL_GetTick>
 80049d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049d4:	f7fd f8c2 	bl	8001b5c <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e020      	b.n	8004a28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049e6:	4b12      	ldr	r3, [pc, #72]	; (8004a30 <HAL_RCC_OscConfig+0x4f4>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1f0      	bne.n	80049d4 <HAL_RCC_OscConfig+0x498>
 80049f2:	e018      	b.n	8004a26 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d101      	bne.n	8004a00 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e013      	b.n	8004a28 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a00:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <HAL_RCC_OscConfig+0x4f4>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d106      	bne.n	8004a22 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d001      	beq.n	8004a26 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3718      	adds	r7, #24
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	40021000 	.word	0x40021000
 8004a34:	40007000 	.word	0x40007000
 8004a38:	42420060 	.word	0x42420060

08004a3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e0d0      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a50:	4b6a      	ldr	r3, [pc, #424]	; (8004bfc <HAL_RCC_ClockConfig+0x1c0>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d910      	bls.n	8004a80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a5e:	4b67      	ldr	r3, [pc, #412]	; (8004bfc <HAL_RCC_ClockConfig+0x1c0>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f023 0207 	bic.w	r2, r3, #7
 8004a66:	4965      	ldr	r1, [pc, #404]	; (8004bfc <HAL_RCC_ClockConfig+0x1c0>)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a6e:	4b63      	ldr	r3, [pc, #396]	; (8004bfc <HAL_RCC_ClockConfig+0x1c0>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d001      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e0b8      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d020      	beq.n	8004ace <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d005      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a98:	4b59      	ldr	r3, [pc, #356]	; (8004c00 <HAL_RCC_ClockConfig+0x1c4>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	4a58      	ldr	r2, [pc, #352]	; (8004c00 <HAL_RCC_ClockConfig+0x1c4>)
 8004a9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004aa2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0308 	and.w	r3, r3, #8
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d005      	beq.n	8004abc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ab0:	4b53      	ldr	r3, [pc, #332]	; (8004c00 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	4a52      	ldr	r2, [pc, #328]	; (8004c00 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004aba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004abc:	4b50      	ldr	r3, [pc, #320]	; (8004c00 <HAL_RCC_ClockConfig+0x1c4>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	494d      	ldr	r1, [pc, #308]	; (8004c00 <HAL_RCC_ClockConfig+0x1c4>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d040      	beq.n	8004b5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d107      	bne.n	8004af2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae2:	4b47      	ldr	r3, [pc, #284]	; (8004c00 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d115      	bne.n	8004b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e07f      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d107      	bne.n	8004b0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004afa:	4b41      	ldr	r3, [pc, #260]	; (8004c00 <HAL_RCC_ClockConfig+0x1c4>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d109      	bne.n	8004b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e073      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b0a:	4b3d      	ldr	r3, [pc, #244]	; (8004c00 <HAL_RCC_ClockConfig+0x1c4>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e06b      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b1a:	4b39      	ldr	r3, [pc, #228]	; (8004c00 <HAL_RCC_ClockConfig+0x1c4>)
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f023 0203 	bic.w	r2, r3, #3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	4936      	ldr	r1, [pc, #216]	; (8004c00 <HAL_RCC_ClockConfig+0x1c4>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b2c:	f7fd f816 	bl	8001b5c <HAL_GetTick>
 8004b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b32:	e00a      	b.n	8004b4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b34:	f7fd f812 	bl	8001b5c <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e053      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b4a:	4b2d      	ldr	r3, [pc, #180]	; (8004c00 <HAL_RCC_ClockConfig+0x1c4>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f003 020c 	and.w	r2, r3, #12
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d1eb      	bne.n	8004b34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b5c:	4b27      	ldr	r3, [pc, #156]	; (8004bfc <HAL_RCC_ClockConfig+0x1c0>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d210      	bcs.n	8004b8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b6a:	4b24      	ldr	r3, [pc, #144]	; (8004bfc <HAL_RCC_ClockConfig+0x1c0>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f023 0207 	bic.w	r2, r3, #7
 8004b72:	4922      	ldr	r1, [pc, #136]	; (8004bfc <HAL_RCC_ClockConfig+0x1c0>)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b7a:	4b20      	ldr	r3, [pc, #128]	; (8004bfc <HAL_RCC_ClockConfig+0x1c0>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0307 	and.w	r3, r3, #7
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d001      	beq.n	8004b8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e032      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d008      	beq.n	8004baa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b98:	4b19      	ldr	r3, [pc, #100]	; (8004c00 <HAL_RCC_ClockConfig+0x1c4>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	4916      	ldr	r1, [pc, #88]	; (8004c00 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0308 	and.w	r3, r3, #8
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d009      	beq.n	8004bca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004bb6:	4b12      	ldr	r3, [pc, #72]	; (8004c00 <HAL_RCC_ClockConfig+0x1c4>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	490e      	ldr	r1, [pc, #56]	; (8004c00 <HAL_RCC_ClockConfig+0x1c4>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004bca:	f000 f821 	bl	8004c10 <HAL_RCC_GetSysClockFreq>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	4b0b      	ldr	r3, [pc, #44]	; (8004c00 <HAL_RCC_ClockConfig+0x1c4>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	091b      	lsrs	r3, r3, #4
 8004bd6:	f003 030f 	and.w	r3, r3, #15
 8004bda:	490a      	ldr	r1, [pc, #40]	; (8004c04 <HAL_RCC_ClockConfig+0x1c8>)
 8004bdc:	5ccb      	ldrb	r3, [r1, r3]
 8004bde:	fa22 f303 	lsr.w	r3, r2, r3
 8004be2:	4a09      	ldr	r2, [pc, #36]	; (8004c08 <HAL_RCC_ClockConfig+0x1cc>)
 8004be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004be6:	4b09      	ldr	r3, [pc, #36]	; (8004c0c <HAL_RCC_ClockConfig+0x1d0>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fc ff74 	bl	8001ad8 <HAL_InitTick>

  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40022000 	.word	0x40022000
 8004c00:	40021000 	.word	0x40021000
 8004c04:	0800a2f8 	.word	0x0800a2f8
 8004c08:	20000004 	.word	0x20000004
 8004c0c:	20000008 	.word	0x20000008

08004c10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b087      	sub	sp, #28
 8004c14:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60bb      	str	r3, [r7, #8]
 8004c1e:	2300      	movs	r3, #0
 8004c20:	617b      	str	r3, [r7, #20]
 8004c22:	2300      	movs	r3, #0
 8004c24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004c2a:	4b1e      	ldr	r3, [pc, #120]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f003 030c 	and.w	r3, r3, #12
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d002      	beq.n	8004c40 <HAL_RCC_GetSysClockFreq+0x30>
 8004c3a:	2b08      	cmp	r3, #8
 8004c3c:	d003      	beq.n	8004c46 <HAL_RCC_GetSysClockFreq+0x36>
 8004c3e:	e027      	b.n	8004c90 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c40:	4b19      	ldr	r3, [pc, #100]	; (8004ca8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c42:	613b      	str	r3, [r7, #16]
      break;
 8004c44:	e027      	b.n	8004c96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	0c9b      	lsrs	r3, r3, #18
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	4a17      	ldr	r2, [pc, #92]	; (8004cac <HAL_RCC_GetSysClockFreq+0x9c>)
 8004c50:	5cd3      	ldrb	r3, [r2, r3]
 8004c52:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d010      	beq.n	8004c80 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c5e:	4b11      	ldr	r3, [pc, #68]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	0c5b      	lsrs	r3, r3, #17
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	4a11      	ldr	r2, [pc, #68]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004c6a:	5cd3      	ldrb	r3, [r2, r3]
 8004c6c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a0d      	ldr	r2, [pc, #52]	; (8004ca8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c72:	fb02 f203 	mul.w	r2, r2, r3
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7c:	617b      	str	r3, [r7, #20]
 8004c7e:	e004      	b.n	8004c8a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a0c      	ldr	r2, [pc, #48]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004c84:	fb02 f303 	mul.w	r3, r2, r3
 8004c88:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	613b      	str	r3, [r7, #16]
      break;
 8004c8e:	e002      	b.n	8004c96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c90:	4b05      	ldr	r3, [pc, #20]	; (8004ca8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c92:	613b      	str	r3, [r7, #16]
      break;
 8004c94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c96:	693b      	ldr	r3, [r7, #16]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	371c      	adds	r7, #28
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bc80      	pop	{r7}
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	007a1200 	.word	0x007a1200
 8004cac:	0800a310 	.word	0x0800a310
 8004cb0:	0800a320 	.word	0x0800a320
 8004cb4:	003d0900 	.word	0x003d0900

08004cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cbc:	4b02      	ldr	r3, [pc, #8]	; (8004cc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bc80      	pop	{r7}
 8004cc6:	4770      	bx	lr
 8004cc8:	20000004 	.word	0x20000004

08004ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cd0:	f7ff fff2 	bl	8004cb8 <HAL_RCC_GetHCLKFreq>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	4b05      	ldr	r3, [pc, #20]	; (8004cec <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	0a1b      	lsrs	r3, r3, #8
 8004cdc:	f003 0307 	and.w	r3, r3, #7
 8004ce0:	4903      	ldr	r1, [pc, #12]	; (8004cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ce2:	5ccb      	ldrb	r3, [r1, r3]
 8004ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	40021000 	.word	0x40021000
 8004cf0:	0800a308 	.word	0x0800a308

08004cf4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004cfc:	4b0a      	ldr	r3, [pc, #40]	; (8004d28 <RCC_Delay+0x34>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a0a      	ldr	r2, [pc, #40]	; (8004d2c <RCC_Delay+0x38>)
 8004d02:	fba2 2303 	umull	r2, r3, r2, r3
 8004d06:	0a5b      	lsrs	r3, r3, #9
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	fb02 f303 	mul.w	r3, r2, r3
 8004d0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004d10:	bf00      	nop
  }
  while (Delay --);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	1e5a      	subs	r2, r3, #1
 8004d16:	60fa      	str	r2, [r7, #12]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1f9      	bne.n	8004d10 <RCC_Delay+0x1c>
}
 8004d1c:	bf00      	nop
 8004d1e:	bf00      	nop
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bc80      	pop	{r7}
 8004d26:	4770      	bx	lr
 8004d28:	20000004 	.word	0x20000004
 8004d2c:	10624dd3 	.word	0x10624dd3

08004d30 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	613b      	str	r3, [r7, #16]
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d07d      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d50:	4b4f      	ldr	r3, [pc, #316]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10d      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d5c:	4b4c      	ldr	r3, [pc, #304]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	4a4b      	ldr	r2, [pc, #300]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d66:	61d3      	str	r3, [r2, #28]
 8004d68:	4b49      	ldr	r3, [pc, #292]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d6a:	69db      	ldr	r3, [r3, #28]
 8004d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d70:	60bb      	str	r3, [r7, #8]
 8004d72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d74:	2301      	movs	r3, #1
 8004d76:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d78:	4b46      	ldr	r3, [pc, #280]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d118      	bne.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d84:	4b43      	ldr	r3, [pc, #268]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a42      	ldr	r2, [pc, #264]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d90:	f7fc fee4 	bl	8001b5c <HAL_GetTick>
 8004d94:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d96:	e008      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d98:	f7fc fee0 	bl	8001b5c <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b64      	cmp	r3, #100	; 0x64
 8004da4:	d901      	bls.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e06d      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004daa:	4b3a      	ldr	r3, [pc, #232]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0f0      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004db6:	4b36      	ldr	r3, [pc, #216]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dbe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d02e      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d027      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dd4:	4b2e      	ldr	r3, [pc, #184]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ddc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dde:	4b2e      	ldr	r3, [pc, #184]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004de0:	2201      	movs	r2, #1
 8004de2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004de4:	4b2c      	ldr	r3, [pc, #176]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004dea:	4a29      	ldr	r2, [pc, #164]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d014      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dfa:	f7fc feaf 	bl	8001b5c <HAL_GetTick>
 8004dfe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e00:	e00a      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e02:	f7fc feab 	bl	8001b5c <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e036      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e18:	4b1d      	ldr	r3, [pc, #116]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0ee      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e24:	4b1a      	ldr	r3, [pc, #104]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	4917      	ldr	r1, [pc, #92]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e36:	7dfb      	ldrb	r3, [r7, #23]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d105      	bne.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e3c:	4b14      	ldr	r3, [pc, #80]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e3e:	69db      	ldr	r3, [r3, #28]
 8004e40:	4a13      	ldr	r2, [pc, #76]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e46:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d008      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e54:	4b0e      	ldr	r3, [pc, #56]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	490b      	ldr	r1, [pc, #44]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0310 	and.w	r3, r3, #16
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d008      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e72:	4b07      	ldr	r3, [pc, #28]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	4904      	ldr	r1, [pc, #16]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3718      	adds	r7, #24
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	40021000 	.word	0x40021000
 8004e94:	40007000 	.word	0x40007000
 8004e98:	42420440 	.word	0x42420440

08004e9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e041      	b.n	8004f32 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d106      	bne.n	8004ec8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7fc fca2 	bl	800180c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2202      	movs	r2, #2
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	3304      	adds	r3, #4
 8004ed8:	4619      	mov	r1, r3
 8004eda:	4610      	mov	r0, r2
 8004edc:	f000 f992 	bl	8005204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
	...

08004f3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d109      	bne.n	8004f60 <HAL_TIM_PWM_Start+0x24>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	bf14      	ite	ne
 8004f58:	2301      	movne	r3, #1
 8004f5a:	2300      	moveq	r3, #0
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	e022      	b.n	8004fa6 <HAL_TIM_PWM_Start+0x6a>
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	2b04      	cmp	r3, #4
 8004f64:	d109      	bne.n	8004f7a <HAL_TIM_PWM_Start+0x3e>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	bf14      	ite	ne
 8004f72:	2301      	movne	r3, #1
 8004f74:	2300      	moveq	r3, #0
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	e015      	b.n	8004fa6 <HAL_TIM_PWM_Start+0x6a>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d109      	bne.n	8004f94 <HAL_TIM_PWM_Start+0x58>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	bf14      	ite	ne
 8004f8c:	2301      	movne	r3, #1
 8004f8e:	2300      	moveq	r3, #0
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	e008      	b.n	8004fa6 <HAL_TIM_PWM_Start+0x6a>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	bf14      	ite	ne
 8004fa0:	2301      	movne	r3, #1
 8004fa2:	2300      	moveq	r3, #0
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e05e      	b.n	800506c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d104      	bne.n	8004fbe <HAL_TIM_PWM_Start+0x82>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fbc:	e013      	b.n	8004fe6 <HAL_TIM_PWM_Start+0xaa>
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b04      	cmp	r3, #4
 8004fc2:	d104      	bne.n	8004fce <HAL_TIM_PWM_Start+0x92>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fcc:	e00b      	b.n	8004fe6 <HAL_TIM_PWM_Start+0xaa>
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	2b08      	cmp	r3, #8
 8004fd2:	d104      	bne.n	8004fde <HAL_TIM_PWM_Start+0xa2>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fdc:	e003      	b.n	8004fe6 <HAL_TIM_PWM_Start+0xaa>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2202      	movs	r2, #2
 8004fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2201      	movs	r2, #1
 8004fec:	6839      	ldr	r1, [r7, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 fafe 	bl	80055f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a1e      	ldr	r2, [pc, #120]	; (8005074 <HAL_TIM_PWM_Start+0x138>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d107      	bne.n	800500e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800500c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a18      	ldr	r2, [pc, #96]	; (8005074 <HAL_TIM_PWM_Start+0x138>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d00e      	beq.n	8005036 <HAL_TIM_PWM_Start+0xfa>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005020:	d009      	beq.n	8005036 <HAL_TIM_PWM_Start+0xfa>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a14      	ldr	r2, [pc, #80]	; (8005078 <HAL_TIM_PWM_Start+0x13c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d004      	beq.n	8005036 <HAL_TIM_PWM_Start+0xfa>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a12      	ldr	r2, [pc, #72]	; (800507c <HAL_TIM_PWM_Start+0x140>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d111      	bne.n	800505a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2b06      	cmp	r3, #6
 8005046:	d010      	beq.n	800506a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0201 	orr.w	r2, r2, #1
 8005056:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005058:	e007      	b.n	800506a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f042 0201 	orr.w	r2, r2, #1
 8005068:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	40012c00 	.word	0x40012c00
 8005078:	40000400 	.word	0x40000400
 800507c:	40000800 	.word	0x40000800

08005080 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800508c:	2300      	movs	r3, #0
 800508e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005096:	2b01      	cmp	r3, #1
 8005098:	d101      	bne.n	800509e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800509a:	2302      	movs	r3, #2
 800509c:	e0ae      	b.n	80051fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b0c      	cmp	r3, #12
 80050aa:	f200 809f 	bhi.w	80051ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80050ae:	a201      	add	r2, pc, #4	; (adr r2, 80050b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b4:	080050e9 	.word	0x080050e9
 80050b8:	080051ed 	.word	0x080051ed
 80050bc:	080051ed 	.word	0x080051ed
 80050c0:	080051ed 	.word	0x080051ed
 80050c4:	08005129 	.word	0x08005129
 80050c8:	080051ed 	.word	0x080051ed
 80050cc:	080051ed 	.word	0x080051ed
 80050d0:	080051ed 	.word	0x080051ed
 80050d4:	0800516b 	.word	0x0800516b
 80050d8:	080051ed 	.word	0x080051ed
 80050dc:	080051ed 	.word	0x080051ed
 80050e0:	080051ed 	.word	0x080051ed
 80050e4:	080051ab 	.word	0x080051ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68b9      	ldr	r1, [r7, #8]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 f8f6 	bl	80052e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699a      	ldr	r2, [r3, #24]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f042 0208 	orr.w	r2, r2, #8
 8005102:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	699a      	ldr	r2, [r3, #24]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 0204 	bic.w	r2, r2, #4
 8005112:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6999      	ldr	r1, [r3, #24]
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	691a      	ldr	r2, [r3, #16]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	619a      	str	r2, [r3, #24]
      break;
 8005126:	e064      	b.n	80051f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68b9      	ldr	r1, [r7, #8]
 800512e:	4618      	mov	r0, r3
 8005130:	f000 f93c 	bl	80053ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699a      	ldr	r2, [r3, #24]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005142:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699a      	ldr	r2, [r3, #24]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005152:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6999      	ldr	r1, [r3, #24]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	021a      	lsls	r2, r3, #8
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	619a      	str	r2, [r3, #24]
      break;
 8005168:	e043      	b.n	80051f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68b9      	ldr	r1, [r7, #8]
 8005170:	4618      	mov	r0, r3
 8005172:	f000 f985 	bl	8005480 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69da      	ldr	r2, [r3, #28]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f042 0208 	orr.w	r2, r2, #8
 8005184:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	69da      	ldr	r2, [r3, #28]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0204 	bic.w	r2, r2, #4
 8005194:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	69d9      	ldr	r1, [r3, #28]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	691a      	ldr	r2, [r3, #16]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	61da      	str	r2, [r3, #28]
      break;
 80051a8:	e023      	b.n	80051f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68b9      	ldr	r1, [r7, #8]
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 f9cf 	bl	8005554 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	69da      	ldr	r2, [r3, #28]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	69da      	ldr	r2, [r3, #28]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69d9      	ldr	r1, [r3, #28]
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	021a      	lsls	r2, r3, #8
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	61da      	str	r2, [r3, #28]
      break;
 80051ea:	e002      	b.n	80051f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	75fb      	strb	r3, [r7, #23]
      break;
 80051f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3718      	adds	r7, #24
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a2f      	ldr	r2, [pc, #188]	; (80052d4 <TIM_Base_SetConfig+0xd0>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d00b      	beq.n	8005234 <TIM_Base_SetConfig+0x30>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005222:	d007      	beq.n	8005234 <TIM_Base_SetConfig+0x30>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a2c      	ldr	r2, [pc, #176]	; (80052d8 <TIM_Base_SetConfig+0xd4>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d003      	beq.n	8005234 <TIM_Base_SetConfig+0x30>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a2b      	ldr	r2, [pc, #172]	; (80052dc <TIM_Base_SetConfig+0xd8>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d108      	bne.n	8005246 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	4313      	orrs	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a22      	ldr	r2, [pc, #136]	; (80052d4 <TIM_Base_SetConfig+0xd0>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d00b      	beq.n	8005266 <TIM_Base_SetConfig+0x62>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005254:	d007      	beq.n	8005266 <TIM_Base_SetConfig+0x62>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a1f      	ldr	r2, [pc, #124]	; (80052d8 <TIM_Base_SetConfig+0xd4>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d003      	beq.n	8005266 <TIM_Base_SetConfig+0x62>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a1e      	ldr	r2, [pc, #120]	; (80052dc <TIM_Base_SetConfig+0xd8>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d108      	bne.n	8005278 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800526c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	4313      	orrs	r3, r2
 8005276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	4313      	orrs	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a0d      	ldr	r2, [pc, #52]	; (80052d4 <TIM_Base_SetConfig+0xd0>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d103      	bne.n	80052ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	691a      	ldr	r2, [r3, #16]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d005      	beq.n	80052ca <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	f023 0201 	bic.w	r2, r3, #1
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	611a      	str	r2, [r3, #16]
  }
}
 80052ca:	bf00      	nop
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bc80      	pop	{r7}
 80052d2:	4770      	bx	lr
 80052d4:	40012c00 	.word	0x40012c00
 80052d8:	40000400 	.word	0x40000400
 80052dc:	40000800 	.word	0x40000800

080052e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	f023 0201 	bic.w	r2, r3, #1
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f023 0303 	bic.w	r3, r3, #3
 8005316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	4313      	orrs	r3, r2
 8005320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f023 0302 	bic.w	r3, r3, #2
 8005328:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	4313      	orrs	r3, r2
 8005332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a1c      	ldr	r2, [pc, #112]	; (80053a8 <TIM_OC1_SetConfig+0xc8>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d10c      	bne.n	8005356 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f023 0308 	bic.w	r3, r3, #8
 8005342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	4313      	orrs	r3, r2
 800534c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f023 0304 	bic.w	r3, r3, #4
 8005354:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a13      	ldr	r2, [pc, #76]	; (80053a8 <TIM_OC1_SetConfig+0xc8>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d111      	bne.n	8005382 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005364:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800536c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	4313      	orrs	r3, r2
 8005376:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	4313      	orrs	r3, r2
 8005380:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	621a      	str	r2, [r3, #32]
}
 800539c:	bf00      	nop
 800539e:	371c      	adds	r7, #28
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bc80      	pop	{r7}
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	40012c00 	.word	0x40012c00

080053ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	f023 0210 	bic.w	r2, r3, #16
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	021b      	lsls	r3, r3, #8
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f023 0320 	bic.w	r3, r3, #32
 80053f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	011b      	lsls	r3, r3, #4
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	4313      	orrs	r3, r2
 8005402:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a1d      	ldr	r2, [pc, #116]	; (800547c <TIM_OC2_SetConfig+0xd0>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d10d      	bne.n	8005428 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	011b      	lsls	r3, r3, #4
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	4313      	orrs	r3, r2
 800541e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005426:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a14      	ldr	r2, [pc, #80]	; (800547c <TIM_OC2_SetConfig+0xd0>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d113      	bne.n	8005458 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005436:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800543e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	4313      	orrs	r3, r2
 800544a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	4313      	orrs	r3, r2
 8005456:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685a      	ldr	r2, [r3, #4]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	621a      	str	r2, [r3, #32]
}
 8005472:	bf00      	nop
 8005474:	371c      	adds	r7, #28
 8005476:	46bd      	mov	sp, r7
 8005478:	bc80      	pop	{r7}
 800547a:	4770      	bx	lr
 800547c:	40012c00 	.word	0x40012c00

08005480 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f023 0303 	bic.w	r3, r3, #3
 80054b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	021b      	lsls	r3, r3, #8
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a1d      	ldr	r2, [pc, #116]	; (8005550 <TIM_OC3_SetConfig+0xd0>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d10d      	bne.n	80054fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	021b      	lsls	r3, r3, #8
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a14      	ldr	r2, [pc, #80]	; (8005550 <TIM_OC3_SetConfig+0xd0>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d113      	bne.n	800552a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	011b      	lsls	r3, r3, #4
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	4313      	orrs	r3, r2
 800551c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	011b      	lsls	r3, r3, #4
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	4313      	orrs	r3, r2
 8005528:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	685a      	ldr	r2, [r3, #4]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	621a      	str	r2, [r3, #32]
}
 8005544:	bf00      	nop
 8005546:	371c      	adds	r7, #28
 8005548:	46bd      	mov	sp, r7
 800554a:	bc80      	pop	{r7}
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	40012c00 	.word	0x40012c00

08005554 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005554:	b480      	push	{r7}
 8005556:	b087      	sub	sp, #28
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	69db      	ldr	r3, [r3, #28]
 800557a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800558a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	021b      	lsls	r3, r3, #8
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	4313      	orrs	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800559e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	031b      	lsls	r3, r3, #12
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a0f      	ldr	r2, [pc, #60]	; (80055ec <TIM_OC4_SetConfig+0x98>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d109      	bne.n	80055c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	695b      	ldr	r3, [r3, #20]
 80055c0:	019b      	lsls	r3, r3, #6
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	621a      	str	r2, [r3, #32]
}
 80055e2:	bf00      	nop
 80055e4:	371c      	adds	r7, #28
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bc80      	pop	{r7}
 80055ea:	4770      	bx	lr
 80055ec:	40012c00 	.word	0x40012c00

080055f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b087      	sub	sp, #28
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	f003 031f 	and.w	r3, r3, #31
 8005602:	2201      	movs	r2, #1
 8005604:	fa02 f303 	lsl.w	r3, r2, r3
 8005608:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6a1a      	ldr	r2, [r3, #32]
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	43db      	mvns	r3, r3
 8005612:	401a      	ands	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6a1a      	ldr	r2, [r3, #32]
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f003 031f 	and.w	r3, r3, #31
 8005622:	6879      	ldr	r1, [r7, #4]
 8005624:	fa01 f303 	lsl.w	r3, r1, r3
 8005628:	431a      	orrs	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	621a      	str	r2, [r3, #32]
}
 800562e:	bf00      	nop
 8005630:	371c      	adds	r7, #28
 8005632:	46bd      	mov	sp, r7
 8005634:	bc80      	pop	{r7}
 8005636:	4770      	bx	lr

08005638 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005648:	2b01      	cmp	r3, #1
 800564a:	d101      	bne.n	8005650 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800564c:	2302      	movs	r3, #2
 800564e:	e046      	b.n	80056de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2202      	movs	r2, #2
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005676:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	4313      	orrs	r3, r2
 8005680:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a16      	ldr	r2, [pc, #88]	; (80056e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d00e      	beq.n	80056b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800569c:	d009      	beq.n	80056b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a12      	ldr	r2, [pc, #72]	; (80056ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d004      	beq.n	80056b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a10      	ldr	r2, [pc, #64]	; (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d10c      	bne.n	80056cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bc80      	pop	{r7}
 80056e6:	4770      	bx	lr
 80056e8:	40012c00 	.word	0x40012c00
 80056ec:	40000400 	.word	0x40000400
 80056f0:	40000800 	.word	0x40000800

080056f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80056fe:	2300      	movs	r3, #0
 8005700:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800570c:	2302      	movs	r3, #2
 800570e:	e03d      	b.n	800578c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	4313      	orrs	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	4313      	orrs	r3, r2
 8005732:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	4313      	orrs	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4313      	orrs	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	4313      	orrs	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	4313      	orrs	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	bc80      	pop	{r7}
 8005794:	4770      	bx	lr

08005796 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005796:	b480      	push	{r7}
 8005798:	b085      	sub	sp, #20
 800579a:	af00      	add	r7, sp, #0
 800579c:	60f8      	str	r0, [r7, #12]
 800579e:	4638      	mov	r0, r7
 80057a0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3714      	adds	r7, #20
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bc80      	pop	{r7}
 80057ae:	4770      	bx	lr

080057b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057c0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80057c4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bc80      	pop	{r7}
 80057da:	4770      	bx	lr

080057dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057e4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80057e8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	43db      	mvns	r3, r3
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	4013      	ands	r3, r2
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	bc80      	pop	{r7}
 800580e:	4770      	bx	lr

08005810 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	460b      	mov	r3, r1
 800581a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	bc80      	pop	{r7}
 8005826:	4770      	bx	lr

08005828 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	4638      	mov	r0, r7
 8005832:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2201      	movs	r2, #1
 800583a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	bc80      	pop	{r7}
 8005860:	4770      	bx	lr
	...

08005864 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005864:	b480      	push	{r7}
 8005866:	b09d      	sub	sp, #116	; 0x74
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	b29b      	uxth	r3, r3
 8005882:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800588a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	78db      	ldrb	r3, [r3, #3]
 8005892:	2b03      	cmp	r3, #3
 8005894:	d81f      	bhi.n	80058d6 <USB_ActivateEndpoint+0x72>
 8005896:	a201      	add	r2, pc, #4	; (adr r2, 800589c <USB_ActivateEndpoint+0x38>)
 8005898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589c:	080058ad 	.word	0x080058ad
 80058a0:	080058c9 	.word	0x080058c9
 80058a4:	080058df 	.word	0x080058df
 80058a8:	080058bb 	.word	0x080058bb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80058ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80058b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058b4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80058b8:	e012      	b.n	80058e0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80058ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80058be:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80058c2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80058c6:	e00b      	b.n	80058e0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80058c8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80058cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058d0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80058d4:	e004      	b.n	80058e0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80058dc:	e000      	b.n	80058e0 <USB_ActivateEndpoint+0x7c>
      break;
 80058de:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	441a      	add	r2, r3
 80058ea:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80058ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058fe:	b29b      	uxth	r3, r3
 8005900:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	881b      	ldrh	r3, [r3, #0]
 800590e:	b29b      	uxth	r3, r3
 8005910:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005918:	b29a      	uxth	r2, r3
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	b29b      	uxth	r3, r3
 8005920:	4313      	orrs	r3, r2
 8005922:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	441a      	add	r2, r3
 8005930:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005934:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005938:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800593c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005944:	b29b      	uxth	r3, r3
 8005946:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	7b1b      	ldrb	r3, [r3, #12]
 800594c:	2b00      	cmp	r3, #0
 800594e:	f040 8178 	bne.w	8005c42 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	785b      	ldrb	r3, [r3, #1]
 8005956:	2b00      	cmp	r3, #0
 8005958:	f000 8084 	beq.w	8005a64 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	61bb      	str	r3, [r7, #24]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005966:	b29b      	uxth	r3, r3
 8005968:	461a      	mov	r2, r3
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	4413      	add	r3, r2
 800596e:	61bb      	str	r3, [r7, #24]
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	011a      	lsls	r2, r3, #4
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	4413      	add	r3, r2
 800597a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800597e:	617b      	str	r3, [r7, #20]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	88db      	ldrh	r3, [r3, #6]
 8005984:	085b      	lsrs	r3, r3, #1
 8005986:	b29b      	uxth	r3, r3
 8005988:	005b      	lsls	r3, r3, #1
 800598a:	b29a      	uxth	r2, r3
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	827b      	strh	r3, [r7, #18]
 800599e:	8a7b      	ldrh	r3, [r7, #18]
 80059a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d01b      	beq.n	80059e0 <USB_ActivateEndpoint+0x17c>
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	881b      	ldrh	r3, [r3, #0]
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059be:	823b      	strh	r3, [r7, #16]
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	441a      	add	r2, r3
 80059ca:	8a3b      	ldrh	r3, [r7, #16]
 80059cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059dc:	b29b      	uxth	r3, r3
 80059de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	78db      	ldrb	r3, [r3, #3]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d020      	beq.n	8005a2a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	881b      	ldrh	r3, [r3, #0]
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059fe:	81bb      	strh	r3, [r7, #12]
 8005a00:	89bb      	ldrh	r3, [r7, #12]
 8005a02:	f083 0320 	eor.w	r3, r3, #32
 8005a06:	81bb      	strh	r3, [r7, #12]
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	441a      	add	r2, r3
 8005a12:	89bb      	ldrh	r3, [r7, #12]
 8005a14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	8013      	strh	r3, [r2, #0]
 8005a28:	e2d5      	b.n	8005fd6 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	881b      	ldrh	r3, [r3, #0]
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a40:	81fb      	strh	r3, [r7, #14]
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	441a      	add	r2, r3
 8005a4c:	89fb      	ldrh	r3, [r7, #14]
 8005a4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	8013      	strh	r3, [r2, #0]
 8005a62:	e2b8      	b.n	8005fd6 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	633b      	str	r3, [r7, #48]	; 0x30
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	461a      	mov	r2, r3
 8005a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a74:	4413      	add	r3, r2
 8005a76:	633b      	str	r3, [r7, #48]	; 0x30
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	011a      	lsls	r2, r3, #4
 8005a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a80:	4413      	add	r3, r2
 8005a82:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005a86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	88db      	ldrh	r3, [r3, #6]
 8005a8c:	085b      	lsrs	r3, r3, #1
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a96:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa8:	4413      	add	r3, r2
 8005aaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	011a      	lsls	r2, r3, #4
 8005ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005aba:	627b      	str	r3, [r7, #36]	; 0x24
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abe:	881b      	ldrh	r3, [r3, #0]
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	801a      	strh	r2, [r3, #0]
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	2b3e      	cmp	r3, #62	; 0x3e
 8005ad2:	d91d      	bls.n	8005b10 <USB_ActivateEndpoint+0x2ac>
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	095b      	lsrs	r3, r3, #5
 8005ada:	66bb      	str	r3, [r7, #104]	; 0x68
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	f003 031f 	and.w	r3, r3, #31
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d102      	bne.n	8005aee <USB_ActivateEndpoint+0x28a>
 8005ae8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005aea:	3b01      	subs	r3, #1
 8005aec:	66bb      	str	r3, [r7, #104]	; 0x68
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	029b      	lsls	r3, r3, #10
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	4313      	orrs	r3, r2
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0c:	801a      	strh	r2, [r3, #0]
 8005b0e:	e026      	b.n	8005b5e <USB_ActivateEndpoint+0x2fa>
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10a      	bne.n	8005b2e <USB_ActivateEndpoint+0x2ca>
 8005b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1a:	881b      	ldrh	r3, [r3, #0]
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	801a      	strh	r2, [r3, #0]
 8005b2c:	e017      	b.n	8005b5e <USB_ActivateEndpoint+0x2fa>
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	085b      	lsrs	r3, r3, #1
 8005b34:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <USB_ActivateEndpoint+0x2e4>
 8005b42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b44:	3301      	adds	r3, #1
 8005b46:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4a:	881b      	ldrh	r3, [r3, #0]
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	029b      	lsls	r3, r3, #10
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	4313      	orrs	r3, r2
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	847b      	strh	r3, [r7, #34]	; 0x22
 8005b6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d01b      	beq.n	8005bae <USB_ActivateEndpoint+0x34a>
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8c:	843b      	strh	r3, [r7, #32]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	441a      	add	r2, r3
 8005b98:	8c3b      	ldrh	r3, [r7, #32]
 8005b9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ba2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d124      	bne.n	8005c00 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4413      	add	r3, r2
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bcc:	83bb      	strh	r3, [r7, #28]
 8005bce:	8bbb      	ldrh	r3, [r7, #28]
 8005bd0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005bd4:	83bb      	strh	r3, [r7, #28]
 8005bd6:	8bbb      	ldrh	r3, [r7, #28]
 8005bd8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005bdc:	83bb      	strh	r3, [r7, #28]
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	441a      	add	r2, r3
 8005be8:	8bbb      	ldrh	r3, [r7, #28]
 8005bea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	8013      	strh	r3, [r2, #0]
 8005bfe:	e1ea      	b.n	8005fd6 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4413      	add	r3, r2
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c16:	83fb      	strh	r3, [r7, #30]
 8005c18:	8bfb      	ldrh	r3, [r7, #30]
 8005c1a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c1e:	83fb      	strh	r3, [r7, #30]
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	441a      	add	r2, r3
 8005c2a:	8bfb      	ldrh	r3, [r7, #30]
 8005c2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	8013      	strh	r3, [r2, #0]
 8005c40:	e1c9      	b.n	8005fd6 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	78db      	ldrb	r3, [r3, #3]
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d11e      	bne.n	8005c88 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	881b      	ldrh	r3, [r3, #0]
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c60:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	441a      	add	r2, r3
 8005c6e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005c72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c7a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	8013      	strh	r3, [r2, #0]
 8005c86:	e01d      	b.n	8005cc4 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4413      	add	r3, r2
 8005c92:	881b      	ldrh	r3, [r3, #0]
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c9e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	441a      	add	r2, r3
 8005cac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005cb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cd4:	4413      	add	r3, r2
 8005cd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	011a      	lsls	r2, r3, #4
 8005cde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ce6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	891b      	ldrh	r3, [r3, #8]
 8005cec:	085b      	lsrs	r3, r3, #1
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	005b      	lsls	r3, r3, #1
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cf6:	801a      	strh	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	657b      	str	r3, [r7, #84]	; 0x54
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	461a      	mov	r2, r3
 8005d06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d08:	4413      	add	r3, r2
 8005d0a:	657b      	str	r3, [r7, #84]	; 0x54
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	011a      	lsls	r2, r3, #4
 8005d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d14:	4413      	add	r3, r2
 8005d16:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005d1a:	653b      	str	r3, [r7, #80]	; 0x50
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	895b      	ldrh	r3, [r3, #10]
 8005d20:	085b      	lsrs	r3, r3, #1
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d2a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	785b      	ldrb	r3, [r3, #1]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f040 8093 	bne.w	8005e5c <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4413      	add	r3, r2
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005d46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d01b      	beq.n	8005d8a <USB_ActivateEndpoint+0x526>
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	881b      	ldrh	r3, [r3, #0]
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d68:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	441a      	add	r2, r3
 8005d74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005d76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	881b      	ldrh	r3, [r3, #0]
 8005d96:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005d98:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d01b      	beq.n	8005dda <USB_ActivateEndpoint+0x576>
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4413      	add	r3, r2
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	441a      	add	r2, r3
 8005dc4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005dc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dd2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	4413      	add	r3, r2
 8005de4:	881b      	ldrh	r3, [r3, #0]
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df0:	873b      	strh	r3, [r7, #56]	; 0x38
 8005df2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005df4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005df8:	873b      	strh	r3, [r7, #56]	; 0x38
 8005dfa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005dfc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e00:	873b      	strh	r3, [r7, #56]	; 0x38
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	441a      	add	r2, r3
 8005e0c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e38:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	441a      	add	r2, r3
 8005e44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	8013      	strh	r3, [r2, #0]
 8005e5a:	e0bc      	b.n	8005fd6 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4413      	add	r3, r2
 8005e66:	881b      	ldrh	r3, [r3, #0]
 8005e68:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005e6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005e70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d01d      	beq.n	8005eb4 <USB_ActivateEndpoint+0x650>
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4413      	add	r3, r2
 8005e82:	881b      	ldrh	r3, [r3, #0]
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	441a      	add	r2, r3
 8005e9c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005ea0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ea4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ea8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	4413      	add	r3, r2
 8005ebe:	881b      	ldrh	r3, [r3, #0]
 8005ec0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005ec4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d01d      	beq.n	8005f0c <USB_ActivateEndpoint+0x6a8>
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4413      	add	r3, r2
 8005eda:	881b      	ldrh	r3, [r3, #0]
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	441a      	add	r2, r3
 8005ef4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005ef8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005efc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	78db      	ldrb	r3, [r3, #3]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d024      	beq.n	8005f5e <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	881b      	ldrh	r3, [r3, #0]
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f2a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005f2e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005f32:	f083 0320 	eor.w	r3, r3, #32
 8005f36:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	441a      	add	r2, r3
 8005f44:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005f48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	8013      	strh	r3, [r2, #0]
 8005f5c:	e01d      	b.n	8005f9a <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f74:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	441a      	add	r2, r3
 8005f82:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005f86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	441a      	add	r2, r3
 8005fbe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005fc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005fd6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3774      	adds	r7, #116	; 0x74
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bc80      	pop	{r7}
 8005fe2:	4770      	bx	lr

08005fe4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b08d      	sub	sp, #52	; 0x34
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	7b1b      	ldrb	r3, [r3, #12]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f040 808e 	bne.w	8006114 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	785b      	ldrb	r3, [r3, #1]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d044      	beq.n	800608a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	881b      	ldrh	r3, [r3, #0]
 800600c:	81bb      	strh	r3, [r7, #12]
 800600e:	89bb      	ldrh	r3, [r7, #12]
 8006010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006014:	2b00      	cmp	r3, #0
 8006016:	d01b      	beq.n	8006050 <USB_DeactivateEndpoint+0x6c>
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	881b      	ldrh	r3, [r3, #0]
 8006024:	b29b      	uxth	r3, r3
 8006026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800602a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800602e:	817b      	strh	r3, [r7, #10]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	441a      	add	r2, r3
 800603a:	897b      	ldrh	r3, [r7, #10]
 800603c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006040:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006048:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800604c:	b29b      	uxth	r3, r3
 800604e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	881b      	ldrh	r3, [r3, #0]
 800605c:	b29b      	uxth	r3, r3
 800605e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006062:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006066:	813b      	strh	r3, [r7, #8]
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	441a      	add	r2, r3
 8006072:	893b      	ldrh	r3, [r7, #8]
 8006074:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006078:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800607c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006084:	b29b      	uxth	r3, r3
 8006086:	8013      	strh	r3, [r2, #0]
 8006088:	e192      	b.n	80063b0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	4413      	add	r3, r2
 8006094:	881b      	ldrh	r3, [r3, #0]
 8006096:	827b      	strh	r3, [r7, #18]
 8006098:	8a7b      	ldrh	r3, [r7, #18]
 800609a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d01b      	beq.n	80060da <USB_DeactivateEndpoint+0xf6>
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	881b      	ldrh	r3, [r3, #0]
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b8:	823b      	strh	r3, [r7, #16]
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	441a      	add	r2, r3
 80060c4:	8a3b      	ldrh	r3, [r7, #16]
 80060c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f0:	81fb      	strh	r3, [r7, #14]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	441a      	add	r2, r3
 80060fc:	89fb      	ldrh	r3, [r7, #14]
 80060fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800610a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800610e:	b29b      	uxth	r3, r3
 8006110:	8013      	strh	r3, [r2, #0]
 8006112:	e14d      	b.n	80063b0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	785b      	ldrb	r3, [r3, #1]
 8006118:	2b00      	cmp	r3, #0
 800611a:	f040 80a5 	bne.w	8006268 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4413      	add	r3, r2
 8006128:	881b      	ldrh	r3, [r3, #0]
 800612a:	843b      	strh	r3, [r7, #32]
 800612c:	8c3b      	ldrh	r3, [r7, #32]
 800612e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d01b      	beq.n	800616e <USB_DeactivateEndpoint+0x18a>
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4413      	add	r3, r2
 8006140:	881b      	ldrh	r3, [r3, #0]
 8006142:	b29b      	uxth	r3, r3
 8006144:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800614c:	83fb      	strh	r3, [r7, #30]
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	441a      	add	r2, r3
 8006158:	8bfb      	ldrh	r3, [r7, #30]
 800615a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800615e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006162:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800616a:	b29b      	uxth	r3, r3
 800616c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4413      	add	r3, r2
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	83bb      	strh	r3, [r7, #28]
 800617c:	8bbb      	ldrh	r3, [r7, #28]
 800617e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006182:	2b00      	cmp	r3, #0
 8006184:	d01b      	beq.n	80061be <USB_DeactivateEndpoint+0x1da>
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	881b      	ldrh	r3, [r3, #0]
 8006192:	b29b      	uxth	r3, r3
 8006194:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800619c:	837b      	strh	r3, [r7, #26]
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	441a      	add	r2, r3
 80061a8:	8b7b      	ldrh	r3, [r7, #26]
 80061aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4413      	add	r3, r2
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d4:	833b      	strh	r3, [r7, #24]
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	441a      	add	r2, r3
 80061e0:	8b3b      	ldrh	r3, [r7, #24]
 80061e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	b29b      	uxth	r3, r3
 8006204:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800620c:	82fb      	strh	r3, [r7, #22]
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	441a      	add	r2, r3
 8006218:	8afb      	ldrh	r3, [r7, #22]
 800621a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800621e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800622a:	b29b      	uxth	r3, r3
 800622c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	881b      	ldrh	r3, [r3, #0]
 800623a:	b29b      	uxth	r3, r3
 800623c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006240:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006244:	82bb      	strh	r3, [r7, #20]
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	441a      	add	r2, r3
 8006250:	8abb      	ldrh	r3, [r7, #20]
 8006252:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006256:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800625a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800625e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006262:	b29b      	uxth	r3, r3
 8006264:	8013      	strh	r3, [r2, #0]
 8006266:	e0a3      	b.n	80063b0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	4413      	add	r3, r2
 8006272:	881b      	ldrh	r3, [r3, #0]
 8006274:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006276:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006278:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d01b      	beq.n	80062b8 <USB_DeactivateEndpoint+0x2d4>
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	4413      	add	r3, r2
 800628a:	881b      	ldrh	r3, [r3, #0]
 800628c:	b29b      	uxth	r3, r3
 800628e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006296:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	441a      	add	r2, r3
 80062a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80062a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	881b      	ldrh	r3, [r3, #0]
 80062c4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80062c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80062c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d01b      	beq.n	8006308 <USB_DeactivateEndpoint+0x324>
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4413      	add	r3, r2
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	b29b      	uxth	r3, r3
 80062de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e6:	853b      	strh	r3, [r7, #40]	; 0x28
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	441a      	add	r2, r3
 80062f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80062f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006300:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006304:	b29b      	uxth	r3, r3
 8006306:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	b29b      	uxth	r3, r3
 8006316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800631a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800631e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	441a      	add	r2, r3
 800632a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800632c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006330:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006334:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800633c:	b29b      	uxth	r3, r3
 800633e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	881b      	ldrh	r3, [r3, #0]
 800634c:	b29b      	uxth	r3, r3
 800634e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006356:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	441a      	add	r2, r3
 8006362:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006364:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006368:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800636c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006374:	b29b      	uxth	r3, r3
 8006376:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	4413      	add	r3, r2
 8006382:	881b      	ldrh	r3, [r3, #0]
 8006384:	b29b      	uxth	r3, r3
 8006386:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800638a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800638e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	441a      	add	r2, r3
 800639a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800639c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3734      	adds	r7, #52	; 0x34
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bc80      	pop	{r7}
 80063ba:	4770      	bx	lr

080063bc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b0c2      	sub	sp, #264	; 0x108
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	1d3b      	adds	r3, r7, #4
 80063c4:	6018      	str	r0, [r3, #0]
 80063c6:	463b      	mov	r3, r7
 80063c8:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80063ca:	463b      	mov	r3, r7
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	785b      	ldrb	r3, [r3, #1]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	f040 8545 	bne.w	8006e60 <USB_EPStartXfer+0xaa4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80063d6:	463b      	mov	r3, r7
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	699a      	ldr	r2, [r3, #24]
 80063dc:	463b      	mov	r3, r7
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d905      	bls.n	80063f2 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80063e6:	463b      	mov	r3, r7
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063f0:	e004      	b.n	80063fc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80063f2:	463b      	mov	r3, r7
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	699b      	ldr	r3, [r3, #24]
 80063f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80063fc:	463b      	mov	r3, r7
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	7b1b      	ldrb	r3, [r3, #12]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d128      	bne.n	8006458 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006406:	463b      	mov	r3, r7
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6959      	ldr	r1, [r3, #20]
 800640c:	463b      	mov	r3, r7
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	88da      	ldrh	r2, [r3, #6]
 8006412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006416:	b29b      	uxth	r3, r3
 8006418:	1d38      	adds	r0, r7, #4
 800641a:	6800      	ldr	r0, [r0, #0]
 800641c:	f001 fa58 	bl	80078d0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006420:	1d3b      	adds	r3, r7, #4
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	613b      	str	r3, [r7, #16]
 8006426:	1d3b      	adds	r3, r7, #4
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800642e:	b29b      	uxth	r3, r3
 8006430:	461a      	mov	r2, r3
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	4413      	add	r3, r2
 8006436:	613b      	str	r3, [r7, #16]
 8006438:	463b      	mov	r3, r7
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	011a      	lsls	r2, r3, #4
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	4413      	add	r3, r2
 8006444:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006448:	60fb      	str	r3, [r7, #12]
 800644a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800644e:	b29a      	uxth	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	801a      	strh	r2, [r3, #0]
 8006454:	f000 bcdb 	b.w	8006e0e <USB_EPStartXfer+0xa52>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006458:	463b      	mov	r3, r7
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	78db      	ldrb	r3, [r3, #3]
 800645e:	2b02      	cmp	r3, #2
 8006460:	f040 836f 	bne.w	8006b42 <USB_EPStartXfer+0x786>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006464:	463b      	mov	r3, r7
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	6a1a      	ldr	r2, [r3, #32]
 800646a:	463b      	mov	r3, r7
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	429a      	cmp	r2, r3
 8006472:	f240 8313 	bls.w	8006a9c <USB_EPStartXfer+0x6e0>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006476:	1d3b      	adds	r3, r7, #4
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	463b      	mov	r3, r7
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4413      	add	r3, r2
 8006484:	881b      	ldrh	r3, [r3, #0]
 8006486:	b29b      	uxth	r3, r3
 8006488:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800648c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006490:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006494:	1d3b      	adds	r3, r7, #4
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	463b      	mov	r3, r7
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	441a      	add	r2, r3
 80064a2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80064a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064ae:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80064b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80064ba:	463b      	mov	r3, r7
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	6a1a      	ldr	r2, [r3, #32]
 80064c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064c4:	1ad2      	subs	r2, r2, r3
 80064c6:	463b      	mov	r3, r7
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80064cc:	1d3b      	adds	r3, r7, #4
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	463b      	mov	r3, r7
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	881b      	ldrh	r3, [r3, #0]
 80064dc:	b29b      	uxth	r3, r3
 80064de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f000 816d 	beq.w	80067c2 <USB_EPStartXfer+0x406>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80064e8:	1d3b      	adds	r3, r7, #4
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	633b      	str	r3, [r7, #48]	; 0x30
 80064ee:	463b      	mov	r3, r7
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	785b      	ldrb	r3, [r3, #1]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d16e      	bne.n	80065d6 <USB_EPStartXfer+0x21a>
 80064f8:	1d3b      	adds	r3, r7, #4
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80064fe:	1d3b      	adds	r3, r7, #4
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006506:	b29b      	uxth	r3, r3
 8006508:	461a      	mov	r2, r3
 800650a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650c:	4413      	add	r3, r2
 800650e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006510:	463b      	mov	r3, r7
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	011a      	lsls	r2, r3, #4
 8006518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651a:	4413      	add	r3, r2
 800651c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006520:	627b      	str	r3, [r7, #36]	; 0x24
 8006522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006524:	881b      	ldrh	r3, [r3, #0]
 8006526:	b29b      	uxth	r3, r3
 8006528:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800652c:	b29a      	uxth	r2, r3
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	801a      	strh	r2, [r3, #0]
 8006532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006536:	2b3e      	cmp	r3, #62	; 0x3e
 8006538:	d921      	bls.n	800657e <USB_EPStartXfer+0x1c2>
 800653a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800653e:	095b      	lsrs	r3, r3, #5
 8006540:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006548:	f003 031f 	and.w	r3, r3, #31
 800654c:	2b00      	cmp	r3, #0
 800654e:	d104      	bne.n	800655a <USB_EPStartXfer+0x19e>
 8006550:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006554:	3b01      	subs	r3, #1
 8006556:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655c:	881b      	ldrh	r3, [r3, #0]
 800655e:	b29a      	uxth	r2, r3
 8006560:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006564:	b29b      	uxth	r3, r3
 8006566:	029b      	lsls	r3, r3, #10
 8006568:	b29b      	uxth	r3, r3
 800656a:	4313      	orrs	r3, r2
 800656c:	b29b      	uxth	r3, r3
 800656e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006572:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006576:	b29a      	uxth	r2, r3
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	801a      	strh	r2, [r3, #0]
 800657c:	e047      	b.n	800660e <USB_EPStartXfer+0x252>
 800657e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10a      	bne.n	800659c <USB_EPStartXfer+0x1e0>
 8006586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006588:	881b      	ldrh	r3, [r3, #0]
 800658a:	b29b      	uxth	r3, r3
 800658c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006594:	b29a      	uxth	r2, r3
 8006596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006598:	801a      	strh	r2, [r3, #0]
 800659a:	e038      	b.n	800660e <USB_EPStartXfer+0x252>
 800659c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065a0:	085b      	lsrs	r3, r3, #1
 80065a2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80065a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d004      	beq.n	80065bc <USB_EPStartXfer+0x200>
 80065b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065b6:	3301      	adds	r3, #1
 80065b8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80065bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065be:	881b      	ldrh	r3, [r3, #0]
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	029b      	lsls	r3, r3, #10
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	4313      	orrs	r3, r2
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d2:	801a      	strh	r2, [r3, #0]
 80065d4:	e01b      	b.n	800660e <USB_EPStartXfer+0x252>
 80065d6:	463b      	mov	r3, r7
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	785b      	ldrb	r3, [r3, #1]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d116      	bne.n	800660e <USB_EPStartXfer+0x252>
 80065e0:	1d3b      	adds	r3, r7, #4
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	461a      	mov	r2, r3
 80065ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ee:	4413      	add	r3, r2
 80065f0:	633b      	str	r3, [r7, #48]	; 0x30
 80065f2:	463b      	mov	r3, r7
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	011a      	lsls	r2, r3, #4
 80065fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fc:	4413      	add	r3, r2
 80065fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006602:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006608:	b29a      	uxth	r2, r3
 800660a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800660e:	463b      	mov	r3, r7
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	895b      	ldrh	r3, [r3, #10]
 8006614:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006618:	463b      	mov	r3, r7
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	6959      	ldr	r1, [r3, #20]
 800661e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006622:	b29b      	uxth	r3, r3
 8006624:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006628:	1d38      	adds	r0, r7, #4
 800662a:	6800      	ldr	r0, [r0, #0]
 800662c:	f001 f950 	bl	80078d0 <USB_WritePMA>
            ep->xfer_buff += len;
 8006630:	463b      	mov	r3, r7
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	695a      	ldr	r2, [r3, #20]
 8006636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800663a:	441a      	add	r2, r3
 800663c:	463b      	mov	r3, r7
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006642:	463b      	mov	r3, r7
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	6a1a      	ldr	r2, [r3, #32]
 8006648:	463b      	mov	r3, r7
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	429a      	cmp	r2, r3
 8006650:	d909      	bls.n	8006666 <USB_EPStartXfer+0x2aa>
            {
              ep->xfer_len_db -= len;
 8006652:	463b      	mov	r3, r7
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6a1a      	ldr	r2, [r3, #32]
 8006658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800665c:	1ad2      	subs	r2, r2, r3
 800665e:	463b      	mov	r3, r7
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	621a      	str	r2, [r3, #32]
 8006664:	e008      	b.n	8006678 <USB_EPStartXfer+0x2bc>
            }
            else
            {
              len = ep->xfer_len_db;
 8006666:	463b      	mov	r3, r7
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	6a1b      	ldr	r3, [r3, #32]
 800666c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006670:	463b      	mov	r3, r7
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2200      	movs	r2, #0
 8006676:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006678:	463b      	mov	r3, r7
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	785b      	ldrb	r3, [r3, #1]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d16e      	bne.n	8006760 <USB_EPStartXfer+0x3a4>
 8006682:	1d3b      	adds	r3, r7, #4
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	61bb      	str	r3, [r7, #24]
 8006688:	1d3b      	adds	r3, r7, #4
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006690:	b29b      	uxth	r3, r3
 8006692:	461a      	mov	r2, r3
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	4413      	add	r3, r2
 8006698:	61bb      	str	r3, [r7, #24]
 800669a:	463b      	mov	r3, r7
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	011a      	lsls	r2, r3, #4
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	4413      	add	r3, r2
 80066a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066aa:	617b      	str	r3, [r7, #20]
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	881b      	ldrh	r3, [r3, #0]
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	801a      	strh	r2, [r3, #0]
 80066bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066c0:	2b3e      	cmp	r3, #62	; 0x3e
 80066c2:	d921      	bls.n	8006708 <USB_EPStartXfer+0x34c>
 80066c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066c8:	095b      	lsrs	r3, r3, #5
 80066ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80066ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066d2:	f003 031f 	and.w	r3, r3, #31
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d104      	bne.n	80066e4 <USB_EPStartXfer+0x328>
 80066da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066de:	3b01      	subs	r3, #1
 80066e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	881b      	ldrh	r3, [r3, #0]
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	029b      	lsls	r3, r3, #10
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	4313      	orrs	r3, r2
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006700:	b29a      	uxth	r2, r3
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	801a      	strh	r2, [r3, #0]
 8006706:	e04a      	b.n	800679e <USB_EPStartXfer+0x3e2>
 8006708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10a      	bne.n	8006726 <USB_EPStartXfer+0x36a>
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	881b      	ldrh	r3, [r3, #0]
 8006714:	b29b      	uxth	r3, r3
 8006716:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800671a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800671e:	b29a      	uxth	r2, r3
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	801a      	strh	r2, [r3, #0]
 8006724:	e03b      	b.n	800679e <USB_EPStartXfer+0x3e2>
 8006726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800672a:	085b      	lsrs	r3, r3, #1
 800672c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006734:	f003 0301 	and.w	r3, r3, #1
 8006738:	2b00      	cmp	r3, #0
 800673a:	d004      	beq.n	8006746 <USB_EPStartXfer+0x38a>
 800673c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006740:	3301      	adds	r3, #1
 8006742:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	881b      	ldrh	r3, [r3, #0]
 800674a:	b29a      	uxth	r2, r3
 800674c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006750:	b29b      	uxth	r3, r3
 8006752:	029b      	lsls	r3, r3, #10
 8006754:	b29b      	uxth	r3, r3
 8006756:	4313      	orrs	r3, r2
 8006758:	b29a      	uxth	r2, r3
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	801a      	strh	r2, [r3, #0]
 800675e:	e01e      	b.n	800679e <USB_EPStartXfer+0x3e2>
 8006760:	463b      	mov	r3, r7
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	785b      	ldrb	r3, [r3, #1]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d119      	bne.n	800679e <USB_EPStartXfer+0x3e2>
 800676a:	1d3b      	adds	r3, r7, #4
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	623b      	str	r3, [r7, #32]
 8006770:	1d3b      	adds	r3, r7, #4
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006778:	b29b      	uxth	r3, r3
 800677a:	461a      	mov	r2, r3
 800677c:	6a3b      	ldr	r3, [r7, #32]
 800677e:	4413      	add	r3, r2
 8006780:	623b      	str	r3, [r7, #32]
 8006782:	463b      	mov	r3, r7
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	011a      	lsls	r2, r3, #4
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	4413      	add	r3, r2
 800678e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006792:	61fb      	str	r3, [r7, #28]
 8006794:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006798:	b29a      	uxth	r2, r3
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800679e:	463b      	mov	r3, r7
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	891b      	ldrh	r3, [r3, #8]
 80067a4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067a8:	463b      	mov	r3, r7
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6959      	ldr	r1, [r3, #20]
 80067ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80067b8:	1d38      	adds	r0, r7, #4
 80067ba:	6800      	ldr	r0, [r0, #0]
 80067bc:	f001 f888 	bl	80078d0 <USB_WritePMA>
 80067c0:	e325      	b.n	8006e0e <USB_EPStartXfer+0xa52>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80067c2:	463b      	mov	r3, r7
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	785b      	ldrb	r3, [r3, #1]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d16e      	bne.n	80068aa <USB_EPStartXfer+0x4ee>
 80067cc:	1d3b      	adds	r3, r7, #4
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80067d2:	1d3b      	adds	r3, r7, #4
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067da:	b29b      	uxth	r3, r3
 80067dc:	461a      	mov	r2, r3
 80067de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067e0:	4413      	add	r3, r2
 80067e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80067e4:	463b      	mov	r3, r7
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	011a      	lsls	r2, r3, #4
 80067ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067ee:	4413      	add	r3, r2
 80067f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067f4:	647b      	str	r3, [r7, #68]	; 0x44
 80067f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006800:	b29a      	uxth	r2, r3
 8006802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006804:	801a      	strh	r2, [r3, #0]
 8006806:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800680a:	2b3e      	cmp	r3, #62	; 0x3e
 800680c:	d921      	bls.n	8006852 <USB_EPStartXfer+0x496>
 800680e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006812:	095b      	lsrs	r3, r3, #5
 8006814:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800681c:	f003 031f 	and.w	r3, r3, #31
 8006820:	2b00      	cmp	r3, #0
 8006822:	d104      	bne.n	800682e <USB_EPStartXfer+0x472>
 8006824:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006828:	3b01      	subs	r3, #1
 800682a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800682e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006830:	881b      	ldrh	r3, [r3, #0]
 8006832:	b29a      	uxth	r2, r3
 8006834:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006838:	b29b      	uxth	r3, r3
 800683a:	029b      	lsls	r3, r3, #10
 800683c:	b29b      	uxth	r3, r3
 800683e:	4313      	orrs	r3, r2
 8006840:	b29b      	uxth	r3, r3
 8006842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800684a:	b29a      	uxth	r2, r3
 800684c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800684e:	801a      	strh	r2, [r3, #0]
 8006850:	e04a      	b.n	80068e8 <USB_EPStartXfer+0x52c>
 8006852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10a      	bne.n	8006870 <USB_EPStartXfer+0x4b4>
 800685a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	b29b      	uxth	r3, r3
 8006860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006868:	b29a      	uxth	r2, r3
 800686a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800686c:	801a      	strh	r2, [r3, #0]
 800686e:	e03b      	b.n	80068e8 <USB_EPStartXfer+0x52c>
 8006870:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006874:	085b      	lsrs	r3, r3, #1
 8006876:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800687a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	2b00      	cmp	r3, #0
 8006884:	d004      	beq.n	8006890 <USB_EPStartXfer+0x4d4>
 8006886:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800688a:	3301      	adds	r3, #1
 800688c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006892:	881b      	ldrh	r3, [r3, #0]
 8006894:	b29a      	uxth	r2, r3
 8006896:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800689a:	b29b      	uxth	r3, r3
 800689c:	029b      	lsls	r3, r3, #10
 800689e:	b29b      	uxth	r3, r3
 80068a0:	4313      	orrs	r3, r2
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068a6:	801a      	strh	r2, [r3, #0]
 80068a8:	e01e      	b.n	80068e8 <USB_EPStartXfer+0x52c>
 80068aa:	463b      	mov	r3, r7
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	785b      	ldrb	r3, [r3, #1]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d119      	bne.n	80068e8 <USB_EPStartXfer+0x52c>
 80068b4:	1d3b      	adds	r3, r7, #4
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	653b      	str	r3, [r7, #80]	; 0x50
 80068ba:	1d3b      	adds	r3, r7, #4
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	461a      	mov	r2, r3
 80068c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068c8:	4413      	add	r3, r2
 80068ca:	653b      	str	r3, [r7, #80]	; 0x50
 80068cc:	463b      	mov	r3, r7
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	011a      	lsls	r2, r3, #4
 80068d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068d6:	4413      	add	r3, r2
 80068d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80068e8:	463b      	mov	r3, r7
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	891b      	ldrh	r3, [r3, #8]
 80068ee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068f2:	463b      	mov	r3, r7
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	6959      	ldr	r1, [r3, #20]
 80068f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006902:	1d38      	adds	r0, r7, #4
 8006904:	6800      	ldr	r0, [r0, #0]
 8006906:	f000 ffe3 	bl	80078d0 <USB_WritePMA>
            ep->xfer_buff += len;
 800690a:	463b      	mov	r3, r7
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	695a      	ldr	r2, [r3, #20]
 8006910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006914:	441a      	add	r2, r3
 8006916:	463b      	mov	r3, r7
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800691c:	463b      	mov	r3, r7
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6a1a      	ldr	r2, [r3, #32]
 8006922:	463b      	mov	r3, r7
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	429a      	cmp	r2, r3
 800692a:	d909      	bls.n	8006940 <USB_EPStartXfer+0x584>
            {
              ep->xfer_len_db -= len;
 800692c:	463b      	mov	r3, r7
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	6a1a      	ldr	r2, [r3, #32]
 8006932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006936:	1ad2      	subs	r2, r2, r3
 8006938:	463b      	mov	r3, r7
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	621a      	str	r2, [r3, #32]
 800693e:	e008      	b.n	8006952 <USB_EPStartXfer+0x596>
            }
            else
            {
              len = ep->xfer_len_db;
 8006940:	463b      	mov	r3, r7
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800694a:	463b      	mov	r3, r7
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2200      	movs	r2, #0
 8006950:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006952:	1d3b      	adds	r3, r7, #4
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	643b      	str	r3, [r7, #64]	; 0x40
 8006958:	463b      	mov	r3, r7
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	785b      	ldrb	r3, [r3, #1]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d16e      	bne.n	8006a40 <USB_EPStartXfer+0x684>
 8006962:	1d3b      	adds	r3, r7, #4
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	63bb      	str	r3, [r7, #56]	; 0x38
 8006968:	1d3b      	adds	r3, r7, #4
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006970:	b29b      	uxth	r3, r3
 8006972:	461a      	mov	r2, r3
 8006974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006976:	4413      	add	r3, r2
 8006978:	63bb      	str	r3, [r7, #56]	; 0x38
 800697a:	463b      	mov	r3, r7
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	011a      	lsls	r2, r3, #4
 8006982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006984:	4413      	add	r3, r2
 8006986:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800698a:	637b      	str	r3, [r7, #52]	; 0x34
 800698c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800698e:	881b      	ldrh	r3, [r3, #0]
 8006990:	b29b      	uxth	r3, r3
 8006992:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006996:	b29a      	uxth	r2, r3
 8006998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800699a:	801a      	strh	r2, [r3, #0]
 800699c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a0:	2b3e      	cmp	r3, #62	; 0x3e
 80069a2:	d921      	bls.n	80069e8 <USB_EPStartXfer+0x62c>
 80069a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a8:	095b      	lsrs	r3, r3, #5
 80069aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80069ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069b2:	f003 031f 	and.w	r3, r3, #31
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d104      	bne.n	80069c4 <USB_EPStartXfer+0x608>
 80069ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069be:	3b01      	subs	r3, #1
 80069c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80069c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c6:	881b      	ldrh	r3, [r3, #0]
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	029b      	lsls	r3, r3, #10
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	4313      	orrs	r3, r2
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e4:	801a      	strh	r2, [r3, #0]
 80069e6:	e047      	b.n	8006a78 <USB_EPStartXfer+0x6bc>
 80069e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10a      	bne.n	8006a06 <USB_EPStartXfer+0x64a>
 80069f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f2:	881b      	ldrh	r3, [r3, #0]
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a02:	801a      	strh	r2, [r3, #0]
 8006a04:	e038      	b.n	8006a78 <USB_EPStartXfer+0x6bc>
 8006a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a0a:	085b      	lsrs	r3, r3, #1
 8006a0c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d004      	beq.n	8006a26 <USB_EPStartXfer+0x66a>
 8006a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a20:	3301      	adds	r3, #1
 8006a22:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	029b      	lsls	r3, r3, #10
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	4313      	orrs	r3, r2
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a3c:	801a      	strh	r2, [r3, #0]
 8006a3e:	e01b      	b.n	8006a78 <USB_EPStartXfer+0x6bc>
 8006a40:	463b      	mov	r3, r7
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	785b      	ldrb	r3, [r3, #1]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d116      	bne.n	8006a78 <USB_EPStartXfer+0x6bc>
 8006a4a:	1d3b      	adds	r3, r7, #4
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	461a      	mov	r2, r3
 8006a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a58:	4413      	add	r3, r2
 8006a5a:	643b      	str	r3, [r7, #64]	; 0x40
 8006a5c:	463b      	mov	r3, r7
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	011a      	lsls	r2, r3, #4
 8006a64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a66:	4413      	add	r3, r2
 8006a68:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a76:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006a78:	463b      	mov	r3, r7
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	895b      	ldrh	r3, [r3, #10]
 8006a7e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a82:	463b      	mov	r3, r7
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	6959      	ldr	r1, [r3, #20]
 8006a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006a92:	1d38      	adds	r0, r7, #4
 8006a94:	6800      	ldr	r0, [r0, #0]
 8006a96:	f000 ff1b 	bl	80078d0 <USB_WritePMA>
 8006a9a:	e1b8      	b.n	8006e0e <USB_EPStartXfer+0xa52>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006a9c:	463b      	mov	r3, r7
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006aa6:	1d3b      	adds	r3, r7, #4
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	463b      	mov	r3, r7
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006ac4:	1d3b      	adds	r3, r7, #4
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	463b      	mov	r3, r7
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	441a      	add	r2, r3
 8006ad2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006ad6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ada:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006aea:	1d3b      	adds	r3, r7, #4
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006af0:	1d3b      	adds	r3, r7, #4
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	461a      	mov	r2, r3
 8006afc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006afe:	4413      	add	r3, r2
 8006b00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b02:	463b      	mov	r3, r7
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	011a      	lsls	r2, r3, #4
 8006b0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b12:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b1c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006b1e:	463b      	mov	r3, r7
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	891b      	ldrh	r3, [r3, #8]
 8006b24:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b28:	463b      	mov	r3, r7
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6959      	ldr	r1, [r3, #20]
 8006b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006b38:	1d38      	adds	r0, r7, #4
 8006b3a:	6800      	ldr	r0, [r0, #0]
 8006b3c:	f000 fec8 	bl	80078d0 <USB_WritePMA>
 8006b40:	e165      	b.n	8006e0e <USB_EPStartXfer+0xa52>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006b42:	463b      	mov	r3, r7
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	6a1a      	ldr	r2, [r3, #32]
 8006b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b4c:	1ad2      	subs	r2, r2, r3
 8006b4e:	463b      	mov	r3, r7
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006b54:	1d3b      	adds	r3, r7, #4
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	463b      	mov	r3, r7
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4413      	add	r3, r2
 8006b62:	881b      	ldrh	r3, [r3, #0]
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f000 80a5 	beq.w	8006cba <USB_EPStartXfer+0x8fe>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b70:	1d3b      	adds	r3, r7, #4
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	673b      	str	r3, [r7, #112]	; 0x70
 8006b76:	463b      	mov	r3, r7
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	785b      	ldrb	r3, [r3, #1]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d16e      	bne.n	8006c5e <USB_EPStartXfer+0x8a2>
 8006b80:	1d3b      	adds	r3, r7, #4
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b86:	1d3b      	adds	r3, r7, #4
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	461a      	mov	r2, r3
 8006b92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b94:	4413      	add	r3, r2
 8006b96:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b98:	463b      	mov	r3, r7
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	011a      	lsls	r2, r3, #4
 8006ba0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ba8:	667b      	str	r3, [r7, #100]	; 0x64
 8006baa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bac:	881b      	ldrh	r3, [r3, #0]
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bb8:	801a      	strh	r2, [r3, #0]
 8006bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bbe:	2b3e      	cmp	r3, #62	; 0x3e
 8006bc0:	d921      	bls.n	8006c06 <USB_EPStartXfer+0x84a>
 8006bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bc6:	095b      	lsrs	r3, r3, #5
 8006bc8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bd0:	f003 031f 	and.w	r3, r3, #31
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d104      	bne.n	8006be2 <USB_EPStartXfer+0x826>
 8006bd8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006be2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006be4:	881b      	ldrh	r3, [r3, #0]
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	029b      	lsls	r3, r3, #10
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c02:	801a      	strh	r2, [r3, #0]
 8006c04:	e047      	b.n	8006c96 <USB_EPStartXfer+0x8da>
 8006c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10a      	bne.n	8006c24 <USB_EPStartXfer+0x868>
 8006c0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c10:	881b      	ldrh	r3, [r3, #0]
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c20:	801a      	strh	r2, [r3, #0]
 8006c22:	e038      	b.n	8006c96 <USB_EPStartXfer+0x8da>
 8006c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c28:	085b      	lsrs	r3, r3, #1
 8006c2a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d004      	beq.n	8006c44 <USB_EPStartXfer+0x888>
 8006c3a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c3e:	3301      	adds	r3, #1
 8006c40:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c46:	881b      	ldrh	r3, [r3, #0]
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	029b      	lsls	r3, r3, #10
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	4313      	orrs	r3, r2
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c5a:	801a      	strh	r2, [r3, #0]
 8006c5c:	e01b      	b.n	8006c96 <USB_EPStartXfer+0x8da>
 8006c5e:	463b      	mov	r3, r7
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	785b      	ldrb	r3, [r3, #1]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d116      	bne.n	8006c96 <USB_EPStartXfer+0x8da>
 8006c68:	1d3b      	adds	r3, r7, #4
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	461a      	mov	r2, r3
 8006c74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c76:	4413      	add	r3, r2
 8006c78:	673b      	str	r3, [r7, #112]	; 0x70
 8006c7a:	463b      	mov	r3, r7
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	011a      	lsls	r2, r3, #4
 8006c82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c84:	4413      	add	r3, r2
 8006c86:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c94:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006c96:	463b      	mov	r3, r7
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	895b      	ldrh	r3, [r3, #10]
 8006c9c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ca0:	463b      	mov	r3, r7
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6959      	ldr	r1, [r3, #20]
 8006ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006cb0:	1d38      	adds	r0, r7, #4
 8006cb2:	6800      	ldr	r0, [r0, #0]
 8006cb4:	f000 fe0c 	bl	80078d0 <USB_WritePMA>
 8006cb8:	e0a9      	b.n	8006e0e <USB_EPStartXfer+0xa52>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006cba:	463b      	mov	r3, r7
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	785b      	ldrb	r3, [r3, #1]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d16e      	bne.n	8006da2 <USB_EPStartXfer+0x9e6>
 8006cc4:	1d3b      	adds	r3, r7, #4
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006cca:	1d3b      	adds	r3, r7, #4
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cd8:	4413      	add	r3, r2
 8006cda:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006cdc:	463b      	mov	r3, r7
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	011a      	lsls	r2, r3, #4
 8006ce4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006cec:	67bb      	str	r3, [r7, #120]	; 0x78
 8006cee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cf0:	881b      	ldrh	r3, [r3, #0]
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cfc:	801a      	strh	r2, [r3, #0]
 8006cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d02:	2b3e      	cmp	r3, #62	; 0x3e
 8006d04:	d921      	bls.n	8006d4a <USB_EPStartXfer+0x98e>
 8006d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d0a:	095b      	lsrs	r3, r3, #5
 8006d0c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d14:	f003 031f 	and.w	r3, r3, #31
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d104      	bne.n	8006d26 <USB_EPStartXfer+0x96a>
 8006d1c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d20:	3b01      	subs	r3, #1
 8006d22:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d28:	881b      	ldrh	r3, [r3, #0]
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	029b      	lsls	r3, r3, #10
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	4313      	orrs	r3, r2
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d46:	801a      	strh	r2, [r3, #0]
 8006d48:	e050      	b.n	8006dec <USB_EPStartXfer+0xa30>
 8006d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10a      	bne.n	8006d68 <USB_EPStartXfer+0x9ac>
 8006d52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d54:	881b      	ldrh	r3, [r3, #0]
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d64:	801a      	strh	r2, [r3, #0]
 8006d66:	e041      	b.n	8006dec <USB_EPStartXfer+0xa30>
 8006d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d6c:	085b      	lsrs	r3, r3, #1
 8006d6e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d76:	f003 0301 	and.w	r3, r3, #1
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d004      	beq.n	8006d88 <USB_EPStartXfer+0x9cc>
 8006d7e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d82:	3301      	adds	r3, #1
 8006d84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d8a:	881b      	ldrh	r3, [r3, #0]
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	029b      	lsls	r3, r3, #10
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d9e:	801a      	strh	r2, [r3, #0]
 8006da0:	e024      	b.n	8006dec <USB_EPStartXfer+0xa30>
 8006da2:	463b      	mov	r3, r7
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	785b      	ldrb	r3, [r3, #1]
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d11f      	bne.n	8006dec <USB_EPStartXfer+0xa30>
 8006dac:	1d3b      	adds	r3, r7, #4
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006db4:	1d3b      	adds	r3, r7, #4
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006dca:	463b      	mov	r3, r7
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	011a      	lsls	r2, r3, #4
 8006dd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ddc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006dea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006dec:	463b      	mov	r3, r7
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	891b      	ldrh	r3, [r3, #8]
 8006df2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006df6:	463b      	mov	r3, r7
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	6959      	ldr	r1, [r3, #20]
 8006dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006e06:	1d38      	adds	r0, r7, #4
 8006e08:	6800      	ldr	r0, [r0, #0]
 8006e0a:	f000 fd61 	bl	80078d0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006e0e:	1d3b      	adds	r3, r7, #4
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	463b      	mov	r3, r7
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4413      	add	r3, r2
 8006e1c:	881b      	ldrh	r3, [r3, #0]
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e28:	817b      	strh	r3, [r7, #10]
 8006e2a:	897b      	ldrh	r3, [r7, #10]
 8006e2c:	f083 0310 	eor.w	r3, r3, #16
 8006e30:	817b      	strh	r3, [r7, #10]
 8006e32:	897b      	ldrh	r3, [r7, #10]
 8006e34:	f083 0320 	eor.w	r3, r3, #32
 8006e38:	817b      	strh	r3, [r7, #10]
 8006e3a:	1d3b      	adds	r3, r7, #4
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	463b      	mov	r3, r7
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	441a      	add	r2, r3
 8006e48:	897b      	ldrh	r3, [r7, #10]
 8006e4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	8013      	strh	r3, [r2, #0]
 8006e5e:	e3f3      	b.n	8007648 <USB_EPStartXfer+0x128c>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006e60:	463b      	mov	r3, r7
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	7b1b      	ldrb	r3, [r3, #12]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f040 809c 	bne.w	8006fa4 <USB_EPStartXfer+0xbe8>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006e6c:	463b      	mov	r3, r7
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	699a      	ldr	r2, [r3, #24]
 8006e72:	463b      	mov	r3, r7
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d90e      	bls.n	8006e9a <USB_EPStartXfer+0xade>
      {
        len = ep->maxpacket;
 8006e7c:	463b      	mov	r3, r7
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006e86:	463b      	mov	r3, r7
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	699a      	ldr	r2, [r3, #24]
 8006e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e90:	1ad2      	subs	r2, r2, r3
 8006e92:	463b      	mov	r3, r7
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	619a      	str	r2, [r3, #24]
 8006e98:	e008      	b.n	8006eac <USB_EPStartXfer+0xaf0>
      }
      else
      {
        len = ep->xfer_len;
 8006e9a:	463b      	mov	r3, r7
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006ea4:	463b      	mov	r3, r7
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006eac:	1d3b      	adds	r3, r7, #4
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006eb4:	1d3b      	adds	r3, r7, #4
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006eca:	463b      	mov	r3, r7
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	011a      	lsls	r2, r3, #4
 8006ed2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006edc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006ee0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ee4:	881b      	ldrh	r3, [r3, #0]
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ef2:	801a      	strh	r2, [r3, #0]
 8006ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ef8:	2b3e      	cmp	r3, #62	; 0x3e
 8006efa:	d923      	bls.n	8006f44 <USB_EPStartXfer+0xb88>
 8006efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f00:	095b      	lsrs	r3, r3, #5
 8006f02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f0a:	f003 031f 	and.w	r3, r3, #31
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d104      	bne.n	8006f1c <USB_EPStartXfer+0xb60>
 8006f12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f16:	3b01      	subs	r3, #1
 8006f18:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f20:	881b      	ldrh	r3, [r3, #0]
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	029b      	lsls	r3, r3, #10
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f40:	801a      	strh	r2, [r3, #0]
 8006f42:	e353      	b.n	80075ec <USB_EPStartXfer+0x1230>
 8006f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10c      	bne.n	8006f66 <USB_EPStartXfer+0xbaa>
 8006f4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f62:	801a      	strh	r2, [r3, #0]
 8006f64:	e342      	b.n	80075ec <USB_EPStartXfer+0x1230>
 8006f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f6a:	085b      	lsrs	r3, r3, #1
 8006f6c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f74:	f003 0301 	and.w	r3, r3, #1
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d004      	beq.n	8006f86 <USB_EPStartXfer+0xbca>
 8006f7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f80:	3301      	adds	r3, #1
 8006f82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f8a:	881b      	ldrh	r3, [r3, #0]
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	029b      	lsls	r3, r3, #10
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fa0:	801a      	strh	r2, [r3, #0]
 8006fa2:	e323      	b.n	80075ec <USB_EPStartXfer+0x1230>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006fa4:	463b      	mov	r3, r7
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	78db      	ldrb	r3, [r3, #3]
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	f040 81a9 	bne.w	8007302 <USB_EPStartXfer+0xf46>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006fb0:	463b      	mov	r3, r7
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	785b      	ldrb	r3, [r3, #1]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f040 8082 	bne.w	80070c0 <USB_EPStartXfer+0xd04>
 8006fbc:	1d3b      	adds	r3, r7, #4
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006fc4:	1d3b      	adds	r3, r7, #4
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	461a      	mov	r2, r3
 8006fd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006fda:	463b      	mov	r3, r7
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	011a      	lsls	r2, r3, #4
 8006fe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006fec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006ff0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ff4:	881b      	ldrh	r3, [r3, #0]
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007002:	801a      	strh	r2, [r3, #0]
 8007004:	463b      	mov	r3, r7
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	2b3e      	cmp	r3, #62	; 0x3e
 800700c:	d925      	bls.n	800705a <USB_EPStartXfer+0xc9e>
 800700e:	463b      	mov	r3, r7
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	095b      	lsrs	r3, r3, #5
 8007016:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800701a:	463b      	mov	r3, r7
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	f003 031f 	and.w	r3, r3, #31
 8007024:	2b00      	cmp	r3, #0
 8007026:	d104      	bne.n	8007032 <USB_EPStartXfer+0xc76>
 8007028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800702c:	3b01      	subs	r3, #1
 800702e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007032:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007036:	881b      	ldrh	r3, [r3, #0]
 8007038:	b29a      	uxth	r2, r3
 800703a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800703e:	b29b      	uxth	r3, r3
 8007040:	029b      	lsls	r3, r3, #10
 8007042:	b29b      	uxth	r3, r3
 8007044:	4313      	orrs	r3, r2
 8007046:	b29b      	uxth	r3, r3
 8007048:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800704c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007050:	b29a      	uxth	r2, r3
 8007052:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007056:	801a      	strh	r2, [r3, #0]
 8007058:	e058      	b.n	800710c <USB_EPStartXfer+0xd50>
 800705a:	463b      	mov	r3, r7
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d10c      	bne.n	800707e <USB_EPStartXfer+0xcc2>
 8007064:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007068:	881b      	ldrh	r3, [r3, #0]
 800706a:	b29b      	uxth	r3, r3
 800706c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007070:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007074:	b29a      	uxth	r2, r3
 8007076:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800707a:	801a      	strh	r2, [r3, #0]
 800707c:	e046      	b.n	800710c <USB_EPStartXfer+0xd50>
 800707e:	463b      	mov	r3, r7
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	085b      	lsrs	r3, r3, #1
 8007086:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800708a:	463b      	mov	r3, r7
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	f003 0301 	and.w	r3, r3, #1
 8007094:	2b00      	cmp	r3, #0
 8007096:	d004      	beq.n	80070a2 <USB_EPStartXfer+0xce6>
 8007098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800709c:	3301      	adds	r3, #1
 800709e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070a6:	881b      	ldrh	r3, [r3, #0]
 80070a8:	b29a      	uxth	r2, r3
 80070aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	029b      	lsls	r3, r3, #10
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	4313      	orrs	r3, r2
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070bc:	801a      	strh	r2, [r3, #0]
 80070be:	e025      	b.n	800710c <USB_EPStartXfer+0xd50>
 80070c0:	463b      	mov	r3, r7
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	785b      	ldrb	r3, [r3, #1]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d120      	bne.n	800710c <USB_EPStartXfer+0xd50>
 80070ca:	1d3b      	adds	r3, r7, #4
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070d2:	1d3b      	adds	r3, r7, #4
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070da:	b29b      	uxth	r3, r3
 80070dc:	461a      	mov	r2, r3
 80070de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80070e2:	4413      	add	r3, r2
 80070e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070e8:	463b      	mov	r3, r7
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	011a      	lsls	r2, r3, #4
 80070f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80070f4:	4413      	add	r3, r2
 80070f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070fe:	463b      	mov	r3, r7
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	b29a      	uxth	r2, r3
 8007106:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800710a:	801a      	strh	r2, [r3, #0]
 800710c:	1d3b      	adds	r3, r7, #4
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007114:	463b      	mov	r3, r7
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	785b      	ldrb	r3, [r3, #1]
 800711a:	2b00      	cmp	r3, #0
 800711c:	f040 8082 	bne.w	8007224 <USB_EPStartXfer+0xe68>
 8007120:	1d3b      	adds	r3, r7, #4
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007128:	1d3b      	adds	r3, r7, #4
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007130:	b29b      	uxth	r3, r3
 8007132:	461a      	mov	r2, r3
 8007134:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007138:	4413      	add	r3, r2
 800713a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800713e:	463b      	mov	r3, r7
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	011a      	lsls	r2, r3, #4
 8007146:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800714a:	4413      	add	r3, r2
 800714c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007150:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007154:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007158:	881b      	ldrh	r3, [r3, #0]
 800715a:	b29b      	uxth	r3, r3
 800715c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007160:	b29a      	uxth	r2, r3
 8007162:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007166:	801a      	strh	r2, [r3, #0]
 8007168:	463b      	mov	r3, r7
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	2b3e      	cmp	r3, #62	; 0x3e
 8007170:	d925      	bls.n	80071be <USB_EPStartXfer+0xe02>
 8007172:	463b      	mov	r3, r7
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	095b      	lsrs	r3, r3, #5
 800717a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800717e:	463b      	mov	r3, r7
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	f003 031f 	and.w	r3, r3, #31
 8007188:	2b00      	cmp	r3, #0
 800718a:	d104      	bne.n	8007196 <USB_EPStartXfer+0xdda>
 800718c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007190:	3b01      	subs	r3, #1
 8007192:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007196:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800719a:	881b      	ldrh	r3, [r3, #0]
 800719c:	b29a      	uxth	r2, r3
 800719e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	029b      	lsls	r3, r3, #10
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	4313      	orrs	r3, r2
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071ba:	801a      	strh	r2, [r3, #0]
 80071bc:	e054      	b.n	8007268 <USB_EPStartXfer+0xeac>
 80071be:	463b      	mov	r3, r7
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d10c      	bne.n	80071e2 <USB_EPStartXfer+0xe26>
 80071c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071cc:	881b      	ldrh	r3, [r3, #0]
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071d8:	b29a      	uxth	r2, r3
 80071da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071de:	801a      	strh	r2, [r3, #0]
 80071e0:	e042      	b.n	8007268 <USB_EPStartXfer+0xeac>
 80071e2:	463b      	mov	r3, r7
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	085b      	lsrs	r3, r3, #1
 80071ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80071ee:	463b      	mov	r3, r7
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	f003 0301 	and.w	r3, r3, #1
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d004      	beq.n	8007206 <USB_EPStartXfer+0xe4a>
 80071fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007200:	3301      	adds	r3, #1
 8007202:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007206:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800720a:	881b      	ldrh	r3, [r3, #0]
 800720c:	b29a      	uxth	r2, r3
 800720e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007212:	b29b      	uxth	r3, r3
 8007214:	029b      	lsls	r3, r3, #10
 8007216:	b29b      	uxth	r3, r3
 8007218:	4313      	orrs	r3, r2
 800721a:	b29a      	uxth	r2, r3
 800721c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007220:	801a      	strh	r2, [r3, #0]
 8007222:	e021      	b.n	8007268 <USB_EPStartXfer+0xeac>
 8007224:	463b      	mov	r3, r7
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	785b      	ldrb	r3, [r3, #1]
 800722a:	2b01      	cmp	r3, #1
 800722c:	d11c      	bne.n	8007268 <USB_EPStartXfer+0xeac>
 800722e:	1d3b      	adds	r3, r7, #4
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007236:	b29b      	uxth	r3, r3
 8007238:	461a      	mov	r2, r3
 800723a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800723e:	4413      	add	r3, r2
 8007240:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007244:	463b      	mov	r3, r7
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	011a      	lsls	r2, r3, #4
 800724c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007250:	4413      	add	r3, r2
 8007252:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007256:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800725a:	463b      	mov	r3, r7
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	b29a      	uxth	r2, r3
 8007262:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007266:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007268:	463b      	mov	r3, r7
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	69db      	ldr	r3, [r3, #28]
 800726e:	2b00      	cmp	r3, #0
 8007270:	f000 81bc 	beq.w	80075ec <USB_EPStartXfer+0x1230>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007274:	1d3b      	adds	r3, r7, #4
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	463b      	mov	r3, r7
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	4413      	add	r3, r2
 8007282:	881b      	ldrh	r3, [r3, #0]
 8007284:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007288:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800728c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d005      	beq.n	80072a0 <USB_EPStartXfer+0xee4>
 8007294:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800729c:	2b00      	cmp	r3, #0
 800729e:	d10d      	bne.n	80072bc <USB_EPStartXfer+0xf00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80072a0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80072a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f040 819f 	bne.w	80075ec <USB_EPStartXfer+0x1230>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80072ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80072b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	f040 8198 	bne.w	80075ec <USB_EPStartXfer+0x1230>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80072bc:	1d3b      	adds	r3, r7, #4
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	463b      	mov	r3, r7
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4413      	add	r3, r2
 80072ca:	881b      	ldrh	r3, [r3, #0]
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072d6:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80072da:	1d3b      	adds	r3, r7, #4
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	463b      	mov	r3, r7
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	441a      	add	r2, r3
 80072e8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80072ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	8013      	strh	r3, [r2, #0]
 8007300:	e174      	b.n	80075ec <USB_EPStartXfer+0x1230>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007302:	463b      	mov	r3, r7
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	78db      	ldrb	r3, [r3, #3]
 8007308:	2b01      	cmp	r3, #1
 800730a:	f040 816d 	bne.w	80075e8 <USB_EPStartXfer+0x122c>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800730e:	463b      	mov	r3, r7
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	699a      	ldr	r2, [r3, #24]
 8007314:	463b      	mov	r3, r7
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	429a      	cmp	r2, r3
 800731c:	d90e      	bls.n	800733c <USB_EPStartXfer+0xf80>
        {
          len = ep->maxpacket;
 800731e:	463b      	mov	r3, r7
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007328:	463b      	mov	r3, r7
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	699a      	ldr	r2, [r3, #24]
 800732e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007332:	1ad2      	subs	r2, r2, r3
 8007334:	463b      	mov	r3, r7
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	619a      	str	r2, [r3, #24]
 800733a:	e008      	b.n	800734e <USB_EPStartXfer+0xf92>
        }
        else
        {
          len = ep->xfer_len;
 800733c:	463b      	mov	r3, r7
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007346:	463b      	mov	r3, r7
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2200      	movs	r2, #0
 800734c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800734e:	463b      	mov	r3, r7
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	785b      	ldrb	r3, [r3, #1]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d17b      	bne.n	8007450 <USB_EPStartXfer+0x1094>
 8007358:	1d3b      	adds	r3, r7, #4
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007360:	1d3b      	adds	r3, r7, #4
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007368:	b29b      	uxth	r3, r3
 800736a:	461a      	mov	r2, r3
 800736c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007370:	4413      	add	r3, r2
 8007372:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007376:	463b      	mov	r3, r7
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	011a      	lsls	r2, r3, #4
 800737e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007382:	4413      	add	r3, r2
 8007384:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007388:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800738c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007390:	881b      	ldrh	r3, [r3, #0]
 8007392:	b29b      	uxth	r3, r3
 8007394:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007398:	b29a      	uxth	r2, r3
 800739a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800739e:	801a      	strh	r2, [r3, #0]
 80073a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073a4:	2b3e      	cmp	r3, #62	; 0x3e
 80073a6:	d923      	bls.n	80073f0 <USB_EPStartXfer+0x1034>
 80073a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ac:	095b      	lsrs	r3, r3, #5
 80073ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80073b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073b6:	f003 031f 	and.w	r3, r3, #31
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d104      	bne.n	80073c8 <USB_EPStartXfer+0x100c>
 80073be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073c2:	3b01      	subs	r3, #1
 80073c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80073c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073cc:	881b      	ldrh	r3, [r3, #0]
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	029b      	lsls	r3, r3, #10
 80073d8:	b29b      	uxth	r3, r3
 80073da:	4313      	orrs	r3, r2
 80073dc:	b29b      	uxth	r3, r3
 80073de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073ec:	801a      	strh	r2, [r3, #0]
 80073ee:	e054      	b.n	800749a <USB_EPStartXfer+0x10de>
 80073f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10c      	bne.n	8007412 <USB_EPStartXfer+0x1056>
 80073f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073fc:	881b      	ldrh	r3, [r3, #0]
 80073fe:	b29b      	uxth	r3, r3
 8007400:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007404:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007408:	b29a      	uxth	r2, r3
 800740a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800740e:	801a      	strh	r2, [r3, #0]
 8007410:	e043      	b.n	800749a <USB_EPStartXfer+0x10de>
 8007412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007416:	085b      	lsrs	r3, r3, #1
 8007418:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800741c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007420:	f003 0301 	and.w	r3, r3, #1
 8007424:	2b00      	cmp	r3, #0
 8007426:	d004      	beq.n	8007432 <USB_EPStartXfer+0x1076>
 8007428:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800742c:	3301      	adds	r3, #1
 800742e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007432:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007436:	881b      	ldrh	r3, [r3, #0]
 8007438:	b29a      	uxth	r2, r3
 800743a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800743e:	b29b      	uxth	r3, r3
 8007440:	029b      	lsls	r3, r3, #10
 8007442:	b29b      	uxth	r3, r3
 8007444:	4313      	orrs	r3, r2
 8007446:	b29a      	uxth	r2, r3
 8007448:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800744c:	801a      	strh	r2, [r3, #0]
 800744e:	e024      	b.n	800749a <USB_EPStartXfer+0x10de>
 8007450:	463b      	mov	r3, r7
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	785b      	ldrb	r3, [r3, #1]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d11f      	bne.n	800749a <USB_EPStartXfer+0x10de>
 800745a:	1d3b      	adds	r3, r7, #4
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007462:	1d3b      	adds	r3, r7, #4
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800746a:	b29b      	uxth	r3, r3
 800746c:	461a      	mov	r2, r3
 800746e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007472:	4413      	add	r3, r2
 8007474:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007478:	463b      	mov	r3, r7
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	011a      	lsls	r2, r3, #4
 8007480:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007484:	4413      	add	r3, r2
 8007486:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800748a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800748e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007492:	b29a      	uxth	r2, r3
 8007494:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007498:	801a      	strh	r2, [r3, #0]
 800749a:	1d3b      	adds	r3, r7, #4
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074a2:	463b      	mov	r3, r7
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	785b      	ldrb	r3, [r3, #1]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d17b      	bne.n	80075a4 <USB_EPStartXfer+0x11e8>
 80074ac:	1d3b      	adds	r3, r7, #4
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80074b4:	1d3b      	adds	r3, r7, #4
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074bc:	b29b      	uxth	r3, r3
 80074be:	461a      	mov	r2, r3
 80074c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80074c4:	4413      	add	r3, r2
 80074c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80074ca:	463b      	mov	r3, r7
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	011a      	lsls	r2, r3, #4
 80074d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80074d6:	4413      	add	r3, r2
 80074d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80074e4:	881b      	ldrh	r3, [r3, #0]
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80074f2:	801a      	strh	r2, [r3, #0]
 80074f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074f8:	2b3e      	cmp	r3, #62	; 0x3e
 80074fa:	d923      	bls.n	8007544 <USB_EPStartXfer+0x1188>
 80074fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007500:	095b      	lsrs	r3, r3, #5
 8007502:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800750a:	f003 031f 	and.w	r3, r3, #31
 800750e:	2b00      	cmp	r3, #0
 8007510:	d104      	bne.n	800751c <USB_EPStartXfer+0x1160>
 8007512:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007516:	3b01      	subs	r3, #1
 8007518:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800751c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007520:	881b      	ldrh	r3, [r3, #0]
 8007522:	b29a      	uxth	r2, r3
 8007524:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007528:	b29b      	uxth	r3, r3
 800752a:	029b      	lsls	r3, r3, #10
 800752c:	b29b      	uxth	r3, r3
 800752e:	4313      	orrs	r3, r2
 8007530:	b29b      	uxth	r3, r3
 8007532:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007536:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800753a:	b29a      	uxth	r2, r3
 800753c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007540:	801a      	strh	r2, [r3, #0]
 8007542:	e053      	b.n	80075ec <USB_EPStartXfer+0x1230>
 8007544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007548:	2b00      	cmp	r3, #0
 800754a:	d10c      	bne.n	8007566 <USB_EPStartXfer+0x11aa>
 800754c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007550:	881b      	ldrh	r3, [r3, #0]
 8007552:	b29b      	uxth	r3, r3
 8007554:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007558:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800755c:	b29a      	uxth	r2, r3
 800755e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007562:	801a      	strh	r2, [r3, #0]
 8007564:	e042      	b.n	80075ec <USB_EPStartXfer+0x1230>
 8007566:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800756a:	085b      	lsrs	r3, r3, #1
 800756c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007570:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007574:	f003 0301 	and.w	r3, r3, #1
 8007578:	2b00      	cmp	r3, #0
 800757a:	d004      	beq.n	8007586 <USB_EPStartXfer+0x11ca>
 800757c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007580:	3301      	adds	r3, #1
 8007582:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007586:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800758a:	881b      	ldrh	r3, [r3, #0]
 800758c:	b29a      	uxth	r2, r3
 800758e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007592:	b29b      	uxth	r3, r3
 8007594:	029b      	lsls	r3, r3, #10
 8007596:	b29b      	uxth	r3, r3
 8007598:	4313      	orrs	r3, r2
 800759a:	b29a      	uxth	r2, r3
 800759c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80075a0:	801a      	strh	r2, [r3, #0]
 80075a2:	e023      	b.n	80075ec <USB_EPStartXfer+0x1230>
 80075a4:	463b      	mov	r3, r7
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	785b      	ldrb	r3, [r3, #1]
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d11e      	bne.n	80075ec <USB_EPStartXfer+0x1230>
 80075ae:	1d3b      	adds	r3, r7, #4
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	461a      	mov	r2, r3
 80075ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80075be:	4413      	add	r3, r2
 80075c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80075c4:	463b      	mov	r3, r7
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	011a      	lsls	r2, r3, #4
 80075cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80075d0:	4413      	add	r3, r2
 80075d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80075da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075de:	b29a      	uxth	r2, r3
 80075e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80075e4:	801a      	strh	r2, [r3, #0]
 80075e6:	e001      	b.n	80075ec <USB_EPStartXfer+0x1230>
      }
      else
      {
        return HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e02e      	b.n	800764a <USB_EPStartXfer+0x128e>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80075ec:	1d3b      	adds	r3, r7, #4
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	463b      	mov	r3, r7
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4413      	add	r3, r2
 80075fa:	881b      	ldrh	r3, [r3, #0]
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007606:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800760a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800760e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007612:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007616:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800761a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800761e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007622:	1d3b      	adds	r3, r7, #4
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	463b      	mov	r3, r7
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	441a      	add	r2, r3
 8007630:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007634:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007638:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800763c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007644:	b29b      	uxth	r3, r3
 8007646:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	785b      	ldrb	r3, [r3, #1]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d020      	beq.n	80076a8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	4413      	add	r3, r2
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	b29b      	uxth	r3, r3
 8007674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800767c:	81bb      	strh	r3, [r7, #12]
 800767e:	89bb      	ldrh	r3, [r7, #12]
 8007680:	f083 0310 	eor.w	r3, r3, #16
 8007684:	81bb      	strh	r3, [r7, #12]
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	441a      	add	r2, r3
 8007690:	89bb      	ldrh	r3, [r7, #12]
 8007692:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007696:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800769a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800769e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	8013      	strh	r3, [r2, #0]
 80076a6:	e01f      	b.n	80076e8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	4413      	add	r3, r2
 80076b2:	881b      	ldrh	r3, [r3, #0]
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076be:	81fb      	strh	r3, [r7, #14]
 80076c0:	89fb      	ldrh	r3, [r7, #14]
 80076c2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80076c6:	81fb      	strh	r3, [r7, #14]
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	441a      	add	r2, r3
 80076d2:	89fb      	ldrh	r3, [r7, #14]
 80076d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bc80      	pop	{r7}
 80076f2:	4770      	bx	lr

080076f4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b087      	sub	sp, #28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	7b1b      	ldrb	r3, [r3, #12]
 8007702:	2b00      	cmp	r3, #0
 8007704:	f040 809d 	bne.w	8007842 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	785b      	ldrb	r3, [r3, #1]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d04c      	beq.n	80077aa <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	4413      	add	r3, r2
 800771a:	881b      	ldrh	r3, [r3, #0]
 800771c:	823b      	strh	r3, [r7, #16]
 800771e:	8a3b      	ldrh	r3, [r7, #16]
 8007720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007724:	2b00      	cmp	r3, #0
 8007726:	d01b      	beq.n	8007760 <USB_EPClearStall+0x6c>
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4413      	add	r3, r2
 8007732:	881b      	ldrh	r3, [r3, #0]
 8007734:	b29b      	uxth	r3, r3
 8007736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800773a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800773e:	81fb      	strh	r3, [r7, #14]
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	441a      	add	r2, r3
 800774a:	89fb      	ldrh	r3, [r7, #14]
 800774c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007758:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800775c:	b29b      	uxth	r3, r3
 800775e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	78db      	ldrb	r3, [r3, #3]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d06c      	beq.n	8007842 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	4413      	add	r3, r2
 8007772:	881b      	ldrh	r3, [r3, #0]
 8007774:	b29b      	uxth	r3, r3
 8007776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800777a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800777e:	81bb      	strh	r3, [r7, #12]
 8007780:	89bb      	ldrh	r3, [r7, #12]
 8007782:	f083 0320 	eor.w	r3, r3, #32
 8007786:	81bb      	strh	r3, [r7, #12]
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	441a      	add	r2, r3
 8007792:	89bb      	ldrh	r3, [r7, #12]
 8007794:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007798:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800779c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	8013      	strh	r3, [r2, #0]
 80077a8:	e04b      	b.n	8007842 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	4413      	add	r3, r2
 80077b4:	881b      	ldrh	r3, [r3, #0]
 80077b6:	82fb      	strh	r3, [r7, #22]
 80077b8:	8afb      	ldrh	r3, [r7, #22]
 80077ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d01b      	beq.n	80077fa <USB_EPClearStall+0x106>
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	4413      	add	r3, r2
 80077cc:	881b      	ldrh	r3, [r3, #0]
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077d8:	82bb      	strh	r3, [r7, #20]
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	441a      	add	r2, r3
 80077e4:	8abb      	ldrh	r3, [r7, #20]
 80077e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80077f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	4413      	add	r3, r2
 8007804:	881b      	ldrh	r3, [r3, #0]
 8007806:	b29b      	uxth	r3, r3
 8007808:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800780c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007810:	827b      	strh	r3, [r7, #18]
 8007812:	8a7b      	ldrh	r3, [r7, #18]
 8007814:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007818:	827b      	strh	r3, [r7, #18]
 800781a:	8a7b      	ldrh	r3, [r7, #18]
 800781c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007820:	827b      	strh	r3, [r7, #18]
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	441a      	add	r2, r3
 800782c:	8a7b      	ldrh	r3, [r7, #18]
 800782e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800783a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800783e:	b29b      	uxth	r3, r3
 8007840:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	371c      	adds	r7, #28
 8007848:	46bd      	mov	sp, r7
 800784a:	bc80      	pop	{r7}
 800784c:	4770      	bx	lr

0800784e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800784e:	b480      	push	{r7}
 8007850:	b083      	sub	sp, #12
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
 8007856:	460b      	mov	r3, r1
 8007858:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800785a:	78fb      	ldrb	r3, [r7, #3]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d103      	bne.n	8007868 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2280      	movs	r2, #128	; 0x80
 8007864:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	370c      	adds	r7, #12
 800786e:	46bd      	mov	sp, r7
 8007870:	bc80      	pop	{r7}
 8007872:	4770      	bx	lr

08007874 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	bc80      	pop	{r7}
 8007886:	4770      	bx	lr

08007888 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	370c      	adds	r7, #12
 8007896:	46bd      	mov	sp, r7
 8007898:	bc80      	pop	{r7}
 800789a:	4770      	bx	lr

0800789c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80078ae:	68fb      	ldr	r3, [r7, #12]
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3714      	adds	r7, #20
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bc80      	pop	{r7}
 80078b8:	4770      	bx	lr

080078ba <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b083      	sub	sp, #12
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
 80078c2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	370c      	adds	r7, #12
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bc80      	pop	{r7}
 80078ce:	4770      	bx	lr

080078d0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b08b      	sub	sp, #44	; 0x2c
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	4611      	mov	r1, r2
 80078dc:	461a      	mov	r2, r3
 80078de:	460b      	mov	r3, r1
 80078e0:	80fb      	strh	r3, [r7, #6]
 80078e2:	4613      	mov	r3, r2
 80078e4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80078e6:	88bb      	ldrh	r3, [r7, #4]
 80078e8:	3301      	adds	r3, #1
 80078ea:	085b      	lsrs	r3, r3, #1
 80078ec:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80078f6:	88fb      	ldrh	r3, [r7, #6]
 80078f8:	005a      	lsls	r2, r3, #1
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	4413      	add	r3, r2
 80078fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007902:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	627b      	str	r3, [r7, #36]	; 0x24
 8007908:	e01e      	b.n	8007948 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	3301      	adds	r3, #1
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	021b      	lsls	r3, r3, #8
 8007918:	b21a      	sxth	r2, r3
 800791a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800791e:	4313      	orrs	r3, r2
 8007920:	b21b      	sxth	r3, r3
 8007922:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007924:	6a3b      	ldr	r3, [r7, #32]
 8007926:	8a7a      	ldrh	r2, [r7, #18]
 8007928:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800792a:	6a3b      	ldr	r3, [r7, #32]
 800792c:	3302      	adds	r3, #2
 800792e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007930:	6a3b      	ldr	r3, [r7, #32]
 8007932:	3302      	adds	r3, #2
 8007934:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	3301      	adds	r3, #1
 800793a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	3301      	adds	r3, #1
 8007940:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007944:	3b01      	subs	r3, #1
 8007946:	627b      	str	r3, [r7, #36]	; 0x24
 8007948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1dd      	bne.n	800790a <USB_WritePMA+0x3a>
  }
}
 800794e:	bf00      	nop
 8007950:	bf00      	nop
 8007952:	372c      	adds	r7, #44	; 0x2c
 8007954:	46bd      	mov	sp, r7
 8007956:	bc80      	pop	{r7}
 8007958:	4770      	bx	lr

0800795a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800795a:	b480      	push	{r7}
 800795c:	b08b      	sub	sp, #44	; 0x2c
 800795e:	af00      	add	r7, sp, #0
 8007960:	60f8      	str	r0, [r7, #12]
 8007962:	60b9      	str	r1, [r7, #8]
 8007964:	4611      	mov	r1, r2
 8007966:	461a      	mov	r2, r3
 8007968:	460b      	mov	r3, r1
 800796a:	80fb      	strh	r3, [r7, #6]
 800796c:	4613      	mov	r3, r2
 800796e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007970:	88bb      	ldrh	r3, [r7, #4]
 8007972:	085b      	lsrs	r3, r3, #1
 8007974:	b29b      	uxth	r3, r3
 8007976:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007980:	88fb      	ldrh	r3, [r7, #6]
 8007982:	005a      	lsls	r2, r3, #1
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	4413      	add	r3, r2
 8007988:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800798c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	627b      	str	r3, [r7, #36]	; 0x24
 8007992:	e01b      	b.n	80079cc <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007994:	6a3b      	ldr	r3, [r7, #32]
 8007996:	881b      	ldrh	r3, [r3, #0]
 8007998:	b29b      	uxth	r3, r3
 800799a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800799c:	6a3b      	ldr	r3, [r7, #32]
 800799e:	3302      	adds	r3, #2
 80079a0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	b2da      	uxtb	r2, r3
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	3301      	adds	r3, #1
 80079ae:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	0a1b      	lsrs	r3, r3, #8
 80079b4:	b2da      	uxtb	r2, r3
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	3301      	adds	r3, #1
 80079be:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80079c0:	6a3b      	ldr	r3, [r7, #32]
 80079c2:	3302      	adds	r3, #2
 80079c4:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80079c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c8:	3b01      	subs	r3, #1
 80079ca:	627b      	str	r3, [r7, #36]	; 0x24
 80079cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1e0      	bne.n	8007994 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80079d2:	88bb      	ldrh	r3, [r7, #4]
 80079d4:	f003 0301 	and.w	r3, r3, #1
 80079d8:	b29b      	uxth	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d007      	beq.n	80079ee <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	881b      	ldrh	r3, [r3, #0]
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	b2da      	uxtb	r2, r3
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	701a      	strb	r2, [r3, #0]
  }
}
 80079ee:	bf00      	nop
 80079f0:	372c      	adds	r7, #44	; 0x2c
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bc80      	pop	{r7}
 80079f6:	4770      	bx	lr

080079f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	460b      	mov	r3, r1
 8007a02:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007a04:	2300      	movs	r3, #0
 8007a06:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	7c1b      	ldrb	r3, [r3, #16]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d115      	bne.n	8007a3c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007a10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a14:	2202      	movs	r2, #2
 8007a16:	2181      	movs	r1, #129	; 0x81
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f001 fe30 	bl	800967e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007a24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a28:	2202      	movs	r2, #2
 8007a2a:	2101      	movs	r1, #1
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f001 fe26 	bl	800967e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2201      	movs	r2, #1
 8007a36:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007a3a:	e012      	b.n	8007a62 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007a3c:	2340      	movs	r3, #64	; 0x40
 8007a3e:	2202      	movs	r2, #2
 8007a40:	2181      	movs	r1, #129	; 0x81
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f001 fe1b 	bl	800967e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007a4e:	2340      	movs	r3, #64	; 0x40
 8007a50:	2202      	movs	r2, #2
 8007a52:	2101      	movs	r1, #1
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f001 fe12 	bl	800967e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007a62:	2308      	movs	r3, #8
 8007a64:	2203      	movs	r2, #3
 8007a66:	2182      	movs	r1, #130	; 0x82
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f001 fe08 	bl	800967e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007a74:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007a78:	f001 ff28 	bl	80098cc <USBD_static_malloc>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d102      	bne.n	8007a94 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	73fb      	strb	r3, [r7, #15]
 8007a92:	e026      	b.n	8007ae2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a9a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	7c1b      	ldrb	r3, [r3, #16]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d109      	bne.n	8007ad2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ac4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ac8:	2101      	movs	r1, #1
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f001 fec7 	bl	800985e <USBD_LL_PrepareReceive>
 8007ad0:	e007      	b.n	8007ae2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ad8:	2340      	movs	r3, #64	; 0x40
 8007ada:	2101      	movs	r1, #1
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f001 febe 	bl	800985e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3710      	adds	r7, #16
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	460b      	mov	r3, r1
 8007af6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007af8:	2300      	movs	r3, #0
 8007afa:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007afc:	2181      	movs	r1, #129	; 0x81
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f001 fde3 	bl	80096ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007b0a:	2101      	movs	r1, #1
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f001 fddc 	bl	80096ca <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007b1a:	2182      	movs	r1, #130	; 0x82
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f001 fdd4 	bl	80096ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00e      	beq.n	8007b50 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b42:	4618      	mov	r0, r3
 8007b44:	f001 fece 	bl	80098e4 <USBD_static_free>
    pdev->pClassData = NULL;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b086      	sub	sp, #24
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
 8007b62:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b6a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007b70:	2300      	movs	r3, #0
 8007b72:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007b74:	2300      	movs	r3, #0
 8007b76:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d039      	beq.n	8007bf8 <USBD_CDC_Setup+0x9e>
 8007b84:	2b20      	cmp	r3, #32
 8007b86:	d17f      	bne.n	8007c88 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	88db      	ldrh	r3, [r3, #6]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d029      	beq.n	8007be4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	b25b      	sxtb	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	da11      	bge.n	8007bbe <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	683a      	ldr	r2, [r7, #0]
 8007ba4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007ba6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ba8:	683a      	ldr	r2, [r7, #0]
 8007baa:	88d2      	ldrh	r2, [r2, #6]
 8007bac:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007bae:	6939      	ldr	r1, [r7, #16]
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	88db      	ldrh	r3, [r3, #6]
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f001 f9d9 	bl	8008f6e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007bbc:	e06b      	b.n	8007c96 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	785a      	ldrb	r2, [r3, #1]
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	88db      	ldrh	r3, [r3, #6]
 8007bcc:	b2da      	uxtb	r2, r3
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007bd4:	6939      	ldr	r1, [r7, #16]
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	88db      	ldrh	r3, [r3, #6]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f001 f9f4 	bl	8008fca <USBD_CtlPrepareRx>
      break;
 8007be2:	e058      	b.n	8007c96 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	683a      	ldr	r2, [r7, #0]
 8007bee:	7850      	ldrb	r0, [r2, #1]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	6839      	ldr	r1, [r7, #0]
 8007bf4:	4798      	blx	r3
      break;
 8007bf6:	e04e      	b.n	8007c96 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	785b      	ldrb	r3, [r3, #1]
 8007bfc:	2b0b      	cmp	r3, #11
 8007bfe:	d02e      	beq.n	8007c5e <USBD_CDC_Setup+0x104>
 8007c00:	2b0b      	cmp	r3, #11
 8007c02:	dc38      	bgt.n	8007c76 <USBD_CDC_Setup+0x11c>
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d002      	beq.n	8007c0e <USBD_CDC_Setup+0xb4>
 8007c08:	2b0a      	cmp	r3, #10
 8007c0a:	d014      	beq.n	8007c36 <USBD_CDC_Setup+0xdc>
 8007c0c:	e033      	b.n	8007c76 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c14:	2b03      	cmp	r3, #3
 8007c16:	d107      	bne.n	8007c28 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007c18:	f107 030c 	add.w	r3, r7, #12
 8007c1c:	2202      	movs	r2, #2
 8007c1e:	4619      	mov	r1, r3
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f001 f9a4 	bl	8008f6e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c26:	e02e      	b.n	8007c86 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007c28:	6839      	ldr	r1, [r7, #0]
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f001 f935 	bl	8008e9a <USBD_CtlError>
            ret = USBD_FAIL;
 8007c30:	2302      	movs	r3, #2
 8007c32:	75fb      	strb	r3, [r7, #23]
          break;
 8007c34:	e027      	b.n	8007c86 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c3c:	2b03      	cmp	r3, #3
 8007c3e:	d107      	bne.n	8007c50 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007c40:	f107 030f 	add.w	r3, r7, #15
 8007c44:	2201      	movs	r2, #1
 8007c46:	4619      	mov	r1, r3
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f001 f990 	bl	8008f6e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c4e:	e01a      	b.n	8007c86 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007c50:	6839      	ldr	r1, [r7, #0]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f001 f921 	bl	8008e9a <USBD_CtlError>
            ret = USBD_FAIL;
 8007c58:	2302      	movs	r3, #2
 8007c5a:	75fb      	strb	r3, [r7, #23]
          break;
 8007c5c:	e013      	b.n	8007c86 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c64:	2b03      	cmp	r3, #3
 8007c66:	d00d      	beq.n	8007c84 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007c68:	6839      	ldr	r1, [r7, #0]
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f001 f915 	bl	8008e9a <USBD_CtlError>
            ret = USBD_FAIL;
 8007c70:	2302      	movs	r3, #2
 8007c72:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007c74:	e006      	b.n	8007c84 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007c76:	6839      	ldr	r1, [r7, #0]
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f001 f90e 	bl	8008e9a <USBD_CtlError>
          ret = USBD_FAIL;
 8007c7e:	2302      	movs	r3, #2
 8007c80:	75fb      	strb	r3, [r7, #23]
          break;
 8007c82:	e000      	b.n	8007c86 <USBD_CDC_Setup+0x12c>
          break;
 8007c84:	bf00      	nop
      }
      break;
 8007c86:	e006      	b.n	8007c96 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f001 f905 	bl	8008e9a <USBD_CtlError>
      ret = USBD_FAIL;
 8007c90:	2302      	movs	r3, #2
 8007c92:	75fb      	strb	r3, [r7, #23]
      break;
 8007c94:	bf00      	nop
  }

  return ret;
 8007c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3718      	adds	r7, #24
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	460b      	mov	r3, r1
 8007caa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cb2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cba:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d03a      	beq.n	8007d3c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007cc6:	78fa      	ldrb	r2, [r7, #3]
 8007cc8:	6879      	ldr	r1, [r7, #4]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	4413      	add	r3, r2
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	440b      	add	r3, r1
 8007cd4:	331c      	adds	r3, #28
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d029      	beq.n	8007d30 <USBD_CDC_DataIn+0x90>
 8007cdc:	78fa      	ldrb	r2, [r7, #3]
 8007cde:	6879      	ldr	r1, [r7, #4]
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	4413      	add	r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	440b      	add	r3, r1
 8007cea:	331c      	adds	r3, #28
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	78f9      	ldrb	r1, [r7, #3]
 8007cf0:	68b8      	ldr	r0, [r7, #8]
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	440b      	add	r3, r1
 8007cf8:	00db      	lsls	r3, r3, #3
 8007cfa:	4403      	add	r3, r0
 8007cfc:	3320      	adds	r3, #32
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	fbb2 f1f3 	udiv	r1, r2, r3
 8007d04:	fb03 f301 	mul.w	r3, r3, r1
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d110      	bne.n	8007d30 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007d0e:	78fa      	ldrb	r2, [r7, #3]
 8007d10:	6879      	ldr	r1, [r7, #4]
 8007d12:	4613      	mov	r3, r2
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	4413      	add	r3, r2
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	440b      	add	r3, r1
 8007d1c:	331c      	adds	r3, #28
 8007d1e:	2200      	movs	r2, #0
 8007d20:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007d22:	78f9      	ldrb	r1, [r7, #3]
 8007d24:	2300      	movs	r3, #0
 8007d26:	2200      	movs	r2, #0
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f001 fd75 	bl	8009818 <USBD_LL_Transmit>
 8007d2e:	e003      	b.n	8007d38 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	e000      	b.n	8007d3e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007d3c:	2302      	movs	r3, #2
  }
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b084      	sub	sp, #16
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
 8007d4e:	460b      	mov	r3, r1
 8007d50:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d58:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007d5a:	78fb      	ldrb	r3, [r7, #3]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f001 fda0 	bl	80098a4 <USBD_LL_GetRxDataSize>
 8007d64:	4602      	mov	r2, r0
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00d      	beq.n	8007d92 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007d8a:	4611      	mov	r1, r2
 8007d8c:	4798      	blx	r3

    return USBD_OK;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	e000      	b.n	8007d94 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007d92:	2302      	movs	r3, #2
  }
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007daa:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d015      	beq.n	8007de2 <USBD_CDC_EP0_RxReady+0x46>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007dbc:	2bff      	cmp	r3, #255	; 0xff
 8007dbe:	d010      	beq.n	8007de2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007dce:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007dd6:	b292      	uxth	r2, r2
 8007dd8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	22ff      	movs	r2, #255	; 0xff
 8007dde:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3710      	adds	r7, #16
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2243      	movs	r2, #67	; 0x43
 8007df8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007dfa:	4b03      	ldr	r3, [pc, #12]	; (8007e08 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bc80      	pop	{r7}
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	20000098 	.word	0x20000098

08007e0c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2243      	movs	r2, #67	; 0x43
 8007e18:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007e1a:	4b03      	ldr	r3, [pc, #12]	; (8007e28 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bc80      	pop	{r7}
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	20000054 	.word	0x20000054

08007e2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2243      	movs	r2, #67	; 0x43
 8007e38:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007e3a:	4b03      	ldr	r3, [pc, #12]	; (8007e48 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bc80      	pop	{r7}
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop
 8007e48:	200000dc 	.word	0x200000dc

08007e4c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	220a      	movs	r2, #10
 8007e58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007e5a:	4b03      	ldr	r3, [pc, #12]	; (8007e68 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bc80      	pop	{r7}
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	20000010 	.word	0x20000010

08007e6c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007e76:	2302      	movs	r3, #2
 8007e78:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d005      	beq.n	8007e8c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	683a      	ldr	r2, [r7, #0]
 8007e84:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3714      	adds	r7, #20
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bc80      	pop	{r7}
 8007e96:	4770      	bx	lr

08007e98 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b087      	sub	sp, #28
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eac:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	68ba      	ldr	r2, [r7, #8]
 8007eb2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007eb6:	88fa      	ldrh	r2, [r7, #6]
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	371c      	adds	r7, #28
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bc80      	pop	{r7}
 8007ec8:	4770      	bx	lr

08007eca <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007eca:	b480      	push	{r7}
 8007ecc:	b085      	sub	sp, #20
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
 8007ed2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eda:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	683a      	ldr	r2, [r7, #0]
 8007ee0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3714      	adds	r7, #20
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bc80      	pop	{r7}
 8007eee:	4770      	bx	lr

08007ef0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007efe:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d017      	beq.n	8007f3a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	7c1b      	ldrb	r3, [r3, #16]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d109      	bne.n	8007f26 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f1c:	2101      	movs	r1, #1
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f001 fc9d 	bl	800985e <USBD_LL_PrepareReceive>
 8007f24:	e007      	b.n	8007f36 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f2c:	2340      	movs	r3, #64	; 0x40
 8007f2e:	2101      	movs	r1, #1
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f001 fc94 	bl	800985e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007f36:	2300      	movs	r3, #0
 8007f38:	e000      	b.n	8007f3c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007f3a:	2302      	movs	r3, #2
  }
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d101      	bne.n	8007f5c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007f58:	2302      	movs	r3, #2
 8007f5a:	e01a      	b.n	8007f92 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d003      	beq.n	8007f6e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d003      	beq.n	8007f7c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	68ba      	ldr	r2, [r7, #8]
 8007f78:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	79fa      	ldrb	r2, [r7, #7]
 8007f88:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f001 fb02 	bl	8009594 <USBD_LL_Init>

  return USBD_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f9a:	b480      	push	{r7}
 8007f9c:	b085      	sub	sp, #20
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
 8007fa2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d006      	beq.n	8007fbc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	683a      	ldr	r2, [r7, #0]
 8007fb2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	73fb      	strb	r3, [r7, #15]
 8007fba:	e001      	b.n	8007fc0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007fbc:	2302      	movs	r3, #2
 8007fbe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3714      	adds	r7, #20
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bc80      	pop	{r7}
 8007fca:	4770      	bx	lr

08007fcc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f001 fb37 	bl	8009648 <USBD_LL_Start>

  return USBD_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	370c      	adds	r7, #12
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bc80      	pop	{r7}
 8007ff6:	4770      	bx	lr

08007ff8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	460b      	mov	r3, r1
 8008002:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008004:	2302      	movs	r3, #2
 8008006:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00c      	beq.n	800802c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	78fa      	ldrb	r2, [r7, #3]
 800801c:	4611      	mov	r1, r2
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	4798      	blx	r3
 8008022:	4603      	mov	r3, r0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d101      	bne.n	800802c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008028:	2300      	movs	r3, #0
 800802a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800802c:	7bfb      	ldrb	r3, [r7, #15]
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b082      	sub	sp, #8
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	460b      	mov	r3, r1
 8008040:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	78fa      	ldrb	r2, [r7, #3]
 800804c:	4611      	mov	r1, r2
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	4798      	blx	r3

  return USBD_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800806c:	6839      	ldr	r1, [r7, #0]
 800806e:	4618      	mov	r0, r3
 8008070:	f000 fed7 	bl	8008e22 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008082:	461a      	mov	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008090:	f003 031f 	and.w	r3, r3, #31
 8008094:	2b02      	cmp	r3, #2
 8008096:	d016      	beq.n	80080c6 <USBD_LL_SetupStage+0x6a>
 8008098:	2b02      	cmp	r3, #2
 800809a:	d81c      	bhi.n	80080d6 <USBD_LL_SetupStage+0x7a>
 800809c:	2b00      	cmp	r3, #0
 800809e:	d002      	beq.n	80080a6 <USBD_LL_SetupStage+0x4a>
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d008      	beq.n	80080b6 <USBD_LL_SetupStage+0x5a>
 80080a4:	e017      	b.n	80080d6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f9ca 	bl	8008448 <USBD_StdDevReq>
      break;
 80080b4:	e01a      	b.n	80080ec <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80080bc:	4619      	mov	r1, r3
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 fa2c 	bl	800851c <USBD_StdItfReq>
      break;
 80080c4:	e012      	b.n	80080ec <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80080cc:	4619      	mov	r1, r3
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 fa6c 	bl	80085ac <USBD_StdEPReq>
      break;
 80080d4:	e00a      	b.n	80080ec <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80080dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	4619      	mov	r1, r3
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f001 fb0f 	bl	8009708 <USBD_LL_StallEP>
      break;
 80080ea:	bf00      	nop
  }

  return USBD_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3708      	adds	r7, #8
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b086      	sub	sp, #24
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	60f8      	str	r0, [r7, #12]
 80080fe:	460b      	mov	r3, r1
 8008100:	607a      	str	r2, [r7, #4]
 8008102:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008104:	7afb      	ldrb	r3, [r7, #11]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d14b      	bne.n	80081a2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008110:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008118:	2b03      	cmp	r3, #3
 800811a:	d134      	bne.n	8008186 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	68da      	ldr	r2, [r3, #12]
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	429a      	cmp	r2, r3
 8008126:	d919      	bls.n	800815c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	68da      	ldr	r2, [r3, #12]
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	1ad2      	subs	r2, r2, r3
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	68da      	ldr	r2, [r3, #12]
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800813e:	429a      	cmp	r2, r3
 8008140:	d203      	bcs.n	800814a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008146:	b29b      	uxth	r3, r3
 8008148:	e002      	b.n	8008150 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800814e:	b29b      	uxth	r3, r3
 8008150:	461a      	mov	r2, r3
 8008152:	6879      	ldr	r1, [r7, #4]
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f000 ff56 	bl	8009006 <USBD_CtlContinueRx>
 800815a:	e038      	b.n	80081ce <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00a      	beq.n	800817e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800816e:	2b03      	cmp	r3, #3
 8008170:	d105      	bne.n	800817e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f000 ff53 	bl	800902a <USBD_CtlSendStatus>
 8008184:	e023      	b.n	80081ce <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800818c:	2b05      	cmp	r3, #5
 800818e:	d11e      	bne.n	80081ce <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2200      	movs	r2, #0
 8008194:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008198:	2100      	movs	r1, #0
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f001 fab4 	bl	8009708 <USBD_LL_StallEP>
 80081a0:	e015      	b.n	80081ce <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081a8:	699b      	ldr	r3, [r3, #24]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00d      	beq.n	80081ca <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80081b4:	2b03      	cmp	r3, #3
 80081b6:	d108      	bne.n	80081ca <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	7afa      	ldrb	r2, [r7, #11]
 80081c2:	4611      	mov	r1, r2
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	4798      	blx	r3
 80081c8:	e001      	b.n	80081ce <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80081ca:	2302      	movs	r3, #2
 80081cc:	e000      	b.n	80081d0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3718      	adds	r7, #24
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b086      	sub	sp, #24
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	460b      	mov	r3, r1
 80081e2:	607a      	str	r2, [r7, #4]
 80081e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80081e6:	7afb      	ldrb	r3, [r7, #11]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d17f      	bne.n	80082ec <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	3314      	adds	r3, #20
 80081f0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	d15c      	bne.n	80082b6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	68da      	ldr	r2, [r3, #12]
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	691b      	ldr	r3, [r3, #16]
 8008204:	429a      	cmp	r2, r3
 8008206:	d915      	bls.n	8008234 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	68da      	ldr	r2, [r3, #12]
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	691b      	ldr	r3, [r3, #16]
 8008210:	1ad2      	subs	r2, r2, r3
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	b29b      	uxth	r3, r3
 800821c:	461a      	mov	r2, r3
 800821e:	6879      	ldr	r1, [r7, #4]
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f000 fec0 	bl	8008fa6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008226:	2300      	movs	r3, #0
 8008228:	2200      	movs	r2, #0
 800822a:	2100      	movs	r1, #0
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f001 fb16 	bl	800985e <USBD_LL_PrepareReceive>
 8008232:	e04e      	b.n	80082d2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	697a      	ldr	r2, [r7, #20]
 800823a:	6912      	ldr	r2, [r2, #16]
 800823c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008240:	fb02 f201 	mul.w	r2, r2, r1
 8008244:	1a9b      	subs	r3, r3, r2
 8008246:	2b00      	cmp	r3, #0
 8008248:	d11c      	bne.n	8008284 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	689a      	ldr	r2, [r3, #8]
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008252:	429a      	cmp	r2, r3
 8008254:	d316      	bcc.n	8008284 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	689a      	ldr	r2, [r3, #8]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008260:	429a      	cmp	r2, r3
 8008262:	d20f      	bcs.n	8008284 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008264:	2200      	movs	r2, #0
 8008266:	2100      	movs	r1, #0
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	f000 fe9c 	bl	8008fa6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2200      	movs	r2, #0
 8008272:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008276:	2300      	movs	r3, #0
 8008278:	2200      	movs	r2, #0
 800827a:	2100      	movs	r1, #0
 800827c:	68f8      	ldr	r0, [r7, #12]
 800827e:	f001 faee 	bl	800985e <USBD_LL_PrepareReceive>
 8008282:	e026      	b.n	80082d2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00a      	beq.n	80082a6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008296:	2b03      	cmp	r3, #3
 8008298:	d105      	bne.n	80082a6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80082a6:	2180      	movs	r1, #128	; 0x80
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f001 fa2d 	bl	8009708 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80082ae:	68f8      	ldr	r0, [r7, #12]
 80082b0:	f000 fece 	bl	8009050 <USBD_CtlReceiveStatus>
 80082b4:	e00d      	b.n	80082d2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80082bc:	2b04      	cmp	r3, #4
 80082be:	d004      	beq.n	80082ca <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d103      	bne.n	80082d2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80082ca:	2180      	movs	r1, #128	; 0x80
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f001 fa1b 	bl	8009708 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d11d      	bne.n	8008318 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	f7ff fe81 	bl	8007fe4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80082ea:	e015      	b.n	8008318 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082f2:	695b      	ldr	r3, [r3, #20]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d00d      	beq.n	8008314 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80082fe:	2b03      	cmp	r3, #3
 8008300:	d108      	bne.n	8008314 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	7afa      	ldrb	r2, [r7, #11]
 800830c:	4611      	mov	r1, r2
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	4798      	blx	r3
 8008312:	e001      	b.n	8008318 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008314:	2302      	movs	r3, #2
 8008316:	e000      	b.n	800831a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3718      	adds	r7, #24
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b082      	sub	sp, #8
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800832a:	2340      	movs	r3, #64	; 0x40
 800832c:	2200      	movs	r2, #0
 800832e:	2100      	movs	r1, #0
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f001 f9a4 	bl	800967e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2201      	movs	r2, #1
 800833a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2240      	movs	r2, #64	; 0x40
 8008342:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008346:	2340      	movs	r3, #64	; 0x40
 8008348:	2200      	movs	r2, #0
 800834a:	2180      	movs	r1, #128	; 0x80
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f001 f996 	bl	800967e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2201      	movs	r2, #1
 8008356:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2240      	movs	r2, #64	; 0x40
 800835c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2201      	movs	r2, #1
 8008362:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008382:	2b00      	cmp	r3, #0
 8008384:	d009      	beq.n	800839a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	6852      	ldr	r2, [r2, #4]
 8008392:	b2d2      	uxtb	r2, r2
 8008394:	4611      	mov	r1, r2
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	4798      	blx	r3
  }

  return USBD_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3708      	adds	r7, #8
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	460b      	mov	r3, r1
 80083ae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	78fa      	ldrb	r2, [r7, #3]
 80083b4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	bc80      	pop	{r7}
 80083c0:	4770      	bx	lr

080083c2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80083c2:	b480      	push	{r7}
 80083c4:	b083      	sub	sp, #12
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2204      	movs	r2, #4
 80083da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bc80      	pop	{r7}
 80083e8:	4770      	bx	lr

080083ea <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80083ea:	b480      	push	{r7}
 80083ec:	b083      	sub	sp, #12
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083f8:	2b04      	cmp	r3, #4
 80083fa:	d105      	bne.n	8008408 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	370c      	adds	r7, #12
 800840e:	46bd      	mov	sp, r7
 8008410:	bc80      	pop	{r7}
 8008412:	4770      	bx	lr

08008414 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008422:	2b03      	cmp	r3, #3
 8008424:	d10b      	bne.n	800843e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800842c:	69db      	ldr	r3, [r3, #28]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d005      	beq.n	800843e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008438:	69db      	ldr	r3, [r3, #28]
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	3708      	adds	r7, #8
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008452:	2300      	movs	r3, #0
 8008454:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800845e:	2b40      	cmp	r3, #64	; 0x40
 8008460:	d005      	beq.n	800846e <USBD_StdDevReq+0x26>
 8008462:	2b40      	cmp	r3, #64	; 0x40
 8008464:	d84f      	bhi.n	8008506 <USBD_StdDevReq+0xbe>
 8008466:	2b00      	cmp	r3, #0
 8008468:	d009      	beq.n	800847e <USBD_StdDevReq+0x36>
 800846a:	2b20      	cmp	r3, #32
 800846c:	d14b      	bne.n	8008506 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	6839      	ldr	r1, [r7, #0]
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	4798      	blx	r3
      break;
 800847c:	e048      	b.n	8008510 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	785b      	ldrb	r3, [r3, #1]
 8008482:	2b09      	cmp	r3, #9
 8008484:	d839      	bhi.n	80084fa <USBD_StdDevReq+0xb2>
 8008486:	a201      	add	r2, pc, #4	; (adr r2, 800848c <USBD_StdDevReq+0x44>)
 8008488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800848c:	080084dd 	.word	0x080084dd
 8008490:	080084f1 	.word	0x080084f1
 8008494:	080084fb 	.word	0x080084fb
 8008498:	080084e7 	.word	0x080084e7
 800849c:	080084fb 	.word	0x080084fb
 80084a0:	080084bf 	.word	0x080084bf
 80084a4:	080084b5 	.word	0x080084b5
 80084a8:	080084fb 	.word	0x080084fb
 80084ac:	080084d3 	.word	0x080084d3
 80084b0:	080084c9 	.word	0x080084c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80084b4:	6839      	ldr	r1, [r7, #0]
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 f9dc 	bl	8008874 <USBD_GetDescriptor>
          break;
 80084bc:	e022      	b.n	8008504 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80084be:	6839      	ldr	r1, [r7, #0]
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 fb3f 	bl	8008b44 <USBD_SetAddress>
          break;
 80084c6:	e01d      	b.n	8008504 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 fb7e 	bl	8008bcc <USBD_SetConfig>
          break;
 80084d0:	e018      	b.n	8008504 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80084d2:	6839      	ldr	r1, [r7, #0]
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 fc07 	bl	8008ce8 <USBD_GetConfig>
          break;
 80084da:	e013      	b.n	8008504 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 fc37 	bl	8008d52 <USBD_GetStatus>
          break;
 80084e4:	e00e      	b.n	8008504 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80084e6:	6839      	ldr	r1, [r7, #0]
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 fc65 	bl	8008db8 <USBD_SetFeature>
          break;
 80084ee:	e009      	b.n	8008504 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80084f0:	6839      	ldr	r1, [r7, #0]
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 fc74 	bl	8008de0 <USBD_ClrFeature>
          break;
 80084f8:	e004      	b.n	8008504 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80084fa:	6839      	ldr	r1, [r7, #0]
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 fccc 	bl	8008e9a <USBD_CtlError>
          break;
 8008502:	bf00      	nop
      }
      break;
 8008504:	e004      	b.n	8008510 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008506:	6839      	ldr	r1, [r7, #0]
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 fcc6 	bl	8008e9a <USBD_CtlError>
      break;
 800850e:	bf00      	nop
  }

  return ret;
 8008510:	7bfb      	ldrb	r3, [r7, #15]
}
 8008512:	4618      	mov	r0, r3
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop

0800851c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008526:	2300      	movs	r3, #0
 8008528:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008532:	2b40      	cmp	r3, #64	; 0x40
 8008534:	d005      	beq.n	8008542 <USBD_StdItfReq+0x26>
 8008536:	2b40      	cmp	r3, #64	; 0x40
 8008538:	d82e      	bhi.n	8008598 <USBD_StdItfReq+0x7c>
 800853a:	2b00      	cmp	r3, #0
 800853c:	d001      	beq.n	8008542 <USBD_StdItfReq+0x26>
 800853e:	2b20      	cmp	r3, #32
 8008540:	d12a      	bne.n	8008598 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008548:	3b01      	subs	r3, #1
 800854a:	2b02      	cmp	r3, #2
 800854c:	d81d      	bhi.n	800858a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	889b      	ldrh	r3, [r3, #4]
 8008552:	b2db      	uxtb	r3, r3
 8008554:	2b01      	cmp	r3, #1
 8008556:	d813      	bhi.n	8008580 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	6839      	ldr	r1, [r7, #0]
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	4798      	blx	r3
 8008566:	4603      	mov	r3, r0
 8008568:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	88db      	ldrh	r3, [r3, #6]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d110      	bne.n	8008594 <USBD_StdItfReq+0x78>
 8008572:	7bfb      	ldrb	r3, [r7, #15]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d10d      	bne.n	8008594 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 fd56 	bl	800902a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800857e:	e009      	b.n	8008594 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008580:	6839      	ldr	r1, [r7, #0]
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 fc89 	bl	8008e9a <USBD_CtlError>
          break;
 8008588:	e004      	b.n	8008594 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800858a:	6839      	ldr	r1, [r7, #0]
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 fc84 	bl	8008e9a <USBD_CtlError>
          break;
 8008592:	e000      	b.n	8008596 <USBD_StdItfReq+0x7a>
          break;
 8008594:	bf00      	nop
      }
      break;
 8008596:	e004      	b.n	80085a2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008598:	6839      	ldr	r1, [r7, #0]
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 fc7d 	bl	8008e9a <USBD_CtlError>
      break;
 80085a0:	bf00      	nop
  }

  return USBD_OK;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80085b6:	2300      	movs	r3, #0
 80085b8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	889b      	ldrh	r3, [r3, #4]
 80085be:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085c8:	2b40      	cmp	r3, #64	; 0x40
 80085ca:	d007      	beq.n	80085dc <USBD_StdEPReq+0x30>
 80085cc:	2b40      	cmp	r3, #64	; 0x40
 80085ce:	f200 8146 	bhi.w	800885e <USBD_StdEPReq+0x2b2>
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00a      	beq.n	80085ec <USBD_StdEPReq+0x40>
 80085d6:	2b20      	cmp	r3, #32
 80085d8:	f040 8141 	bne.w	800885e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	6839      	ldr	r1, [r7, #0]
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	4798      	blx	r3
      break;
 80085ea:	e13d      	b.n	8008868 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085f4:	2b20      	cmp	r3, #32
 80085f6:	d10a      	bne.n	800860e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	6839      	ldr	r1, [r7, #0]
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	4798      	blx	r3
 8008606:	4603      	mov	r3, r0
 8008608:	73fb      	strb	r3, [r7, #15]

        return ret;
 800860a:	7bfb      	ldrb	r3, [r7, #15]
 800860c:	e12d      	b.n	800886a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	785b      	ldrb	r3, [r3, #1]
 8008612:	2b03      	cmp	r3, #3
 8008614:	d007      	beq.n	8008626 <USBD_StdEPReq+0x7a>
 8008616:	2b03      	cmp	r3, #3
 8008618:	f300 811b 	bgt.w	8008852 <USBD_StdEPReq+0x2a6>
 800861c:	2b00      	cmp	r3, #0
 800861e:	d072      	beq.n	8008706 <USBD_StdEPReq+0x15a>
 8008620:	2b01      	cmp	r3, #1
 8008622:	d03a      	beq.n	800869a <USBD_StdEPReq+0xee>
 8008624:	e115      	b.n	8008852 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800862c:	2b02      	cmp	r3, #2
 800862e:	d002      	beq.n	8008636 <USBD_StdEPReq+0x8a>
 8008630:	2b03      	cmp	r3, #3
 8008632:	d015      	beq.n	8008660 <USBD_StdEPReq+0xb4>
 8008634:	e02b      	b.n	800868e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008636:	7bbb      	ldrb	r3, [r7, #14]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00c      	beq.n	8008656 <USBD_StdEPReq+0xaa>
 800863c:	7bbb      	ldrb	r3, [r7, #14]
 800863e:	2b80      	cmp	r3, #128	; 0x80
 8008640:	d009      	beq.n	8008656 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008642:	7bbb      	ldrb	r3, [r7, #14]
 8008644:	4619      	mov	r1, r3
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f001 f85e 	bl	8009708 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800864c:	2180      	movs	r1, #128	; 0x80
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f001 f85a 	bl	8009708 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008654:	e020      	b.n	8008698 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008656:	6839      	ldr	r1, [r7, #0]
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 fc1e 	bl	8008e9a <USBD_CtlError>
              break;
 800865e:	e01b      	b.n	8008698 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	885b      	ldrh	r3, [r3, #2]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d10e      	bne.n	8008686 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008668:	7bbb      	ldrb	r3, [r7, #14]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00b      	beq.n	8008686 <USBD_StdEPReq+0xda>
 800866e:	7bbb      	ldrb	r3, [r7, #14]
 8008670:	2b80      	cmp	r3, #128	; 0x80
 8008672:	d008      	beq.n	8008686 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	88db      	ldrh	r3, [r3, #6]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d104      	bne.n	8008686 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800867c:	7bbb      	ldrb	r3, [r7, #14]
 800867e:	4619      	mov	r1, r3
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f001 f841 	bl	8009708 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 fccf 	bl	800902a <USBD_CtlSendStatus>

              break;
 800868c:	e004      	b.n	8008698 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800868e:	6839      	ldr	r1, [r7, #0]
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 fc02 	bl	8008e9a <USBD_CtlError>
              break;
 8008696:	bf00      	nop
          }
          break;
 8008698:	e0e0      	b.n	800885c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d002      	beq.n	80086aa <USBD_StdEPReq+0xfe>
 80086a4:	2b03      	cmp	r3, #3
 80086a6:	d015      	beq.n	80086d4 <USBD_StdEPReq+0x128>
 80086a8:	e026      	b.n	80086f8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086aa:	7bbb      	ldrb	r3, [r7, #14]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00c      	beq.n	80086ca <USBD_StdEPReq+0x11e>
 80086b0:	7bbb      	ldrb	r3, [r7, #14]
 80086b2:	2b80      	cmp	r3, #128	; 0x80
 80086b4:	d009      	beq.n	80086ca <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80086b6:	7bbb      	ldrb	r3, [r7, #14]
 80086b8:	4619      	mov	r1, r3
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f001 f824 	bl	8009708 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80086c0:	2180      	movs	r1, #128	; 0x80
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f001 f820 	bl	8009708 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80086c8:	e01c      	b.n	8008704 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80086ca:	6839      	ldr	r1, [r7, #0]
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 fbe4 	bl	8008e9a <USBD_CtlError>
              break;
 80086d2:	e017      	b.n	8008704 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	885b      	ldrh	r3, [r3, #2]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d112      	bne.n	8008702 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80086dc:	7bbb      	ldrb	r3, [r7, #14]
 80086de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d004      	beq.n	80086f0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80086e6:	7bbb      	ldrb	r3, [r7, #14]
 80086e8:	4619      	mov	r1, r3
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f001 f82b 	bl	8009746 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 fc9a 	bl	800902a <USBD_CtlSendStatus>
              }
              break;
 80086f6:	e004      	b.n	8008702 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80086f8:	6839      	ldr	r1, [r7, #0]
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fbcd 	bl	8008e9a <USBD_CtlError>
              break;
 8008700:	e000      	b.n	8008704 <USBD_StdEPReq+0x158>
              break;
 8008702:	bf00      	nop
          }
          break;
 8008704:	e0aa      	b.n	800885c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800870c:	2b02      	cmp	r3, #2
 800870e:	d002      	beq.n	8008716 <USBD_StdEPReq+0x16a>
 8008710:	2b03      	cmp	r3, #3
 8008712:	d032      	beq.n	800877a <USBD_StdEPReq+0x1ce>
 8008714:	e097      	b.n	8008846 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008716:	7bbb      	ldrb	r3, [r7, #14]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d007      	beq.n	800872c <USBD_StdEPReq+0x180>
 800871c:	7bbb      	ldrb	r3, [r7, #14]
 800871e:	2b80      	cmp	r3, #128	; 0x80
 8008720:	d004      	beq.n	800872c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008722:	6839      	ldr	r1, [r7, #0]
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 fbb8 	bl	8008e9a <USBD_CtlError>
                break;
 800872a:	e091      	b.n	8008850 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800872c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008730:	2b00      	cmp	r3, #0
 8008732:	da0b      	bge.n	800874c <USBD_StdEPReq+0x1a0>
 8008734:	7bbb      	ldrb	r3, [r7, #14]
 8008736:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800873a:	4613      	mov	r3, r2
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	4413      	add	r3, r2
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	3310      	adds	r3, #16
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	4413      	add	r3, r2
 8008748:	3304      	adds	r3, #4
 800874a:	e00b      	b.n	8008764 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800874c:	7bbb      	ldrb	r3, [r7, #14]
 800874e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008752:	4613      	mov	r3, r2
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	4413      	add	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	4413      	add	r3, r2
 8008762:	3304      	adds	r3, #4
 8008764:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	2200      	movs	r2, #0
 800876a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	2202      	movs	r2, #2
 8008770:	4619      	mov	r1, r3
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 fbfb 	bl	8008f6e <USBD_CtlSendData>
              break;
 8008778:	e06a      	b.n	8008850 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800877a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800877e:	2b00      	cmp	r3, #0
 8008780:	da11      	bge.n	80087a6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008782:	7bbb      	ldrb	r3, [r7, #14]
 8008784:	f003 020f 	and.w	r2, r3, #15
 8008788:	6879      	ldr	r1, [r7, #4]
 800878a:	4613      	mov	r3, r2
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	4413      	add	r3, r2
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	440b      	add	r3, r1
 8008794:	3318      	adds	r3, #24
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d117      	bne.n	80087cc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800879c:	6839      	ldr	r1, [r7, #0]
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 fb7b 	bl	8008e9a <USBD_CtlError>
                  break;
 80087a4:	e054      	b.n	8008850 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80087a6:	7bbb      	ldrb	r3, [r7, #14]
 80087a8:	f003 020f 	and.w	r2, r3, #15
 80087ac:	6879      	ldr	r1, [r7, #4]
 80087ae:	4613      	mov	r3, r2
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	4413      	add	r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	440b      	add	r3, r1
 80087b8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d104      	bne.n	80087cc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80087c2:	6839      	ldr	r1, [r7, #0]
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 fb68 	bl	8008e9a <USBD_CtlError>
                  break;
 80087ca:	e041      	b.n	8008850 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	da0b      	bge.n	80087ec <USBD_StdEPReq+0x240>
 80087d4:	7bbb      	ldrb	r3, [r7, #14]
 80087d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087da:	4613      	mov	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4413      	add	r3, r2
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	3310      	adds	r3, #16
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	4413      	add	r3, r2
 80087e8:	3304      	adds	r3, #4
 80087ea:	e00b      	b.n	8008804 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087ec:	7bbb      	ldrb	r3, [r7, #14]
 80087ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087f2:	4613      	mov	r3, r2
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	4413      	add	r3, r2
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	4413      	add	r3, r2
 8008802:	3304      	adds	r3, #4
 8008804:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008806:	7bbb      	ldrb	r3, [r7, #14]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d002      	beq.n	8008812 <USBD_StdEPReq+0x266>
 800880c:	7bbb      	ldrb	r3, [r7, #14]
 800880e:	2b80      	cmp	r3, #128	; 0x80
 8008810:	d103      	bne.n	800881a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	2200      	movs	r2, #0
 8008816:	601a      	str	r2, [r3, #0]
 8008818:	e00e      	b.n	8008838 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800881a:	7bbb      	ldrb	r3, [r7, #14]
 800881c:	4619      	mov	r1, r3
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 ffb0 	bl	8009784 <USBD_LL_IsStallEP>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d003      	beq.n	8008832 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	2201      	movs	r2, #1
 800882e:	601a      	str	r2, [r3, #0]
 8008830:	e002      	b.n	8008838 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	2200      	movs	r2, #0
 8008836:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	2202      	movs	r2, #2
 800883c:	4619      	mov	r1, r3
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 fb95 	bl	8008f6e <USBD_CtlSendData>
              break;
 8008844:	e004      	b.n	8008850 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008846:	6839      	ldr	r1, [r7, #0]
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fb26 	bl	8008e9a <USBD_CtlError>
              break;
 800884e:	bf00      	nop
          }
          break;
 8008850:	e004      	b.n	800885c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008852:	6839      	ldr	r1, [r7, #0]
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 fb20 	bl	8008e9a <USBD_CtlError>
          break;
 800885a:	bf00      	nop
      }
      break;
 800885c:	e004      	b.n	8008868 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800885e:	6839      	ldr	r1, [r7, #0]
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 fb1a 	bl	8008e9a <USBD_CtlError>
      break;
 8008866:	bf00      	nop
  }

  return ret;
 8008868:	7bfb      	ldrb	r3, [r7, #15]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
	...

08008874 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800887e:	2300      	movs	r3, #0
 8008880:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008882:	2300      	movs	r3, #0
 8008884:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008886:	2300      	movs	r3, #0
 8008888:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	885b      	ldrh	r3, [r3, #2]
 800888e:	0a1b      	lsrs	r3, r3, #8
 8008890:	b29b      	uxth	r3, r3
 8008892:	3b01      	subs	r3, #1
 8008894:	2b06      	cmp	r3, #6
 8008896:	f200 8128 	bhi.w	8008aea <USBD_GetDescriptor+0x276>
 800889a:	a201      	add	r2, pc, #4	; (adr r2, 80088a0 <USBD_GetDescriptor+0x2c>)
 800889c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a0:	080088bd 	.word	0x080088bd
 80088a4:	080088d5 	.word	0x080088d5
 80088a8:	08008915 	.word	0x08008915
 80088ac:	08008aeb 	.word	0x08008aeb
 80088b0:	08008aeb 	.word	0x08008aeb
 80088b4:	08008a8b 	.word	0x08008a8b
 80088b8:	08008ab7 	.word	0x08008ab7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	7c12      	ldrb	r2, [r2, #16]
 80088c8:	f107 0108 	add.w	r1, r7, #8
 80088cc:	4610      	mov	r0, r2
 80088ce:	4798      	blx	r3
 80088d0:	60f8      	str	r0, [r7, #12]
      break;
 80088d2:	e112      	b.n	8008afa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	7c1b      	ldrb	r3, [r3, #16]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10d      	bne.n	80088f8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088e4:	f107 0208 	add.w	r2, r7, #8
 80088e8:	4610      	mov	r0, r2
 80088ea:	4798      	blx	r3
 80088ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	3301      	adds	r3, #1
 80088f2:	2202      	movs	r2, #2
 80088f4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80088f6:	e100      	b.n	8008afa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008900:	f107 0208 	add.w	r2, r7, #8
 8008904:	4610      	mov	r0, r2
 8008906:	4798      	blx	r3
 8008908:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	3301      	adds	r3, #1
 800890e:	2202      	movs	r2, #2
 8008910:	701a      	strb	r2, [r3, #0]
      break;
 8008912:	e0f2      	b.n	8008afa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	885b      	ldrh	r3, [r3, #2]
 8008918:	b2db      	uxtb	r3, r3
 800891a:	2b05      	cmp	r3, #5
 800891c:	f200 80ac 	bhi.w	8008a78 <USBD_GetDescriptor+0x204>
 8008920:	a201      	add	r2, pc, #4	; (adr r2, 8008928 <USBD_GetDescriptor+0xb4>)
 8008922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008926:	bf00      	nop
 8008928:	08008941 	.word	0x08008941
 800892c:	08008975 	.word	0x08008975
 8008930:	080089a9 	.word	0x080089a9
 8008934:	080089dd 	.word	0x080089dd
 8008938:	08008a11 	.word	0x08008a11
 800893c:	08008a45 	.word	0x08008a45
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d00b      	beq.n	8008964 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	7c12      	ldrb	r2, [r2, #16]
 8008958:	f107 0108 	add.w	r1, r7, #8
 800895c:	4610      	mov	r0, r2
 800895e:	4798      	blx	r3
 8008960:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008962:	e091      	b.n	8008a88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008964:	6839      	ldr	r1, [r7, #0]
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 fa97 	bl	8008e9a <USBD_CtlError>
            err++;
 800896c:	7afb      	ldrb	r3, [r7, #11]
 800896e:	3301      	adds	r3, #1
 8008970:	72fb      	strb	r3, [r7, #11]
          break;
 8008972:	e089      	b.n	8008a88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d00b      	beq.n	8008998 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	7c12      	ldrb	r2, [r2, #16]
 800898c:	f107 0108 	add.w	r1, r7, #8
 8008990:	4610      	mov	r0, r2
 8008992:	4798      	blx	r3
 8008994:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008996:	e077      	b.n	8008a88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008998:	6839      	ldr	r1, [r7, #0]
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 fa7d 	bl	8008e9a <USBD_CtlError>
            err++;
 80089a0:	7afb      	ldrb	r3, [r7, #11]
 80089a2:	3301      	adds	r3, #1
 80089a4:	72fb      	strb	r3, [r7, #11]
          break;
 80089a6:	e06f      	b.n	8008a88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d00b      	beq.n	80089cc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	7c12      	ldrb	r2, [r2, #16]
 80089c0:	f107 0108 	add.w	r1, r7, #8
 80089c4:	4610      	mov	r0, r2
 80089c6:	4798      	blx	r3
 80089c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089ca:	e05d      	b.n	8008a88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089cc:	6839      	ldr	r1, [r7, #0]
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 fa63 	bl	8008e9a <USBD_CtlError>
            err++;
 80089d4:	7afb      	ldrb	r3, [r7, #11]
 80089d6:	3301      	adds	r3, #1
 80089d8:	72fb      	strb	r3, [r7, #11]
          break;
 80089da:	e055      	b.n	8008a88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089e2:	691b      	ldr	r3, [r3, #16]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d00b      	beq.n	8008a00 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	7c12      	ldrb	r2, [r2, #16]
 80089f4:	f107 0108 	add.w	r1, r7, #8
 80089f8:	4610      	mov	r0, r2
 80089fa:	4798      	blx	r3
 80089fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089fe:	e043      	b.n	8008a88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a00:	6839      	ldr	r1, [r7, #0]
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 fa49 	bl	8008e9a <USBD_CtlError>
            err++;
 8008a08:	7afb      	ldrb	r3, [r7, #11]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a0e:	e03b      	b.n	8008a88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a16:	695b      	ldr	r3, [r3, #20]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d00b      	beq.n	8008a34 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a22:	695b      	ldr	r3, [r3, #20]
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	7c12      	ldrb	r2, [r2, #16]
 8008a28:	f107 0108 	add.w	r1, r7, #8
 8008a2c:	4610      	mov	r0, r2
 8008a2e:	4798      	blx	r3
 8008a30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a32:	e029      	b.n	8008a88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a34:	6839      	ldr	r1, [r7, #0]
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 fa2f 	bl	8008e9a <USBD_CtlError>
            err++;
 8008a3c:	7afb      	ldrb	r3, [r7, #11]
 8008a3e:	3301      	adds	r3, #1
 8008a40:	72fb      	strb	r3, [r7, #11]
          break;
 8008a42:	e021      	b.n	8008a88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a4a:	699b      	ldr	r3, [r3, #24]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d00b      	beq.n	8008a68 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a56:	699b      	ldr	r3, [r3, #24]
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	7c12      	ldrb	r2, [r2, #16]
 8008a5c:	f107 0108 	add.w	r1, r7, #8
 8008a60:	4610      	mov	r0, r2
 8008a62:	4798      	blx	r3
 8008a64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a66:	e00f      	b.n	8008a88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a68:	6839      	ldr	r1, [r7, #0]
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fa15 	bl	8008e9a <USBD_CtlError>
            err++;
 8008a70:	7afb      	ldrb	r3, [r7, #11]
 8008a72:	3301      	adds	r3, #1
 8008a74:	72fb      	strb	r3, [r7, #11]
          break;
 8008a76:	e007      	b.n	8008a88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fa0d 	bl	8008e9a <USBD_CtlError>
          err++;
 8008a80:	7afb      	ldrb	r3, [r7, #11]
 8008a82:	3301      	adds	r3, #1
 8008a84:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008a86:	e038      	b.n	8008afa <USBD_GetDescriptor+0x286>
 8008a88:	e037      	b.n	8008afa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	7c1b      	ldrb	r3, [r3, #16]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d109      	bne.n	8008aa6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a9a:	f107 0208 	add.w	r2, r7, #8
 8008a9e:	4610      	mov	r0, r2
 8008aa0:	4798      	blx	r3
 8008aa2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008aa4:	e029      	b.n	8008afa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008aa6:	6839      	ldr	r1, [r7, #0]
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 f9f6 	bl	8008e9a <USBD_CtlError>
        err++;
 8008aae:	7afb      	ldrb	r3, [r7, #11]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	72fb      	strb	r3, [r7, #11]
      break;
 8008ab4:	e021      	b.n	8008afa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	7c1b      	ldrb	r3, [r3, #16]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d10d      	bne.n	8008ada <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac6:	f107 0208 	add.w	r2, r7, #8
 8008aca:	4610      	mov	r0, r2
 8008acc:	4798      	blx	r3
 8008ace:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	2207      	movs	r2, #7
 8008ad6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ad8:	e00f      	b.n	8008afa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ada:	6839      	ldr	r1, [r7, #0]
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 f9dc 	bl	8008e9a <USBD_CtlError>
        err++;
 8008ae2:	7afb      	ldrb	r3, [r7, #11]
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	72fb      	strb	r3, [r7, #11]
      break;
 8008ae8:	e007      	b.n	8008afa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008aea:	6839      	ldr	r1, [r7, #0]
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 f9d4 	bl	8008e9a <USBD_CtlError>
      err++;
 8008af2:	7afb      	ldrb	r3, [r7, #11]
 8008af4:	3301      	adds	r3, #1
 8008af6:	72fb      	strb	r3, [r7, #11]
      break;
 8008af8:	bf00      	nop
  }

  if (err != 0U)
 8008afa:	7afb      	ldrb	r3, [r7, #11]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d11c      	bne.n	8008b3a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008b00:	893b      	ldrh	r3, [r7, #8]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d011      	beq.n	8008b2a <USBD_GetDescriptor+0x2b6>
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	88db      	ldrh	r3, [r3, #6]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00d      	beq.n	8008b2a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	88da      	ldrh	r2, [r3, #6]
 8008b12:	893b      	ldrh	r3, [r7, #8]
 8008b14:	4293      	cmp	r3, r2
 8008b16:	bf28      	it	cs
 8008b18:	4613      	movcs	r3, r2
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b1e:	893b      	ldrh	r3, [r7, #8]
 8008b20:	461a      	mov	r2, r3
 8008b22:	68f9      	ldr	r1, [r7, #12]
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 fa22 	bl	8008f6e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	88db      	ldrh	r3, [r3, #6]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d104      	bne.n	8008b3c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 fa79 	bl	800902a <USBD_CtlSendStatus>
 8008b38:	e000      	b.n	8008b3c <USBD_GetDescriptor+0x2c8>
    return;
 8008b3a:	bf00      	nop
    }
  }
}
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop

08008b44 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	889b      	ldrh	r3, [r3, #4]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d130      	bne.n	8008bb8 <USBD_SetAddress+0x74>
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	88db      	ldrh	r3, [r3, #6]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d12c      	bne.n	8008bb8 <USBD_SetAddress+0x74>
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	885b      	ldrh	r3, [r3, #2]
 8008b62:	2b7f      	cmp	r3, #127	; 0x7f
 8008b64:	d828      	bhi.n	8008bb8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	885b      	ldrh	r3, [r3, #2]
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b70:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b78:	2b03      	cmp	r3, #3
 8008b7a:	d104      	bne.n	8008b86 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008b7c:	6839      	ldr	r1, [r7, #0]
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 f98b 	bl	8008e9a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b84:	e01d      	b.n	8008bc2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	7bfa      	ldrb	r2, [r7, #15]
 8008b8a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b8e:	7bfb      	ldrb	r3, [r7, #15]
 8008b90:	4619      	mov	r1, r3
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 fe21 	bl	80097da <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 fa46 	bl	800902a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d004      	beq.n	8008bae <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2202      	movs	r2, #2
 8008ba8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bac:	e009      	b.n	8008bc2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bb6:	e004      	b.n	8008bc2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008bb8:	6839      	ldr	r1, [r7, #0]
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 f96d 	bl	8008e9a <USBD_CtlError>
  }
}
 8008bc0:	bf00      	nop
 8008bc2:	bf00      	nop
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
	...

08008bcc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	885b      	ldrh	r3, [r3, #2]
 8008bda:	b2da      	uxtb	r2, r3
 8008bdc:	4b41      	ldr	r3, [pc, #260]	; (8008ce4 <USBD_SetConfig+0x118>)
 8008bde:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008be0:	4b40      	ldr	r3, [pc, #256]	; (8008ce4 <USBD_SetConfig+0x118>)
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d904      	bls.n	8008bf2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008be8:	6839      	ldr	r1, [r7, #0]
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 f955 	bl	8008e9a <USBD_CtlError>
 8008bf0:	e075      	b.n	8008cde <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	d002      	beq.n	8008c02 <USBD_SetConfig+0x36>
 8008bfc:	2b03      	cmp	r3, #3
 8008bfe:	d023      	beq.n	8008c48 <USBD_SetConfig+0x7c>
 8008c00:	e062      	b.n	8008cc8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008c02:	4b38      	ldr	r3, [pc, #224]	; (8008ce4 <USBD_SetConfig+0x118>)
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d01a      	beq.n	8008c40 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008c0a:	4b36      	ldr	r3, [pc, #216]	; (8008ce4 <USBD_SetConfig+0x118>)
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	461a      	mov	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2203      	movs	r2, #3
 8008c18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008c1c:	4b31      	ldr	r3, [pc, #196]	; (8008ce4 <USBD_SetConfig+0x118>)
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	4619      	mov	r1, r3
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f7ff f9e8 	bl	8007ff8 <USBD_SetClassConfig>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	d104      	bne.n	8008c38 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008c2e:	6839      	ldr	r1, [r7, #0]
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 f932 	bl	8008e9a <USBD_CtlError>
            return;
 8008c36:	e052      	b.n	8008cde <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 f9f6 	bl	800902a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008c3e:	e04e      	b.n	8008cde <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 f9f2 	bl	800902a <USBD_CtlSendStatus>
        break;
 8008c46:	e04a      	b.n	8008cde <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008c48:	4b26      	ldr	r3, [pc, #152]	; (8008ce4 <USBD_SetConfig+0x118>)
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d112      	bne.n	8008c76 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2202      	movs	r2, #2
 8008c54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008c58:	4b22      	ldr	r3, [pc, #136]	; (8008ce4 <USBD_SetConfig+0x118>)
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008c62:	4b20      	ldr	r3, [pc, #128]	; (8008ce4 <USBD_SetConfig+0x118>)
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	4619      	mov	r1, r3
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7ff f9e4 	bl	8008036 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 f9db 	bl	800902a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008c74:	e033      	b.n	8008cde <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008c76:	4b1b      	ldr	r3, [pc, #108]	; (8008ce4 <USBD_SetConfig+0x118>)
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d01d      	beq.n	8008cc0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f7ff f9d2 	bl	8008036 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008c92:	4b14      	ldr	r3, [pc, #80]	; (8008ce4 <USBD_SetConfig+0x118>)
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	461a      	mov	r2, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008c9c:	4b11      	ldr	r3, [pc, #68]	; (8008ce4 <USBD_SetConfig+0x118>)
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f7ff f9a8 	bl	8007ff8 <USBD_SetClassConfig>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b02      	cmp	r3, #2
 8008cac:	d104      	bne.n	8008cb8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008cae:	6839      	ldr	r1, [r7, #0]
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 f8f2 	bl	8008e9a <USBD_CtlError>
            return;
 8008cb6:	e012      	b.n	8008cde <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 f9b6 	bl	800902a <USBD_CtlSendStatus>
        break;
 8008cbe:	e00e      	b.n	8008cde <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f9b2 	bl	800902a <USBD_CtlSendStatus>
        break;
 8008cc6:	e00a      	b.n	8008cde <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f8e5 	bl	8008e9a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008cd0:	4b04      	ldr	r3, [pc, #16]	; (8008ce4 <USBD_SetConfig+0x118>)
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f7ff f9ad 	bl	8008036 <USBD_ClrClassConfig>
        break;
 8008cdc:	bf00      	nop
    }
  }
}
 8008cde:	3708      	adds	r7, #8
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}
 8008ce4:	200004e8 	.word	0x200004e8

08008ce8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	88db      	ldrh	r3, [r3, #6]
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d004      	beq.n	8008d04 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008cfa:	6839      	ldr	r1, [r7, #0]
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 f8cc 	bl	8008e9a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d02:	e022      	b.n	8008d4a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	dc02      	bgt.n	8008d14 <USBD_GetConfig+0x2c>
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	dc03      	bgt.n	8008d1a <USBD_GetConfig+0x32>
 8008d12:	e015      	b.n	8008d40 <USBD_GetConfig+0x58>
 8008d14:	2b03      	cmp	r3, #3
 8008d16:	d00b      	beq.n	8008d30 <USBD_GetConfig+0x48>
 8008d18:	e012      	b.n	8008d40 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	3308      	adds	r3, #8
 8008d24:	2201      	movs	r2, #1
 8008d26:	4619      	mov	r1, r3
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 f920 	bl	8008f6e <USBD_CtlSendData>
        break;
 8008d2e:	e00c      	b.n	8008d4a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	3304      	adds	r3, #4
 8008d34:	2201      	movs	r2, #1
 8008d36:	4619      	mov	r1, r3
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 f918 	bl	8008f6e <USBD_CtlSendData>
        break;
 8008d3e:	e004      	b.n	8008d4a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008d40:	6839      	ldr	r1, [r7, #0]
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 f8a9 	bl	8008e9a <USBD_CtlError>
        break;
 8008d48:	bf00      	nop
}
 8008d4a:	bf00      	nop
 8008d4c:	3708      	adds	r7, #8
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b082      	sub	sp, #8
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
 8008d5a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d62:	3b01      	subs	r3, #1
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d81e      	bhi.n	8008da6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	88db      	ldrh	r3, [r3, #6]
 8008d6c:	2b02      	cmp	r3, #2
 8008d6e:	d004      	beq.n	8008d7a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008d70:	6839      	ldr	r1, [r7, #0]
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 f891 	bl	8008e9a <USBD_CtlError>
        break;
 8008d78:	e01a      	b.n	8008db0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d005      	beq.n	8008d96 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	f043 0202 	orr.w	r2, r3, #2
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	330c      	adds	r3, #12
 8008d9a:	2202      	movs	r2, #2
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f8e5 	bl	8008f6e <USBD_CtlSendData>
      break;
 8008da4:	e004      	b.n	8008db0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008da6:	6839      	ldr	r1, [r7, #0]
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 f876 	bl	8008e9a <USBD_CtlError>
      break;
 8008dae:	bf00      	nop
  }
}
 8008db0:	bf00      	nop
 8008db2:	3708      	adds	r7, #8
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	885b      	ldrh	r3, [r3, #2]
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d106      	bne.n	8008dd8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 f929 	bl	800902a <USBD_CtlSendStatus>
  }
}
 8008dd8:	bf00      	nop
 8008dda:	3708      	adds	r7, #8
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008df0:	3b01      	subs	r3, #1
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	d80b      	bhi.n	8008e0e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	885b      	ldrh	r3, [r3, #2]
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d10c      	bne.n	8008e18 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f90f 	bl	800902a <USBD_CtlSendStatus>
      }
      break;
 8008e0c:	e004      	b.n	8008e18 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008e0e:	6839      	ldr	r1, [r7, #0]
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 f842 	bl	8008e9a <USBD_CtlError>
      break;
 8008e16:	e000      	b.n	8008e1a <USBD_ClrFeature+0x3a>
      break;
 8008e18:	bf00      	nop
  }
}
 8008e1a:	bf00      	nop
 8008e1c:	3708      	adds	r7, #8
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e22:	b480      	push	{r7}
 8008e24:	b083      	sub	sp, #12
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
 8008e2a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	781a      	ldrb	r2, [r3, #0]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	785a      	ldrb	r2, [r3, #1]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	3302      	adds	r3, #2
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	b29a      	uxth	r2, r3
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	3303      	adds	r3, #3
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	021b      	lsls	r3, r3, #8
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	4413      	add	r3, r2
 8008e52:	b29a      	uxth	r2, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	3304      	adds	r3, #4
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	3305      	adds	r3, #5
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	021b      	lsls	r3, r3, #8
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	4413      	add	r3, r2
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	3306      	adds	r3, #6
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	3307      	adds	r3, #7
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	021b      	lsls	r3, r3, #8
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	4413      	add	r3, r2
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	80da      	strh	r2, [r3, #6]

}
 8008e90:	bf00      	nop
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bc80      	pop	{r7}
 8008e98:	4770      	bx	lr

08008e9a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008e9a:	b580      	push	{r7, lr}
 8008e9c:	b082      	sub	sp, #8
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
 8008ea2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008ea4:	2180      	movs	r1, #128	; 0x80
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 fc2e 	bl	8009708 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008eac:	2100      	movs	r1, #0
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 fc2a 	bl	8009708 <USBD_LL_StallEP>
}
 8008eb4:	bf00      	nop
 8008eb6:	3708      	adds	r7, #8
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b086      	sub	sp, #24
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	60f8      	str	r0, [r7, #12]
 8008ec4:	60b9      	str	r1, [r7, #8]
 8008ec6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d032      	beq.n	8008f38 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008ed2:	68f8      	ldr	r0, [r7, #12]
 8008ed4:	f000 f834 	bl	8008f40 <USBD_GetLen>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	3301      	adds	r3, #1
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	005b      	lsls	r3, r3, #1
 8008ee0:	b29a      	uxth	r2, r3
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008ee6:	7dfb      	ldrb	r3, [r7, #23]
 8008ee8:	1c5a      	adds	r2, r3, #1
 8008eea:	75fa      	strb	r2, [r7, #23]
 8008eec:	461a      	mov	r2, r3
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	7812      	ldrb	r2, [r2, #0]
 8008ef6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008ef8:	7dfb      	ldrb	r3, [r7, #23]
 8008efa:	1c5a      	adds	r2, r3, #1
 8008efc:	75fa      	strb	r2, [r7, #23]
 8008efe:	461a      	mov	r2, r3
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	4413      	add	r3, r2
 8008f04:	2203      	movs	r2, #3
 8008f06:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008f08:	e012      	b.n	8008f30 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	1c5a      	adds	r2, r3, #1
 8008f0e:	60fa      	str	r2, [r7, #12]
 8008f10:	7dfa      	ldrb	r2, [r7, #23]
 8008f12:	1c51      	adds	r1, r2, #1
 8008f14:	75f9      	strb	r1, [r7, #23]
 8008f16:	4611      	mov	r1, r2
 8008f18:	68ba      	ldr	r2, [r7, #8]
 8008f1a:	440a      	add	r2, r1
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008f20:	7dfb      	ldrb	r3, [r7, #23]
 8008f22:	1c5a      	adds	r2, r3, #1
 8008f24:	75fa      	strb	r2, [r7, #23]
 8008f26:	461a      	mov	r2, r3
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1e8      	bne.n	8008f0a <USBD_GetString+0x4e>
    }
  }
}
 8008f38:	bf00      	nop
 8008f3a:	3718      	adds	r7, #24
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b085      	sub	sp, #20
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008f4c:	e005      	b.n	8008f5a <USBD_GetLen+0x1a>
  {
    len++;
 8008f4e:	7bfb      	ldrb	r3, [r7, #15]
 8008f50:	3301      	adds	r3, #1
 8008f52:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	3301      	adds	r3, #1
 8008f58:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d1f5      	bne.n	8008f4e <USBD_GetLen+0xe>
  }

  return len;
 8008f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3714      	adds	r7, #20
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bc80      	pop	{r7}
 8008f6c:	4770      	bx	lr

08008f6e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b084      	sub	sp, #16
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	60f8      	str	r0, [r7, #12]
 8008f76:	60b9      	str	r1, [r7, #8]
 8008f78:	4613      	mov	r3, r2
 8008f7a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2202      	movs	r2, #2
 8008f80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008f84:	88fa      	ldrh	r2, [r7, #6]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008f8a:	88fa      	ldrh	r2, [r7, #6]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f90:	88fb      	ldrh	r3, [r7, #6]
 8008f92:	68ba      	ldr	r2, [r7, #8]
 8008f94:	2100      	movs	r1, #0
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f000 fc3e 	bl	8009818 <USBD_LL_Transmit>

  return USBD_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3710      	adds	r7, #16
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b084      	sub	sp, #16
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	60f8      	str	r0, [r7, #12]
 8008fae:	60b9      	str	r1, [r7, #8]
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fb4:	88fb      	ldrh	r3, [r7, #6]
 8008fb6:	68ba      	ldr	r2, [r7, #8]
 8008fb8:	2100      	movs	r1, #0
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f000 fc2c 	bl	8009818 <USBD_LL_Transmit>

  return USBD_OK;
 8008fc0:	2300      	movs	r3, #0
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b084      	sub	sp, #16
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	60f8      	str	r0, [r7, #12]
 8008fd2:	60b9      	str	r1, [r7, #8]
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2203      	movs	r2, #3
 8008fdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008fe0:	88fa      	ldrh	r2, [r7, #6]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008fe8:	88fa      	ldrh	r2, [r7, #6]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ff0:	88fb      	ldrh	r3, [r7, #6]
 8008ff2:	68ba      	ldr	r2, [r7, #8]
 8008ff4:	2100      	movs	r1, #0
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f000 fc31 	bl	800985e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b084      	sub	sp, #16
 800900a:	af00      	add	r7, sp, #0
 800900c:	60f8      	str	r0, [r7, #12]
 800900e:	60b9      	str	r1, [r7, #8]
 8009010:	4613      	mov	r3, r2
 8009012:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009014:	88fb      	ldrh	r3, [r7, #6]
 8009016:	68ba      	ldr	r2, [r7, #8]
 8009018:	2100      	movs	r1, #0
 800901a:	68f8      	ldr	r0, [r7, #12]
 800901c:	f000 fc1f 	bl	800985e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b082      	sub	sp, #8
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2204      	movs	r2, #4
 8009036:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800903a:	2300      	movs	r3, #0
 800903c:	2200      	movs	r2, #0
 800903e:	2100      	movs	r1, #0
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 fbe9 	bl	8009818 <USBD_LL_Transmit>

  return USBD_OK;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3708      	adds	r7, #8
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2205      	movs	r2, #5
 800905c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009060:	2300      	movs	r3, #0
 8009062:	2200      	movs	r2, #0
 8009064:	2100      	movs	r1, #0
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 fbf9 	bl	800985e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3708      	adds	r7, #8
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
	...

08009078 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800907c:	2200      	movs	r2, #0
 800907e:	4912      	ldr	r1, [pc, #72]	; (80090c8 <MX_USB_DEVICE_Init+0x50>)
 8009080:	4812      	ldr	r0, [pc, #72]	; (80090cc <MX_USB_DEVICE_Init+0x54>)
 8009082:	f7fe ff5f 	bl	8007f44 <USBD_Init>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d001      	beq.n	8009090 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800908c:	f7f8 fada 	bl	8001644 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009090:	490f      	ldr	r1, [pc, #60]	; (80090d0 <MX_USB_DEVICE_Init+0x58>)
 8009092:	480e      	ldr	r0, [pc, #56]	; (80090cc <MX_USB_DEVICE_Init+0x54>)
 8009094:	f7fe ff81 	bl	8007f9a <USBD_RegisterClass>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d001      	beq.n	80090a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800909e:	f7f8 fad1 	bl	8001644 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80090a2:	490c      	ldr	r1, [pc, #48]	; (80090d4 <MX_USB_DEVICE_Init+0x5c>)
 80090a4:	4809      	ldr	r0, [pc, #36]	; (80090cc <MX_USB_DEVICE_Init+0x54>)
 80090a6:	f7fe fee1 	bl	8007e6c <USBD_CDC_RegisterInterface>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d001      	beq.n	80090b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80090b0:	f7f8 fac8 	bl	8001644 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80090b4:	4805      	ldr	r0, [pc, #20]	; (80090cc <MX_USB_DEVICE_Init+0x54>)
 80090b6:	f7fe ff89 	bl	8007fcc <USBD_Start>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d001      	beq.n	80090c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80090c0:	f7f8 fac0 	bl	8001644 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80090c4:	bf00      	nop
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	20000130 	.word	0x20000130
 80090cc:	20000718 	.word	0x20000718
 80090d0:	2000001c 	.word	0x2000001c
 80090d4:	20000120 	.word	0x20000120

080090d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80090dc:	2200      	movs	r2, #0
 80090de:	4905      	ldr	r1, [pc, #20]	; (80090f4 <CDC_Init_FS+0x1c>)
 80090e0:	4805      	ldr	r0, [pc, #20]	; (80090f8 <CDC_Init_FS+0x20>)
 80090e2:	f7fe fed9 	bl	8007e98 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80090e6:	4905      	ldr	r1, [pc, #20]	; (80090fc <CDC_Init_FS+0x24>)
 80090e8:	4803      	ldr	r0, [pc, #12]	; (80090f8 <CDC_Init_FS+0x20>)
 80090ea:	f7fe feee 	bl	8007eca <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80090ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	20000dc4 	.word	0x20000dc4
 80090f8:	20000718 	.word	0x20000718
 80090fc:	200009dc 	.word	0x200009dc

08009100 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009100:	b480      	push	{r7}
 8009102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009104:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009106:	4618      	mov	r0, r3
 8009108:	46bd      	mov	sp, r7
 800910a:	bc80      	pop	{r7}
 800910c:	4770      	bx	lr
	...

08009110 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	4603      	mov	r3, r0
 8009118:	6039      	str	r1, [r7, #0]
 800911a:	71fb      	strb	r3, [r7, #7]
 800911c:	4613      	mov	r3, r2
 800911e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009120:	79fb      	ldrb	r3, [r7, #7]
 8009122:	2b23      	cmp	r3, #35	; 0x23
 8009124:	d84a      	bhi.n	80091bc <CDC_Control_FS+0xac>
 8009126:	a201      	add	r2, pc, #4	; (adr r2, 800912c <CDC_Control_FS+0x1c>)
 8009128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800912c:	080091bd 	.word	0x080091bd
 8009130:	080091bd 	.word	0x080091bd
 8009134:	080091bd 	.word	0x080091bd
 8009138:	080091bd 	.word	0x080091bd
 800913c:	080091bd 	.word	0x080091bd
 8009140:	080091bd 	.word	0x080091bd
 8009144:	080091bd 	.word	0x080091bd
 8009148:	080091bd 	.word	0x080091bd
 800914c:	080091bd 	.word	0x080091bd
 8009150:	080091bd 	.word	0x080091bd
 8009154:	080091bd 	.word	0x080091bd
 8009158:	080091bd 	.word	0x080091bd
 800915c:	080091bd 	.word	0x080091bd
 8009160:	080091bd 	.word	0x080091bd
 8009164:	080091bd 	.word	0x080091bd
 8009168:	080091bd 	.word	0x080091bd
 800916c:	080091bd 	.word	0x080091bd
 8009170:	080091bd 	.word	0x080091bd
 8009174:	080091bd 	.word	0x080091bd
 8009178:	080091bd 	.word	0x080091bd
 800917c:	080091bd 	.word	0x080091bd
 8009180:	080091bd 	.word	0x080091bd
 8009184:	080091bd 	.word	0x080091bd
 8009188:	080091bd 	.word	0x080091bd
 800918c:	080091bd 	.word	0x080091bd
 8009190:	080091bd 	.word	0x080091bd
 8009194:	080091bd 	.word	0x080091bd
 8009198:	080091bd 	.word	0x080091bd
 800919c:	080091bd 	.word	0x080091bd
 80091a0:	080091bd 	.word	0x080091bd
 80091a4:	080091bd 	.word	0x080091bd
 80091a8:	080091bd 	.word	0x080091bd
 80091ac:	080091bd 	.word	0x080091bd
 80091b0:	080091bd 	.word	0x080091bd
 80091b4:	080091bd 	.word	0x080091bd
 80091b8:	080091bd 	.word	0x080091bd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80091bc:	bf00      	nop
  }

  return (USBD_OK);
 80091be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bc80      	pop	{r7}
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop

080091cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80091d6:	6879      	ldr	r1, [r7, #4]
 80091d8:	4805      	ldr	r0, [pc, #20]	; (80091f0 <CDC_Receive_FS+0x24>)
 80091da:	f7fe fe76 	bl	8007eca <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80091de:	4804      	ldr	r0, [pc, #16]	; (80091f0 <CDC_Receive_FS+0x24>)
 80091e0:	f7fe fe86 	bl	8007ef0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80091e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3708      	adds	r7, #8
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	20000718 	.word	0x20000718

080091f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	4603      	mov	r3, r0
 80091fc:	6039      	str	r1, [r7, #0]
 80091fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	2212      	movs	r2, #18
 8009204:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009206:	4b03      	ldr	r3, [pc, #12]	; (8009214 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009208:	4618      	mov	r0, r3
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	bc80      	pop	{r7}
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	2000014c 	.word	0x2000014c

08009218 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	4603      	mov	r3, r0
 8009220:	6039      	str	r1, [r7, #0]
 8009222:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	2204      	movs	r2, #4
 8009228:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800922a:	4b03      	ldr	r3, [pc, #12]	; (8009238 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800922c:	4618      	mov	r0, r3
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	bc80      	pop	{r7}
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop
 8009238:	20000160 	.word	0x20000160

0800923c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	4603      	mov	r3, r0
 8009244:	6039      	str	r1, [r7, #0]
 8009246:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009248:	79fb      	ldrb	r3, [r7, #7]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d105      	bne.n	800925a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800924e:	683a      	ldr	r2, [r7, #0]
 8009250:	4907      	ldr	r1, [pc, #28]	; (8009270 <USBD_FS_ProductStrDescriptor+0x34>)
 8009252:	4808      	ldr	r0, [pc, #32]	; (8009274 <USBD_FS_ProductStrDescriptor+0x38>)
 8009254:	f7ff fe32 	bl	8008ebc <USBD_GetString>
 8009258:	e004      	b.n	8009264 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800925a:	683a      	ldr	r2, [r7, #0]
 800925c:	4904      	ldr	r1, [pc, #16]	; (8009270 <USBD_FS_ProductStrDescriptor+0x34>)
 800925e:	4805      	ldr	r0, [pc, #20]	; (8009274 <USBD_FS_ProductStrDescriptor+0x38>)
 8009260:	f7ff fe2c 	bl	8008ebc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009264:	4b02      	ldr	r3, [pc, #8]	; (8009270 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009266:	4618      	mov	r0, r3
 8009268:	3708      	adds	r7, #8
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	200011ac 	.word	0x200011ac
 8009274:	0800a268 	.word	0x0800a268

08009278 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	4603      	mov	r3, r0
 8009280:	6039      	str	r1, [r7, #0]
 8009282:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009284:	683a      	ldr	r2, [r7, #0]
 8009286:	4904      	ldr	r1, [pc, #16]	; (8009298 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009288:	4804      	ldr	r0, [pc, #16]	; (800929c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800928a:	f7ff fe17 	bl	8008ebc <USBD_GetString>
  return USBD_StrDesc;
 800928e:	4b02      	ldr	r3, [pc, #8]	; (8009298 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009290:	4618      	mov	r0, r3
 8009292:	3708      	adds	r7, #8
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}
 8009298:	200011ac 	.word	0x200011ac
 800929c:	0800a280 	.word	0x0800a280

080092a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	4603      	mov	r3, r0
 80092a8:	6039      	str	r1, [r7, #0]
 80092aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	221a      	movs	r2, #26
 80092b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80092b2:	f000 f843 	bl	800933c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80092b6:	4b02      	ldr	r3, [pc, #8]	; (80092c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	20000164 	.word	0x20000164

080092c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	4603      	mov	r3, r0
 80092cc:	6039      	str	r1, [r7, #0]
 80092ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80092d0:	79fb      	ldrb	r3, [r7, #7]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d105      	bne.n	80092e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80092d6:	683a      	ldr	r2, [r7, #0]
 80092d8:	4907      	ldr	r1, [pc, #28]	; (80092f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80092da:	4808      	ldr	r0, [pc, #32]	; (80092fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80092dc:	f7ff fdee 	bl	8008ebc <USBD_GetString>
 80092e0:	e004      	b.n	80092ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80092e2:	683a      	ldr	r2, [r7, #0]
 80092e4:	4904      	ldr	r1, [pc, #16]	; (80092f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80092e6:	4805      	ldr	r0, [pc, #20]	; (80092fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80092e8:	f7ff fde8 	bl	8008ebc <USBD_GetString>
  }
  return USBD_StrDesc;
 80092ec:	4b02      	ldr	r3, [pc, #8]	; (80092f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3708      	adds	r7, #8
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	200011ac 	.word	0x200011ac
 80092fc:	0800a294 	.word	0x0800a294

08009300 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
 8009306:	4603      	mov	r3, r0
 8009308:	6039      	str	r1, [r7, #0]
 800930a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800930c:	79fb      	ldrb	r3, [r7, #7]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d105      	bne.n	800931e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009312:	683a      	ldr	r2, [r7, #0]
 8009314:	4907      	ldr	r1, [pc, #28]	; (8009334 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009316:	4808      	ldr	r0, [pc, #32]	; (8009338 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009318:	f7ff fdd0 	bl	8008ebc <USBD_GetString>
 800931c:	e004      	b.n	8009328 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800931e:	683a      	ldr	r2, [r7, #0]
 8009320:	4904      	ldr	r1, [pc, #16]	; (8009334 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009322:	4805      	ldr	r0, [pc, #20]	; (8009338 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009324:	f7ff fdca 	bl	8008ebc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009328:	4b02      	ldr	r3, [pc, #8]	; (8009334 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800932a:	4618      	mov	r0, r3
 800932c:	3708      	adds	r7, #8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	200011ac 	.word	0x200011ac
 8009338:	0800a2a0 	.word	0x0800a2a0

0800933c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009342:	4b0f      	ldr	r3, [pc, #60]	; (8009380 <Get_SerialNum+0x44>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009348:	4b0e      	ldr	r3, [pc, #56]	; (8009384 <Get_SerialNum+0x48>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800934e:	4b0e      	ldr	r3, [pc, #56]	; (8009388 <Get_SerialNum+0x4c>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009354:	68fa      	ldr	r2, [r7, #12]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	4413      	add	r3, r2
 800935a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d009      	beq.n	8009376 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009362:	2208      	movs	r2, #8
 8009364:	4909      	ldr	r1, [pc, #36]	; (800938c <Get_SerialNum+0x50>)
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	f000 f814 	bl	8009394 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800936c:	2204      	movs	r2, #4
 800936e:	4908      	ldr	r1, [pc, #32]	; (8009390 <Get_SerialNum+0x54>)
 8009370:	68b8      	ldr	r0, [r7, #8]
 8009372:	f000 f80f 	bl	8009394 <IntToUnicode>
  }
}
 8009376:	bf00      	nop
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	1ffff7e8 	.word	0x1ffff7e8
 8009384:	1ffff7ec 	.word	0x1ffff7ec
 8009388:	1ffff7f0 	.word	0x1ffff7f0
 800938c:	20000166 	.word	0x20000166
 8009390:	20000176 	.word	0x20000176

08009394 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009394:	b480      	push	{r7}
 8009396:	b087      	sub	sp, #28
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	4613      	mov	r3, r2
 80093a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80093a2:	2300      	movs	r3, #0
 80093a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80093a6:	2300      	movs	r3, #0
 80093a8:	75fb      	strb	r3, [r7, #23]
 80093aa:	e027      	b.n	80093fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	0f1b      	lsrs	r3, r3, #28
 80093b0:	2b09      	cmp	r3, #9
 80093b2:	d80b      	bhi.n	80093cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	0f1b      	lsrs	r3, r3, #28
 80093b8:	b2da      	uxtb	r2, r3
 80093ba:	7dfb      	ldrb	r3, [r7, #23]
 80093bc:	005b      	lsls	r3, r3, #1
 80093be:	4619      	mov	r1, r3
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	440b      	add	r3, r1
 80093c4:	3230      	adds	r2, #48	; 0x30
 80093c6:	b2d2      	uxtb	r2, r2
 80093c8:	701a      	strb	r2, [r3, #0]
 80093ca:	e00a      	b.n	80093e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	0f1b      	lsrs	r3, r3, #28
 80093d0:	b2da      	uxtb	r2, r3
 80093d2:	7dfb      	ldrb	r3, [r7, #23]
 80093d4:	005b      	lsls	r3, r3, #1
 80093d6:	4619      	mov	r1, r3
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	440b      	add	r3, r1
 80093dc:	3237      	adds	r2, #55	; 0x37
 80093de:	b2d2      	uxtb	r2, r2
 80093e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	011b      	lsls	r3, r3, #4
 80093e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80093e8:	7dfb      	ldrb	r3, [r7, #23]
 80093ea:	005b      	lsls	r3, r3, #1
 80093ec:	3301      	adds	r3, #1
 80093ee:	68ba      	ldr	r2, [r7, #8]
 80093f0:	4413      	add	r3, r2
 80093f2:	2200      	movs	r2, #0
 80093f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80093f6:	7dfb      	ldrb	r3, [r7, #23]
 80093f8:	3301      	adds	r3, #1
 80093fa:	75fb      	strb	r3, [r7, #23]
 80093fc:	7dfa      	ldrb	r2, [r7, #23]
 80093fe:	79fb      	ldrb	r3, [r7, #7]
 8009400:	429a      	cmp	r2, r3
 8009402:	d3d3      	bcc.n	80093ac <IntToUnicode+0x18>
  }
}
 8009404:	bf00      	nop
 8009406:	bf00      	nop
 8009408:	371c      	adds	r7, #28
 800940a:	46bd      	mov	sp, r7
 800940c:	bc80      	pop	{r7}
 800940e:	4770      	bx	lr

08009410 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a0d      	ldr	r2, [pc, #52]	; (8009454 <HAL_PCD_MspInit+0x44>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d113      	bne.n	800944a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009422:	4b0d      	ldr	r3, [pc, #52]	; (8009458 <HAL_PCD_MspInit+0x48>)
 8009424:	69db      	ldr	r3, [r3, #28]
 8009426:	4a0c      	ldr	r2, [pc, #48]	; (8009458 <HAL_PCD_MspInit+0x48>)
 8009428:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800942c:	61d3      	str	r3, [r2, #28]
 800942e:	4b0a      	ldr	r3, [pc, #40]	; (8009458 <HAL_PCD_MspInit+0x48>)
 8009430:	69db      	ldr	r3, [r3, #28]
 8009432:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009436:	60fb      	str	r3, [r7, #12]
 8009438:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800943a:	2200      	movs	r2, #0
 800943c:	2100      	movs	r1, #0
 800943e:	2014      	movs	r0, #20
 8009440:	f7f8 fc91 	bl	8001d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009444:	2014      	movs	r0, #20
 8009446:	f7f8 fcaa 	bl	8001d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800944a:	bf00      	nop
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	40005c00 	.word	0x40005c00
 8009458:	40021000 	.word	0x40021000

0800945c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8009470:	4619      	mov	r1, r3
 8009472:	4610      	mov	r0, r2
 8009474:	f7fe fdf2 	bl	800805c <USBD_LL_SetupStage>
}
 8009478:	bf00      	nop
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	460b      	mov	r3, r1
 800948a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 8009492:	78fa      	ldrb	r2, [r7, #3]
 8009494:	6879      	ldr	r1, [r7, #4]
 8009496:	4613      	mov	r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	4413      	add	r3, r2
 800949c:	00db      	lsls	r3, r3, #3
 800949e:	440b      	add	r3, r1
 80094a0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	78fb      	ldrb	r3, [r7, #3]
 80094a8:	4619      	mov	r1, r3
 80094aa:	f7fe fe24 	bl	80080f6 <USBD_LL_DataOutStage>
}
 80094ae:	bf00      	nop
 80094b0:	3708      	adds	r7, #8
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b082      	sub	sp, #8
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
 80094be:	460b      	mov	r3, r1
 80094c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 80094c8:	78fa      	ldrb	r2, [r7, #3]
 80094ca:	6879      	ldr	r1, [r7, #4]
 80094cc:	4613      	mov	r3, r2
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	4413      	add	r3, r2
 80094d2:	00db      	lsls	r3, r3, #3
 80094d4:	440b      	add	r3, r1
 80094d6:	3324      	adds	r3, #36	; 0x24
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	78fb      	ldrb	r3, [r7, #3]
 80094dc:	4619      	mov	r1, r3
 80094de:	f7fe fe7b 	bl	80081d8 <USBD_LL_DataInStage>
}
 80094e2:	bf00      	nop
 80094e4:	3708      	adds	r7, #8
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094ea:	b580      	push	{r7, lr}
 80094ec:	b082      	sub	sp, #8
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094f8:	4618      	mov	r0, r3
 80094fa:	f7fe ff8b 	bl	8008414 <USBD_LL_SOF>
}
 80094fe:	bf00      	nop
 8009500:	3708      	adds	r7, #8
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b084      	sub	sp, #16
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800950e:	2301      	movs	r3, #1
 8009510:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	799b      	ldrb	r3, [r3, #6]
 8009516:	2b02      	cmp	r3, #2
 8009518:	d001      	beq.n	800951e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800951a:	f7f8 f893 	bl	8001644 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009524:	7bfa      	ldrb	r2, [r7, #15]
 8009526:	4611      	mov	r1, r2
 8009528:	4618      	mov	r0, r3
 800952a:	f7fe ff3b 	bl	80083a4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009534:	4618      	mov	r0, r3
 8009536:	f7fe fef4 	bl	8008322 <USBD_LL_Reset>
}
 800953a:	bf00      	nop
 800953c:	3710      	adds	r7, #16
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
	...

08009544 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009552:	4618      	mov	r0, r3
 8009554:	f7fe ff35 	bl	80083c2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	7a9b      	ldrb	r3, [r3, #10]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d005      	beq.n	800956c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009560:	4b04      	ldr	r3, [pc, #16]	; (8009574 <HAL_PCD_SuspendCallback+0x30>)
 8009562:	691b      	ldr	r3, [r3, #16]
 8009564:	4a03      	ldr	r2, [pc, #12]	; (8009574 <HAL_PCD_SuspendCallback+0x30>)
 8009566:	f043 0306 	orr.w	r3, r3, #6
 800956a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800956c:	bf00      	nop
 800956e:	3708      	adds	r7, #8
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}
 8009574:	e000ed00 	.word	0xe000ed00

08009578 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009586:	4618      	mov	r0, r3
 8009588:	f7fe ff2f 	bl	80083ea <USBD_LL_Resume>
}
 800958c:	bf00      	nop
 800958e:	3708      	adds	r7, #8
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800959c:	4a28      	ldr	r2, [pc, #160]	; (8009640 <USBD_LL_Init+0xac>)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8c2 32d4 	str.w	r3, [r2, #724]	; 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4a26      	ldr	r2, [pc, #152]	; (8009640 <USBD_LL_Init+0xac>)
 80095a8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80095ac:	4b24      	ldr	r3, [pc, #144]	; (8009640 <USBD_LL_Init+0xac>)
 80095ae:	4a25      	ldr	r2, [pc, #148]	; (8009644 <USBD_LL_Init+0xb0>)
 80095b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80095b2:	4b23      	ldr	r3, [pc, #140]	; (8009640 <USBD_LL_Init+0xac>)
 80095b4:	2208      	movs	r2, #8
 80095b6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80095b8:	4b21      	ldr	r3, [pc, #132]	; (8009640 <USBD_LL_Init+0xac>)
 80095ba:	2202      	movs	r2, #2
 80095bc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80095be:	4b20      	ldr	r3, [pc, #128]	; (8009640 <USBD_LL_Init+0xac>)
 80095c0:	2200      	movs	r2, #0
 80095c2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80095c4:	4b1e      	ldr	r3, [pc, #120]	; (8009640 <USBD_LL_Init+0xac>)
 80095c6:	2200      	movs	r2, #0
 80095c8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80095ca:	4b1d      	ldr	r3, [pc, #116]	; (8009640 <USBD_LL_Init+0xac>)
 80095cc:	2200      	movs	r2, #0
 80095ce:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80095d0:	481b      	ldr	r0, [pc, #108]	; (8009640 <USBD_LL_Init+0xac>)
 80095d2:	f7f9 fa4f 	bl	8002a74 <HAL_PCD_Init>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d001      	beq.n	80095e0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80095dc:	f7f8 f832 	bl	8001644 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80095e6:	2318      	movs	r3, #24
 80095e8:	2200      	movs	r2, #0
 80095ea:	2100      	movs	r1, #0
 80095ec:	f7fa ff63 	bl	80044b6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80095f6:	2358      	movs	r3, #88	; 0x58
 80095f8:	2200      	movs	r2, #0
 80095fa:	2180      	movs	r1, #128	; 0x80
 80095fc:	f7fa ff5b 	bl	80044b6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009606:	23c0      	movs	r3, #192	; 0xc0
 8009608:	2200      	movs	r2, #0
 800960a:	2181      	movs	r1, #129	; 0x81
 800960c:	f7fa ff53 	bl	80044b6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009616:	f44f 7388 	mov.w	r3, #272	; 0x110
 800961a:	2200      	movs	r2, #0
 800961c:	2101      	movs	r1, #1
 800961e:	f7fa ff4a 	bl	80044b6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009628:	f44f 7380 	mov.w	r3, #256	; 0x100
 800962c:	2200      	movs	r2, #0
 800962e:	2182      	movs	r1, #130	; 0x82
 8009630:	f7fa ff41 	bl	80044b6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009634:	2300      	movs	r3, #0
}
 8009636:	4618      	mov	r0, r3
 8009638:	3708      	adds	r7, #8
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop
 8009640:	200013ac 	.word	0x200013ac
 8009644:	40005c00 	.word	0x40005c00

08009648 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009650:	2300      	movs	r3, #0
 8009652:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009654:	2300      	movs	r3, #0
 8009656:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800965e:	4618      	mov	r0, r3
 8009660:	f7f9 fafe 	bl	8002c60 <HAL_PCD_Start>
 8009664:	4603      	mov	r3, r0
 8009666:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009668:	7bfb      	ldrb	r3, [r7, #15]
 800966a:	4618      	mov	r0, r3
 800966c:	f000 f94e 	bl	800990c <USBD_Get_USB_Status>
 8009670:	4603      	mov	r3, r0
 8009672:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009674:	7bbb      	ldrb	r3, [r7, #14]
}
 8009676:	4618      	mov	r0, r3
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}

0800967e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800967e:	b580      	push	{r7, lr}
 8009680:	b084      	sub	sp, #16
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
 8009686:	4608      	mov	r0, r1
 8009688:	4611      	mov	r1, r2
 800968a:	461a      	mov	r2, r3
 800968c:	4603      	mov	r3, r0
 800968e:	70fb      	strb	r3, [r7, #3]
 8009690:	460b      	mov	r3, r1
 8009692:	70bb      	strb	r3, [r7, #2]
 8009694:	4613      	mov	r3, r2
 8009696:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009698:	2300      	movs	r3, #0
 800969a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800969c:	2300      	movs	r3, #0
 800969e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80096a6:	78bb      	ldrb	r3, [r7, #2]
 80096a8:	883a      	ldrh	r2, [r7, #0]
 80096aa:	78f9      	ldrb	r1, [r7, #3]
 80096ac:	f7f9 fc54 	bl	8002f58 <HAL_PCD_EP_Open>
 80096b0:	4603      	mov	r3, r0
 80096b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096b4:	7bfb      	ldrb	r3, [r7, #15]
 80096b6:	4618      	mov	r0, r3
 80096b8:	f000 f928 	bl	800990c <USBD_Get_USB_Status>
 80096bc:	4603      	mov	r3, r0
 80096be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3710      	adds	r7, #16
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b084      	sub	sp, #16
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
 80096d2:	460b      	mov	r3, r1
 80096d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096d6:	2300      	movs	r3, #0
 80096d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096da:	2300      	movs	r3, #0
 80096dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096e4:	78fa      	ldrb	r2, [r7, #3]
 80096e6:	4611      	mov	r1, r2
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7f9 fc92 	bl	8003012 <HAL_PCD_EP_Close>
 80096ee:	4603      	mov	r3, r0
 80096f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096f2:	7bfb      	ldrb	r3, [r7, #15]
 80096f4:	4618      	mov	r0, r3
 80096f6:	f000 f909 	bl	800990c <USBD_Get_USB_Status>
 80096fa:	4603      	mov	r3, r0
 80096fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009700:	4618      	mov	r0, r3
 8009702:	3710      	adds	r7, #16
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	460b      	mov	r3, r1
 8009712:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009714:	2300      	movs	r3, #0
 8009716:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009718:	2300      	movs	r3, #0
 800971a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009722:	78fa      	ldrb	r2, [r7, #3]
 8009724:	4611      	mov	r1, r2
 8009726:	4618      	mov	r0, r3
 8009728:	f7f9 fd3a 	bl	80031a0 <HAL_PCD_EP_SetStall>
 800972c:	4603      	mov	r3, r0
 800972e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009730:	7bfb      	ldrb	r3, [r7, #15]
 8009732:	4618      	mov	r0, r3
 8009734:	f000 f8ea 	bl	800990c <USBD_Get_USB_Status>
 8009738:	4603      	mov	r3, r0
 800973a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800973c:	7bbb      	ldrb	r3, [r7, #14]
}
 800973e:	4618      	mov	r0, r3
 8009740:	3710      	adds	r7, #16
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b084      	sub	sp, #16
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
 800974e:	460b      	mov	r3, r1
 8009750:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009752:	2300      	movs	r3, #0
 8009754:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009756:	2300      	movs	r3, #0
 8009758:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009760:	78fa      	ldrb	r2, [r7, #3]
 8009762:	4611      	mov	r1, r2
 8009764:	4618      	mov	r0, r3
 8009766:	f7f9 fd7b 	bl	8003260 <HAL_PCD_EP_ClrStall>
 800976a:	4603      	mov	r3, r0
 800976c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800976e:	7bfb      	ldrb	r3, [r7, #15]
 8009770:	4618      	mov	r0, r3
 8009772:	f000 f8cb 	bl	800990c <USBD_Get_USB_Status>
 8009776:	4603      	mov	r3, r0
 8009778:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800977a:	7bbb      	ldrb	r3, [r7, #14]
}
 800977c:	4618      	mov	r0, r3
 800977e:	3710      	adds	r7, #16
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009784:	b480      	push	{r7}
 8009786:	b085      	sub	sp, #20
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	460b      	mov	r3, r1
 800978e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009796:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009798:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800979c:	2b00      	cmp	r3, #0
 800979e:	da0b      	bge.n	80097b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80097a0:	78fb      	ldrb	r3, [r7, #3]
 80097a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097a6:	68f9      	ldr	r1, [r7, #12]
 80097a8:	4613      	mov	r3, r2
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	4413      	add	r3, r2
 80097ae:	00db      	lsls	r3, r3, #3
 80097b0:	440b      	add	r3, r1
 80097b2:	3312      	adds	r3, #18
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	e00b      	b.n	80097d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80097b8:	78fb      	ldrb	r3, [r7, #3]
 80097ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097be:	68f9      	ldr	r1, [r7, #12]
 80097c0:	4613      	mov	r3, r2
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	4413      	add	r3, r2
 80097c6:	00db      	lsls	r3, r3, #3
 80097c8:	440b      	add	r3, r1
 80097ca:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 80097ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3714      	adds	r7, #20
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bc80      	pop	{r7}
 80097d8:	4770      	bx	lr

080097da <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80097da:	b580      	push	{r7, lr}
 80097dc:	b084      	sub	sp, #16
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
 80097e2:	460b      	mov	r3, r1
 80097e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097e6:	2300      	movs	r3, #0
 80097e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097ea:	2300      	movs	r3, #0
 80097ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097f4:	78fa      	ldrb	r2, [r7, #3]
 80097f6:	4611      	mov	r1, r2
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7f9 fb89 	bl	8002f10 <HAL_PCD_SetAddress>
 80097fe:	4603      	mov	r3, r0
 8009800:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009802:	7bfb      	ldrb	r3, [r7, #15]
 8009804:	4618      	mov	r0, r3
 8009806:	f000 f881 	bl	800990c <USBD_Get_USB_Status>
 800980a:	4603      	mov	r3, r0
 800980c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800980e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009810:	4618      	mov	r0, r3
 8009812:	3710      	adds	r7, #16
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b086      	sub	sp, #24
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	607a      	str	r2, [r7, #4]
 8009822:	461a      	mov	r2, r3
 8009824:	460b      	mov	r3, r1
 8009826:	72fb      	strb	r3, [r7, #11]
 8009828:	4613      	mov	r3, r2
 800982a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800982c:	2300      	movs	r3, #0
 800982e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009830:	2300      	movs	r3, #0
 8009832:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800983a:	893b      	ldrh	r3, [r7, #8]
 800983c:	7af9      	ldrb	r1, [r7, #11]
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	f7f9 fc77 	bl	8003132 <HAL_PCD_EP_Transmit>
 8009844:	4603      	mov	r3, r0
 8009846:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009848:	7dfb      	ldrb	r3, [r7, #23]
 800984a:	4618      	mov	r0, r3
 800984c:	f000 f85e 	bl	800990c <USBD_Get_USB_Status>
 8009850:	4603      	mov	r3, r0
 8009852:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009854:	7dbb      	ldrb	r3, [r7, #22]
}
 8009856:	4618      	mov	r0, r3
 8009858:	3718      	adds	r7, #24
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}

0800985e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b086      	sub	sp, #24
 8009862:	af00      	add	r7, sp, #0
 8009864:	60f8      	str	r0, [r7, #12]
 8009866:	607a      	str	r2, [r7, #4]
 8009868:	461a      	mov	r2, r3
 800986a:	460b      	mov	r3, r1
 800986c:	72fb      	strb	r3, [r7, #11]
 800986e:	4613      	mov	r3, r2
 8009870:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009872:	2300      	movs	r3, #0
 8009874:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009876:	2300      	movs	r3, #0
 8009878:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009880:	893b      	ldrh	r3, [r7, #8]
 8009882:	7af9      	ldrb	r1, [r7, #11]
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	f7f9 fc0c 	bl	80030a2 <HAL_PCD_EP_Receive>
 800988a:	4603      	mov	r3, r0
 800988c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800988e:	7dfb      	ldrb	r3, [r7, #23]
 8009890:	4618      	mov	r0, r3
 8009892:	f000 f83b 	bl	800990c <USBD_Get_USB_Status>
 8009896:	4603      	mov	r3, r0
 8009898:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800989a:	7dbb      	ldrb	r3, [r7, #22]
}
 800989c:	4618      	mov	r0, r3
 800989e:	3718      	adds	r7, #24
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	460b      	mov	r3, r1
 80098ae:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098b6:	78fa      	ldrb	r2, [r7, #3]
 80098b8:	4611      	mov	r1, r2
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7f9 fc22 	bl	8003104 <HAL_PCD_EP_GetRxCount>
 80098c0:	4603      	mov	r3, r0
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3708      	adds	r7, #8
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
	...

080098cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80098d4:	4b02      	ldr	r3, [pc, #8]	; (80098e0 <USBD_static_malloc+0x14>)
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	370c      	adds	r7, #12
 80098da:	46bd      	mov	sp, r7
 80098dc:	bc80      	pop	{r7}
 80098de:	4770      	bx	lr
 80098e0:	200004ec 	.word	0x200004ec

080098e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]

}
 80098ec:	bf00      	nop
 80098ee:	370c      	adds	r7, #12
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bc80      	pop	{r7}
 80098f4:	4770      	bx	lr

080098f6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098f6:	b480      	push	{r7}
 80098f8:	b083      	sub	sp, #12
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
 80098fe:	460b      	mov	r3, r1
 8009900:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009902:	bf00      	nop
 8009904:	370c      	adds	r7, #12
 8009906:	46bd      	mov	sp, r7
 8009908:	bc80      	pop	{r7}
 800990a:	4770      	bx	lr

0800990c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800990c:	b480      	push	{r7}
 800990e:	b085      	sub	sp, #20
 8009910:	af00      	add	r7, sp, #0
 8009912:	4603      	mov	r3, r0
 8009914:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009916:	2300      	movs	r3, #0
 8009918:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800991a:	79fb      	ldrb	r3, [r7, #7]
 800991c:	2b03      	cmp	r3, #3
 800991e:	d817      	bhi.n	8009950 <USBD_Get_USB_Status+0x44>
 8009920:	a201      	add	r2, pc, #4	; (adr r2, 8009928 <USBD_Get_USB_Status+0x1c>)
 8009922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009926:	bf00      	nop
 8009928:	08009939 	.word	0x08009939
 800992c:	0800993f 	.word	0x0800993f
 8009930:	08009945 	.word	0x08009945
 8009934:	0800994b 	.word	0x0800994b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009938:	2300      	movs	r3, #0
 800993a:	73fb      	strb	r3, [r7, #15]
    break;
 800993c:	e00b      	b.n	8009956 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800993e:	2302      	movs	r3, #2
 8009940:	73fb      	strb	r3, [r7, #15]
    break;
 8009942:	e008      	b.n	8009956 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009944:	2301      	movs	r3, #1
 8009946:	73fb      	strb	r3, [r7, #15]
    break;
 8009948:	e005      	b.n	8009956 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800994a:	2302      	movs	r3, #2
 800994c:	73fb      	strb	r3, [r7, #15]
    break;
 800994e:	e002      	b.n	8009956 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009950:	2302      	movs	r3, #2
 8009952:	73fb      	strb	r3, [r7, #15]
    break;
 8009954:	bf00      	nop
  }
  return usb_status;
 8009956:	7bfb      	ldrb	r3, [r7, #15]
}
 8009958:	4618      	mov	r0, r3
 800995a:	3714      	adds	r7, #20
 800995c:	46bd      	mov	sp, r7
 800995e:	bc80      	pop	{r7}
 8009960:	4770      	bx	lr
 8009962:	bf00      	nop

08009964 <__errno>:
 8009964:	4b01      	ldr	r3, [pc, #4]	; (800996c <__errno+0x8>)
 8009966:	6818      	ldr	r0, [r3, #0]
 8009968:	4770      	bx	lr
 800996a:	bf00      	nop
 800996c:	20000180 	.word	0x20000180

08009970 <__libc_init_array>:
 8009970:	b570      	push	{r4, r5, r6, lr}
 8009972:	2600      	movs	r6, #0
 8009974:	4d0c      	ldr	r5, [pc, #48]	; (80099a8 <__libc_init_array+0x38>)
 8009976:	4c0d      	ldr	r4, [pc, #52]	; (80099ac <__libc_init_array+0x3c>)
 8009978:	1b64      	subs	r4, r4, r5
 800997a:	10a4      	asrs	r4, r4, #2
 800997c:	42a6      	cmp	r6, r4
 800997e:	d109      	bne.n	8009994 <__libc_init_array+0x24>
 8009980:	f000 fc5c 	bl	800a23c <_init>
 8009984:	2600      	movs	r6, #0
 8009986:	4d0a      	ldr	r5, [pc, #40]	; (80099b0 <__libc_init_array+0x40>)
 8009988:	4c0a      	ldr	r4, [pc, #40]	; (80099b4 <__libc_init_array+0x44>)
 800998a:	1b64      	subs	r4, r4, r5
 800998c:	10a4      	asrs	r4, r4, #2
 800998e:	42a6      	cmp	r6, r4
 8009990:	d105      	bne.n	800999e <__libc_init_array+0x2e>
 8009992:	bd70      	pop	{r4, r5, r6, pc}
 8009994:	f855 3b04 	ldr.w	r3, [r5], #4
 8009998:	4798      	blx	r3
 800999a:	3601      	adds	r6, #1
 800999c:	e7ee      	b.n	800997c <__libc_init_array+0xc>
 800999e:	f855 3b04 	ldr.w	r3, [r5], #4
 80099a2:	4798      	blx	r3
 80099a4:	3601      	adds	r6, #1
 80099a6:	e7f2      	b.n	800998e <__libc_init_array+0x1e>
 80099a8:	0800a358 	.word	0x0800a358
 80099ac:	0800a358 	.word	0x0800a358
 80099b0:	0800a358 	.word	0x0800a358
 80099b4:	0800a364 	.word	0x0800a364

080099b8 <memset>:
 80099b8:	4603      	mov	r3, r0
 80099ba:	4402      	add	r2, r0
 80099bc:	4293      	cmp	r3, r2
 80099be:	d100      	bne.n	80099c2 <memset+0xa>
 80099c0:	4770      	bx	lr
 80099c2:	f803 1b01 	strb.w	r1, [r3], #1
 80099c6:	e7f9      	b.n	80099bc <memset+0x4>

080099c8 <siprintf>:
 80099c8:	b40e      	push	{r1, r2, r3}
 80099ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80099ce:	b500      	push	{lr}
 80099d0:	b09c      	sub	sp, #112	; 0x70
 80099d2:	ab1d      	add	r3, sp, #116	; 0x74
 80099d4:	9002      	str	r0, [sp, #8]
 80099d6:	9006      	str	r0, [sp, #24]
 80099d8:	9107      	str	r1, [sp, #28]
 80099da:	9104      	str	r1, [sp, #16]
 80099dc:	4808      	ldr	r0, [pc, #32]	; (8009a00 <siprintf+0x38>)
 80099de:	4909      	ldr	r1, [pc, #36]	; (8009a04 <siprintf+0x3c>)
 80099e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80099e4:	9105      	str	r1, [sp, #20]
 80099e6:	6800      	ldr	r0, [r0, #0]
 80099e8:	a902      	add	r1, sp, #8
 80099ea:	9301      	str	r3, [sp, #4]
 80099ec:	f000 f868 	bl	8009ac0 <_svfiprintf_r>
 80099f0:	2200      	movs	r2, #0
 80099f2:	9b02      	ldr	r3, [sp, #8]
 80099f4:	701a      	strb	r2, [r3, #0]
 80099f6:	b01c      	add	sp, #112	; 0x70
 80099f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80099fc:	b003      	add	sp, #12
 80099fe:	4770      	bx	lr
 8009a00:	20000180 	.word	0x20000180
 8009a04:	ffff0208 	.word	0xffff0208

08009a08 <__ssputs_r>:
 8009a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a0c:	688e      	ldr	r6, [r1, #8]
 8009a0e:	4682      	mov	sl, r0
 8009a10:	429e      	cmp	r6, r3
 8009a12:	460c      	mov	r4, r1
 8009a14:	4690      	mov	r8, r2
 8009a16:	461f      	mov	r7, r3
 8009a18:	d838      	bhi.n	8009a8c <__ssputs_r+0x84>
 8009a1a:	898a      	ldrh	r2, [r1, #12]
 8009a1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a20:	d032      	beq.n	8009a88 <__ssputs_r+0x80>
 8009a22:	6825      	ldr	r5, [r4, #0]
 8009a24:	6909      	ldr	r1, [r1, #16]
 8009a26:	3301      	adds	r3, #1
 8009a28:	eba5 0901 	sub.w	r9, r5, r1
 8009a2c:	6965      	ldr	r5, [r4, #20]
 8009a2e:	444b      	add	r3, r9
 8009a30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a38:	106d      	asrs	r5, r5, #1
 8009a3a:	429d      	cmp	r5, r3
 8009a3c:	bf38      	it	cc
 8009a3e:	461d      	movcc	r5, r3
 8009a40:	0553      	lsls	r3, r2, #21
 8009a42:	d531      	bpl.n	8009aa8 <__ssputs_r+0xa0>
 8009a44:	4629      	mov	r1, r5
 8009a46:	f000 fb53 	bl	800a0f0 <_malloc_r>
 8009a4a:	4606      	mov	r6, r0
 8009a4c:	b950      	cbnz	r0, 8009a64 <__ssputs_r+0x5c>
 8009a4e:	230c      	movs	r3, #12
 8009a50:	f04f 30ff 	mov.w	r0, #4294967295
 8009a54:	f8ca 3000 	str.w	r3, [sl]
 8009a58:	89a3      	ldrh	r3, [r4, #12]
 8009a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a5e:	81a3      	strh	r3, [r4, #12]
 8009a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a64:	464a      	mov	r2, r9
 8009a66:	6921      	ldr	r1, [r4, #16]
 8009a68:	f000 face 	bl	800a008 <memcpy>
 8009a6c:	89a3      	ldrh	r3, [r4, #12]
 8009a6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a76:	81a3      	strh	r3, [r4, #12]
 8009a78:	6126      	str	r6, [r4, #16]
 8009a7a:	444e      	add	r6, r9
 8009a7c:	6026      	str	r6, [r4, #0]
 8009a7e:	463e      	mov	r6, r7
 8009a80:	6165      	str	r5, [r4, #20]
 8009a82:	eba5 0509 	sub.w	r5, r5, r9
 8009a86:	60a5      	str	r5, [r4, #8]
 8009a88:	42be      	cmp	r6, r7
 8009a8a:	d900      	bls.n	8009a8e <__ssputs_r+0x86>
 8009a8c:	463e      	mov	r6, r7
 8009a8e:	4632      	mov	r2, r6
 8009a90:	4641      	mov	r1, r8
 8009a92:	6820      	ldr	r0, [r4, #0]
 8009a94:	f000 fac6 	bl	800a024 <memmove>
 8009a98:	68a3      	ldr	r3, [r4, #8]
 8009a9a:	6822      	ldr	r2, [r4, #0]
 8009a9c:	1b9b      	subs	r3, r3, r6
 8009a9e:	4432      	add	r2, r6
 8009aa0:	2000      	movs	r0, #0
 8009aa2:	60a3      	str	r3, [r4, #8]
 8009aa4:	6022      	str	r2, [r4, #0]
 8009aa6:	e7db      	b.n	8009a60 <__ssputs_r+0x58>
 8009aa8:	462a      	mov	r2, r5
 8009aaa:	f000 fb7b 	bl	800a1a4 <_realloc_r>
 8009aae:	4606      	mov	r6, r0
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	d1e1      	bne.n	8009a78 <__ssputs_r+0x70>
 8009ab4:	4650      	mov	r0, sl
 8009ab6:	6921      	ldr	r1, [r4, #16]
 8009ab8:	f000 face 	bl	800a058 <_free_r>
 8009abc:	e7c7      	b.n	8009a4e <__ssputs_r+0x46>
	...

08009ac0 <_svfiprintf_r>:
 8009ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac4:	4698      	mov	r8, r3
 8009ac6:	898b      	ldrh	r3, [r1, #12]
 8009ac8:	4607      	mov	r7, r0
 8009aca:	061b      	lsls	r3, r3, #24
 8009acc:	460d      	mov	r5, r1
 8009ace:	4614      	mov	r4, r2
 8009ad0:	b09d      	sub	sp, #116	; 0x74
 8009ad2:	d50e      	bpl.n	8009af2 <_svfiprintf_r+0x32>
 8009ad4:	690b      	ldr	r3, [r1, #16]
 8009ad6:	b963      	cbnz	r3, 8009af2 <_svfiprintf_r+0x32>
 8009ad8:	2140      	movs	r1, #64	; 0x40
 8009ada:	f000 fb09 	bl	800a0f0 <_malloc_r>
 8009ade:	6028      	str	r0, [r5, #0]
 8009ae0:	6128      	str	r0, [r5, #16]
 8009ae2:	b920      	cbnz	r0, 8009aee <_svfiprintf_r+0x2e>
 8009ae4:	230c      	movs	r3, #12
 8009ae6:	603b      	str	r3, [r7, #0]
 8009ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8009aec:	e0d1      	b.n	8009c92 <_svfiprintf_r+0x1d2>
 8009aee:	2340      	movs	r3, #64	; 0x40
 8009af0:	616b      	str	r3, [r5, #20]
 8009af2:	2300      	movs	r3, #0
 8009af4:	9309      	str	r3, [sp, #36]	; 0x24
 8009af6:	2320      	movs	r3, #32
 8009af8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009afc:	2330      	movs	r3, #48	; 0x30
 8009afe:	f04f 0901 	mov.w	r9, #1
 8009b02:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b06:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009cac <_svfiprintf_r+0x1ec>
 8009b0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b0e:	4623      	mov	r3, r4
 8009b10:	469a      	mov	sl, r3
 8009b12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b16:	b10a      	cbz	r2, 8009b1c <_svfiprintf_r+0x5c>
 8009b18:	2a25      	cmp	r2, #37	; 0x25
 8009b1a:	d1f9      	bne.n	8009b10 <_svfiprintf_r+0x50>
 8009b1c:	ebba 0b04 	subs.w	fp, sl, r4
 8009b20:	d00b      	beq.n	8009b3a <_svfiprintf_r+0x7a>
 8009b22:	465b      	mov	r3, fp
 8009b24:	4622      	mov	r2, r4
 8009b26:	4629      	mov	r1, r5
 8009b28:	4638      	mov	r0, r7
 8009b2a:	f7ff ff6d 	bl	8009a08 <__ssputs_r>
 8009b2e:	3001      	adds	r0, #1
 8009b30:	f000 80aa 	beq.w	8009c88 <_svfiprintf_r+0x1c8>
 8009b34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b36:	445a      	add	r2, fp
 8009b38:	9209      	str	r2, [sp, #36]	; 0x24
 8009b3a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	f000 80a2 	beq.w	8009c88 <_svfiprintf_r+0x1c8>
 8009b44:	2300      	movs	r3, #0
 8009b46:	f04f 32ff 	mov.w	r2, #4294967295
 8009b4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b4e:	f10a 0a01 	add.w	sl, sl, #1
 8009b52:	9304      	str	r3, [sp, #16]
 8009b54:	9307      	str	r3, [sp, #28]
 8009b56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b5a:	931a      	str	r3, [sp, #104]	; 0x68
 8009b5c:	4654      	mov	r4, sl
 8009b5e:	2205      	movs	r2, #5
 8009b60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b64:	4851      	ldr	r0, [pc, #324]	; (8009cac <_svfiprintf_r+0x1ec>)
 8009b66:	f000 fa41 	bl	8009fec <memchr>
 8009b6a:	9a04      	ldr	r2, [sp, #16]
 8009b6c:	b9d8      	cbnz	r0, 8009ba6 <_svfiprintf_r+0xe6>
 8009b6e:	06d0      	lsls	r0, r2, #27
 8009b70:	bf44      	itt	mi
 8009b72:	2320      	movmi	r3, #32
 8009b74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b78:	0711      	lsls	r1, r2, #28
 8009b7a:	bf44      	itt	mi
 8009b7c:	232b      	movmi	r3, #43	; 0x2b
 8009b7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b82:	f89a 3000 	ldrb.w	r3, [sl]
 8009b86:	2b2a      	cmp	r3, #42	; 0x2a
 8009b88:	d015      	beq.n	8009bb6 <_svfiprintf_r+0xf6>
 8009b8a:	4654      	mov	r4, sl
 8009b8c:	2000      	movs	r0, #0
 8009b8e:	f04f 0c0a 	mov.w	ip, #10
 8009b92:	9a07      	ldr	r2, [sp, #28]
 8009b94:	4621      	mov	r1, r4
 8009b96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b9a:	3b30      	subs	r3, #48	; 0x30
 8009b9c:	2b09      	cmp	r3, #9
 8009b9e:	d94e      	bls.n	8009c3e <_svfiprintf_r+0x17e>
 8009ba0:	b1b0      	cbz	r0, 8009bd0 <_svfiprintf_r+0x110>
 8009ba2:	9207      	str	r2, [sp, #28]
 8009ba4:	e014      	b.n	8009bd0 <_svfiprintf_r+0x110>
 8009ba6:	eba0 0308 	sub.w	r3, r0, r8
 8009baa:	fa09 f303 	lsl.w	r3, r9, r3
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	46a2      	mov	sl, r4
 8009bb2:	9304      	str	r3, [sp, #16]
 8009bb4:	e7d2      	b.n	8009b5c <_svfiprintf_r+0x9c>
 8009bb6:	9b03      	ldr	r3, [sp, #12]
 8009bb8:	1d19      	adds	r1, r3, #4
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	9103      	str	r1, [sp, #12]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	bfbb      	ittet	lt
 8009bc2:	425b      	neglt	r3, r3
 8009bc4:	f042 0202 	orrlt.w	r2, r2, #2
 8009bc8:	9307      	strge	r3, [sp, #28]
 8009bca:	9307      	strlt	r3, [sp, #28]
 8009bcc:	bfb8      	it	lt
 8009bce:	9204      	strlt	r2, [sp, #16]
 8009bd0:	7823      	ldrb	r3, [r4, #0]
 8009bd2:	2b2e      	cmp	r3, #46	; 0x2e
 8009bd4:	d10c      	bne.n	8009bf0 <_svfiprintf_r+0x130>
 8009bd6:	7863      	ldrb	r3, [r4, #1]
 8009bd8:	2b2a      	cmp	r3, #42	; 0x2a
 8009bda:	d135      	bne.n	8009c48 <_svfiprintf_r+0x188>
 8009bdc:	9b03      	ldr	r3, [sp, #12]
 8009bde:	3402      	adds	r4, #2
 8009be0:	1d1a      	adds	r2, r3, #4
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	9203      	str	r2, [sp, #12]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	bfb8      	it	lt
 8009bea:	f04f 33ff 	movlt.w	r3, #4294967295
 8009bee:	9305      	str	r3, [sp, #20]
 8009bf0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009cbc <_svfiprintf_r+0x1fc>
 8009bf4:	2203      	movs	r2, #3
 8009bf6:	4650      	mov	r0, sl
 8009bf8:	7821      	ldrb	r1, [r4, #0]
 8009bfa:	f000 f9f7 	bl	8009fec <memchr>
 8009bfe:	b140      	cbz	r0, 8009c12 <_svfiprintf_r+0x152>
 8009c00:	2340      	movs	r3, #64	; 0x40
 8009c02:	eba0 000a 	sub.w	r0, r0, sl
 8009c06:	fa03 f000 	lsl.w	r0, r3, r0
 8009c0a:	9b04      	ldr	r3, [sp, #16]
 8009c0c:	3401      	adds	r4, #1
 8009c0e:	4303      	orrs	r3, r0
 8009c10:	9304      	str	r3, [sp, #16]
 8009c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c16:	2206      	movs	r2, #6
 8009c18:	4825      	ldr	r0, [pc, #148]	; (8009cb0 <_svfiprintf_r+0x1f0>)
 8009c1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c1e:	f000 f9e5 	bl	8009fec <memchr>
 8009c22:	2800      	cmp	r0, #0
 8009c24:	d038      	beq.n	8009c98 <_svfiprintf_r+0x1d8>
 8009c26:	4b23      	ldr	r3, [pc, #140]	; (8009cb4 <_svfiprintf_r+0x1f4>)
 8009c28:	bb1b      	cbnz	r3, 8009c72 <_svfiprintf_r+0x1b2>
 8009c2a:	9b03      	ldr	r3, [sp, #12]
 8009c2c:	3307      	adds	r3, #7
 8009c2e:	f023 0307 	bic.w	r3, r3, #7
 8009c32:	3308      	adds	r3, #8
 8009c34:	9303      	str	r3, [sp, #12]
 8009c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c38:	4433      	add	r3, r6
 8009c3a:	9309      	str	r3, [sp, #36]	; 0x24
 8009c3c:	e767      	b.n	8009b0e <_svfiprintf_r+0x4e>
 8009c3e:	460c      	mov	r4, r1
 8009c40:	2001      	movs	r0, #1
 8009c42:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c46:	e7a5      	b.n	8009b94 <_svfiprintf_r+0xd4>
 8009c48:	2300      	movs	r3, #0
 8009c4a:	f04f 0c0a 	mov.w	ip, #10
 8009c4e:	4619      	mov	r1, r3
 8009c50:	3401      	adds	r4, #1
 8009c52:	9305      	str	r3, [sp, #20]
 8009c54:	4620      	mov	r0, r4
 8009c56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c5a:	3a30      	subs	r2, #48	; 0x30
 8009c5c:	2a09      	cmp	r2, #9
 8009c5e:	d903      	bls.n	8009c68 <_svfiprintf_r+0x1a8>
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d0c5      	beq.n	8009bf0 <_svfiprintf_r+0x130>
 8009c64:	9105      	str	r1, [sp, #20]
 8009c66:	e7c3      	b.n	8009bf0 <_svfiprintf_r+0x130>
 8009c68:	4604      	mov	r4, r0
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c70:	e7f0      	b.n	8009c54 <_svfiprintf_r+0x194>
 8009c72:	ab03      	add	r3, sp, #12
 8009c74:	9300      	str	r3, [sp, #0]
 8009c76:	462a      	mov	r2, r5
 8009c78:	4638      	mov	r0, r7
 8009c7a:	4b0f      	ldr	r3, [pc, #60]	; (8009cb8 <_svfiprintf_r+0x1f8>)
 8009c7c:	a904      	add	r1, sp, #16
 8009c7e:	f3af 8000 	nop.w
 8009c82:	1c42      	adds	r2, r0, #1
 8009c84:	4606      	mov	r6, r0
 8009c86:	d1d6      	bne.n	8009c36 <_svfiprintf_r+0x176>
 8009c88:	89ab      	ldrh	r3, [r5, #12]
 8009c8a:	065b      	lsls	r3, r3, #25
 8009c8c:	f53f af2c 	bmi.w	8009ae8 <_svfiprintf_r+0x28>
 8009c90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c92:	b01d      	add	sp, #116	; 0x74
 8009c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c98:	ab03      	add	r3, sp, #12
 8009c9a:	9300      	str	r3, [sp, #0]
 8009c9c:	462a      	mov	r2, r5
 8009c9e:	4638      	mov	r0, r7
 8009ca0:	4b05      	ldr	r3, [pc, #20]	; (8009cb8 <_svfiprintf_r+0x1f8>)
 8009ca2:	a904      	add	r1, sp, #16
 8009ca4:	f000 f87c 	bl	8009da0 <_printf_i>
 8009ca8:	e7eb      	b.n	8009c82 <_svfiprintf_r+0x1c2>
 8009caa:	bf00      	nop
 8009cac:	0800a322 	.word	0x0800a322
 8009cb0:	0800a32c 	.word	0x0800a32c
 8009cb4:	00000000 	.word	0x00000000
 8009cb8:	08009a09 	.word	0x08009a09
 8009cbc:	0800a328 	.word	0x0800a328

08009cc0 <_printf_common>:
 8009cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cc4:	4616      	mov	r6, r2
 8009cc6:	4699      	mov	r9, r3
 8009cc8:	688a      	ldr	r2, [r1, #8]
 8009cca:	690b      	ldr	r3, [r1, #16]
 8009ccc:	4607      	mov	r7, r0
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	bfb8      	it	lt
 8009cd2:	4613      	movlt	r3, r2
 8009cd4:	6033      	str	r3, [r6, #0]
 8009cd6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009cda:	460c      	mov	r4, r1
 8009cdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ce0:	b10a      	cbz	r2, 8009ce6 <_printf_common+0x26>
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	6033      	str	r3, [r6, #0]
 8009ce6:	6823      	ldr	r3, [r4, #0]
 8009ce8:	0699      	lsls	r1, r3, #26
 8009cea:	bf42      	ittt	mi
 8009cec:	6833      	ldrmi	r3, [r6, #0]
 8009cee:	3302      	addmi	r3, #2
 8009cf0:	6033      	strmi	r3, [r6, #0]
 8009cf2:	6825      	ldr	r5, [r4, #0]
 8009cf4:	f015 0506 	ands.w	r5, r5, #6
 8009cf8:	d106      	bne.n	8009d08 <_printf_common+0x48>
 8009cfa:	f104 0a19 	add.w	sl, r4, #25
 8009cfe:	68e3      	ldr	r3, [r4, #12]
 8009d00:	6832      	ldr	r2, [r6, #0]
 8009d02:	1a9b      	subs	r3, r3, r2
 8009d04:	42ab      	cmp	r3, r5
 8009d06:	dc28      	bgt.n	8009d5a <_printf_common+0x9a>
 8009d08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d0c:	1e13      	subs	r3, r2, #0
 8009d0e:	6822      	ldr	r2, [r4, #0]
 8009d10:	bf18      	it	ne
 8009d12:	2301      	movne	r3, #1
 8009d14:	0692      	lsls	r2, r2, #26
 8009d16:	d42d      	bmi.n	8009d74 <_printf_common+0xb4>
 8009d18:	4649      	mov	r1, r9
 8009d1a:	4638      	mov	r0, r7
 8009d1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d20:	47c0      	blx	r8
 8009d22:	3001      	adds	r0, #1
 8009d24:	d020      	beq.n	8009d68 <_printf_common+0xa8>
 8009d26:	6823      	ldr	r3, [r4, #0]
 8009d28:	68e5      	ldr	r5, [r4, #12]
 8009d2a:	f003 0306 	and.w	r3, r3, #6
 8009d2e:	2b04      	cmp	r3, #4
 8009d30:	bf18      	it	ne
 8009d32:	2500      	movne	r5, #0
 8009d34:	6832      	ldr	r2, [r6, #0]
 8009d36:	f04f 0600 	mov.w	r6, #0
 8009d3a:	68a3      	ldr	r3, [r4, #8]
 8009d3c:	bf08      	it	eq
 8009d3e:	1aad      	subeq	r5, r5, r2
 8009d40:	6922      	ldr	r2, [r4, #16]
 8009d42:	bf08      	it	eq
 8009d44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	bfc4      	itt	gt
 8009d4c:	1a9b      	subgt	r3, r3, r2
 8009d4e:	18ed      	addgt	r5, r5, r3
 8009d50:	341a      	adds	r4, #26
 8009d52:	42b5      	cmp	r5, r6
 8009d54:	d11a      	bne.n	8009d8c <_printf_common+0xcc>
 8009d56:	2000      	movs	r0, #0
 8009d58:	e008      	b.n	8009d6c <_printf_common+0xac>
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	4652      	mov	r2, sl
 8009d5e:	4649      	mov	r1, r9
 8009d60:	4638      	mov	r0, r7
 8009d62:	47c0      	blx	r8
 8009d64:	3001      	adds	r0, #1
 8009d66:	d103      	bne.n	8009d70 <_printf_common+0xb0>
 8009d68:	f04f 30ff 	mov.w	r0, #4294967295
 8009d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d70:	3501      	adds	r5, #1
 8009d72:	e7c4      	b.n	8009cfe <_printf_common+0x3e>
 8009d74:	2030      	movs	r0, #48	; 0x30
 8009d76:	18e1      	adds	r1, r4, r3
 8009d78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d7c:	1c5a      	adds	r2, r3, #1
 8009d7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d82:	4422      	add	r2, r4
 8009d84:	3302      	adds	r3, #2
 8009d86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d8a:	e7c5      	b.n	8009d18 <_printf_common+0x58>
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	4622      	mov	r2, r4
 8009d90:	4649      	mov	r1, r9
 8009d92:	4638      	mov	r0, r7
 8009d94:	47c0      	blx	r8
 8009d96:	3001      	adds	r0, #1
 8009d98:	d0e6      	beq.n	8009d68 <_printf_common+0xa8>
 8009d9a:	3601      	adds	r6, #1
 8009d9c:	e7d9      	b.n	8009d52 <_printf_common+0x92>
	...

08009da0 <_printf_i>:
 8009da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009da4:	460c      	mov	r4, r1
 8009da6:	7e27      	ldrb	r7, [r4, #24]
 8009da8:	4691      	mov	r9, r2
 8009daa:	2f78      	cmp	r7, #120	; 0x78
 8009dac:	4680      	mov	r8, r0
 8009dae:	469a      	mov	sl, r3
 8009db0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009db2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009db6:	d807      	bhi.n	8009dc8 <_printf_i+0x28>
 8009db8:	2f62      	cmp	r7, #98	; 0x62
 8009dba:	d80a      	bhi.n	8009dd2 <_printf_i+0x32>
 8009dbc:	2f00      	cmp	r7, #0
 8009dbe:	f000 80d9 	beq.w	8009f74 <_printf_i+0x1d4>
 8009dc2:	2f58      	cmp	r7, #88	; 0x58
 8009dc4:	f000 80a4 	beq.w	8009f10 <_printf_i+0x170>
 8009dc8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009dcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009dd0:	e03a      	b.n	8009e48 <_printf_i+0xa8>
 8009dd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009dd6:	2b15      	cmp	r3, #21
 8009dd8:	d8f6      	bhi.n	8009dc8 <_printf_i+0x28>
 8009dda:	a001      	add	r0, pc, #4	; (adr r0, 8009de0 <_printf_i+0x40>)
 8009ddc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009de0:	08009e39 	.word	0x08009e39
 8009de4:	08009e4d 	.word	0x08009e4d
 8009de8:	08009dc9 	.word	0x08009dc9
 8009dec:	08009dc9 	.word	0x08009dc9
 8009df0:	08009dc9 	.word	0x08009dc9
 8009df4:	08009dc9 	.word	0x08009dc9
 8009df8:	08009e4d 	.word	0x08009e4d
 8009dfc:	08009dc9 	.word	0x08009dc9
 8009e00:	08009dc9 	.word	0x08009dc9
 8009e04:	08009dc9 	.word	0x08009dc9
 8009e08:	08009dc9 	.word	0x08009dc9
 8009e0c:	08009f5b 	.word	0x08009f5b
 8009e10:	08009e7d 	.word	0x08009e7d
 8009e14:	08009f3d 	.word	0x08009f3d
 8009e18:	08009dc9 	.word	0x08009dc9
 8009e1c:	08009dc9 	.word	0x08009dc9
 8009e20:	08009f7d 	.word	0x08009f7d
 8009e24:	08009dc9 	.word	0x08009dc9
 8009e28:	08009e7d 	.word	0x08009e7d
 8009e2c:	08009dc9 	.word	0x08009dc9
 8009e30:	08009dc9 	.word	0x08009dc9
 8009e34:	08009f45 	.word	0x08009f45
 8009e38:	680b      	ldr	r3, [r1, #0]
 8009e3a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009e3e:	1d1a      	adds	r2, r3, #4
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	600a      	str	r2, [r1, #0]
 8009e44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e48:	2301      	movs	r3, #1
 8009e4a:	e0a4      	b.n	8009f96 <_printf_i+0x1f6>
 8009e4c:	6825      	ldr	r5, [r4, #0]
 8009e4e:	6808      	ldr	r0, [r1, #0]
 8009e50:	062e      	lsls	r6, r5, #24
 8009e52:	f100 0304 	add.w	r3, r0, #4
 8009e56:	d50a      	bpl.n	8009e6e <_printf_i+0xce>
 8009e58:	6805      	ldr	r5, [r0, #0]
 8009e5a:	600b      	str	r3, [r1, #0]
 8009e5c:	2d00      	cmp	r5, #0
 8009e5e:	da03      	bge.n	8009e68 <_printf_i+0xc8>
 8009e60:	232d      	movs	r3, #45	; 0x2d
 8009e62:	426d      	negs	r5, r5
 8009e64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e68:	230a      	movs	r3, #10
 8009e6a:	485e      	ldr	r0, [pc, #376]	; (8009fe4 <_printf_i+0x244>)
 8009e6c:	e019      	b.n	8009ea2 <_printf_i+0x102>
 8009e6e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009e72:	6805      	ldr	r5, [r0, #0]
 8009e74:	600b      	str	r3, [r1, #0]
 8009e76:	bf18      	it	ne
 8009e78:	b22d      	sxthne	r5, r5
 8009e7a:	e7ef      	b.n	8009e5c <_printf_i+0xbc>
 8009e7c:	680b      	ldr	r3, [r1, #0]
 8009e7e:	6825      	ldr	r5, [r4, #0]
 8009e80:	1d18      	adds	r0, r3, #4
 8009e82:	6008      	str	r0, [r1, #0]
 8009e84:	0628      	lsls	r0, r5, #24
 8009e86:	d501      	bpl.n	8009e8c <_printf_i+0xec>
 8009e88:	681d      	ldr	r5, [r3, #0]
 8009e8a:	e002      	b.n	8009e92 <_printf_i+0xf2>
 8009e8c:	0669      	lsls	r1, r5, #25
 8009e8e:	d5fb      	bpl.n	8009e88 <_printf_i+0xe8>
 8009e90:	881d      	ldrh	r5, [r3, #0]
 8009e92:	2f6f      	cmp	r7, #111	; 0x6f
 8009e94:	bf0c      	ite	eq
 8009e96:	2308      	moveq	r3, #8
 8009e98:	230a      	movne	r3, #10
 8009e9a:	4852      	ldr	r0, [pc, #328]	; (8009fe4 <_printf_i+0x244>)
 8009e9c:	2100      	movs	r1, #0
 8009e9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ea2:	6866      	ldr	r6, [r4, #4]
 8009ea4:	2e00      	cmp	r6, #0
 8009ea6:	bfa8      	it	ge
 8009ea8:	6821      	ldrge	r1, [r4, #0]
 8009eaa:	60a6      	str	r6, [r4, #8]
 8009eac:	bfa4      	itt	ge
 8009eae:	f021 0104 	bicge.w	r1, r1, #4
 8009eb2:	6021      	strge	r1, [r4, #0]
 8009eb4:	b90d      	cbnz	r5, 8009eba <_printf_i+0x11a>
 8009eb6:	2e00      	cmp	r6, #0
 8009eb8:	d04d      	beq.n	8009f56 <_printf_i+0x1b6>
 8009eba:	4616      	mov	r6, r2
 8009ebc:	fbb5 f1f3 	udiv	r1, r5, r3
 8009ec0:	fb03 5711 	mls	r7, r3, r1, r5
 8009ec4:	5dc7      	ldrb	r7, [r0, r7]
 8009ec6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009eca:	462f      	mov	r7, r5
 8009ecc:	42bb      	cmp	r3, r7
 8009ece:	460d      	mov	r5, r1
 8009ed0:	d9f4      	bls.n	8009ebc <_printf_i+0x11c>
 8009ed2:	2b08      	cmp	r3, #8
 8009ed4:	d10b      	bne.n	8009eee <_printf_i+0x14e>
 8009ed6:	6823      	ldr	r3, [r4, #0]
 8009ed8:	07df      	lsls	r7, r3, #31
 8009eda:	d508      	bpl.n	8009eee <_printf_i+0x14e>
 8009edc:	6923      	ldr	r3, [r4, #16]
 8009ede:	6861      	ldr	r1, [r4, #4]
 8009ee0:	4299      	cmp	r1, r3
 8009ee2:	bfde      	ittt	le
 8009ee4:	2330      	movle	r3, #48	; 0x30
 8009ee6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009eea:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009eee:	1b92      	subs	r2, r2, r6
 8009ef0:	6122      	str	r2, [r4, #16]
 8009ef2:	464b      	mov	r3, r9
 8009ef4:	4621      	mov	r1, r4
 8009ef6:	4640      	mov	r0, r8
 8009ef8:	f8cd a000 	str.w	sl, [sp]
 8009efc:	aa03      	add	r2, sp, #12
 8009efe:	f7ff fedf 	bl	8009cc0 <_printf_common>
 8009f02:	3001      	adds	r0, #1
 8009f04:	d14c      	bne.n	8009fa0 <_printf_i+0x200>
 8009f06:	f04f 30ff 	mov.w	r0, #4294967295
 8009f0a:	b004      	add	sp, #16
 8009f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f10:	4834      	ldr	r0, [pc, #208]	; (8009fe4 <_printf_i+0x244>)
 8009f12:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009f16:	680e      	ldr	r6, [r1, #0]
 8009f18:	6823      	ldr	r3, [r4, #0]
 8009f1a:	f856 5b04 	ldr.w	r5, [r6], #4
 8009f1e:	061f      	lsls	r7, r3, #24
 8009f20:	600e      	str	r6, [r1, #0]
 8009f22:	d514      	bpl.n	8009f4e <_printf_i+0x1ae>
 8009f24:	07d9      	lsls	r1, r3, #31
 8009f26:	bf44      	itt	mi
 8009f28:	f043 0320 	orrmi.w	r3, r3, #32
 8009f2c:	6023      	strmi	r3, [r4, #0]
 8009f2e:	b91d      	cbnz	r5, 8009f38 <_printf_i+0x198>
 8009f30:	6823      	ldr	r3, [r4, #0]
 8009f32:	f023 0320 	bic.w	r3, r3, #32
 8009f36:	6023      	str	r3, [r4, #0]
 8009f38:	2310      	movs	r3, #16
 8009f3a:	e7af      	b.n	8009e9c <_printf_i+0xfc>
 8009f3c:	6823      	ldr	r3, [r4, #0]
 8009f3e:	f043 0320 	orr.w	r3, r3, #32
 8009f42:	6023      	str	r3, [r4, #0]
 8009f44:	2378      	movs	r3, #120	; 0x78
 8009f46:	4828      	ldr	r0, [pc, #160]	; (8009fe8 <_printf_i+0x248>)
 8009f48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009f4c:	e7e3      	b.n	8009f16 <_printf_i+0x176>
 8009f4e:	065e      	lsls	r6, r3, #25
 8009f50:	bf48      	it	mi
 8009f52:	b2ad      	uxthmi	r5, r5
 8009f54:	e7e6      	b.n	8009f24 <_printf_i+0x184>
 8009f56:	4616      	mov	r6, r2
 8009f58:	e7bb      	b.n	8009ed2 <_printf_i+0x132>
 8009f5a:	680b      	ldr	r3, [r1, #0]
 8009f5c:	6826      	ldr	r6, [r4, #0]
 8009f5e:	1d1d      	adds	r5, r3, #4
 8009f60:	6960      	ldr	r0, [r4, #20]
 8009f62:	600d      	str	r5, [r1, #0]
 8009f64:	0635      	lsls	r5, r6, #24
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	d501      	bpl.n	8009f6e <_printf_i+0x1ce>
 8009f6a:	6018      	str	r0, [r3, #0]
 8009f6c:	e002      	b.n	8009f74 <_printf_i+0x1d4>
 8009f6e:	0671      	lsls	r1, r6, #25
 8009f70:	d5fb      	bpl.n	8009f6a <_printf_i+0x1ca>
 8009f72:	8018      	strh	r0, [r3, #0]
 8009f74:	2300      	movs	r3, #0
 8009f76:	4616      	mov	r6, r2
 8009f78:	6123      	str	r3, [r4, #16]
 8009f7a:	e7ba      	b.n	8009ef2 <_printf_i+0x152>
 8009f7c:	680b      	ldr	r3, [r1, #0]
 8009f7e:	1d1a      	adds	r2, r3, #4
 8009f80:	600a      	str	r2, [r1, #0]
 8009f82:	681e      	ldr	r6, [r3, #0]
 8009f84:	2100      	movs	r1, #0
 8009f86:	4630      	mov	r0, r6
 8009f88:	6862      	ldr	r2, [r4, #4]
 8009f8a:	f000 f82f 	bl	8009fec <memchr>
 8009f8e:	b108      	cbz	r0, 8009f94 <_printf_i+0x1f4>
 8009f90:	1b80      	subs	r0, r0, r6
 8009f92:	6060      	str	r0, [r4, #4]
 8009f94:	6863      	ldr	r3, [r4, #4]
 8009f96:	6123      	str	r3, [r4, #16]
 8009f98:	2300      	movs	r3, #0
 8009f9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f9e:	e7a8      	b.n	8009ef2 <_printf_i+0x152>
 8009fa0:	4632      	mov	r2, r6
 8009fa2:	4649      	mov	r1, r9
 8009fa4:	4640      	mov	r0, r8
 8009fa6:	6923      	ldr	r3, [r4, #16]
 8009fa8:	47d0      	blx	sl
 8009faa:	3001      	adds	r0, #1
 8009fac:	d0ab      	beq.n	8009f06 <_printf_i+0x166>
 8009fae:	6823      	ldr	r3, [r4, #0]
 8009fb0:	079b      	lsls	r3, r3, #30
 8009fb2:	d413      	bmi.n	8009fdc <_printf_i+0x23c>
 8009fb4:	68e0      	ldr	r0, [r4, #12]
 8009fb6:	9b03      	ldr	r3, [sp, #12]
 8009fb8:	4298      	cmp	r0, r3
 8009fba:	bfb8      	it	lt
 8009fbc:	4618      	movlt	r0, r3
 8009fbe:	e7a4      	b.n	8009f0a <_printf_i+0x16a>
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	4632      	mov	r2, r6
 8009fc4:	4649      	mov	r1, r9
 8009fc6:	4640      	mov	r0, r8
 8009fc8:	47d0      	blx	sl
 8009fca:	3001      	adds	r0, #1
 8009fcc:	d09b      	beq.n	8009f06 <_printf_i+0x166>
 8009fce:	3501      	adds	r5, #1
 8009fd0:	68e3      	ldr	r3, [r4, #12]
 8009fd2:	9903      	ldr	r1, [sp, #12]
 8009fd4:	1a5b      	subs	r3, r3, r1
 8009fd6:	42ab      	cmp	r3, r5
 8009fd8:	dcf2      	bgt.n	8009fc0 <_printf_i+0x220>
 8009fda:	e7eb      	b.n	8009fb4 <_printf_i+0x214>
 8009fdc:	2500      	movs	r5, #0
 8009fde:	f104 0619 	add.w	r6, r4, #25
 8009fe2:	e7f5      	b.n	8009fd0 <_printf_i+0x230>
 8009fe4:	0800a333 	.word	0x0800a333
 8009fe8:	0800a344 	.word	0x0800a344

08009fec <memchr>:
 8009fec:	4603      	mov	r3, r0
 8009fee:	b510      	push	{r4, lr}
 8009ff0:	b2c9      	uxtb	r1, r1
 8009ff2:	4402      	add	r2, r0
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	d101      	bne.n	8009ffe <memchr+0x12>
 8009ffa:	2000      	movs	r0, #0
 8009ffc:	e003      	b.n	800a006 <memchr+0x1a>
 8009ffe:	7804      	ldrb	r4, [r0, #0]
 800a000:	3301      	adds	r3, #1
 800a002:	428c      	cmp	r4, r1
 800a004:	d1f6      	bne.n	8009ff4 <memchr+0x8>
 800a006:	bd10      	pop	{r4, pc}

0800a008 <memcpy>:
 800a008:	440a      	add	r2, r1
 800a00a:	4291      	cmp	r1, r2
 800a00c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a010:	d100      	bne.n	800a014 <memcpy+0xc>
 800a012:	4770      	bx	lr
 800a014:	b510      	push	{r4, lr}
 800a016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a01a:	4291      	cmp	r1, r2
 800a01c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a020:	d1f9      	bne.n	800a016 <memcpy+0xe>
 800a022:	bd10      	pop	{r4, pc}

0800a024 <memmove>:
 800a024:	4288      	cmp	r0, r1
 800a026:	b510      	push	{r4, lr}
 800a028:	eb01 0402 	add.w	r4, r1, r2
 800a02c:	d902      	bls.n	800a034 <memmove+0x10>
 800a02e:	4284      	cmp	r4, r0
 800a030:	4623      	mov	r3, r4
 800a032:	d807      	bhi.n	800a044 <memmove+0x20>
 800a034:	1e43      	subs	r3, r0, #1
 800a036:	42a1      	cmp	r1, r4
 800a038:	d008      	beq.n	800a04c <memmove+0x28>
 800a03a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a03e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a042:	e7f8      	b.n	800a036 <memmove+0x12>
 800a044:	4601      	mov	r1, r0
 800a046:	4402      	add	r2, r0
 800a048:	428a      	cmp	r2, r1
 800a04a:	d100      	bne.n	800a04e <memmove+0x2a>
 800a04c:	bd10      	pop	{r4, pc}
 800a04e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a052:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a056:	e7f7      	b.n	800a048 <memmove+0x24>

0800a058 <_free_r>:
 800a058:	b538      	push	{r3, r4, r5, lr}
 800a05a:	4605      	mov	r5, r0
 800a05c:	2900      	cmp	r1, #0
 800a05e:	d043      	beq.n	800a0e8 <_free_r+0x90>
 800a060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a064:	1f0c      	subs	r4, r1, #4
 800a066:	2b00      	cmp	r3, #0
 800a068:	bfb8      	it	lt
 800a06a:	18e4      	addlt	r4, r4, r3
 800a06c:	f000 f8d0 	bl	800a210 <__malloc_lock>
 800a070:	4a1e      	ldr	r2, [pc, #120]	; (800a0ec <_free_r+0x94>)
 800a072:	6813      	ldr	r3, [r2, #0]
 800a074:	4610      	mov	r0, r2
 800a076:	b933      	cbnz	r3, 800a086 <_free_r+0x2e>
 800a078:	6063      	str	r3, [r4, #4]
 800a07a:	6014      	str	r4, [r2, #0]
 800a07c:	4628      	mov	r0, r5
 800a07e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a082:	f000 b8cb 	b.w	800a21c <__malloc_unlock>
 800a086:	42a3      	cmp	r3, r4
 800a088:	d90a      	bls.n	800a0a0 <_free_r+0x48>
 800a08a:	6821      	ldr	r1, [r4, #0]
 800a08c:	1862      	adds	r2, r4, r1
 800a08e:	4293      	cmp	r3, r2
 800a090:	bf01      	itttt	eq
 800a092:	681a      	ldreq	r2, [r3, #0]
 800a094:	685b      	ldreq	r3, [r3, #4]
 800a096:	1852      	addeq	r2, r2, r1
 800a098:	6022      	streq	r2, [r4, #0]
 800a09a:	6063      	str	r3, [r4, #4]
 800a09c:	6004      	str	r4, [r0, #0]
 800a09e:	e7ed      	b.n	800a07c <_free_r+0x24>
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	b10b      	cbz	r3, 800a0aa <_free_r+0x52>
 800a0a6:	42a3      	cmp	r3, r4
 800a0a8:	d9fa      	bls.n	800a0a0 <_free_r+0x48>
 800a0aa:	6811      	ldr	r1, [r2, #0]
 800a0ac:	1850      	adds	r0, r2, r1
 800a0ae:	42a0      	cmp	r0, r4
 800a0b0:	d10b      	bne.n	800a0ca <_free_r+0x72>
 800a0b2:	6820      	ldr	r0, [r4, #0]
 800a0b4:	4401      	add	r1, r0
 800a0b6:	1850      	adds	r0, r2, r1
 800a0b8:	4283      	cmp	r3, r0
 800a0ba:	6011      	str	r1, [r2, #0]
 800a0bc:	d1de      	bne.n	800a07c <_free_r+0x24>
 800a0be:	6818      	ldr	r0, [r3, #0]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	4401      	add	r1, r0
 800a0c4:	6011      	str	r1, [r2, #0]
 800a0c6:	6053      	str	r3, [r2, #4]
 800a0c8:	e7d8      	b.n	800a07c <_free_r+0x24>
 800a0ca:	d902      	bls.n	800a0d2 <_free_r+0x7a>
 800a0cc:	230c      	movs	r3, #12
 800a0ce:	602b      	str	r3, [r5, #0]
 800a0d0:	e7d4      	b.n	800a07c <_free_r+0x24>
 800a0d2:	6820      	ldr	r0, [r4, #0]
 800a0d4:	1821      	adds	r1, r4, r0
 800a0d6:	428b      	cmp	r3, r1
 800a0d8:	bf01      	itttt	eq
 800a0da:	6819      	ldreq	r1, [r3, #0]
 800a0dc:	685b      	ldreq	r3, [r3, #4]
 800a0de:	1809      	addeq	r1, r1, r0
 800a0e0:	6021      	streq	r1, [r4, #0]
 800a0e2:	6063      	str	r3, [r4, #4]
 800a0e4:	6054      	str	r4, [r2, #4]
 800a0e6:	e7c9      	b.n	800a07c <_free_r+0x24>
 800a0e8:	bd38      	pop	{r3, r4, r5, pc}
 800a0ea:	bf00      	nop
 800a0ec:	2000070c 	.word	0x2000070c

0800a0f0 <_malloc_r>:
 800a0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0f2:	1ccd      	adds	r5, r1, #3
 800a0f4:	f025 0503 	bic.w	r5, r5, #3
 800a0f8:	3508      	adds	r5, #8
 800a0fa:	2d0c      	cmp	r5, #12
 800a0fc:	bf38      	it	cc
 800a0fe:	250c      	movcc	r5, #12
 800a100:	2d00      	cmp	r5, #0
 800a102:	4606      	mov	r6, r0
 800a104:	db01      	blt.n	800a10a <_malloc_r+0x1a>
 800a106:	42a9      	cmp	r1, r5
 800a108:	d903      	bls.n	800a112 <_malloc_r+0x22>
 800a10a:	230c      	movs	r3, #12
 800a10c:	6033      	str	r3, [r6, #0]
 800a10e:	2000      	movs	r0, #0
 800a110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a112:	f000 f87d 	bl	800a210 <__malloc_lock>
 800a116:	4921      	ldr	r1, [pc, #132]	; (800a19c <_malloc_r+0xac>)
 800a118:	680a      	ldr	r2, [r1, #0]
 800a11a:	4614      	mov	r4, r2
 800a11c:	b99c      	cbnz	r4, 800a146 <_malloc_r+0x56>
 800a11e:	4f20      	ldr	r7, [pc, #128]	; (800a1a0 <_malloc_r+0xb0>)
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	b923      	cbnz	r3, 800a12e <_malloc_r+0x3e>
 800a124:	4621      	mov	r1, r4
 800a126:	4630      	mov	r0, r6
 800a128:	f000 f862 	bl	800a1f0 <_sbrk_r>
 800a12c:	6038      	str	r0, [r7, #0]
 800a12e:	4629      	mov	r1, r5
 800a130:	4630      	mov	r0, r6
 800a132:	f000 f85d 	bl	800a1f0 <_sbrk_r>
 800a136:	1c43      	adds	r3, r0, #1
 800a138:	d123      	bne.n	800a182 <_malloc_r+0x92>
 800a13a:	230c      	movs	r3, #12
 800a13c:	4630      	mov	r0, r6
 800a13e:	6033      	str	r3, [r6, #0]
 800a140:	f000 f86c 	bl	800a21c <__malloc_unlock>
 800a144:	e7e3      	b.n	800a10e <_malloc_r+0x1e>
 800a146:	6823      	ldr	r3, [r4, #0]
 800a148:	1b5b      	subs	r3, r3, r5
 800a14a:	d417      	bmi.n	800a17c <_malloc_r+0x8c>
 800a14c:	2b0b      	cmp	r3, #11
 800a14e:	d903      	bls.n	800a158 <_malloc_r+0x68>
 800a150:	6023      	str	r3, [r4, #0]
 800a152:	441c      	add	r4, r3
 800a154:	6025      	str	r5, [r4, #0]
 800a156:	e004      	b.n	800a162 <_malloc_r+0x72>
 800a158:	6863      	ldr	r3, [r4, #4]
 800a15a:	42a2      	cmp	r2, r4
 800a15c:	bf0c      	ite	eq
 800a15e:	600b      	streq	r3, [r1, #0]
 800a160:	6053      	strne	r3, [r2, #4]
 800a162:	4630      	mov	r0, r6
 800a164:	f000 f85a 	bl	800a21c <__malloc_unlock>
 800a168:	f104 000b 	add.w	r0, r4, #11
 800a16c:	1d23      	adds	r3, r4, #4
 800a16e:	f020 0007 	bic.w	r0, r0, #7
 800a172:	1ac2      	subs	r2, r0, r3
 800a174:	d0cc      	beq.n	800a110 <_malloc_r+0x20>
 800a176:	1a1b      	subs	r3, r3, r0
 800a178:	50a3      	str	r3, [r4, r2]
 800a17a:	e7c9      	b.n	800a110 <_malloc_r+0x20>
 800a17c:	4622      	mov	r2, r4
 800a17e:	6864      	ldr	r4, [r4, #4]
 800a180:	e7cc      	b.n	800a11c <_malloc_r+0x2c>
 800a182:	1cc4      	adds	r4, r0, #3
 800a184:	f024 0403 	bic.w	r4, r4, #3
 800a188:	42a0      	cmp	r0, r4
 800a18a:	d0e3      	beq.n	800a154 <_malloc_r+0x64>
 800a18c:	1a21      	subs	r1, r4, r0
 800a18e:	4630      	mov	r0, r6
 800a190:	f000 f82e 	bl	800a1f0 <_sbrk_r>
 800a194:	3001      	adds	r0, #1
 800a196:	d1dd      	bne.n	800a154 <_malloc_r+0x64>
 800a198:	e7cf      	b.n	800a13a <_malloc_r+0x4a>
 800a19a:	bf00      	nop
 800a19c:	2000070c 	.word	0x2000070c
 800a1a0:	20000710 	.word	0x20000710

0800a1a4 <_realloc_r>:
 800a1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1a6:	4607      	mov	r7, r0
 800a1a8:	4614      	mov	r4, r2
 800a1aa:	460e      	mov	r6, r1
 800a1ac:	b921      	cbnz	r1, 800a1b8 <_realloc_r+0x14>
 800a1ae:	4611      	mov	r1, r2
 800a1b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a1b4:	f7ff bf9c 	b.w	800a0f0 <_malloc_r>
 800a1b8:	b922      	cbnz	r2, 800a1c4 <_realloc_r+0x20>
 800a1ba:	f7ff ff4d 	bl	800a058 <_free_r>
 800a1be:	4625      	mov	r5, r4
 800a1c0:	4628      	mov	r0, r5
 800a1c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1c4:	f000 f830 	bl	800a228 <_malloc_usable_size_r>
 800a1c8:	42a0      	cmp	r0, r4
 800a1ca:	d20f      	bcs.n	800a1ec <_realloc_r+0x48>
 800a1cc:	4621      	mov	r1, r4
 800a1ce:	4638      	mov	r0, r7
 800a1d0:	f7ff ff8e 	bl	800a0f0 <_malloc_r>
 800a1d4:	4605      	mov	r5, r0
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	d0f2      	beq.n	800a1c0 <_realloc_r+0x1c>
 800a1da:	4631      	mov	r1, r6
 800a1dc:	4622      	mov	r2, r4
 800a1de:	f7ff ff13 	bl	800a008 <memcpy>
 800a1e2:	4631      	mov	r1, r6
 800a1e4:	4638      	mov	r0, r7
 800a1e6:	f7ff ff37 	bl	800a058 <_free_r>
 800a1ea:	e7e9      	b.n	800a1c0 <_realloc_r+0x1c>
 800a1ec:	4635      	mov	r5, r6
 800a1ee:	e7e7      	b.n	800a1c0 <_realloc_r+0x1c>

0800a1f0 <_sbrk_r>:
 800a1f0:	b538      	push	{r3, r4, r5, lr}
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	4d05      	ldr	r5, [pc, #20]	; (800a20c <_sbrk_r+0x1c>)
 800a1f6:	4604      	mov	r4, r0
 800a1f8:	4608      	mov	r0, r1
 800a1fa:	602b      	str	r3, [r5, #0]
 800a1fc:	f7f7 fbf4 	bl	80019e8 <_sbrk>
 800a200:	1c43      	adds	r3, r0, #1
 800a202:	d102      	bne.n	800a20a <_sbrk_r+0x1a>
 800a204:	682b      	ldr	r3, [r5, #0]
 800a206:	b103      	cbz	r3, 800a20a <_sbrk_r+0x1a>
 800a208:	6023      	str	r3, [r4, #0]
 800a20a:	bd38      	pop	{r3, r4, r5, pc}
 800a20c:	20001684 	.word	0x20001684

0800a210 <__malloc_lock>:
 800a210:	4801      	ldr	r0, [pc, #4]	; (800a218 <__malloc_lock+0x8>)
 800a212:	f000 b811 	b.w	800a238 <__retarget_lock_acquire_recursive>
 800a216:	bf00      	nop
 800a218:	2000168c 	.word	0x2000168c

0800a21c <__malloc_unlock>:
 800a21c:	4801      	ldr	r0, [pc, #4]	; (800a224 <__malloc_unlock+0x8>)
 800a21e:	f000 b80c 	b.w	800a23a <__retarget_lock_release_recursive>
 800a222:	bf00      	nop
 800a224:	2000168c 	.word	0x2000168c

0800a228 <_malloc_usable_size_r>:
 800a228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a22c:	1f18      	subs	r0, r3, #4
 800a22e:	2b00      	cmp	r3, #0
 800a230:	bfbc      	itt	lt
 800a232:	580b      	ldrlt	r3, [r1, r0]
 800a234:	18c0      	addlt	r0, r0, r3
 800a236:	4770      	bx	lr

0800a238 <__retarget_lock_acquire_recursive>:
 800a238:	4770      	bx	lr

0800a23a <__retarget_lock_release_recursive>:
 800a23a:	4770      	bx	lr

0800a23c <_init>:
 800a23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a23e:	bf00      	nop
 800a240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a242:	bc08      	pop	{r3}
 800a244:	469e      	mov	lr, r3
 800a246:	4770      	bx	lr

0800a248 <_fini>:
 800a248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a24a:	bf00      	nop
 800a24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a24e:	bc08      	pop	{r3}
 800a250:	469e      	mov	lr, r3
 800a252:	4770      	bx	lr
