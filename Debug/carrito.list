
carrito.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb60  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b8  0800ec70  0800ec70  0001ec70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f428  0800f428  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800f428  0800f428  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f428  0800f428  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0800f428  0800f428  0001f428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f438  0800f438  0001f438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800f43c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015e8  200001e8  0800f624  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017d0  0800f624  000217d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e0fe  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000060e8  00000000  00000000  0004e30f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c0  00000000  00000000  000543f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016f0  00000000  00000000  00055cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002176d  00000000  00000000  000573a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021516  00000000  00000000  00078b15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b958  00000000  00000000  0009a02b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00135983  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000752c  00000000  00000000  001359d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ec58 	.word	0x0800ec58

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800ec58 	.word	0x0800ec58

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <__aeabi_f2uiz>:
 800111c:	0042      	lsls	r2, r0, #1
 800111e:	d20e      	bcs.n	800113e <__aeabi_f2uiz+0x22>
 8001120:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001124:	d30b      	bcc.n	800113e <__aeabi_f2uiz+0x22>
 8001126:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800112a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800112e:	d409      	bmi.n	8001144 <__aeabi_f2uiz+0x28>
 8001130:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001138:	fa23 f002 	lsr.w	r0, r3, r2
 800113c:	4770      	bx	lr
 800113e:	f04f 0000 	mov.w	r0, #0
 8001142:	4770      	bx	lr
 8001144:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001148:	d101      	bne.n	800114e <__aeabi_f2uiz+0x32>
 800114a:	0242      	lsls	r2, r0, #9
 800114c:	d102      	bne.n	8001154 <__aeabi_f2uiz+0x38>
 800114e:	f04f 30ff 	mov.w	r0, #4294967295
 8001152:	4770      	bx	lr
 8001154:	f04f 0000 	mov.w	r0, #0
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <SelectPage>:
 * 			 PAGE_1]
 *
 * 	 @retval None
 */
void SelectPage(uint8_t page)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af04      	add	r7, sp, #16
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]

	if (HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, PAGE_ID_ADDR, 1, &page, 1, 100) != HAL_OK)
 8001166:	2364      	movs	r3, #100	; 0x64
 8001168:	9302      	str	r3, [sp, #8]
 800116a:	2301      	movs	r3, #1
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	1dfb      	adds	r3, r7, #7
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2301      	movs	r3, #1
 8001174:	2207      	movs	r2, #7
 8001176:	2150      	movs	r1, #80	; 0x50
 8001178:	4807      	ldr	r0, [pc, #28]	; (8001198 <SelectPage+0x3c>)
 800117a:	f003 fa25 	bl	80045c8 <HAL_I2C_Mem_Write>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d002      	beq.n	800118a <SelectPage+0x2e>
	{
		printf("Register page replacement could not be set\n");
 8001184:	4805      	ldr	r0, [pc, #20]	; (800119c <SelectPage+0x40>)
 8001186:	f00c fd9d 	bl	800dcc4 <puts>
	}
	HAL_Delay(50);
 800118a:	2032      	movs	r0, #50	; 0x32
 800118c:	f002 fcf4 	bl	8003b78 <HAL_Delay>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	200005c4 	.word	0x200005c4
 800119c:	0800ecd0 	.word	0x0800ecd0

080011a0 <ReadData>:
 *			 SENSOR_QUATERNION]
 *
 *   @retval Structure containing the values ​​of the read data
 */
void ReadData(BNO055_Sensors_t *sensorData, BNO055_Sensor_Type sensors)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af04      	add	r7, sp, #16
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	70fb      	strb	r3, [r7, #3]

	uint8_t buffer[8];

	if (sensors & SENSOR_GRAVITY)
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d05c      	beq.n	8001270 <ReadData+0xd0>
	{

		HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_GRAVITY, 1, buffer, 6, HAL_MAX_DELAY);
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	9302      	str	r3, [sp, #8]
 80011bc:	2306      	movs	r3, #6
 80011be:	9301      	str	r3, [sp, #4]
 80011c0:	f107 0308 	add.w	r3, r7, #8
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2301      	movs	r3, #1
 80011c8:	222e      	movs	r2, #46	; 0x2e
 80011ca:	2150      	movs	r1, #80	; 0x50
 80011cc:	48b9      	ldr	r0, [pc, #740]	; (80014b4 <ReadData+0x314>)
 80011ce:	f003 faf5 	bl	80047bc <HAL_I2C_Mem_Read>
		sensorData->Gravity.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0])) / 100.0);
 80011d2:	7a7b      	ldrb	r3, [r7, #9]
 80011d4:	021b      	lsls	r3, r3, #8
 80011d6:	b21a      	sxth	r2, r3
 80011d8:	7a3b      	ldrb	r3, [r7, #8]
 80011da:	b21b      	sxth	r3, r3
 80011dc:	4313      	orrs	r3, r2
 80011de:	b21b      	sxth	r3, r3
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f90f 	bl	8000404 <__aeabi_i2d>
 80011e6:	f04f 0200 	mov.w	r2, #0
 80011ea:	4bb3      	ldr	r3, [pc, #716]	; (80014b8 <ReadData+0x318>)
 80011ec:	f7ff fa9e 	bl	800072c <__aeabi_ddiv>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	f7ff fc46 	bl	8000a88 <__aeabi_d2f>
 80011fc:	4602      	mov	r2, r0
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	63da      	str	r2, [r3, #60]	; 0x3c
		sensorData->Gravity.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2])) / 100.0);
 8001202:	7afb      	ldrb	r3, [r7, #11]
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	b21a      	sxth	r2, r3
 8001208:	7abb      	ldrb	r3, [r7, #10]
 800120a:	b21b      	sxth	r3, r3
 800120c:	4313      	orrs	r3, r2
 800120e:	b21b      	sxth	r3, r3
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f8f7 	bl	8000404 <__aeabi_i2d>
 8001216:	f04f 0200 	mov.w	r2, #0
 800121a:	4ba7      	ldr	r3, [pc, #668]	; (80014b8 <ReadData+0x318>)
 800121c:	f7ff fa86 	bl	800072c <__aeabi_ddiv>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f7ff fc2e 	bl	8000a88 <__aeabi_d2f>
 800122c:	4602      	mov	r2, r0
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	641a      	str	r2, [r3, #64]	; 0x40
		sensorData->Gravity.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4])) / 100.0);
 8001232:	7b7b      	ldrb	r3, [r7, #13]
 8001234:	021b      	lsls	r3, r3, #8
 8001236:	b21a      	sxth	r2, r3
 8001238:	7b3b      	ldrb	r3, [r7, #12]
 800123a:	b21b      	sxth	r3, r3
 800123c:	4313      	orrs	r3, r2
 800123e:	b21b      	sxth	r3, r3
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f8df 	bl	8000404 <__aeabi_i2d>
 8001246:	f04f 0200 	mov.w	r2, #0
 800124a:	4b9b      	ldr	r3, [pc, #620]	; (80014b8 <ReadData+0x318>)
 800124c:	f7ff fa6e 	bl	800072c <__aeabi_ddiv>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4610      	mov	r0, r2
 8001256:	4619      	mov	r1, r3
 8001258:	f7ff fc16 	bl	8000a88 <__aeabi_d2f>
 800125c:	4602      	mov	r2, r0
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	645a      	str	r2, [r3, #68]	; 0x44
		memset(buffer, 0, sizeof(buffer));
 8001262:	f107 0308 	add.w	r3, r7, #8
 8001266:	2208      	movs	r2, #8
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f00c fcb4 	bl	800dbd8 <memset>
	}

	if (sensors & SENSOR_QUATERNION)
 8001270:	78fb      	ldrb	r3, [r7, #3]
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d064      	beq.n	8001344 <ReadData+0x1a4>
	{

		HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_QUATERNION, 1, buffer, 8, HAL_MAX_DELAY);
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	9302      	str	r3, [sp, #8]
 8001280:	2308      	movs	r3, #8
 8001282:	9301      	str	r3, [sp, #4]
 8001284:	f107 0308 	add.w	r3, r7, #8
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	2301      	movs	r3, #1
 800128c:	2220      	movs	r2, #32
 800128e:	2150      	movs	r1, #80	; 0x50
 8001290:	4888      	ldr	r0, [pc, #544]	; (80014b4 <ReadData+0x314>)
 8001292:	f003 fa93 	bl	80047bc <HAL_I2C_Mem_Read>
		sensorData->Quaternion.W = (float)(((int16_t)((buffer[1] << 8) | buffer[0])) / (1 << 14));
 8001296:	7a7b      	ldrb	r3, [r7, #9]
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	b21a      	sxth	r2, r3
 800129c:	7a3b      	ldrb	r3, [r7, #8]
 800129e:	b21b      	sxth	r3, r3
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	da02      	bge.n	80012ae <ReadData+0x10e>
 80012a8:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80012ac:	333f      	adds	r3, #63	; 0x3f
 80012ae:	139b      	asrs	r3, r3, #14
 80012b0:	b21b      	sxth	r3, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fcf2 	bl	8000c9c <__aeabi_i2f>
 80012b8:	4602      	mov	r2, r0
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	649a      	str	r2, [r3, #72]	; 0x48
		sensorData->Quaternion.X = (float)(((int16_t)((buffer[3] << 8) | buffer[2])) / (1 << 14));
 80012be:	7afb      	ldrb	r3, [r7, #11]
 80012c0:	021b      	lsls	r3, r3, #8
 80012c2:	b21a      	sxth	r2, r3
 80012c4:	7abb      	ldrb	r3, [r7, #10]
 80012c6:	b21b      	sxth	r3, r3
 80012c8:	4313      	orrs	r3, r2
 80012ca:	b21b      	sxth	r3, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	da02      	bge.n	80012d6 <ReadData+0x136>
 80012d0:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80012d4:	333f      	adds	r3, #63	; 0x3f
 80012d6:	139b      	asrs	r3, r3, #14
 80012d8:	b21b      	sxth	r3, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fcde 	bl	8000c9c <__aeabi_i2f>
 80012e0:	4602      	mov	r2, r0
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	64da      	str	r2, [r3, #76]	; 0x4c
		sensorData->Quaternion.Y = (float)(((int16_t)((buffer[5] << 8) | buffer[4])) / (1 << 14));
 80012e6:	7b7b      	ldrb	r3, [r7, #13]
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	b21a      	sxth	r2, r3
 80012ec:	7b3b      	ldrb	r3, [r7, #12]
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	4313      	orrs	r3, r2
 80012f2:	b21b      	sxth	r3, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	da02      	bge.n	80012fe <ReadData+0x15e>
 80012f8:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80012fc:	333f      	adds	r3, #63	; 0x3f
 80012fe:	139b      	asrs	r3, r3, #14
 8001300:	b21b      	sxth	r3, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fcca 	bl	8000c9c <__aeabi_i2f>
 8001308:	4602      	mov	r2, r0
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	651a      	str	r2, [r3, #80]	; 0x50
		sensorData->Quaternion.Z = (float)(((int16_t)((buffer[7] << 8) | buffer[6])) / (1 << 14));
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	021b      	lsls	r3, r3, #8
 8001312:	b21a      	sxth	r2, r3
 8001314:	7bbb      	ldrb	r3, [r7, #14]
 8001316:	b21b      	sxth	r3, r3
 8001318:	4313      	orrs	r3, r2
 800131a:	b21b      	sxth	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	da02      	bge.n	8001326 <ReadData+0x186>
 8001320:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001324:	333f      	adds	r3, #63	; 0x3f
 8001326:	139b      	asrs	r3, r3, #14
 8001328:	b21b      	sxth	r3, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fcb6 	bl	8000c9c <__aeabi_i2f>
 8001330:	4602      	mov	r2, r0
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	655a      	str	r2, [r3, #84]	; 0x54
		memset(buffer, 0, sizeof(buffer));
 8001336:	f107 0308 	add.w	r3, r7, #8
 800133a:	2208      	movs	r2, #8
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f00c fc4a 	bl	800dbd8 <memset>
	}

	if (sensors & SENSOR_LINACC)
 8001344:	78fb      	ldrb	r3, [r7, #3]
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	2b00      	cmp	r3, #0
 800134c:	d05c      	beq.n	8001408 <ReadData+0x268>
	{

		HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_LINACC, 1, buffer, 6, HAL_MAX_DELAY);
 800134e:	f04f 33ff 	mov.w	r3, #4294967295
 8001352:	9302      	str	r3, [sp, #8]
 8001354:	2306      	movs	r3, #6
 8001356:	9301      	str	r3, [sp, #4]
 8001358:	f107 0308 	add.w	r3, r7, #8
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2301      	movs	r3, #1
 8001360:	2228      	movs	r2, #40	; 0x28
 8001362:	2150      	movs	r1, #80	; 0x50
 8001364:	4853      	ldr	r0, [pc, #332]	; (80014b4 <ReadData+0x314>)
 8001366:	f003 fa29 	bl	80047bc <HAL_I2C_Mem_Read>
		sensorData->LineerAcc.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0])) / 100.0);
 800136a:	7a7b      	ldrb	r3, [r7, #9]
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	b21a      	sxth	r2, r3
 8001370:	7a3b      	ldrb	r3, [r7, #8]
 8001372:	b21b      	sxth	r3, r3
 8001374:	4313      	orrs	r3, r2
 8001376:	b21b      	sxth	r3, r3
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f843 	bl	8000404 <__aeabi_i2d>
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	4b4d      	ldr	r3, [pc, #308]	; (80014b8 <ReadData+0x318>)
 8001384:	f7ff f9d2 	bl	800072c <__aeabi_ddiv>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f7ff fb7a 	bl	8000a88 <__aeabi_d2f>
 8001394:	4602      	mov	r2, r0
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	631a      	str	r2, [r3, #48]	; 0x30
		sensorData->LineerAcc.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2])) / 100.0);
 800139a:	7afb      	ldrb	r3, [r7, #11]
 800139c:	021b      	lsls	r3, r3, #8
 800139e:	b21a      	sxth	r2, r3
 80013a0:	7abb      	ldrb	r3, [r7, #10]
 80013a2:	b21b      	sxth	r3, r3
 80013a4:	4313      	orrs	r3, r2
 80013a6:	b21b      	sxth	r3, r3
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f82b 	bl	8000404 <__aeabi_i2d>
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	4b41      	ldr	r3, [pc, #260]	; (80014b8 <ReadData+0x318>)
 80013b4:	f7ff f9ba 	bl	800072c <__aeabi_ddiv>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	f7ff fb62 	bl	8000a88 <__aeabi_d2f>
 80013c4:	4602      	mov	r2, r0
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	635a      	str	r2, [r3, #52]	; 0x34
		sensorData->LineerAcc.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4])) / 100.0);
 80013ca:	7b7b      	ldrb	r3, [r7, #13]
 80013cc:	021b      	lsls	r3, r3, #8
 80013ce:	b21a      	sxth	r2, r3
 80013d0:	7b3b      	ldrb	r3, [r7, #12]
 80013d2:	b21b      	sxth	r3, r3
 80013d4:	4313      	orrs	r3, r2
 80013d6:	b21b      	sxth	r3, r3
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f813 	bl	8000404 <__aeabi_i2d>
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	4b35      	ldr	r3, [pc, #212]	; (80014b8 <ReadData+0x318>)
 80013e4:	f7ff f9a2 	bl	800072c <__aeabi_ddiv>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	f7ff fb4a 	bl	8000a88 <__aeabi_d2f>
 80013f4:	4602      	mov	r2, r0
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	639a      	str	r2, [r3, #56]	; 0x38
		memset(buffer, 0, sizeof(buffer));
 80013fa:	f107 0308 	add.w	r3, r7, #8
 80013fe:	2208      	movs	r2, #8
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f00c fbe8 	bl	800dbd8 <memset>
	}

	if (sensors & SENSOR_GYRO)
 8001408:	78fb      	ldrb	r3, [r7, #3]
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	2b00      	cmp	r3, #0
 8001410:	d063      	beq.n	80014da <ReadData+0x33a>
	{

		HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_GYRO, 1, buffer, 6, HAL_MAX_DELAY);
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	9302      	str	r3, [sp, #8]
 8001418:	2306      	movs	r3, #6
 800141a:	9301      	str	r3, [sp, #4]
 800141c:	f107 0308 	add.w	r3, r7, #8
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	2301      	movs	r3, #1
 8001424:	2214      	movs	r2, #20
 8001426:	2150      	movs	r1, #80	; 0x50
 8001428:	4822      	ldr	r0, [pc, #136]	; (80014b4 <ReadData+0x314>)
 800142a:	f003 f9c7 	bl	80047bc <HAL_I2C_Mem_Read>
		sensorData->Gyro.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0])) / 16.0);
 800142e:	7a7b      	ldrb	r3, [r7, #9]
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	b21a      	sxth	r2, r3
 8001434:	7a3b      	ldrb	r3, [r7, #8]
 8001436:	b21b      	sxth	r3, r3
 8001438:	4313      	orrs	r3, r2
 800143a:	b21b      	sxth	r3, r3
 800143c:	4618      	mov	r0, r3
 800143e:	f7fe ffe1 	bl	8000404 <__aeabi_i2d>
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <ReadData+0x31c>)
 8001448:	f7ff f970 	bl	800072c <__aeabi_ddiv>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	4610      	mov	r0, r2
 8001452:	4619      	mov	r1, r3
 8001454:	f7ff fb18 	bl	8000a88 <__aeabi_d2f>
 8001458:	4602      	mov	r2, r0
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	60da      	str	r2, [r3, #12]
		sensorData->Gyro.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2])) / 16.0);
 800145e:	7afb      	ldrb	r3, [r7, #11]
 8001460:	021b      	lsls	r3, r3, #8
 8001462:	b21a      	sxth	r2, r3
 8001464:	7abb      	ldrb	r3, [r7, #10]
 8001466:	b21b      	sxth	r3, r3
 8001468:	4313      	orrs	r3, r2
 800146a:	b21b      	sxth	r3, r3
 800146c:	4618      	mov	r0, r3
 800146e:	f7fe ffc9 	bl	8000404 <__aeabi_i2d>
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	4b11      	ldr	r3, [pc, #68]	; (80014bc <ReadData+0x31c>)
 8001478:	f7ff f958 	bl	800072c <__aeabi_ddiv>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4610      	mov	r0, r2
 8001482:	4619      	mov	r1, r3
 8001484:	f7ff fb00 	bl	8000a88 <__aeabi_d2f>
 8001488:	4602      	mov	r2, r0
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	611a      	str	r2, [r3, #16]
		sensorData->Gyro.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4])) / 16.0);
 800148e:	7b7b      	ldrb	r3, [r7, #13]
 8001490:	021b      	lsls	r3, r3, #8
 8001492:	b21a      	sxth	r2, r3
 8001494:	7b3b      	ldrb	r3, [r7, #12]
 8001496:	b21b      	sxth	r3, r3
 8001498:	4313      	orrs	r3, r2
 800149a:	b21b      	sxth	r3, r3
 800149c:	4618      	mov	r0, r3
 800149e:	f7fe ffb1 	bl	8000404 <__aeabi_i2d>
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	4b05      	ldr	r3, [pc, #20]	; (80014bc <ReadData+0x31c>)
 80014a8:	f7ff f940 	bl	800072c <__aeabi_ddiv>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4610      	mov	r0, r2
 80014b2:	e005      	b.n	80014c0 <ReadData+0x320>
 80014b4:	200005c4 	.word	0x200005c4
 80014b8:	40590000 	.word	0x40590000
 80014bc:	40300000 	.word	0x40300000
 80014c0:	4619      	mov	r1, r3
 80014c2:	f7ff fae1 	bl	8000a88 <__aeabi_d2f>
 80014c6:	4602      	mov	r2, r0
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	615a      	str	r2, [r3, #20]
		memset(buffer, 0, sizeof(buffer));
 80014cc:	f107 0308 	add.w	r3, r7, #8
 80014d0:	2208      	movs	r2, #8
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f00c fb7f 	bl	800dbd8 <memset>
	}
	if (sensors & SENSOR_ACCEL)
 80014da:	78fb      	ldrb	r3, [r7, #3]
 80014dc:	f003 0310 	and.w	r3, r3, #16
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d05c      	beq.n	800159e <ReadData+0x3fe>
	{

		HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_ACCEL, 1, buffer, 6, HAL_MAX_DELAY);
 80014e4:	f04f 33ff 	mov.w	r3, #4294967295
 80014e8:	9302      	str	r3, [sp, #8]
 80014ea:	2306      	movs	r3, #6
 80014ec:	9301      	str	r3, [sp, #4]
 80014ee:	f107 0308 	add.w	r3, r7, #8
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	2301      	movs	r3, #1
 80014f6:	2208      	movs	r2, #8
 80014f8:	2150      	movs	r1, #80	; 0x50
 80014fa:	488d      	ldr	r0, [pc, #564]	; (8001730 <ReadData+0x590>)
 80014fc:	f003 f95e 	bl	80047bc <HAL_I2C_Mem_Read>
		sensorData->Accel.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0])) / 100.0);
 8001500:	7a7b      	ldrb	r3, [r7, #9]
 8001502:	021b      	lsls	r3, r3, #8
 8001504:	b21a      	sxth	r2, r3
 8001506:	7a3b      	ldrb	r3, [r7, #8]
 8001508:	b21b      	sxth	r3, r3
 800150a:	4313      	orrs	r3, r2
 800150c:	b21b      	sxth	r3, r3
 800150e:	4618      	mov	r0, r3
 8001510:	f7fe ff78 	bl	8000404 <__aeabi_i2d>
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	4b86      	ldr	r3, [pc, #536]	; (8001734 <ReadData+0x594>)
 800151a:	f7ff f907 	bl	800072c <__aeabi_ddiv>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	f7ff faaf 	bl	8000a88 <__aeabi_d2f>
 800152a:	4602      	mov	r2, r0
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	601a      	str	r2, [r3, #0]
		sensorData->Accel.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2])) / 100.0);
 8001530:	7afb      	ldrb	r3, [r7, #11]
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	b21a      	sxth	r2, r3
 8001536:	7abb      	ldrb	r3, [r7, #10]
 8001538:	b21b      	sxth	r3, r3
 800153a:	4313      	orrs	r3, r2
 800153c:	b21b      	sxth	r3, r3
 800153e:	4618      	mov	r0, r3
 8001540:	f7fe ff60 	bl	8000404 <__aeabi_i2d>
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	4b7a      	ldr	r3, [pc, #488]	; (8001734 <ReadData+0x594>)
 800154a:	f7ff f8ef 	bl	800072c <__aeabi_ddiv>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4610      	mov	r0, r2
 8001554:	4619      	mov	r1, r3
 8001556:	f7ff fa97 	bl	8000a88 <__aeabi_d2f>
 800155a:	4602      	mov	r2, r0
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	605a      	str	r2, [r3, #4]
		sensorData->Accel.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4])) / 100.0);
 8001560:	7b7b      	ldrb	r3, [r7, #13]
 8001562:	021b      	lsls	r3, r3, #8
 8001564:	b21a      	sxth	r2, r3
 8001566:	7b3b      	ldrb	r3, [r7, #12]
 8001568:	b21b      	sxth	r3, r3
 800156a:	4313      	orrs	r3, r2
 800156c:	b21b      	sxth	r3, r3
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe ff48 	bl	8000404 <__aeabi_i2d>
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	4b6e      	ldr	r3, [pc, #440]	; (8001734 <ReadData+0x594>)
 800157a:	f7ff f8d7 	bl	800072c <__aeabi_ddiv>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4610      	mov	r0, r2
 8001584:	4619      	mov	r1, r3
 8001586:	f7ff fa7f 	bl	8000a88 <__aeabi_d2f>
 800158a:	4602      	mov	r2, r0
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	609a      	str	r2, [r3, #8]
		memset(buffer, 0, sizeof(buffer));
 8001590:	f107 0308 	add.w	r3, r7, #8
 8001594:	2208      	movs	r2, #8
 8001596:	2100      	movs	r1, #0
 8001598:	4618      	mov	r0, r3
 800159a:	f00c fb1d 	bl	800dbd8 <memset>
	}
	if (sensors & SENSOR_MAG)
 800159e:	78fb      	ldrb	r3, [r7, #3]
 80015a0:	f003 0320 	and.w	r3, r3, #32
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d05c      	beq.n	8001662 <ReadData+0x4c2>
	{

		HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_MAG, 1, buffer, 6, HAL_MAX_DELAY);
 80015a8:	f04f 33ff 	mov.w	r3, #4294967295
 80015ac:	9302      	str	r3, [sp, #8]
 80015ae:	2306      	movs	r3, #6
 80015b0:	9301      	str	r3, [sp, #4]
 80015b2:	f107 0308 	add.w	r3, r7, #8
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	2301      	movs	r3, #1
 80015ba:	220e      	movs	r2, #14
 80015bc:	2150      	movs	r1, #80	; 0x50
 80015be:	485c      	ldr	r0, [pc, #368]	; (8001730 <ReadData+0x590>)
 80015c0:	f003 f8fc 	bl	80047bc <HAL_I2C_Mem_Read>
		sensorData->Magneto.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0])) / 16.0);
 80015c4:	7a7b      	ldrb	r3, [r7, #9]
 80015c6:	021b      	lsls	r3, r3, #8
 80015c8:	b21a      	sxth	r2, r3
 80015ca:	7a3b      	ldrb	r3, [r7, #8]
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	4313      	orrs	r3, r2
 80015d0:	b21b      	sxth	r3, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe ff16 	bl	8000404 <__aeabi_i2d>
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	4b56      	ldr	r3, [pc, #344]	; (8001738 <ReadData+0x598>)
 80015de:	f7ff f8a5 	bl	800072c <__aeabi_ddiv>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4610      	mov	r0, r2
 80015e8:	4619      	mov	r1, r3
 80015ea:	f7ff fa4d 	bl	8000a88 <__aeabi_d2f>
 80015ee:	4602      	mov	r2, r0
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	619a      	str	r2, [r3, #24]
		sensorData->Magneto.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2])) / 16.0);
 80015f4:	7afb      	ldrb	r3, [r7, #11]
 80015f6:	021b      	lsls	r3, r3, #8
 80015f8:	b21a      	sxth	r2, r3
 80015fa:	7abb      	ldrb	r3, [r7, #10]
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	4313      	orrs	r3, r2
 8001600:	b21b      	sxth	r3, r3
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe fefe 	bl	8000404 <__aeabi_i2d>
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	4b4a      	ldr	r3, [pc, #296]	; (8001738 <ReadData+0x598>)
 800160e:	f7ff f88d 	bl	800072c <__aeabi_ddiv>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	f7ff fa35 	bl	8000a88 <__aeabi_d2f>
 800161e:	4602      	mov	r2, r0
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	61da      	str	r2, [r3, #28]
		sensorData->Magneto.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4])) / 16.0);
 8001624:	7b7b      	ldrb	r3, [r7, #13]
 8001626:	021b      	lsls	r3, r3, #8
 8001628:	b21a      	sxth	r2, r3
 800162a:	7b3b      	ldrb	r3, [r7, #12]
 800162c:	b21b      	sxth	r3, r3
 800162e:	4313      	orrs	r3, r2
 8001630:	b21b      	sxth	r3, r3
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe fee6 	bl	8000404 <__aeabi_i2d>
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	4b3e      	ldr	r3, [pc, #248]	; (8001738 <ReadData+0x598>)
 800163e:	f7ff f875 	bl	800072c <__aeabi_ddiv>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	f7ff fa1d 	bl	8000a88 <__aeabi_d2f>
 800164e:	4602      	mov	r2, r0
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	621a      	str	r2, [r3, #32]
		memset(buffer, 0, sizeof(buffer));
 8001654:	f107 0308 	add.w	r3, r7, #8
 8001658:	2208      	movs	r2, #8
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f00c fabb 	bl	800dbd8 <memset>
	}
	if (sensors & SENSOR_EULER)
 8001662:	78fb      	ldrb	r3, [r7, #3]
 8001664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001668:	2b00      	cmp	r3, #0
 800166a:	d05c      	beq.n	8001726 <ReadData+0x586>
	{

		HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_EULER, 1, buffer, 6, HAL_MAX_DELAY);
 800166c:	f04f 33ff 	mov.w	r3, #4294967295
 8001670:	9302      	str	r3, [sp, #8]
 8001672:	2306      	movs	r3, #6
 8001674:	9301      	str	r3, [sp, #4]
 8001676:	f107 0308 	add.w	r3, r7, #8
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	2301      	movs	r3, #1
 800167e:	221a      	movs	r2, #26
 8001680:	2150      	movs	r1, #80	; 0x50
 8001682:	482b      	ldr	r0, [pc, #172]	; (8001730 <ReadData+0x590>)
 8001684:	f003 f89a 	bl	80047bc <HAL_I2C_Mem_Read>
		sensorData->Euler.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0])) / 16.0);
 8001688:	7a7b      	ldrb	r3, [r7, #9]
 800168a:	021b      	lsls	r3, r3, #8
 800168c:	b21a      	sxth	r2, r3
 800168e:	7a3b      	ldrb	r3, [r7, #8]
 8001690:	b21b      	sxth	r3, r3
 8001692:	4313      	orrs	r3, r2
 8001694:	b21b      	sxth	r3, r3
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe feb4 	bl	8000404 <__aeabi_i2d>
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	4b25      	ldr	r3, [pc, #148]	; (8001738 <ReadData+0x598>)
 80016a2:	f7ff f843 	bl	800072c <__aeabi_ddiv>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	f7ff f9eb 	bl	8000a88 <__aeabi_d2f>
 80016b2:	4602      	mov	r2, r0
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	625a      	str	r2, [r3, #36]	; 0x24
		sensorData->Euler.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2])) / 16.0);
 80016b8:	7afb      	ldrb	r3, [r7, #11]
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	b21a      	sxth	r2, r3
 80016be:	7abb      	ldrb	r3, [r7, #10]
 80016c0:	b21b      	sxth	r3, r3
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b21b      	sxth	r3, r3
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe fe9c 	bl	8000404 <__aeabi_i2d>
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	4b19      	ldr	r3, [pc, #100]	; (8001738 <ReadData+0x598>)
 80016d2:	f7ff f82b 	bl	800072c <__aeabi_ddiv>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	f7ff f9d3 	bl	8000a88 <__aeabi_d2f>
 80016e2:	4602      	mov	r2, r0
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	629a      	str	r2, [r3, #40]	; 0x28
		sensorData->Euler.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4])) / 16.0);
 80016e8:	7b7b      	ldrb	r3, [r7, #13]
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	b21a      	sxth	r2, r3
 80016ee:	7b3b      	ldrb	r3, [r7, #12]
 80016f0:	b21b      	sxth	r3, r3
 80016f2:	4313      	orrs	r3, r2
 80016f4:	b21b      	sxth	r3, r3
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe fe84 	bl	8000404 <__aeabi_i2d>
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <ReadData+0x598>)
 8001702:	f7ff f813 	bl	800072c <__aeabi_ddiv>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4610      	mov	r0, r2
 800170c:	4619      	mov	r1, r3
 800170e:	f7ff f9bb 	bl	8000a88 <__aeabi_d2f>
 8001712:	4602      	mov	r2, r0
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	62da      	str	r2, [r3, #44]	; 0x2c
		memset(buffer, 0, sizeof(buffer));
 8001718:	f107 0308 	add.w	r3, r7, #8
 800171c:	2208      	movs	r2, #8
 800171e:	2100      	movs	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f00c fa59 	bl	800dbd8 <memset>
	}
}
 8001726:	bf00      	nop
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200005c4 	.word	0x200005c4
 8001734:	40590000 	.word	0x40590000
 8001738:	40300000 	.word	0x40300000

0800173c <Set_Operation_Mode>:
 *            NDOF]
 *
 *  @retval None
 */
void Set_Operation_Mode(Op_Modes_t Mode)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af04      	add	r7, sp, #16
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]

	SelectPage(PAGE_0);
 8001746:	2000      	movs	r0, #0
 8001748:	f7ff fd08 	bl	800115c <SelectPage>
	if (HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, OPR_MODE_ADDR, 1, &Mode, 1, 100) != HAL_OK)
 800174c:	2364      	movs	r3, #100	; 0x64
 800174e:	9302      	str	r3, [sp, #8]
 8001750:	2301      	movs	r3, #1
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	1dfb      	adds	r3, r7, #7
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	2301      	movs	r3, #1
 800175a:	223d      	movs	r2, #61	; 0x3d
 800175c:	2150      	movs	r1, #80	; 0x50
 800175e:	480d      	ldr	r0, [pc, #52]	; (8001794 <Set_Operation_Mode+0x58>)
 8001760:	f002 ff32 	bl	80045c8 <HAL_I2C_Mem_Write>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <Set_Operation_Mode+0x36>
	{
		printf("Operation mode could not be set!\n");
 800176a:	480b      	ldr	r0, [pc, #44]	; (8001798 <Set_Operation_Mode+0x5c>)
 800176c:	f00c faaa 	bl	800dcc4 <puts>
 8001770:	e002      	b.n	8001778 <Set_Operation_Mode+0x3c>
	}
	else
		printf("Operation mode switching succeeded.\n");
 8001772:	480a      	ldr	r0, [pc, #40]	; (800179c <Set_Operation_Mode+0x60>)
 8001774:	f00c faa6 	bl	800dcc4 <puts>

	if (Mode == CONFIG_MODE)
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d103      	bne.n	8001786 <Set_Operation_Mode+0x4a>
		HAL_Delay(19);
 800177e:	2013      	movs	r0, #19
 8001780:	f002 f9fa 	bl	8003b78 <HAL_Delay>

	else
		HAL_Delay(9);
}
 8001784:	e002      	b.n	800178c <Set_Operation_Mode+0x50>
		HAL_Delay(9);
 8001786:	2009      	movs	r0, #9
 8001788:	f002 f9f6 	bl	8003b78 <HAL_Delay>
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	200005c4 	.word	0x200005c4
 8001798:	0800ed18 	.word	0x0800ed18
 800179c:	0800ed3c 	.word	0x0800ed3c

080017a0 <SetPowerMODE>:
 *            BNO055_SUSPEND_MODE]
 *
 *  @retval None
 */
void SetPowerMODE(uint8_t BNO055_)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af04      	add	r7, sp, #16
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]

	if (HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, PWR_MODE_ADDR, 1, &BNO055_, 1, 100) != HAL_OK)
 80017aa:	2364      	movs	r3, #100	; 0x64
 80017ac:	9302      	str	r3, [sp, #8]
 80017ae:	2301      	movs	r3, #1
 80017b0:	9301      	str	r3, [sp, #4]
 80017b2:	1dfb      	adds	r3, r7, #7
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	2301      	movs	r3, #1
 80017b8:	223e      	movs	r2, #62	; 0x3e
 80017ba:	2150      	movs	r1, #80	; 0x50
 80017bc:	4809      	ldr	r0, [pc, #36]	; (80017e4 <SetPowerMODE+0x44>)
 80017be:	f002 ff03 	bl	80045c8 <HAL_I2C_Mem_Write>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <SetPowerMODE+0x30>
	{
		printf("Power mode could not be set!\n");
 80017c8:	4807      	ldr	r0, [pc, #28]	; (80017e8 <SetPowerMODE+0x48>)
 80017ca:	f00c fa7b 	bl	800dcc4 <puts>
 80017ce:	e002      	b.n	80017d6 <SetPowerMODE+0x36>
	}
	else
	{
		printf("Power mode switching succeeded.\n");
 80017d0:	4806      	ldr	r0, [pc, #24]	; (80017ec <SetPowerMODE+0x4c>)
 80017d2:	f00c fa77 	bl	800dcc4 <puts>
	}
	HAL_Delay(50);
 80017d6:	2032      	movs	r0, #50	; 0x32
 80017d8:	f002 f9ce 	bl	8003b78 <HAL_Delay>
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	200005c4 	.word	0x200005c4
 80017e8:	0800ed60 	.word	0x0800ed60
 80017ec:	0800ed80 	.word	0x0800ed80

080017f0 <Clock_Source>:
 *            CLOCK_INTERNAL]
 *
 *  @retval None
 */
void Clock_Source(uint8_t source)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af04      	add	r7, sp, #16
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]

	// 7th bit: External Crystal=1; Internal Crystal=0
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, SYS_TRIGGER_ADDR, 1, &source, sizeof(source), 100);
 80017fa:	2364      	movs	r3, #100	; 0x64
 80017fc:	9302      	str	r3, [sp, #8]
 80017fe:	2301      	movs	r3, #1
 8001800:	9301      	str	r3, [sp, #4]
 8001802:	1dfb      	adds	r3, r7, #7
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	2301      	movs	r3, #1
 8001808:	223f      	movs	r2, #63	; 0x3f
 800180a:	2150      	movs	r1, #80	; 0x50
 800180c:	4803      	ldr	r0, [pc, #12]	; (800181c <Clock_Source+0x2c>)
 800180e:	f002 fedb 	bl	80045c8 <HAL_I2C_Mem_Write>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200005c4 	.word	0x200005c4

08001820 <BNO055_Axis>:
 *         	Default Parameters:[DEFAULT_AXIS_REMAP(0x24), DEFAULT_AXIS_SIGN(0x00)]
 *
 *  @retval None
 */
void BNO055_Axis(uint8_t remap, uint8_t sign)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af04      	add	r7, sp, #16
 8001826:	4603      	mov	r3, r0
 8001828:	460a      	mov	r2, r1
 800182a:	71fb      	strb	r3, [r7, #7]
 800182c:	4613      	mov	r3, r2
 800182e:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, AXIS_MAP_CONFIG_ADDR, 1, &remap, 1, 100);
 8001830:	2364      	movs	r3, #100	; 0x64
 8001832:	9302      	str	r3, [sp, #8]
 8001834:	2301      	movs	r3, #1
 8001836:	9301      	str	r3, [sp, #4]
 8001838:	1dfb      	adds	r3, r7, #7
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2301      	movs	r3, #1
 800183e:	2241      	movs	r2, #65	; 0x41
 8001840:	2150      	movs	r1, #80	; 0x50
 8001842:	480c      	ldr	r0, [pc, #48]	; (8001874 <BNO055_Axis+0x54>)
 8001844:	f002 fec0 	bl	80045c8 <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 8001848:	2014      	movs	r0, #20
 800184a:	f002 f995 	bl	8003b78 <HAL_Delay>
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, AXIS_MAP_SIGN_ADDR, 1, &sign, 1, 100);
 800184e:	2364      	movs	r3, #100	; 0x64
 8001850:	9302      	str	r3, [sp, #8]
 8001852:	2301      	movs	r3, #1
 8001854:	9301      	str	r3, [sp, #4]
 8001856:	1dbb      	adds	r3, r7, #6
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	2301      	movs	r3, #1
 800185c:	2242      	movs	r2, #66	; 0x42
 800185e:	2150      	movs	r1, #80	; 0x50
 8001860:	4804      	ldr	r0, [pc, #16]	; (8001874 <BNO055_Axis+0x54>)
 8001862:	f002 feb1 	bl	80045c8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8001866:	2064      	movs	r0, #100	; 0x64
 8001868:	f002 f986 	bl	8003b78 <HAL_Delay>
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	200005c4 	.word	0x200005c4

08001878 <SET_Accel_Range>:
 *            Range_16G]
 *
 *  @retval None
 */
void SET_Accel_Range(uint8_t range)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af04      	add	r7, sp, #16
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, ACC_CONFIG_ADDR, 1, &range, 1, 100);
 8001882:	2364      	movs	r3, #100	; 0x64
 8001884:	9302      	str	r3, [sp, #8]
 8001886:	2301      	movs	r3, #1
 8001888:	9301      	str	r3, [sp, #4]
 800188a:	1dfb      	adds	r3, r7, #7
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	2301      	movs	r3, #1
 8001890:	2208      	movs	r2, #8
 8001892:	2150      	movs	r1, #80	; 0x50
 8001894:	4804      	ldr	r0, [pc, #16]	; (80018a8 <SET_Accel_Range+0x30>)
 8001896:	f002 fe97 	bl	80045c8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800189a:	2064      	movs	r0, #100	; 0x64
 800189c:	f002 f96c 	bl	8003b78 <HAL_Delay>
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	200005c4 	.word	0x200005c4

080018ac <BNO055_Init>:
 *         the configuration information for the BNO055 device.
 *
 * @retval None
 */
void BNO055_Init(BNO055_Init_t Init)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b088      	sub	sp, #32
 80018b0:	af04      	add	r7, sp, #16
 80018b2:	463b      	mov	r3, r7
 80018b4:	e883 0003 	stmia.w	r3, {r0, r1}

	// Set operation mode to config_mode for initialize all register
	Set_Operation_Mode(CONFIG_MODE);
 80018b8:	2000      	movs	r0, #0
 80018ba:	f7ff ff3f 	bl	800173c <Set_Operation_Mode>
	HAL_Delay(50);
 80018be:	2032      	movs	r0, #50	; 0x32
 80018c0:	f002 f95a 	bl	8003b78 <HAL_Delay>
	/*
	 * Set register page number to 1
	 * Configure Accelerometer range
	 */
	SelectPage(PAGE_1);
 80018c4:	2001      	movs	r0, #1
 80018c6:	f7ff fc49 	bl	800115c <SelectPage>
	SET_Accel_Range(Init.ACC_Range);
 80018ca:	79bb      	ldrb	r3, [r7, #6]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ffd3 	bl	8001878 <SET_Accel_Range>
	HAL_Delay(50);
 80018d2:	2032      	movs	r0, #50	; 0x32
 80018d4:	f002 f950 	bl	8003b78 <HAL_Delay>

	// Set register page number to 0
	SelectPage(PAGE_0);
 80018d8:	2000      	movs	r0, #0
 80018da:	f7ff fc3f 	bl	800115c <SelectPage>
	HAL_Delay(50);
 80018de:	2032      	movs	r0, #50	; 0x32
 80018e0:	f002 f94a 	bl	8003b78 <HAL_Delay>

	// Read clock status. If status=0 then it is free to configure the clock source
	uint8_t status;
	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, SYS_CLK_STATUS_ADDR, 1, &status, 1, 100);
 80018e4:	2364      	movs	r3, #100	; 0x64
 80018e6:	9302      	str	r3, [sp, #8]
 80018e8:	2301      	movs	r3, #1
 80018ea:	9301      	str	r3, [sp, #4]
 80018ec:	f107 030f 	add.w	r3, r7, #15
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	2301      	movs	r3, #1
 80018f4:	2238      	movs	r2, #56	; 0x38
 80018f6:	2150      	movs	r1, #80	; 0x50
 80018f8:	481e      	ldr	r0, [pc, #120]	; (8001974 <BNO055_Init+0xc8>)
 80018fa:	f002 ff5f 	bl	80047bc <HAL_I2C_Mem_Read>
	HAL_Delay(50);
 80018fe:	2032      	movs	r0, #50	; 0x32
 8001900:	f002 f93a 	bl	8003b78 <HAL_Delay>
	// Checking if the status bit is 0
	if (status == 0)
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d106      	bne.n	8001918 <BNO055_Init+0x6c>
	{
		// Changing clock source
		Clock_Source(Init.Clock_Source);
 800190a:	797b      	ldrb	r3, [r7, #5]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ff6f 	bl	80017f0 <Clock_Source>
		HAL_Delay(100);
 8001912:	2064      	movs	r0, #100	; 0x64
 8001914:	f002 f930 	bl	8003b78 <HAL_Delay>
	}

	// Configure axis remapping and signing
	BNO055_Axis(Init.Axis, Init.Axis_sign);
 8001918:	787b      	ldrb	r3, [r7, #1]
 800191a:	78ba      	ldrb	r2, [r7, #2]
 800191c:	4611      	mov	r1, r2
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff ff7e 	bl	8001820 <BNO055_Axis>
	HAL_Delay(100);
 8001924:	2064      	movs	r0, #100	; 0x64
 8001926:	f002 f927 	bl	8003b78 <HAL_Delay>

	// Configure data output format and the measurement unit
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, UNIT_SEL_ADDR, 1, &Init.Unit_Sel, sizeof(Init.Unit_Sel), 100);
 800192a:	2364      	movs	r3, #100	; 0x64
 800192c:	9302      	str	r3, [sp, #8]
 800192e:	2301      	movs	r3, #1
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	463b      	mov	r3, r7
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	2301      	movs	r3, #1
 8001938:	223b      	movs	r2, #59	; 0x3b
 800193a:	2150      	movs	r1, #80	; 0x50
 800193c:	480d      	ldr	r0, [pc, #52]	; (8001974 <BNO055_Init+0xc8>)
 800193e:	f002 fe43 	bl	80045c8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8001942:	2064      	movs	r0, #100	; 0x64
 8001944:	f002 f918 	bl	8003b78 <HAL_Delay>

	// Set power mode
	SetPowerMODE(Init.Mode);
 8001948:	78fb      	ldrb	r3, [r7, #3]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff ff28 	bl	80017a0 <SetPowerMODE>
	HAL_Delay(100);
 8001950:	2064      	movs	r0, #100	; 0x64
 8001952:	f002 f911 	bl	8003b78 <HAL_Delay>

	// Set operation mode
	Set_Operation_Mode(Init.OP_Modes);
 8001956:	793b      	ldrb	r3, [r7, #4]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff feef 	bl	800173c <Set_Operation_Mode>
	HAL_Delay(100);
 800195e:	2064      	movs	r0, #100	; 0x64
 8001960:	f002 f90a 	bl	8003b78 <HAL_Delay>

	printf("BNO055 Initialization process is done!\n");
 8001964:	4804      	ldr	r0, [pc, #16]	; (8001978 <BNO055_Init+0xcc>)
 8001966:	f00c f9ad 	bl	800dcc4 <puts>
}
 800196a:	bf00      	nop
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200005c4 	.word	0x200005c4
 8001978:	0800eda0 	.word	0x0800eda0

0800197c <_ZN13BNOController4initEv>:
#include "BNOController.h"
#include <cmath>

void BNOController::init()
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b088      	sub	sp, #32
 8001980:	af04      	add	r7, sp, #16
 8001982:	6078      	str	r0, [r7, #4]
    BNO055_Init_t config;
    config.Unit_Sel = UNIT_ORI_ANDROID | UNIT_EUL_DEG | UNIT_GYRO_DPS | UNIT_ACC_MS2 | UNIT_TEMP_CELCIUS;
 8001984:	2380      	movs	r3, #128	; 0x80
 8001986:	723b      	strb	r3, [r7, #8]
    config.Axis = DEFAULT_AXIS_REMAP;
 8001988:	2324      	movs	r3, #36	; 0x24
 800198a:	727b      	strb	r3, [r7, #9]
    config.Axis_sign = DEFAULT_AXIS_SIGN;
 800198c:	2300      	movs	r3, #0
 800198e:	72bb      	strb	r3, [r7, #10]
    config.Clock_Source = CLOCK_EXTERNAL;
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	737b      	strb	r3, [r7, #13]
    config.Mode = BNO055_NORMAL_MODE;
 8001994:	2300      	movs	r3, #0
 8001996:	72fb      	strb	r3, [r7, #11]
    config.ACC_Range = Range_4G;
 8001998:	2301      	movs	r3, #1
 800199a:	73bb      	strb	r3, [r7, #14]
    config.OP_Modes = NDOF;
 800199c:	230c      	movs	r3, #12
 800199e:	733b      	strb	r3, [r7, #12]

    BNO055_Init(config);
 80019a0:	f107 0308 	add.w	r3, r7, #8
 80019a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80019a8:	f7ff ff80 	bl	80018ac <BNO055_Init>

    yawPID.set(Constants::kBNOKP, Constants::kBNOKI, Constants::kBNOKD, Constants::kBNOMinAngular, Constants::KBNOMaxAngular, Constants::kBNON);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f103 0058 	add.w	r0, r3, #88	; 0x58
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	9302      	str	r3, [sp, #8]
 80019b8:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <_ZN13BNOController4initEv+0x74>)
 80019ba:	9301      	str	r3, [sp, #4]
 80019bc:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <_ZN13BNOController4initEv+0x78>)
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <_ZN13BNOController4initEv+0x7c>)
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	490d      	ldr	r1, [pc, #52]	; (80019fc <_ZN13BNOController4initEv+0x80>)
 80019c8:	f000 fe20 	bl	800260c <_ZN3PID3setEffffff>
    HAL_Delay(100);
 80019cc:	2064      	movs	r0, #100	; 0x64
 80019ce:	f002 f8d3 	bl	8003b78 <HAL_Delay>
    ReadData(&data, SENSOR_EULER);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2140      	movs	r1, #64	; 0x40
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fbe2 	bl	80011a0 <ReadData>
    targetYaw = data.Euler.X;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80019e6:	bf00      	nop
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	42700000 	.word	0x42700000
 80019f4:	c2700000 	.word	0xc2700000
 80019f8:	3dcccccd 	.word	0x3dcccccd
 80019fc:	41a00000 	.word	0x41a00000

08001a00 <_ZN13BNOController6getYawEv>:

float BNOController::getYaw()
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
    ReadData(&data, SENSOR_EULER);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2140      	movs	r1, #64	; 0x40
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fbc7 	bl	80011a0 <ReadData>
    return data.Euler.X; // X es Heading (Yaw) según datasheet
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <_ZN13BNOController12setTargetYawEf>:

void BNOController::setTargetYaw(float yaw)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	6039      	str	r1, [r7, #0]
    targetYaw = yaw;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
	...

08001a3c <_ZN13BNOController16updateYawControlEm>:

    return yawRate; // En grados por segundo
}

void BNOController::updateYawControl(uint32_t now)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
    float dt = (now - lastYaw) / 1000.0f;
 8001a46:	6838      	ldr	r0, [r7, #0]
 8001a48:	f7ff f924 	bl	8000c94 <__aeabi_ui2f>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a54:	4619      	mov	r1, r3
 8001a56:	4610      	mov	r0, r2
 8001a58:	f7ff f86a 	bl	8000b30 <__aeabi_fsub>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	4944      	ldr	r1, [pc, #272]	; (8001b70 <_ZN13BNOController16updateYawControlEm+0x134>)
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fa23 	bl	8000eac <__aeabi_fdiv>
 8001a66:	4603      	mov	r3, r0
 8001a68:	613b      	str	r3, [r7, #16]
    if (dt <= 0.0f)
 8001a6a:	f04f 0100 	mov.w	r1, #0
 8001a6e:	6938      	ldr	r0, [r7, #16]
 8001a70:	f7ff fb10 	bl	8001094 <__aeabi_fcmple>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d176      	bne.n	8001b68 <_ZN13BNOController16updateYawControlEm+0x12c>
        return;

    float current_yaw = getYaw();
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff ffc0 	bl	8001a00 <_ZN13BNOController6getYawEv>
 8001a80:	60f8      	str	r0, [r7, #12]
    error = targetYaw - current_yaw;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a88:	68f9      	ldr	r1, [r7, #12]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff f850 	bl	8000b30 <__aeabi_fsub>
 8001a90:	4603      	mov	r3, r0
 8001a92:	461a      	mov	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    error = fmod(error, 360.0f);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe fcc1 	bl	8000428 <__aeabi_f2d>
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	4b32      	ldr	r3, [pc, #200]	; (8001b74 <_ZN13BNOController16updateYawControlEm+0x138>)
 8001aac:	f00a ff66 	bl	800c97c <fmod>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f7fe ffe6 	bl	8000a88 <__aeabi_d2f>
 8001abc:	4602      	mov	r2, r0
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (error > 180.0f)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aca:	492b      	ldr	r1, [pc, #172]	; (8001b78 <_ZN13BNOController16updateYawControlEm+0x13c>)
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff faf5 	bl	80010bc <__aeabi_fcmpgt>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00c      	beq.n	8001af2 <_ZN13BNOController16updateYawControlEm+0xb6>
    {
        error -= 360.0f;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ade:	4927      	ldr	r1, [pc, #156]	; (8001b7c <_ZN13BNOController16updateYawControlEm+0x140>)
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff f825 	bl	8000b30 <__aeabi_fsub>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	461a      	mov	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001af0:	e015      	b.n	8001b1e <_ZN13BNOController16updateYawControlEm+0xe2>
    }
    else if (error <= -180.0f)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af8:	4921      	ldr	r1, [pc, #132]	; (8001b80 <_ZN13BNOController16updateYawControlEm+0x144>)
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff faca 	bl	8001094 <__aeabi_fcmple>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d00b      	beq.n	8001b1e <_ZN13BNOController16updateYawControlEm+0xe2>
    {
        error += 360.0f;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b0c:	491b      	ldr	r1, [pc, #108]	; (8001b7c <_ZN13BNOController16updateYawControlEm+0x140>)
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff f810 	bl	8000b34 <__addsf3>
 8001b14:	4603      	mov	r3, r0
 8001b16:	461a      	mov	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    //     error += 360.0f;
    // }

    // PID devuelve velocidad angular en °/s
    float output_deg_per_sec;
    output_deg_per_sec = yawPID.calculate(0, error, dt);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	f04f 0100 	mov.w	r1, #0
 8001b30:	f000 fd99 	bl	8002666 <_ZN3PID9calculateEfff>
 8001b34:	6178      	str	r0, [r7, #20]

    // Limitamos el valor de salida
    // output_deg_per_sec = std::min(std::max(output_deg_per_sec, Constants::kBNOMinAngular), Constants::KBNOMaxAngular);
    if (fabs(error) < Constants::kAngleTolerance)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b40:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fa9b 	bl	8001080 <__aeabi_fcmplt>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d002      	beq.n	8001b56 <_ZN13BNOController16updateYawControlEm+0x11a>
    {
        output_deg_per_sec = 0;
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
    }
    speed = output_deg_per_sec;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    lastTime = now;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001b66:	e000      	b.n	8001b6a <_ZN13BNOController16updateYawControlEm+0x12e>
        return;
 8001b68:	bf00      	nop
}
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	447a0000 	.word	0x447a0000
 8001b74:	40768000 	.word	0x40768000
 8001b78:	43340000 	.word	0x43340000
 8001b7c:	43b40000 	.word	0x43b40000
 8001b80:	c3340000 	.word	0xc3340000

08001b84 <_ZN13BNOController8getSpeedEv>:

float BNOController::getSpeed()
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
    return speed;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr
 8001b9c:	0000      	movs	r0, r0
	...

08001ba0 <_ZN13BNOController9getYawRadEv>:

float BNOController::getYawRad()
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
    ReadData(&data, SENSOR_EULER);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2140      	movs	r1, #64	; 0x40
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff faf7 	bl	80011a0 <ReadData>
    return data.Euler.X * M_PI / 180.0f; // X es Heading (Yaw) según datasheet
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe fc36 	bl	8000428 <__aeabi_f2d>
 8001bbc:	a30c      	add	r3, pc, #48	; (adr r3, 8001bf0 <_ZN13BNOController9getYawRadEv+0x50>)
 8001bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc2:	f7fe fc89 	bl	80004d8 <__aeabi_dmul>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4610      	mov	r0, r2
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <_ZN13BNOController9getYawRadEv+0x58>)
 8001bd4:	f7fe fdaa 	bl	800072c <__aeabi_ddiv>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	f7fe ff52 	bl	8000a88 <__aeabi_d2f>
 8001be4:	4603      	mov	r3, r0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	54442d18 	.word	0x54442d18
 8001bf4:	400921fb 	.word	0x400921fb
 8001bf8:	40668000 	.word	0x40668000

08001bfc <_ZN13BNOController8getErrorEv>:

float BNOController::getError()
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
    return error;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <_ZN3PIDC1Ev>:
    float deriv_filtered = 0.0f;
    float alpha = 0.0f;
    float filter_N = 20.0f;

public:
    PID() = default;
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	60da      	str	r2, [r3, #12]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	615a      	str	r2, [r3, #20]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a09      	ldr	r2, [pc, #36]	; (8001c8c <_ZN3PIDC1Ev+0x60>)
 8001c68:	619a      	str	r2, [r3, #24]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	61da      	str	r2, [r3, #28]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	621a      	str	r2, [r3, #32]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a04      	ldr	r2, [pc, #16]	; (8001c90 <_ZN3PIDC1Ev+0x64>)
 8001c7e:	625a      	str	r2, [r3, #36]	; 0x24
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr
 8001c8c:	42c80000 	.word	0x42c80000
 8001c90:	41a00000 	.word	0x41a00000

08001c94 <_ZN5MotorC1Effff>:
 *      Author: Sanci
 */

#include "Motor.h"

Motor::Motor(float KP, float KI, float KD, float Ns)
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b088      	sub	sp, #32
 8001c98:	af04      	add	r7, sp, #16
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
 8001ca0:	603b      	str	r3, [r7, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	625a      	str	r2, [r3, #36]	; 0x24
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	631a      	str	r2, [r3, #48]	; 0x30
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	635a      	str	r2, [r3, #52]	; 0x34
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	639a      	str	r2, [r3, #56]	; 0x38
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	641a      	str	r2, [r3, #64]	; 0x40
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	645a      	str	r2, [r3, #68]	; 0x44
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	649a      	str	r2, [r3, #72]	; 0x48
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	64da      	str	r2, [r3, #76]	; 0x4c
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	651a      	str	r2, [r3, #80]	; 0x50
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	3358      	adds	r3, #88	; 0x58
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff93 	bl	8001c2c <_ZN3PIDC1Ev>
{
    pidController.set(KP, KI, KD, 0, Constants::kMaxPWM, Ns);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	9302      	str	r3, [sp, #8]
 8001d10:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <_ZN5MotorC1Effff+0x9c>)
 8001d12:	9301      	str	r3, [sp, #4]
 8001d14:	f04f 0300 	mov.w	r3, #0
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	68b9      	ldr	r1, [r7, #8]
 8001d20:	f000 fc74 	bl	800260c <_ZN3PID3setEffffff>
}
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4618      	mov	r0, r3
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	437f0000 	.word	0x437f0000

08001d34 <_ZN5Motor4initE3PinS0_tmP17TIM_HandleTypeDef>:
void Motor::init(Pin _pinA, Pin _pinB, uint16_t _encoder, uint32_t _pwm_channel, TIM_HandleTypeDef *_htim)
{
 8001d34:	b082      	sub	sp, #8
 8001d36:	b480      	push	{r7}
 8001d38:	b085      	sub	sp, #20
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	60f8      	str	r0, [r7, #12]
 8001d3e:	1d38      	adds	r0, r7, #4
 8001d40:	e880 0006 	stmia.w	r0, {r1, r2}
 8001d44:	61fb      	str	r3, [r7, #28]
    this->pinA = _pinA;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	3308      	adds	r3, #8
 8001d4a:	1d3a      	adds	r2, r7, #4
 8001d4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d50:	e883 0003 	stmia.w	r3, {r0, r1}
    this->pinB = _pinB;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	3310      	adds	r3, #16
 8001d58:	f107 021c 	add.w	r2, r7, #28
 8001d5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d60:	e883 0003 	stmia.w	r3, {r0, r1}
    this->encoder = _encoder;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d68:	831a      	strh	r2, [r3, #24]
    this->pwm_channel = _pwm_channel;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d6e:	621a      	str	r2, [r3, #32]
    this->htim = _htim;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d74:	61da      	str	r2, [r3, #28]
}
 8001d76:	bf00      	nop
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	b002      	add	sp, #8
 8001d80:	4770      	bx	lr
 8001d82:	0000      	movs	r0, r0
 8001d84:	0000      	movs	r0, r0
	...

08001d88 <_ZN5Motor12update_motorEm>:
    // Enviar PWM
    HAL_TIM_PWM_Start(htim, pwm_channel);
    __HAL_TIM_SET_COMPARE(htim, pwm_channel, duty);
}
void Motor::update_motor(uint32_t current_time)
{
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	b087      	sub	sp, #28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
    float dt = (current_time - last_time_ms) / 1000.0f;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe ff7a 	bl	8000c94 <__aeabi_ui2f>
 8001da0:	4603      	mov	r3, r0
 8001da2:	4971      	ldr	r1, [pc, #452]	; (8001f68 <_ZN5Motor12update_motorEm+0x1e0>)
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff f881 	bl	8000eac <__aeabi_fdiv>
 8001daa:	4603      	mov	r3, r0
 8001dac:	617b      	str	r3, [r7, #20]
    if (dt <= 0.0f)
 8001dae:	f04f 0100 	mov.w	r1, #0
 8001db2:	6978      	ldr	r0, [r7, #20]
 8001db4:	f7ff f96e 	bl	8001094 <__aeabi_fcmple>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f040 80cb 	bne.w	8001f56 <_ZN5Motor12update_motorEm+0x1ce>
        return;

    delta_ticks = ticks - last_ticks;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe ff62 	bl	8000c94 <__aeabi_ui2f>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	635a      	str	r2, [r3, #52]	; 0x34
    distance_cm += delta_ticks * Constants::kCMPerTick;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dde:	4963      	ldr	r1, [pc, #396]	; (8001f6c <_ZN5Motor12update_motorEm+0x1e4>)
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe ffaf 	bl	8000d44 <__aeabi_fmul>
 8001de6:	4603      	mov	r3, r0
 8001de8:	4619      	mov	r1, r3
 8001dea:	4620      	mov	r0, r4
 8001dec:	f7fe fea2 	bl	8000b34 <__addsf3>
 8001df0:	4603      	mov	r3, r0
 8001df2:	461a      	mov	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	639a      	str	r2, [r3, #56]	; 0x38
    actual_speed_cm_s = (delta_ticks * Constants::kCMPerTick) / dt;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dfc:	495b      	ldr	r1, [pc, #364]	; (8001f6c <_ZN5Motor12update_motorEm+0x1e4>)
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe ffa0 	bl	8000d44 <__aeabi_fmul>
 8001e04:	4603      	mov	r3, r0
 8001e06:	6979      	ldr	r1, [r7, #20]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff f84f 	bl	8000eac <__aeabi_fdiv>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	461a      	mov	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	641a      	str	r2, [r3, #64]	; 0x40

    // Convert cm/s to PWM equivalent
    float max_cm_s = (Constants::kMotorsRPM * 3.14159f * Constants::kWheelDiameter) / 60.0f;
 8001e16:	4b56      	ldr	r3, [pc, #344]	; (8001f70 <_ZN5Motor12update_motorEm+0x1e8>)
 8001e18:	613b      	str	r3, [r7, #16]
    float scaled_target_pwm = (target_speed_cm_s / max_cm_s) * Constants::kMaxPWM;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1e:	6939      	ldr	r1, [r7, #16]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff f843 	bl	8000eac <__aeabi_fdiv>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4952      	ldr	r1, [pc, #328]	; (8001f74 <_ZN5Motor12update_motorEm+0x1ec>)
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe ff8a 	bl	8000d44 <__aeabi_fmul>
 8001e30:	4603      	mov	r3, r0
 8001e32:	60fb      	str	r3, [r7, #12]
    float scaled_actual_pwm = (actual_speed_cm_s / max_cm_s) * Constants::kMaxPWM;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	6939      	ldr	r1, [r7, #16]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff f836 	bl	8000eac <__aeabi_fdiv>
 8001e40:	4603      	mov	r3, r0
 8001e42:	494c      	ldr	r1, [pc, #304]	; (8001f74 <_ZN5Motor12update_motorEm+0x1ec>)
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe ff7d 	bl	8000d44 <__aeabi_fmul>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	60bb      	str	r3, [r7, #8]

    output = pidController.calculate(scaled_target_pwm, scaled_actual_pwm, dt);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	68f9      	ldr	r1, [r7, #12]
 8001e5a:	f000 fc04 	bl	8002666 <_ZN3PID9calculateEfff>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	651a      	str	r2, [r3, #80]	; 0x50
    if (std::abs(target_speed_cm_s - actual_speed_cm_s) > 0.3)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4610      	mov	r0, r2
 8001e70:	f7fe fe5e 	bl	8000b30 <__aeabi_fsub>
 8001e74:	4603      	mov	r3, r0
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fecc 	bl	8001c14 <_ZSt3absf>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7fe fad2 	bl	8000428 <__aeabi_f2d>
 8001e84:	2301      	movs	r3, #1
 8001e86:	461c      	mov	r4, r3
 8001e88:	a335      	add	r3, pc, #212	; (adr r3, 8001f60 <_ZN5Motor12update_motorEm+0x1d8>)
 8001e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8e:	f7fe fdb3 	bl	80009f8 <__aeabi_dcmpgt>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <_ZN5Motor12update_motorEm+0x114>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	461c      	mov	r4, r3
 8001e9c:	b2e3      	uxtb	r3, r4
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00e      	beq.n	8001ec0 <_ZN5Motor12update_motorEm+0x138>
    {
        pwm_out = std::min(std::max(output, Constants::kMinPWM), Constants::kMaxPWM);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3350      	adds	r3, #80	; 0x50
 8001ea6:	4934      	ldr	r1, [pc, #208]	; (8001f78 <_ZN5Motor12update_motorEm+0x1f0>)
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 f8d6 	bl	800205a <_ZSt3maxIfERKT_S2_S2_>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	4932      	ldr	r1, [pc, #200]	; (8001f7c <_ZN5Motor12update_motorEm+0x1f4>)
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 f8e8 	bl	8002088 <_ZSt3minIfERKT_S2_S2_>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	64da      	str	r2, [r3, #76]	; 0x4c
    // else
    // {
    //     // Dirección hacia adelante
    //     setDir(dir);
    // }
    __HAL_TIM_SET_COMPARE(htim, pwm_channel, (uint16_t)pwm_out);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10b      	bne.n	8001ee0 <_ZN5Motor12update_motorEm+0x158>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff f925 	bl	800111c <__aeabi_f2uiz>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	635a      	str	r2, [r3, #52]	; 0x34
 8001ede:	e02a      	b.n	8001f36 <_ZN5Motor12update_motorEm+0x1ae>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d10b      	bne.n	8001f00 <_ZN5Motor12update_motorEm+0x178>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff f915 	bl	800111c <__aeabi_f2uiz>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	639a      	str	r2, [r3, #56]	; 0x38
 8001efe:	e01a      	b.n	8001f36 <_ZN5Motor12update_motorEm+0x1ae>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d10b      	bne.n	8001f20 <_ZN5Motor12update_motorEm+0x198>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff f905 	bl	800111c <__aeabi_f2uiz>
 8001f12:	4603      	mov	r3, r0
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f1e:	e00a      	b.n	8001f36 <_ZN5Motor12update_motorEm+0x1ae>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff f8f9 	bl	800111c <__aeabi_f2uiz>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_TIM_PWM_Start(htim, pwm_channel);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69da      	ldr	r2, [r3, #28]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4610      	mov	r0, r2
 8001f42:	f005 fd5b 	bl	80079fc <HAL_TIM_PWM_Start>
    last_ticks = ticks;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	631a      	str	r2, [r3, #48]	; 0x30
    last_time_ms = current_time;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	625a      	str	r2, [r3, #36]	; 0x24
 8001f54:	e000      	b.n	8001f58 <_ZN5Motor12update_motorEm+0x1d0>
        return;
 8001f56:	bf00      	nop
}
 8001f58:	371c      	adds	r7, #28
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd90      	pop	{r4, r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	33333333 	.word	0x33333333
 8001f64:	3fd33333 	.word	0x3fd33333
 8001f68:	447a0000 	.word	0x447a0000
 8001f6c:	3d086aa5 	.word	0x3d086aa5
 8001f70:	420c5309 	.word	0x420c5309
 8001f74:	437f0000 	.word	0x437f0000
 8001f78:	0800f134 	.word	0x0800f134
 8001f7c:	0800f130 	.word	0x0800f130

08001f80 <_ZN5Motor9setTargetEf>:
    // Stop PWM signal
    __HAL_TIM_SET_COMPARE(htim, pwm_channel, 0);
}

void Motor::setTarget(float _target_speed_cm_s)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
    target_speed_cm_s = _target_speed_cm_s;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr

08001f9a <_ZN5Motor11getDistanceEv>:

float Motor::getDistance()
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
    return distance_cm;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr

08001fb0 <_ZN5Motor8addTicksEv>:

void Motor::addTicks()
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
    ticks++;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbc:	1c5a      	adds	r2, r3, #1
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr

08001fcc <_ZN5Motor8getSpeedEv>:
{
    return pwm_out;
}

float Motor::getSpeed()
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
    return actual_speed_cm_s;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr

08001fe2 <_ZN5Motor9getTargetEv>:
{
    return (int)output;
}

float Motor::getTarget()
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
    return target_speed_cm_s;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr

08001ff8 <_ZN5Motor6setDirEb>:
    last_ticks = ticks;
    last_time_ms = current_time;
}

void Motor::setDir(bool temp_dir)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	70fb      	strb	r3, [r7, #3]
    if (!temp_dir)
 8002004:	78fb      	ldrb	r3, [r7, #3]
 8002006:	f083 0301 	eor.w	r3, r3, #1
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b00      	cmp	r3, #0
 800200e:	d010      	beq.n	8002032 <_ZN5Motor6setDirEb+0x3a>
    {
        // Adelante
        HAL_GPIO_WritePin(pinA.port, pinA.pin, GPIO_PIN_SET);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6898      	ldr	r0, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	899b      	ldrh	r3, [r3, #12]
 8002018:	2201      	movs	r2, #1
 800201a:	4619      	mov	r1, r3
 800201c:	f002 f862 	bl	80040e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(pinB.port, pinB.pin, GPIO_PIN_RESET);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6918      	ldr	r0, [r3, #16]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	8a9b      	ldrh	r3, [r3, #20]
 8002028:	2200      	movs	r2, #0
 800202a:	4619      	mov	r1, r3
 800202c:	f002 f85a 	bl	80040e4 <HAL_GPIO_WritePin>
    {
        // Atras
        HAL_GPIO_WritePin(pinA.port, pinA.pin, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(pinB.port, pinB.pin, GPIO_PIN_SET);
    }
}
 8002030:	e00f      	b.n	8002052 <_ZN5Motor6setDirEb+0x5a>
        HAL_GPIO_WritePin(pinA.port, pinA.pin, GPIO_PIN_RESET);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6898      	ldr	r0, [r3, #8]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	899b      	ldrh	r3, [r3, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	4619      	mov	r1, r3
 800203e:	f002 f851 	bl	80040e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(pinB.port, pinB.pin, GPIO_PIN_SET);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6918      	ldr	r0, [r3, #16]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	8a9b      	ldrh	r3, [r3, #20]
 800204a:	2201      	movs	r2, #1
 800204c:	4619      	mov	r1, r3
 800204e:	f002 f849 	bl	80040e4 <HAL_GPIO_WritePin>
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4619      	mov	r1, r3
 800206e:	4610      	mov	r0, r2
 8002070:	f7ff f806 	bl	8001080 <__aeabi_fcmplt>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	e000      	b.n	8002080 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 800207e:	687b      	ldr	r3, [r7, #4]
    }
 8002080:	4618      	mov	r0, r3
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4619      	mov	r1, r3
 800209c:	4610      	mov	r0, r2
 800209e:	f7fe ffef 	bl	8001080 <__aeabi_fcmplt>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	e000      	b.n	80020ae <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 80020ac:	687b      	ldr	r3, [r7, #4]
    }
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <_ZN13BNOControllerC1Ev>:
#include "PID.h"
#include "Constants.h"

// #include "BNO055_STM32.h"

class BNOController
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3358      	adds	r3, #88	; 0x58
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff fdb2 	bl	8001c2c <_ZN3PIDC1Ev>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <_Z12movementInitv>:

#include "Movement.h"
#include <cmath>

void movementInit()
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af04      	add	r7, sp, #16
    // Motores (Checar que los canales sean los correctos)
    frontLeftMotor.init(
 800210a:	4b1f      	ldr	r3, [pc, #124]	; (8002188 <_Z12movementInitv+0x84>)
 800210c:	491f      	ldr	r1, [pc, #124]	; (800218c <_Z12movementInitv+0x88>)
 800210e:	4a20      	ldr	r2, [pc, #128]	; (8002190 <_Z12movementInitv+0x8c>)
 8002110:	9203      	str	r2, [sp, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	9202      	str	r2, [sp, #8]
 8002116:	2202      	movs	r2, #2
 8002118:	9201      	str	r2, [sp, #4]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	9200      	str	r2, [sp, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	c906      	ldmia	r1, {r1, r2}
 8002122:	481c      	ldr	r0, [pc, #112]	; (8002194 <_Z12movementInitv+0x90>)
 8002124:	f7ff fe06 	bl	8001d34 <_ZN5Motor4initE3PinS0_tmP17TIM_HandleTypeDef>
        Constants::kFrontLeftA,
        Constants::kFrontLeftB,
        Constants::kFrontLeftEncoder,
        TIM_CHANNEL_1,
        &htim3);
    frontRightMotor.init(
 8002128:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <_Z12movementInitv+0x94>)
 800212a:	491c      	ldr	r1, [pc, #112]	; (800219c <_Z12movementInitv+0x98>)
 800212c:	4a1c      	ldr	r2, [pc, #112]	; (80021a0 <_Z12movementInitv+0x9c>)
 800212e:	9203      	str	r2, [sp, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	9202      	str	r2, [sp, #8]
 8002134:	2201      	movs	r2, #1
 8002136:	9201      	str	r2, [sp, #4]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	9200      	str	r2, [sp, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	c906      	ldmia	r1, {r1, r2}
 8002140:	4818      	ldr	r0, [pc, #96]	; (80021a4 <_Z12movementInitv+0xa0>)
 8002142:	f7ff fdf7 	bl	8001d34 <_ZN5Motor4initE3PinS0_tmP17TIM_HandleTypeDef>
        Constants::kFrontRightB,
        Constants::kFrontRightEncoder,
        TIM_CHANNEL_1,
        &htim1);

    backRightMotor.init(
 8002146:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <_Z12movementInitv+0xa4>)
 8002148:	4918      	ldr	r1, [pc, #96]	; (80021ac <_Z12movementInitv+0xa8>)
 800214a:	4a11      	ldr	r2, [pc, #68]	; (8002190 <_Z12movementInitv+0x8c>)
 800214c:	9203      	str	r2, [sp, #12]
 800214e:	220c      	movs	r2, #12
 8002150:	9202      	str	r2, [sp, #8]
 8002152:	2208      	movs	r2, #8
 8002154:	9201      	str	r2, [sp, #4]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	9200      	str	r2, [sp, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	c906      	ldmia	r1, {r1, r2}
 800215e:	4814      	ldr	r0, [pc, #80]	; (80021b0 <_Z12movementInitv+0xac>)
 8002160:	f7ff fde8 	bl	8001d34 <_ZN5Motor4initE3PinS0_tmP17TIM_HandleTypeDef>
        Constants::kBackRightB,
        Constants::kBackRightEncoder,
        TIM_CHANNEL_4,
        &htim3);

    backLeftMotor.init(
 8002164:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <_Z12movementInitv+0xb0>)
 8002166:	4914      	ldr	r1, [pc, #80]	; (80021b8 <_Z12movementInitv+0xb4>)
 8002168:	4a09      	ldr	r2, [pc, #36]	; (8002190 <_Z12movementInitv+0x8c>)
 800216a:	9203      	str	r2, [sp, #12]
 800216c:	2204      	movs	r2, #4
 800216e:	9202      	str	r2, [sp, #8]
 8002170:	2204      	movs	r2, #4
 8002172:	9201      	str	r2, [sp, #4]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	9200      	str	r2, [sp, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	c906      	ldmia	r1, {r1, r2}
 800217c:	480f      	ldr	r0, [pc, #60]	; (80021bc <_Z12movementInitv+0xb8>)
 800217e:	f7ff fdd9 	bl	8001d34 <_ZN5Motor4initE3PinS0_tmP17TIM_HandleTypeDef>
        Constants::kBackLeftA,
        Constants::kBackLeftB,
        Constants::kBackLeftEncoder,
        TIM_CHANNEL_2,
        &htim3);
}
 8002182:	bf00      	nop
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	0800f140 	.word	0x0800f140
 800218c:	0800f138 	.word	0x0800f138
 8002190:	2000024c 	.word	0x2000024c
 8002194:	20000294 	.word	0x20000294
 8002198:	0800f150 	.word	0x0800f150
 800219c:	0800f148 	.word	0x0800f148
 80021a0:	20000204 	.word	0x20000204
 80021a4:	20000324 	.word	0x20000324
 80021a8:	0800f170 	.word	0x0800f170
 80021ac:	0800f168 	.word	0x0800f168
 80021b0:	20000444 	.word	0x20000444
 80021b4:	0800f160 	.word	0x0800f160
 80021b8:	0800f158 	.word	0x0800f158
 80021bc:	200003b4 	.word	0x200003b4

080021c0 <_Z8setSpeedi>:
void distance() {}
void setSpeed(int speed)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
    frontLeftMotor.setTarget(speed);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7fe fd67 	bl	8000c9c <__aeabi_i2f>
 80021ce:	4603      	mov	r3, r0
 80021d0:	4619      	mov	r1, r3
 80021d2:	480f      	ldr	r0, [pc, #60]	; (8002210 <_Z8setSpeedi+0x50>)
 80021d4:	f7ff fed4 	bl	8001f80 <_ZN5Motor9setTargetEf>
    frontRightMotor.setTarget(speed);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7fe fd5f 	bl	8000c9c <__aeabi_i2f>
 80021de:	4603      	mov	r3, r0
 80021e0:	4619      	mov	r1, r3
 80021e2:	480c      	ldr	r0, [pc, #48]	; (8002214 <_Z8setSpeedi+0x54>)
 80021e4:	f7ff fecc 	bl	8001f80 <_ZN5Motor9setTargetEf>
    backLeftMotor.setTarget(speed);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7fe fd57 	bl	8000c9c <__aeabi_i2f>
 80021ee:	4603      	mov	r3, r0
 80021f0:	4619      	mov	r1, r3
 80021f2:	4809      	ldr	r0, [pc, #36]	; (8002218 <_Z8setSpeedi+0x58>)
 80021f4:	f7ff fec4 	bl	8001f80 <_ZN5Motor9setTargetEf>
    backRightMotor.setTarget(speed);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7fe fd4f 	bl	8000c9c <__aeabi_i2f>
 80021fe:	4603      	mov	r3, r0
 8002200:	4619      	mov	r1, r3
 8002202:	4806      	ldr	r0, [pc, #24]	; (800221c <_Z8setSpeedi+0x5c>)
 8002204:	f7ff febc 	bl	8001f80 <_ZN5Motor9setTargetEf>
}
 8002208:	bf00      	nop
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20000294 	.word	0x20000294
 8002214:	20000324 	.word	0x20000324
 8002218:	200003b4 	.word	0x200003b4
 800221c:	20000444 	.word	0x20000444

08002220 <_Z14updateMovementm>:
    frontRightMotor.stop_motor();
    backLeftMotor.stop_motor();
    backRightMotor.stop_motor();
}
void updateMovement(uint32_t current_time)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]

    // Paso 3: Actualizar los motores físicamente
    frontLeftMotor.update_motor(current_time);
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	4809      	ldr	r0, [pc, #36]	; (8002250 <_Z14updateMovementm+0x30>)
 800222c:	f7ff fdac 	bl	8001d88 <_ZN5Motor12update_motorEm>
    frontRightMotor.update_motor(current_time);
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	4808      	ldr	r0, [pc, #32]	; (8002254 <_Z14updateMovementm+0x34>)
 8002234:	f7ff fda8 	bl	8001d88 <_ZN5Motor12update_motorEm>
    backLeftMotor.update_motor(current_time);
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4807      	ldr	r0, [pc, #28]	; (8002258 <_Z14updateMovementm+0x38>)
 800223c:	f7ff fda4 	bl	8001d88 <_ZN5Motor12update_motorEm>
    backRightMotor.update_motor(current_time);
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	4806      	ldr	r0, [pc, #24]	; (800225c <_Z14updateMovementm+0x3c>)
 8002244:	f7ff fda0 	bl	8001d88 <_ZN5Motor12update_motorEm>
}
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20000294 	.word	0x20000294
 8002254:	20000324 	.word	0x20000324
 8002258:	200003b4 	.word	0x200003b4
 800225c:	20000444 	.word	0x20000444

08002260 <_Z18setKinematicSpeedsfm>:

// Kinematics
void setKinematicSpeeds(float _linear_x_cm_s, uint32_t current_time)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b088      	sub	sp, #32
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
    // Paso 1: Calcular salida del PID del BNO como velocidad angular deseada
    bno.updateYawControl(current_time);
 800226a:	6839      	ldr	r1, [r7, #0]
 800226c:	4888      	ldr	r0, [pc, #544]	; (8002490 <_Z18setKinematicSpeedsfm+0x230>)
 800226e:	f7ff fbe5 	bl	8001a3c <_ZN13BNOController16updateYawControlEm>
    float angular_z_deg_s = bno.getSpeed(); // °/s
 8002272:	4887      	ldr	r0, [pc, #540]	; (8002490 <_Z18setKinematicSpeedsfm+0x230>)
 8002274:	f7ff fc86 	bl	8001b84 <_ZN13BNOController8getSpeedEv>
 8002278:	61f8      	str	r0, [r7, #28]
    float linear_x_cm_s = _linear_x_cm_s;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	61bb      	str	r3, [r7, #24]
    float omega_rad_s = angular_z_deg_s * M_PI / 180.0f;
 800227e:	69f8      	ldr	r0, [r7, #28]
 8002280:	f7fe f8d2 	bl	8000428 <__aeabi_f2d>
 8002284:	a380      	add	r3, pc, #512	; (adr r3, 8002488 <_Z18setKinematicSpeedsfm+0x228>)
 8002286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228a:	f7fe f925 	bl	80004d8 <__aeabi_dmul>
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	4610      	mov	r0, r2
 8002294:	4619      	mov	r1, r3
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	4b7e      	ldr	r3, [pc, #504]	; (8002494 <_Z18setKinematicSpeedsfm+0x234>)
 800229c:	f7fe fa46 	bl	800072c <__aeabi_ddiv>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4610      	mov	r0, r2
 80022a6:	4619      	mov	r1, r3
 80022a8:	f7fe fbee 	bl	8000a88 <__aeabi_d2f>
 80022ac:	4603      	mov	r3, r0
 80022ae:	617b      	str	r3, [r7, #20]
    if (angular_z_deg_s < 10.0f && angular_z_deg_s > -10.0f && linear_x_cm_s == 0)
 80022b0:	4979      	ldr	r1, [pc, #484]	; (8002498 <_Z18setKinematicSpeedsfm+0x238>)
 80022b2:	69f8      	ldr	r0, [r7, #28]
 80022b4:	f7fe fee4 	bl	8001080 <__aeabi_fcmplt>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d026      	beq.n	800230c <_Z18setKinematicSpeedsfm+0xac>
 80022be:	4977      	ldr	r1, [pc, #476]	; (800249c <_Z18setKinematicSpeedsfm+0x23c>)
 80022c0:	69f8      	ldr	r0, [r7, #28]
 80022c2:	f7fe fefb 	bl	80010bc <__aeabi_fcmpgt>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d01f      	beq.n	800230c <_Z18setKinematicSpeedsfm+0xac>
 80022cc:	f04f 0100 	mov.w	r1, #0
 80022d0:	69b8      	ldr	r0, [r7, #24]
 80022d2:	f7fe fecb 	bl	800106c <__aeabi_fcmpeq>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d017      	beq.n	800230c <_Z18setKinematicSpeedsfm+0xac>
    {
        omega_rad_s = 0;
 80022dc:	f04f 0300 	mov.w	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
        frontLeftMotor.setTarget(0);
 80022e2:	f04f 0100 	mov.w	r1, #0
 80022e6:	486e      	ldr	r0, [pc, #440]	; (80024a0 <_Z18setKinematicSpeedsfm+0x240>)
 80022e8:	f7ff fe4a 	bl	8001f80 <_ZN5Motor9setTargetEf>
        backLeftMotor.setTarget(0);
 80022ec:	f04f 0100 	mov.w	r1, #0
 80022f0:	486c      	ldr	r0, [pc, #432]	; (80024a4 <_Z18setKinematicSpeedsfm+0x244>)
 80022f2:	f7ff fe45 	bl	8001f80 <_ZN5Motor9setTargetEf>
        frontRightMotor.setTarget(0);
 80022f6:	f04f 0100 	mov.w	r1, #0
 80022fa:	486b      	ldr	r0, [pc, #428]	; (80024a8 <_Z18setKinematicSpeedsfm+0x248>)
 80022fc:	f7ff fe40 	bl	8001f80 <_ZN5Motor9setTargetEf>
        backRightMotor.setTarget(0);
 8002300:	f04f 0100 	mov.w	r1, #0
 8002304:	4869      	ldr	r0, [pc, #420]	; (80024ac <_Z18setKinematicSpeedsfm+0x24c>)
 8002306:	f7ff fe3b 	bl	8001f80 <_ZN5Motor9setTargetEf>
        return;
 800230a:	e0b9      	b.n	8002480 <_Z18setKinematicSpeedsfm+0x220>
    }
    float L = Constants::kWheelTrack; // track width en cm
 800230c:	4b68      	ldr	r3, [pc, #416]	; (80024b0 <_Z18setKinematicSpeedsfm+0x250>)
 800230e:	613b      	str	r3, [r7, #16]

    float left_speed = linear_x_cm_s - (omega_rad_s * L / 2.0f);
 8002310:	6939      	ldr	r1, [r7, #16]
 8002312:	6978      	ldr	r0, [r7, #20]
 8002314:	f7fe fd16 	bl	8000d44 <__aeabi_fmul>
 8002318:	4603      	mov	r3, r0
 800231a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe fdc4 	bl	8000eac <__aeabi_fdiv>
 8002324:	4603      	mov	r3, r0
 8002326:	4619      	mov	r1, r3
 8002328:	69b8      	ldr	r0, [r7, #24]
 800232a:	f7fe fc01 	bl	8000b30 <__aeabi_fsub>
 800232e:	4603      	mov	r3, r0
 8002330:	60fb      	str	r3, [r7, #12]
    float right_speed = linear_x_cm_s + (omega_rad_s * L / 2.0f);
 8002332:	6939      	ldr	r1, [r7, #16]
 8002334:	6978      	ldr	r0, [r7, #20]
 8002336:	f7fe fd05 	bl	8000d44 <__aeabi_fmul>
 800233a:	4603      	mov	r3, r0
 800233c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe fdb3 	bl	8000eac <__aeabi_fdiv>
 8002346:	4603      	mov	r3, r0
 8002348:	4619      	mov	r1, r3
 800234a:	69b8      	ldr	r0, [r7, #24]
 800234c:	f7fe fbf2 	bl	8000b34 <__addsf3>
 8002350:	4603      	mov	r3, r0
 8002352:	60bb      	str	r3, [r7, #8]
    // if (linear_x_cm_s == 0)
    // {
    //     left_speed *= 1.3;
    //     right_speed *= 1.3;
    // }
    if (left_speed < 0)
 8002354:	f04f 0100 	mov.w	r1, #0
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f7fe fe91 	bl	8001080 <__aeabi_fcmplt>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d026      	beq.n	80023b2 <_Z18setKinematicSpeedsfm+0x152>
    { // Llanatas izquierdas  para atras
        frontLeftMotor.setTarget(left_speed * -1);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800236a:	4619      	mov	r1, r3
 800236c:	484c      	ldr	r0, [pc, #304]	; (80024a0 <_Z18setKinematicSpeedsfm+0x240>)
 800236e:	f7ff fe07 	bl	8001f80 <_ZN5Motor9setTargetEf>
        backLeftMotor.setTarget(left_speed * -1);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002378:	4619      	mov	r1, r3
 800237a:	484a      	ldr	r0, [pc, #296]	; (80024a4 <_Z18setKinematicSpeedsfm+0x244>)
 800237c:	f7ff fe00 	bl	8001f80 <_ZN5Motor9setTargetEf>
        frontRightMotor.setTarget(right_speed);
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	4849      	ldr	r0, [pc, #292]	; (80024a8 <_Z18setKinematicSpeedsfm+0x248>)
 8002384:	f7ff fdfc 	bl	8001f80 <_ZN5Motor9setTargetEf>
        backRightMotor.setTarget(right_speed);
 8002388:	68b9      	ldr	r1, [r7, #8]
 800238a:	4848      	ldr	r0, [pc, #288]	; (80024ac <_Z18setKinematicSpeedsfm+0x24c>)
 800238c:	f7ff fdf8 	bl	8001f80 <_ZN5Motor9setTargetEf>

        frontLeftMotor.setDir(true);
 8002390:	2101      	movs	r1, #1
 8002392:	4843      	ldr	r0, [pc, #268]	; (80024a0 <_Z18setKinematicSpeedsfm+0x240>)
 8002394:	f7ff fe30 	bl	8001ff8 <_ZN5Motor6setDirEb>
        backLeftMotor.setDir(true);
 8002398:	2101      	movs	r1, #1
 800239a:	4842      	ldr	r0, [pc, #264]	; (80024a4 <_Z18setKinematicSpeedsfm+0x244>)
 800239c:	f7ff fe2c 	bl	8001ff8 <_ZN5Motor6setDirEb>
        frontRightMotor.setDir(false);
 80023a0:	2100      	movs	r1, #0
 80023a2:	4841      	ldr	r0, [pc, #260]	; (80024a8 <_Z18setKinematicSpeedsfm+0x248>)
 80023a4:	f7ff fe28 	bl	8001ff8 <_ZN5Motor6setDirEb>
        backRightMotor.setDir(false);
 80023a8:	2100      	movs	r1, #0
 80023aa:	4840      	ldr	r0, [pc, #256]	; (80024ac <_Z18setKinematicSpeedsfm+0x24c>)
 80023ac:	f7ff fe24 	bl	8001ff8 <_ZN5Motor6setDirEb>
 80023b0:	e066      	b.n	8002480 <_Z18setKinematicSpeedsfm+0x220>
    }
    else if (right_speed < 0) // Llantas derechas para atras
 80023b2:	f04f 0100 	mov.w	r1, #0
 80023b6:	68b8      	ldr	r0, [r7, #8]
 80023b8:	f7fe fe62 	bl	8001080 <__aeabi_fcmplt>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d026      	beq.n	8002410 <_Z18setKinematicSpeedsfm+0x1b0>
    {
        frontLeftMotor.setTarget(left_speed);
 80023c2:	68f9      	ldr	r1, [r7, #12]
 80023c4:	4836      	ldr	r0, [pc, #216]	; (80024a0 <_Z18setKinematicSpeedsfm+0x240>)
 80023c6:	f7ff fddb 	bl	8001f80 <_ZN5Motor9setTargetEf>
        backLeftMotor.setTarget(left_speed);
 80023ca:	68f9      	ldr	r1, [r7, #12]
 80023cc:	4835      	ldr	r0, [pc, #212]	; (80024a4 <_Z18setKinematicSpeedsfm+0x244>)
 80023ce:	f7ff fdd7 	bl	8001f80 <_ZN5Motor9setTargetEf>
        frontRightMotor.setTarget(right_speed * -1);
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80023d8:	4619      	mov	r1, r3
 80023da:	4833      	ldr	r0, [pc, #204]	; (80024a8 <_Z18setKinematicSpeedsfm+0x248>)
 80023dc:	f7ff fdd0 	bl	8001f80 <_ZN5Motor9setTargetEf>
        backRightMotor.setTarget(right_speed * -1);
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80023e6:	4619      	mov	r1, r3
 80023e8:	4830      	ldr	r0, [pc, #192]	; (80024ac <_Z18setKinematicSpeedsfm+0x24c>)
 80023ea:	f7ff fdc9 	bl	8001f80 <_ZN5Motor9setTargetEf>

        frontRightMotor.setDir(true);
 80023ee:	2101      	movs	r1, #1
 80023f0:	482d      	ldr	r0, [pc, #180]	; (80024a8 <_Z18setKinematicSpeedsfm+0x248>)
 80023f2:	f7ff fe01 	bl	8001ff8 <_ZN5Motor6setDirEb>
        backRightMotor.setDir(true);
 80023f6:	2101      	movs	r1, #1
 80023f8:	482c      	ldr	r0, [pc, #176]	; (80024ac <_Z18setKinematicSpeedsfm+0x24c>)
 80023fa:	f7ff fdfd 	bl	8001ff8 <_ZN5Motor6setDirEb>
        frontLeftMotor.setDir(false);
 80023fe:	2100      	movs	r1, #0
 8002400:	4827      	ldr	r0, [pc, #156]	; (80024a0 <_Z18setKinematicSpeedsfm+0x240>)
 8002402:	f7ff fdf9 	bl	8001ff8 <_ZN5Motor6setDirEb>
        backLeftMotor.setDir(false);
 8002406:	2100      	movs	r1, #0
 8002408:	4826      	ldr	r0, [pc, #152]	; (80024a4 <_Z18setKinematicSpeedsfm+0x244>)
 800240a:	f7ff fdf5 	bl	8001ff8 <_ZN5Motor6setDirEb>
 800240e:	e037      	b.n	8002480 <_Z18setKinematicSpeedsfm+0x220>
    }
    else if (right_speed > 0 && left_speed > 0 && linear_x_cm_s > 0)
 8002410:	f04f 0100 	mov.w	r1, #0
 8002414:	68b8      	ldr	r0, [r7, #8]
 8002416:	f7fe fe51 	bl	80010bc <__aeabi_fcmpgt>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d02f      	beq.n	8002480 <_Z18setKinematicSpeedsfm+0x220>
 8002420:	f04f 0100 	mov.w	r1, #0
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f7fe fe49 	bl	80010bc <__aeabi_fcmpgt>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d027      	beq.n	8002480 <_Z18setKinematicSpeedsfm+0x220>
 8002430:	f04f 0100 	mov.w	r1, #0
 8002434:	69b8      	ldr	r0, [r7, #24]
 8002436:	f7fe fe41 	bl	80010bc <__aeabi_fcmpgt>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d01f      	beq.n	8002480 <_Z18setKinematicSpeedsfm+0x220>
    {
        frontLeftMotor.setDir(false);
 8002440:	2100      	movs	r1, #0
 8002442:	4817      	ldr	r0, [pc, #92]	; (80024a0 <_Z18setKinematicSpeedsfm+0x240>)
 8002444:	f7ff fdd8 	bl	8001ff8 <_ZN5Motor6setDirEb>
        backLeftMotor.setDir(false);
 8002448:	2100      	movs	r1, #0
 800244a:	4816      	ldr	r0, [pc, #88]	; (80024a4 <_Z18setKinematicSpeedsfm+0x244>)
 800244c:	f7ff fdd4 	bl	8001ff8 <_ZN5Motor6setDirEb>
        frontRightMotor.setDir(false);
 8002450:	2100      	movs	r1, #0
 8002452:	4815      	ldr	r0, [pc, #84]	; (80024a8 <_Z18setKinematicSpeedsfm+0x248>)
 8002454:	f7ff fdd0 	bl	8001ff8 <_ZN5Motor6setDirEb>
        backRightMotor.setDir(false);
 8002458:	2100      	movs	r1, #0
 800245a:	4814      	ldr	r0, [pc, #80]	; (80024ac <_Z18setKinematicSpeedsfm+0x24c>)
 800245c:	f7ff fdcc 	bl	8001ff8 <_ZN5Motor6setDirEb>
        frontLeftMotor.setTarget(left_speed);
 8002460:	68f9      	ldr	r1, [r7, #12]
 8002462:	480f      	ldr	r0, [pc, #60]	; (80024a0 <_Z18setKinematicSpeedsfm+0x240>)
 8002464:	f7ff fd8c 	bl	8001f80 <_ZN5Motor9setTargetEf>
        backLeftMotor.setTarget(left_speed);
 8002468:	68f9      	ldr	r1, [r7, #12]
 800246a:	480e      	ldr	r0, [pc, #56]	; (80024a4 <_Z18setKinematicSpeedsfm+0x244>)
 800246c:	f7ff fd88 	bl	8001f80 <_ZN5Motor9setTargetEf>
        frontRightMotor.setTarget(right_speed);
 8002470:	68b9      	ldr	r1, [r7, #8]
 8002472:	480d      	ldr	r0, [pc, #52]	; (80024a8 <_Z18setKinematicSpeedsfm+0x248>)
 8002474:	f7ff fd84 	bl	8001f80 <_ZN5Motor9setTargetEf>
        backRightMotor.setTarget(right_speed);
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	480c      	ldr	r0, [pc, #48]	; (80024ac <_Z18setKinematicSpeedsfm+0x24c>)
 800247c:	f7ff fd80 	bl	8001f80 <_ZN5Motor9setTargetEf>
    }
}
 8002480:	3720      	adds	r7, #32
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	54442d18 	.word	0x54442d18
 800248c:	400921fb 	.word	0x400921fb
 8002490:	200004d4 	.word	0x200004d4
 8002494:	40668000 	.word	0x40668000
 8002498:	41200000 	.word	0x41200000
 800249c:	c1200000 	.word	0xc1200000
 80024a0:	20000294 	.word	0x20000294
 80024a4:	200003b4 	.word	0x200003b4
 80024a8:	20000324 	.word	0x20000324
 80024ac:	20000444 	.word	0x20000444
 80024b0:	41a00000 	.word	0x41a00000

080024b4 <_Z41__static_initialization_and_destruction_0ii>:
{
    frontLeftMotor.backward();
    backLeftMotor.backward();
    frontRightMotor.backward();
    backRightMotor.backward();
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af02      	add	r7, sp, #8
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d171      	bne.n	80025a8 <_Z41__static_initialization_and_destruction_0ii+0xf4>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d16c      	bne.n	80025a8 <_Z41__static_initialization_and_destruction_0ii+0xf4>
void setRotation(bool dir);
void setForward();
void setBackward();

// Motors
inline Motor frontLeftMotor(Constants::kFrontLeftKP, Constants::kFrontLeftKI, Constants::kFrontLeftKD, Constants::kFrontLeftN);
 80024ce:	4b38      	ldr	r3, [pc, #224]	; (80025b0 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	3301      	adds	r3, #1
 80024d4:	4a36      	ldr	r2, [pc, #216]	; (80025b0 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	4b35      	ldr	r3, [pc, #212]	; (80025b0 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	bf0c      	ite	eq
 80024e0:	2301      	moveq	r3, #1
 80024e2:	2300      	movne	r3, #0
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d008      	beq.n	80024fc <_Z41__static_initialization_and_destruction_0ii+0x48>
 80024ea:	4b32      	ldr	r3, [pc, #200]	; (80025b4 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	4a31      	ldr	r2, [pc, #196]	; (80025b8 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 80024f4:	4931      	ldr	r1, [pc, #196]	; (80025bc <_Z41__static_initialization_and_destruction_0ii+0x108>)
 80024f6:	4832      	ldr	r0, [pc, #200]	; (80025c0 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 80024f8:	f7ff fbcc 	bl	8001c94 <_ZN5MotorC1Effff>
inline Motor frontRightMotor(Constants::kFrontRightKP, Constants::kFrontRightKI, Constants::kFrontRightKD, Constants::kFrontRightN);
 80024fc:	4b31      	ldr	r3, [pc, #196]	; (80025c4 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	3301      	adds	r3, #1
 8002502:	4a30      	ldr	r2, [pc, #192]	; (80025c4 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	4b2f      	ldr	r3, [pc, #188]	; (80025c4 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b01      	cmp	r3, #1
 800250c:	bf0c      	ite	eq
 800250e:	2301      	moveq	r3, #1
 8002510:	2300      	movne	r3, #0
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	d008      	beq.n	800252a <_Z41__static_initialization_and_destruction_0ii+0x76>
 8002518:	4b26      	ldr	r3, [pc, #152]	; (80025b4 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	f04f 0300 	mov.w	r3, #0
 8002520:	4a29      	ldr	r2, [pc, #164]	; (80025c8 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 8002522:	492a      	ldr	r1, [pc, #168]	; (80025cc <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8002524:	482a      	ldr	r0, [pc, #168]	; (80025d0 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8002526:	f7ff fbb5 	bl	8001c94 <_ZN5MotorC1Effff>
inline Motor backLeftMotor(Constants::kBackLeftKP, Constants::kBackLeftKI, Constants::kBackLeftKD, Constants::kBackLeftN);
 800252a:	4b2a      	ldr	r3, [pc, #168]	; (80025d4 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	3301      	adds	r3, #1
 8002530:	4a28      	ldr	r2, [pc, #160]	; (80025d4 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	4b27      	ldr	r3, [pc, #156]	; (80025d4 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b01      	cmp	r3, #1
 800253a:	bf0c      	ite	eq
 800253c:	2301      	moveq	r3, #1
 800253e:	2300      	movne	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d008      	beq.n	8002558 <_Z41__static_initialization_and_destruction_0ii+0xa4>
 8002546:	4b1b      	ldr	r3, [pc, #108]	; (80025b4 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	f04f 0300 	mov.w	r3, #0
 800254e:	4a22      	ldr	r2, [pc, #136]	; (80025d8 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8002550:	4922      	ldr	r1, [pc, #136]	; (80025dc <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8002552:	4823      	ldr	r0, [pc, #140]	; (80025e0 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8002554:	f7ff fb9e 	bl	8001c94 <_ZN5MotorC1Effff>
inline Motor backRightMotor(Constants::kBackRightKP, Constants::kBackRightKI, Constants::kBackRightKD, Constants::kBackRightN);
 8002558:	4b22      	ldr	r3, [pc, #136]	; (80025e4 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	3301      	adds	r3, #1
 800255e:	4a21      	ldr	r2, [pc, #132]	; (80025e4 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	4b20      	ldr	r3, [pc, #128]	; (80025e4 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2b01      	cmp	r3, #1
 8002568:	bf0c      	ite	eq
 800256a:	2301      	moveq	r3, #1
 800256c:	2300      	movne	r3, #0
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <_Z41__static_initialization_and_destruction_0ii+0xd2>
 8002574:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	f04f 0300 	mov.w	r3, #0
 800257c:	4a1a      	ldr	r2, [pc, #104]	; (80025e8 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 800257e:	491b      	ldr	r1, [pc, #108]	; (80025ec <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8002580:	481b      	ldr	r0, [pc, #108]	; (80025f0 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8002582:	f7ff fb87 	bl	8001c94 <_ZN5MotorC1Effff>
inline BNOController bno;
 8002586:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	3301      	adds	r3, #1
 800258c:	4a19      	ldr	r2, [pc, #100]	; (80025f4 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 800258e:	6013      	str	r3, [r2, #0]
 8002590:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b01      	cmp	r3, #1
 8002596:	bf0c      	ite	eq
 8002598:	2301      	moveq	r3, #1
 800259a:	2300      	movne	r3, #0
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <_Z41__static_initialization_and_destruction_0ii+0xf4>
 80025a2:	4815      	ldr	r0, [pc, #84]	; (80025f8 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80025a4:	f7ff fd87 	bl	80020b6 <_ZN13BNOControllerC1Ev>
 80025a8:	bf00      	nop
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20000568 	.word	0x20000568
 80025b4:	42c80000 	.word	0x42c80000
 80025b8:	3f8faeb7 	.word	0x3f8faeb7
 80025bc:	3a132180 	.word	0x3a132180
 80025c0:	20000294 	.word	0x20000294
 80025c4:	2000056c 	.word	0x2000056c
 80025c8:	3f90e0eb 	.word	0x3f90e0eb
 80025cc:	3a145b0e 	.word	0x3a145b0e
 80025d0:	20000324 	.word	0x20000324
 80025d4:	20000570 	.word	0x20000570
 80025d8:	3f8fdd0d 	.word	0x3f8fdd0d
 80025dc:	3a1350f2 	.word	0x3a1350f2
 80025e0:	200003b4 	.word	0x200003b4
 80025e4:	20000574 	.word	0x20000574
 80025e8:	3f8b1c95 	.word	0x3f8b1c95
 80025ec:	3a0e7348 	.word	0x3a0e7348
 80025f0:	20000444 	.word	0x20000444
 80025f4:	20000578 	.word	0x20000578
 80025f8:	200004d4 	.word	0x200004d4

080025fc <_GLOBAL__sub_I__Z12movementInitv>:
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
 8002600:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002604:	2001      	movs	r0, #1
 8002606:	f7ff ff55 	bl	80024b4 <_Z41__static_initialization_and_destruction_0ii>
 800260a:	bd80      	pop	{r7, pc}

0800260c <_ZN3PID3setEffffff>:
#include "PID.h"

void PID::set(float kp, float ki, float kd, float outMin, float outMax, float N)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
 8002618:	603b      	str	r3, [r7, #0]
    kP = kp;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	609a      	str	r2, [r3, #8]
    kI = ki;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	60da      	str	r2, [r3, #12]
    kD = kd;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	611a      	str	r2, [r3, #16]
    out_min = outMin;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	615a      	str	r2, [r3, #20]
    out_max = outMax;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	69fa      	ldr	r2, [r7, #28]
 8002636:	619a      	str	r2, [r3, #24]
    alpha = 1.0f / (1.0f + N); // Filtro pasa-bajas en derivada (si dt = 1)
 8002638:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800263c:	6a38      	ldr	r0, [r7, #32]
 800263e:	f7fe fa79 	bl	8000b34 <__addsf3>
 8002642:	4603      	mov	r3, r0
 8002644:	4619      	mov	r1, r3
 8002646:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800264a:	f7fe fc2f 	bl	8000eac <__aeabi_fdiv>
 800264e:	4603      	mov	r3, r0
 8002650:	461a      	mov	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	621a      	str	r2, [r3, #32]
    deriv_filtered = 0.0f;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f04f 0200 	mov.w	r2, #0
 800265c:	61da      	str	r2, [r3, #28]
}
 800265e:	bf00      	nop
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <_ZN3PID9calculateEfff>:

float PID::calculate(float setpoint, float input, float dt)
{
 8002666:	b590      	push	{r4, r7, lr}
 8002668:	b089      	sub	sp, #36	; 0x24
 800266a:	af00      	add	r7, sp, #0
 800266c:	60f8      	str	r0, [r7, #12]
 800266e:	60b9      	str	r1, [r7, #8]
 8002670:	607a      	str	r2, [r7, #4]
 8002672:	603b      	str	r3, [r7, #0]
    float error = setpoint - input;
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	68b8      	ldr	r0, [r7, #8]
 8002678:	f7fe fa5a 	bl	8000b30 <__aeabi_fsub>
 800267c:	4603      	mov	r3, r0
 800267e:	61bb      	str	r3, [r7, #24]
    integral += error * dt;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	685c      	ldr	r4, [r3, #4]
 8002684:	6839      	ldr	r1, [r7, #0]
 8002686:	69b8      	ldr	r0, [r7, #24]
 8002688:	f7fe fb5c 	bl	8000d44 <__aeabi_fmul>
 800268c:	4603      	mov	r3, r0
 800268e:	4619      	mov	r1, r3
 8002690:	4620      	mov	r0, r4
 8002692:	f7fe fa4f 	bl	8000b34 <__addsf3>
 8002696:	4603      	mov	r3, r0
 8002698:	461a      	mov	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	605a      	str	r2, [r3, #4]
    float derivative = (error - last_error) / dt;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4619      	mov	r1, r3
 80026a4:	69b8      	ldr	r0, [r7, #24]
 80026a6:	f7fe fa43 	bl	8000b30 <__aeabi_fsub>
 80026aa:	4603      	mov	r3, r0
 80026ac:	6839      	ldr	r1, [r7, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe fbfc 	bl	8000eac <__aeabi_fdiv>
 80026b4:	4603      	mov	r3, r0
 80026b6:	617b      	str	r3, [r7, #20]
    alpha = 1.0f / (1.0f + filter_N * dt);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	6839      	ldr	r1, [r7, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe fb40 	bl	8000d44 <__aeabi_fmul>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe fa32 	bl	8000b34 <__addsf3>
 80026d0:	4603      	mov	r3, r0
 80026d2:	4619      	mov	r1, r3
 80026d4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80026d8:	f7fe fbe8 	bl	8000eac <__aeabi_fdiv>
 80026dc:	4603      	mov	r3, r0
 80026de:	461a      	mov	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	621a      	str	r2, [r3, #32]
    deriv_filtered = alpha * deriv_filtered + (1.0f - alpha) * derivative;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6a1a      	ldr	r2, [r3, #32]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	4619      	mov	r1, r3
 80026ee:	4610      	mov	r0, r2
 80026f0:	f7fe fb28 	bl	8000d44 <__aeabi_fmul>
 80026f4:	4603      	mov	r3, r0
 80026f6:	461c      	mov	r4, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	4619      	mov	r1, r3
 80026fe:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002702:	f7fe fa15 	bl	8000b30 <__aeabi_fsub>
 8002706:	4603      	mov	r3, r0
 8002708:	6979      	ldr	r1, [r7, #20]
 800270a:	4618      	mov	r0, r3
 800270c:	f7fe fb1a 	bl	8000d44 <__aeabi_fmul>
 8002710:	4603      	mov	r3, r0
 8002712:	4619      	mov	r1, r3
 8002714:	4620      	mov	r0, r4
 8002716:	f7fe fa0d 	bl	8000b34 <__addsf3>
 800271a:	4603      	mov	r3, r0
 800271c:	461a      	mov	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	61da      	str	r2, [r3, #28]

    float output = kP * error + kI * integral + kD * deriv_filtered;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	69b9      	ldr	r1, [r7, #24]
 8002728:	4618      	mov	r0, r3
 800272a:	f7fe fb0b 	bl	8000d44 <__aeabi_fmul>
 800272e:	4603      	mov	r3, r0
 8002730:	461c      	mov	r4, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4619      	mov	r1, r3
 800273c:	4610      	mov	r0, r2
 800273e:	f7fe fb01 	bl	8000d44 <__aeabi_fmul>
 8002742:	4603      	mov	r3, r0
 8002744:	4619      	mov	r1, r3
 8002746:	4620      	mov	r0, r4
 8002748:	f7fe f9f4 	bl	8000b34 <__addsf3>
 800274c:	4603      	mov	r3, r0
 800274e:	461c      	mov	r4, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	4619      	mov	r1, r3
 800275a:	4610      	mov	r0, r2
 800275c:	f7fe faf2 	bl	8000d44 <__aeabi_fmul>
 8002760:	4603      	mov	r3, r0
 8002762:	4619      	mov	r1, r3
 8002764:	4620      	mov	r0, r4
 8002766:	f7fe f9e5 	bl	8000b34 <__addsf3>
 800276a:	4603      	mov	r3, r0
 800276c:	61fb      	str	r3, [r7, #28]

    if (output > out_max)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	4619      	mov	r1, r3
 8002774:	69f8      	ldr	r0, [r7, #28]
 8002776:	f7fe fca1 	bl	80010bc <__aeabi_fcmpgt>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d002      	beq.n	8002786 <_ZN3PID9calculateEfff+0x120>
        output = out_max;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	61fb      	str	r3, [r7, #28]
    if (output < out_min)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	4619      	mov	r1, r3
 800278c:	69f8      	ldr	r0, [r7, #28]
 800278e:	f7fe fc77 	bl	8001080 <__aeabi_fcmplt>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d002      	beq.n	800279e <_ZN3PID9calculateEfff+0x138>
        output = out_min;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	61fb      	str	r3, [r7, #28]

    last_error = error;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	601a      	str	r2, [r3, #0]
    return output;
 80027a4:	69fb      	ldr	r3, [r7, #28]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3724      	adds	r7, #36	; 0x24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd90      	pop	{r4, r7, pc}
	...

080027b0 <_Z7BT_SendPKc>:
#include "bluetooth_uart.h"

void BT_Send(const char *msg)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7fd fcc9 	bl	8000150 <strlen>
 80027be:	4603      	mov	r3, r0
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	f04f 33ff 	mov.w	r3, #4294967295
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	4803      	ldr	r0, [pc, #12]	; (80027d8 <_Z7BT_SendPKc+0x28>)
 80027ca:	f005 fd94 	bl	80082f6 <HAL_UART_Transmit>
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	2000057c 	.word	0x2000057c

080027dc <_Z15sendMotorSpeedsiff>:

void sendMotorSpeeds(int pwm, float yaw, float error)
{
 80027dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027e0:	b09a      	sub	sp, #104	; 0x68
 80027e2:	af06      	add	r7, sp, #24
 80027e4:	60f8      	str	r0, [r7, #12]
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	607a      	str	r2, [r7, #4]
    char buffer[64];
    sprintf(buffer,
 80027ea:	68b8      	ldr	r0, [r7, #8]
 80027ec:	f7fe fc70 	bl	80010d0 <__aeabi_f2iz>
 80027f0:	4680      	mov	r8, r0
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7fe fc6c 	bl	80010d0 <__aeabi_f2iz>
 80027f8:	4604      	mov	r4, r0
            "Rate:%d YAW:%d Error:%d FL:%d FR:%d BL:%d BR:%d\r\n",
            (int)pwm,
            (int)yaw,
            (int)error,
            (int)frontLeftMotor.getTarget(),
 80027fa:	481b      	ldr	r0, [pc, #108]	; (8002868 <_Z15sendMotorSpeedsiff+0x8c>)
 80027fc:	f7ff fbf1 	bl	8001fe2 <_ZN5Motor9getTargetEv>
 8002800:	4603      	mov	r3, r0
    sprintf(buffer,
 8002802:	4618      	mov	r0, r3
 8002804:	f7fe fc64 	bl	80010d0 <__aeabi_f2iz>
 8002808:	4605      	mov	r5, r0
            (int)frontRightMotor.getTarget(),
 800280a:	4818      	ldr	r0, [pc, #96]	; (800286c <_Z15sendMotorSpeedsiff+0x90>)
 800280c:	f7ff fbe9 	bl	8001fe2 <_ZN5Motor9getTargetEv>
 8002810:	4603      	mov	r3, r0
    sprintf(buffer,
 8002812:	4618      	mov	r0, r3
 8002814:	f7fe fc5c 	bl	80010d0 <__aeabi_f2iz>
 8002818:	4606      	mov	r6, r0
            (int)backLeftMotor.getSpeed(),
 800281a:	4815      	ldr	r0, [pc, #84]	; (8002870 <_Z15sendMotorSpeedsiff+0x94>)
 800281c:	f7ff fbd6 	bl	8001fcc <_ZN5Motor8getSpeedEv>
 8002820:	4603      	mov	r3, r0
    sprintf(buffer,
 8002822:	4618      	mov	r0, r3
 8002824:	f7fe fc54 	bl	80010d0 <__aeabi_f2iz>
 8002828:	6038      	str	r0, [r7, #0]
            (int)backRightMotor.getSpeed());
 800282a:	4812      	ldr	r0, [pc, #72]	; (8002874 <_Z15sendMotorSpeedsiff+0x98>)
 800282c:	f7ff fbce 	bl	8001fcc <_ZN5Motor8getSpeedEv>
 8002830:	4603      	mov	r3, r0
    sprintf(buffer,
 8002832:	4618      	mov	r0, r3
 8002834:	f7fe fc4c 	bl	80010d0 <__aeabi_f2iz>
 8002838:	4603      	mov	r3, r0
 800283a:	f107 0010 	add.w	r0, r7, #16
 800283e:	9304      	str	r3, [sp, #16]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	9303      	str	r3, [sp, #12]
 8002844:	9602      	str	r6, [sp, #8]
 8002846:	9501      	str	r5, [sp, #4]
 8002848:	9400      	str	r4, [sp, #0]
 800284a:	4643      	mov	r3, r8
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	490a      	ldr	r1, [pc, #40]	; (8002878 <_Z15sendMotorSpeedsiff+0x9c>)
 8002850:	f00b fa40 	bl	800dcd4 <siprintf>

    BT_Send(buffer);
 8002854:	f107 0310 	add.w	r3, r7, #16
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff ffa9 	bl	80027b0 <_Z7BT_SendPKc>
}
 800285e:	bf00      	nop
 8002860:	3750      	adds	r7, #80	; 0x50
 8002862:	46bd      	mov	sp, r7
 8002864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002868:	20000294 	.word	0x20000294
 800286c:	20000324 	.word	0x20000324
 8002870:	200003b4 	.word	0x200003b4
 8002874:	20000444 	.word	0x20000444
 8002878:	0800f0a0 	.word	0x0800f0a0

0800287c <_Z41__static_initialization_and_destruction_0ii>:
void sendYaw(float yaw)
{
    char buffer[32];
    snprintf(buffer, sizeof(buffer), "Yaw: %d\r\n", (int)yaw);
    BT_Send(buffer);
}
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af02      	add	r7, sp, #8
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d171      	bne.n	8002970 <_Z41__static_initialization_and_destruction_0ii+0xf4>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002892:	4293      	cmp	r3, r2
 8002894:	d16c      	bne.n	8002970 <_Z41__static_initialization_and_destruction_0ii+0xf4>
inline Motor frontLeftMotor(Constants::kFrontLeftKP, Constants::kFrontLeftKI, Constants::kFrontLeftKD, Constants::kFrontLeftN);
 8002896:	4b38      	ldr	r3, [pc, #224]	; (8002978 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	3301      	adds	r3, #1
 800289c:	4a36      	ldr	r2, [pc, #216]	; (8002978 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	4b35      	ldr	r3, [pc, #212]	; (8002978 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	bf0c      	ite	eq
 80028a8:	2301      	moveq	r3, #1
 80028aa:	2300      	movne	r3, #0
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d008      	beq.n	80028c4 <_Z41__static_initialization_and_destruction_0ii+0x48>
 80028b2:	4b32      	ldr	r3, [pc, #200]	; (800297c <_Z41__static_initialization_and_destruction_0ii+0x100>)
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	f04f 0300 	mov.w	r3, #0
 80028ba:	4a31      	ldr	r2, [pc, #196]	; (8002980 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 80028bc:	4931      	ldr	r1, [pc, #196]	; (8002984 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 80028be:	4832      	ldr	r0, [pc, #200]	; (8002988 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 80028c0:	f7ff f9e8 	bl	8001c94 <_ZN5MotorC1Effff>
inline Motor frontRightMotor(Constants::kFrontRightKP, Constants::kFrontRightKI, Constants::kFrontRightKD, Constants::kFrontRightN);
 80028c4:	4b31      	ldr	r3, [pc, #196]	; (800298c <_Z41__static_initialization_and_destruction_0ii+0x110>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	3301      	adds	r3, #1
 80028ca:	4a30      	ldr	r2, [pc, #192]	; (800298c <_Z41__static_initialization_and_destruction_0ii+0x110>)
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	4b2f      	ldr	r3, [pc, #188]	; (800298c <_Z41__static_initialization_and_destruction_0ii+0x110>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	bf0c      	ite	eq
 80028d6:	2301      	moveq	r3, #1
 80028d8:	2300      	movne	r3, #0
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <_Z41__static_initialization_and_destruction_0ii+0x76>
 80028e0:	4b26      	ldr	r3, [pc, #152]	; (800297c <_Z41__static_initialization_and_destruction_0ii+0x100>)
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	f04f 0300 	mov.w	r3, #0
 80028e8:	4a29      	ldr	r2, [pc, #164]	; (8002990 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 80028ea:	492a      	ldr	r1, [pc, #168]	; (8002994 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 80028ec:	482a      	ldr	r0, [pc, #168]	; (8002998 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 80028ee:	f7ff f9d1 	bl	8001c94 <_ZN5MotorC1Effff>
inline Motor backLeftMotor(Constants::kBackLeftKP, Constants::kBackLeftKI, Constants::kBackLeftKD, Constants::kBackLeftN);
 80028f2:	4b2a      	ldr	r3, [pc, #168]	; (800299c <_Z41__static_initialization_and_destruction_0ii+0x120>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	3301      	adds	r3, #1
 80028f8:	4a28      	ldr	r2, [pc, #160]	; (800299c <_Z41__static_initialization_and_destruction_0ii+0x120>)
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	4b27      	ldr	r3, [pc, #156]	; (800299c <_Z41__static_initialization_and_destruction_0ii+0x120>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2b01      	cmp	r3, #1
 8002902:	bf0c      	ite	eq
 8002904:	2301      	moveq	r3, #1
 8002906:	2300      	movne	r3, #0
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d008      	beq.n	8002920 <_Z41__static_initialization_and_destruction_0ii+0xa4>
 800290e:	4b1b      	ldr	r3, [pc, #108]	; (800297c <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	f04f 0300 	mov.w	r3, #0
 8002916:	4a22      	ldr	r2, [pc, #136]	; (80029a0 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8002918:	4922      	ldr	r1, [pc, #136]	; (80029a4 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 800291a:	4823      	ldr	r0, [pc, #140]	; (80029a8 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 800291c:	f7ff f9ba 	bl	8001c94 <_ZN5MotorC1Effff>
inline Motor backRightMotor(Constants::kBackRightKP, Constants::kBackRightKI, Constants::kBackRightKD, Constants::kBackRightN);
 8002920:	4b22      	ldr	r3, [pc, #136]	; (80029ac <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	3301      	adds	r3, #1
 8002926:	4a21      	ldr	r2, [pc, #132]	; (80029ac <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	4b20      	ldr	r3, [pc, #128]	; (80029ac <_Z41__static_initialization_and_destruction_0ii+0x130>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2b01      	cmp	r3, #1
 8002930:	bf0c      	ite	eq
 8002932:	2301      	moveq	r3, #1
 8002934:	2300      	movne	r3, #0
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d008      	beq.n	800294e <_Z41__static_initialization_and_destruction_0ii+0xd2>
 800293c:	4b0f      	ldr	r3, [pc, #60]	; (800297c <_Z41__static_initialization_and_destruction_0ii+0x100>)
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	f04f 0300 	mov.w	r3, #0
 8002944:	4a1a      	ldr	r2, [pc, #104]	; (80029b0 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8002946:	491b      	ldr	r1, [pc, #108]	; (80029b4 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8002948:	481b      	ldr	r0, [pc, #108]	; (80029b8 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 800294a:	f7ff f9a3 	bl	8001c94 <_ZN5MotorC1Effff>
inline BNOController bno;
 800294e:	4b1b      	ldr	r3, [pc, #108]	; (80029bc <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	3301      	adds	r3, #1
 8002954:	4a19      	ldr	r2, [pc, #100]	; (80029bc <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8002956:	6013      	str	r3, [r2, #0]
 8002958:	4b18      	ldr	r3, [pc, #96]	; (80029bc <_Z41__static_initialization_and_destruction_0ii+0x140>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2b01      	cmp	r3, #1
 800295e:	bf0c      	ite	eq
 8002960:	2301      	moveq	r3, #1
 8002962:	2300      	movne	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d002      	beq.n	8002970 <_Z41__static_initialization_and_destruction_0ii+0xf4>
 800296a:	4815      	ldr	r0, [pc, #84]	; (80029c0 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 800296c:	f7ff fba3 	bl	80020b6 <_ZN13BNOControllerC1Ev>
 8002970:	bf00      	nop
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20000568 	.word	0x20000568
 800297c:	42c80000 	.word	0x42c80000
 8002980:	3f8faeb7 	.word	0x3f8faeb7
 8002984:	3a132180 	.word	0x3a132180
 8002988:	20000294 	.word	0x20000294
 800298c:	2000056c 	.word	0x2000056c
 8002990:	3f90e0eb 	.word	0x3f90e0eb
 8002994:	3a145b0e 	.word	0x3a145b0e
 8002998:	20000324 	.word	0x20000324
 800299c:	20000570 	.word	0x20000570
 80029a0:	3f8fdd0d 	.word	0x3f8fdd0d
 80029a4:	3a1350f2 	.word	0x3a1350f2
 80029a8:	200003b4 	.word	0x200003b4
 80029ac:	20000574 	.word	0x20000574
 80029b0:	3f8b1c95 	.word	0x3f8b1c95
 80029b4:	3a0e7348 	.word	0x3a0e7348
 80029b8:	20000444 	.word	0x20000444
 80029bc:	20000578 	.word	0x20000578
 80029c0:	200004d4 	.word	0x200004d4

080029c4 <_GLOBAL__sub_I__Z7BT_SendPKc>:
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80029cc:	2001      	movs	r0, #1
 80029ce:	f7ff ff55 	bl	800287c <_Z41__static_initialization_and_destruction_0ii>
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <lcd_begin>:
#include "lcd.h"

void lcd_begin()
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
	uint8_t data;
	HAL_Delay(50);
 80029da:	2032      	movs	r0, #50	; 0x32
 80029dc:	f001 f8cc 	bl	8003b78 <HAL_Delay>
	data = 0b00111100;
 80029e0:	233c      	movs	r3, #60	; 0x3c
 80029e2:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(5, data); // Wait 4ms
 80029e4:	79fb      	ldrb	r3, [r7, #7]
 80029e6:	4619      	mov	r1, r3
 80029e8:	2005      	movs	r0, #5
 80029ea:	f000 f851 	bl	8002a90 <send_lcd_command>

	data = 0b00111100;
 80029ee:	233c      	movs	r3, #60	; 0x3c
 80029f0:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // Wait 100us
 80029f2:	79fb      	ldrb	r3, [r7, #7]
 80029f4:	4619      	mov	r1, r3
 80029f6:	2001      	movs	r0, #1
 80029f8:	f000 f84a 	bl	8002a90 <send_lcd_command>

	data = 0b00111100;
 80029fc:	233c      	movs	r3, #60	; 0x3c
 80029fe:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // Wait 100us
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	4619      	mov	r1, r3
 8002a04:	2001      	movs	r0, #1
 8002a06:	f000 f843 	bl	8002a90 <send_lcd_command>

	data = 0b00101100;
 8002a0a:	232c      	movs	r3, #44	; 0x2c
 8002a0c:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // Wait 100us
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	4619      	mov	r1, r3
 8002a12:	2001      	movs	r0, #1
 8002a14:	f000 f83c 	bl	8002a90 <send_lcd_command>

	data = 0b00101100;
 8002a18:	232c      	movs	r3, #44	; 0x2c
 8002a1a:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // Wait 100us
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	4619      	mov	r1, r3
 8002a20:	2001      	movs	r0, #1
 8002a22:	f000 f835 	bl	8002a90 <send_lcd_command>

	data = 0b10001100;
 8002a26:	238c      	movs	r3, #140	; 0x8c
 8002a28:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // NF
 8002a2a:	79fb      	ldrb	r3, [r7, #7]
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	2001      	movs	r0, #1
 8002a30:	f000 f82e 	bl	8002a90 <send_lcd_command>

	data = 0x0C;
 8002a34:	230c      	movs	r3, #12
 8002a36:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data);
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	2001      	movs	r0, #1
 8002a3e:	f000 f827 	bl	8002a90 <send_lcd_command>
	//-----------------------------------------------------------
	data = (0xC0) | (1 << 2);
 8002a42:	23c4      	movs	r3, #196	; 0xc4
 8002a44:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(5, data); // 6b
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	4619      	mov	r1, r3
 8002a4a:	2005      	movs	r0, #5
 8002a4c:	f000 f820 	bl	8002a90 <send_lcd_command>

	data = (0x00) | (1 << 2);
 8002a50:	2304      	movs	r3, #4
 8002a52:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // 7a
 8002a54:	79fb      	ldrb	r3, [r7, #7]
 8002a56:	4619      	mov	r1, r3
 8002a58:	2001      	movs	r0, #1
 8002a5a:	f000 f819 	bl	8002a90 <send_lcd_command>

	data = (0x10) | (1 << 2);
 8002a5e:	2314      	movs	r3, #20
 8002a60:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // 7b
 8002a62:	79fb      	ldrb	r3, [r7, #7]
 8002a64:	4619      	mov	r1, r3
 8002a66:	2001      	movs	r0, #1
 8002a68:	f000 f812 	bl	8002a90 <send_lcd_command>

	data = (0x00) | (1 << 2);
 8002a6c:	2304      	movs	r3, #4
 8002a6e:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(1, data); // 8a
 8002a70:	79fb      	ldrb	r3, [r7, #7]
 8002a72:	4619      	mov	r1, r3
 8002a74:	2001      	movs	r0, #1
 8002a76:	f000 f80b 	bl	8002a90 <send_lcd_command>

	data = (0x60) | (1 << 2);
 8002a7a:	2364      	movs	r3, #100	; 0x64
 8002a7c:	71fb      	strb	r3, [r7, #7]
	send_lcd_command(5, data); // 8b
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	4619      	mov	r1, r3
 8002a82:	2005      	movs	r0, #5
 8002a84:	f000 f804 	bl	8002a90 <send_lcd_command>
}
 8002a88:	bf00      	nop
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <send_lcd_command>:

void send_lcd_command(uint8_t delay, uint8_t info)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af02      	add	r7, sp, #8
 8002a96:	4603      	mov	r3, r0
 8002a98:	460a      	mov	r2, r1
 8002a9a:	71fb      	strb	r3, [r7, #7]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, 0x27 << 1, &info, 1, 1000);
 8002aa0:	1dba      	adds	r2, r7, #6
 8002aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	214e      	movs	r1, #78	; 0x4e
 8002aac:	480d      	ldr	r0, [pc, #52]	; (8002ae4 <send_lcd_command+0x54>)
 8002aae:	f001 fc8d 	bl	80043cc <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8002ab2:	2001      	movs	r0, #1
 8002ab4:	f001 f860 	bl	8003b78 <HAL_Delay>
	info = info & ~(1 << 2);
 8002ab8:	79bb      	ldrb	r3, [r7, #6]
 8002aba:	f023 0304 	bic.w	r3, r3, #4
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, 0x27 << 1, &info, 1, 1000);
 8002ac2:	1dba      	adds	r2, r7, #6
 8002ac4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	2301      	movs	r3, #1
 8002acc:	214e      	movs	r1, #78	; 0x4e
 8002ace:	4805      	ldr	r0, [pc, #20]	; (8002ae4 <send_lcd_command+0x54>)
 8002ad0:	f001 fc7c 	bl	80043cc <HAL_I2C_Master_Transmit>
	HAL_Delay(delay); // Wait 100us
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f001 f84e 	bl	8003b78 <HAL_Delay>
}
 8002adc:	bf00      	nop
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	200005c4 	.word	0x200005c4

08002ae8 <send_msg>:

void send_msg(char *text)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
	uint8_t data;

	while (*text)
 8002af0:	e01e      	b.n	8002b30 <send_msg+0x48>
	{
		data = (*text & 0xF0) | 0x0D | 0x08;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	b25b      	sxtb	r3, r3
 8002af8:	f023 030f 	bic.w	r3, r3, #15
 8002afc:	b25b      	sxtb	r3, r3
 8002afe:	f043 030d 	orr.w	r3, r3, #13
 8002b02:	b25b      	sxtb	r3, r3
 8002b04:	73fb      	strb	r3, [r7, #15]
		send_lcd_command(1, data);
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	2001      	movs	r0, #1
 8002b0c:	f7ff ffc0 	bl	8002a90 <send_lcd_command>
		data = ((*text << 4) & 0xF0) | 0x0D | 0x08;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	b25b      	sxtb	r3, r3
 8002b18:	f043 030d 	orr.w	r3, r3, #13
 8002b1c:	b25b      	sxtb	r3, r3
 8002b1e:	73fb      	strb	r3, [r7, #15]
		send_lcd_command(1, data);
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
 8002b22:	4619      	mov	r1, r3
 8002b24:	2001      	movs	r0, #1
 8002b26:	f7ff ffb3 	bl	8002a90 <send_lcd_command>
		text++;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	607b      	str	r3, [r7, #4]
	while (*text)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1dc      	bne.n	8002af2 <send_msg+0xa>
	}
}
 8002b38:	bf00      	nop
 8002b3a:	bf00      	nop
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
	...

08002b44 <HAL_GPIO_EXTI_Callback>:
static void MX_TIM3_Init(void);
static void MX_USART1_UART_Init(void);

/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8002b4e:	88fb      	ldrh	r3, [r7, #6]
 8002b50:	3b01      	subs	r3, #1
 8002b52:	2b07      	cmp	r3, #7
 8002b54:	d822      	bhi.n	8002b9c <HAL_GPIO_EXTI_Callback+0x58>
 8002b56:	a201      	add	r2, pc, #4	; (adr r2, 8002b5c <HAL_GPIO_EXTI_Callback+0x18>)
 8002b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b5c:	08002b85 	.word	0x08002b85
 8002b60:	08002b7d 	.word	0x08002b7d
 8002b64:	08002b9d 	.word	0x08002b9d
 8002b68:	08002b8d 	.word	0x08002b8d
 8002b6c:	08002b9d 	.word	0x08002b9d
 8002b70:	08002b9d 	.word	0x08002b9d
 8002b74:	08002b9d 	.word	0x08002b9d
 8002b78:	08002b95 	.word	0x08002b95
  {
  case Constants::kFrontLeftEncoder:
    frontLeftMotor.addTicks();
 8002b7c:	4809      	ldr	r0, [pc, #36]	; (8002ba4 <HAL_GPIO_EXTI_Callback+0x60>)
 8002b7e:	f7ff fa17 	bl	8001fb0 <_ZN5Motor8addTicksEv>
    break;
 8002b82:	e00b      	b.n	8002b9c <HAL_GPIO_EXTI_Callback+0x58>
  case Constants::kFrontRightEncoder:
    frontRightMotor.addTicks();
 8002b84:	4808      	ldr	r0, [pc, #32]	; (8002ba8 <HAL_GPIO_EXTI_Callback+0x64>)
 8002b86:	f7ff fa13 	bl	8001fb0 <_ZN5Motor8addTicksEv>
    break;
 8002b8a:	e007      	b.n	8002b9c <HAL_GPIO_EXTI_Callback+0x58>
  case Constants::kBackLeftEncoder:
    backLeftMotor.addTicks();
 8002b8c:	4807      	ldr	r0, [pc, #28]	; (8002bac <HAL_GPIO_EXTI_Callback+0x68>)
 8002b8e:	f7ff fa0f 	bl	8001fb0 <_ZN5Motor8addTicksEv>
    break;
 8002b92:	e003      	b.n	8002b9c <HAL_GPIO_EXTI_Callback+0x58>
  case Constants::kBackRightEncoder:
    backRightMotor.addTicks();
 8002b94:	4806      	ldr	r0, [pc, #24]	; (8002bb0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002b96:	f7ff fa0b 	bl	8001fb0 <_ZN5Motor8addTicksEv>
    break;
 8002b9a:	bf00      	nop
  }
}
 8002b9c:	bf00      	nop
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	20000294 	.word	0x20000294
 8002ba8:	20000324 	.word	0x20000324
 8002bac:	200003b4 	.word	0x200003b4
 8002bb0:	20000444 	.word	0x20000444

08002bb4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002bb4:	b5b0      	push	{r4, r5, r7, lr}
 8002bb6:	b090      	sub	sp, #64	; 0x40
 8002bb8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bba:	f000 ff7b 	bl	8003ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bbe:	f000 f9cd 	bl	8002f5c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bc2:	f000 fbb5 	bl	8003330 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 8002bc6:	f000 fa33 	bl	8003030 <_ZL12MX_I2C1_Initv>
  MX_USB_DEVICE_Init();
 8002bca:	f009 f9d9 	bl	800bf80 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8002bce:	f000 fa63 	bl	8003098 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8002bd2:	f000 faf7 	bl	80031c4 <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 8002bd6:	f000 fb7d 	bl	80032d4 <_ZL19MX_USART1_UART_Initv>

  /* USER CODE BEGIN 2 */
  MX_GPIO_Init();
 8002bda:	f000 fba9 	bl	8003330 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 8002bde:	f000 fa27 	bl	8003030 <_ZL12MX_I2C1_Initv>
  MX_USB_DEVICE_Init();
 8002be2:	f009 f9cd 	bl	800bf80 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_Init();
 8002be6:	f000 ff65 	bl	8003ab4 <HAL_Init>
  SystemClock_Config();
 8002bea:	f000 f9b7 	bl	8002f5c <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 8002bee:	f000 fb9f 	bl	8003330 <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 8002bf2:	f000 fa51 	bl	8003098 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8002bf6:	f000 fae5 	bl	80031c4 <_ZL12MX_TIM3_Initv>

  lcd_begin();
 8002bfa:	f7ff feeb 	bl	80029d4 <lcd_begin>
  bno.init();
 8002bfe:	48b0      	ldr	r0, [pc, #704]	; (8002ec0 <main+0x30c>)
 8002c00:	f7fe febc 	bl	800197c <_ZN13BNOController4initEv>
  send_msg("Equipo4");
 8002c04:	48af      	ldr	r0, [pc, #700]	; (8002ec4 <main+0x310>)
 8002c06:	f7ff ff6f 	bl	8002ae8 <send_msg>

  movementInit();
 8002c0a:	f7ff fa7b 	bl	8002104 <_Z12movementInitv>

  /// SPEED
  setSpeed(speed);
 8002c0e:	4bae      	ldr	r3, [pc, #696]	; (8002ec8 <main+0x314>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff fad4 	bl	80021c0 <_Z8setSpeedi>
  // bno.setTargetYaw(90);
  uint32_t last_average_time = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	61fb      	str	r3, [r7, #28]
  float total_distance = 0;
 8002c1c:	f04f 0300 	mov.w	r3, #0
 8002c20:	61bb      	str	r3, [r7, #24]
  uint32_t last_time_print, last_PIDYAW, dt = HAL_GetTick();
 8002c22:	f000 ff9f 	bl	8003b64 <HAL_GetTick>
 8002c26:	6178      	str	r0, [r7, #20]
  uint32_t init_time, stop_pls = HAL_GetTick();
 8002c28:	f000 ff9c 	bl	8003b64 <HAL_GetTick>
 8002c2c:	6378      	str	r0, [r7, #52]	; 0x34

  // POS //
  float distancia_entera = 0;
 8002c2e:	f04f 0300 	mov.w	r3, #0
 8002c32:	633b      	str	r3, [r7, #48]	; 0x30
  float delta_x, delta_y = 0;
 8002c34:	f04f 0300 	mov.w	r3, #0
 8002c38:	613b      	str	r3, [r7, #16]
  float pos_x, pos_y = 0;
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  int current_speed = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]
  float last_size = 0;
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24
  float iteration = 0;
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	623b      	str	r3, [r7, #32]
  while (1)
  {
    /* USER CODE END WHILE */

    // Timer //
    uint32_t now = HAL_GetTick();
 8002c50:	f000 ff88 	bl	8003b64 <HAL_GetTick>
 8002c54:	60b8      	str	r0, [r7, #8]
    // updateWithoutPID(now);
    updateMovement(now);
 8002c56:	68b8      	ldr	r0, [r7, #8]
 8002c58:	f7ff fae2 	bl	8002220 <_Z14updateMovementm>

    // PID Updater //

    if (now - last_PIDYAW >= 100)
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b63      	cmp	r3, #99	; 0x63
 8002c64:	f240 8083 	bls.w	8002d6e <main+0x1ba>
    {
      setKinematicSpeeds(speed, now);
 8002c68:	4b97      	ldr	r3, [pc, #604]	; (8002ec8 <main+0x314>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fe f815 	bl	8000c9c <__aeabi_i2f>
 8002c72:	4603      	mov	r3, r0
 8002c74:	68b9      	ldr	r1, [r7, #8]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff faf2 	bl	8002260 <_Z18setKinematicSpeedsfm>

      // Odometry //
      dt = (now - last_PIDYAW) / 1000.0f;
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fe f806 	bl	8000c94 <__aeabi_ui2f>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	4990      	ldr	r1, [pc, #576]	; (8002ecc <main+0x318>)
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fe f90d 	bl	8000eac <__aeabi_fdiv>
 8002c92:	4603      	mov	r3, r0
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fe fa41 	bl	800111c <__aeabi_f2uiz>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	617b      	str	r3, [r7, #20]
      delta_x = current_speed * cos(bno.getYawRad()) * dt;
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f7fd fbb0 	bl	8000404 <__aeabi_i2d>
 8002ca4:	4604      	mov	r4, r0
 8002ca6:	460d      	mov	r5, r1
 8002ca8:	4885      	ldr	r0, [pc, #532]	; (8002ec0 <main+0x30c>)
 8002caa:	f7fe ff79 	bl	8001ba0 <_ZN13BNOController9getYawRadEv>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fd fbb9 	bl	8000428 <__aeabi_f2d>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4610      	mov	r0, r2
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	f009 fdd5 	bl	800c86c <cos>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	4629      	mov	r1, r5
 8002cca:	f7fd fc05 	bl	80004d8 <__aeabi_dmul>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4614      	mov	r4, r2
 8002cd4:	461d      	mov	r5, r3
 8002cd6:	6978      	ldr	r0, [r7, #20]
 8002cd8:	f7fd fb84 	bl	80003e4 <__aeabi_ui2d>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4620      	mov	r0, r4
 8002ce2:	4629      	mov	r1, r5
 8002ce4:	f7fd fbf8 	bl	80004d8 <__aeabi_dmul>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4610      	mov	r0, r2
 8002cee:	4619      	mov	r1, r3
 8002cf0:	f7fd feca 	bl	8000a88 <__aeabi_d2f>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	607b      	str	r3, [r7, #4]
      delta_y = current_speed * sin(bno.getYawRad()) * dt;
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f7fd fb83 	bl	8000404 <__aeabi_i2d>
 8002cfe:	4604      	mov	r4, r0
 8002d00:	460d      	mov	r5, r1
 8002d02:	486f      	ldr	r0, [pc, #444]	; (8002ec0 <main+0x30c>)
 8002d04:	f7fe ff4c 	bl	8001ba0 <_ZN13BNOController9getYawRadEv>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fd fb8c 	bl	8000428 <__aeabi_f2d>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4610      	mov	r0, r2
 8002d16:	4619      	mov	r1, r3
 8002d18:	f009 fdea 	bl	800c8f0 <sin>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4620      	mov	r0, r4
 8002d22:	4629      	mov	r1, r5
 8002d24:	f7fd fbd8 	bl	80004d8 <__aeabi_dmul>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4614      	mov	r4, r2
 8002d2e:	461d      	mov	r5, r3
 8002d30:	6978      	ldr	r0, [r7, #20]
 8002d32:	f7fd fb57 	bl	80003e4 <__aeabi_ui2d>
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	4629      	mov	r1, r5
 8002d3e:	f7fd fbcb 	bl	80004d8 <__aeabi_dmul>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4610      	mov	r0, r2
 8002d48:	4619      	mov	r1, r3
 8002d4a:	f7fd fe9d 	bl	8000a88 <__aeabi_d2f>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	613b      	str	r3, [r7, #16]
      pos_x += delta_x;
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d56:	f7fd feed 	bl	8000b34 <__addsf3>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pos_y += delta_y;
 8002d5e:	6939      	ldr	r1, [r7, #16]
 8002d60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d62:	f7fd fee7 	bl	8000b34 <__addsf3>
 8002d66:	4603      	mov	r3, r0
 8002d68:	62bb      	str	r3, [r7, #40]	; 0x28

      last_PIDYAW = now;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    // Communication Message //
    if (now - last_time_print > 100)
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b64      	cmp	r3, #100	; 0x64
 8002d76:	d93a      	bls.n	8002dee <main+0x23a>
    {

      distancia_entera = ((backLeftMotor.getDistance() + backRightMotor.getDistance() + frontLeftMotor.getDistance() + frontRightMotor.getDistance()) / 4);
 8002d78:	4855      	ldr	r0, [pc, #340]	; (8002ed0 <main+0x31c>)
 8002d7a:	f7ff f90e 	bl	8001f9a <_ZN5Motor11getDistanceEv>
 8002d7e:	4604      	mov	r4, r0
 8002d80:	4854      	ldr	r0, [pc, #336]	; (8002ed4 <main+0x320>)
 8002d82:	f7ff f90a 	bl	8001f9a <_ZN5Motor11getDistanceEv>
 8002d86:	4603      	mov	r3, r0
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4620      	mov	r0, r4
 8002d8c:	f7fd fed2 	bl	8000b34 <__addsf3>
 8002d90:	4603      	mov	r3, r0
 8002d92:	461c      	mov	r4, r3
 8002d94:	4850      	ldr	r0, [pc, #320]	; (8002ed8 <main+0x324>)
 8002d96:	f7ff f900 	bl	8001f9a <_ZN5Motor11getDistanceEv>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4620      	mov	r0, r4
 8002da0:	f7fd fec8 	bl	8000b34 <__addsf3>
 8002da4:	4603      	mov	r3, r0
 8002da6:	461c      	mov	r4, r3
 8002da8:	484c      	ldr	r0, [pc, #304]	; (8002edc <main+0x328>)
 8002daa:	f7ff f8f6 	bl	8001f9a <_ZN5Motor11getDistanceEv>
 8002dae:	4603      	mov	r3, r0
 8002db0:	4619      	mov	r1, r3
 8002db2:	4620      	mov	r0, r4
 8002db4:	f7fd febe 	bl	8000b34 <__addsf3>
 8002db8:	4603      	mov	r3, r0
 8002dba:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fe f874 	bl	8000eac <__aeabi_fdiv>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	633b      	str	r3, [r7, #48]	; 0x30
      // sprintf(buffer, "(%d,  %d)", (int)pos_x, (int)pos_y);
      // lcd_clean();
      // send_msg(buffer);

      // Bluetooth //
      sendMotorSpeeds(distancia_entera, bno.getYaw(), bno.getError());
 8002dc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dca:	f7fe f981 	bl	80010d0 <__aeabi_f2iz>
 8002dce:	4604      	mov	r4, r0
 8002dd0:	483b      	ldr	r0, [pc, #236]	; (8002ec0 <main+0x30c>)
 8002dd2:	f7fe fe15 	bl	8001a00 <_ZN13BNOController6getYawEv>
 8002dd6:	4605      	mov	r5, r0
 8002dd8:	4839      	ldr	r0, [pc, #228]	; (8002ec0 <main+0x30c>)
 8002dda:	f7fe ff0f 	bl	8001bfc <_ZN13BNOController8getErrorEv>
 8002dde:	4603      	mov	r3, r0
 8002de0:	461a      	mov	r2, r3
 8002de2:	4629      	mov	r1, r5
 8002de4:	4620      	mov	r0, r4
 8002de6:	f7ff fcf9 	bl	80027dc <_Z15sendMotorSpeedsiff>
      // float yaw = bno.getSpeed();
      // sendYaw(yaw);

      last_time_print = now;
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	63fb      	str	r3, [r7, #60]	; 0x3c
      //   setRotation(false);
      // }
      // PRBS();
    }

    if (distancia_entera - last_size >= square_size && iteration <= 3)
 8002dee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002df0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002df2:	f7fd fe9d 	bl	8000b30 <__aeabi_fsub>
 8002df6:	4603      	mov	r3, r0
 8002df8:	461c      	mov	r4, r3
 8002dfa:	4b39      	ldr	r3, [pc, #228]	; (8002ee0 <main+0x32c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fd ff4c 	bl	8000c9c <__aeabi_i2f>
 8002e04:	4603      	mov	r3, r0
 8002e06:	4619      	mov	r1, r3
 8002e08:	4620      	mov	r0, r4
 8002e0a:	f7fe f94d 	bl	80010a8 <__aeabi_fcmpge>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d02b      	beq.n	8002e6c <main+0x2b8>
 8002e14:	4933      	ldr	r1, [pc, #204]	; (8002ee4 <main+0x330>)
 8002e16:	6a38      	ldr	r0, [r7, #32]
 8002e18:	f7fe f93c 	bl	8001094 <__aeabi_fcmple>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d024      	beq.n	8002e6c <main+0x2b8>
    {
      on_Wait = true;
 8002e22:	4b31      	ldr	r3, [pc, #196]	; (8002ee8 <main+0x334>)
 8002e24:	2201      	movs	r2, #1
 8002e26:	701a      	strb	r2, [r3, #0]
      speed = 0;
 8002e28:	4b27      	ldr	r3, [pc, #156]	; (8002ec8 <main+0x314>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]
      setSpeed(speed);
 8002e2e:	4b26      	ldr	r3, [pc, #152]	; (8002ec8 <main+0x314>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff f9c4 	bl	80021c0 <_Z8setSpeedi>
      current_angle_algorithm += 90;
 8002e38:	4b2c      	ldr	r3, [pc, #176]	; (8002eec <main+0x338>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	335a      	adds	r3, #90	; 0x5a
 8002e3e:	4a2b      	ldr	r2, [pc, #172]	; (8002eec <main+0x338>)
 8002e40:	6013      	str	r3, [r2, #0]
      bno.setTargetYaw(current_angle_algorithm);
 8002e42:	4b2a      	ldr	r3, [pc, #168]	; (8002eec <main+0x338>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fd ff28 	bl	8000c9c <__aeabi_i2f>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	4619      	mov	r1, r3
 8002e50:	481b      	ldr	r0, [pc, #108]	; (8002ec0 <main+0x30c>)
 8002e52:	f7fe fde4 	bl	8001a1e <_ZN13BNOController12setTargetYawEf>
      last_size = distancia_entera;
 8002e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24
      stop_pls = now;
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	637b      	str	r3, [r7, #52]	; 0x34
      iteration++;
 8002e5e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002e62:	6a38      	ldr	r0, [r7, #32]
 8002e64:	f7fd fe66 	bl	8000b34 <__addsf3>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	623b      	str	r3, [r7, #32]
    }

    if (on_Wait && !(std::abs(current_angle_algorithm - bno.getYaw()) <= 10))
 8002e6c:	4b1e      	ldr	r3, [pc, #120]	; (8002ee8 <main+0x334>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d03f      	beq.n	8002ef4 <main+0x340>
 8002e74:	4b1d      	ldr	r3, [pc, #116]	; (8002eec <main+0x338>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fd ff0f 	bl	8000c9c <__aeabi_i2f>
 8002e7e:	4604      	mov	r4, r0
 8002e80:	480f      	ldr	r0, [pc, #60]	; (8002ec0 <main+0x30c>)
 8002e82:	f7fe fdbd 	bl	8001a00 <_ZN13BNOController6getYawEv>
 8002e86:	4603      	mov	r3, r0
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	f7fd fe50 	bl	8000b30 <__aeabi_fsub>
 8002e90:	4603      	mov	r3, r0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fe febe 	bl	8001c14 <_ZSt3absf>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	4614      	mov	r4, r2
 8002e9e:	4914      	ldr	r1, [pc, #80]	; (8002ef0 <main+0x33c>)
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7fe f8f7 	bl	8001094 <__aeabi_fcmple>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <main+0x2fc>
 8002eac:	2300      	movs	r3, #0
 8002eae:	461c      	mov	r4, r3
 8002eb0:	b2e3      	uxtb	r3, r4
 8002eb2:	f083 0301 	eor.w	r3, r3, #1
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d01b      	beq.n	8002ef4 <main+0x340>
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e01a      	b.n	8002ef6 <main+0x342>
 8002ec0:	200004d4 	.word	0x200004d4
 8002ec4:	0800f0e0 	.word	0x0800f0e0
 8002ec8:	20000000 	.word	0x20000000
 8002ecc:	447a0000 	.word	0x447a0000
 8002ed0:	200003b4 	.word	0x200003b4
 8002ed4:	20000444 	.word	0x20000444
 8002ed8:	20000294 	.word	0x20000294
 8002edc:	20000324 	.word	0x20000324
 8002ee0:	20000004 	.word	0x20000004
 8002ee4:	40400000 	.word	0x40400000
 8002ee8:	2000061c 	.word	0x2000061c
 8002eec:	20000618 	.word	0x20000618
 8002ef0:	41200000 	.word	0x41200000
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <main+0x34e>
    {
      stop_pls = now;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	637b      	str	r3, [r7, #52]	; 0x34
      last_size = distancia_entera;
 8002efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (on_Wait && now - stop_pls >= 10000)
 8002f02:	4b13      	ldr	r3, [pc, #76]	; (8002f50 <main+0x39c>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d01e      	beq.n	8002f48 <main+0x394>
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	f242 720f 	movw	r2, #9999	; 0x270f
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d917      	bls.n	8002f48 <main+0x394>
    {
      if (iteration <= 3)
 8002f18:	490e      	ldr	r1, [pc, #56]	; (8002f54 <main+0x3a0>)
 8002f1a:	6a38      	ldr	r0, [r7, #32]
 8002f1c:	f7fe f8ba 	bl	8001094 <__aeabi_fcmple>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <main+0x37a>
      {
        speed = 15;
 8002f26:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <main+0x3a4>)
 8002f28:	220f      	movs	r2, #15
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	e002      	b.n	8002f34 <main+0x380>
      }
      else
      {
        speed = 0;
 8002f2e:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <main+0x3a4>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
      }

      on_Wait = false;
 8002f34:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <main+0x39c>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	701a      	strb	r2, [r3, #0]
      setSpeed(speed);
 8002f3a:	4b07      	ldr	r3, [pc, #28]	; (8002f58 <main+0x3a4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff f93e 	bl	80021c0 <_Z8setSpeedi>
      last_size = distancia_entera;
 8002f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
    //   // sendYaw(yaw);
    //   stop();
    //   // HAL_Delay(Constants::kTimeDelay);
    // }

    HAL_Delay(Constants::kTimeDelay);
 8002f48:	2014      	movs	r0, #20
 8002f4a:	f000 fe15 	bl	8003b78 <HAL_Delay>
    /* USER CODE BEGIN 3 */
  }
 8002f4e:	e67f      	b.n	8002c50 <main+0x9c>
 8002f50:	2000061c 	.word	0x2000061c
 8002f54:	40400000 	.word	0x40400000
 8002f58:	20000000 	.word	0x20000000

08002f5c <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b094      	sub	sp, #80	; 0x50
 8002f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f66:	2228      	movs	r2, #40	; 0x28
 8002f68:	2100      	movs	r1, #0
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f00a fe34 	bl	800dbd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f70:	f107 0314 	add.w	r3, r7, #20
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	605a      	str	r2, [r3, #4]
 8002f7a:	609a      	str	r2, [r3, #8]
 8002f7c:	60da      	str	r2, [r3, #12]
 8002f7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f80:	1d3b      	adds	r3, r7, #4
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	605a      	str	r2, [r3, #4]
 8002f88:	609a      	str	r2, [r3, #8]
 8002f8a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002f96:	2300      	movs	r3, #0
 8002f98:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fa6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002fa8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002fac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f004 f80e 	bl	8006fd4 <HAL_RCC_OscConfig>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	bf14      	ite	ne
 8002fbe:	2301      	movne	r3, #1
 8002fc0:	2300      	moveq	r3, #0
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8002fc8:	f000 fa4c 	bl	8003464 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002fcc:	230f      	movs	r3, #15
 8002fce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002fd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fdc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002fe2:	f107 0314 	add.w	r3, r7, #20
 8002fe6:	2102      	movs	r1, #2
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f004 fa73 	bl	80074d4 <HAL_RCC_ClockConfig>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	bf14      	ite	ne
 8002ff4:	2301      	movne	r3, #1
 8002ff6:	2300      	moveq	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8002ffe:	f000 fa31 	bl	8003464 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003002:	2310      	movs	r3, #16
 8003004:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8003006:	2300      	movs	r3, #0
 8003008:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800300a:	1d3b      	adds	r3, r7, #4
 800300c:	4618      	mov	r0, r3
 800300e:	f004 fbef 	bl	80077f0 <HAL_RCCEx_PeriphCLKConfig>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	bf14      	ite	ne
 8003018:	2301      	movne	r3, #1
 800301a:	2300      	moveq	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 8003022:	f000 fa1f 	bl	8003464 <Error_Handler>
  }
}
 8003026:	bf00      	nop
 8003028:	3750      	adds	r7, #80	; 0x50
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <_ZL12MX_I2C1_Initv>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003034:	4b15      	ldr	r3, [pc, #84]	; (800308c <_ZL12MX_I2C1_Initv+0x5c>)
 8003036:	4a16      	ldr	r2, [pc, #88]	; (8003090 <_ZL12MX_I2C1_Initv+0x60>)
 8003038:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800303a:	4b14      	ldr	r3, [pc, #80]	; (800308c <_ZL12MX_I2C1_Initv+0x5c>)
 800303c:	4a15      	ldr	r2, [pc, #84]	; (8003094 <_ZL12MX_I2C1_Initv+0x64>)
 800303e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003040:	4b12      	ldr	r3, [pc, #72]	; (800308c <_ZL12MX_I2C1_Initv+0x5c>)
 8003042:	2200      	movs	r2, #0
 8003044:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003046:	4b11      	ldr	r3, [pc, #68]	; (800308c <_ZL12MX_I2C1_Initv+0x5c>)
 8003048:	2200      	movs	r2, #0
 800304a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800304c:	4b0f      	ldr	r3, [pc, #60]	; (800308c <_ZL12MX_I2C1_Initv+0x5c>)
 800304e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003052:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003054:	4b0d      	ldr	r3, [pc, #52]	; (800308c <_ZL12MX_I2C1_Initv+0x5c>)
 8003056:	2200      	movs	r2, #0
 8003058:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800305a:	4b0c      	ldr	r3, [pc, #48]	; (800308c <_ZL12MX_I2C1_Initv+0x5c>)
 800305c:	2200      	movs	r2, #0
 800305e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003060:	4b0a      	ldr	r3, [pc, #40]	; (800308c <_ZL12MX_I2C1_Initv+0x5c>)
 8003062:	2200      	movs	r2, #0
 8003064:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003066:	4b09      	ldr	r3, [pc, #36]	; (800308c <_ZL12MX_I2C1_Initv+0x5c>)
 8003068:	2200      	movs	r2, #0
 800306a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800306c:	4807      	ldr	r0, [pc, #28]	; (800308c <_ZL12MX_I2C1_Initv+0x5c>)
 800306e:	f001 f869 	bl	8004144 <HAL_I2C_Init>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	bf14      	ite	ne
 8003078:	2301      	movne	r3, #1
 800307a:	2300      	moveq	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8003082:	f000 f9ef 	bl	8003464 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	200005c4 	.word	0x200005c4
 8003090:	40005400 	.word	0x40005400
 8003094:	000186a0 	.word	0x000186a0

08003098 <_ZL12MX_TIM1_Initv>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b092      	sub	sp, #72	; 0x48
 800309c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800309e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	60da      	str	r2, [r3, #12]
 80030b6:	611a      	str	r2, [r3, #16]
 80030b8:	615a      	str	r2, [r3, #20]
 80030ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80030bc:	1d3b      	adds	r3, r7, #4
 80030be:	2220      	movs	r2, #32
 80030c0:	2100      	movs	r1, #0
 80030c2:	4618      	mov	r0, r3
 80030c4:	f00a fd88 	bl	800dbd8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80030c8:	4b3c      	ldr	r3, [pc, #240]	; (80031bc <_ZL12MX_TIM1_Initv+0x124>)
 80030ca:	4a3d      	ldr	r2, [pc, #244]	; (80031c0 <_ZL12MX_TIM1_Initv+0x128>)
 80030cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 13;
 80030ce:	4b3b      	ldr	r3, [pc, #236]	; (80031bc <_ZL12MX_TIM1_Initv+0x124>)
 80030d0:	220d      	movs	r2, #13
 80030d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030d4:	4b39      	ldr	r3, [pc, #228]	; (80031bc <_ZL12MX_TIM1_Initv+0x124>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 80030da:	4b38      	ldr	r3, [pc, #224]	; (80031bc <_ZL12MX_TIM1_Initv+0x124>)
 80030dc:	22ff      	movs	r2, #255	; 0xff
 80030de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030e0:	4b36      	ldr	r3, [pc, #216]	; (80031bc <_ZL12MX_TIM1_Initv+0x124>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80030e6:	4b35      	ldr	r3, [pc, #212]	; (80031bc <_ZL12MX_TIM1_Initv+0x124>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030ec:	4b33      	ldr	r3, [pc, #204]	; (80031bc <_ZL12MX_TIM1_Initv+0x124>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80030f2:	4832      	ldr	r0, [pc, #200]	; (80031bc <_ZL12MX_TIM1_Initv+0x124>)
 80030f4:	f004 fc32 	bl	800795c <HAL_TIM_PWM_Init>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	bf14      	ite	ne
 80030fe:	2301      	movne	r3, #1
 8003100:	2300      	moveq	r3, #0
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <_ZL12MX_TIM1_Initv+0x74>
  {
    Error_Handler();
 8003108:	f000 f9ac 	bl	8003464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800310c:	2300      	movs	r3, #0
 800310e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003110:	2300      	movs	r3, #0
 8003112:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003114:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003118:	4619      	mov	r1, r3
 800311a:	4828      	ldr	r0, [pc, #160]	; (80031bc <_ZL12MX_TIM1_Initv+0x124>)
 800311c:	f004 ffec 	bl	80080f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	bf14      	ite	ne
 8003126:	2301      	movne	r3, #1
 8003128:	2300      	moveq	r3, #0
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <_ZL12MX_TIM1_Initv+0x9c>
  {
    Error_Handler();
 8003130:	f000 f998 	bl	8003464 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003134:	2360      	movs	r3, #96	; 0x60
 8003136:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003138:	2300      	movs	r3, #0
 800313a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800313c:	2300      	movs	r3, #0
 800313e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003140:	2300      	movs	r3, #0
 8003142:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003144:	2300      	movs	r3, #0
 8003146:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003148:	2300      	movs	r3, #0
 800314a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800314c:	2300      	movs	r3, #0
 800314e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003154:	2200      	movs	r2, #0
 8003156:	4619      	mov	r1, r3
 8003158:	4818      	ldr	r0, [pc, #96]	; (80031bc <_ZL12MX_TIM1_Initv+0x124>)
 800315a:	f004 fcf1 	bl	8007b40 <HAL_TIM_PWM_ConfigChannel>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	bf14      	ite	ne
 8003164:	2301      	movne	r3, #1
 8003166:	2300      	moveq	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <_ZL12MX_TIM1_Initv+0xda>
  {
    Error_Handler();
 800316e:	f000 f979 	bl	8003464 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003172:	2300      	movs	r3, #0
 8003174:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003176:	2300      	movs	r3, #0
 8003178:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800317a:	2300      	movs	r3, #0
 800317c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800317e:	2300      	movs	r3, #0
 8003180:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003186:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800318a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800318c:	2300      	movs	r3, #0
 800318e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003190:	1d3b      	adds	r3, r7, #4
 8003192:	4619      	mov	r1, r3
 8003194:	4809      	ldr	r0, [pc, #36]	; (80031bc <_ZL12MX_TIM1_Initv+0x124>)
 8003196:	f005 f80d 	bl	80081b4 <HAL_TIMEx_ConfigBreakDeadTime>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	bf14      	ite	ne
 80031a0:	2301      	movne	r3, #1
 80031a2:	2300      	moveq	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <_ZL12MX_TIM1_Initv+0x116>
  {
    Error_Handler();
 80031aa:	f000 f95b 	bl	8003464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80031ae:	4803      	ldr	r0, [pc, #12]	; (80031bc <_ZL12MX_TIM1_Initv+0x124>)
 80031b0:	f000 faac 	bl	800370c <HAL_TIM_MspPostInit>
}
 80031b4:	bf00      	nop
 80031b6:	3748      	adds	r7, #72	; 0x48
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	20000204 	.word	0x20000204
 80031c0:	40012c00 	.word	0x40012c00

080031c4 <_ZL12MX_TIM3_Initv>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b08a      	sub	sp, #40	; 0x28
 80031c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031ca:	f107 0320 	add.w	r3, r7, #32
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031d4:	1d3b      	adds	r3, r7, #4
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	605a      	str	r2, [r3, #4]
 80031dc:	609a      	str	r2, [r3, #8]
 80031de:	60da      	str	r2, [r3, #12]
 80031e0:	611a      	str	r2, [r3, #16]
 80031e2:	615a      	str	r2, [r3, #20]
 80031e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80031e6:	4b39      	ldr	r3, [pc, #228]	; (80032cc <_ZL12MX_TIM3_Initv+0x108>)
 80031e8:	4a39      	ldr	r2, [pc, #228]	; (80032d0 <_ZL12MX_TIM3_Initv+0x10c>)
 80031ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 13;
 80031ec:	4b37      	ldr	r3, [pc, #220]	; (80032cc <_ZL12MX_TIM3_Initv+0x108>)
 80031ee:	220d      	movs	r2, #13
 80031f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031f2:	4b36      	ldr	r3, [pc, #216]	; (80032cc <_ZL12MX_TIM3_Initv+0x108>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 80031f8:	4b34      	ldr	r3, [pc, #208]	; (80032cc <_ZL12MX_TIM3_Initv+0x108>)
 80031fa:	22ff      	movs	r2, #255	; 0xff
 80031fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031fe:	4b33      	ldr	r3, [pc, #204]	; (80032cc <_ZL12MX_TIM3_Initv+0x108>)
 8003200:	2200      	movs	r2, #0
 8003202:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003204:	4b31      	ldr	r3, [pc, #196]	; (80032cc <_ZL12MX_TIM3_Initv+0x108>)
 8003206:	2200      	movs	r2, #0
 8003208:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800320a:	4830      	ldr	r0, [pc, #192]	; (80032cc <_ZL12MX_TIM3_Initv+0x108>)
 800320c:	f004 fba6 	bl	800795c <HAL_TIM_PWM_Init>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	bf14      	ite	ne
 8003216:	2301      	movne	r3, #1
 8003218:	2300      	moveq	r3, #0
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <_ZL12MX_TIM3_Initv+0x60>
  {
    Error_Handler();
 8003220:	f000 f920 	bl	8003464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003224:	2300      	movs	r3, #0
 8003226:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003228:	2300      	movs	r3, #0
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800322c:	f107 0320 	add.w	r3, r7, #32
 8003230:	4619      	mov	r1, r3
 8003232:	4826      	ldr	r0, [pc, #152]	; (80032cc <_ZL12MX_TIM3_Initv+0x108>)
 8003234:	f004 ff60 	bl	80080f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	bf14      	ite	ne
 800323e:	2301      	movne	r3, #1
 8003240:	2300      	moveq	r3, #0
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <_ZL12MX_TIM3_Initv+0x88>
  {
    Error_Handler();
 8003248:	f000 f90c 	bl	8003464 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800324c:	2360      	movs	r3, #96	; 0x60
 800324e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003250:	2300      	movs	r3, #0
 8003252:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003254:	2300      	movs	r3, #0
 8003256:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800325c:	1d3b      	adds	r3, r7, #4
 800325e:	2200      	movs	r2, #0
 8003260:	4619      	mov	r1, r3
 8003262:	481a      	ldr	r0, [pc, #104]	; (80032cc <_ZL12MX_TIM3_Initv+0x108>)
 8003264:	f004 fc6c 	bl	8007b40 <HAL_TIM_PWM_ConfigChannel>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	bf14      	ite	ne
 800326e:	2301      	movne	r3, #1
 8003270:	2300      	moveq	r3, #0
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <_ZL12MX_TIM3_Initv+0xb8>
  {
    Error_Handler();
 8003278:	f000 f8f4 	bl	8003464 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800327c:	1d3b      	adds	r3, r7, #4
 800327e:	2204      	movs	r2, #4
 8003280:	4619      	mov	r1, r3
 8003282:	4812      	ldr	r0, [pc, #72]	; (80032cc <_ZL12MX_TIM3_Initv+0x108>)
 8003284:	f004 fc5c 	bl	8007b40 <HAL_TIM_PWM_ConfigChannel>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	bf14      	ite	ne
 800328e:	2301      	movne	r3, #1
 8003290:	2300      	moveq	r3, #0
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8003298:	f000 f8e4 	bl	8003464 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800329c:	1d3b      	adds	r3, r7, #4
 800329e:	220c      	movs	r2, #12
 80032a0:	4619      	mov	r1, r3
 80032a2:	480a      	ldr	r0, [pc, #40]	; (80032cc <_ZL12MX_TIM3_Initv+0x108>)
 80032a4:	f004 fc4c 	bl	8007b40 <HAL_TIM_PWM_ConfigChannel>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	bf14      	ite	ne
 80032ae:	2301      	movne	r3, #1
 80032b0:	2300      	moveq	r3, #0
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <_ZL12MX_TIM3_Initv+0xf8>
  {
    Error_Handler();
 80032b8:	f000 f8d4 	bl	8003464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80032bc:	4803      	ldr	r0, [pc, #12]	; (80032cc <_ZL12MX_TIM3_Initv+0x108>)
 80032be:	f000 fa25 	bl	800370c <HAL_TIM_MspPostInit>
}
 80032c2:	bf00      	nop
 80032c4:	3728      	adds	r7, #40	; 0x28
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	2000024c 	.word	0x2000024c
 80032d0:	40000400 	.word	0x40000400

080032d4 <_ZL19MX_USART1_UART_Initv>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80032d8:	4b13      	ldr	r3, [pc, #76]	; (8003328 <_ZL19MX_USART1_UART_Initv+0x54>)
 80032da:	4a14      	ldr	r2, [pc, #80]	; (800332c <_ZL19MX_USART1_UART_Initv+0x58>)
 80032dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80032de:	4b12      	ldr	r3, [pc, #72]	; (8003328 <_ZL19MX_USART1_UART_Initv+0x54>)
 80032e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80032e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80032e6:	4b10      	ldr	r3, [pc, #64]	; (8003328 <_ZL19MX_USART1_UART_Initv+0x54>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80032ec:	4b0e      	ldr	r3, [pc, #56]	; (8003328 <_ZL19MX_USART1_UART_Initv+0x54>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80032f2:	4b0d      	ldr	r3, [pc, #52]	; (8003328 <_ZL19MX_USART1_UART_Initv+0x54>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80032f8:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <_ZL19MX_USART1_UART_Initv+0x54>)
 80032fa:	220c      	movs	r2, #12
 80032fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032fe:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003300:	2200      	movs	r2, #0
 8003302:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003304:	4b08      	ldr	r3, [pc, #32]	; (8003328 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003306:	2200      	movs	r2, #0
 8003308:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800330a:	4807      	ldr	r0, [pc, #28]	; (8003328 <_ZL19MX_USART1_UART_Initv+0x54>)
 800330c:	f004 ffa3 	bl	8008256 <HAL_UART_Init>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	bf14      	ite	ne
 8003316:	2301      	movne	r3, #1
 8003318:	2300      	moveq	r3, #0
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8003320:	f000 f8a0 	bl	8003464 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8003324:	bf00      	nop
 8003326:	bd80      	pop	{r7, pc}
 8003328:	2000057c 	.word	0x2000057c
 800332c:	40013800 	.word	0x40013800

08003330 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b088      	sub	sp, #32
 8003334:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003336:	f107 0310 	add.w	r3, r7, #16
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	605a      	str	r2, [r3, #4]
 8003340:	609a      	str	r2, [r3, #8]
 8003342:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003344:	4b43      	ldr	r3, [pc, #268]	; (8003454 <_ZL12MX_GPIO_Initv+0x124>)
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	4a42      	ldr	r2, [pc, #264]	; (8003454 <_ZL12MX_GPIO_Initv+0x124>)
 800334a:	f043 0310 	orr.w	r3, r3, #16
 800334e:	6193      	str	r3, [r2, #24]
 8003350:	4b40      	ldr	r3, [pc, #256]	; (8003454 <_ZL12MX_GPIO_Initv+0x124>)
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	f003 0310 	and.w	r3, r3, #16
 8003358:	60fb      	str	r3, [r7, #12]
 800335a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800335c:	4b3d      	ldr	r3, [pc, #244]	; (8003454 <_ZL12MX_GPIO_Initv+0x124>)
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	4a3c      	ldr	r2, [pc, #240]	; (8003454 <_ZL12MX_GPIO_Initv+0x124>)
 8003362:	f043 0320 	orr.w	r3, r3, #32
 8003366:	6193      	str	r3, [r2, #24]
 8003368:	4b3a      	ldr	r3, [pc, #232]	; (8003454 <_ZL12MX_GPIO_Initv+0x124>)
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	f003 0320 	and.w	r3, r3, #32
 8003370:	60bb      	str	r3, [r7, #8]
 8003372:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003374:	4b37      	ldr	r3, [pc, #220]	; (8003454 <_ZL12MX_GPIO_Initv+0x124>)
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	4a36      	ldr	r2, [pc, #216]	; (8003454 <_ZL12MX_GPIO_Initv+0x124>)
 800337a:	f043 0304 	orr.w	r3, r3, #4
 800337e:	6193      	str	r3, [r2, #24]
 8003380:	4b34      	ldr	r3, [pc, #208]	; (8003454 <_ZL12MX_GPIO_Initv+0x124>)
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	607b      	str	r3, [r7, #4]
 800338a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800338c:	4b31      	ldr	r3, [pc, #196]	; (8003454 <_ZL12MX_GPIO_Initv+0x124>)
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	4a30      	ldr	r2, [pc, #192]	; (8003454 <_ZL12MX_GPIO_Initv+0x124>)
 8003392:	f043 0308 	orr.w	r3, r3, #8
 8003396:	6193      	str	r3, [r2, #24]
 8003398:	4b2e      	ldr	r3, [pc, #184]	; (8003454 <_ZL12MX_GPIO_Initv+0x124>)
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	f003 0308 	and.w	r3, r3, #8
 80033a0:	603b      	str	r3, [r7, #0]
 80033a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 80033a4:	2200      	movs	r2, #0
 80033a6:	2130      	movs	r1, #48	; 0x30
 80033a8:	482b      	ldr	r0, [pc, #172]	; (8003458 <_ZL12MX_GPIO_Initv+0x128>)
 80033aa:	f000 fe9b 	bl	80040e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 80033ae:	2200      	movs	r2, #0
 80033b0:	f64e 4101 	movw	r1, #60417	; 0xec01
 80033b4:	4829      	ldr	r0, [pc, #164]	; (800345c <_ZL12MX_GPIO_Initv+0x12c>)
 80033b6:	f000 fe95 	bl	80040e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 PA4*/
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4;
 80033ba:	231f      	movs	r3, #31
 80033bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80033be:	4b28      	ldr	r3, [pc, #160]	; (8003460 <_ZL12MX_GPIO_Initv+0x130>)
 80033c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033c2:	2301      	movs	r3, #1
 80033c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c6:	f107 0310 	add.w	r3, r7, #16
 80033ca:	4619      	mov	r1, r3
 80033cc:	4822      	ldr	r0, [pc, #136]	; (8003458 <_ZL12MX_GPIO_Initv+0x128>)
 80033ce:	f000 fd05 	bl	8003ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 80033d2:	2330      	movs	r3, #48	; 0x30
 80033d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033d6:	2301      	movs	r3, #1
 80033d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033da:	2300      	movs	r3, #0
 80033dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033de:	2302      	movs	r3, #2
 80033e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e2:	f107 0310 	add.w	r3, r7, #16
 80033e6:	4619      	mov	r1, r3
 80033e8:	481b      	ldr	r0, [pc, #108]	; (8003458 <_ZL12MX_GPIO_Initv+0x128>)
 80033ea:	f000 fcf7 	bl	8003ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB11 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80033ee:	f64f 4301 	movw	r3, #64513	; 0xfc01
 80033f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033f4:	2301      	movs	r3, #1
 80033f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033fc:	2302      	movs	r3, #2
 80033fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003400:	f107 0310 	add.w	r3, r7, #16
 8003404:	4619      	mov	r1, r3
 8003406:	4815      	ldr	r0, [pc, #84]	; (800345c <_ZL12MX_GPIO_Initv+0x12c>)
 8003408:	f000 fce8 	bl	8003ddc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800340c:	2200      	movs	r2, #0
 800340e:	2100      	movs	r1, #0
 8003410:	2006      	movs	r0, #6
 8003412:	f000 fcac 	bl	8003d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003416:	2006      	movs	r0, #6
 8003418:	f000 fcc5 	bl	8003da6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800341c:	2200      	movs	r2, #0
 800341e:	2100      	movs	r1, #0
 8003420:	2007      	movs	r0, #7
 8003422:	f000 fca4 	bl	8003d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003426:	2007      	movs	r0, #7
 8003428:	f000 fcbd 	bl	8003da6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800342c:	2200      	movs	r2, #0
 800342e:	2100      	movs	r1, #0
 8003430:	2008      	movs	r0, #8
 8003432:	f000 fc9c 	bl	8003d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003436:	2008      	movs	r0, #8
 8003438:	f000 fcb5 	bl	8003da6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800343c:	2200      	movs	r2, #0
 800343e:	2100      	movs	r1, #0
 8003440:	2009      	movs	r0, #9
 8003442:	f000 fc94 	bl	8003d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003446:	2009      	movs	r0, #9
 8003448:	f000 fcad 	bl	8003da6 <HAL_NVIC_EnableIRQ>
}
 800344c:	bf00      	nop
 800344e:	3720      	adds	r7, #32
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40021000 	.word	0x40021000
 8003458:	40010800 	.word	0x40010800
 800345c:	40010c00 	.word	0x40010c00
 8003460:	10110000 	.word	0x10110000

08003464 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003468:	b672      	cpsid	i
}
 800346a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800346c:	e7fe      	b.n	800346c <Error_Handler+0x8>
	...

08003470 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af02      	add	r7, sp, #8
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d171      	bne.n	8003564 <_Z41__static_initialization_and_destruction_0ii+0xf4>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003486:	4293      	cmp	r3, r2
 8003488:	d16c      	bne.n	8003564 <_Z41__static_initialization_and_destruction_0ii+0xf4>
inline Motor frontLeftMotor(Constants::kFrontLeftKP, Constants::kFrontLeftKI, Constants::kFrontLeftKD, Constants::kFrontLeftN);
 800348a:	4b38      	ldr	r3, [pc, #224]	; (800356c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	3301      	adds	r3, #1
 8003490:	4a36      	ldr	r2, [pc, #216]	; (800356c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8003492:	6013      	str	r3, [r2, #0]
 8003494:	4b35      	ldr	r3, [pc, #212]	; (800356c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b01      	cmp	r3, #1
 800349a:	bf0c      	ite	eq
 800349c:	2301      	moveq	r3, #1
 800349e:	2300      	movne	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d008      	beq.n	80034b8 <_Z41__static_initialization_and_destruction_0ii+0x48>
 80034a6:	4b32      	ldr	r3, [pc, #200]	; (8003570 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	4a31      	ldr	r2, [pc, #196]	; (8003574 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 80034b0:	4931      	ldr	r1, [pc, #196]	; (8003578 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 80034b2:	4832      	ldr	r0, [pc, #200]	; (800357c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 80034b4:	f7fe fbee 	bl	8001c94 <_ZN5MotorC1Effff>
inline Motor frontRightMotor(Constants::kFrontRightKP, Constants::kFrontRightKI, Constants::kFrontRightKD, Constants::kFrontRightN);
 80034b8:	4b31      	ldr	r3, [pc, #196]	; (8003580 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3301      	adds	r3, #1
 80034be:	4a30      	ldr	r2, [pc, #192]	; (8003580 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	4b2f      	ldr	r3, [pc, #188]	; (8003580 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	bf0c      	ite	eq
 80034ca:	2301      	moveq	r3, #1
 80034cc:	2300      	movne	r3, #0
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <_Z41__static_initialization_and_destruction_0ii+0x76>
 80034d4:	4b26      	ldr	r3, [pc, #152]	; (8003570 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	4a29      	ldr	r2, [pc, #164]	; (8003584 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 80034de:	492a      	ldr	r1, [pc, #168]	; (8003588 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 80034e0:	482a      	ldr	r0, [pc, #168]	; (800358c <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 80034e2:	f7fe fbd7 	bl	8001c94 <_ZN5MotorC1Effff>
inline Motor backLeftMotor(Constants::kBackLeftKP, Constants::kBackLeftKI, Constants::kBackLeftKD, Constants::kBackLeftN);
 80034e6:	4b2a      	ldr	r3, [pc, #168]	; (8003590 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	3301      	adds	r3, #1
 80034ec:	4a28      	ldr	r2, [pc, #160]	; (8003590 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 80034ee:	6013      	str	r3, [r2, #0]
 80034f0:	4b27      	ldr	r3, [pc, #156]	; (8003590 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	bf0c      	ite	eq
 80034f8:	2301      	moveq	r3, #1
 80034fa:	2300      	movne	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d008      	beq.n	8003514 <_Z41__static_initialization_and_destruction_0ii+0xa4>
 8003502:	4b1b      	ldr	r3, [pc, #108]	; (8003570 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	f04f 0300 	mov.w	r3, #0
 800350a:	4a22      	ldr	r2, [pc, #136]	; (8003594 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 800350c:	4922      	ldr	r1, [pc, #136]	; (8003598 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 800350e:	4823      	ldr	r0, [pc, #140]	; (800359c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8003510:	f7fe fbc0 	bl	8001c94 <_ZN5MotorC1Effff>
inline Motor backRightMotor(Constants::kBackRightKP, Constants::kBackRightKI, Constants::kBackRightKD, Constants::kBackRightN);
 8003514:	4b22      	ldr	r3, [pc, #136]	; (80035a0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3301      	adds	r3, #1
 800351a:	4a21      	ldr	r2, [pc, #132]	; (80035a0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	4b20      	ldr	r3, [pc, #128]	; (80035a0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2b01      	cmp	r3, #1
 8003524:	bf0c      	ite	eq
 8003526:	2301      	moveq	r3, #1
 8003528:	2300      	movne	r3, #0
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <_Z41__static_initialization_and_destruction_0ii+0xd2>
 8003530:	4b0f      	ldr	r3, [pc, #60]	; (8003570 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	f04f 0300 	mov.w	r3, #0
 8003538:	4a1a      	ldr	r2, [pc, #104]	; (80035a4 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 800353a:	491b      	ldr	r1, [pc, #108]	; (80035a8 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 800353c:	481b      	ldr	r0, [pc, #108]	; (80035ac <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 800353e:	f7fe fba9 	bl	8001c94 <_ZN5MotorC1Effff>
inline BNOController bno;
 8003542:	4b1b      	ldr	r3, [pc, #108]	; (80035b0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	3301      	adds	r3, #1
 8003548:	4a19      	ldr	r2, [pc, #100]	; (80035b0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 800354a:	6013      	str	r3, [r2, #0]
 800354c:	4b18      	ldr	r3, [pc, #96]	; (80035b0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2b01      	cmp	r3, #1
 8003552:	bf0c      	ite	eq
 8003554:	2301      	moveq	r3, #1
 8003556:	2300      	movne	r3, #0
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d002      	beq.n	8003564 <_Z41__static_initialization_and_destruction_0ii+0xf4>
 800355e:	4815      	ldr	r0, [pc, #84]	; (80035b4 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8003560:	f7fe fda9 	bl	80020b6 <_ZN13BNOControllerC1Ev>
 8003564:	bf00      	nop
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	20000568 	.word	0x20000568
 8003570:	42c80000 	.word	0x42c80000
 8003574:	3f8faeb7 	.word	0x3f8faeb7
 8003578:	3a132180 	.word	0x3a132180
 800357c:	20000294 	.word	0x20000294
 8003580:	2000056c 	.word	0x2000056c
 8003584:	3f90e0eb 	.word	0x3f90e0eb
 8003588:	3a145b0e 	.word	0x3a145b0e
 800358c:	20000324 	.word	0x20000324
 8003590:	20000570 	.word	0x20000570
 8003594:	3f8fdd0d 	.word	0x3f8fdd0d
 8003598:	3a1350f2 	.word	0x3a1350f2
 800359c:	200003b4 	.word	0x200003b4
 80035a0:	20000574 	.word	0x20000574
 80035a4:	3f8b1c95 	.word	0x3f8b1c95
 80035a8:	3a0e7348 	.word	0x3a0e7348
 80035ac:	20000444 	.word	0x20000444
 80035b0:	20000578 	.word	0x20000578
 80035b4:	200004d4 	.word	0x200004d4

080035b8 <_GLOBAL__sub_I_hi2c1>:
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80035c0:	2001      	movs	r0, #1
 80035c2:	f7ff ff55 	bl	8003470 <_Z41__static_initialization_and_destruction_0ii>
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80035ce:	4b15      	ldr	r3, [pc, #84]	; (8003624 <HAL_MspInit+0x5c>)
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	4a14      	ldr	r2, [pc, #80]	; (8003624 <HAL_MspInit+0x5c>)
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	6193      	str	r3, [r2, #24]
 80035da:	4b12      	ldr	r3, [pc, #72]	; (8003624 <HAL_MspInit+0x5c>)
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	60bb      	str	r3, [r7, #8]
 80035e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035e6:	4b0f      	ldr	r3, [pc, #60]	; (8003624 <HAL_MspInit+0x5c>)
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	4a0e      	ldr	r2, [pc, #56]	; (8003624 <HAL_MspInit+0x5c>)
 80035ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f0:	61d3      	str	r3, [r2, #28]
 80035f2:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <HAL_MspInit+0x5c>)
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fa:	607b      	str	r3, [r7, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80035fe:	4b0a      	ldr	r3, [pc, #40]	; (8003628 <HAL_MspInit+0x60>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	4a04      	ldr	r2, [pc, #16]	; (8003628 <HAL_MspInit+0x60>)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800361a:	bf00      	nop
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	bc80      	pop	{r7}
 8003622:	4770      	bx	lr
 8003624:	40021000 	.word	0x40021000
 8003628:	40010000 	.word	0x40010000

0800362c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b088      	sub	sp, #32
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003634:	f107 0310 	add.w	r3, r7, #16
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	605a      	str	r2, [r3, #4]
 800363e:	609a      	str	r2, [r3, #8]
 8003640:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a15      	ldr	r2, [pc, #84]	; (800369c <HAL_I2C_MspInit+0x70>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d123      	bne.n	8003694 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800364c:	4b14      	ldr	r3, [pc, #80]	; (80036a0 <HAL_I2C_MspInit+0x74>)
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	4a13      	ldr	r2, [pc, #76]	; (80036a0 <HAL_I2C_MspInit+0x74>)
 8003652:	f043 0308 	orr.w	r3, r3, #8
 8003656:	6193      	str	r3, [r2, #24]
 8003658:	4b11      	ldr	r3, [pc, #68]	; (80036a0 <HAL_I2C_MspInit+0x74>)
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003664:	23c0      	movs	r3, #192	; 0xc0
 8003666:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003668:	2312      	movs	r3, #18
 800366a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800366c:	2303      	movs	r3, #3
 800366e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003670:	f107 0310 	add.w	r3, r7, #16
 8003674:	4619      	mov	r1, r3
 8003676:	480b      	ldr	r0, [pc, #44]	; (80036a4 <HAL_I2C_MspInit+0x78>)
 8003678:	f000 fbb0 	bl	8003ddc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800367c:	4b08      	ldr	r3, [pc, #32]	; (80036a0 <HAL_I2C_MspInit+0x74>)
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	4a07      	ldr	r2, [pc, #28]	; (80036a0 <HAL_I2C_MspInit+0x74>)
 8003682:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003686:	61d3      	str	r3, [r2, #28]
 8003688:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <HAL_I2C_MspInit+0x74>)
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003690:	60bb      	str	r3, [r7, #8]
 8003692:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003694:	bf00      	nop
 8003696:	3720      	adds	r7, #32
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40005400 	.word	0x40005400
 80036a0:	40021000 	.word	0x40021000
 80036a4:	40010c00 	.word	0x40010c00

080036a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a12      	ldr	r2, [pc, #72]	; (8003700 <HAL_TIM_PWM_MspInit+0x58>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d10c      	bne.n	80036d4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036ba:	4b12      	ldr	r3, [pc, #72]	; (8003704 <HAL_TIM_PWM_MspInit+0x5c>)
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	4a11      	ldr	r2, [pc, #68]	; (8003704 <HAL_TIM_PWM_MspInit+0x5c>)
 80036c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036c4:	6193      	str	r3, [r2, #24]
 80036c6:	4b0f      	ldr	r3, [pc, #60]	; (8003704 <HAL_TIM_PWM_MspInit+0x5c>)
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80036d2:	e010      	b.n	80036f6 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a0b      	ldr	r2, [pc, #44]	; (8003708 <HAL_TIM_PWM_MspInit+0x60>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d10b      	bne.n	80036f6 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036de:	4b09      	ldr	r3, [pc, #36]	; (8003704 <HAL_TIM_PWM_MspInit+0x5c>)
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	4a08      	ldr	r2, [pc, #32]	; (8003704 <HAL_TIM_PWM_MspInit+0x5c>)
 80036e4:	f043 0302 	orr.w	r3, r3, #2
 80036e8:	61d3      	str	r3, [r2, #28]
 80036ea:	4b06      	ldr	r3, [pc, #24]	; (8003704 <HAL_TIM_PWM_MspInit+0x5c>)
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	60bb      	str	r3, [r7, #8]
 80036f4:	68bb      	ldr	r3, [r7, #8]
}
 80036f6:	bf00      	nop
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr
 8003700:	40012c00 	.word	0x40012c00
 8003704:	40021000 	.word	0x40021000
 8003708:	40000400 	.word	0x40000400

0800370c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b08a      	sub	sp, #40	; 0x28
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003714:	f107 0318 	add.w	r3, r7, #24
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	605a      	str	r2, [r3, #4]
 800371e:	609a      	str	r2, [r3, #8]
 8003720:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a2b      	ldr	r2, [pc, #172]	; (80037d4 <HAL_TIM_MspPostInit+0xc8>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d119      	bne.n	8003760 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800372c:	4b2a      	ldr	r3, [pc, #168]	; (80037d8 <HAL_TIM_MspPostInit+0xcc>)
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	4a29      	ldr	r2, [pc, #164]	; (80037d8 <HAL_TIM_MspPostInit+0xcc>)
 8003732:	f043 0304 	orr.w	r3, r3, #4
 8003736:	6193      	str	r3, [r2, #24]
 8003738:	4b27      	ldr	r3, [pc, #156]	; (80037d8 <HAL_TIM_MspPostInit+0xcc>)
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003744:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800374a:	2302      	movs	r3, #2
 800374c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800374e:	2302      	movs	r3, #2
 8003750:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003752:	f107 0318 	add.w	r3, r7, #24
 8003756:	4619      	mov	r1, r3
 8003758:	4820      	ldr	r0, [pc, #128]	; (80037dc <HAL_TIM_MspPostInit+0xd0>)
 800375a:	f000 fb3f 	bl	8003ddc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800375e:	e034      	b.n	80037ca <HAL_TIM_MspPostInit+0xbe>
  else if(htim->Instance==TIM3)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a1e      	ldr	r2, [pc, #120]	; (80037e0 <HAL_TIM_MspPostInit+0xd4>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d12f      	bne.n	80037ca <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800376a:	4b1b      	ldr	r3, [pc, #108]	; (80037d8 <HAL_TIM_MspPostInit+0xcc>)
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	4a1a      	ldr	r2, [pc, #104]	; (80037d8 <HAL_TIM_MspPostInit+0xcc>)
 8003770:	f043 0304 	orr.w	r3, r3, #4
 8003774:	6193      	str	r3, [r2, #24]
 8003776:	4b18      	ldr	r3, [pc, #96]	; (80037d8 <HAL_TIM_MspPostInit+0xcc>)
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	613b      	str	r3, [r7, #16]
 8003780:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003782:	4b15      	ldr	r3, [pc, #84]	; (80037d8 <HAL_TIM_MspPostInit+0xcc>)
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	4a14      	ldr	r2, [pc, #80]	; (80037d8 <HAL_TIM_MspPostInit+0xcc>)
 8003788:	f043 0308 	orr.w	r3, r3, #8
 800378c:	6193      	str	r3, [r2, #24]
 800378e:	4b12      	ldr	r3, [pc, #72]	; (80037d8 <HAL_TIM_MspPostInit+0xcc>)
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800379a:	23c0      	movs	r3, #192	; 0xc0
 800379c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800379e:	2302      	movs	r3, #2
 80037a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a2:	2302      	movs	r3, #2
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037a6:	f107 0318 	add.w	r3, r7, #24
 80037aa:	4619      	mov	r1, r3
 80037ac:	480b      	ldr	r0, [pc, #44]	; (80037dc <HAL_TIM_MspPostInit+0xd0>)
 80037ae:	f000 fb15 	bl	8003ddc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80037b2:	2302      	movs	r3, #2
 80037b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b6:	2302      	movs	r3, #2
 80037b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ba:	2302      	movs	r3, #2
 80037bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037be:	f107 0318 	add.w	r3, r7, #24
 80037c2:	4619      	mov	r1, r3
 80037c4:	4807      	ldr	r0, [pc, #28]	; (80037e4 <HAL_TIM_MspPostInit+0xd8>)
 80037c6:	f000 fb09 	bl	8003ddc <HAL_GPIO_Init>
}
 80037ca:	bf00      	nop
 80037cc:	3728      	adds	r7, #40	; 0x28
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	40012c00 	.word	0x40012c00
 80037d8:	40021000 	.word	0x40021000
 80037dc:	40010800 	.word	0x40010800
 80037e0:	40000400 	.word	0x40000400
 80037e4:	40010c00 	.word	0x40010c00

080037e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b088      	sub	sp, #32
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f0:	f107 0310 	add.w	r3, r7, #16
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	605a      	str	r2, [r3, #4]
 80037fa:	609a      	str	r2, [r3, #8]
 80037fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a1c      	ldr	r2, [pc, #112]	; (8003874 <HAL_UART_MspInit+0x8c>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d131      	bne.n	800386c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003808:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <HAL_UART_MspInit+0x90>)
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	4a1a      	ldr	r2, [pc, #104]	; (8003878 <HAL_UART_MspInit+0x90>)
 800380e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003812:	6193      	str	r3, [r2, #24]
 8003814:	4b18      	ldr	r3, [pc, #96]	; (8003878 <HAL_UART_MspInit+0x90>)
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800381c:	60fb      	str	r3, [r7, #12]
 800381e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003820:	4b15      	ldr	r3, [pc, #84]	; (8003878 <HAL_UART_MspInit+0x90>)
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	4a14      	ldr	r2, [pc, #80]	; (8003878 <HAL_UART_MspInit+0x90>)
 8003826:	f043 0304 	orr.w	r3, r3, #4
 800382a:	6193      	str	r3, [r2, #24]
 800382c:	4b12      	ldr	r3, [pc, #72]	; (8003878 <HAL_UART_MspInit+0x90>)
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	60bb      	str	r3, [r7, #8]
 8003836:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003838:	f44f 7300 	mov.w	r3, #512	; 0x200
 800383c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800383e:	2302      	movs	r3, #2
 8003840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003842:	2303      	movs	r3, #3
 8003844:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003846:	f107 0310 	add.w	r3, r7, #16
 800384a:	4619      	mov	r1, r3
 800384c:	480b      	ldr	r0, [pc, #44]	; (800387c <HAL_UART_MspInit+0x94>)
 800384e:	f000 fac5 	bl	8003ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003852:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003856:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003858:	2300      	movs	r3, #0
 800385a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385c:	2300      	movs	r3, #0
 800385e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003860:	f107 0310 	add.w	r3, r7, #16
 8003864:	4619      	mov	r1, r3
 8003866:	4805      	ldr	r0, [pc, #20]	; (800387c <HAL_UART_MspInit+0x94>)
 8003868:	f000 fab8 	bl	8003ddc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800386c:	bf00      	nop
 800386e:	3720      	adds	r7, #32
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40013800 	.word	0x40013800
 8003878:	40021000 	.word	0x40021000
 800387c:	40010800 	.word	0x40010800

08003880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003884:	e7fe      	b.n	8003884 <NMI_Handler+0x4>

08003886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003886:	b480      	push	{r7}
 8003888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800388a:	e7fe      	b.n	800388a <HardFault_Handler+0x4>

0800388c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003890:	e7fe      	b.n	8003890 <MemManage_Handler+0x4>

08003892 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003892:	b480      	push	{r7}
 8003894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003896:	e7fe      	b.n	8003896 <BusFault_Handler+0x4>

08003898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800389c:	e7fe      	b.n	800389c <UsageFault_Handler+0x4>

0800389e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800389e:	b480      	push	{r7}
 80038a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038a2:	bf00      	nop
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bc80      	pop	{r7}
 80038a8:	4770      	bx	lr

080038aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038aa:	b480      	push	{r7}
 80038ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038ae:	bf00      	nop
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr

080038b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038b6:	b480      	push	{r7}
 80038b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038ba:	bf00      	nop
 80038bc:	46bd      	mov	sp, r7
 80038be:	bc80      	pop	{r7}
 80038c0:	4770      	bx	lr

080038c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038c6:	f000 f93b 	bl	8003b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038ca:	bf00      	nop
 80038cc:	bd80      	pop	{r7, pc}

080038ce <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80038d2:	2001      	movs	r0, #1
 80038d4:	f000 fc1e 	bl	8004114 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80038d8:	bf00      	nop
 80038da:	bd80      	pop	{r7, pc}

080038dc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80038e0:	2002      	movs	r0, #2
 80038e2:	f000 fc17 	bl	8004114 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80038e6:	bf00      	nop
 80038e8:	bd80      	pop	{r7, pc}

080038ea <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80038ee:	2004      	movs	r0, #4
 80038f0:	f000 fc10 	bl	8004114 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80038f4:	bf00      	nop
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80038fc:	2008      	movs	r0, #8
 80038fe:	f000 fc09 	bl	8004114 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003902:	bf00      	nop
 8003904:	bd80      	pop	{r7, pc}
	...

08003908 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800390c:	4802      	ldr	r0, [pc, #8]	; (8003918 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800390e:	f001 ff1a 	bl	8005746 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003912:	bf00      	nop
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	200014e8 	.word	0x200014e8

0800391c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]
 800392c:	e00a      	b.n	8003944 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800392e:	f3af 8000 	nop.w
 8003932:	4601      	mov	r1, r0
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	1c5a      	adds	r2, r3, #1
 8003938:	60ba      	str	r2, [r7, #8]
 800393a:	b2ca      	uxtb	r2, r1
 800393c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	3301      	adds	r3, #1
 8003942:	617b      	str	r3, [r7, #20]
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	429a      	cmp	r2, r3
 800394a:	dbf0      	blt.n	800392e <_read+0x12>
	}

return len;
 800394c:	687b      	ldr	r3, [r7, #4]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3718      	adds	r7, #24
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b086      	sub	sp, #24
 800395a:	af00      	add	r7, sp, #0
 800395c:	60f8      	str	r0, [r7, #12]
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003962:	2300      	movs	r3, #0
 8003964:	617b      	str	r3, [r7, #20]
 8003966:	e009      	b.n	800397c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	60ba      	str	r2, [r7, #8]
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	3301      	adds	r3, #1
 800397a:	617b      	str	r3, [r7, #20]
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	429a      	cmp	r2, r3
 8003982:	dbf1      	blt.n	8003968 <_write+0x12>
	}
	return len;
 8003984:	687b      	ldr	r3, [r7, #4]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3718      	adds	r7, #24
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <_close>:

int _close(int file)
{
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
	return -1;
 8003996:	f04f 33ff 	mov.w	r3, #4294967295
}
 800399a:	4618      	mov	r0, r3
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr

080039a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039b4:	605a      	str	r2, [r3, #4]
	return 0;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	bc80      	pop	{r7}
 80039c0:	4770      	bx	lr

080039c2 <_isatty>:

int _isatty(int file)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b083      	sub	sp, #12
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
	return 1;
 80039ca:	2301      	movs	r3, #1
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr

080039d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b085      	sub	sp, #20
 80039da:	af00      	add	r7, sp, #0
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	60b9      	str	r1, [r7, #8]
 80039e0:	607a      	str	r2, [r7, #4]
	return 0;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr
	...

080039f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039f8:	4a14      	ldr	r2, [pc, #80]	; (8003a4c <_sbrk+0x5c>)
 80039fa:	4b15      	ldr	r3, [pc, #84]	; (8003a50 <_sbrk+0x60>)
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a04:	4b13      	ldr	r3, [pc, #76]	; (8003a54 <_sbrk+0x64>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d102      	bne.n	8003a12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a0c:	4b11      	ldr	r3, [pc, #68]	; (8003a54 <_sbrk+0x64>)
 8003a0e:	4a12      	ldr	r2, [pc, #72]	; (8003a58 <_sbrk+0x68>)
 8003a10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a12:	4b10      	ldr	r3, [pc, #64]	; (8003a54 <_sbrk+0x64>)
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4413      	add	r3, r2
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d207      	bcs.n	8003a30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a20:	f00a f8b0 	bl	800db84 <__errno>
 8003a24:	4603      	mov	r3, r0
 8003a26:	220c      	movs	r2, #12
 8003a28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a2e:	e009      	b.n	8003a44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a30:	4b08      	ldr	r3, [pc, #32]	; (8003a54 <_sbrk+0x64>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a36:	4b07      	ldr	r3, [pc, #28]	; (8003a54 <_sbrk+0x64>)
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	4a05      	ldr	r2, [pc, #20]	; (8003a54 <_sbrk+0x64>)
 8003a40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a42:	68fb      	ldr	r3, [r7, #12]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3718      	adds	r7, #24
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	20005000 	.word	0x20005000
 8003a50:	00000400 	.word	0x00000400
 8003a54:	20000620 	.word	0x20000620
 8003a58:	200017d0 	.word	0x200017d0

08003a5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a60:	bf00      	nop
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr

08003a68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003a68:	f7ff fff8 	bl	8003a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a6c:	480b      	ldr	r0, [pc, #44]	; (8003a9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003a6e:	490c      	ldr	r1, [pc, #48]	; (8003aa0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003a70:	4a0c      	ldr	r2, [pc, #48]	; (8003aa4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a74:	e002      	b.n	8003a7c <LoopCopyDataInit>

08003a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a7a:	3304      	adds	r3, #4

08003a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a80:	d3f9      	bcc.n	8003a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a82:	4a09      	ldr	r2, [pc, #36]	; (8003aa8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003a84:	4c09      	ldr	r4, [pc, #36]	; (8003aac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a88:	e001      	b.n	8003a8e <LoopFillZerobss>

08003a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a8c:	3204      	adds	r2, #4

08003a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a90:	d3fb      	bcc.n	8003a8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a92:	f00a f87d 	bl	800db90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003a96:	f7ff f88d 	bl	8002bb4 <main>
  bx lr
 8003a9a:	4770      	bx	lr
  ldr r0, =_sdata
 8003a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003aa0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003aa4:	0800f43c 	.word	0x0800f43c
  ldr r2, =_sbss
 8003aa8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003aac:	200017d0 	.word	0x200017d0

08003ab0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ab0:	e7fe      	b.n	8003ab0 <ADC1_2_IRQHandler>
	...

08003ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ab8:	4b08      	ldr	r3, [pc, #32]	; (8003adc <HAL_Init+0x28>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a07      	ldr	r2, [pc, #28]	; (8003adc <HAL_Init+0x28>)
 8003abe:	f043 0310 	orr.w	r3, r3, #16
 8003ac2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ac4:	2003      	movs	r0, #3
 8003ac6:	f000 f947 	bl	8003d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003aca:	200f      	movs	r0, #15
 8003acc:	f000 f808 	bl	8003ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ad0:	f7ff fd7a 	bl	80035c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40022000 	.word	0x40022000

08003ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ae8:	4b12      	ldr	r3, [pc, #72]	; (8003b34 <HAL_InitTick+0x54>)
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	4b12      	ldr	r3, [pc, #72]	; (8003b38 <HAL_InitTick+0x58>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	4619      	mov	r1, r3
 8003af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 f95f 	bl	8003dc2 <HAL_SYSTICK_Config>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e00e      	b.n	8003b2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b0f      	cmp	r3, #15
 8003b12:	d80a      	bhi.n	8003b2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b14:	2200      	movs	r2, #0
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	f04f 30ff 	mov.w	r0, #4294967295
 8003b1c:	f000 f927 	bl	8003d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b20:	4a06      	ldr	r2, [pc, #24]	; (8003b3c <HAL_InitTick+0x5c>)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	e000      	b.n	8003b2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	20000008 	.word	0x20000008
 8003b38:	20000010 	.word	0x20000010
 8003b3c:	2000000c 	.word	0x2000000c

08003b40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b44:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <HAL_IncTick+0x1c>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <HAL_IncTick+0x20>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4413      	add	r3, r2
 8003b50:	4a03      	ldr	r2, [pc, #12]	; (8003b60 <HAL_IncTick+0x20>)
 8003b52:	6013      	str	r3, [r2, #0]
}
 8003b54:	bf00      	nop
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr
 8003b5c:	20000010 	.word	0x20000010
 8003b60:	20000850 	.word	0x20000850

08003b64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  return uwTick;
 8003b68:	4b02      	ldr	r3, [pc, #8]	; (8003b74 <HAL_GetTick+0x10>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr
 8003b74:	20000850 	.word	0x20000850

08003b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b80:	f7ff fff0 	bl	8003b64 <HAL_GetTick>
 8003b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b90:	d005      	beq.n	8003b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b92:	4b0a      	ldr	r3, [pc, #40]	; (8003bbc <HAL_Delay+0x44>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	461a      	mov	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b9e:	bf00      	nop
 8003ba0:	f7ff ffe0 	bl	8003b64 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d8f7      	bhi.n	8003ba0 <HAL_Delay+0x28>
  {
  }
}
 8003bb0:	bf00      	nop
 8003bb2:	bf00      	nop
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	20000010 	.word	0x20000010

08003bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <__NVIC_SetPriorityGrouping+0x44>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bdc:	4013      	ands	r3, r2
 8003bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bf2:	4a04      	ldr	r2, [pc, #16]	; (8003c04 <__NVIC_SetPriorityGrouping+0x44>)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	60d3      	str	r3, [r2, #12]
}
 8003bf8:	bf00      	nop
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	e000ed00 	.word	0xe000ed00

08003c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c0c:	4b04      	ldr	r3, [pc, #16]	; (8003c20 <__NVIC_GetPriorityGrouping+0x18>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	0a1b      	lsrs	r3, r3, #8
 8003c12:	f003 0307 	and.w	r3, r3, #7
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bc80      	pop	{r7}
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	e000ed00 	.word	0xe000ed00

08003c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	db0b      	blt.n	8003c4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c36:	79fb      	ldrb	r3, [r7, #7]
 8003c38:	f003 021f 	and.w	r2, r3, #31
 8003c3c:	4906      	ldr	r1, [pc, #24]	; (8003c58 <__NVIC_EnableIRQ+0x34>)
 8003c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	2001      	movs	r0, #1
 8003c46:	fa00 f202 	lsl.w	r2, r0, r2
 8003c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr
 8003c58:	e000e100 	.word	0xe000e100

08003c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	4603      	mov	r3, r0
 8003c64:	6039      	str	r1, [r7, #0]
 8003c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	db0a      	blt.n	8003c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	490c      	ldr	r1, [pc, #48]	; (8003ca8 <__NVIC_SetPriority+0x4c>)
 8003c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7a:	0112      	lsls	r2, r2, #4
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	440b      	add	r3, r1
 8003c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c84:	e00a      	b.n	8003c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	4908      	ldr	r1, [pc, #32]	; (8003cac <__NVIC_SetPriority+0x50>)
 8003c8c:	79fb      	ldrb	r3, [r7, #7]
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	3b04      	subs	r3, #4
 8003c94:	0112      	lsls	r2, r2, #4
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	440b      	add	r3, r1
 8003c9a:	761a      	strb	r2, [r3, #24]
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bc80      	pop	{r7}
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	e000e100 	.word	0xe000e100
 8003cac:	e000ed00 	.word	0xe000ed00

08003cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b089      	sub	sp, #36	; 0x24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f1c3 0307 	rsb	r3, r3, #7
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	bf28      	it	cs
 8003cce:	2304      	movcs	r3, #4
 8003cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	2b06      	cmp	r3, #6
 8003cd8:	d902      	bls.n	8003ce0 <NVIC_EncodePriority+0x30>
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	3b03      	subs	r3, #3
 8003cde:	e000      	b.n	8003ce2 <NVIC_EncodePriority+0x32>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	43da      	mvns	r2, r3
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	401a      	ands	r2, r3
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003d02:	43d9      	mvns	r1, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d08:	4313      	orrs	r3, r2
         );
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3724      	adds	r7, #36	; 0x24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bc80      	pop	{r7}
 8003d12:	4770      	bx	lr

08003d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d24:	d301      	bcc.n	8003d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d26:	2301      	movs	r3, #1
 8003d28:	e00f      	b.n	8003d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d2a:	4a0a      	ldr	r2, [pc, #40]	; (8003d54 <SysTick_Config+0x40>)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d32:	210f      	movs	r1, #15
 8003d34:	f04f 30ff 	mov.w	r0, #4294967295
 8003d38:	f7ff ff90 	bl	8003c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d3c:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <SysTick_Config+0x40>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d42:	4b04      	ldr	r3, [pc, #16]	; (8003d54 <SysTick_Config+0x40>)
 8003d44:	2207      	movs	r2, #7
 8003d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	e000e010 	.word	0xe000e010

08003d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff ff2d 	bl	8003bc0 <__NVIC_SetPriorityGrouping>
}
 8003d66:	bf00      	nop
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b086      	sub	sp, #24
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	4603      	mov	r3, r0
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	607a      	str	r2, [r7, #4]
 8003d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d80:	f7ff ff42 	bl	8003c08 <__NVIC_GetPriorityGrouping>
 8003d84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	68b9      	ldr	r1, [r7, #8]
 8003d8a:	6978      	ldr	r0, [r7, #20]
 8003d8c:	f7ff ff90 	bl	8003cb0 <NVIC_EncodePriority>
 8003d90:	4602      	mov	r2, r0
 8003d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d96:	4611      	mov	r1, r2
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff ff5f 	bl	8003c5c <__NVIC_SetPriority>
}
 8003d9e:	bf00      	nop
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b082      	sub	sp, #8
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	4603      	mov	r3, r0
 8003dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff ff35 	bl	8003c24 <__NVIC_EnableIRQ>
}
 8003dba:	bf00      	nop
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b082      	sub	sp, #8
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff ffa2 	bl	8003d14 <SysTick_Config>
 8003dd0:	4603      	mov	r3, r0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
	...

08003ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b08b      	sub	sp, #44	; 0x2c
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003de6:	2300      	movs	r3, #0
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003dea:	2300      	movs	r3, #0
 8003dec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dee:	e169      	b.n	80040c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003df0:	2201      	movs	r2, #1
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69fa      	ldr	r2, [r7, #28]
 8003e00:	4013      	ands	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	f040 8158 	bne.w	80040be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	4a9a      	ldr	r2, [pc, #616]	; (800407c <HAL_GPIO_Init+0x2a0>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d05e      	beq.n	8003ed6 <HAL_GPIO_Init+0xfa>
 8003e18:	4a98      	ldr	r2, [pc, #608]	; (800407c <HAL_GPIO_Init+0x2a0>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d875      	bhi.n	8003f0a <HAL_GPIO_Init+0x12e>
 8003e1e:	4a98      	ldr	r2, [pc, #608]	; (8004080 <HAL_GPIO_Init+0x2a4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d058      	beq.n	8003ed6 <HAL_GPIO_Init+0xfa>
 8003e24:	4a96      	ldr	r2, [pc, #600]	; (8004080 <HAL_GPIO_Init+0x2a4>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d86f      	bhi.n	8003f0a <HAL_GPIO_Init+0x12e>
 8003e2a:	4a96      	ldr	r2, [pc, #600]	; (8004084 <HAL_GPIO_Init+0x2a8>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d052      	beq.n	8003ed6 <HAL_GPIO_Init+0xfa>
 8003e30:	4a94      	ldr	r2, [pc, #592]	; (8004084 <HAL_GPIO_Init+0x2a8>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d869      	bhi.n	8003f0a <HAL_GPIO_Init+0x12e>
 8003e36:	4a94      	ldr	r2, [pc, #592]	; (8004088 <HAL_GPIO_Init+0x2ac>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d04c      	beq.n	8003ed6 <HAL_GPIO_Init+0xfa>
 8003e3c:	4a92      	ldr	r2, [pc, #584]	; (8004088 <HAL_GPIO_Init+0x2ac>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d863      	bhi.n	8003f0a <HAL_GPIO_Init+0x12e>
 8003e42:	4a92      	ldr	r2, [pc, #584]	; (800408c <HAL_GPIO_Init+0x2b0>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d046      	beq.n	8003ed6 <HAL_GPIO_Init+0xfa>
 8003e48:	4a90      	ldr	r2, [pc, #576]	; (800408c <HAL_GPIO_Init+0x2b0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d85d      	bhi.n	8003f0a <HAL_GPIO_Init+0x12e>
 8003e4e:	2b12      	cmp	r3, #18
 8003e50:	d82a      	bhi.n	8003ea8 <HAL_GPIO_Init+0xcc>
 8003e52:	2b12      	cmp	r3, #18
 8003e54:	d859      	bhi.n	8003f0a <HAL_GPIO_Init+0x12e>
 8003e56:	a201      	add	r2, pc, #4	; (adr r2, 8003e5c <HAL_GPIO_Init+0x80>)
 8003e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5c:	08003ed7 	.word	0x08003ed7
 8003e60:	08003eb1 	.word	0x08003eb1
 8003e64:	08003ec3 	.word	0x08003ec3
 8003e68:	08003f05 	.word	0x08003f05
 8003e6c:	08003f0b 	.word	0x08003f0b
 8003e70:	08003f0b 	.word	0x08003f0b
 8003e74:	08003f0b 	.word	0x08003f0b
 8003e78:	08003f0b 	.word	0x08003f0b
 8003e7c:	08003f0b 	.word	0x08003f0b
 8003e80:	08003f0b 	.word	0x08003f0b
 8003e84:	08003f0b 	.word	0x08003f0b
 8003e88:	08003f0b 	.word	0x08003f0b
 8003e8c:	08003f0b 	.word	0x08003f0b
 8003e90:	08003f0b 	.word	0x08003f0b
 8003e94:	08003f0b 	.word	0x08003f0b
 8003e98:	08003f0b 	.word	0x08003f0b
 8003e9c:	08003f0b 	.word	0x08003f0b
 8003ea0:	08003eb9 	.word	0x08003eb9
 8003ea4:	08003ecd 	.word	0x08003ecd
 8003ea8:	4a79      	ldr	r2, [pc, #484]	; (8004090 <HAL_GPIO_Init+0x2b4>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d013      	beq.n	8003ed6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003eae:	e02c      	b.n	8003f0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	623b      	str	r3, [r7, #32]
          break;
 8003eb6:	e029      	b.n	8003f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	623b      	str	r3, [r7, #32]
          break;
 8003ec0:	e024      	b.n	8003f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	3308      	adds	r3, #8
 8003ec8:	623b      	str	r3, [r7, #32]
          break;
 8003eca:	e01f      	b.n	8003f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	330c      	adds	r3, #12
 8003ed2:	623b      	str	r3, [r7, #32]
          break;
 8003ed4:	e01a      	b.n	8003f0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d102      	bne.n	8003ee4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003ede:	2304      	movs	r3, #4
 8003ee0:	623b      	str	r3, [r7, #32]
          break;
 8003ee2:	e013      	b.n	8003f0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d105      	bne.n	8003ef8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003eec:	2308      	movs	r3, #8
 8003eee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	69fa      	ldr	r2, [r7, #28]
 8003ef4:	611a      	str	r2, [r3, #16]
          break;
 8003ef6:	e009      	b.n	8003f0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ef8:	2308      	movs	r3, #8
 8003efa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	69fa      	ldr	r2, [r7, #28]
 8003f00:	615a      	str	r2, [r3, #20]
          break;
 8003f02:	e003      	b.n	8003f0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003f04:	2300      	movs	r3, #0
 8003f06:	623b      	str	r3, [r7, #32]
          break;
 8003f08:	e000      	b.n	8003f0c <HAL_GPIO_Init+0x130>
          break;
 8003f0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	2bff      	cmp	r3, #255	; 0xff
 8003f10:	d801      	bhi.n	8003f16 <HAL_GPIO_Init+0x13a>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	e001      	b.n	8003f1a <HAL_GPIO_Init+0x13e>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	2bff      	cmp	r3, #255	; 0xff
 8003f20:	d802      	bhi.n	8003f28 <HAL_GPIO_Init+0x14c>
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	e002      	b.n	8003f2e <HAL_GPIO_Init+0x152>
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	3b08      	subs	r3, #8
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	210f      	movs	r1, #15
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	fa01 f303 	lsl.w	r3, r1, r3
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	401a      	ands	r2, r3
 8003f40:	6a39      	ldr	r1, [r7, #32]
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	fa01 f303 	lsl.w	r3, r1, r3
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 80b1 	beq.w	80040be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003f5c:	4b4d      	ldr	r3, [pc, #308]	; (8004094 <HAL_GPIO_Init+0x2b8>)
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	4a4c      	ldr	r2, [pc, #304]	; (8004094 <HAL_GPIO_Init+0x2b8>)
 8003f62:	f043 0301 	orr.w	r3, r3, #1
 8003f66:	6193      	str	r3, [r2, #24]
 8003f68:	4b4a      	ldr	r3, [pc, #296]	; (8004094 <HAL_GPIO_Init+0x2b8>)
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	60bb      	str	r3, [r7, #8]
 8003f72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003f74:	4a48      	ldr	r2, [pc, #288]	; (8004098 <HAL_GPIO_Init+0x2bc>)
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	089b      	lsrs	r3, r3, #2
 8003f7a:	3302      	adds	r3, #2
 8003f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	f003 0303 	and.w	r3, r3, #3
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	220f      	movs	r2, #15
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	43db      	mvns	r3, r3
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4013      	ands	r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a40      	ldr	r2, [pc, #256]	; (800409c <HAL_GPIO_Init+0x2c0>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d013      	beq.n	8003fc8 <HAL_GPIO_Init+0x1ec>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a3f      	ldr	r2, [pc, #252]	; (80040a0 <HAL_GPIO_Init+0x2c4>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d00d      	beq.n	8003fc4 <HAL_GPIO_Init+0x1e8>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a3e      	ldr	r2, [pc, #248]	; (80040a4 <HAL_GPIO_Init+0x2c8>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d007      	beq.n	8003fc0 <HAL_GPIO_Init+0x1e4>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a3d      	ldr	r2, [pc, #244]	; (80040a8 <HAL_GPIO_Init+0x2cc>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d101      	bne.n	8003fbc <HAL_GPIO_Init+0x1e0>
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e006      	b.n	8003fca <HAL_GPIO_Init+0x1ee>
 8003fbc:	2304      	movs	r3, #4
 8003fbe:	e004      	b.n	8003fca <HAL_GPIO_Init+0x1ee>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	e002      	b.n	8003fca <HAL_GPIO_Init+0x1ee>
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e000      	b.n	8003fca <HAL_GPIO_Init+0x1ee>
 8003fc8:	2300      	movs	r3, #0
 8003fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fcc:	f002 0203 	and.w	r2, r2, #3
 8003fd0:	0092      	lsls	r2, r2, #2
 8003fd2:	4093      	lsls	r3, r2
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003fda:	492f      	ldr	r1, [pc, #188]	; (8004098 <HAL_GPIO_Init+0x2bc>)
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	089b      	lsrs	r3, r3, #2
 8003fe0:	3302      	adds	r3, #2
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d006      	beq.n	8004002 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003ff4:	4b2d      	ldr	r3, [pc, #180]	; (80040ac <HAL_GPIO_Init+0x2d0>)
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	492c      	ldr	r1, [pc, #176]	; (80040ac <HAL_GPIO_Init+0x2d0>)
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	608b      	str	r3, [r1, #8]
 8004000:	e006      	b.n	8004010 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004002:	4b2a      	ldr	r3, [pc, #168]	; (80040ac <HAL_GPIO_Init+0x2d0>)
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	43db      	mvns	r3, r3
 800400a:	4928      	ldr	r1, [pc, #160]	; (80040ac <HAL_GPIO_Init+0x2d0>)
 800400c:	4013      	ands	r3, r2
 800400e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d006      	beq.n	800402a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800401c:	4b23      	ldr	r3, [pc, #140]	; (80040ac <HAL_GPIO_Init+0x2d0>)
 800401e:	68da      	ldr	r2, [r3, #12]
 8004020:	4922      	ldr	r1, [pc, #136]	; (80040ac <HAL_GPIO_Init+0x2d0>)
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	4313      	orrs	r3, r2
 8004026:	60cb      	str	r3, [r1, #12]
 8004028:	e006      	b.n	8004038 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800402a:	4b20      	ldr	r3, [pc, #128]	; (80040ac <HAL_GPIO_Init+0x2d0>)
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	43db      	mvns	r3, r3
 8004032:	491e      	ldr	r1, [pc, #120]	; (80040ac <HAL_GPIO_Init+0x2d0>)
 8004034:	4013      	ands	r3, r2
 8004036:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d006      	beq.n	8004052 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004044:	4b19      	ldr	r3, [pc, #100]	; (80040ac <HAL_GPIO_Init+0x2d0>)
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	4918      	ldr	r1, [pc, #96]	; (80040ac <HAL_GPIO_Init+0x2d0>)
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	4313      	orrs	r3, r2
 800404e:	604b      	str	r3, [r1, #4]
 8004050:	e006      	b.n	8004060 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004052:	4b16      	ldr	r3, [pc, #88]	; (80040ac <HAL_GPIO_Init+0x2d0>)
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	43db      	mvns	r3, r3
 800405a:	4914      	ldr	r1, [pc, #80]	; (80040ac <HAL_GPIO_Init+0x2d0>)
 800405c:	4013      	ands	r3, r2
 800405e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d021      	beq.n	80040b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800406c:	4b0f      	ldr	r3, [pc, #60]	; (80040ac <HAL_GPIO_Init+0x2d0>)
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	490e      	ldr	r1, [pc, #56]	; (80040ac <HAL_GPIO_Init+0x2d0>)
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	4313      	orrs	r3, r2
 8004076:	600b      	str	r3, [r1, #0]
 8004078:	e021      	b.n	80040be <HAL_GPIO_Init+0x2e2>
 800407a:	bf00      	nop
 800407c:	10320000 	.word	0x10320000
 8004080:	10310000 	.word	0x10310000
 8004084:	10220000 	.word	0x10220000
 8004088:	10210000 	.word	0x10210000
 800408c:	10120000 	.word	0x10120000
 8004090:	10110000 	.word	0x10110000
 8004094:	40021000 	.word	0x40021000
 8004098:	40010000 	.word	0x40010000
 800409c:	40010800 	.word	0x40010800
 80040a0:	40010c00 	.word	0x40010c00
 80040a4:	40011000 	.word	0x40011000
 80040a8:	40011400 	.word	0x40011400
 80040ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80040b0:	4b0b      	ldr	r3, [pc, #44]	; (80040e0 <HAL_GPIO_Init+0x304>)
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	43db      	mvns	r3, r3
 80040b8:	4909      	ldr	r1, [pc, #36]	; (80040e0 <HAL_GPIO_Init+0x304>)
 80040ba:	4013      	ands	r3, r2
 80040bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80040be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c0:	3301      	adds	r3, #1
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	fa22 f303 	lsr.w	r3, r2, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f47f ae8e 	bne.w	8003df0 <HAL_GPIO_Init+0x14>
  }
}
 80040d4:	bf00      	nop
 80040d6:	bf00      	nop
 80040d8:	372c      	adds	r7, #44	; 0x2c
 80040da:	46bd      	mov	sp, r7
 80040dc:	bc80      	pop	{r7}
 80040de:	4770      	bx	lr
 80040e0:	40010400 	.word	0x40010400

080040e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	460b      	mov	r3, r1
 80040ee:	807b      	strh	r3, [r7, #2]
 80040f0:	4613      	mov	r3, r2
 80040f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040f4:	787b      	ldrb	r3, [r7, #1]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040fa:	887a      	ldrh	r2, [r7, #2]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004100:	e003      	b.n	800410a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004102:	887b      	ldrh	r3, [r7, #2]
 8004104:	041a      	lsls	r2, r3, #16
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	611a      	str	r2, [r3, #16]
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr

08004114 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	4603      	mov	r3, r0
 800411c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800411e:	4b08      	ldr	r3, [pc, #32]	; (8004140 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004120:	695a      	ldr	r2, [r3, #20]
 8004122:	88fb      	ldrh	r3, [r7, #6]
 8004124:	4013      	ands	r3, r2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d006      	beq.n	8004138 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800412a:	4a05      	ldr	r2, [pc, #20]	; (8004140 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800412c:	88fb      	ldrh	r3, [r7, #6]
 800412e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004130:	88fb      	ldrh	r3, [r7, #6]
 8004132:	4618      	mov	r0, r3
 8004134:	f7fe fd06 	bl	8002b44 <HAL_GPIO_EXTI_Callback>
  }
}
 8004138:	bf00      	nop
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40010400 	.word	0x40010400

08004144 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e12b      	b.n	80043ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d106      	bne.n	8004170 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7ff fa5e 	bl	800362c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2224      	movs	r2, #36	; 0x24
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 0201 	bic.w	r2, r2, #1
 8004186:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004196:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041a8:	f003 fadc 	bl	8007764 <HAL_RCC_GetPCLK1Freq>
 80041ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	4a81      	ldr	r2, [pc, #516]	; (80043b8 <HAL_I2C_Init+0x274>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d807      	bhi.n	80041c8 <HAL_I2C_Init+0x84>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4a80      	ldr	r2, [pc, #512]	; (80043bc <HAL_I2C_Init+0x278>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	bf94      	ite	ls
 80041c0:	2301      	movls	r3, #1
 80041c2:	2300      	movhi	r3, #0
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	e006      	b.n	80041d6 <HAL_I2C_Init+0x92>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4a7d      	ldr	r2, [pc, #500]	; (80043c0 <HAL_I2C_Init+0x27c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	bf94      	ite	ls
 80041d0:	2301      	movls	r3, #1
 80041d2:	2300      	movhi	r3, #0
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e0e7      	b.n	80043ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	4a78      	ldr	r2, [pc, #480]	; (80043c4 <HAL_I2C_Init+0x280>)
 80041e2:	fba2 2303 	umull	r2, r3, r2, r3
 80041e6:	0c9b      	lsrs	r3, r3, #18
 80041e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	4a6a      	ldr	r2, [pc, #424]	; (80043b8 <HAL_I2C_Init+0x274>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d802      	bhi.n	8004218 <HAL_I2C_Init+0xd4>
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	3301      	adds	r3, #1
 8004216:	e009      	b.n	800422c <HAL_I2C_Init+0xe8>
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800421e:	fb02 f303 	mul.w	r3, r2, r3
 8004222:	4a69      	ldr	r2, [pc, #420]	; (80043c8 <HAL_I2C_Init+0x284>)
 8004224:	fba2 2303 	umull	r2, r3, r2, r3
 8004228:	099b      	lsrs	r3, r3, #6
 800422a:	3301      	adds	r3, #1
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	6812      	ldr	r2, [r2, #0]
 8004230:	430b      	orrs	r3, r1
 8004232:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800423e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	495c      	ldr	r1, [pc, #368]	; (80043b8 <HAL_I2C_Init+0x274>)
 8004248:	428b      	cmp	r3, r1
 800424a:	d819      	bhi.n	8004280 <HAL_I2C_Init+0x13c>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	1e59      	subs	r1, r3, #1
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	fbb1 f3f3 	udiv	r3, r1, r3
 800425a:	1c59      	adds	r1, r3, #1
 800425c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004260:	400b      	ands	r3, r1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <HAL_I2C_Init+0x138>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	1e59      	subs	r1, r3, #1
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	fbb1 f3f3 	udiv	r3, r1, r3
 8004274:	3301      	adds	r3, #1
 8004276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800427a:	e051      	b.n	8004320 <HAL_I2C_Init+0x1dc>
 800427c:	2304      	movs	r3, #4
 800427e:	e04f      	b.n	8004320 <HAL_I2C_Init+0x1dc>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d111      	bne.n	80042ac <HAL_I2C_Init+0x168>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	1e58      	subs	r0, r3, #1
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6859      	ldr	r1, [r3, #4]
 8004290:	460b      	mov	r3, r1
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	440b      	add	r3, r1
 8004296:	fbb0 f3f3 	udiv	r3, r0, r3
 800429a:	3301      	adds	r3, #1
 800429c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	bf0c      	ite	eq
 80042a4:	2301      	moveq	r3, #1
 80042a6:	2300      	movne	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	e012      	b.n	80042d2 <HAL_I2C_Init+0x18e>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	1e58      	subs	r0, r3, #1
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6859      	ldr	r1, [r3, #4]
 80042b4:	460b      	mov	r3, r1
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	440b      	add	r3, r1
 80042ba:	0099      	lsls	r1, r3, #2
 80042bc:	440b      	add	r3, r1
 80042be:	fbb0 f3f3 	udiv	r3, r0, r3
 80042c2:	3301      	adds	r3, #1
 80042c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	bf0c      	ite	eq
 80042cc:	2301      	moveq	r3, #1
 80042ce:	2300      	movne	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <HAL_I2C_Init+0x196>
 80042d6:	2301      	movs	r3, #1
 80042d8:	e022      	b.n	8004320 <HAL_I2C_Init+0x1dc>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10e      	bne.n	8004300 <HAL_I2C_Init+0x1bc>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	1e58      	subs	r0, r3, #1
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6859      	ldr	r1, [r3, #4]
 80042ea:	460b      	mov	r3, r1
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	440b      	add	r3, r1
 80042f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80042f4:	3301      	adds	r3, #1
 80042f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042fe:	e00f      	b.n	8004320 <HAL_I2C_Init+0x1dc>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	1e58      	subs	r0, r3, #1
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6859      	ldr	r1, [r3, #4]
 8004308:	460b      	mov	r3, r1
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	440b      	add	r3, r1
 800430e:	0099      	lsls	r1, r3, #2
 8004310:	440b      	add	r3, r1
 8004312:	fbb0 f3f3 	udiv	r3, r0, r3
 8004316:	3301      	adds	r3, #1
 8004318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800431c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	6809      	ldr	r1, [r1, #0]
 8004324:	4313      	orrs	r3, r2
 8004326:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69da      	ldr	r2, [r3, #28]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800434e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6911      	ldr	r1, [r2, #16]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	68d2      	ldr	r2, [r2, #12]
 800435a:	4311      	orrs	r1, r2
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6812      	ldr	r2, [r2, #0]
 8004360:	430b      	orrs	r3, r1
 8004362:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695a      	ldr	r2, [r3, #20]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	430a      	orrs	r2, r1
 800437e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f042 0201 	orr.w	r2, r2, #1
 800438e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2220      	movs	r2, #32
 800439a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	000186a0 	.word	0x000186a0
 80043bc:	001e847f 	.word	0x001e847f
 80043c0:	003d08ff 	.word	0x003d08ff
 80043c4:	431bde83 	.word	0x431bde83
 80043c8:	10624dd3 	.word	0x10624dd3

080043cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b088      	sub	sp, #32
 80043d0:	af02      	add	r7, sp, #8
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	607a      	str	r2, [r7, #4]
 80043d6:	461a      	mov	r2, r3
 80043d8:	460b      	mov	r3, r1
 80043da:	817b      	strh	r3, [r7, #10]
 80043dc:	4613      	mov	r3, r2
 80043de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043e0:	f7ff fbc0 	bl	8003b64 <HAL_GetTick>
 80043e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b20      	cmp	r3, #32
 80043f0:	f040 80e0 	bne.w	80045b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	2319      	movs	r3, #25
 80043fa:	2201      	movs	r2, #1
 80043fc:	4970      	ldr	r1, [pc, #448]	; (80045c0 <HAL_I2C_Master_Transmit+0x1f4>)
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 fe50 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800440a:	2302      	movs	r3, #2
 800440c:	e0d3      	b.n	80045b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <HAL_I2C_Master_Transmit+0x50>
 8004418:	2302      	movs	r3, #2
 800441a:	e0cc      	b.n	80045b6 <HAL_I2C_Master_Transmit+0x1ea>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b01      	cmp	r3, #1
 8004430:	d007      	beq.n	8004442 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f042 0201 	orr.w	r2, r2, #1
 8004440:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004450:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2221      	movs	r2, #33	; 0x21
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2210      	movs	r2, #16
 800445e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	893a      	ldrh	r2, [r7, #8]
 8004472:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004478:	b29a      	uxth	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	4a50      	ldr	r2, [pc, #320]	; (80045c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004482:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004484:	8979      	ldrh	r1, [r7, #10]
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	6a3a      	ldr	r2, [r7, #32]
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 fc0a 	bl	8004ca4 <I2C_MasterRequestWrite>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e08d      	b.n	80045b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800449a:	2300      	movs	r3, #0
 800449c:	613b      	str	r3, [r7, #16]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	613b      	str	r3, [r7, #16]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	613b      	str	r3, [r7, #16]
 80044ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80044b0:	e066      	b.n	8004580 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	6a39      	ldr	r1, [r7, #32]
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 ff0e 	bl	80052d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00d      	beq.n	80044de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d107      	bne.n	80044da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e06b      	b.n	80045b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	781a      	ldrb	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004506:	3b01      	subs	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	f003 0304 	and.w	r3, r3, #4
 8004518:	2b04      	cmp	r3, #4
 800451a:	d11b      	bne.n	8004554 <HAL_I2C_Master_Transmit+0x188>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004520:	2b00      	cmp	r3, #0
 8004522:	d017      	beq.n	8004554 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004528:	781a      	ldrb	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453e:	b29b      	uxth	r3, r3
 8004540:	3b01      	subs	r3, #1
 8004542:	b29a      	uxth	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800454c:	3b01      	subs	r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	6a39      	ldr	r1, [r7, #32]
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 ff05 	bl	8005368 <I2C_WaitOnBTFFlagUntilTimeout>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00d      	beq.n	8004580 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004568:	2b04      	cmp	r3, #4
 800456a:	d107      	bne.n	800457c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800457a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e01a      	b.n	80045b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004584:	2b00      	cmp	r3, #0
 8004586:	d194      	bne.n	80044b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004596:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2220      	movs	r2, #32
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045b0:	2300      	movs	r3, #0
 80045b2:	e000      	b.n	80045b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80045b4:	2302      	movs	r3, #2
  }
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	00100002 	.word	0x00100002
 80045c4:	ffff0000 	.word	0xffff0000

080045c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b088      	sub	sp, #32
 80045cc:	af02      	add	r7, sp, #8
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	4608      	mov	r0, r1
 80045d2:	4611      	mov	r1, r2
 80045d4:	461a      	mov	r2, r3
 80045d6:	4603      	mov	r3, r0
 80045d8:	817b      	strh	r3, [r7, #10]
 80045da:	460b      	mov	r3, r1
 80045dc:	813b      	strh	r3, [r7, #8]
 80045de:	4613      	mov	r3, r2
 80045e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045e2:	f7ff fabf 	bl	8003b64 <HAL_GetTick>
 80045e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b20      	cmp	r3, #32
 80045f2:	f040 80d9 	bne.w	80047a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	2319      	movs	r3, #25
 80045fc:	2201      	movs	r2, #1
 80045fe:	496d      	ldr	r1, [pc, #436]	; (80047b4 <HAL_I2C_Mem_Write+0x1ec>)
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f000 fd4f 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800460c:	2302      	movs	r3, #2
 800460e:	e0cc      	b.n	80047aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004616:	2b01      	cmp	r3, #1
 8004618:	d101      	bne.n	800461e <HAL_I2C_Mem_Write+0x56>
 800461a:	2302      	movs	r3, #2
 800461c:	e0c5      	b.n	80047aa <HAL_I2C_Mem_Write+0x1e2>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b01      	cmp	r3, #1
 8004632:	d007      	beq.n	8004644 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0201 	orr.w	r2, r2, #1
 8004642:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004652:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2221      	movs	r2, #33	; 0x21
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2240      	movs	r2, #64	; 0x40
 8004660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6a3a      	ldr	r2, [r7, #32]
 800466e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004674:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467a:	b29a      	uxth	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4a4d      	ldr	r2, [pc, #308]	; (80047b8 <HAL_I2C_Mem_Write+0x1f0>)
 8004684:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004686:	88f8      	ldrh	r0, [r7, #6]
 8004688:	893a      	ldrh	r2, [r7, #8]
 800468a:	8979      	ldrh	r1, [r7, #10]
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	9301      	str	r3, [sp, #4]
 8004690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	4603      	mov	r3, r0
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 fb86 	bl	8004da8 <I2C_RequestMemoryWrite>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d052      	beq.n	8004748 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e081      	b.n	80047aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f000 fe14 	bl	80052d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00d      	beq.n	80046d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d107      	bne.n	80046ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e06b      	b.n	80047aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	781a      	ldrb	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	1c5a      	adds	r2, r3, #1
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	3b01      	subs	r3, #1
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b04      	cmp	r3, #4
 800470e:	d11b      	bne.n	8004748 <HAL_I2C_Mem_Write+0x180>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004714:	2b00      	cmp	r3, #0
 8004716:	d017      	beq.n	8004748 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	781a      	ldrb	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004732:	3b01      	subs	r3, #1
 8004734:	b29a      	uxth	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473e:	b29b      	uxth	r3, r3
 8004740:	3b01      	subs	r3, #1
 8004742:	b29a      	uxth	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1aa      	bne.n	80046a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 fe07 	bl	8005368 <I2C_WaitOnBTFFlagUntilTimeout>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00d      	beq.n	800477c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004764:	2b04      	cmp	r3, #4
 8004766:	d107      	bne.n	8004778 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004776:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e016      	b.n	80047aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800478a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2220      	movs	r2, #32
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80047a4:	2300      	movs	r3, #0
 80047a6:	e000      	b.n	80047aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80047a8:	2302      	movs	r3, #2
  }
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3718      	adds	r7, #24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	00100002 	.word	0x00100002
 80047b8:	ffff0000 	.word	0xffff0000

080047bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b08c      	sub	sp, #48	; 0x30
 80047c0:	af02      	add	r7, sp, #8
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	4608      	mov	r0, r1
 80047c6:	4611      	mov	r1, r2
 80047c8:	461a      	mov	r2, r3
 80047ca:	4603      	mov	r3, r0
 80047cc:	817b      	strh	r3, [r7, #10]
 80047ce:	460b      	mov	r3, r1
 80047d0:	813b      	strh	r3, [r7, #8]
 80047d2:	4613      	mov	r3, r2
 80047d4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80047d6:	2300      	movs	r3, #0
 80047d8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047da:	f7ff f9c3 	bl	8003b64 <HAL_GetTick>
 80047de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b20      	cmp	r3, #32
 80047ea:	f040 8250 	bne.w	8004c8e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	2319      	movs	r3, #25
 80047f4:	2201      	movs	r2, #1
 80047f6:	4982      	ldr	r1, [pc, #520]	; (8004a00 <HAL_I2C_Mem_Read+0x244>)
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 fc53 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004804:	2302      	movs	r3, #2
 8004806:	e243      	b.n	8004c90 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800480e:	2b01      	cmp	r3, #1
 8004810:	d101      	bne.n	8004816 <HAL_I2C_Mem_Read+0x5a>
 8004812:	2302      	movs	r3, #2
 8004814:	e23c      	b.n	8004c90 <HAL_I2C_Mem_Read+0x4d4>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b01      	cmp	r3, #1
 800482a:	d007      	beq.n	800483c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0201 	orr.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800484a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2222      	movs	r2, #34	; 0x22
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2240      	movs	r2, #64	; 0x40
 8004858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004866:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800486c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004872:	b29a      	uxth	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4a62      	ldr	r2, [pc, #392]	; (8004a04 <HAL_I2C_Mem_Read+0x248>)
 800487c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800487e:	88f8      	ldrh	r0, [r7, #6]
 8004880:	893a      	ldrh	r2, [r7, #8]
 8004882:	8979      	ldrh	r1, [r7, #10]
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	9301      	str	r3, [sp, #4]
 8004888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	4603      	mov	r3, r0
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 fb20 	bl	8004ed4 <I2C_RequestMemoryRead>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e1f8      	b.n	8004c90 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d113      	bne.n	80048ce <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048a6:	2300      	movs	r3, #0
 80048a8:	61fb      	str	r3, [r7, #28]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	61fb      	str	r3, [r7, #28]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	61fb      	str	r3, [r7, #28]
 80048ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	e1cc      	b.n	8004c68 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d11e      	bne.n	8004914 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80048e6:	b672      	cpsid	i
}
 80048e8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ea:	2300      	movs	r3, #0
 80048ec:	61bb      	str	r3, [r7, #24]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	61bb      	str	r3, [r7, #24]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	61bb      	str	r3, [r7, #24]
 80048fe:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800490e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004910:	b662      	cpsie	i
}
 8004912:	e035      	b.n	8004980 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004918:	2b02      	cmp	r3, #2
 800491a:	d11e      	bne.n	800495a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800492a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800492c:	b672      	cpsid	i
}
 800492e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004930:	2300      	movs	r3, #0
 8004932:	617b      	str	r3, [r7, #20]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	617b      	str	r3, [r7, #20]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	617b      	str	r3, [r7, #20]
 8004944:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004954:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004956:	b662      	cpsie	i
}
 8004958:	e012      	b.n	8004980 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004968:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800496a:	2300      	movs	r3, #0
 800496c:	613b      	str	r3, [r7, #16]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	613b      	str	r3, [r7, #16]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	613b      	str	r3, [r7, #16]
 800497e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004980:	e172      	b.n	8004c68 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004986:	2b03      	cmp	r3, #3
 8004988:	f200 811f 	bhi.w	8004bca <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004990:	2b01      	cmp	r3, #1
 8004992:	d123      	bne.n	80049dc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004996:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 fd2d 	bl	80053f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e173      	b.n	8004c90 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	691a      	ldr	r2, [r3, #16]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	3b01      	subs	r3, #1
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049da:	e145      	b.n	8004c68 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d152      	bne.n	8004a8a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ea:	2200      	movs	r2, #0
 80049ec:	4906      	ldr	r1, [pc, #24]	; (8004a08 <HAL_I2C_Mem_Read+0x24c>)
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 fb58 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d008      	beq.n	8004a0c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e148      	b.n	8004c90 <HAL_I2C_Mem_Read+0x4d4>
 80049fe:	bf00      	nop
 8004a00:	00100002 	.word	0x00100002
 8004a04:	ffff0000 	.word	0xffff0000
 8004a08:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004a0c:	b672      	cpsid	i
}
 8004a0e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	691a      	ldr	r2, [r3, #16]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	1c5a      	adds	r2, r3, #1
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004a52:	b662      	cpsie	i
}
 8004a54:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	691a      	ldr	r2, [r3, #16]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a60:	b2d2      	uxtb	r2, r2
 8004a62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a72:	3b01      	subs	r3, #1
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	3b01      	subs	r3, #1
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a88:	e0ee      	b.n	8004c68 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a90:	2200      	movs	r2, #0
 8004a92:	4981      	ldr	r1, [pc, #516]	; (8004c98 <HAL_I2C_Mem_Read+0x4dc>)
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 fb05 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d001      	beq.n	8004aa4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e0f5      	b.n	8004c90 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ab2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ab4:	b672      	cpsid	i
}
 8004ab6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	691a      	ldr	r2, [r3, #16]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	1c5a      	adds	r2, r3, #1
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004aea:	4b6c      	ldr	r3, [pc, #432]	; (8004c9c <HAL_I2C_Mem_Read+0x4e0>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	08db      	lsrs	r3, r3, #3
 8004af0:	4a6b      	ldr	r2, [pc, #428]	; (8004ca0 <HAL_I2C_Mem_Read+0x4e4>)
 8004af2:	fba2 2303 	umull	r2, r3, r2, r3
 8004af6:	0a1a      	lsrs	r2, r3, #8
 8004af8:	4613      	mov	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	00da      	lsls	r2, r3, #3
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d118      	bne.n	8004b42 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	f043 0220 	orr.w	r2, r3, #32
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004b32:	b662      	cpsie	i
}
 8004b34:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e0a6      	b.n	8004c90 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	d1d9      	bne.n	8004b04 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	691a      	ldr	r2, [r3, #16]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	b2d2      	uxtb	r2, r2
 8004b6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	1c5a      	adds	r2, r3, #1
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004b92:	b662      	cpsie	i
}
 8004b94:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	691a      	ldr	r2, [r3, #16]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	b2d2      	uxtb	r2, r2
 8004ba2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	1c5a      	adds	r2, r3, #1
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bc8:	e04e      	b.n	8004c68 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bcc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f000 fc12 	bl	80053f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e058      	b.n	8004c90 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	691a      	ldr	r2, [r3, #16]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be8:	b2d2      	uxtb	r2, r2
 8004bea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	f003 0304 	and.w	r3, r3, #4
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d124      	bne.n	8004c68 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c22:	2b03      	cmp	r3, #3
 8004c24:	d107      	bne.n	8004c36 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c34:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	691a      	ldr	r2, [r3, #16]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	b2d2      	uxtb	r2, r2
 8004c42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	3b01      	subs	r3, #1
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f47f ae88 	bne.w	8004982 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2220      	movs	r2, #32
 8004c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	e000      	b.n	8004c90 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8004c8e:	2302      	movs	r3, #2
  }
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3728      	adds	r7, #40	; 0x28
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	00010004 	.word	0x00010004
 8004c9c:	20000008 	.word	0x20000008
 8004ca0:	14f8b589 	.word	0x14f8b589

08004ca4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b088      	sub	sp, #32
 8004ca8:	af02      	add	r7, sp, #8
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	607a      	str	r2, [r7, #4]
 8004cae:	603b      	str	r3, [r7, #0]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	2b08      	cmp	r3, #8
 8004cbe:	d006      	beq.n	8004cce <I2C_MasterRequestWrite+0x2a>
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d003      	beq.n	8004cce <I2C_MasterRequestWrite+0x2a>
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ccc:	d108      	bne.n	8004ce0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	e00b      	b.n	8004cf8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce4:	2b12      	cmp	r3, #18
 8004ce6:	d107      	bne.n	8004cf8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cf6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f000 f9cd 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00d      	beq.n	8004d2c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d1e:	d103      	bne.n	8004d28 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e035      	b.n	8004d98 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d34:	d108      	bne.n	8004d48 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d36:	897b      	ldrh	r3, [r7, #10]
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d44:	611a      	str	r2, [r3, #16]
 8004d46:	e01b      	b.n	8004d80 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004d48:	897b      	ldrh	r3, [r7, #10]
 8004d4a:	11db      	asrs	r3, r3, #7
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	f003 0306 	and.w	r3, r3, #6
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	f063 030f 	orn	r3, r3, #15
 8004d58:	b2da      	uxtb	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	490e      	ldr	r1, [pc, #56]	; (8004da0 <I2C_MasterRequestWrite+0xfc>)
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 fa16 	bl	8005198 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e010      	b.n	8004d98 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004d76:	897b      	ldrh	r3, [r7, #10]
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	4907      	ldr	r1, [pc, #28]	; (8004da4 <I2C_MasterRequestWrite+0x100>)
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 fa06 	bl	8005198 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e000      	b.n	8004d98 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3718      	adds	r7, #24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	00010008 	.word	0x00010008
 8004da4:	00010002 	.word	0x00010002

08004da8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b088      	sub	sp, #32
 8004dac:	af02      	add	r7, sp, #8
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	4608      	mov	r0, r1
 8004db2:	4611      	mov	r1, r2
 8004db4:	461a      	mov	r2, r3
 8004db6:	4603      	mov	r3, r0
 8004db8:	817b      	strh	r3, [r7, #10]
 8004dba:	460b      	mov	r3, r1
 8004dbc:	813b      	strh	r3, [r7, #8]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 f960 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00d      	beq.n	8004e06 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004df8:	d103      	bne.n	8004e02 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e05f      	b.n	8004ec6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e06:	897b      	ldrh	r3, [r7, #10]
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	6a3a      	ldr	r2, [r7, #32]
 8004e1a:	492d      	ldr	r1, [pc, #180]	; (8004ed0 <I2C_RequestMemoryWrite+0x128>)
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f000 f9bb 	bl	8005198 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d001      	beq.n	8004e2c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e04c      	b.n	8004ec6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	617b      	str	r3, [r7, #20]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	617b      	str	r3, [r7, #20]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	617b      	str	r3, [r7, #20]
 8004e40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e44:	6a39      	ldr	r1, [r7, #32]
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 fa46 	bl	80052d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00d      	beq.n	8004e6e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	2b04      	cmp	r3, #4
 8004e58:	d107      	bne.n	8004e6a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e02b      	b.n	8004ec6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e6e:	88fb      	ldrh	r3, [r7, #6]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d105      	bne.n	8004e80 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e74:	893b      	ldrh	r3, [r7, #8]
 8004e76:	b2da      	uxtb	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	611a      	str	r2, [r3, #16]
 8004e7e:	e021      	b.n	8004ec4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e80:	893b      	ldrh	r3, [r7, #8]
 8004e82:	0a1b      	lsrs	r3, r3, #8
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e90:	6a39      	ldr	r1, [r7, #32]
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 fa20 	bl	80052d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00d      	beq.n	8004eba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d107      	bne.n	8004eb6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eb4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e005      	b.n	8004ec6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004eba:	893b      	ldrh	r3, [r7, #8]
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	00010002 	.word	0x00010002

08004ed4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b088      	sub	sp, #32
 8004ed8:	af02      	add	r7, sp, #8
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	4608      	mov	r0, r1
 8004ede:	4611      	mov	r1, r2
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	817b      	strh	r3, [r7, #10]
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	813b      	strh	r3, [r7, #8]
 8004eea:	4613      	mov	r3, r2
 8004eec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004efc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	6a3b      	ldr	r3, [r7, #32]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 f8c2 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00d      	beq.n	8004f42 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f34:	d103      	bne.n	8004f3e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e0aa      	b.n	8005098 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f42:	897b      	ldrh	r3, [r7, #10]
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	461a      	mov	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	6a3a      	ldr	r2, [r7, #32]
 8004f56:	4952      	ldr	r1, [pc, #328]	; (80050a0 <I2C_RequestMemoryRead+0x1cc>)
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 f91d 	bl	8005198 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e097      	b.n	8005098 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f68:	2300      	movs	r3, #0
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f80:	6a39      	ldr	r1, [r7, #32]
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f000 f9a8 	bl	80052d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00d      	beq.n	8004faa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d107      	bne.n	8004fa6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fa4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e076      	b.n	8005098 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004faa:	88fb      	ldrh	r3, [r7, #6]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d105      	bne.n	8004fbc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fb0:	893b      	ldrh	r3, [r7, #8]
 8004fb2:	b2da      	uxtb	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	611a      	str	r2, [r3, #16]
 8004fba:	e021      	b.n	8005000 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004fbc:	893b      	ldrh	r3, [r7, #8]
 8004fbe:	0a1b      	lsrs	r3, r3, #8
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	b2da      	uxtb	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fcc:	6a39      	ldr	r1, [r7, #32]
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 f982 	bl	80052d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00d      	beq.n	8004ff6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d107      	bne.n	8004ff2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ff0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e050      	b.n	8005098 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ff6:	893b      	ldrh	r3, [r7, #8]
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005002:	6a39      	ldr	r1, [r7, #32]
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 f967 	bl	80052d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00d      	beq.n	800502c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005014:	2b04      	cmp	r3, #4
 8005016:	d107      	bne.n	8005028 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005026:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e035      	b.n	8005098 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800503a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	6a3b      	ldr	r3, [r7, #32]
 8005042:	2200      	movs	r2, #0
 8005044:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f000 f82b 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00d      	beq.n	8005070 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005062:	d103      	bne.n	800506c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f44f 7200 	mov.w	r2, #512	; 0x200
 800506a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e013      	b.n	8005098 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005070:	897b      	ldrh	r3, [r7, #10]
 8005072:	b2db      	uxtb	r3, r3
 8005074:	f043 0301 	orr.w	r3, r3, #1
 8005078:	b2da      	uxtb	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	6a3a      	ldr	r2, [r7, #32]
 8005084:	4906      	ldr	r1, [pc, #24]	; (80050a0 <I2C_RequestMemoryRead+0x1cc>)
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 f886 	bl	8005198 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e000      	b.n	8005098 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	00010002 	.word	0x00010002

080050a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	603b      	str	r3, [r7, #0]
 80050b0:	4613      	mov	r3, r2
 80050b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050b4:	e048      	b.n	8005148 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050bc:	d044      	beq.n	8005148 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050be:	f7fe fd51 	bl	8003b64 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d302      	bcc.n	80050d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d139      	bne.n	8005148 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	0c1b      	lsrs	r3, r3, #16
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d10d      	bne.n	80050fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	43da      	mvns	r2, r3
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	4013      	ands	r3, r2
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	bf0c      	ite	eq
 80050f0:	2301      	moveq	r3, #1
 80050f2:	2300      	movne	r3, #0
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	461a      	mov	r2, r3
 80050f8:	e00c      	b.n	8005114 <I2C_WaitOnFlagUntilTimeout+0x70>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	43da      	mvns	r2, r3
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	4013      	ands	r3, r2
 8005106:	b29b      	uxth	r3, r3
 8005108:	2b00      	cmp	r3, #0
 800510a:	bf0c      	ite	eq
 800510c:	2301      	moveq	r3, #1
 800510e:	2300      	movne	r3, #0
 8005110:	b2db      	uxtb	r3, r3
 8005112:	461a      	mov	r2, r3
 8005114:	79fb      	ldrb	r3, [r7, #7]
 8005116:	429a      	cmp	r2, r3
 8005118:	d116      	bne.n	8005148 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2220      	movs	r2, #32
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005134:	f043 0220 	orr.w	r2, r3, #32
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e023      	b.n	8005190 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	0c1b      	lsrs	r3, r3, #16
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b01      	cmp	r3, #1
 8005150:	d10d      	bne.n	800516e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	43da      	mvns	r2, r3
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	4013      	ands	r3, r2
 800515e:	b29b      	uxth	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	bf0c      	ite	eq
 8005164:	2301      	moveq	r3, #1
 8005166:	2300      	movne	r3, #0
 8005168:	b2db      	uxtb	r3, r3
 800516a:	461a      	mov	r2, r3
 800516c:	e00c      	b.n	8005188 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	43da      	mvns	r2, r3
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	4013      	ands	r3, r2
 800517a:	b29b      	uxth	r3, r3
 800517c:	2b00      	cmp	r3, #0
 800517e:	bf0c      	ite	eq
 8005180:	2301      	moveq	r3, #1
 8005182:	2300      	movne	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	461a      	mov	r2, r3
 8005188:	79fb      	ldrb	r3, [r7, #7]
 800518a:	429a      	cmp	r2, r3
 800518c:	d093      	beq.n	80050b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
 80051a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051a6:	e071      	b.n	800528c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b6:	d123      	bne.n	8005200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2220      	movs	r2, #32
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ec:	f043 0204 	orr.w	r2, r3, #4
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e067      	b.n	80052d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005206:	d041      	beq.n	800528c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005208:	f7fe fcac 	bl	8003b64 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	429a      	cmp	r2, r3
 8005216:	d302      	bcc.n	800521e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d136      	bne.n	800528c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	0c1b      	lsrs	r3, r3, #16
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b01      	cmp	r3, #1
 8005226:	d10c      	bne.n	8005242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	43da      	mvns	r2, r3
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4013      	ands	r3, r2
 8005234:	b29b      	uxth	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	bf14      	ite	ne
 800523a:	2301      	movne	r3, #1
 800523c:	2300      	moveq	r3, #0
 800523e:	b2db      	uxtb	r3, r3
 8005240:	e00b      	b.n	800525a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	43da      	mvns	r2, r3
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	4013      	ands	r3, r2
 800524e:	b29b      	uxth	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	bf14      	ite	ne
 8005254:	2301      	movne	r3, #1
 8005256:	2300      	moveq	r3, #0
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d016      	beq.n	800528c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2220      	movs	r2, #32
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005278:	f043 0220 	orr.w	r2, r3, #32
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e021      	b.n	80052d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	0c1b      	lsrs	r3, r3, #16
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b01      	cmp	r3, #1
 8005294:	d10c      	bne.n	80052b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	43da      	mvns	r2, r3
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	4013      	ands	r3, r2
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	bf14      	ite	ne
 80052a8:	2301      	movne	r3, #1
 80052aa:	2300      	moveq	r3, #0
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	e00b      	b.n	80052c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	43da      	mvns	r2, r3
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	4013      	ands	r3, r2
 80052bc:	b29b      	uxth	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	bf14      	ite	ne
 80052c2:	2301      	movne	r3, #1
 80052c4:	2300      	moveq	r3, #0
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f47f af6d 	bne.w	80051a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052e4:	e034      	b.n	8005350 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 f8e3 	bl	80054b2 <I2C_IsAcknowledgeFailed>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e034      	b.n	8005360 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fc:	d028      	beq.n	8005350 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052fe:	f7fe fc31 	bl	8003b64 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	429a      	cmp	r2, r3
 800530c:	d302      	bcc.n	8005314 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d11d      	bne.n	8005350 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531e:	2b80      	cmp	r3, #128	; 0x80
 8005320:	d016      	beq.n	8005350 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2220      	movs	r2, #32
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533c:	f043 0220 	orr.w	r2, r3, #32
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e007      	b.n	8005360 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800535a:	2b80      	cmp	r3, #128	; 0x80
 800535c:	d1c3      	bne.n	80052e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005374:	e034      	b.n	80053e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 f89b 	bl	80054b2 <I2C_IsAcknowledgeFailed>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e034      	b.n	80053f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538c:	d028      	beq.n	80053e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800538e:	f7fe fbe9 	bl	8003b64 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	429a      	cmp	r2, r3
 800539c:	d302      	bcc.n	80053a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d11d      	bne.n	80053e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	f003 0304 	and.w	r3, r3, #4
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	d016      	beq.n	80053e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2220      	movs	r2, #32
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053cc:	f043 0220 	orr.w	r2, r3, #32
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e007      	b.n	80053f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	f003 0304 	and.w	r3, r3, #4
 80053ea:	2b04      	cmp	r3, #4
 80053ec:	d1c3      	bne.n	8005376 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005404:	e049      	b.n	800549a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	f003 0310 	and.w	r3, r3, #16
 8005410:	2b10      	cmp	r3, #16
 8005412:	d119      	bne.n	8005448 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f06f 0210 	mvn.w	r2, #16
 800541c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2220      	movs	r2, #32
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e030      	b.n	80054aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005448:	f7fe fb8c 	bl	8003b64 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	429a      	cmp	r2, r3
 8005456:	d302      	bcc.n	800545e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d11d      	bne.n	800549a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005468:	2b40      	cmp	r3, #64	; 0x40
 800546a:	d016      	beq.n	800549a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2220      	movs	r2, #32
 8005476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005486:	f043 0220 	orr.w	r2, r3, #32
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e007      	b.n	80054aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a4:	2b40      	cmp	r3, #64	; 0x40
 80054a6:	d1ae      	bne.n	8005406 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054c8:	d11b      	bne.n	8005502 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054d2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2220      	movs	r2, #32
 80054de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	f043 0204 	orr.w	r2, r3, #4
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e000      	b.n	8005504 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	bc80      	pop	{r7}
 800550c:	4770      	bx	lr

0800550e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b084      	sub	sp, #16
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d101      	bne.n	8005520 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e0e8      	b.n	80056f2 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	d106      	bne.n	800553a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f006 feef 	bl	800c318 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2203      	movs	r2, #3
 800553e:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4618      	mov	r0, r3
 800554e:	f003 f8ca 	bl	80086e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6818      	ldr	r0, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	3304      	adds	r3, #4
 800555a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800555c:	f003 f8a0 	bl	80086a0 <USB_CoreInit>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d005      	beq.n	8005572 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2202      	movs	r2, #2
 800556a:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e0bf      	b.n	80056f2 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2100      	movs	r1, #0
 8005578:	4618      	mov	r0, r3
 800557a:	f003 f8ce 	bl	800871a <USB_SetCurrentMode>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d005      	beq.n	8005590 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e0b0      	b.n	80056f2 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005590:	2300      	movs	r3, #0
 8005592:	73fb      	strb	r3, [r7, #15]
 8005594:	e03e      	b.n	8005614 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005596:	7bfa      	ldrb	r2, [r7, #15]
 8005598:	6879      	ldr	r1, [r7, #4]
 800559a:	4613      	mov	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	00db      	lsls	r3, r3, #3
 80055a2:	440b      	add	r3, r1
 80055a4:	3311      	adds	r3, #17
 80055a6:	2201      	movs	r2, #1
 80055a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80055aa:	7bfa      	ldrb	r2, [r7, #15]
 80055ac:	6879      	ldr	r1, [r7, #4]
 80055ae:	4613      	mov	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	00db      	lsls	r3, r3, #3
 80055b6:	440b      	add	r3, r1
 80055b8:	3310      	adds	r3, #16
 80055ba:	7bfa      	ldrb	r2, [r7, #15]
 80055bc:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80055be:	7bfa      	ldrb	r2, [r7, #15]
 80055c0:	6879      	ldr	r1, [r7, #4]
 80055c2:	4613      	mov	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	00db      	lsls	r3, r3, #3
 80055ca:	440b      	add	r3, r1
 80055cc:	3313      	adds	r3, #19
 80055ce:	2200      	movs	r2, #0
 80055d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80055d2:	7bfa      	ldrb	r2, [r7, #15]
 80055d4:	6879      	ldr	r1, [r7, #4]
 80055d6:	4613      	mov	r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4413      	add	r3, r2
 80055dc:	00db      	lsls	r3, r3, #3
 80055de:	440b      	add	r3, r1
 80055e0:	3320      	adds	r3, #32
 80055e2:	2200      	movs	r2, #0
 80055e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80055e6:	7bfa      	ldrb	r2, [r7, #15]
 80055e8:	6879      	ldr	r1, [r7, #4]
 80055ea:	4613      	mov	r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4413      	add	r3, r2
 80055f0:	00db      	lsls	r3, r3, #3
 80055f2:	440b      	add	r3, r1
 80055f4:	3324      	adds	r3, #36	; 0x24
 80055f6:	2200      	movs	r2, #0
 80055f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80055fa:	7bfb      	ldrb	r3, [r7, #15]
 80055fc:	6879      	ldr	r1, [r7, #4]
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	4613      	mov	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4413      	add	r3, r2
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	440b      	add	r3, r1
 800560a:	2200      	movs	r2, #0
 800560c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800560e:	7bfb      	ldrb	r3, [r7, #15]
 8005610:	3301      	adds	r3, #1
 8005612:	73fb      	strb	r3, [r7, #15]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	791b      	ldrb	r3, [r3, #4]
 8005618:	7bfa      	ldrb	r2, [r7, #15]
 800561a:	429a      	cmp	r2, r3
 800561c:	d3bb      	bcc.n	8005596 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800561e:	2300      	movs	r3, #0
 8005620:	73fb      	strb	r3, [r7, #15]
 8005622:	e044      	b.n	80056ae <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005624:	7bfa      	ldrb	r2, [r7, #15]
 8005626:	6879      	ldr	r1, [r7, #4]
 8005628:	4613      	mov	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	00db      	lsls	r3, r3, #3
 8005630:	440b      	add	r3, r1
 8005632:	f203 1351 	addw	r3, r3, #337	; 0x151
 8005636:	2200      	movs	r2, #0
 8005638:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800563a:	7bfa      	ldrb	r2, [r7, #15]
 800563c:	6879      	ldr	r1, [r7, #4]
 800563e:	4613      	mov	r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4413      	add	r3, r2
 8005644:	00db      	lsls	r3, r3, #3
 8005646:	440b      	add	r3, r1
 8005648:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800564c:	7bfa      	ldrb	r2, [r7, #15]
 800564e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005650:	7bfa      	ldrb	r2, [r7, #15]
 8005652:	6879      	ldr	r1, [r7, #4]
 8005654:	4613      	mov	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4413      	add	r3, r2
 800565a:	00db      	lsls	r3, r3, #3
 800565c:	440b      	add	r3, r1
 800565e:	f203 1353 	addw	r3, r3, #339	; 0x153
 8005662:	2200      	movs	r2, #0
 8005664:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005666:	7bfa      	ldrb	r2, [r7, #15]
 8005668:	6879      	ldr	r1, [r7, #4]
 800566a:	4613      	mov	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	00db      	lsls	r3, r3, #3
 8005672:	440b      	add	r3, r1
 8005674:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8005678:	2200      	movs	r2, #0
 800567a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800567c:	7bfa      	ldrb	r2, [r7, #15]
 800567e:	6879      	ldr	r1, [r7, #4]
 8005680:	4613      	mov	r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4413      	add	r3, r2
 8005686:	00db      	lsls	r3, r3, #3
 8005688:	440b      	add	r3, r1
 800568a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800568e:	2200      	movs	r2, #0
 8005690:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005692:	7bfa      	ldrb	r2, [r7, #15]
 8005694:	6879      	ldr	r1, [r7, #4]
 8005696:	4613      	mov	r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	4413      	add	r3, r2
 800569c:	00db      	lsls	r3, r3, #3
 800569e:	440b      	add	r3, r1
 80056a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80056a4:	2200      	movs	r2, #0
 80056a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056a8:	7bfb      	ldrb	r3, [r7, #15]
 80056aa:	3301      	adds	r3, #1
 80056ac:	73fb      	strb	r3, [r7, #15]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	791b      	ldrb	r3, [r3, #4]
 80056b2:	7bfa      	ldrb	r2, [r7, #15]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d3b5      	bcc.n	8005624 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6818      	ldr	r0, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3304      	adds	r3, #4
 80056c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056c2:	f003 f836 	bl	8008732 <USB_DevInit>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d005      	beq.n	80056d8 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2202      	movs	r2, #2
 80056d0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e00c      	b.n	80056f2 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f005 f850 	bl	800a790 <USB_DevDisconnect>

  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b082      	sub	sp, #8
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_PCD_Start+0x16>
 800570c:	2302      	movs	r3, #2
 800570e:	e016      	b.n	800573e <HAL_PCD_Start+0x44>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4618      	mov	r0, r3
 800571e:	f002 ffcc 	bl	80086ba <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8005722:	2101      	movs	r1, #1
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f007 f86a 	bl	800c7fe <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4618      	mov	r0, r3
 8005730:	f005 f824 	bl	800a77c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3708      	adds	r7, #8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b088      	sub	sp, #32
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4618      	mov	r0, r3
 8005754:	f005 f826 	bl	800a7a4 <USB_ReadInterrupts>
 8005758:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d003      	beq.n	800576c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fb1c 	bl	8005da2 <PCD_EP_ISR_Handler>

    return;
 800576a:	e11b      	b.n	80059a4 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005772:	2b00      	cmp	r3, #0
 8005774:	d013      	beq.n	800579e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800577e:	b29a      	uxth	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005788:	b292      	uxth	r2, r2
 800578a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f006 fe3d 	bl	800c40e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005794:	2100      	movs	r1, #0
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f907 	bl	80059aa <HAL_PCD_SetAddress>

    return;
 800579c:	e102      	b.n	80059a4 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00c      	beq.n	80057c2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80057ba:	b292      	uxth	r2, r2
 80057bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80057c0:	e0f0      	b.n	80059a4 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00c      	beq.n	80057e6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057de:	b292      	uxth	r2, r2
 80057e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80057e4:	e0de      	b.n	80059a4 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d027      	beq.n	8005840 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 0204 	bic.w	r2, r2, #4
 8005802:	b292      	uxth	r2, r2
 8005804:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005810:	b29a      	uxth	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f022 0208 	bic.w	r2, r2, #8
 800581a:	b292      	uxth	r2, r2
 800581c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f006 fe2d 	bl	800c480 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800582e:	b29a      	uxth	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005838:	b292      	uxth	r2, r2
 800583a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800583e:	e0b1      	b.n	80059a4 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005846:	2b00      	cmp	r3, #0
 8005848:	f000 8085 	beq.w	8005956 <HAL_PCD_IRQHandler+0x210>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800584c:	2300      	movs	r3, #0
 800584e:	77fb      	strb	r3, [r7, #31]
 8005850:	e011      	b.n	8005876 <HAL_PCD_IRQHandler+0x130>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	461a      	mov	r2, r3
 8005858:	7ffb      	ldrb	r3, [r7, #31]
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	441a      	add	r2, r3
 800585e:	7ffb      	ldrb	r3, [r7, #31]
 8005860:	8812      	ldrh	r2, [r2, #0]
 8005862:	b292      	uxth	r2, r2
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	f107 0120 	add.w	r1, r7, #32
 800586a:	440b      	add	r3, r1
 800586c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8005870:	7ffb      	ldrb	r3, [r7, #31]
 8005872:	3301      	adds	r3, #1
 8005874:	77fb      	strb	r3, [r7, #31]
 8005876:	7ffb      	ldrb	r3, [r7, #31]
 8005878:	2b07      	cmp	r3, #7
 800587a:	d9ea      	bls.n	8005852 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005884:	b29a      	uxth	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f042 0201 	orr.w	r2, r2, #1
 800588e:	b292      	uxth	r2, r2
 8005890:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800589c:	b29a      	uxth	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 0201 	bic.w	r2, r2, #1
 80058a6:	b292      	uxth	r2, r2
 80058a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80058ac:	bf00      	nop
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0f6      	beq.n	80058ae <HAL_PCD_IRQHandler+0x168>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058d2:	b292      	uxth	r2, r2
 80058d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80058d8:	2300      	movs	r3, #0
 80058da:	77fb      	strb	r3, [r7, #31]
 80058dc:	e010      	b.n	8005900 <HAL_PCD_IRQHandler+0x1ba>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80058de:	7ffb      	ldrb	r3, [r7, #31]
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6812      	ldr	r2, [r2, #0]
 80058e4:	4611      	mov	r1, r2
 80058e6:	7ffa      	ldrb	r2, [r7, #31]
 80058e8:	0092      	lsls	r2, r2, #2
 80058ea:	440a      	add	r2, r1
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	f107 0120 	add.w	r1, r7, #32
 80058f2:	440b      	add	r3, r1
 80058f4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80058f8:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80058fa:	7ffb      	ldrb	r3, [r7, #31]
 80058fc:	3301      	adds	r3, #1
 80058fe:	77fb      	strb	r3, [r7, #31]
 8005900:	7ffb      	ldrb	r3, [r7, #31]
 8005902:	2b07      	cmp	r3, #7
 8005904:	d9eb      	bls.n	80058de <HAL_PCD_IRQHandler+0x198>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800590e:	b29a      	uxth	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f042 0208 	orr.w	r2, r2, #8
 8005918:	b292      	uxth	r2, r2
 800591a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005926:	b29a      	uxth	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005930:	b292      	uxth	r2, r2
 8005932:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800593e:	b29a      	uxth	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f042 0204 	orr.w	r2, r2, #4
 8005948:	b292      	uxth	r2, r2
 800594a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f006 fd7c 	bl	800c44c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005954:	e026      	b.n	80059a4 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00f      	beq.n	8005980 <HAL_PCD_IRQHandler+0x23a>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005968:	b29a      	uxth	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005972:	b292      	uxth	r2, r2
 8005974:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f006 fd3a 	bl	800c3f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800597e:	e011      	b.n	80059a4 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00c      	beq.n	80059a4 <HAL_PCD_IRQHandler+0x25e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005992:	b29a      	uxth	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800599c:	b292      	uxth	r2, r2
 800599e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80059a2:	bf00      	nop
  }
}
 80059a4:	3720      	adds	r7, #32
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b082      	sub	sp, #8
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
 80059b2:	460b      	mov	r3, r1
 80059b4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d101      	bne.n	80059c4 <HAL_PCD_SetAddress+0x1a>
 80059c0:	2302      	movs	r3, #2
 80059c2:	e012      	b.n	80059ea <HAL_PCD_SetAddress+0x40>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	78fa      	ldrb	r2, [r7, #3]
 80059d0:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	78fa      	ldrb	r2, [r7, #3]
 80059d8:	4611      	mov	r1, r2
 80059da:	4618      	mov	r0, r3
 80059dc:	f004 febb 	bl	800a756 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3708      	adds	r7, #8
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b084      	sub	sp, #16
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
 80059fa:	4608      	mov	r0, r1
 80059fc:	4611      	mov	r1, r2
 80059fe:	461a      	mov	r2, r3
 8005a00:	4603      	mov	r3, r0
 8005a02:	70fb      	strb	r3, [r7, #3]
 8005a04:	460b      	mov	r3, r1
 8005a06:	803b      	strh	r3, [r7, #0]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	da0e      	bge.n	8005a36 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a18:	78fb      	ldrb	r3, [r7, #3]
 8005a1a:	f003 0207 	and.w	r2, r3, #7
 8005a1e:	4613      	mov	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4413      	add	r3, r2
 8005a24:	00db      	lsls	r3, r3, #3
 8005a26:	3310      	adds	r3, #16
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2201      	movs	r2, #1
 8005a32:	705a      	strb	r2, [r3, #1]
 8005a34:	e00e      	b.n	8005a54 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a36:	78fb      	ldrb	r3, [r7, #3]
 8005a38:	f003 0207 	and.w	r2, r3, #7
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	00db      	lsls	r3, r3, #3
 8005a44:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005a54:	78fb      	ldrb	r3, [r7, #3]
 8005a56:	f003 0307 	and.w	r3, r3, #7
 8005a5a:	b2da      	uxtb	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005a60:	883a      	ldrh	r2, [r7, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	78ba      	ldrb	r2, [r7, #2]
 8005a6a:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005a6c:	78bb      	ldrb	r3, [r7, #2]
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d102      	bne.n	8005a78 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d101      	bne.n	8005a86 <HAL_PCD_EP_Open+0x94>
 8005a82:	2302      	movs	r3, #2
 8005a84:	e00e      	b.n	8005aa4 <HAL_PCD_EP_Open+0xb2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68f9      	ldr	r1, [r7, #12]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f002 fe69 	bl	800876c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8005aa2:	7afb      	ldrb	r3, [r7, #11]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ab8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	da0e      	bge.n	8005ade <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ac0:	78fb      	ldrb	r3, [r7, #3]
 8005ac2:	f003 0207 	and.w	r2, r3, #7
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	4413      	add	r3, r2
 8005acc:	00db      	lsls	r3, r3, #3
 8005ace:	3310      	adds	r3, #16
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	705a      	strb	r2, [r3, #1]
 8005adc:	e00e      	b.n	8005afc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ade:	78fb      	ldrb	r3, [r7, #3]
 8005ae0:	f003 0207 	and.w	r2, r3, #7
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	4413      	add	r3, r2
 8005af4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005afc:	78fb      	ldrb	r3, [r7, #3]
 8005afe:	f003 0307 	and.w	r3, r3, #7
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d101      	bne.n	8005b16 <HAL_PCD_EP_Close+0x6a>
 8005b12:	2302      	movs	r3, #2
 8005b14:	e00e      	b.n	8005b34 <HAL_PCD_EP_Close+0x88>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68f9      	ldr	r1, [r7, #12]
 8005b24:	4618      	mov	r0, r3
 8005b26:	f003 f9e1 	bl	8008eec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	607a      	str	r2, [r7, #4]
 8005b46:	603b      	str	r3, [r7, #0]
 8005b48:	460b      	mov	r3, r1
 8005b4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b4c:	7afb      	ldrb	r3, [r7, #11]
 8005b4e:	f003 0207 	and.w	r2, r3, #7
 8005b52:	4613      	mov	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	00db      	lsls	r3, r3, #3
 8005b5a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	4413      	add	r3, r2
 8005b62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	2200      	movs	r2, #0
 8005b74:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b7c:	7afb      	ldrb	r3, [r7, #11]
 8005b7e:	f003 0307 	and.w	r3, r3, #7
 8005b82:	b2da      	uxtb	r2, r3
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6979      	ldr	r1, [r7, #20]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f003 fb98 	bl	80092c4 <USB_EPStartXfer>

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3718      	adds	r7, #24
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b083      	sub	sp, #12
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005baa:	78fb      	ldrb	r3, [r7, #3]
 8005bac:	f003 0207 	and.w	r2, r3, #7
 8005bb0:	6879      	ldr	r1, [r7, #4]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	00db      	lsls	r3, r3, #3
 8005bba:	440b      	add	r3, r1
 8005bbc:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8005bc0:	681b      	ldr	r3, [r3, #0]
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bc80      	pop	{r7}
 8005bca:	4770      	bx	lr

08005bcc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	607a      	str	r2, [r7, #4]
 8005bd6:	603b      	str	r3, [r7, #0]
 8005bd8:	460b      	mov	r3, r1
 8005bda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bdc:	7afb      	ldrb	r3, [r7, #11]
 8005bde:	f003 0207 	and.w	r2, r3, #7
 8005be2:	4613      	mov	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4413      	add	r3, r2
 8005be8:	00db      	lsls	r3, r3, #3
 8005bea:	3310      	adds	r3, #16
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4413      	add	r3, r2
 8005bf0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2201      	movs	r2, #1
 8005c16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c18:	7afb      	ldrb	r3, [r7, #11]
 8005c1a:	f003 0307 	and.w	r3, r3, #7
 8005c1e:	b2da      	uxtb	r2, r3
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6979      	ldr	r1, [r7, #20]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f003 fb4a 	bl	80092c4 <USB_EPStartXfer>

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3718      	adds	r7, #24
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b084      	sub	sp, #16
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	460b      	mov	r3, r1
 8005c44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005c46:	78fb      	ldrb	r3, [r7, #3]
 8005c48:	f003 0307 	and.w	r3, r3, #7
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	7912      	ldrb	r2, [r2, #4]
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d901      	bls.n	8005c58 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e04c      	b.n	8005cf2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	da0e      	bge.n	8005c7e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c60:	78fb      	ldrb	r3, [r7, #3]
 8005c62:	f003 0207 	and.w	r2, r3, #7
 8005c66:	4613      	mov	r3, r2
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	4413      	add	r3, r2
 8005c6c:	00db      	lsls	r3, r3, #3
 8005c6e:	3310      	adds	r3, #16
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	4413      	add	r3, r2
 8005c74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	705a      	strb	r2, [r3, #1]
 8005c7c:	e00c      	b.n	8005c98 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005c7e:	78fa      	ldrb	r2, [r7, #3]
 8005c80:	4613      	mov	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	00db      	lsls	r3, r3, #3
 8005c88:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	4413      	add	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c9e:	78fb      	ldrb	r3, [r7, #3]
 8005ca0:	f003 0307 	and.w	r3, r3, #7
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d101      	bne.n	8005cb8 <HAL_PCD_EP_SetStall+0x7e>
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	e01c      	b.n	8005cf2 <HAL_PCD_EP_SetStall+0xb8>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68f9      	ldr	r1, [r7, #12]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f004 fc48 	bl	800a55c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ccc:	78fb      	ldrb	r3, [r7, #3]
 8005cce:	f003 0307 	and.w	r3, r3, #7
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d108      	bne.n	8005ce8 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	4610      	mov	r0, r2
 8005ce4:	f004 fd6d 	bl	800a7c2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b084      	sub	sp, #16
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
 8005d02:	460b      	mov	r3, r1
 8005d04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005d06:	78fb      	ldrb	r3, [r7, #3]
 8005d08:	f003 030f 	and.w	r3, r3, #15
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	7912      	ldrb	r2, [r2, #4]
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d901      	bls.n	8005d18 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e040      	b.n	8005d9a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	da0e      	bge.n	8005d3e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d20:	78fb      	ldrb	r3, [r7, #3]
 8005d22:	f003 0207 	and.w	r2, r3, #7
 8005d26:	4613      	mov	r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	4413      	add	r3, r2
 8005d2c:	00db      	lsls	r3, r3, #3
 8005d2e:	3310      	adds	r3, #16
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	4413      	add	r3, r2
 8005d34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	705a      	strb	r2, [r3, #1]
 8005d3c:	e00e      	b.n	8005d5c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d3e:	78fb      	ldrb	r3, [r7, #3]
 8005d40:	f003 0207 	and.w	r2, r3, #7
 8005d44:	4613      	mov	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	00db      	lsls	r3, r3, #3
 8005d4c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	4413      	add	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d62:	78fb      	ldrb	r3, [r7, #3]
 8005d64:	f003 0307 	and.w	r3, r3, #7
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d101      	bne.n	8005d7c <HAL_PCD_EP_ClrStall+0x82>
 8005d78:	2302      	movs	r3, #2
 8005d7a:	e00e      	b.n	8005d9a <HAL_PCD_EP_ClrStall+0xa0>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68f9      	ldr	r1, [r7, #12]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f004 fc36 	bl	800a5fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b096      	sub	sp, #88	; 0x58
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005daa:	e3bc      	b.n	8006526 <PCD_EP_ISR_Handler+0x784>
  {
    wIstr = hpcd->Instance->ISTR;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005db4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005db8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	f003 030f 	and.w	r3, r3, #15
 8005dc2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8005dc6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f040 8176 	bne.w	80060bc <PCD_EP_ISR_Handler+0x31a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005dd0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005dd4:	f003 0310 	and.w	r3, r3, #16
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d14f      	bne.n	8005e7c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	881b      	ldrh	r3, [r3, #0]
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dec:	81fb      	strh	r3, [r7, #14]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	89fb      	ldrh	r3, [r7, #14]
 8005df4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005df8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	3310      	adds	r3, #16
 8005e04:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	461a      	mov	r2, r3
 8005e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	00db      	lsls	r3, r3, #3
 8005e18:	4413      	add	r3, r2
 8005e1a:	3302      	adds	r3, #2
 8005e1c:	005b      	lsls	r3, r3, #1
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	6812      	ldr	r2, [r2, #0]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e28:	881b      	ldrh	r3, [r3, #0]
 8005e2a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005e2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e30:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e34:	695a      	ldr	r2, [r3, #20]
 8005e36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	441a      	add	r2, r3
 8005e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e3e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005e40:	2100      	movs	r1, #0
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f006 fabb 	bl	800c3be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	7b5b      	ldrb	r3, [r3, #13]
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f000 8369 	beq.w	8006526 <PCD_EP_ISR_Handler+0x784>
 8005e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f040 8364 	bne.w	8006526 <PCD_EP_ISR_Handler+0x784>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	7b5b      	ldrb	r3, [r3, #13]
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	b292      	uxth	r2, r2
 8005e70:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	735a      	strb	r2, [r3, #13]
 8005e7a:	e354      	b.n	8006526 <PCD_EP_ISR_Handler+0x784>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005e82:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	881b      	ldrh	r3, [r3, #0]
 8005e8a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005e8e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005e92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d034      	beq.n	8005f04 <PCD_EP_ISR_Handler+0x162>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	00db      	lsls	r3, r3, #3
 8005eac:	4413      	add	r3, r2
 8005eae:	3306      	adds	r3, #6
 8005eb0:	005b      	lsls	r3, r3, #1
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	6812      	ldr	r2, [r2, #0]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ebc:	881b      	ldrh	r3, [r3, #0]
 8005ebe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ec4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6818      	ldr	r0, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8005ed0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ed2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005ed4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ed6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	f004 fcc2 	bl	800a862 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005eea:	4013      	ands	r3, r2
 8005eec:	823b      	strh	r3, [r7, #16]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	8a3a      	ldrh	r2, [r7, #16]
 8005ef4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ef8:	b292      	uxth	r2, r2
 8005efa:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f006 fa31 	bl	800c364 <HAL_PCD_SetupStageCallback>
 8005f02:	e310      	b.n	8006526 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005f04:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f280 830c 	bge.w	8006526 <PCD_EP_ISR_Handler+0x784>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	881b      	ldrh	r3, [r3, #0]
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	83fb      	strh	r3, [r7, #30]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	8bfa      	ldrh	r2, [r7, #30]
 8005f24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f28:	b292      	uxth	r2, r2
 8005f2a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	461a      	mov	r2, r3
 8005f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	00db      	lsls	r3, r3, #3
 8005f3e:	4413      	add	r3, r2
 8005f40:	3306      	adds	r3, #6
 8005f42:	005b      	lsls	r3, r3, #1
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	6812      	ldr	r2, [r2, #0]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f4e:	881b      	ldrh	r3, [r3, #0]
 8005f50:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f56:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f5a:	69db      	ldr	r3, [r3, #28]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d019      	beq.n	8005f94 <PCD_EP_ISR_Handler+0x1f2>
 8005f60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d015      	beq.n	8005f94 <PCD_EP_ISR_Handler+0x1f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6818      	ldr	r0, [r3, #0]
 8005f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f6e:	6959      	ldr	r1, [r3, #20]
 8005f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f72:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005f74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f76:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	f004 fc72 	bl	800a862 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f80:	695a      	ldr	r2, [r3, #20]
 8005f82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f84:	69db      	ldr	r3, [r3, #28]
 8005f86:	441a      	add	r2, r3
 8005f88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f8a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f006 f9fa 	bl	800c388 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	881b      	ldrh	r3, [r3, #0]
 8005f9a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005f9e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005fa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f040 82bd 	bne.w	8006526 <PCD_EP_ISR_Handler+0x784>
 8005fac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005fb0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005fb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fb8:	f000 82b5 	beq.w	8006526 <PCD_EP_ISR_Handler+0x784>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	61bb      	str	r3, [r7, #24]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	461a      	mov	r2, r3
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	61bb      	str	r3, [r7, #24]
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fda:	617b      	str	r3, [r7, #20]
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	881b      	ldrh	r3, [r3, #0]
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	801a      	strh	r2, [r3, #0]
 8005fec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	2b3e      	cmp	r3, #62	; 0x3e
 8005ff2:	d91d      	bls.n	8006030 <PCD_EP_ISR_Handler+0x28e>
 8005ff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	095b      	lsrs	r3, r3, #5
 8005ffa:	647b      	str	r3, [r7, #68]	; 0x44
 8005ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	f003 031f 	and.w	r3, r3, #31
 8006004:	2b00      	cmp	r3, #0
 8006006:	d102      	bne.n	800600e <PCD_EP_ISR_Handler+0x26c>
 8006008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800600a:	3b01      	subs	r3, #1
 800600c:	647b      	str	r3, [r7, #68]	; 0x44
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	b29a      	uxth	r2, r3
 8006014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006016:	b29b      	uxth	r3, r3
 8006018:	029b      	lsls	r3, r3, #10
 800601a:	b29b      	uxth	r3, r3
 800601c:	4313      	orrs	r3, r2
 800601e:	b29b      	uxth	r3, r3
 8006020:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006024:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006028:	b29a      	uxth	r2, r3
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	801a      	strh	r2, [r3, #0]
 800602e:	e026      	b.n	800607e <PCD_EP_ISR_Handler+0x2dc>
 8006030:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10a      	bne.n	800604e <PCD_EP_ISR_Handler+0x2ac>
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	881b      	ldrh	r3, [r3, #0]
 800603c:	b29b      	uxth	r3, r3
 800603e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006046:	b29a      	uxth	r2, r3
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	801a      	strh	r2, [r3, #0]
 800604c:	e017      	b.n	800607e <PCD_EP_ISR_Handler+0x2dc>
 800604e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	085b      	lsrs	r3, r3, #1
 8006054:	647b      	str	r3, [r7, #68]	; 0x44
 8006056:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	2b00      	cmp	r3, #0
 8006060:	d002      	beq.n	8006068 <PCD_EP_ISR_Handler+0x2c6>
 8006062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006064:	3301      	adds	r3, #1
 8006066:	647b      	str	r3, [r7, #68]	; 0x44
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	881b      	ldrh	r3, [r3, #0]
 800606c:	b29a      	uxth	r2, r3
 800606e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006070:	b29b      	uxth	r3, r3
 8006072:	029b      	lsls	r3, r3, #10
 8006074:	b29b      	uxth	r3, r3
 8006076:	4313      	orrs	r3, r2
 8006078:	b29a      	uxth	r2, r3
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	881b      	ldrh	r3, [r3, #0]
 8006084:	b29b      	uxth	r3, r3
 8006086:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800608a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800608e:	827b      	strh	r3, [r7, #18]
 8006090:	8a7b      	ldrh	r3, [r7, #18]
 8006092:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006096:	827b      	strh	r3, [r7, #18]
 8006098:	8a7b      	ldrh	r3, [r7, #18]
 800609a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800609e:	827b      	strh	r3, [r7, #18]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	8a7b      	ldrh	r3, [r7, #18]
 80060a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	8013      	strh	r3, [r2, #0]
 80060ba:	e234      	b.n	8006526 <PCD_EP_ISR_Handler+0x784>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	461a      	mov	r2, r3
 80060c2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	881b      	ldrh	r3, [r3, #0]
 80060cc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80060d0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f280 80fc 	bge.w	80062d2 <PCD_EP_ISR_Handler+0x530>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	461a      	mov	r2, r3
 80060e0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4413      	add	r3, r2
 80060e8:	881b      	ldrh	r3, [r3, #0]
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	f640 738f 	movw	r3, #3983	; 0xf8f
 80060f0:	4013      	ands	r3, r2
 80060f2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	461a      	mov	r2, r3
 80060fc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006108:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800610c:	b292      	uxth	r2, r2
 800610e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006110:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8006114:	4613      	mov	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4413      	add	r3, r2
 800611a:	00db      	lsls	r3, r3, #3
 800611c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	4413      	add	r3, r2
 8006124:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006128:	7b1b      	ldrb	r3, [r3, #12]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d125      	bne.n	800617a <PCD_EP_ISR_Handler+0x3d8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006136:	b29b      	uxth	r3, r3
 8006138:	461a      	mov	r2, r3
 800613a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	00db      	lsls	r3, r3, #3
 8006140:	4413      	add	r3, r2
 8006142:	3306      	adds	r3, #6
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	6812      	ldr	r2, [r2, #0]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006150:	881b      	ldrh	r3, [r3, #0]
 8006152:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006156:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800615a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800615e:	2b00      	cmp	r3, #0
 8006160:	f000 8092 	beq.w	8006288 <PCD_EP_ISR_Handler+0x4e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6818      	ldr	r0, [r3, #0]
 8006168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800616a:	6959      	ldr	r1, [r3, #20]
 800616c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800616e:	88da      	ldrh	r2, [r3, #6]
 8006170:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006174:	f004 fb75 	bl	800a862 <USB_ReadPMA>
 8006178:	e086      	b.n	8006288 <PCD_EP_ISR_Handler+0x4e6>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800617a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800617c:	78db      	ldrb	r3, [r3, #3]
 800617e:	2b02      	cmp	r3, #2
 8006180:	d10a      	bne.n	8006198 <PCD_EP_ISR_Handler+0x3f6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006182:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006186:	461a      	mov	r2, r3
 8006188:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f9d9 	bl	8006542 <HAL_PCD_EP_DB_Receive>
 8006190:	4603      	mov	r3, r0
 8006192:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8006196:	e077      	b.n	8006288 <PCD_EP_ISR_Handler+0x4e6>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	461a      	mov	r2, r3
 800619e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	461a      	mov	r2, r3
 80061bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	441a      	add	r2, r3
 80061c4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80061c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061d8:	b29b      	uxth	r3, r3
 80061da:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	461a      	mov	r2, r3
 80061e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4413      	add	r3, r2
 80061ea:	881b      	ldrh	r3, [r3, #0]
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d024      	beq.n	8006240 <PCD_EP_ISR_Handler+0x49e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061fe:	b29b      	uxth	r3, r3
 8006200:	461a      	mov	r2, r3
 8006202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	00db      	lsls	r3, r3, #3
 8006208:	4413      	add	r3, r2
 800620a:	3302      	adds	r3, #2
 800620c:	005b      	lsls	r3, r3, #1
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	6812      	ldr	r2, [r2, #0]
 8006212:	4413      	add	r3, r2
 8006214:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800621e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8006222:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006226:	2b00      	cmp	r3, #0
 8006228:	d02e      	beq.n	8006288 <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6818      	ldr	r0, [r3, #0]
 800622e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006230:	6959      	ldr	r1, [r3, #20]
 8006232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006234:	891a      	ldrh	r2, [r3, #8]
 8006236:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800623a:	f004 fb12 	bl	800a862 <USB_ReadPMA>
 800623e:	e023      	b.n	8006288 <PCD_EP_ISR_Handler+0x4e6>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006248:	b29b      	uxth	r3, r3
 800624a:	461a      	mov	r2, r3
 800624c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	00db      	lsls	r3, r3, #3
 8006252:	4413      	add	r3, r2
 8006254:	3306      	adds	r3, #6
 8006256:	005b      	lsls	r3, r3, #1
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	6812      	ldr	r2, [r2, #0]
 800625c:	4413      	add	r3, r2
 800625e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006262:	881b      	ldrh	r3, [r3, #0]
 8006264:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006268:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800626c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006270:	2b00      	cmp	r3, #0
 8006272:	d009      	beq.n	8006288 <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6818      	ldr	r0, [r3, #0]
 8006278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800627a:	6959      	ldr	r1, [r3, #20]
 800627c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800627e:	895a      	ldrh	r2, [r3, #10]
 8006280:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006284:	f004 faed 	bl	800a862 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800628a:	69da      	ldr	r2, [r3, #28]
 800628c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006290:	441a      	add	r2, r3
 8006292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006294:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006298:	695a      	ldr	r2, [r3, #20]
 800629a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800629e:	441a      	add	r2, r3
 80062a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062a2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80062a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d005      	beq.n	80062b8 <PCD_EP_ISR_Handler+0x516>
 80062ac:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80062b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d206      	bcs.n	80062c6 <PCD_EP_ISR_Handler+0x524>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80062b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	4619      	mov	r1, r3
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f006 f862 	bl	800c388 <HAL_PCD_DataOutStageCallback>
 80062c4:	e005      	b.n	80062d2 <PCD_EP_ISR_Handler+0x530>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80062cc:	4618      	mov	r0, r3
 80062ce:	f002 fff9 	bl	80092c4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80062d2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80062d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 8123 	beq.w	8006526 <PCD_EP_ISR_Handler+0x784>
      {
        ep = &hpcd->IN_ep[epindex];
 80062e0:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80062e4:	4613      	mov	r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	00db      	lsls	r3, r3, #3
 80062ec:	3310      	adds	r3, #16
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	4413      	add	r3, r2
 80062f2:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	461a      	mov	r2, r3
 80062fa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4413      	add	r3, r2
 8006302:	881b      	ldrh	r3, [r3, #0]
 8006304:	b29b      	uxth	r3, r3
 8006306:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800630a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800630e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	461a      	mov	r2, r3
 8006318:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	441a      	add	r2, r3
 8006320:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006324:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006328:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800632c:	b29b      	uxth	r3, r3
 800632e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006330:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006332:	78db      	ldrb	r3, [r3, #3]
 8006334:	2b01      	cmp	r3, #1
 8006336:	f040 80a2 	bne.w	800647e <PCD_EP_ISR_Handler+0x6dc>
        {
          ep->xfer_len = 0U;
 800633a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800633c:	2200      	movs	r2, #0
 800633e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006342:	7b1b      	ldrb	r3, [r3, #12]
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 8093 	beq.w	8006470 <PCD_EP_ISR_Handler+0x6ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800634a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800634e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006352:	2b00      	cmp	r3, #0
 8006354:	d046      	beq.n	80063e4 <PCD_EP_ISR_Handler+0x642>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006356:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006358:	785b      	ldrb	r3, [r3, #1]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d126      	bne.n	80063ac <PCD_EP_ISR_Handler+0x60a>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	627b      	str	r3, [r7, #36]	; 0x24
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800636c:	b29b      	uxth	r3, r3
 800636e:	461a      	mov	r2, r3
 8006370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006372:	4413      	add	r3, r2
 8006374:	627b      	str	r3, [r7, #36]	; 0x24
 8006376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	011a      	lsls	r2, r3, #4
 800637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637e:	4413      	add	r3, r2
 8006380:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006384:	623b      	str	r3, [r7, #32]
 8006386:	6a3b      	ldr	r3, [r7, #32]
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	b29b      	uxth	r3, r3
 800638c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006390:	b29a      	uxth	r2, r3
 8006392:	6a3b      	ldr	r3, [r7, #32]
 8006394:	801a      	strh	r2, [r3, #0]
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	881b      	ldrh	r3, [r3, #0]
 800639a:	b29b      	uxth	r3, r3
 800639c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	6a3b      	ldr	r3, [r7, #32]
 80063a8:	801a      	strh	r2, [r3, #0]
 80063aa:	e061      	b.n	8006470 <PCD_EP_ISR_Handler+0x6ce>
 80063ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063ae:	785b      	ldrb	r3, [r3, #1]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d15d      	bne.n	8006470 <PCD_EP_ISR_Handler+0x6ce>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	461a      	mov	r2, r3
 80063c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c8:	4413      	add	r3, r2
 80063ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	011a      	lsls	r2, r3, #4
 80063d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d4:	4413      	add	r3, r2
 80063d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063da:	62bb      	str	r3, [r7, #40]	; 0x28
 80063dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063de:	2200      	movs	r2, #0
 80063e0:	801a      	strh	r2, [r3, #0]
 80063e2:	e045      	b.n	8006470 <PCD_EP_ISR_Handler+0x6ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063ec:	785b      	ldrb	r3, [r3, #1]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d126      	bne.n	8006440 <PCD_EP_ISR_Handler+0x69e>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	637b      	str	r3, [r7, #52]	; 0x34
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006400:	b29b      	uxth	r3, r3
 8006402:	461a      	mov	r2, r3
 8006404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006406:	4413      	add	r3, r2
 8006408:	637b      	str	r3, [r7, #52]	; 0x34
 800640a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	011a      	lsls	r2, r3, #4
 8006410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006412:	4413      	add	r3, r2
 8006414:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006418:	633b      	str	r3, [r7, #48]	; 0x30
 800641a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641c:	881b      	ldrh	r3, [r3, #0]
 800641e:	b29b      	uxth	r3, r3
 8006420:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006424:	b29a      	uxth	r2, r3
 8006426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006428:	801a      	strh	r2, [r3, #0]
 800642a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	b29b      	uxth	r3, r3
 8006430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006438:	b29a      	uxth	r2, r3
 800643a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643c:	801a      	strh	r2, [r3, #0]
 800643e:	e017      	b.n	8006470 <PCD_EP_ISR_Handler+0x6ce>
 8006440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006442:	785b      	ldrb	r3, [r3, #1]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d113      	bne.n	8006470 <PCD_EP_ISR_Handler+0x6ce>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006450:	b29b      	uxth	r3, r3
 8006452:	461a      	mov	r2, r3
 8006454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006456:	4413      	add	r3, r2
 8006458:	63fb      	str	r3, [r7, #60]	; 0x3c
 800645a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	011a      	lsls	r2, r3, #4
 8006460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006462:	4413      	add	r3, r2
 8006464:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006468:	63bb      	str	r3, [r7, #56]	; 0x38
 800646a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646c:	2200      	movs	r2, #0
 800646e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006470:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	4619      	mov	r1, r3
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f005 ffa1 	bl	800c3be <HAL_PCD_DataInStageCallback>
 800647c:	e053      	b.n	8006526 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800647e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006486:	2b00      	cmp	r3, #0
 8006488:	d146      	bne.n	8006518 <PCD_EP_ISR_Handler+0x776>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006492:	b29b      	uxth	r3, r3
 8006494:	461a      	mov	r2, r3
 8006496:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	00db      	lsls	r3, r3, #3
 800649c:	4413      	add	r3, r2
 800649e:	3302      	adds	r3, #2
 80064a0:	005b      	lsls	r3, r3, #1
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	6812      	ldr	r2, [r2, #0]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064b2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80064b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064b8:	699a      	ldr	r2, [r3, #24]
 80064ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80064be:	429a      	cmp	r2, r3
 80064c0:	d907      	bls.n	80064d2 <PCD_EP_ISR_Handler+0x730>
            {
              ep->xfer_len -= TxPctSize;
 80064c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064c4:	699a      	ldr	r2, [r3, #24]
 80064c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80064ca:	1ad2      	subs	r2, r2, r3
 80064cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064ce:	619a      	str	r2, [r3, #24]
 80064d0:	e002      	b.n	80064d8 <PCD_EP_ISR_Handler+0x736>
            }
            else
            {
              ep->xfer_len = 0U;
 80064d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064d4:	2200      	movs	r2, #0
 80064d6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80064d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d106      	bne.n	80064ee <PCD_EP_ISR_Handler+0x74c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80064e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	4619      	mov	r1, r3
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f005 ff69 	bl	800c3be <HAL_PCD_DataInStageCallback>
 80064ec:	e01b      	b.n	8006526 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80064ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064f0:	695a      	ldr	r2, [r3, #20]
 80064f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80064f6:	441a      	add	r2, r3
 80064f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064fa:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80064fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064fe:	69da      	ldr	r2, [r3, #28]
 8006500:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006504:	441a      	add	r2, r3
 8006506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006508:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006510:	4618      	mov	r0, r3
 8006512:	f002 fed7 	bl	80092c4 <USB_EPStartXfer>
 8006516:	e006      	b.n	8006526 <PCD_EP_ISR_Handler+0x784>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006518:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800651c:	461a      	mov	r2, r3
 800651e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f91b 	bl	800675c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800652e:	b29b      	uxth	r3, r3
 8006530:	b21b      	sxth	r3, r3
 8006532:	2b00      	cmp	r3, #0
 8006534:	f6ff ac3a 	blt.w	8005dac <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3758      	adds	r7, #88	; 0x58
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b088      	sub	sp, #32
 8006546:	af00      	add	r7, sp, #0
 8006548:	60f8      	str	r0, [r7, #12]
 800654a:	60b9      	str	r1, [r7, #8]
 800654c:	4613      	mov	r3, r2
 800654e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006550:	88fb      	ldrh	r3, [r7, #6]
 8006552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d07e      	beq.n	8006658 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006562:	b29b      	uxth	r3, r3
 8006564:	461a      	mov	r2, r3
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	00db      	lsls	r3, r3, #3
 800656c:	4413      	add	r3, r2
 800656e:	3302      	adds	r3, #2
 8006570:	005b      	lsls	r3, r3, #1
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	6812      	ldr	r2, [r2, #0]
 8006576:	4413      	add	r3, r2
 8006578:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006582:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	699a      	ldr	r2, [r3, #24]
 8006588:	8b7b      	ldrh	r3, [r7, #26]
 800658a:	429a      	cmp	r2, r3
 800658c:	d306      	bcc.n	800659c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	699a      	ldr	r2, [r3, #24]
 8006592:	8b7b      	ldrh	r3, [r7, #26]
 8006594:	1ad2      	subs	r2, r2, r3
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	619a      	str	r2, [r3, #24]
 800659a:	e002      	b.n	80065a2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2200      	movs	r2, #0
 80065a0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d123      	bne.n	80065f2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	461a      	mov	r2, r3
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	881b      	ldrh	r3, [r3, #0]
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065c4:	833b      	strh	r3, [r7, #24]
 80065c6:	8b3b      	ldrh	r3, [r7, #24]
 80065c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80065cc:	833b      	strh	r3, [r7, #24]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	461a      	mov	r2, r3
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	441a      	add	r2, r3
 80065dc:	8b3b      	ldrh	r3, [r7, #24]
 80065de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80065f2:	88fb      	ldrh	r3, [r7, #6]
 80065f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d01f      	beq.n	800663c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	461a      	mov	r2, r3
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4413      	add	r3, r2
 800660a:	881b      	ldrh	r3, [r3, #0]
 800660c:	b29b      	uxth	r3, r3
 800660e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006616:	82fb      	strh	r3, [r7, #22]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	461a      	mov	r2, r3
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	441a      	add	r2, r3
 8006626:	8afb      	ldrh	r3, [r7, #22]
 8006628:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800662c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006630:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006634:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006638:	b29b      	uxth	r3, r3
 800663a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800663c:	8b7b      	ldrh	r3, [r7, #26]
 800663e:	2b00      	cmp	r3, #0
 8006640:	f000 8087 	beq.w	8006752 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6818      	ldr	r0, [r3, #0]
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	6959      	ldr	r1, [r3, #20]
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	891a      	ldrh	r2, [r3, #8]
 8006650:	8b7b      	ldrh	r3, [r7, #26]
 8006652:	f004 f906 	bl	800a862 <USB_ReadPMA>
 8006656:	e07c      	b.n	8006752 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006660:	b29b      	uxth	r3, r3
 8006662:	461a      	mov	r2, r3
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	00db      	lsls	r3, r3, #3
 800666a:	4413      	add	r3, r2
 800666c:	3306      	adds	r3, #6
 800666e:	005b      	lsls	r3, r3, #1
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	6812      	ldr	r2, [r2, #0]
 8006674:	4413      	add	r3, r2
 8006676:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800667a:	881b      	ldrh	r3, [r3, #0]
 800667c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006680:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	699a      	ldr	r2, [r3, #24]
 8006686:	8b7b      	ldrh	r3, [r7, #26]
 8006688:	429a      	cmp	r2, r3
 800668a:	d306      	bcc.n	800669a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	699a      	ldr	r2, [r3, #24]
 8006690:	8b7b      	ldrh	r3, [r7, #26]
 8006692:	1ad2      	subs	r2, r2, r3
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	619a      	str	r2, [r3, #24]
 8006698:	e002      	b.n	80066a0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2200      	movs	r2, #0
 800669e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d123      	bne.n	80066f0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	461a      	mov	r2, r3
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4413      	add	r3, r2
 80066b6:	881b      	ldrh	r3, [r3, #0]
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066c2:	83fb      	strh	r3, [r7, #30]
 80066c4:	8bfb      	ldrh	r3, [r7, #30]
 80066c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80066ca:	83fb      	strh	r3, [r7, #30]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	461a      	mov	r2, r3
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	441a      	add	r2, r3
 80066da:	8bfb      	ldrh	r3, [r7, #30]
 80066dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80066f0:	88fb      	ldrh	r3, [r7, #6]
 80066f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d11f      	bne.n	800673a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	461a      	mov	r2, r3
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	b29b      	uxth	r3, r3
 800670c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006714:	83bb      	strh	r3, [r7, #28]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	461a      	mov	r2, r3
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	441a      	add	r2, r3
 8006724:	8bbb      	ldrh	r3, [r7, #28]
 8006726:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800672a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800672e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006732:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006736:	b29b      	uxth	r3, r3
 8006738:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800673a:	8b7b      	ldrh	r3, [r7, #26]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d008      	beq.n	8006752 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6818      	ldr	r0, [r3, #0]
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	6959      	ldr	r1, [r3, #20]
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	895a      	ldrh	r2, [r3, #10]
 800674c:	8b7b      	ldrh	r3, [r7, #26]
 800674e:	f004 f888 	bl	800a862 <USB_ReadPMA>
    }
  }

  return count;
 8006752:	8b7b      	ldrh	r3, [r7, #26]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3720      	adds	r7, #32
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b0a4      	sub	sp, #144	; 0x90
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	4613      	mov	r3, r2
 8006768:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800676a:	88fb      	ldrh	r3, [r7, #6]
 800676c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 81dd 	beq.w	8006b30 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800677e:	b29b      	uxth	r3, r3
 8006780:	461a      	mov	r2, r3
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	00db      	lsls	r3, r3, #3
 8006788:	4413      	add	r3, r2
 800678a:	3302      	adds	r3, #2
 800678c:	005b      	lsls	r3, r3, #1
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	6812      	ldr	r2, [r2, #0]
 8006792:	4413      	add	r3, r2
 8006794:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006798:	881b      	ldrh	r3, [r3, #0]
 800679a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800679e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	699a      	ldr	r2, [r3, #24]
 80067a6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d907      	bls.n	80067be <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	699a      	ldr	r2, [r3, #24]
 80067b2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80067b6:	1ad2      	subs	r2, r2, r3
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	619a      	str	r2, [r3, #24]
 80067bc:	e002      	b.n	80067c4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	2200      	movs	r2, #0
 80067c2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f040 80b9 	bne.w	8006940 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	785b      	ldrb	r3, [r3, #1]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d126      	bne.n	8006824 <HAL_PCD_EP_DB_Transmit+0xc8>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	461a      	mov	r2, r3
 80067e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ea:	4413      	add	r3, r2
 80067ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	011a      	lsls	r2, r3, #4
 80067f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f6:	4413      	add	r3, r2
 80067f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80067fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006800:	881b      	ldrh	r3, [r3, #0]
 8006802:	b29b      	uxth	r3, r3
 8006804:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006808:	b29a      	uxth	r2, r3
 800680a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680c:	801a      	strh	r2, [r3, #0]
 800680e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006810:	881b      	ldrh	r3, [r3, #0]
 8006812:	b29b      	uxth	r3, r3
 8006814:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006818:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800681c:	b29a      	uxth	r2, r3
 800681e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006820:	801a      	strh	r2, [r3, #0]
 8006822:	e01a      	b.n	800685a <HAL_PCD_EP_DB_Transmit+0xfe>
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	785b      	ldrb	r3, [r3, #1]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d116      	bne.n	800685a <HAL_PCD_EP_DB_Transmit+0xfe>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	637b      	str	r3, [r7, #52]	; 0x34
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800683a:	b29b      	uxth	r3, r3
 800683c:	461a      	mov	r2, r3
 800683e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006840:	4413      	add	r3, r2
 8006842:	637b      	str	r3, [r7, #52]	; 0x34
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	011a      	lsls	r2, r3, #4
 800684a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800684c:	4413      	add	r3, r2
 800684e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006852:	633b      	str	r3, [r7, #48]	; 0x30
 8006854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006856:	2200      	movs	r2, #0
 8006858:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	627b      	str	r3, [r7, #36]	; 0x24
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	785b      	ldrb	r3, [r3, #1]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d126      	bne.n	80068b6 <HAL_PCD_EP_DB_Transmit+0x15a>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	61fb      	str	r3, [r7, #28]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006876:	b29b      	uxth	r3, r3
 8006878:	461a      	mov	r2, r3
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	4413      	add	r3, r2
 800687e:	61fb      	str	r3, [r7, #28]
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	011a      	lsls	r2, r3, #4
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	4413      	add	r3, r2
 800688a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800688e:	61bb      	str	r3, [r7, #24]
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	881b      	ldrh	r3, [r3, #0]
 8006894:	b29b      	uxth	r3, r3
 8006896:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800689a:	b29a      	uxth	r2, r3
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	801a      	strh	r2, [r3, #0]
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	881b      	ldrh	r3, [r3, #0]
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	801a      	strh	r2, [r3, #0]
 80068b4:	e017      	b.n	80068e6 <HAL_PCD_EP_DB_Transmit+0x18a>
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	785b      	ldrb	r3, [r3, #1]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d113      	bne.n	80068e6 <HAL_PCD_EP_DB_Transmit+0x18a>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	461a      	mov	r2, r3
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	4413      	add	r3, r2
 80068ce:	627b      	str	r3, [r7, #36]	; 0x24
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	011a      	lsls	r2, r3, #4
 80068d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d8:	4413      	add	r3, r2
 80068da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068de:	623b      	str	r3, [r7, #32]
 80068e0:	6a3b      	ldr	r3, [r7, #32]
 80068e2:	2200      	movs	r2, #0
 80068e4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	4619      	mov	r1, r3
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f005 fd66 	bl	800c3be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80068f2:	88fb      	ldrh	r3, [r7, #6]
 80068f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f000 82fc 	beq.w	8006ef6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	461a      	mov	r2, r3
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	4413      	add	r3, r2
 800690c:	881b      	ldrh	r3, [r3, #0]
 800690e:	b29b      	uxth	r3, r3
 8006910:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006918:	82fb      	strh	r3, [r7, #22]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	461a      	mov	r2, r3
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	441a      	add	r2, r3
 8006928:	8afb      	ldrh	r3, [r7, #22]
 800692a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800692e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006932:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800693a:	b29b      	uxth	r3, r3
 800693c:	8013      	strh	r3, [r2, #0]
 800693e:	e2da      	b.n	8006ef6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006940:	88fb      	ldrh	r3, [r7, #6]
 8006942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d021      	beq.n	800698e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	461a      	mov	r2, r3
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	881b      	ldrh	r3, [r3, #0]
 800695a:	b29b      	uxth	r3, r3
 800695c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006964:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	461a      	mov	r2, r3
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	441a      	add	r2, r3
 8006976:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800697a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800697e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006982:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800698a:	b29b      	uxth	r3, r3
 800698c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006994:	2b01      	cmp	r3, #1
 8006996:	f040 82ae 	bne.w	8006ef6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	695a      	ldr	r2, [r3, #20]
 800699e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80069a2:	441a      	add	r2, r3
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	69da      	ldr	r2, [r3, #28]
 80069ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80069b0:	441a      	add	r2, r3
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	6a1a      	ldr	r2, [r3, #32]
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d30b      	bcc.n	80069da <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	6a1a      	ldr	r2, [r3, #32]
 80069ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069d2:	1ad2      	subs	r2, r2, r3
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	621a      	str	r2, [r3, #32]
 80069d8:	e017      	b.n	8006a0a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d108      	bne.n	80069f4 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80069e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80069e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80069f2:	e00a      	b.n	8006a0a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	6a1b      	ldr	r3, [r3, #32]
 8006a00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	2200      	movs	r2, #0
 8006a08:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	785b      	ldrb	r3, [r3, #1]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d165      	bne.n	8006ade <HAL_PCD_EP_DB_Transmit+0x382>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	461a      	mov	r2, r3
 8006a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a26:	4413      	add	r3, r2
 8006a28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	011a      	lsls	r2, r3, #4
 8006a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a32:	4413      	add	r3, r2
 8006a34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a38:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3c:	881b      	ldrh	r3, [r3, #0]
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a48:	801a      	strh	r2, [r3, #0]
 8006a4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a4e:	2b3e      	cmp	r3, #62	; 0x3e
 8006a50:	d91d      	bls.n	8006a8e <HAL_PCD_EP_DB_Transmit+0x332>
 8006a52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a56:	095b      	lsrs	r3, r3, #5
 8006a58:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a5e:	f003 031f 	and.w	r3, r3, #31
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d102      	bne.n	8006a6c <HAL_PCD_EP_DB_Transmit+0x310>
 8006a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6e:	881b      	ldrh	r3, [r3, #0]
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	029b      	lsls	r3, r3, #10
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8a:	801a      	strh	r2, [r3, #0]
 8006a8c:	e044      	b.n	8006b18 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006a8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10a      	bne.n	8006aac <HAL_PCD_EP_DB_Transmit+0x350>
 8006a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a98:	881b      	ldrh	r3, [r3, #0]
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa8:	801a      	strh	r2, [r3, #0]
 8006aaa:	e035      	b.n	8006b18 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006aac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ab0:	085b      	lsrs	r3, r3, #1
 8006ab2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ab4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ab8:	f003 0301 	and.w	r3, r3, #1
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d002      	beq.n	8006ac6 <HAL_PCD_EP_DB_Transmit+0x36a>
 8006ac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac8:	881b      	ldrh	r3, [r3, #0]
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	029b      	lsls	r3, r3, #10
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ada:	801a      	strh	r2, [r3, #0]
 8006adc:	e01c      	b.n	8006b18 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	785b      	ldrb	r3, [r3, #1]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d118      	bne.n	8006b18 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	647b      	str	r3, [r7, #68]	; 0x44
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	461a      	mov	r2, r3
 8006af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006afa:	4413      	add	r3, r2
 8006afc:	647b      	str	r3, [r7, #68]	; 0x44
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	011a      	lsls	r2, r3, #4
 8006b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b06:	4413      	add	r3, r2
 8006b08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b0c:	643b      	str	r3, [r7, #64]	; 0x40
 8006b0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b16:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6818      	ldr	r0, [r3, #0]
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	6959      	ldr	r1, [r3, #20]
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	891a      	ldrh	r2, [r3, #8]
 8006b24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	f003 fe55 	bl	800a7d8 <USB_WritePMA>
 8006b2e:	e1e2      	b.n	8006ef6 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	00db      	lsls	r3, r3, #3
 8006b42:	4413      	add	r3, r2
 8006b44:	3306      	adds	r3, #6
 8006b46:	005b      	lsls	r3, r3, #1
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	6812      	ldr	r2, [r2, #0]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b58:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	699a      	ldr	r2, [r3, #24]
 8006b60:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d307      	bcc.n	8006b78 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	699a      	ldr	r2, [r3, #24]
 8006b6c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006b70:	1ad2      	subs	r2, r2, r3
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	619a      	str	r2, [r3, #24]
 8006b76:	e002      	b.n	8006b7e <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f040 80c0 	bne.w	8006d08 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	785b      	ldrb	r3, [r3, #1]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d126      	bne.n	8006bde <HAL_PCD_EP_DB_Transmit+0x482>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ba4:	4413      	add	r3, r2
 8006ba6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	011a      	lsls	r2, r3, #4
 8006bae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006bb6:	67bb      	str	r3, [r7, #120]	; 0x78
 8006bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bc6:	801a      	strh	r2, [r3, #0]
 8006bc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bca:	881b      	ldrh	r3, [r3, #0]
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bda:	801a      	strh	r2, [r3, #0]
 8006bdc:	e01a      	b.n	8006c14 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	785b      	ldrb	r3, [r3, #1]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d116      	bne.n	8006c14 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	667b      	str	r3, [r7, #100]	; 0x64
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bfa:	4413      	add	r3, r2
 8006bfc:	667b      	str	r3, [r7, #100]	; 0x64
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	011a      	lsls	r2, r3, #4
 8006c04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c06:	4413      	add	r3, r2
 8006c08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c0c:	663b      	str	r3, [r7, #96]	; 0x60
 8006c0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c10:	2200      	movs	r2, #0
 8006c12:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	677b      	str	r3, [r7, #116]	; 0x74
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	785b      	ldrb	r3, [r3, #1]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d12b      	bne.n	8006c7a <HAL_PCD_EP_DB_Transmit+0x51e>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	461a      	mov	r2, r3
 8006c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c36:	4413      	add	r3, r2
 8006c38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	011a      	lsls	r2, r3, #4
 8006c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c42:	4413      	add	r3, r2
 8006c44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c50:	881b      	ldrh	r3, [r3, #0]
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c5e:	801a      	strh	r2, [r3, #0]
 8006c60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c64:	881b      	ldrh	r3, [r3, #0]
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c76:	801a      	strh	r2, [r3, #0]
 8006c78:	e017      	b.n	8006caa <HAL_PCD_EP_DB_Transmit+0x54e>
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	785b      	ldrb	r3, [r3, #1]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d113      	bne.n	8006caa <HAL_PCD_EP_DB_Transmit+0x54e>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c90:	4413      	add	r3, r2
 8006c92:	677b      	str	r3, [r7, #116]	; 0x74
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	011a      	lsls	r2, r3, #4
 8006c9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c9c:	4413      	add	r3, r2
 8006c9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ca2:	673b      	str	r3, [r7, #112]	; 0x70
 8006ca4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	4619      	mov	r1, r3
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f005 fb84 	bl	800c3be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006cb6:	88fb      	ldrh	r3, [r7, #6]
 8006cb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f040 811a 	bne.w	8006ef6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	881b      	ldrh	r3, [r3, #0]
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cdc:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	441a      	add	r2, r3
 8006cee:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8006cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	8013      	strh	r3, [r2, #0]
 8006d06:	e0f6      	b.n	8006ef6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006d08:	88fb      	ldrh	r3, [r7, #6]
 8006d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d121      	bne.n	8006d56 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	461a      	mov	r2, r3
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4413      	add	r3, r2
 8006d20:	881b      	ldrh	r3, [r3, #0]
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d2c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	461a      	mov	r2, r3
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	441a      	add	r2, r3
 8006d3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006d42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	f040 80ca 	bne.w	8006ef6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	695a      	ldr	r2, [r3, #20]
 8006d66:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006d6a:	441a      	add	r2, r3
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	69da      	ldr	r2, [r3, #28]
 8006d74:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006d78:	441a      	add	r2, r3
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	6a1a      	ldr	r2, [r3, #32]
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d30b      	bcc.n	8006da2 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	6a1a      	ldr	r2, [r3, #32]
 8006d96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d9a:	1ad2      	subs	r2, r2, r3
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	621a      	str	r2, [r3, #32]
 8006da0:	e017      	b.n	8006dd2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d108      	bne.n	8006dbc <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8006daa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006dae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006dba:	e00a      	b.n	8006dd2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	657b      	str	r3, [r7, #84]	; 0x54
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	785b      	ldrb	r3, [r3, #1]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d165      	bne.n	8006eac <HAL_PCD_EP_DB_Transmit+0x750>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	461a      	mov	r2, r3
 8006df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006df4:	4413      	add	r3, r2
 8006df6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	011a      	lsls	r2, r3, #4
 8006dfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e00:	4413      	add	r3, r2
 8006e02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e06:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e0a:	881b      	ldrh	r3, [r3, #0]
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e16:	801a      	strh	r2, [r3, #0]
 8006e18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e1c:	2b3e      	cmp	r3, #62	; 0x3e
 8006e1e:	d91d      	bls.n	8006e5c <HAL_PCD_EP_DB_Transmit+0x700>
 8006e20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e24:	095b      	lsrs	r3, r3, #5
 8006e26:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e2c:	f003 031f 	and.w	r3, r3, #31
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d102      	bne.n	8006e3a <HAL_PCD_EP_DB_Transmit+0x6de>
 8006e34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e36:	3b01      	subs	r3, #1
 8006e38:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e3c:	881b      	ldrh	r3, [r3, #0]
 8006e3e:	b29a      	uxth	r2, r3
 8006e40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	029b      	lsls	r3, r3, #10
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e58:	801a      	strh	r2, [r3, #0]
 8006e5a:	e041      	b.n	8006ee0 <HAL_PCD_EP_DB_Transmit+0x784>
 8006e5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10a      	bne.n	8006e7a <HAL_PCD_EP_DB_Transmit+0x71e>
 8006e64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e66:	881b      	ldrh	r3, [r3, #0]
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e76:	801a      	strh	r2, [r3, #0]
 8006e78:	e032      	b.n	8006ee0 <HAL_PCD_EP_DB_Transmit+0x784>
 8006e7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e7e:	085b      	lsrs	r3, r3, #1
 8006e80:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e86:	f003 0301 	and.w	r3, r3, #1
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d002      	beq.n	8006e94 <HAL_PCD_EP_DB_Transmit+0x738>
 8006e8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e90:	3301      	adds	r3, #1
 8006e92:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e96:	881b      	ldrh	r3, [r3, #0]
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	029b      	lsls	r3, r3, #10
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ea8:	801a      	strh	r2, [r3, #0]
 8006eaa:	e019      	b.n	8006ee0 <HAL_PCD_EP_DB_Transmit+0x784>
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	785b      	ldrb	r3, [r3, #1]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d115      	bne.n	8006ee0 <HAL_PCD_EP_DB_Transmit+0x784>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ec2:	4413      	add	r3, r2
 8006ec4:	657b      	str	r3, [r7, #84]	; 0x54
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	011a      	lsls	r2, r3, #4
 8006ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ece:	4413      	add	r3, r2
 8006ed0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ed4:	653b      	str	r3, [r7, #80]	; 0x50
 8006ed6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ede:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6818      	ldr	r0, [r3, #0]
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	6959      	ldr	r1, [r3, #20]
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	895a      	ldrh	r2, [r3, #10]
 8006eec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	f003 fc71 	bl	800a7d8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	461a      	mov	r2, r3
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	4413      	add	r3, r2
 8006f04:	881b      	ldrh	r3, [r3, #0]
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f10:	82bb      	strh	r3, [r7, #20]
 8006f12:	8abb      	ldrh	r3, [r7, #20]
 8006f14:	f083 0310 	eor.w	r3, r3, #16
 8006f18:	82bb      	strh	r3, [r7, #20]
 8006f1a:	8abb      	ldrh	r3, [r7, #20]
 8006f1c:	f083 0320 	eor.w	r3, r3, #32
 8006f20:	82bb      	strh	r3, [r7, #20]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	461a      	mov	r2, r3
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	441a      	add	r2, r3
 8006f30:	8abb      	ldrh	r3, [r7, #20]
 8006f32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3790      	adds	r7, #144	; 0x90
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b087      	sub	sp, #28
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	607b      	str	r3, [r7, #4]
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	817b      	strh	r3, [r7, #10]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006f62:	897b      	ldrh	r3, [r7, #10]
 8006f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00b      	beq.n	8006f86 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f6e:	897b      	ldrh	r3, [r7, #10]
 8006f70:	f003 0207 	and.w	r2, r3, #7
 8006f74:	4613      	mov	r3, r2
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	4413      	add	r3, r2
 8006f7a:	00db      	lsls	r3, r3, #3
 8006f7c:	3310      	adds	r3, #16
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	4413      	add	r3, r2
 8006f82:	617b      	str	r3, [r7, #20]
 8006f84:	e009      	b.n	8006f9a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006f86:	897a      	ldrh	r2, [r7, #10]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	00db      	lsls	r3, r3, #3
 8006f90:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	4413      	add	r3, r2
 8006f98:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006f9a:	893b      	ldrh	r3, [r7, #8]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d107      	bne.n	8006fb0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	80da      	strh	r2, [r3, #6]
 8006fae:	e00b      	b.n	8006fc8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	0c1b      	lsrs	r3, r3, #16
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	371c      	adds	r7, #28
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bc80      	pop	{r7}
 8006fd2:	4770      	bx	lr

08006fd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b086      	sub	sp, #24
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d101      	bne.n	8006fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e26c      	b.n	80074c0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f000 8087 	beq.w	8007102 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ff4:	4b92      	ldr	r3, [pc, #584]	; (8007240 <HAL_RCC_OscConfig+0x26c>)
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	f003 030c 	and.w	r3, r3, #12
 8006ffc:	2b04      	cmp	r3, #4
 8006ffe:	d00c      	beq.n	800701a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007000:	4b8f      	ldr	r3, [pc, #572]	; (8007240 <HAL_RCC_OscConfig+0x26c>)
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	f003 030c 	and.w	r3, r3, #12
 8007008:	2b08      	cmp	r3, #8
 800700a:	d112      	bne.n	8007032 <HAL_RCC_OscConfig+0x5e>
 800700c:	4b8c      	ldr	r3, [pc, #560]	; (8007240 <HAL_RCC_OscConfig+0x26c>)
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007018:	d10b      	bne.n	8007032 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800701a:	4b89      	ldr	r3, [pc, #548]	; (8007240 <HAL_RCC_OscConfig+0x26c>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007022:	2b00      	cmp	r3, #0
 8007024:	d06c      	beq.n	8007100 <HAL_RCC_OscConfig+0x12c>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d168      	bne.n	8007100 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e246      	b.n	80074c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800703a:	d106      	bne.n	800704a <HAL_RCC_OscConfig+0x76>
 800703c:	4b80      	ldr	r3, [pc, #512]	; (8007240 <HAL_RCC_OscConfig+0x26c>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a7f      	ldr	r2, [pc, #508]	; (8007240 <HAL_RCC_OscConfig+0x26c>)
 8007042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007046:	6013      	str	r3, [r2, #0]
 8007048:	e02e      	b.n	80070a8 <HAL_RCC_OscConfig+0xd4>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10c      	bne.n	800706c <HAL_RCC_OscConfig+0x98>
 8007052:	4b7b      	ldr	r3, [pc, #492]	; (8007240 <HAL_RCC_OscConfig+0x26c>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a7a      	ldr	r2, [pc, #488]	; (8007240 <HAL_RCC_OscConfig+0x26c>)
 8007058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800705c:	6013      	str	r3, [r2, #0]
 800705e:	4b78      	ldr	r3, [pc, #480]	; (8007240 <HAL_RCC_OscConfig+0x26c>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a77      	ldr	r2, [pc, #476]	; (8007240 <HAL_RCC_OscConfig+0x26c>)
 8007064:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007068:	6013      	str	r3, [r2, #0]
 800706a:	e01d      	b.n	80070a8 <HAL_RCC_OscConfig+0xd4>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007074:	d10c      	bne.n	8007090 <HAL_RCC_OscConfig+0xbc>
 8007076:	4b72      	ldr	r3, [pc, #456]	; (8007240 <HAL_RCC_OscConfig+0x26c>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a71      	ldr	r2, [pc, #452]	; (8007240 <HAL_RCC_OscConfig+0x26c>)
 800707c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	4b6f      	ldr	r3, [pc, #444]	; (8007240 <HAL_RCC_OscConfig+0x26c>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a6e      	ldr	r2, [pc, #440]	; (8007240 <HAL_RCC_OscConfig+0x26c>)
 8007088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800708c:	6013      	str	r3, [r2, #0]
 800708e:	e00b      	b.n	80070a8 <HAL_RCC_OscConfig+0xd4>
 8007090:	4b6b      	ldr	r3, [pc, #428]	; (8007240 <HAL_RCC_OscConfig+0x26c>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a6a      	ldr	r2, [pc, #424]	; (8007240 <HAL_RCC_OscConfig+0x26c>)
 8007096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800709a:	6013      	str	r3, [r2, #0]
 800709c:	4b68      	ldr	r3, [pc, #416]	; (8007240 <HAL_RCC_OscConfig+0x26c>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a67      	ldr	r2, [pc, #412]	; (8007240 <HAL_RCC_OscConfig+0x26c>)
 80070a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d013      	beq.n	80070d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070b0:	f7fc fd58 	bl	8003b64 <HAL_GetTick>
 80070b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070b6:	e008      	b.n	80070ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070b8:	f7fc fd54 	bl	8003b64 <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	2b64      	cmp	r3, #100	; 0x64
 80070c4:	d901      	bls.n	80070ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e1fa      	b.n	80074c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070ca:	4b5d      	ldr	r3, [pc, #372]	; (8007240 <HAL_RCC_OscConfig+0x26c>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d0f0      	beq.n	80070b8 <HAL_RCC_OscConfig+0xe4>
 80070d6:	e014      	b.n	8007102 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070d8:	f7fc fd44 	bl	8003b64 <HAL_GetTick>
 80070dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070de:	e008      	b.n	80070f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070e0:	f7fc fd40 	bl	8003b64 <HAL_GetTick>
 80070e4:	4602      	mov	r2, r0
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	2b64      	cmp	r3, #100	; 0x64
 80070ec:	d901      	bls.n	80070f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e1e6      	b.n	80074c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070f2:	4b53      	ldr	r3, [pc, #332]	; (8007240 <HAL_RCC_OscConfig+0x26c>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1f0      	bne.n	80070e0 <HAL_RCC_OscConfig+0x10c>
 80070fe:	e000      	b.n	8007102 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0302 	and.w	r3, r3, #2
 800710a:	2b00      	cmp	r3, #0
 800710c:	d063      	beq.n	80071d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800710e:	4b4c      	ldr	r3, [pc, #304]	; (8007240 <HAL_RCC_OscConfig+0x26c>)
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f003 030c 	and.w	r3, r3, #12
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00b      	beq.n	8007132 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800711a:	4b49      	ldr	r3, [pc, #292]	; (8007240 <HAL_RCC_OscConfig+0x26c>)
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	f003 030c 	and.w	r3, r3, #12
 8007122:	2b08      	cmp	r3, #8
 8007124:	d11c      	bne.n	8007160 <HAL_RCC_OscConfig+0x18c>
 8007126:	4b46      	ldr	r3, [pc, #280]	; (8007240 <HAL_RCC_OscConfig+0x26c>)
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d116      	bne.n	8007160 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007132:	4b43      	ldr	r3, [pc, #268]	; (8007240 <HAL_RCC_OscConfig+0x26c>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 0302 	and.w	r3, r3, #2
 800713a:	2b00      	cmp	r3, #0
 800713c:	d005      	beq.n	800714a <HAL_RCC_OscConfig+0x176>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d001      	beq.n	800714a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e1ba      	b.n	80074c0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800714a:	4b3d      	ldr	r3, [pc, #244]	; (8007240 <HAL_RCC_OscConfig+0x26c>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	00db      	lsls	r3, r3, #3
 8007158:	4939      	ldr	r1, [pc, #228]	; (8007240 <HAL_RCC_OscConfig+0x26c>)
 800715a:	4313      	orrs	r3, r2
 800715c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800715e:	e03a      	b.n	80071d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d020      	beq.n	80071aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007168:	4b36      	ldr	r3, [pc, #216]	; (8007244 <HAL_RCC_OscConfig+0x270>)
 800716a:	2201      	movs	r2, #1
 800716c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800716e:	f7fc fcf9 	bl	8003b64 <HAL_GetTick>
 8007172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007174:	e008      	b.n	8007188 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007176:	f7fc fcf5 	bl	8003b64 <HAL_GetTick>
 800717a:	4602      	mov	r2, r0
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	2b02      	cmp	r3, #2
 8007182:	d901      	bls.n	8007188 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007184:	2303      	movs	r3, #3
 8007186:	e19b      	b.n	80074c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007188:	4b2d      	ldr	r3, [pc, #180]	; (8007240 <HAL_RCC_OscConfig+0x26c>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0302 	and.w	r3, r3, #2
 8007190:	2b00      	cmp	r3, #0
 8007192:	d0f0      	beq.n	8007176 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007194:	4b2a      	ldr	r3, [pc, #168]	; (8007240 <HAL_RCC_OscConfig+0x26c>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	695b      	ldr	r3, [r3, #20]
 80071a0:	00db      	lsls	r3, r3, #3
 80071a2:	4927      	ldr	r1, [pc, #156]	; (8007240 <HAL_RCC_OscConfig+0x26c>)
 80071a4:	4313      	orrs	r3, r2
 80071a6:	600b      	str	r3, [r1, #0]
 80071a8:	e015      	b.n	80071d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071aa:	4b26      	ldr	r3, [pc, #152]	; (8007244 <HAL_RCC_OscConfig+0x270>)
 80071ac:	2200      	movs	r2, #0
 80071ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071b0:	f7fc fcd8 	bl	8003b64 <HAL_GetTick>
 80071b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071b6:	e008      	b.n	80071ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071b8:	f7fc fcd4 	bl	8003b64 <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d901      	bls.n	80071ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e17a      	b.n	80074c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071ca:	4b1d      	ldr	r3, [pc, #116]	; (8007240 <HAL_RCC_OscConfig+0x26c>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0302 	and.w	r3, r3, #2
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1f0      	bne.n	80071b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 0308 	and.w	r3, r3, #8
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d03a      	beq.n	8007258 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d019      	beq.n	800721e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071ea:	4b17      	ldr	r3, [pc, #92]	; (8007248 <HAL_RCC_OscConfig+0x274>)
 80071ec:	2201      	movs	r2, #1
 80071ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071f0:	f7fc fcb8 	bl	8003b64 <HAL_GetTick>
 80071f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071f6:	e008      	b.n	800720a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071f8:	f7fc fcb4 	bl	8003b64 <HAL_GetTick>
 80071fc:	4602      	mov	r2, r0
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	2b02      	cmp	r3, #2
 8007204:	d901      	bls.n	800720a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e15a      	b.n	80074c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800720a:	4b0d      	ldr	r3, [pc, #52]	; (8007240 <HAL_RCC_OscConfig+0x26c>)
 800720c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720e:	f003 0302 	and.w	r3, r3, #2
 8007212:	2b00      	cmp	r3, #0
 8007214:	d0f0      	beq.n	80071f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007216:	2001      	movs	r0, #1
 8007218:	f000 facc 	bl	80077b4 <RCC_Delay>
 800721c:	e01c      	b.n	8007258 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800721e:	4b0a      	ldr	r3, [pc, #40]	; (8007248 <HAL_RCC_OscConfig+0x274>)
 8007220:	2200      	movs	r2, #0
 8007222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007224:	f7fc fc9e 	bl	8003b64 <HAL_GetTick>
 8007228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800722a:	e00f      	b.n	800724c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800722c:	f7fc fc9a 	bl	8003b64 <HAL_GetTick>
 8007230:	4602      	mov	r2, r0
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	2b02      	cmp	r3, #2
 8007238:	d908      	bls.n	800724c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800723a:	2303      	movs	r3, #3
 800723c:	e140      	b.n	80074c0 <HAL_RCC_OscConfig+0x4ec>
 800723e:	bf00      	nop
 8007240:	40021000 	.word	0x40021000
 8007244:	42420000 	.word	0x42420000
 8007248:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800724c:	4b9e      	ldr	r3, [pc, #632]	; (80074c8 <HAL_RCC_OscConfig+0x4f4>)
 800724e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	2b00      	cmp	r3, #0
 8007256:	d1e9      	bne.n	800722c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0304 	and.w	r3, r3, #4
 8007260:	2b00      	cmp	r3, #0
 8007262:	f000 80a6 	beq.w	80073b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007266:	2300      	movs	r3, #0
 8007268:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800726a:	4b97      	ldr	r3, [pc, #604]	; (80074c8 <HAL_RCC_OscConfig+0x4f4>)
 800726c:	69db      	ldr	r3, [r3, #28]
 800726e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10d      	bne.n	8007292 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007276:	4b94      	ldr	r3, [pc, #592]	; (80074c8 <HAL_RCC_OscConfig+0x4f4>)
 8007278:	69db      	ldr	r3, [r3, #28]
 800727a:	4a93      	ldr	r2, [pc, #588]	; (80074c8 <HAL_RCC_OscConfig+0x4f4>)
 800727c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007280:	61d3      	str	r3, [r2, #28]
 8007282:	4b91      	ldr	r3, [pc, #580]	; (80074c8 <HAL_RCC_OscConfig+0x4f4>)
 8007284:	69db      	ldr	r3, [r3, #28]
 8007286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800728a:	60bb      	str	r3, [r7, #8]
 800728c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800728e:	2301      	movs	r3, #1
 8007290:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007292:	4b8e      	ldr	r3, [pc, #568]	; (80074cc <HAL_RCC_OscConfig+0x4f8>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800729a:	2b00      	cmp	r3, #0
 800729c:	d118      	bne.n	80072d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800729e:	4b8b      	ldr	r3, [pc, #556]	; (80074cc <HAL_RCC_OscConfig+0x4f8>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a8a      	ldr	r2, [pc, #552]	; (80074cc <HAL_RCC_OscConfig+0x4f8>)
 80072a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072aa:	f7fc fc5b 	bl	8003b64 <HAL_GetTick>
 80072ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072b0:	e008      	b.n	80072c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072b2:	f7fc fc57 	bl	8003b64 <HAL_GetTick>
 80072b6:	4602      	mov	r2, r0
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	2b64      	cmp	r3, #100	; 0x64
 80072be:	d901      	bls.n	80072c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e0fd      	b.n	80074c0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072c4:	4b81      	ldr	r3, [pc, #516]	; (80074cc <HAL_RCC_OscConfig+0x4f8>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d0f0      	beq.n	80072b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d106      	bne.n	80072e6 <HAL_RCC_OscConfig+0x312>
 80072d8:	4b7b      	ldr	r3, [pc, #492]	; (80074c8 <HAL_RCC_OscConfig+0x4f4>)
 80072da:	6a1b      	ldr	r3, [r3, #32]
 80072dc:	4a7a      	ldr	r2, [pc, #488]	; (80074c8 <HAL_RCC_OscConfig+0x4f4>)
 80072de:	f043 0301 	orr.w	r3, r3, #1
 80072e2:	6213      	str	r3, [r2, #32]
 80072e4:	e02d      	b.n	8007342 <HAL_RCC_OscConfig+0x36e>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10c      	bne.n	8007308 <HAL_RCC_OscConfig+0x334>
 80072ee:	4b76      	ldr	r3, [pc, #472]	; (80074c8 <HAL_RCC_OscConfig+0x4f4>)
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	4a75      	ldr	r2, [pc, #468]	; (80074c8 <HAL_RCC_OscConfig+0x4f4>)
 80072f4:	f023 0301 	bic.w	r3, r3, #1
 80072f8:	6213      	str	r3, [r2, #32]
 80072fa:	4b73      	ldr	r3, [pc, #460]	; (80074c8 <HAL_RCC_OscConfig+0x4f4>)
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	4a72      	ldr	r2, [pc, #456]	; (80074c8 <HAL_RCC_OscConfig+0x4f4>)
 8007300:	f023 0304 	bic.w	r3, r3, #4
 8007304:	6213      	str	r3, [r2, #32]
 8007306:	e01c      	b.n	8007342 <HAL_RCC_OscConfig+0x36e>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	2b05      	cmp	r3, #5
 800730e:	d10c      	bne.n	800732a <HAL_RCC_OscConfig+0x356>
 8007310:	4b6d      	ldr	r3, [pc, #436]	; (80074c8 <HAL_RCC_OscConfig+0x4f4>)
 8007312:	6a1b      	ldr	r3, [r3, #32]
 8007314:	4a6c      	ldr	r2, [pc, #432]	; (80074c8 <HAL_RCC_OscConfig+0x4f4>)
 8007316:	f043 0304 	orr.w	r3, r3, #4
 800731a:	6213      	str	r3, [r2, #32]
 800731c:	4b6a      	ldr	r3, [pc, #424]	; (80074c8 <HAL_RCC_OscConfig+0x4f4>)
 800731e:	6a1b      	ldr	r3, [r3, #32]
 8007320:	4a69      	ldr	r2, [pc, #420]	; (80074c8 <HAL_RCC_OscConfig+0x4f4>)
 8007322:	f043 0301 	orr.w	r3, r3, #1
 8007326:	6213      	str	r3, [r2, #32]
 8007328:	e00b      	b.n	8007342 <HAL_RCC_OscConfig+0x36e>
 800732a:	4b67      	ldr	r3, [pc, #412]	; (80074c8 <HAL_RCC_OscConfig+0x4f4>)
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	4a66      	ldr	r2, [pc, #408]	; (80074c8 <HAL_RCC_OscConfig+0x4f4>)
 8007330:	f023 0301 	bic.w	r3, r3, #1
 8007334:	6213      	str	r3, [r2, #32]
 8007336:	4b64      	ldr	r3, [pc, #400]	; (80074c8 <HAL_RCC_OscConfig+0x4f4>)
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	4a63      	ldr	r2, [pc, #396]	; (80074c8 <HAL_RCC_OscConfig+0x4f4>)
 800733c:	f023 0304 	bic.w	r3, r3, #4
 8007340:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d015      	beq.n	8007376 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800734a:	f7fc fc0b 	bl	8003b64 <HAL_GetTick>
 800734e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007350:	e00a      	b.n	8007368 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007352:	f7fc fc07 	bl	8003b64 <HAL_GetTick>
 8007356:	4602      	mov	r2, r0
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007360:	4293      	cmp	r3, r2
 8007362:	d901      	bls.n	8007368 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	e0ab      	b.n	80074c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007368:	4b57      	ldr	r3, [pc, #348]	; (80074c8 <HAL_RCC_OscConfig+0x4f4>)
 800736a:	6a1b      	ldr	r3, [r3, #32]
 800736c:	f003 0302 	and.w	r3, r3, #2
 8007370:	2b00      	cmp	r3, #0
 8007372:	d0ee      	beq.n	8007352 <HAL_RCC_OscConfig+0x37e>
 8007374:	e014      	b.n	80073a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007376:	f7fc fbf5 	bl	8003b64 <HAL_GetTick>
 800737a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800737c:	e00a      	b.n	8007394 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800737e:	f7fc fbf1 	bl	8003b64 <HAL_GetTick>
 8007382:	4602      	mov	r2, r0
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	f241 3288 	movw	r2, #5000	; 0x1388
 800738c:	4293      	cmp	r3, r2
 800738e:	d901      	bls.n	8007394 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007390:	2303      	movs	r3, #3
 8007392:	e095      	b.n	80074c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007394:	4b4c      	ldr	r3, [pc, #304]	; (80074c8 <HAL_RCC_OscConfig+0x4f4>)
 8007396:	6a1b      	ldr	r3, [r3, #32]
 8007398:	f003 0302 	and.w	r3, r3, #2
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1ee      	bne.n	800737e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80073a0:	7dfb      	ldrb	r3, [r7, #23]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d105      	bne.n	80073b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073a6:	4b48      	ldr	r3, [pc, #288]	; (80074c8 <HAL_RCC_OscConfig+0x4f4>)
 80073a8:	69db      	ldr	r3, [r3, #28]
 80073aa:	4a47      	ldr	r2, [pc, #284]	; (80074c8 <HAL_RCC_OscConfig+0x4f4>)
 80073ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	69db      	ldr	r3, [r3, #28]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	f000 8081 	beq.w	80074be <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80073bc:	4b42      	ldr	r3, [pc, #264]	; (80074c8 <HAL_RCC_OscConfig+0x4f4>)
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	f003 030c 	and.w	r3, r3, #12
 80073c4:	2b08      	cmp	r3, #8
 80073c6:	d061      	beq.n	800748c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	69db      	ldr	r3, [r3, #28]
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d146      	bne.n	800745e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073d0:	4b3f      	ldr	r3, [pc, #252]	; (80074d0 <HAL_RCC_OscConfig+0x4fc>)
 80073d2:	2200      	movs	r2, #0
 80073d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073d6:	f7fc fbc5 	bl	8003b64 <HAL_GetTick>
 80073da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80073dc:	e008      	b.n	80073f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073de:	f7fc fbc1 	bl	8003b64 <HAL_GetTick>
 80073e2:	4602      	mov	r2, r0
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d901      	bls.n	80073f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80073ec:	2303      	movs	r3, #3
 80073ee:	e067      	b.n	80074c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80073f0:	4b35      	ldr	r3, [pc, #212]	; (80074c8 <HAL_RCC_OscConfig+0x4f4>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1f0      	bne.n	80073de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a1b      	ldr	r3, [r3, #32]
 8007400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007404:	d108      	bne.n	8007418 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007406:	4b30      	ldr	r3, [pc, #192]	; (80074c8 <HAL_RCC_OscConfig+0x4f4>)
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	492d      	ldr	r1, [pc, #180]	; (80074c8 <HAL_RCC_OscConfig+0x4f4>)
 8007414:	4313      	orrs	r3, r2
 8007416:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007418:	4b2b      	ldr	r3, [pc, #172]	; (80074c8 <HAL_RCC_OscConfig+0x4f4>)
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6a19      	ldr	r1, [r3, #32]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007428:	430b      	orrs	r3, r1
 800742a:	4927      	ldr	r1, [pc, #156]	; (80074c8 <HAL_RCC_OscConfig+0x4f4>)
 800742c:	4313      	orrs	r3, r2
 800742e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007430:	4b27      	ldr	r3, [pc, #156]	; (80074d0 <HAL_RCC_OscConfig+0x4fc>)
 8007432:	2201      	movs	r2, #1
 8007434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007436:	f7fc fb95 	bl	8003b64 <HAL_GetTick>
 800743a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800743c:	e008      	b.n	8007450 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800743e:	f7fc fb91 	bl	8003b64 <HAL_GetTick>
 8007442:	4602      	mov	r2, r0
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	2b02      	cmp	r3, #2
 800744a:	d901      	bls.n	8007450 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800744c:	2303      	movs	r3, #3
 800744e:	e037      	b.n	80074c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007450:	4b1d      	ldr	r3, [pc, #116]	; (80074c8 <HAL_RCC_OscConfig+0x4f4>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007458:	2b00      	cmp	r3, #0
 800745a:	d0f0      	beq.n	800743e <HAL_RCC_OscConfig+0x46a>
 800745c:	e02f      	b.n	80074be <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800745e:	4b1c      	ldr	r3, [pc, #112]	; (80074d0 <HAL_RCC_OscConfig+0x4fc>)
 8007460:	2200      	movs	r2, #0
 8007462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007464:	f7fc fb7e 	bl	8003b64 <HAL_GetTick>
 8007468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800746a:	e008      	b.n	800747e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800746c:	f7fc fb7a 	bl	8003b64 <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	2b02      	cmp	r3, #2
 8007478:	d901      	bls.n	800747e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e020      	b.n	80074c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800747e:	4b12      	ldr	r3, [pc, #72]	; (80074c8 <HAL_RCC_OscConfig+0x4f4>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1f0      	bne.n	800746c <HAL_RCC_OscConfig+0x498>
 800748a:	e018      	b.n	80074be <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	69db      	ldr	r3, [r3, #28]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d101      	bne.n	8007498 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	e013      	b.n	80074c0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007498:	4b0b      	ldr	r3, [pc, #44]	; (80074c8 <HAL_RCC_OscConfig+0x4f4>)
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a1b      	ldr	r3, [r3, #32]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d106      	bne.n	80074ba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d001      	beq.n	80074be <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e000      	b.n	80074c0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3718      	adds	r7, #24
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	40021000 	.word	0x40021000
 80074cc:	40007000 	.word	0x40007000
 80074d0:	42420060 	.word	0x42420060

080074d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d101      	bne.n	80074e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e0d0      	b.n	800768a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074e8:	4b6a      	ldr	r3, [pc, #424]	; (8007694 <HAL_RCC_ClockConfig+0x1c0>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0307 	and.w	r3, r3, #7
 80074f0:	683a      	ldr	r2, [r7, #0]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d910      	bls.n	8007518 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074f6:	4b67      	ldr	r3, [pc, #412]	; (8007694 <HAL_RCC_ClockConfig+0x1c0>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f023 0207 	bic.w	r2, r3, #7
 80074fe:	4965      	ldr	r1, [pc, #404]	; (8007694 <HAL_RCC_ClockConfig+0x1c0>)
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	4313      	orrs	r3, r2
 8007504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007506:	4b63      	ldr	r3, [pc, #396]	; (8007694 <HAL_RCC_ClockConfig+0x1c0>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 0307 	and.w	r3, r3, #7
 800750e:	683a      	ldr	r2, [r7, #0]
 8007510:	429a      	cmp	r2, r3
 8007512:	d001      	beq.n	8007518 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e0b8      	b.n	800768a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0302 	and.w	r3, r3, #2
 8007520:	2b00      	cmp	r3, #0
 8007522:	d020      	beq.n	8007566 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0304 	and.w	r3, r3, #4
 800752c:	2b00      	cmp	r3, #0
 800752e:	d005      	beq.n	800753c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007530:	4b59      	ldr	r3, [pc, #356]	; (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	4a58      	ldr	r2, [pc, #352]	; (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 8007536:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800753a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 0308 	and.w	r3, r3, #8
 8007544:	2b00      	cmp	r3, #0
 8007546:	d005      	beq.n	8007554 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007548:	4b53      	ldr	r3, [pc, #332]	; (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	4a52      	ldr	r2, [pc, #328]	; (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 800754e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007552:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007554:	4b50      	ldr	r3, [pc, #320]	; (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	494d      	ldr	r1, [pc, #308]	; (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 8007562:	4313      	orrs	r3, r2
 8007564:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 0301 	and.w	r3, r3, #1
 800756e:	2b00      	cmp	r3, #0
 8007570:	d040      	beq.n	80075f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	2b01      	cmp	r3, #1
 8007578:	d107      	bne.n	800758a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800757a:	4b47      	ldr	r3, [pc, #284]	; (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007582:	2b00      	cmp	r3, #0
 8007584:	d115      	bne.n	80075b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e07f      	b.n	800768a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	2b02      	cmp	r3, #2
 8007590:	d107      	bne.n	80075a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007592:	4b41      	ldr	r3, [pc, #260]	; (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d109      	bne.n	80075b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e073      	b.n	800768a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075a2:	4b3d      	ldr	r3, [pc, #244]	; (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0302 	and.w	r3, r3, #2
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d101      	bne.n	80075b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e06b      	b.n	800768a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075b2:	4b39      	ldr	r3, [pc, #228]	; (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	f023 0203 	bic.w	r2, r3, #3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	4936      	ldr	r1, [pc, #216]	; (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 80075c0:	4313      	orrs	r3, r2
 80075c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075c4:	f7fc face 	bl	8003b64 <HAL_GetTick>
 80075c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075ca:	e00a      	b.n	80075e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075cc:	f7fc faca 	bl	8003b64 <HAL_GetTick>
 80075d0:	4602      	mov	r2, r0
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80075da:	4293      	cmp	r3, r2
 80075dc:	d901      	bls.n	80075e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	e053      	b.n	800768a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075e2:	4b2d      	ldr	r3, [pc, #180]	; (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	f003 020c 	and.w	r2, r3, #12
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d1eb      	bne.n	80075cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80075f4:	4b27      	ldr	r3, [pc, #156]	; (8007694 <HAL_RCC_ClockConfig+0x1c0>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 0307 	and.w	r3, r3, #7
 80075fc:	683a      	ldr	r2, [r7, #0]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d210      	bcs.n	8007624 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007602:	4b24      	ldr	r3, [pc, #144]	; (8007694 <HAL_RCC_ClockConfig+0x1c0>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f023 0207 	bic.w	r2, r3, #7
 800760a:	4922      	ldr	r1, [pc, #136]	; (8007694 <HAL_RCC_ClockConfig+0x1c0>)
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	4313      	orrs	r3, r2
 8007610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007612:	4b20      	ldr	r3, [pc, #128]	; (8007694 <HAL_RCC_ClockConfig+0x1c0>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 0307 	and.w	r3, r3, #7
 800761a:	683a      	ldr	r2, [r7, #0]
 800761c:	429a      	cmp	r2, r3
 800761e:	d001      	beq.n	8007624 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e032      	b.n	800768a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 0304 	and.w	r3, r3, #4
 800762c:	2b00      	cmp	r3, #0
 800762e:	d008      	beq.n	8007642 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007630:	4b19      	ldr	r3, [pc, #100]	; (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	4916      	ldr	r1, [pc, #88]	; (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 800763e:	4313      	orrs	r3, r2
 8007640:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 0308 	and.w	r3, r3, #8
 800764a:	2b00      	cmp	r3, #0
 800764c:	d009      	beq.n	8007662 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800764e:	4b12      	ldr	r3, [pc, #72]	; (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	00db      	lsls	r3, r3, #3
 800765c:	490e      	ldr	r1, [pc, #56]	; (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 800765e:	4313      	orrs	r3, r2
 8007660:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007662:	f000 f821 	bl	80076a8 <HAL_RCC_GetSysClockFreq>
 8007666:	4602      	mov	r2, r0
 8007668:	4b0b      	ldr	r3, [pc, #44]	; (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	091b      	lsrs	r3, r3, #4
 800766e:	f003 030f 	and.w	r3, r3, #15
 8007672:	490a      	ldr	r1, [pc, #40]	; (800769c <HAL_RCC_ClockConfig+0x1c8>)
 8007674:	5ccb      	ldrb	r3, [r1, r3]
 8007676:	fa22 f303 	lsr.w	r3, r2, r3
 800767a:	4a09      	ldr	r2, [pc, #36]	; (80076a0 <HAL_RCC_ClockConfig+0x1cc>)
 800767c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800767e:	4b09      	ldr	r3, [pc, #36]	; (80076a4 <HAL_RCC_ClockConfig+0x1d0>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4618      	mov	r0, r3
 8007684:	f7fc fa2c 	bl	8003ae0 <HAL_InitTick>

  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	40022000 	.word	0x40022000
 8007698:	40021000 	.word	0x40021000
 800769c:	0800f178 	.word	0x0800f178
 80076a0:	20000008 	.word	0x20000008
 80076a4:	2000000c 	.word	0x2000000c

080076a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b087      	sub	sp, #28
 80076ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80076ae:	2300      	movs	r3, #0
 80076b0:	60fb      	str	r3, [r7, #12]
 80076b2:	2300      	movs	r3, #0
 80076b4:	60bb      	str	r3, [r7, #8]
 80076b6:	2300      	movs	r3, #0
 80076b8:	617b      	str	r3, [r7, #20]
 80076ba:	2300      	movs	r3, #0
 80076bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80076be:	2300      	movs	r3, #0
 80076c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80076c2:	4b1e      	ldr	r3, [pc, #120]	; (800773c <HAL_RCC_GetSysClockFreq+0x94>)
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f003 030c 	and.w	r3, r3, #12
 80076ce:	2b04      	cmp	r3, #4
 80076d0:	d002      	beq.n	80076d8 <HAL_RCC_GetSysClockFreq+0x30>
 80076d2:	2b08      	cmp	r3, #8
 80076d4:	d003      	beq.n	80076de <HAL_RCC_GetSysClockFreq+0x36>
 80076d6:	e027      	b.n	8007728 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80076d8:	4b19      	ldr	r3, [pc, #100]	; (8007740 <HAL_RCC_GetSysClockFreq+0x98>)
 80076da:	613b      	str	r3, [r7, #16]
      break;
 80076dc:	e027      	b.n	800772e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	0c9b      	lsrs	r3, r3, #18
 80076e2:	f003 030f 	and.w	r3, r3, #15
 80076e6:	4a17      	ldr	r2, [pc, #92]	; (8007744 <HAL_RCC_GetSysClockFreq+0x9c>)
 80076e8:	5cd3      	ldrb	r3, [r2, r3]
 80076ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d010      	beq.n	8007718 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80076f6:	4b11      	ldr	r3, [pc, #68]	; (800773c <HAL_RCC_GetSysClockFreq+0x94>)
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	0c5b      	lsrs	r3, r3, #17
 80076fc:	f003 0301 	and.w	r3, r3, #1
 8007700:	4a11      	ldr	r2, [pc, #68]	; (8007748 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007702:	5cd3      	ldrb	r3, [r2, r3]
 8007704:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a0d      	ldr	r2, [pc, #52]	; (8007740 <HAL_RCC_GetSysClockFreq+0x98>)
 800770a:	fb02 f203 	mul.w	r2, r2, r3
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	fbb2 f3f3 	udiv	r3, r2, r3
 8007714:	617b      	str	r3, [r7, #20]
 8007716:	e004      	b.n	8007722 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a0c      	ldr	r2, [pc, #48]	; (800774c <HAL_RCC_GetSysClockFreq+0xa4>)
 800771c:	fb02 f303 	mul.w	r3, r2, r3
 8007720:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	613b      	str	r3, [r7, #16]
      break;
 8007726:	e002      	b.n	800772e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007728:	4b05      	ldr	r3, [pc, #20]	; (8007740 <HAL_RCC_GetSysClockFreq+0x98>)
 800772a:	613b      	str	r3, [r7, #16]
      break;
 800772c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800772e:	693b      	ldr	r3, [r7, #16]
}
 8007730:	4618      	mov	r0, r3
 8007732:	371c      	adds	r7, #28
 8007734:	46bd      	mov	sp, r7
 8007736:	bc80      	pop	{r7}
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	40021000 	.word	0x40021000
 8007740:	007a1200 	.word	0x007a1200
 8007744:	0800f190 	.word	0x0800f190
 8007748:	0800f1a0 	.word	0x0800f1a0
 800774c:	003d0900 	.word	0x003d0900

08007750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007750:	b480      	push	{r7}
 8007752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007754:	4b02      	ldr	r3, [pc, #8]	; (8007760 <HAL_RCC_GetHCLKFreq+0x10>)
 8007756:	681b      	ldr	r3, [r3, #0]
}
 8007758:	4618      	mov	r0, r3
 800775a:	46bd      	mov	sp, r7
 800775c:	bc80      	pop	{r7}
 800775e:	4770      	bx	lr
 8007760:	20000008 	.word	0x20000008

08007764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007768:	f7ff fff2 	bl	8007750 <HAL_RCC_GetHCLKFreq>
 800776c:	4602      	mov	r2, r0
 800776e:	4b05      	ldr	r3, [pc, #20]	; (8007784 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	0a1b      	lsrs	r3, r3, #8
 8007774:	f003 0307 	and.w	r3, r3, #7
 8007778:	4903      	ldr	r1, [pc, #12]	; (8007788 <HAL_RCC_GetPCLK1Freq+0x24>)
 800777a:	5ccb      	ldrb	r3, [r1, r3]
 800777c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007780:	4618      	mov	r0, r3
 8007782:	bd80      	pop	{r7, pc}
 8007784:	40021000 	.word	0x40021000
 8007788:	0800f188 	.word	0x0800f188

0800778c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007790:	f7ff ffde 	bl	8007750 <HAL_RCC_GetHCLKFreq>
 8007794:	4602      	mov	r2, r0
 8007796:	4b05      	ldr	r3, [pc, #20]	; (80077ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	0adb      	lsrs	r3, r3, #11
 800779c:	f003 0307 	and.w	r3, r3, #7
 80077a0:	4903      	ldr	r1, [pc, #12]	; (80077b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80077a2:	5ccb      	ldrb	r3, [r1, r3]
 80077a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	40021000 	.word	0x40021000
 80077b0:	0800f188 	.word	0x0800f188

080077b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80077bc:	4b0a      	ldr	r3, [pc, #40]	; (80077e8 <RCC_Delay+0x34>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a0a      	ldr	r2, [pc, #40]	; (80077ec <RCC_Delay+0x38>)
 80077c2:	fba2 2303 	umull	r2, r3, r2, r3
 80077c6:	0a5b      	lsrs	r3, r3, #9
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	fb02 f303 	mul.w	r3, r2, r3
 80077ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80077d0:	bf00      	nop
  }
  while (Delay --);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	1e5a      	subs	r2, r3, #1
 80077d6:	60fa      	str	r2, [r7, #12]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1f9      	bne.n	80077d0 <RCC_Delay+0x1c>
}
 80077dc:	bf00      	nop
 80077de:	bf00      	nop
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bc80      	pop	{r7}
 80077e6:	4770      	bx	lr
 80077e8:	20000008 	.word	0x20000008
 80077ec:	10624dd3 	.word	0x10624dd3

080077f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80077f8:	2300      	movs	r3, #0
 80077fa:	613b      	str	r3, [r7, #16]
 80077fc:	2300      	movs	r3, #0
 80077fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0301 	and.w	r3, r3, #1
 8007808:	2b00      	cmp	r3, #0
 800780a:	d07d      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800780c:	2300      	movs	r3, #0
 800780e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007810:	4b4f      	ldr	r3, [pc, #316]	; (8007950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007812:	69db      	ldr	r3, [r3, #28]
 8007814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10d      	bne.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800781c:	4b4c      	ldr	r3, [pc, #304]	; (8007950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800781e:	69db      	ldr	r3, [r3, #28]
 8007820:	4a4b      	ldr	r2, [pc, #300]	; (8007950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007826:	61d3      	str	r3, [r2, #28]
 8007828:	4b49      	ldr	r3, [pc, #292]	; (8007950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800782a:	69db      	ldr	r3, [r3, #28]
 800782c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007830:	60bb      	str	r3, [r7, #8]
 8007832:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007834:	2301      	movs	r3, #1
 8007836:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007838:	4b46      	ldr	r3, [pc, #280]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007840:	2b00      	cmp	r3, #0
 8007842:	d118      	bne.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007844:	4b43      	ldr	r3, [pc, #268]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a42      	ldr	r2, [pc, #264]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800784a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800784e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007850:	f7fc f988 	bl	8003b64 <HAL_GetTick>
 8007854:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007856:	e008      	b.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007858:	f7fc f984 	bl	8003b64 <HAL_GetTick>
 800785c:	4602      	mov	r2, r0
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	2b64      	cmp	r3, #100	; 0x64
 8007864:	d901      	bls.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007866:	2303      	movs	r3, #3
 8007868:	e06d      	b.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800786a:	4b3a      	ldr	r3, [pc, #232]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007872:	2b00      	cmp	r3, #0
 8007874:	d0f0      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007876:	4b36      	ldr	r3, [pc, #216]	; (8007950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800787e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d02e      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	429a      	cmp	r2, r3
 8007892:	d027      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007894:	4b2e      	ldr	r3, [pc, #184]	; (8007950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007896:	6a1b      	ldr	r3, [r3, #32]
 8007898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800789c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800789e:	4b2e      	ldr	r3, [pc, #184]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80078a0:	2201      	movs	r2, #1
 80078a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80078a4:	4b2c      	ldr	r3, [pc, #176]	; (8007958 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80078aa:	4a29      	ldr	r2, [pc, #164]	; (8007950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f003 0301 	and.w	r3, r3, #1
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d014      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078ba:	f7fc f953 	bl	8003b64 <HAL_GetTick>
 80078be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078c0:	e00a      	b.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078c2:	f7fc f94f 	bl	8003b64 <HAL_GetTick>
 80078c6:	4602      	mov	r2, r0
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d901      	bls.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80078d4:	2303      	movs	r3, #3
 80078d6:	e036      	b.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078d8:	4b1d      	ldr	r3, [pc, #116]	; (8007950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078da:	6a1b      	ldr	r3, [r3, #32]
 80078dc:	f003 0302 	and.w	r3, r3, #2
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d0ee      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80078e4:	4b1a      	ldr	r3, [pc, #104]	; (8007950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078e6:	6a1b      	ldr	r3, [r3, #32]
 80078e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	4917      	ldr	r1, [pc, #92]	; (8007950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078f2:	4313      	orrs	r3, r2
 80078f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80078f6:	7dfb      	ldrb	r3, [r7, #23]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d105      	bne.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078fc:	4b14      	ldr	r3, [pc, #80]	; (8007950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078fe:	69db      	ldr	r3, [r3, #28]
 8007900:	4a13      	ldr	r2, [pc, #76]	; (8007950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007902:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007906:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 0302 	and.w	r3, r3, #2
 8007910:	2b00      	cmp	r3, #0
 8007912:	d008      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007914:	4b0e      	ldr	r3, [pc, #56]	; (8007950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	490b      	ldr	r1, [pc, #44]	; (8007950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007922:	4313      	orrs	r3, r2
 8007924:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f003 0310 	and.w	r3, r3, #16
 800792e:	2b00      	cmp	r3, #0
 8007930:	d008      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007932:	4b07      	ldr	r3, [pc, #28]	; (8007950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	4904      	ldr	r1, [pc, #16]	; (8007950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007940:	4313      	orrs	r3, r2
 8007942:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3718      	adds	r7, #24
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	40021000 	.word	0x40021000
 8007954:	40007000 	.word	0x40007000
 8007958:	42420440 	.word	0x42420440

0800795c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e041      	b.n	80079f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d106      	bne.n	8007988 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f7fb fe90 	bl	80036a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2202      	movs	r2, #2
 800798c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	3304      	adds	r3, #4
 8007998:	4619      	mov	r1, r3
 800799a:	4610      	mov	r0, r2
 800799c:	f000 f992 	bl	8007cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
	...

080079fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d109      	bne.n	8007a20 <HAL_TIM_PWM_Start+0x24>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	bf14      	ite	ne
 8007a18:	2301      	movne	r3, #1
 8007a1a:	2300      	moveq	r3, #0
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	e022      	b.n	8007a66 <HAL_TIM_PWM_Start+0x6a>
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	2b04      	cmp	r3, #4
 8007a24:	d109      	bne.n	8007a3a <HAL_TIM_PWM_Start+0x3e>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	bf14      	ite	ne
 8007a32:	2301      	movne	r3, #1
 8007a34:	2300      	moveq	r3, #0
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	e015      	b.n	8007a66 <HAL_TIM_PWM_Start+0x6a>
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	2b08      	cmp	r3, #8
 8007a3e:	d109      	bne.n	8007a54 <HAL_TIM_PWM_Start+0x58>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	bf14      	ite	ne
 8007a4c:	2301      	movne	r3, #1
 8007a4e:	2300      	moveq	r3, #0
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	e008      	b.n	8007a66 <HAL_TIM_PWM_Start+0x6a>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	bf14      	ite	ne
 8007a60:	2301      	movne	r3, #1
 8007a62:	2300      	moveq	r3, #0
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d001      	beq.n	8007a6e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e05e      	b.n	8007b2c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d104      	bne.n	8007a7e <HAL_TIM_PWM_Start+0x82>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2202      	movs	r2, #2
 8007a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a7c:	e013      	b.n	8007aa6 <HAL_TIM_PWM_Start+0xaa>
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	2b04      	cmp	r3, #4
 8007a82:	d104      	bne.n	8007a8e <HAL_TIM_PWM_Start+0x92>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2202      	movs	r2, #2
 8007a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a8c:	e00b      	b.n	8007aa6 <HAL_TIM_PWM_Start+0xaa>
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	2b08      	cmp	r3, #8
 8007a92:	d104      	bne.n	8007a9e <HAL_TIM_PWM_Start+0xa2>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2202      	movs	r2, #2
 8007a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a9c:	e003      	b.n	8007aa6 <HAL_TIM_PWM_Start+0xaa>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2202      	movs	r2, #2
 8007aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	6839      	ldr	r1, [r7, #0]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f000 fafe 	bl	80080b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a1e      	ldr	r2, [pc, #120]	; (8007b34 <HAL_TIM_PWM_Start+0x138>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d107      	bne.n	8007ace <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007acc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a18      	ldr	r2, [pc, #96]	; (8007b34 <HAL_TIM_PWM_Start+0x138>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d00e      	beq.n	8007af6 <HAL_TIM_PWM_Start+0xfa>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ae0:	d009      	beq.n	8007af6 <HAL_TIM_PWM_Start+0xfa>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a14      	ldr	r2, [pc, #80]	; (8007b38 <HAL_TIM_PWM_Start+0x13c>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d004      	beq.n	8007af6 <HAL_TIM_PWM_Start+0xfa>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a12      	ldr	r2, [pc, #72]	; (8007b3c <HAL_TIM_PWM_Start+0x140>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d111      	bne.n	8007b1a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	f003 0307 	and.w	r3, r3, #7
 8007b00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2b06      	cmp	r3, #6
 8007b06:	d010      	beq.n	8007b2a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f042 0201 	orr.w	r2, r2, #1
 8007b16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b18:	e007      	b.n	8007b2a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f042 0201 	orr.w	r2, r2, #1
 8007b28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	40012c00 	.word	0x40012c00
 8007b38:	40000400 	.word	0x40000400
 8007b3c:	40000800 	.word	0x40000800

08007b40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d101      	bne.n	8007b5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	e0ae      	b.n	8007cbc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2201      	movs	r2, #1
 8007b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2b0c      	cmp	r3, #12
 8007b6a:	f200 809f 	bhi.w	8007cac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007b6e:	a201      	add	r2, pc, #4	; (adr r2, 8007b74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b74:	08007ba9 	.word	0x08007ba9
 8007b78:	08007cad 	.word	0x08007cad
 8007b7c:	08007cad 	.word	0x08007cad
 8007b80:	08007cad 	.word	0x08007cad
 8007b84:	08007be9 	.word	0x08007be9
 8007b88:	08007cad 	.word	0x08007cad
 8007b8c:	08007cad 	.word	0x08007cad
 8007b90:	08007cad 	.word	0x08007cad
 8007b94:	08007c2b 	.word	0x08007c2b
 8007b98:	08007cad 	.word	0x08007cad
 8007b9c:	08007cad 	.word	0x08007cad
 8007ba0:	08007cad 	.word	0x08007cad
 8007ba4:	08007c6b 	.word	0x08007c6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68b9      	ldr	r1, [r7, #8]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f000 f8f6 	bl	8007da0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	699a      	ldr	r2, [r3, #24]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f042 0208 	orr.w	r2, r2, #8
 8007bc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	699a      	ldr	r2, [r3, #24]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f022 0204 	bic.w	r2, r2, #4
 8007bd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6999      	ldr	r1, [r3, #24]
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	691a      	ldr	r2, [r3, #16]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	430a      	orrs	r2, r1
 8007be4:	619a      	str	r2, [r3, #24]
      break;
 8007be6:	e064      	b.n	8007cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68b9      	ldr	r1, [r7, #8]
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f000 f93c 	bl	8007e6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	699a      	ldr	r2, [r3, #24]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	699a      	ldr	r2, [r3, #24]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	6999      	ldr	r1, [r3, #24]
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	021a      	lsls	r2, r3, #8
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	430a      	orrs	r2, r1
 8007c26:	619a      	str	r2, [r3, #24]
      break;
 8007c28:	e043      	b.n	8007cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68b9      	ldr	r1, [r7, #8]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f000 f985 	bl	8007f40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	69da      	ldr	r2, [r3, #28]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f042 0208 	orr.w	r2, r2, #8
 8007c44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	69da      	ldr	r2, [r3, #28]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f022 0204 	bic.w	r2, r2, #4
 8007c54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	69d9      	ldr	r1, [r3, #28]
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	691a      	ldr	r2, [r3, #16]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	430a      	orrs	r2, r1
 8007c66:	61da      	str	r2, [r3, #28]
      break;
 8007c68:	e023      	b.n	8007cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68b9      	ldr	r1, [r7, #8]
 8007c70:	4618      	mov	r0, r3
 8007c72:	f000 f9cf 	bl	8008014 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	69da      	ldr	r2, [r3, #28]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	69da      	ldr	r2, [r3, #28]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	69d9      	ldr	r1, [r3, #28]
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	021a      	lsls	r2, r3, #8
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	430a      	orrs	r2, r1
 8007ca8:	61da      	str	r2, [r3, #28]
      break;
 8007caa:	e002      	b.n	8007cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	75fb      	strb	r3, [r7, #23]
      break;
 8007cb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3718      	adds	r7, #24
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4a2f      	ldr	r2, [pc, #188]	; (8007d94 <TIM_Base_SetConfig+0xd0>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d00b      	beq.n	8007cf4 <TIM_Base_SetConfig+0x30>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ce2:	d007      	beq.n	8007cf4 <TIM_Base_SetConfig+0x30>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a2c      	ldr	r2, [pc, #176]	; (8007d98 <TIM_Base_SetConfig+0xd4>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d003      	beq.n	8007cf4 <TIM_Base_SetConfig+0x30>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4a2b      	ldr	r2, [pc, #172]	; (8007d9c <TIM_Base_SetConfig+0xd8>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d108      	bne.n	8007d06 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a22      	ldr	r2, [pc, #136]	; (8007d94 <TIM_Base_SetConfig+0xd0>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d00b      	beq.n	8007d26 <TIM_Base_SetConfig+0x62>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d14:	d007      	beq.n	8007d26 <TIM_Base_SetConfig+0x62>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	4a1f      	ldr	r2, [pc, #124]	; (8007d98 <TIM_Base_SetConfig+0xd4>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d003      	beq.n	8007d26 <TIM_Base_SetConfig+0x62>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4a1e      	ldr	r2, [pc, #120]	; (8007d9c <TIM_Base_SetConfig+0xd8>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d108      	bne.n	8007d38 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	695b      	ldr	r3, [r3, #20]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	689a      	ldr	r2, [r3, #8]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a0d      	ldr	r2, [pc, #52]	; (8007d94 <TIM_Base_SetConfig+0xd0>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d103      	bne.n	8007d6c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	691a      	ldr	r2, [r3, #16]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	f003 0301 	and.w	r3, r3, #1
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d005      	beq.n	8007d8a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	f023 0201 	bic.w	r2, r3, #1
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	611a      	str	r2, [r3, #16]
  }
}
 8007d8a:	bf00      	nop
 8007d8c:	3714      	adds	r7, #20
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bc80      	pop	{r7}
 8007d92:	4770      	bx	lr
 8007d94:	40012c00 	.word	0x40012c00
 8007d98:	40000400 	.word	0x40000400
 8007d9c:	40000800 	.word	0x40000800

08007da0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b087      	sub	sp, #28
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a1b      	ldr	r3, [r3, #32]
 8007dae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a1b      	ldr	r3, [r3, #32]
 8007db4:	f023 0201 	bic.w	r2, r3, #1
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	699b      	ldr	r3, [r3, #24]
 8007dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f023 0303 	bic.w	r3, r3, #3
 8007dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	f023 0302 	bic.w	r3, r3, #2
 8007de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a1c      	ldr	r2, [pc, #112]	; (8007e68 <TIM_OC1_SetConfig+0xc8>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d10c      	bne.n	8007e16 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	f023 0308 	bic.w	r3, r3, #8
 8007e02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	f023 0304 	bic.w	r3, r3, #4
 8007e14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a13      	ldr	r2, [pc, #76]	; (8007e68 <TIM_OC1_SetConfig+0xc8>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d111      	bne.n	8007e42 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	693a      	ldr	r2, [r7, #16]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	699b      	ldr	r3, [r3, #24]
 8007e3c:	693a      	ldr	r2, [r7, #16]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	693a      	ldr	r2, [r7, #16]
 8007e46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	685a      	ldr	r2, [r3, #4]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	697a      	ldr	r2, [r7, #20]
 8007e5a:	621a      	str	r2, [r3, #32]
}
 8007e5c:	bf00      	nop
 8007e5e:	371c      	adds	r7, #28
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bc80      	pop	{r7}
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	40012c00 	.word	0x40012c00

08007e6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b087      	sub	sp, #28
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a1b      	ldr	r3, [r3, #32]
 8007e7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a1b      	ldr	r3, [r3, #32]
 8007e80:	f023 0210 	bic.w	r2, r3, #16
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ea2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	021b      	lsls	r3, r3, #8
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	f023 0320 	bic.w	r3, r3, #32
 8007eb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	011b      	lsls	r3, r3, #4
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a1d      	ldr	r2, [pc, #116]	; (8007f3c <TIM_OC2_SetConfig+0xd0>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d10d      	bne.n	8007ee8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ed2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	011b      	lsls	r3, r3, #4
 8007eda:	697a      	ldr	r2, [r7, #20]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ee6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a14      	ldr	r2, [pc, #80]	; (8007f3c <TIM_OC2_SetConfig+0xd0>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d113      	bne.n	8007f18 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ef6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007efe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	695b      	ldr	r3, [r3, #20]
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	699b      	ldr	r3, [r3, #24]
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	693a      	ldr	r2, [r7, #16]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	693a      	ldr	r2, [r7, #16]
 8007f1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	685a      	ldr	r2, [r3, #4]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	697a      	ldr	r2, [r7, #20]
 8007f30:	621a      	str	r2, [r3, #32]
}
 8007f32:	bf00      	nop
 8007f34:	371c      	adds	r7, #28
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bc80      	pop	{r7}
 8007f3a:	4770      	bx	lr
 8007f3c:	40012c00 	.word	0x40012c00

08007f40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b087      	sub	sp, #28
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a1b      	ldr	r3, [r3, #32]
 8007f4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a1b      	ldr	r3, [r3, #32]
 8007f54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	69db      	ldr	r3, [r3, #28]
 8007f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f023 0303 	bic.w	r3, r3, #3
 8007f76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	021b      	lsls	r3, r3, #8
 8007f90:	697a      	ldr	r2, [r7, #20]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a1d      	ldr	r2, [pc, #116]	; (8008010 <TIM_OC3_SetConfig+0xd0>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d10d      	bne.n	8007fba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007fa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	021b      	lsls	r3, r3, #8
 8007fac:	697a      	ldr	r2, [r7, #20]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007fb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a14      	ldr	r2, [pc, #80]	; (8008010 <TIM_OC3_SetConfig+0xd0>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d113      	bne.n	8007fea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	695b      	ldr	r3, [r3, #20]
 8007fd6:	011b      	lsls	r3, r3, #4
 8007fd8:	693a      	ldr	r2, [r7, #16]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	011b      	lsls	r3, r3, #4
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	685a      	ldr	r2, [r3, #4]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	697a      	ldr	r2, [r7, #20]
 8008002:	621a      	str	r2, [r3, #32]
}
 8008004:	bf00      	nop
 8008006:	371c      	adds	r7, #28
 8008008:	46bd      	mov	sp, r7
 800800a:	bc80      	pop	{r7}
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	40012c00 	.word	0x40012c00

08008014 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008014:	b480      	push	{r7}
 8008016:	b087      	sub	sp, #28
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a1b      	ldr	r3, [r3, #32]
 8008022:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a1b      	ldr	r3, [r3, #32]
 8008028:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	69db      	ldr	r3, [r3, #28]
 800803a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800804a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	021b      	lsls	r3, r3, #8
 8008052:	68fa      	ldr	r2, [r7, #12]
 8008054:	4313      	orrs	r3, r2
 8008056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800805e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	031b      	lsls	r3, r3, #12
 8008066:	693a      	ldr	r2, [r7, #16]
 8008068:	4313      	orrs	r3, r2
 800806a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a0f      	ldr	r2, [pc, #60]	; (80080ac <TIM_OC4_SetConfig+0x98>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d109      	bne.n	8008088 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800807a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	695b      	ldr	r3, [r3, #20]
 8008080:	019b      	lsls	r3, r3, #6
 8008082:	697a      	ldr	r2, [r7, #20]
 8008084:	4313      	orrs	r3, r2
 8008086:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	697a      	ldr	r2, [r7, #20]
 800808c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	685a      	ldr	r2, [r3, #4]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	693a      	ldr	r2, [r7, #16]
 80080a0:	621a      	str	r2, [r3, #32]
}
 80080a2:	bf00      	nop
 80080a4:	371c      	adds	r7, #28
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bc80      	pop	{r7}
 80080aa:	4770      	bx	lr
 80080ac:	40012c00 	.word	0x40012c00

080080b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b087      	sub	sp, #28
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	f003 031f 	and.w	r3, r3, #31
 80080c2:	2201      	movs	r2, #1
 80080c4:	fa02 f303 	lsl.w	r3, r2, r3
 80080c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6a1a      	ldr	r2, [r3, #32]
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	43db      	mvns	r3, r3
 80080d2:	401a      	ands	r2, r3
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6a1a      	ldr	r2, [r3, #32]
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	f003 031f 	and.w	r3, r3, #31
 80080e2:	6879      	ldr	r1, [r7, #4]
 80080e4:	fa01 f303 	lsl.w	r3, r1, r3
 80080e8:	431a      	orrs	r2, r3
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	621a      	str	r2, [r3, #32]
}
 80080ee:	bf00      	nop
 80080f0:	371c      	adds	r7, #28
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bc80      	pop	{r7}
 80080f6:	4770      	bx	lr

080080f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008108:	2b01      	cmp	r3, #1
 800810a:	d101      	bne.n	8008110 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800810c:	2302      	movs	r3, #2
 800810e:	e046      	b.n	800819e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2202      	movs	r2, #2
 800811c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008136:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	4313      	orrs	r3, r2
 8008140:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a16      	ldr	r2, [pc, #88]	; (80081a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d00e      	beq.n	8008172 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800815c:	d009      	beq.n	8008172 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a12      	ldr	r2, [pc, #72]	; (80081ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d004      	beq.n	8008172 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a10      	ldr	r2, [pc, #64]	; (80081b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d10c      	bne.n	800818c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008178:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	4313      	orrs	r3, r2
 8008182:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68ba      	ldr	r2, [r7, #8]
 800818a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3714      	adds	r7, #20
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bc80      	pop	{r7}
 80081a6:	4770      	bx	lr
 80081a8:	40012c00 	.word	0x40012c00
 80081ac:	40000400 	.word	0x40000400
 80081b0:	40000800 	.word	0x40000800

080081b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b085      	sub	sp, #20
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80081be:	2300      	movs	r3, #0
 80081c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d101      	bne.n	80081d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80081cc:	2302      	movs	r3, #2
 80081ce:	e03d      	b.n	800824c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	4313      	orrs	r3, r2
 80081f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	4313      	orrs	r3, r2
 8008200:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4313      	orrs	r3, r2
 800820e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	4313      	orrs	r3, r2
 800821c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	695b      	ldr	r3, [r3, #20]
 8008228:	4313      	orrs	r3, r2
 800822a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	69db      	ldr	r3, [r3, #28]
 8008236:	4313      	orrs	r3, r2
 8008238:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68fa      	ldr	r2, [r7, #12]
 8008240:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3714      	adds	r7, #20
 8008250:	46bd      	mov	sp, r7
 8008252:	bc80      	pop	{r7}
 8008254:	4770      	bx	lr

08008256 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b082      	sub	sp, #8
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d101      	bne.n	8008268 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	e042      	b.n	80082ee <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800826e:	b2db      	uxtb	r3, r3
 8008270:	2b00      	cmp	r3, #0
 8008272:	d106      	bne.n	8008282 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f7fb fab3 	bl	80037e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2224      	movs	r2, #36	; 0x24
 8008286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68da      	ldr	r2, [r3, #12]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008298:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 f972 	bl	8008584 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	691a      	ldr	r2, [r3, #16]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082ae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	695a      	ldr	r2, [r3, #20]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082be:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68da      	ldr	r2, [r3, #12]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80082ce:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2220      	movs	r2, #32
 80082da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2220      	movs	r2, #32
 80082e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3708      	adds	r7, #8
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b08a      	sub	sp, #40	; 0x28
 80082fa:	af02      	add	r7, sp, #8
 80082fc:	60f8      	str	r0, [r7, #12]
 80082fe:	60b9      	str	r1, [r7, #8]
 8008300:	603b      	str	r3, [r7, #0]
 8008302:	4613      	mov	r3, r2
 8008304:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008306:	2300      	movs	r3, #0
 8008308:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008310:	b2db      	uxtb	r3, r3
 8008312:	2b20      	cmp	r3, #32
 8008314:	d175      	bne.n	8008402 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d002      	beq.n	8008322 <HAL_UART_Transmit+0x2c>
 800831c:	88fb      	ldrh	r3, [r7, #6]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e06e      	b.n	8008404 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2221      	movs	r2, #33	; 0x21
 8008330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008334:	f7fb fc16 	bl	8003b64 <HAL_GetTick>
 8008338:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	88fa      	ldrh	r2, [r7, #6]
 800833e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	88fa      	ldrh	r2, [r7, #6]
 8008344:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800834e:	d108      	bne.n	8008362 <HAL_UART_Transmit+0x6c>
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d104      	bne.n	8008362 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008358:	2300      	movs	r3, #0
 800835a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	61bb      	str	r3, [r7, #24]
 8008360:	e003      	b.n	800836a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008366:	2300      	movs	r3, #0
 8008368:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800836a:	e02e      	b.n	80083ca <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	2200      	movs	r2, #0
 8008374:	2180      	movs	r1, #128	; 0x80
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f000 f848 	bl	800840c <UART_WaitOnFlagUntilTimeout>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d005      	beq.n	800838e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2220      	movs	r2, #32
 8008386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800838a:	2303      	movs	r3, #3
 800838c:	e03a      	b.n	8008404 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d10b      	bne.n	80083ac <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	881b      	ldrh	r3, [r3, #0]
 8008398:	461a      	mov	r2, r3
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083a2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	3302      	adds	r3, #2
 80083a8:	61bb      	str	r3, [r7, #24]
 80083aa:	e007      	b.n	80083bc <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	781a      	ldrb	r2, [r3, #0]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	3301      	adds	r3, #1
 80083ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	3b01      	subs	r3, #1
 80083c4:	b29a      	uxth	r2, r3
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d1cb      	bne.n	800836c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	9300      	str	r3, [sp, #0]
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	2200      	movs	r2, #0
 80083dc:	2140      	movs	r1, #64	; 0x40
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f000 f814 	bl	800840c <UART_WaitOnFlagUntilTimeout>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d005      	beq.n	80083f6 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2220      	movs	r2, #32
 80083ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80083f2:	2303      	movs	r3, #3
 80083f4:	e006      	b.n	8008404 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2220      	movs	r2, #32
 80083fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80083fe:	2300      	movs	r3, #0
 8008400:	e000      	b.n	8008404 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008402:	2302      	movs	r3, #2
  }
}
 8008404:	4618      	mov	r0, r3
 8008406:	3720      	adds	r7, #32
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b086      	sub	sp, #24
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	603b      	str	r3, [r7, #0]
 8008418:	4613      	mov	r3, r2
 800841a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800841c:	e03b      	b.n	8008496 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800841e:	6a3b      	ldr	r3, [r7, #32]
 8008420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008424:	d037      	beq.n	8008496 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008426:	f7fb fb9d 	bl	8003b64 <HAL_GetTick>
 800842a:	4602      	mov	r2, r0
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	1ad3      	subs	r3, r2, r3
 8008430:	6a3a      	ldr	r2, [r7, #32]
 8008432:	429a      	cmp	r2, r3
 8008434:	d302      	bcc.n	800843c <UART_WaitOnFlagUntilTimeout+0x30>
 8008436:	6a3b      	ldr	r3, [r7, #32]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d101      	bne.n	8008440 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800843c:	2303      	movs	r3, #3
 800843e:	e03a      	b.n	80084b6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	f003 0304 	and.w	r3, r3, #4
 800844a:	2b00      	cmp	r3, #0
 800844c:	d023      	beq.n	8008496 <UART_WaitOnFlagUntilTimeout+0x8a>
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	2b80      	cmp	r3, #128	; 0x80
 8008452:	d020      	beq.n	8008496 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	2b40      	cmp	r3, #64	; 0x40
 8008458:	d01d      	beq.n	8008496 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 0308 	and.w	r3, r3, #8
 8008464:	2b08      	cmp	r3, #8
 8008466:	d116      	bne.n	8008496 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008468:	2300      	movs	r3, #0
 800846a:	617b      	str	r3, [r7, #20]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	617b      	str	r3, [r7, #20]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	617b      	str	r3, [r7, #20]
 800847c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f000 f81d 	bl	80084be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2208      	movs	r2, #8
 8008488:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2200      	movs	r2, #0
 800848e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	e00f      	b.n	80084b6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	4013      	ands	r3, r2
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	bf0c      	ite	eq
 80084a6:	2301      	moveq	r3, #1
 80084a8:	2300      	movne	r3, #0
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	461a      	mov	r2, r3
 80084ae:	79fb      	ldrb	r3, [r7, #7]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d0b4      	beq.n	800841e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3718      	adds	r7, #24
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084be:	b480      	push	{r7}
 80084c0:	b095      	sub	sp, #84	; 0x54
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	330c      	adds	r3, #12
 80084cc:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084d0:	e853 3f00 	ldrex	r3, [r3]
 80084d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80084d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	330c      	adds	r3, #12
 80084e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80084e6:	643a      	str	r2, [r7, #64]	; 0x40
 80084e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084ee:	e841 2300 	strex	r3, r2, [r1]
 80084f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1e5      	bne.n	80084c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	3314      	adds	r3, #20
 8008500:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008502:	6a3b      	ldr	r3, [r7, #32]
 8008504:	e853 3f00 	ldrex	r3, [r3]
 8008508:	61fb      	str	r3, [r7, #28]
   return(result);
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	f023 0301 	bic.w	r3, r3, #1
 8008510:	64bb      	str	r3, [r7, #72]	; 0x48
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	3314      	adds	r3, #20
 8008518:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800851a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800851c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008522:	e841 2300 	strex	r3, r2, [r1]
 8008526:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1e5      	bne.n	80084fa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008532:	2b01      	cmp	r3, #1
 8008534:	d119      	bne.n	800856a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	330c      	adds	r3, #12
 800853c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	e853 3f00 	ldrex	r3, [r3]
 8008544:	60bb      	str	r3, [r7, #8]
   return(result);
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	f023 0310 	bic.w	r3, r3, #16
 800854c:	647b      	str	r3, [r7, #68]	; 0x44
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	330c      	adds	r3, #12
 8008554:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008556:	61ba      	str	r2, [r7, #24]
 8008558:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855a:	6979      	ldr	r1, [r7, #20]
 800855c:	69ba      	ldr	r2, [r7, #24]
 800855e:	e841 2300 	strex	r3, r2, [r1]
 8008562:	613b      	str	r3, [r7, #16]
   return(result);
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1e5      	bne.n	8008536 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2220      	movs	r2, #32
 800856e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008578:	bf00      	nop
 800857a:	3754      	adds	r7, #84	; 0x54
 800857c:	46bd      	mov	sp, r7
 800857e:	bc80      	pop	{r7}
 8008580:	4770      	bx	lr
	...

08008584 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	68da      	ldr	r2, [r3, #12]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	430a      	orrs	r2, r1
 80085a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	689a      	ldr	r2, [r3, #8]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	431a      	orrs	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	695b      	ldr	r3, [r3, #20]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80085be:	f023 030c 	bic.w	r3, r3, #12
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	6812      	ldr	r2, [r2, #0]
 80085c6:	68b9      	ldr	r1, [r7, #8]
 80085c8:	430b      	orrs	r3, r1
 80085ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	695b      	ldr	r3, [r3, #20]
 80085d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	699a      	ldr	r2, [r3, #24]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	430a      	orrs	r2, r1
 80085e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a2c      	ldr	r2, [pc, #176]	; (8008698 <UART_SetConfig+0x114>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d103      	bne.n	80085f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80085ec:	f7ff f8ce 	bl	800778c <HAL_RCC_GetPCLK2Freq>
 80085f0:	60f8      	str	r0, [r7, #12]
 80085f2:	e002      	b.n	80085fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80085f4:	f7ff f8b6 	bl	8007764 <HAL_RCC_GetPCLK1Freq>
 80085f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	4613      	mov	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	009a      	lsls	r2, r3, #2
 8008604:	441a      	add	r2, r3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008610:	4a22      	ldr	r2, [pc, #136]	; (800869c <UART_SetConfig+0x118>)
 8008612:	fba2 2303 	umull	r2, r3, r2, r3
 8008616:	095b      	lsrs	r3, r3, #5
 8008618:	0119      	lsls	r1, r3, #4
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	4613      	mov	r3, r2
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	4413      	add	r3, r2
 8008622:	009a      	lsls	r2, r3, #2
 8008624:	441a      	add	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008630:	4b1a      	ldr	r3, [pc, #104]	; (800869c <UART_SetConfig+0x118>)
 8008632:	fba3 0302 	umull	r0, r3, r3, r2
 8008636:	095b      	lsrs	r3, r3, #5
 8008638:	2064      	movs	r0, #100	; 0x64
 800863a:	fb00 f303 	mul.w	r3, r0, r3
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	011b      	lsls	r3, r3, #4
 8008642:	3332      	adds	r3, #50	; 0x32
 8008644:	4a15      	ldr	r2, [pc, #84]	; (800869c <UART_SetConfig+0x118>)
 8008646:	fba2 2303 	umull	r2, r3, r2, r3
 800864a:	095b      	lsrs	r3, r3, #5
 800864c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008650:	4419      	add	r1, r3
 8008652:	68fa      	ldr	r2, [r7, #12]
 8008654:	4613      	mov	r3, r2
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	4413      	add	r3, r2
 800865a:	009a      	lsls	r2, r3, #2
 800865c:	441a      	add	r2, r3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	fbb2 f2f3 	udiv	r2, r2, r3
 8008668:	4b0c      	ldr	r3, [pc, #48]	; (800869c <UART_SetConfig+0x118>)
 800866a:	fba3 0302 	umull	r0, r3, r3, r2
 800866e:	095b      	lsrs	r3, r3, #5
 8008670:	2064      	movs	r0, #100	; 0x64
 8008672:	fb00 f303 	mul.w	r3, r0, r3
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	011b      	lsls	r3, r3, #4
 800867a:	3332      	adds	r3, #50	; 0x32
 800867c:	4a07      	ldr	r2, [pc, #28]	; (800869c <UART_SetConfig+0x118>)
 800867e:	fba2 2303 	umull	r2, r3, r2, r3
 8008682:	095b      	lsrs	r3, r3, #5
 8008684:	f003 020f 	and.w	r2, r3, #15
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	440a      	add	r2, r1
 800868e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008690:	bf00      	nop
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	40013800 	.word	0x40013800
 800869c:	51eb851f 	.word	0x51eb851f

080086a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	4638      	mov	r0, r7
 80086aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80086ae:	2300      	movs	r3, #0
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3714      	adds	r7, #20
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bc80      	pop	{r7}
 80086b8:	4770      	bx	lr

080086ba <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80086ba:	b480      	push	{r7}
 80086bc:	b085      	sub	sp, #20
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80086ca:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80086ce:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	b29a      	uxth	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3714      	adds	r7, #20
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bc80      	pop	{r7}
 80086e4:	4770      	bx	lr

080086e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80086e6:	b480      	push	{r7}
 80086e8:	b085      	sub	sp, #20
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80086ee:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80086f2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	b29b      	uxth	r3, r3
 8008700:	43db      	mvns	r3, r3
 8008702:	b29b      	uxth	r3, r3
 8008704:	4013      	ands	r3, r2
 8008706:	b29a      	uxth	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3714      	adds	r7, #20
 8008714:	46bd      	mov	sp, r7
 8008716:	bc80      	pop	{r7}
 8008718:	4770      	bx	lr

0800871a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800871a:	b480      	push	{r7}
 800871c:	b083      	sub	sp, #12
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
 8008722:	460b      	mov	r3, r1
 8008724:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008726:	2300      	movs	r3, #0
}
 8008728:	4618      	mov	r0, r3
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	bc80      	pop	{r7}
 8008730:	4770      	bx	lr

08008732 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008732:	b480      	push	{r7}
 8008734:	b085      	sub	sp, #20
 8008736:	af00      	add	r7, sp, #0
 8008738:	60f8      	str	r0, [r7, #12]
 800873a:	4638      	mov	r0, r7
 800873c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2201      	movs	r2, #1
 8008744:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2200      	movs	r2, #0
 800874c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2200      	movs	r2, #0
 8008754:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3714      	adds	r7, #20
 8008766:	46bd      	mov	sp, r7
 8008768:	bc80      	pop	{r7}
 800876a:	4770      	bx	lr

0800876c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800876c:	b480      	push	{r7}
 800876e:	b09d      	sub	sp, #116	; 0x74
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	4413      	add	r3, r2
 8008786:	881b      	ldrh	r3, [r3, #0]
 8008788:	b29b      	uxth	r3, r3
 800878a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800878e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008792:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	78db      	ldrb	r3, [r3, #3]
 800879a:	2b03      	cmp	r3, #3
 800879c:	d81f      	bhi.n	80087de <USB_ActivateEndpoint+0x72>
 800879e:	a201      	add	r2, pc, #4	; (adr r2, 80087a4 <USB_ActivateEndpoint+0x38>)
 80087a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a4:	080087b5 	.word	0x080087b5
 80087a8:	080087d1 	.word	0x080087d1
 80087ac:	080087e7 	.word	0x080087e7
 80087b0:	080087c3 	.word	0x080087c3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80087b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80087b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80087bc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80087c0:	e012      	b.n	80087e8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80087c2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80087c6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80087ca:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80087ce:	e00b      	b.n	80087e8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80087d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80087d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80087d8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80087dc:	e004      	b.n	80087e8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80087e4:	e000      	b.n	80087e8 <USB_ActivateEndpoint+0x7c>
      break;
 80087e6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	441a      	add	r2, r3
 80087f2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80087f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008806:	b29b      	uxth	r3, r3
 8008808:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	4413      	add	r3, r2
 8008814:	881b      	ldrh	r3, [r3, #0]
 8008816:	b29b      	uxth	r3, r3
 8008818:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800881c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008820:	b29a      	uxth	r2, r3
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	b29b      	uxth	r3, r3
 8008828:	4313      	orrs	r3, r2
 800882a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	441a      	add	r2, r3
 8008838:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800883c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008840:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008844:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800884c:	b29b      	uxth	r3, r3
 800884e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	7b1b      	ldrb	r3, [r3, #12]
 8008854:	2b00      	cmp	r3, #0
 8008856:	f040 8178 	bne.w	8008b4a <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	785b      	ldrb	r3, [r3, #1]
 800885e:	2b00      	cmp	r3, #0
 8008860:	f000 8084 	beq.w	800896c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	61bb      	str	r3, [r7, #24]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800886e:	b29b      	uxth	r3, r3
 8008870:	461a      	mov	r2, r3
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	4413      	add	r3, r2
 8008876:	61bb      	str	r3, [r7, #24]
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	011a      	lsls	r2, r3, #4
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	4413      	add	r3, r2
 8008882:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008886:	617b      	str	r3, [r7, #20]
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	88db      	ldrh	r3, [r3, #6]
 800888c:	085b      	lsrs	r3, r3, #1
 800888e:	b29b      	uxth	r3, r3
 8008890:	005b      	lsls	r3, r3, #1
 8008892:	b29a      	uxth	r2, r3
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	4413      	add	r3, r2
 80088a2:	881b      	ldrh	r3, [r3, #0]
 80088a4:	827b      	strh	r3, [r7, #18]
 80088a6:	8a7b      	ldrh	r3, [r7, #18]
 80088a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d01b      	beq.n	80088e8 <USB_ActivateEndpoint+0x17c>
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4413      	add	r3, r2
 80088ba:	881b      	ldrh	r3, [r3, #0]
 80088bc:	b29b      	uxth	r3, r3
 80088be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088c6:	823b      	strh	r3, [r7, #16]
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	441a      	add	r2, r3
 80088d2:	8a3b      	ldrh	r3, [r7, #16]
 80088d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	78db      	ldrb	r3, [r3, #3]
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d020      	beq.n	8008932 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	4413      	add	r3, r2
 80088fa:	881b      	ldrh	r3, [r3, #0]
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008902:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008906:	81bb      	strh	r3, [r7, #12]
 8008908:	89bb      	ldrh	r3, [r7, #12]
 800890a:	f083 0320 	eor.w	r3, r3, #32
 800890e:	81bb      	strh	r3, [r7, #12]
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	441a      	add	r2, r3
 800891a:	89bb      	ldrh	r3, [r7, #12]
 800891c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008920:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800892c:	b29b      	uxth	r3, r3
 800892e:	8013      	strh	r3, [r2, #0]
 8008930:	e2d5      	b.n	8008ede <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	4413      	add	r3, r2
 800893c:	881b      	ldrh	r3, [r3, #0]
 800893e:	b29b      	uxth	r3, r3
 8008940:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008948:	81fb      	strh	r3, [r7, #14]
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	441a      	add	r2, r3
 8008954:	89fb      	ldrh	r3, [r7, #14]
 8008956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800895a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800895e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008966:	b29b      	uxth	r3, r3
 8008968:	8013      	strh	r3, [r2, #0]
 800896a:	e2b8      	b.n	8008ede <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	633b      	str	r3, [r7, #48]	; 0x30
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008976:	b29b      	uxth	r3, r3
 8008978:	461a      	mov	r2, r3
 800897a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897c:	4413      	add	r3, r2
 800897e:	633b      	str	r3, [r7, #48]	; 0x30
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	011a      	lsls	r2, r3, #4
 8008986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008988:	4413      	add	r3, r2
 800898a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800898e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	88db      	ldrh	r3, [r3, #6]
 8008994:	085b      	lsrs	r3, r3, #1
 8008996:	b29b      	uxth	r3, r3
 8008998:	005b      	lsls	r3, r3, #1
 800899a:	b29a      	uxth	r2, r3
 800899c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800899e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	461a      	mov	r2, r3
 80089ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b0:	4413      	add	r3, r2
 80089b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	011a      	lsls	r2, r3, #4
 80089ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089bc:	4413      	add	r3, r2
 80089be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80089c2:	627b      	str	r3, [r7, #36]	; 0x24
 80089c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c6:	881b      	ldrh	r3, [r3, #0]
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d2:	801a      	strh	r2, [r3, #0]
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	2b3e      	cmp	r3, #62	; 0x3e
 80089da:	d91d      	bls.n	8008a18 <USB_ActivateEndpoint+0x2ac>
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	095b      	lsrs	r3, r3, #5
 80089e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	691b      	ldr	r3, [r3, #16]
 80089e8:	f003 031f 	and.w	r3, r3, #31
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d102      	bne.n	80089f6 <USB_ActivateEndpoint+0x28a>
 80089f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089f2:	3b01      	subs	r3, #1
 80089f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80089f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f8:	881b      	ldrh	r3, [r3, #0]
 80089fa:	b29a      	uxth	r2, r3
 80089fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	029b      	lsls	r3, r3, #10
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	4313      	orrs	r3, r2
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a10:	b29a      	uxth	r2, r3
 8008a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a14:	801a      	strh	r2, [r3, #0]
 8008a16:	e026      	b.n	8008a66 <USB_ActivateEndpoint+0x2fa>
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	691b      	ldr	r3, [r3, #16]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d10a      	bne.n	8008a36 <USB_ActivateEndpoint+0x2ca>
 8008a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a22:	881b      	ldrh	r3, [r3, #0]
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	801a      	strh	r2, [r3, #0]
 8008a34:	e017      	b.n	8008a66 <USB_ActivateEndpoint+0x2fa>
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	085b      	lsrs	r3, r3, #1
 8008a3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d002      	beq.n	8008a50 <USB_ActivateEndpoint+0x2e4>
 8008a4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a52:	881b      	ldrh	r3, [r3, #0]
 8008a54:	b29a      	uxth	r2, r3
 8008a56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	029b      	lsls	r3, r3, #10
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	b29a      	uxth	r2, r3
 8008a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a64:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	4413      	add	r3, r2
 8008a70:	881b      	ldrh	r3, [r3, #0]
 8008a72:	847b      	strh	r3, [r7, #34]	; 0x22
 8008a74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d01b      	beq.n	8008ab6 <USB_ActivateEndpoint+0x34a>
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	4413      	add	r3, r2
 8008a88:	881b      	ldrh	r3, [r3, #0]
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a94:	843b      	strh	r3, [r7, #32]
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	441a      	add	r2, r3
 8008aa0:	8c3b      	ldrh	r3, [r7, #32]
 8008aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008aaa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d124      	bne.n	8008b08 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	4413      	add	r3, r2
 8008ac8:	881b      	ldrh	r3, [r3, #0]
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ad4:	83bb      	strh	r3, [r7, #28]
 8008ad6:	8bbb      	ldrh	r3, [r7, #28]
 8008ad8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008adc:	83bb      	strh	r3, [r7, #28]
 8008ade:	8bbb      	ldrh	r3, [r7, #28]
 8008ae0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008ae4:	83bb      	strh	r3, [r7, #28]
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	441a      	add	r2, r3
 8008af0:	8bbb      	ldrh	r3, [r7, #28]
 8008af2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008af6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	8013      	strh	r3, [r2, #0]
 8008b06:	e1ea      	b.n	8008ede <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	4413      	add	r3, r2
 8008b12:	881b      	ldrh	r3, [r3, #0]
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b1e:	83fb      	strh	r3, [r7, #30]
 8008b20:	8bfb      	ldrh	r3, [r7, #30]
 8008b22:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008b26:	83fb      	strh	r3, [r7, #30]
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	441a      	add	r2, r3
 8008b32:	8bfb      	ldrh	r3, [r7, #30]
 8008b34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	8013      	strh	r3, [r2, #0]
 8008b48:	e1c9      	b.n	8008ede <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	78db      	ldrb	r3, [r3, #3]
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	d11e      	bne.n	8008b90 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	4413      	add	r3, r2
 8008b5c:	881b      	ldrh	r3, [r3, #0]
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b68:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	441a      	add	r2, r3
 8008b76:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008b7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b82:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	8013      	strh	r3, [r2, #0]
 8008b8e:	e01d      	b.n	8008bcc <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	4413      	add	r3, r2
 8008b9a:	881b      	ldrh	r3, [r3, #0]
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ba6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	441a      	add	r2, r3
 8008bb4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008bb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	461a      	mov	r2, r3
 8008bda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bdc:	4413      	add	r3, r2
 8008bde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	011a      	lsls	r2, r3, #4
 8008be6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008be8:	4413      	add	r3, r2
 8008bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bee:	65bb      	str	r3, [r7, #88]	; 0x58
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	891b      	ldrh	r3, [r3, #8]
 8008bf4:	085b      	lsrs	r3, r3, #1
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	005b      	lsls	r3, r3, #1
 8008bfa:	b29a      	uxth	r2, r3
 8008bfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008bfe:	801a      	strh	r2, [r3, #0]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	657b      	str	r3, [r7, #84]	; 0x54
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c10:	4413      	add	r3, r2
 8008c12:	657b      	str	r3, [r7, #84]	; 0x54
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	011a      	lsls	r2, r3, #4
 8008c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c1c:	4413      	add	r3, r2
 8008c1e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008c22:	653b      	str	r3, [r7, #80]	; 0x50
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	895b      	ldrh	r3, [r3, #10]
 8008c28:	085b      	lsrs	r3, r3, #1
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	005b      	lsls	r3, r3, #1
 8008c2e:	b29a      	uxth	r2, r3
 8008c30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c32:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	785b      	ldrb	r3, [r3, #1]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	f040 8093 	bne.w	8008d64 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	4413      	add	r3, r2
 8008c48:	881b      	ldrh	r3, [r3, #0]
 8008c4a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008c4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d01b      	beq.n	8008c92 <USB_ActivateEndpoint+0x526>
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	4413      	add	r3, r2
 8008c64:	881b      	ldrh	r3, [r3, #0]
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c70:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	441a      	add	r2, r3
 8008c7c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008c7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	4413      	add	r3, r2
 8008c9c:	881b      	ldrh	r3, [r3, #0]
 8008c9e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008ca0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d01b      	beq.n	8008ce2 <USB_ActivateEndpoint+0x576>
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	4413      	add	r3, r2
 8008cb4:	881b      	ldrh	r3, [r3, #0]
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cc0:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	441a      	add	r2, r3
 8008ccc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008cce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	4413      	add	r3, r2
 8008cec:	881b      	ldrh	r3, [r3, #0]
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cf8:	873b      	strh	r3, [r7, #56]	; 0x38
 8008cfa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008cfc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008d00:	873b      	strh	r3, [r7, #56]	; 0x38
 8008d02:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008d04:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008d08:	873b      	strh	r3, [r7, #56]	; 0x38
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	441a      	add	r2, r3
 8008d14:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	4413      	add	r3, r2
 8008d34:	881b      	ldrh	r3, [r3, #0]
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d40:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	441a      	add	r2, r3
 8008d4c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008d4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	8013      	strh	r3, [r2, #0]
 8008d62:	e0bc      	b.n	8008ede <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	4413      	add	r3, r2
 8008d6e:	881b      	ldrh	r3, [r3, #0]
 8008d70:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008d74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008d78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d01d      	beq.n	8008dbc <USB_ActivateEndpoint+0x650>
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	4413      	add	r3, r2
 8008d8a:	881b      	ldrh	r3, [r3, #0]
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d96:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	441a      	add	r2, r3
 8008da4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008da8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008db0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	4413      	add	r3, r2
 8008dc6:	881b      	ldrh	r3, [r3, #0]
 8008dc8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008dcc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d01d      	beq.n	8008e14 <USB_ActivateEndpoint+0x6a8>
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	4413      	add	r3, r2
 8008de2:	881b      	ldrh	r3, [r3, #0]
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dee:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	441a      	add	r2, r3
 8008dfc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008e00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	78db      	ldrb	r3, [r3, #3]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d024      	beq.n	8008e66 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	4413      	add	r3, r2
 8008e26:	881b      	ldrh	r3, [r3, #0]
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e32:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008e36:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008e3a:	f083 0320 	eor.w	r3, r3, #32
 8008e3e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	441a      	add	r2, r3
 8008e4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008e50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	8013      	strh	r3, [r2, #0]
 8008e64:	e01d      	b.n	8008ea2 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	4413      	add	r3, r2
 8008e70:	881b      	ldrh	r3, [r3, #0]
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e7c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	441a      	add	r2, r3
 8008e8a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	4413      	add	r3, r2
 8008eac:	881b      	ldrh	r3, [r3, #0]
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eb8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	441a      	add	r2, r3
 8008ec6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008eca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ece:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008ede:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3774      	adds	r7, #116	; 0x74
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bc80      	pop	{r7}
 8008eea:	4770      	bx	lr

08008eec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b08d      	sub	sp, #52	; 0x34
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	7b1b      	ldrb	r3, [r3, #12]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f040 808e 	bne.w	800901c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	785b      	ldrb	r3, [r3, #1]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d044      	beq.n	8008f92 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	4413      	add	r3, r2
 8008f12:	881b      	ldrh	r3, [r3, #0]
 8008f14:	81bb      	strh	r3, [r7, #12]
 8008f16:	89bb      	ldrh	r3, [r7, #12]
 8008f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d01b      	beq.n	8008f58 <USB_DeactivateEndpoint+0x6c>
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	4413      	add	r3, r2
 8008f2a:	881b      	ldrh	r3, [r3, #0]
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f36:	817b      	strh	r3, [r7, #10]
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	441a      	add	r2, r3
 8008f42:	897b      	ldrh	r3, [r7, #10]
 8008f44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	4413      	add	r3, r2
 8008f62:	881b      	ldrh	r3, [r3, #0]
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f6e:	813b      	strh	r3, [r7, #8]
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	441a      	add	r2, r3
 8008f7a:	893b      	ldrh	r3, [r7, #8]
 8008f7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	8013      	strh	r3, [r2, #0]
 8008f90:	e192      	b.n	80092b8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	4413      	add	r3, r2
 8008f9c:	881b      	ldrh	r3, [r3, #0]
 8008f9e:	827b      	strh	r3, [r7, #18]
 8008fa0:	8a7b      	ldrh	r3, [r7, #18]
 8008fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d01b      	beq.n	8008fe2 <USB_DeactivateEndpoint+0xf6>
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	4413      	add	r3, r2
 8008fb4:	881b      	ldrh	r3, [r3, #0]
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fc0:	823b      	strh	r3, [r7, #16]
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	441a      	add	r2, r3
 8008fcc:	8a3b      	ldrh	r3, [r7, #16]
 8008fce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	4413      	add	r3, r2
 8008fec:	881b      	ldrh	r3, [r3, #0]
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ff8:	81fb      	strh	r3, [r7, #14]
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	441a      	add	r2, r3
 8009004:	89fb      	ldrh	r3, [r7, #14]
 8009006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800900a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800900e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009016:	b29b      	uxth	r3, r3
 8009018:	8013      	strh	r3, [r2, #0]
 800901a:	e14d      	b.n	80092b8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	785b      	ldrb	r3, [r3, #1]
 8009020:	2b00      	cmp	r3, #0
 8009022:	f040 80a5 	bne.w	8009170 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	009b      	lsls	r3, r3, #2
 800902e:	4413      	add	r3, r2
 8009030:	881b      	ldrh	r3, [r3, #0]
 8009032:	843b      	strh	r3, [r7, #32]
 8009034:	8c3b      	ldrh	r3, [r7, #32]
 8009036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800903a:	2b00      	cmp	r3, #0
 800903c:	d01b      	beq.n	8009076 <USB_DeactivateEndpoint+0x18a>
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	4413      	add	r3, r2
 8009048:	881b      	ldrh	r3, [r3, #0]
 800904a:	b29b      	uxth	r3, r3
 800904c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009054:	83fb      	strh	r3, [r7, #30]
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	009b      	lsls	r3, r3, #2
 800905e:	441a      	add	r2, r3
 8009060:	8bfb      	ldrh	r3, [r7, #30]
 8009062:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009066:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800906a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800906e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009072:	b29b      	uxth	r3, r3
 8009074:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	4413      	add	r3, r2
 8009080:	881b      	ldrh	r3, [r3, #0]
 8009082:	83bb      	strh	r3, [r7, #28]
 8009084:	8bbb      	ldrh	r3, [r7, #28]
 8009086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800908a:	2b00      	cmp	r3, #0
 800908c:	d01b      	beq.n	80090c6 <USB_DeactivateEndpoint+0x1da>
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	4413      	add	r3, r2
 8009098:	881b      	ldrh	r3, [r3, #0]
 800909a:	b29b      	uxth	r3, r3
 800909c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090a4:	837b      	strh	r3, [r7, #26]
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	441a      	add	r2, r3
 80090b0:	8b7b      	ldrh	r3, [r7, #26]
 80090b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	4413      	add	r3, r2
 80090d0:	881b      	ldrh	r3, [r3, #0]
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090dc:	833b      	strh	r3, [r7, #24]
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	441a      	add	r2, r3
 80090e8:	8b3b      	ldrh	r3, [r7, #24]
 80090ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	4413      	add	r3, r2
 8009108:	881b      	ldrh	r3, [r3, #0]
 800910a:	b29b      	uxth	r3, r3
 800910c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009114:	82fb      	strh	r3, [r7, #22]
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	441a      	add	r2, r3
 8009120:	8afb      	ldrh	r3, [r7, #22]
 8009122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800912a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800912e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009132:	b29b      	uxth	r3, r3
 8009134:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4413      	add	r3, r2
 8009140:	881b      	ldrh	r3, [r3, #0]
 8009142:	b29b      	uxth	r3, r3
 8009144:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800914c:	82bb      	strh	r3, [r7, #20]
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	441a      	add	r2, r3
 8009158:	8abb      	ldrh	r3, [r7, #20]
 800915a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800915e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800916a:	b29b      	uxth	r3, r3
 800916c:	8013      	strh	r3, [r2, #0]
 800916e:	e0a3      	b.n	80092b8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	4413      	add	r3, r2
 800917a:	881b      	ldrh	r3, [r3, #0]
 800917c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800917e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009184:	2b00      	cmp	r3, #0
 8009186:	d01b      	beq.n	80091c0 <USB_DeactivateEndpoint+0x2d4>
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	4413      	add	r3, r2
 8009192:	881b      	ldrh	r3, [r3, #0]
 8009194:	b29b      	uxth	r3, r3
 8009196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800919a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800919e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	441a      	add	r2, r3
 80091aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80091ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80091b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091bc:	b29b      	uxth	r3, r3
 80091be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	4413      	add	r3, r2
 80091ca:	881b      	ldrh	r3, [r3, #0]
 80091cc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80091ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80091d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d01b      	beq.n	8009210 <USB_DeactivateEndpoint+0x324>
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	4413      	add	r3, r2
 80091e2:	881b      	ldrh	r3, [r3, #0]
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ee:	853b      	strh	r3, [r7, #40]	; 0x28
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	441a      	add	r2, r3
 80091fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80091fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009200:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009204:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009208:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800920c:	b29b      	uxth	r3, r3
 800920e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	4413      	add	r3, r2
 800921a:	881b      	ldrh	r3, [r3, #0]
 800921c:	b29b      	uxth	r3, r3
 800921e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009226:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	441a      	add	r2, r3
 8009232:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800923c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009244:	b29b      	uxth	r3, r3
 8009246:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	4413      	add	r3, r2
 8009252:	881b      	ldrh	r3, [r3, #0]
 8009254:	b29b      	uxth	r3, r3
 8009256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800925a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800925e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	441a      	add	r2, r3
 800926a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800926c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009270:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800927c:	b29b      	uxth	r3, r3
 800927e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	4413      	add	r3, r2
 800928a:	881b      	ldrh	r3, [r3, #0]
 800928c:	b29b      	uxth	r3, r3
 800928e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009296:	847b      	strh	r3, [r7, #34]	; 0x22
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	441a      	add	r2, r3
 80092a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80092a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3734      	adds	r7, #52	; 0x34
 80092be:	46bd      	mov	sp, r7
 80092c0:	bc80      	pop	{r7}
 80092c2:	4770      	bx	lr

080092c4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b0c2      	sub	sp, #264	; 0x108
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	1d3b      	adds	r3, r7, #4
 80092cc:	6018      	str	r0, [r3, #0]
 80092ce:	463b      	mov	r3, r7
 80092d0:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80092d2:	463b      	mov	r3, r7
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	785b      	ldrb	r3, [r3, #1]
 80092d8:	2b01      	cmp	r3, #1
 80092da:	f040 8545 	bne.w	8009d68 <USB_EPStartXfer+0xaa4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80092de:	463b      	mov	r3, r7
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	699a      	ldr	r2, [r3, #24]
 80092e4:	463b      	mov	r3, r7
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d905      	bls.n	80092fa <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80092ee:	463b      	mov	r3, r7
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	691b      	ldr	r3, [r3, #16]
 80092f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80092f8:	e004      	b.n	8009304 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80092fa:	463b      	mov	r3, r7
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	699b      	ldr	r3, [r3, #24]
 8009300:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009304:	463b      	mov	r3, r7
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	7b1b      	ldrb	r3, [r3, #12]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d128      	bne.n	8009360 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800930e:	463b      	mov	r3, r7
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	6959      	ldr	r1, [r3, #20]
 8009314:	463b      	mov	r3, r7
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	88da      	ldrh	r2, [r3, #6]
 800931a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800931e:	b29b      	uxth	r3, r3
 8009320:	1d38      	adds	r0, r7, #4
 8009322:	6800      	ldr	r0, [r0, #0]
 8009324:	f001 fa58 	bl	800a7d8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009328:	1d3b      	adds	r3, r7, #4
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	613b      	str	r3, [r7, #16]
 800932e:	1d3b      	adds	r3, r7, #4
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009336:	b29b      	uxth	r3, r3
 8009338:	461a      	mov	r2, r3
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	4413      	add	r3, r2
 800933e:	613b      	str	r3, [r7, #16]
 8009340:	463b      	mov	r3, r7
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	011a      	lsls	r2, r3, #4
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	4413      	add	r3, r2
 800934c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009350:	60fb      	str	r3, [r7, #12]
 8009352:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009356:	b29a      	uxth	r2, r3
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	801a      	strh	r2, [r3, #0]
 800935c:	f000 bcdb 	b.w	8009d16 <USB_EPStartXfer+0xa52>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009360:	463b      	mov	r3, r7
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	78db      	ldrb	r3, [r3, #3]
 8009366:	2b02      	cmp	r3, #2
 8009368:	f040 836f 	bne.w	8009a4a <USB_EPStartXfer+0x786>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800936c:	463b      	mov	r3, r7
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	6a1a      	ldr	r2, [r3, #32]
 8009372:	463b      	mov	r3, r7
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	429a      	cmp	r2, r3
 800937a:	f240 8313 	bls.w	80099a4 <USB_EPStartXfer+0x6e0>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800937e:	1d3b      	adds	r3, r7, #4
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	463b      	mov	r3, r7
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	4413      	add	r3, r2
 800938c:	881b      	ldrh	r3, [r3, #0]
 800938e:	b29b      	uxth	r3, r3
 8009390:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009398:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800939c:	1d3b      	adds	r3, r7, #4
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	463b      	mov	r3, r7
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	441a      	add	r2, r3
 80093aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80093ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093b6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80093ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093be:	b29b      	uxth	r3, r3
 80093c0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80093c2:	463b      	mov	r3, r7
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	6a1a      	ldr	r2, [r3, #32]
 80093c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093cc:	1ad2      	subs	r2, r2, r3
 80093ce:	463b      	mov	r3, r7
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80093d4:	1d3b      	adds	r3, r7, #4
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	463b      	mov	r3, r7
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	4413      	add	r3, r2
 80093e2:	881b      	ldrh	r3, [r3, #0]
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	f000 816d 	beq.w	80096ca <USB_EPStartXfer+0x406>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80093f0:	1d3b      	adds	r3, r7, #4
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	633b      	str	r3, [r7, #48]	; 0x30
 80093f6:	463b      	mov	r3, r7
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	785b      	ldrb	r3, [r3, #1]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d16e      	bne.n	80094de <USB_EPStartXfer+0x21a>
 8009400:	1d3b      	adds	r3, r7, #4
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	62bb      	str	r3, [r7, #40]	; 0x28
 8009406:	1d3b      	adds	r3, r7, #4
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800940e:	b29b      	uxth	r3, r3
 8009410:	461a      	mov	r2, r3
 8009412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009414:	4413      	add	r3, r2
 8009416:	62bb      	str	r3, [r7, #40]	; 0x28
 8009418:	463b      	mov	r3, r7
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	011a      	lsls	r2, r3, #4
 8009420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009422:	4413      	add	r3, r2
 8009424:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009428:	627b      	str	r3, [r7, #36]	; 0x24
 800942a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942c:	881b      	ldrh	r3, [r3, #0]
 800942e:	b29b      	uxth	r3, r3
 8009430:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009434:	b29a      	uxth	r2, r3
 8009436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009438:	801a      	strh	r2, [r3, #0]
 800943a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800943e:	2b3e      	cmp	r3, #62	; 0x3e
 8009440:	d921      	bls.n	8009486 <USB_EPStartXfer+0x1c2>
 8009442:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009446:	095b      	lsrs	r3, r3, #5
 8009448:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800944c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009450:	f003 031f 	and.w	r3, r3, #31
 8009454:	2b00      	cmp	r3, #0
 8009456:	d104      	bne.n	8009462 <USB_EPStartXfer+0x19e>
 8009458:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800945c:	3b01      	subs	r3, #1
 800945e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009464:	881b      	ldrh	r3, [r3, #0]
 8009466:	b29a      	uxth	r2, r3
 8009468:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800946c:	b29b      	uxth	r3, r3
 800946e:	029b      	lsls	r3, r3, #10
 8009470:	b29b      	uxth	r3, r3
 8009472:	4313      	orrs	r3, r2
 8009474:	b29b      	uxth	r3, r3
 8009476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800947a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800947e:	b29a      	uxth	r2, r3
 8009480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009482:	801a      	strh	r2, [r3, #0]
 8009484:	e047      	b.n	8009516 <USB_EPStartXfer+0x252>
 8009486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800948a:	2b00      	cmp	r3, #0
 800948c:	d10a      	bne.n	80094a4 <USB_EPStartXfer+0x1e0>
 800948e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009490:	881b      	ldrh	r3, [r3, #0]
 8009492:	b29b      	uxth	r3, r3
 8009494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800949c:	b29a      	uxth	r2, r3
 800949e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a0:	801a      	strh	r2, [r3, #0]
 80094a2:	e038      	b.n	8009516 <USB_EPStartXfer+0x252>
 80094a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094a8:	085b      	lsrs	r3, r3, #1
 80094aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80094ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094b2:	f003 0301 	and.w	r3, r3, #1
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d004      	beq.n	80094c4 <USB_EPStartXfer+0x200>
 80094ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80094be:	3301      	adds	r3, #1
 80094c0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80094c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c6:	881b      	ldrh	r3, [r3, #0]
 80094c8:	b29a      	uxth	r2, r3
 80094ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	029b      	lsls	r3, r3, #10
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	4313      	orrs	r3, r2
 80094d6:	b29a      	uxth	r2, r3
 80094d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094da:	801a      	strh	r2, [r3, #0]
 80094dc:	e01b      	b.n	8009516 <USB_EPStartXfer+0x252>
 80094de:	463b      	mov	r3, r7
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	785b      	ldrb	r3, [r3, #1]
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d116      	bne.n	8009516 <USB_EPStartXfer+0x252>
 80094e8:	1d3b      	adds	r3, r7, #4
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	461a      	mov	r2, r3
 80094f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f6:	4413      	add	r3, r2
 80094f8:	633b      	str	r3, [r7, #48]	; 0x30
 80094fa:	463b      	mov	r3, r7
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	011a      	lsls	r2, r3, #4
 8009502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009504:	4413      	add	r3, r2
 8009506:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800950a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800950c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009510:	b29a      	uxth	r2, r3
 8009512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009514:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009516:	463b      	mov	r3, r7
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	895b      	ldrh	r3, [r3, #10]
 800951c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009520:	463b      	mov	r3, r7
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	6959      	ldr	r1, [r3, #20]
 8009526:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800952a:	b29b      	uxth	r3, r3
 800952c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009530:	1d38      	adds	r0, r7, #4
 8009532:	6800      	ldr	r0, [r0, #0]
 8009534:	f001 f950 	bl	800a7d8 <USB_WritePMA>
            ep->xfer_buff += len;
 8009538:	463b      	mov	r3, r7
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	695a      	ldr	r2, [r3, #20]
 800953e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009542:	441a      	add	r2, r3
 8009544:	463b      	mov	r3, r7
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800954a:	463b      	mov	r3, r7
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	6a1a      	ldr	r2, [r3, #32]
 8009550:	463b      	mov	r3, r7
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	429a      	cmp	r2, r3
 8009558:	d909      	bls.n	800956e <USB_EPStartXfer+0x2aa>
            {
              ep->xfer_len_db -= len;
 800955a:	463b      	mov	r3, r7
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	6a1a      	ldr	r2, [r3, #32]
 8009560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009564:	1ad2      	subs	r2, r2, r3
 8009566:	463b      	mov	r3, r7
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	621a      	str	r2, [r3, #32]
 800956c:	e008      	b.n	8009580 <USB_EPStartXfer+0x2bc>
            }
            else
            {
              len = ep->xfer_len_db;
 800956e:	463b      	mov	r3, r7
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	6a1b      	ldr	r3, [r3, #32]
 8009574:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009578:	463b      	mov	r3, r7
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2200      	movs	r2, #0
 800957e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009580:	463b      	mov	r3, r7
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	785b      	ldrb	r3, [r3, #1]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d16e      	bne.n	8009668 <USB_EPStartXfer+0x3a4>
 800958a:	1d3b      	adds	r3, r7, #4
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	61bb      	str	r3, [r7, #24]
 8009590:	1d3b      	adds	r3, r7, #4
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009598:	b29b      	uxth	r3, r3
 800959a:	461a      	mov	r2, r3
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	4413      	add	r3, r2
 80095a0:	61bb      	str	r3, [r7, #24]
 80095a2:	463b      	mov	r3, r7
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	011a      	lsls	r2, r3, #4
 80095aa:	69bb      	ldr	r3, [r7, #24]
 80095ac:	4413      	add	r3, r2
 80095ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80095b2:	617b      	str	r3, [r7, #20]
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	881b      	ldrh	r3, [r3, #0]
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80095be:	b29a      	uxth	r2, r3
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	801a      	strh	r2, [r3, #0]
 80095c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095c8:	2b3e      	cmp	r3, #62	; 0x3e
 80095ca:	d921      	bls.n	8009610 <USB_EPStartXfer+0x34c>
 80095cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095d0:	095b      	lsrs	r3, r3, #5
 80095d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80095d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095da:	f003 031f 	and.w	r3, r3, #31
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d104      	bne.n	80095ec <USB_EPStartXfer+0x328>
 80095e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095e6:	3b01      	subs	r3, #1
 80095e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	881b      	ldrh	r3, [r3, #0]
 80095f0:	b29a      	uxth	r2, r3
 80095f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	029b      	lsls	r3, r3, #10
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	4313      	orrs	r3, r2
 80095fe:	b29b      	uxth	r3, r3
 8009600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009608:	b29a      	uxth	r2, r3
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	801a      	strh	r2, [r3, #0]
 800960e:	e04a      	b.n	80096a6 <USB_EPStartXfer+0x3e2>
 8009610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009614:	2b00      	cmp	r3, #0
 8009616:	d10a      	bne.n	800962e <USB_EPStartXfer+0x36a>
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	881b      	ldrh	r3, [r3, #0]
 800961c:	b29b      	uxth	r3, r3
 800961e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009626:	b29a      	uxth	r2, r3
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	801a      	strh	r2, [r3, #0]
 800962c:	e03b      	b.n	80096a6 <USB_EPStartXfer+0x3e2>
 800962e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009632:	085b      	lsrs	r3, r3, #1
 8009634:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800963c:	f003 0301 	and.w	r3, r3, #1
 8009640:	2b00      	cmp	r3, #0
 8009642:	d004      	beq.n	800964e <USB_EPStartXfer+0x38a>
 8009644:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009648:	3301      	adds	r3, #1
 800964a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	881b      	ldrh	r3, [r3, #0]
 8009652:	b29a      	uxth	r2, r3
 8009654:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009658:	b29b      	uxth	r3, r3
 800965a:	029b      	lsls	r3, r3, #10
 800965c:	b29b      	uxth	r3, r3
 800965e:	4313      	orrs	r3, r2
 8009660:	b29a      	uxth	r2, r3
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	801a      	strh	r2, [r3, #0]
 8009666:	e01e      	b.n	80096a6 <USB_EPStartXfer+0x3e2>
 8009668:	463b      	mov	r3, r7
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	785b      	ldrb	r3, [r3, #1]
 800966e:	2b01      	cmp	r3, #1
 8009670:	d119      	bne.n	80096a6 <USB_EPStartXfer+0x3e2>
 8009672:	1d3b      	adds	r3, r7, #4
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	623b      	str	r3, [r7, #32]
 8009678:	1d3b      	adds	r3, r7, #4
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009680:	b29b      	uxth	r3, r3
 8009682:	461a      	mov	r2, r3
 8009684:	6a3b      	ldr	r3, [r7, #32]
 8009686:	4413      	add	r3, r2
 8009688:	623b      	str	r3, [r7, #32]
 800968a:	463b      	mov	r3, r7
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	011a      	lsls	r2, r3, #4
 8009692:	6a3b      	ldr	r3, [r7, #32]
 8009694:	4413      	add	r3, r2
 8009696:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800969a:	61fb      	str	r3, [r7, #28]
 800969c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096a0:	b29a      	uxth	r2, r3
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80096a6:	463b      	mov	r3, r7
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	891b      	ldrh	r3, [r3, #8]
 80096ac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80096b0:	463b      	mov	r3, r7
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	6959      	ldr	r1, [r3, #20]
 80096b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80096c0:	1d38      	adds	r0, r7, #4
 80096c2:	6800      	ldr	r0, [r0, #0]
 80096c4:	f001 f888 	bl	800a7d8 <USB_WritePMA>
 80096c8:	e325      	b.n	8009d16 <USB_EPStartXfer+0xa52>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80096ca:	463b      	mov	r3, r7
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	785b      	ldrb	r3, [r3, #1]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d16e      	bne.n	80097b2 <USB_EPStartXfer+0x4ee>
 80096d4:	1d3b      	adds	r3, r7, #4
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80096da:	1d3b      	adds	r3, r7, #4
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	461a      	mov	r2, r3
 80096e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096e8:	4413      	add	r3, r2
 80096ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80096ec:	463b      	mov	r3, r7
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	011a      	lsls	r2, r3, #4
 80096f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096f6:	4413      	add	r3, r2
 80096f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80096fc:	647b      	str	r3, [r7, #68]	; 0x44
 80096fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009700:	881b      	ldrh	r3, [r3, #0]
 8009702:	b29b      	uxth	r3, r3
 8009704:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009708:	b29a      	uxth	r2, r3
 800970a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800970c:	801a      	strh	r2, [r3, #0]
 800970e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009712:	2b3e      	cmp	r3, #62	; 0x3e
 8009714:	d921      	bls.n	800975a <USB_EPStartXfer+0x496>
 8009716:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800971a:	095b      	lsrs	r3, r3, #5
 800971c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009724:	f003 031f 	and.w	r3, r3, #31
 8009728:	2b00      	cmp	r3, #0
 800972a:	d104      	bne.n	8009736 <USB_EPStartXfer+0x472>
 800972c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009730:	3b01      	subs	r3, #1
 8009732:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009738:	881b      	ldrh	r3, [r3, #0]
 800973a:	b29a      	uxth	r2, r3
 800973c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009740:	b29b      	uxth	r3, r3
 8009742:	029b      	lsls	r3, r3, #10
 8009744:	b29b      	uxth	r3, r3
 8009746:	4313      	orrs	r3, r2
 8009748:	b29b      	uxth	r3, r3
 800974a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800974e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009752:	b29a      	uxth	r2, r3
 8009754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009756:	801a      	strh	r2, [r3, #0]
 8009758:	e04a      	b.n	80097f0 <USB_EPStartXfer+0x52c>
 800975a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800975e:	2b00      	cmp	r3, #0
 8009760:	d10a      	bne.n	8009778 <USB_EPStartXfer+0x4b4>
 8009762:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009764:	881b      	ldrh	r3, [r3, #0]
 8009766:	b29b      	uxth	r3, r3
 8009768:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800976c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009770:	b29a      	uxth	r2, r3
 8009772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009774:	801a      	strh	r2, [r3, #0]
 8009776:	e03b      	b.n	80097f0 <USB_EPStartXfer+0x52c>
 8009778:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800977c:	085b      	lsrs	r3, r3, #1
 800977e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009782:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009786:	f003 0301 	and.w	r3, r3, #1
 800978a:	2b00      	cmp	r3, #0
 800978c:	d004      	beq.n	8009798 <USB_EPStartXfer+0x4d4>
 800978e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009792:	3301      	adds	r3, #1
 8009794:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800979a:	881b      	ldrh	r3, [r3, #0]
 800979c:	b29a      	uxth	r2, r3
 800979e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	029b      	lsls	r3, r3, #10
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	4313      	orrs	r3, r2
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097ae:	801a      	strh	r2, [r3, #0]
 80097b0:	e01e      	b.n	80097f0 <USB_EPStartXfer+0x52c>
 80097b2:	463b      	mov	r3, r7
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	785b      	ldrb	r3, [r3, #1]
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d119      	bne.n	80097f0 <USB_EPStartXfer+0x52c>
 80097bc:	1d3b      	adds	r3, r7, #4
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	653b      	str	r3, [r7, #80]	; 0x50
 80097c2:	1d3b      	adds	r3, r7, #4
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	461a      	mov	r2, r3
 80097ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097d0:	4413      	add	r3, r2
 80097d2:	653b      	str	r3, [r7, #80]	; 0x50
 80097d4:	463b      	mov	r3, r7
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	011a      	lsls	r2, r3, #4
 80097dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097de:	4413      	add	r3, r2
 80097e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80097e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097ea:	b29a      	uxth	r2, r3
 80097ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097ee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80097f0:	463b      	mov	r3, r7
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	891b      	ldrh	r3, [r3, #8]
 80097f6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80097fa:	463b      	mov	r3, r7
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	6959      	ldr	r1, [r3, #20]
 8009800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009804:	b29b      	uxth	r3, r3
 8009806:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800980a:	1d38      	adds	r0, r7, #4
 800980c:	6800      	ldr	r0, [r0, #0]
 800980e:	f000 ffe3 	bl	800a7d8 <USB_WritePMA>
            ep->xfer_buff += len;
 8009812:	463b      	mov	r3, r7
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	695a      	ldr	r2, [r3, #20]
 8009818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800981c:	441a      	add	r2, r3
 800981e:	463b      	mov	r3, r7
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009824:	463b      	mov	r3, r7
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	6a1a      	ldr	r2, [r3, #32]
 800982a:	463b      	mov	r3, r7
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	691b      	ldr	r3, [r3, #16]
 8009830:	429a      	cmp	r2, r3
 8009832:	d909      	bls.n	8009848 <USB_EPStartXfer+0x584>
            {
              ep->xfer_len_db -= len;
 8009834:	463b      	mov	r3, r7
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	6a1a      	ldr	r2, [r3, #32]
 800983a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800983e:	1ad2      	subs	r2, r2, r3
 8009840:	463b      	mov	r3, r7
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	621a      	str	r2, [r3, #32]
 8009846:	e008      	b.n	800985a <USB_EPStartXfer+0x596>
            }
            else
            {
              len = ep->xfer_len_db;
 8009848:	463b      	mov	r3, r7
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	6a1b      	ldr	r3, [r3, #32]
 800984e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009852:	463b      	mov	r3, r7
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2200      	movs	r2, #0
 8009858:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800985a:	1d3b      	adds	r3, r7, #4
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	643b      	str	r3, [r7, #64]	; 0x40
 8009860:	463b      	mov	r3, r7
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	785b      	ldrb	r3, [r3, #1]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d16e      	bne.n	8009948 <USB_EPStartXfer+0x684>
 800986a:	1d3b      	adds	r3, r7, #4
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009870:	1d3b      	adds	r3, r7, #4
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009878:	b29b      	uxth	r3, r3
 800987a:	461a      	mov	r2, r3
 800987c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987e:	4413      	add	r3, r2
 8009880:	63bb      	str	r3, [r7, #56]	; 0x38
 8009882:	463b      	mov	r3, r7
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	011a      	lsls	r2, r3, #4
 800988a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800988c:	4413      	add	r3, r2
 800988e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009892:	637b      	str	r3, [r7, #52]	; 0x34
 8009894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009896:	881b      	ldrh	r3, [r3, #0]
 8009898:	b29b      	uxth	r3, r3
 800989a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800989e:	b29a      	uxth	r2, r3
 80098a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098a2:	801a      	strh	r2, [r3, #0]
 80098a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098a8:	2b3e      	cmp	r3, #62	; 0x3e
 80098aa:	d921      	bls.n	80098f0 <USB_EPStartXfer+0x62c>
 80098ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098b0:	095b      	lsrs	r3, r3, #5
 80098b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80098b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098ba:	f003 031f 	and.w	r3, r3, #31
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d104      	bne.n	80098cc <USB_EPStartXfer+0x608>
 80098c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098c6:	3b01      	subs	r3, #1
 80098c8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80098cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098ce:	881b      	ldrh	r3, [r3, #0]
 80098d0:	b29a      	uxth	r2, r3
 80098d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	029b      	lsls	r3, r3, #10
 80098da:	b29b      	uxth	r3, r3
 80098dc:	4313      	orrs	r3, r2
 80098de:	b29b      	uxth	r3, r3
 80098e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098e8:	b29a      	uxth	r2, r3
 80098ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098ec:	801a      	strh	r2, [r3, #0]
 80098ee:	e047      	b.n	8009980 <USB_EPStartXfer+0x6bc>
 80098f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d10a      	bne.n	800990e <USB_EPStartXfer+0x64a>
 80098f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098fa:	881b      	ldrh	r3, [r3, #0]
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009902:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009906:	b29a      	uxth	r2, r3
 8009908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800990a:	801a      	strh	r2, [r3, #0]
 800990c:	e038      	b.n	8009980 <USB_EPStartXfer+0x6bc>
 800990e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009912:	085b      	lsrs	r3, r3, #1
 8009914:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800991c:	f003 0301 	and.w	r3, r3, #1
 8009920:	2b00      	cmp	r3, #0
 8009922:	d004      	beq.n	800992e <USB_EPStartXfer+0x66a>
 8009924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009928:	3301      	adds	r3, #1
 800992a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800992e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009930:	881b      	ldrh	r3, [r3, #0]
 8009932:	b29a      	uxth	r2, r3
 8009934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009938:	b29b      	uxth	r3, r3
 800993a:	029b      	lsls	r3, r3, #10
 800993c:	b29b      	uxth	r3, r3
 800993e:	4313      	orrs	r3, r2
 8009940:	b29a      	uxth	r2, r3
 8009942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009944:	801a      	strh	r2, [r3, #0]
 8009946:	e01b      	b.n	8009980 <USB_EPStartXfer+0x6bc>
 8009948:	463b      	mov	r3, r7
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	785b      	ldrb	r3, [r3, #1]
 800994e:	2b01      	cmp	r3, #1
 8009950:	d116      	bne.n	8009980 <USB_EPStartXfer+0x6bc>
 8009952:	1d3b      	adds	r3, r7, #4
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800995a:	b29b      	uxth	r3, r3
 800995c:	461a      	mov	r2, r3
 800995e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009960:	4413      	add	r3, r2
 8009962:	643b      	str	r3, [r7, #64]	; 0x40
 8009964:	463b      	mov	r3, r7
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	011a      	lsls	r2, r3, #4
 800996c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800996e:	4413      	add	r3, r2
 8009970:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009974:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800997a:	b29a      	uxth	r2, r3
 800997c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800997e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009980:	463b      	mov	r3, r7
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	895b      	ldrh	r3, [r3, #10]
 8009986:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800998a:	463b      	mov	r3, r7
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	6959      	ldr	r1, [r3, #20]
 8009990:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009994:	b29b      	uxth	r3, r3
 8009996:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800999a:	1d38      	adds	r0, r7, #4
 800999c:	6800      	ldr	r0, [r0, #0]
 800999e:	f000 ff1b 	bl	800a7d8 <USB_WritePMA>
 80099a2:	e1b8      	b.n	8009d16 <USB_EPStartXfer+0xa52>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80099a4:	463b      	mov	r3, r7
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	6a1b      	ldr	r3, [r3, #32]
 80099aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80099ae:	1d3b      	adds	r3, r7, #4
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	463b      	mov	r3, r7
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	4413      	add	r3, r2
 80099bc:	881b      	ldrh	r3, [r3, #0]
 80099be:	b29b      	uxth	r3, r3
 80099c0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80099c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099c8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80099cc:	1d3b      	adds	r3, r7, #4
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	463b      	mov	r3, r7
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	441a      	add	r2, r3
 80099da:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80099de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80099f2:	1d3b      	adds	r3, r7, #4
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099f8:	1d3b      	adds	r3, r7, #4
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	461a      	mov	r2, r3
 8009a04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a06:	4413      	add	r3, r2
 8009a08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a0a:	463b      	mov	r3, r7
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	011a      	lsls	r2, r3, #4
 8009a12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a14:	4413      	add	r3, r2
 8009a16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009a1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a20:	b29a      	uxth	r2, r3
 8009a22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a24:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009a26:	463b      	mov	r3, r7
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	891b      	ldrh	r3, [r3, #8]
 8009a2c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a30:	463b      	mov	r3, r7
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	6959      	ldr	r1, [r3, #20]
 8009a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009a40:	1d38      	adds	r0, r7, #4
 8009a42:	6800      	ldr	r0, [r0, #0]
 8009a44:	f000 fec8 	bl	800a7d8 <USB_WritePMA>
 8009a48:	e165      	b.n	8009d16 <USB_EPStartXfer+0xa52>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009a4a:	463b      	mov	r3, r7
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	6a1a      	ldr	r2, [r3, #32]
 8009a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a54:	1ad2      	subs	r2, r2, r3
 8009a56:	463b      	mov	r3, r7
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009a5c:	1d3b      	adds	r3, r7, #4
 8009a5e:	681a      	ldr	r2, [r3, #0]
 8009a60:	463b      	mov	r3, r7
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	4413      	add	r3, r2
 8009a6a:	881b      	ldrh	r3, [r3, #0]
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	f000 80a5 	beq.w	8009bc2 <USB_EPStartXfer+0x8fe>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009a78:	1d3b      	adds	r3, r7, #4
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	673b      	str	r3, [r7, #112]	; 0x70
 8009a7e:	463b      	mov	r3, r7
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	785b      	ldrb	r3, [r3, #1]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d16e      	bne.n	8009b66 <USB_EPStartXfer+0x8a2>
 8009a88:	1d3b      	adds	r3, r7, #4
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a8e:	1d3b      	adds	r3, r7, #4
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	461a      	mov	r2, r3
 8009a9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009a9c:	4413      	add	r3, r2
 8009a9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009aa0:	463b      	mov	r3, r7
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	011a      	lsls	r2, r3, #4
 8009aa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009aaa:	4413      	add	r3, r2
 8009aac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009ab0:	667b      	str	r3, [r7, #100]	; 0x64
 8009ab2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ab4:	881b      	ldrh	r3, [r3, #0]
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009abc:	b29a      	uxth	r2, r3
 8009abe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ac0:	801a      	strh	r2, [r3, #0]
 8009ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ac6:	2b3e      	cmp	r3, #62	; 0x3e
 8009ac8:	d921      	bls.n	8009b0e <USB_EPStartXfer+0x84a>
 8009aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ace:	095b      	lsrs	r3, r3, #5
 8009ad0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ad8:	f003 031f 	and.w	r3, r3, #31
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d104      	bne.n	8009aea <USB_EPStartXfer+0x826>
 8009ae0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009ae4:	3b01      	subs	r3, #1
 8009ae6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009aea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009aec:	881b      	ldrh	r3, [r3, #0]
 8009aee:	b29a      	uxth	r2, r3
 8009af0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	029b      	lsls	r3, r3, #10
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	4313      	orrs	r3, r2
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b06:	b29a      	uxth	r2, r3
 8009b08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b0a:	801a      	strh	r2, [r3, #0]
 8009b0c:	e047      	b.n	8009b9e <USB_EPStartXfer+0x8da>
 8009b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d10a      	bne.n	8009b2c <USB_EPStartXfer+0x868>
 8009b16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b18:	881b      	ldrh	r3, [r3, #0]
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b24:	b29a      	uxth	r2, r3
 8009b26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b28:	801a      	strh	r2, [r3, #0]
 8009b2a:	e038      	b.n	8009b9e <USB_EPStartXfer+0x8da>
 8009b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b30:	085b      	lsrs	r3, r3, #1
 8009b32:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b3a:	f003 0301 	and.w	r3, r3, #1
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d004      	beq.n	8009b4c <USB_EPStartXfer+0x888>
 8009b42:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009b46:	3301      	adds	r3, #1
 8009b48:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009b4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b4e:	881b      	ldrh	r3, [r3, #0]
 8009b50:	b29a      	uxth	r2, r3
 8009b52:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	029b      	lsls	r3, r3, #10
 8009b5a:	b29b      	uxth	r3, r3
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	b29a      	uxth	r2, r3
 8009b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b62:	801a      	strh	r2, [r3, #0]
 8009b64:	e01b      	b.n	8009b9e <USB_EPStartXfer+0x8da>
 8009b66:	463b      	mov	r3, r7
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	785b      	ldrb	r3, [r3, #1]
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d116      	bne.n	8009b9e <USB_EPStartXfer+0x8da>
 8009b70:	1d3b      	adds	r3, r7, #4
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b7e:	4413      	add	r3, r2
 8009b80:	673b      	str	r3, [r7, #112]	; 0x70
 8009b82:	463b      	mov	r3, r7
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	011a      	lsls	r2, r3, #4
 8009b8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b8c:	4413      	add	r3, r2
 8009b8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009b92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b98:	b29a      	uxth	r2, r3
 8009b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b9c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009b9e:	463b      	mov	r3, r7
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	895b      	ldrh	r3, [r3, #10]
 8009ba4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ba8:	463b      	mov	r3, r7
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	6959      	ldr	r1, [r3, #20]
 8009bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009bb8:	1d38      	adds	r0, r7, #4
 8009bba:	6800      	ldr	r0, [r0, #0]
 8009bbc:	f000 fe0c 	bl	800a7d8 <USB_WritePMA>
 8009bc0:	e0a9      	b.n	8009d16 <USB_EPStartXfer+0xa52>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009bc2:	463b      	mov	r3, r7
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	785b      	ldrb	r3, [r3, #1]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d16e      	bne.n	8009caa <USB_EPStartXfer+0x9e6>
 8009bcc:	1d3b      	adds	r3, r7, #4
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009bd2:	1d3b      	adds	r3, r7, #4
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	461a      	mov	r2, r3
 8009bde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009be0:	4413      	add	r3, r2
 8009be2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009be4:	463b      	mov	r3, r7
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	011a      	lsls	r2, r3, #4
 8009bec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009bee:	4413      	add	r3, r2
 8009bf0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009bf4:	67bb      	str	r3, [r7, #120]	; 0x78
 8009bf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bf8:	881b      	ldrh	r3, [r3, #0]
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c00:	b29a      	uxth	r2, r3
 8009c02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c04:	801a      	strh	r2, [r3, #0]
 8009c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c0a:	2b3e      	cmp	r3, #62	; 0x3e
 8009c0c:	d921      	bls.n	8009c52 <USB_EPStartXfer+0x98e>
 8009c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c12:	095b      	lsrs	r3, r3, #5
 8009c14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c1c:	f003 031f 	and.w	r3, r3, #31
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d104      	bne.n	8009c2e <USB_EPStartXfer+0x96a>
 8009c24:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009c28:	3b01      	subs	r3, #1
 8009c2a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009c2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c30:	881b      	ldrh	r3, [r3, #0]
 8009c32:	b29a      	uxth	r2, r3
 8009c34:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	029b      	lsls	r3, r3, #10
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c4a:	b29a      	uxth	r2, r3
 8009c4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c4e:	801a      	strh	r2, [r3, #0]
 8009c50:	e050      	b.n	8009cf4 <USB_EPStartXfer+0xa30>
 8009c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d10a      	bne.n	8009c70 <USB_EPStartXfer+0x9ac>
 8009c5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c5c:	881b      	ldrh	r3, [r3, #0]
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c68:	b29a      	uxth	r2, r3
 8009c6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c6c:	801a      	strh	r2, [r3, #0]
 8009c6e:	e041      	b.n	8009cf4 <USB_EPStartXfer+0xa30>
 8009c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c74:	085b      	lsrs	r3, r3, #1
 8009c76:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c7e:	f003 0301 	and.w	r3, r3, #1
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d004      	beq.n	8009c90 <USB_EPStartXfer+0x9cc>
 8009c86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009c90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c92:	881b      	ldrh	r3, [r3, #0]
 8009c94:	b29a      	uxth	r2, r3
 8009c96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	029b      	lsls	r3, r3, #10
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	b29a      	uxth	r2, r3
 8009ca4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ca6:	801a      	strh	r2, [r3, #0]
 8009ca8:	e024      	b.n	8009cf4 <USB_EPStartXfer+0xa30>
 8009caa:	463b      	mov	r3, r7
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	785b      	ldrb	r3, [r3, #1]
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d11f      	bne.n	8009cf4 <USB_EPStartXfer+0xa30>
 8009cb4:	1d3b      	adds	r3, r7, #4
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009cbc:	1d3b      	adds	r3, r7, #4
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ccc:	4413      	add	r3, r2
 8009cce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009cd2:	463b      	mov	r3, r7
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	011a      	lsls	r2, r3, #4
 8009cda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009cde:	4413      	add	r3, r2
 8009ce0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009ce4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cec:	b29a      	uxth	r2, r3
 8009cee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009cf2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009cf4:	463b      	mov	r3, r7
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	891b      	ldrh	r3, [r3, #8]
 8009cfa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009cfe:	463b      	mov	r3, r7
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	6959      	ldr	r1, [r3, #20]
 8009d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009d0e:	1d38      	adds	r0, r7, #4
 8009d10:	6800      	ldr	r0, [r0, #0]
 8009d12:	f000 fd61 	bl	800a7d8 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009d16:	1d3b      	adds	r3, r7, #4
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	463b      	mov	r3, r7
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	4413      	add	r3, r2
 8009d24:	881b      	ldrh	r3, [r3, #0]
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d30:	817b      	strh	r3, [r7, #10]
 8009d32:	897b      	ldrh	r3, [r7, #10]
 8009d34:	f083 0310 	eor.w	r3, r3, #16
 8009d38:	817b      	strh	r3, [r7, #10]
 8009d3a:	897b      	ldrh	r3, [r7, #10]
 8009d3c:	f083 0320 	eor.w	r3, r3, #32
 8009d40:	817b      	strh	r3, [r7, #10]
 8009d42:	1d3b      	adds	r3, r7, #4
 8009d44:	681a      	ldr	r2, [r3, #0]
 8009d46:	463b      	mov	r3, r7
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	441a      	add	r2, r3
 8009d50:	897b      	ldrh	r3, [r7, #10]
 8009d52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	8013      	strh	r3, [r2, #0]
 8009d66:	e3f3      	b.n	800a550 <USB_EPStartXfer+0x128c>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009d68:	463b      	mov	r3, r7
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	7b1b      	ldrb	r3, [r3, #12]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f040 809c 	bne.w	8009eac <USB_EPStartXfer+0xbe8>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009d74:	463b      	mov	r3, r7
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	699a      	ldr	r2, [r3, #24]
 8009d7a:	463b      	mov	r3, r7
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	691b      	ldr	r3, [r3, #16]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d90e      	bls.n	8009da2 <USB_EPStartXfer+0xade>
      {
        len = ep->maxpacket;
 8009d84:	463b      	mov	r3, r7
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	691b      	ldr	r3, [r3, #16]
 8009d8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8009d8e:	463b      	mov	r3, r7
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	699a      	ldr	r2, [r3, #24]
 8009d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d98:	1ad2      	subs	r2, r2, r3
 8009d9a:	463b      	mov	r3, r7
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	619a      	str	r2, [r3, #24]
 8009da0:	e008      	b.n	8009db4 <USB_EPStartXfer+0xaf0>
      }
      else
      {
        len = ep->xfer_len;
 8009da2:	463b      	mov	r3, r7
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	699b      	ldr	r3, [r3, #24]
 8009da8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8009dac:	463b      	mov	r3, r7
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2200      	movs	r2, #0
 8009db2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009db4:	1d3b      	adds	r3, r7, #4
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009dbc:	1d3b      	adds	r3, r7, #4
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009dcc:	4413      	add	r3, r2
 8009dce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009dd2:	463b      	mov	r3, r7
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	011a      	lsls	r2, r3, #4
 8009dda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009dde:	4413      	add	r3, r2
 8009de0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009de4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009de8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009dec:	881b      	ldrh	r3, [r3, #0]
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009df4:	b29a      	uxth	r2, r3
 8009df6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009dfa:	801a      	strh	r2, [r3, #0]
 8009dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e00:	2b3e      	cmp	r3, #62	; 0x3e
 8009e02:	d923      	bls.n	8009e4c <USB_EPStartXfer+0xb88>
 8009e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e08:	095b      	lsrs	r3, r3, #5
 8009e0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e12:	f003 031f 	and.w	r3, r3, #31
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d104      	bne.n	8009e24 <USB_EPStartXfer+0xb60>
 8009e1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009e1e:	3b01      	subs	r3, #1
 8009e20:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009e24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e28:	881b      	ldrh	r3, [r3, #0]
 8009e2a:	b29a      	uxth	r2, r3
 8009e2c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	029b      	lsls	r3, r3, #10
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	4313      	orrs	r3, r2
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e42:	b29a      	uxth	r2, r3
 8009e44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e48:	801a      	strh	r2, [r3, #0]
 8009e4a:	e353      	b.n	800a4f4 <USB_EPStartXfer+0x1230>
 8009e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d10c      	bne.n	8009e6e <USB_EPStartXfer+0xbaa>
 8009e54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e58:	881b      	ldrh	r3, [r3, #0]
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e64:	b29a      	uxth	r2, r3
 8009e66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e6a:	801a      	strh	r2, [r3, #0]
 8009e6c:	e342      	b.n	800a4f4 <USB_EPStartXfer+0x1230>
 8009e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e72:	085b      	lsrs	r3, r3, #1
 8009e74:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e7c:	f003 0301 	and.w	r3, r3, #1
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d004      	beq.n	8009e8e <USB_EPStartXfer+0xbca>
 8009e84:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009e88:	3301      	adds	r3, #1
 8009e8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009e8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e92:	881b      	ldrh	r3, [r3, #0]
 8009e94:	b29a      	uxth	r2, r3
 8009e96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	029b      	lsls	r3, r3, #10
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	b29a      	uxth	r2, r3
 8009ea4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ea8:	801a      	strh	r2, [r3, #0]
 8009eaa:	e323      	b.n	800a4f4 <USB_EPStartXfer+0x1230>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009eac:	463b      	mov	r3, r7
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	78db      	ldrb	r3, [r3, #3]
 8009eb2:	2b02      	cmp	r3, #2
 8009eb4:	f040 81a9 	bne.w	800a20a <USB_EPStartXfer+0xf46>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009eb8:	463b      	mov	r3, r7
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	785b      	ldrb	r3, [r3, #1]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f040 8082 	bne.w	8009fc8 <USB_EPStartXfer+0xd04>
 8009ec4:	1d3b      	adds	r3, r7, #4
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009ecc:	1d3b      	adds	r3, r7, #4
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009edc:	4413      	add	r3, r2
 8009ede:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009ee2:	463b      	mov	r3, r7
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	011a      	lsls	r2, r3, #4
 8009eea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009eee:	4413      	add	r3, r2
 8009ef0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009ef4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009ef8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009efc:	881b      	ldrh	r3, [r3, #0]
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f04:	b29a      	uxth	r2, r3
 8009f06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009f0a:	801a      	strh	r2, [r3, #0]
 8009f0c:	463b      	mov	r3, r7
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	691b      	ldr	r3, [r3, #16]
 8009f12:	2b3e      	cmp	r3, #62	; 0x3e
 8009f14:	d925      	bls.n	8009f62 <USB_EPStartXfer+0xc9e>
 8009f16:	463b      	mov	r3, r7
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	691b      	ldr	r3, [r3, #16]
 8009f1c:	095b      	lsrs	r3, r3, #5
 8009f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009f22:	463b      	mov	r3, r7
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	691b      	ldr	r3, [r3, #16]
 8009f28:	f003 031f 	and.w	r3, r3, #31
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d104      	bne.n	8009f3a <USB_EPStartXfer+0xc76>
 8009f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f34:	3b01      	subs	r3, #1
 8009f36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009f3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009f3e:	881b      	ldrh	r3, [r3, #0]
 8009f40:	b29a      	uxth	r2, r3
 8009f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	029b      	lsls	r3, r3, #10
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f58:	b29a      	uxth	r2, r3
 8009f5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009f5e:	801a      	strh	r2, [r3, #0]
 8009f60:	e058      	b.n	800a014 <USB_EPStartXfer+0xd50>
 8009f62:	463b      	mov	r3, r7
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	691b      	ldr	r3, [r3, #16]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d10c      	bne.n	8009f86 <USB_EPStartXfer+0xcc2>
 8009f6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009f70:	881b      	ldrh	r3, [r3, #0]
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f7c:	b29a      	uxth	r2, r3
 8009f7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009f82:	801a      	strh	r2, [r3, #0]
 8009f84:	e046      	b.n	800a014 <USB_EPStartXfer+0xd50>
 8009f86:	463b      	mov	r3, r7
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	691b      	ldr	r3, [r3, #16]
 8009f8c:	085b      	lsrs	r3, r3, #1
 8009f8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009f92:	463b      	mov	r3, r7
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	691b      	ldr	r3, [r3, #16]
 8009f98:	f003 0301 	and.w	r3, r3, #1
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d004      	beq.n	8009faa <USB_EPStartXfer+0xce6>
 8009fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009faa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009fae:	881b      	ldrh	r3, [r3, #0]
 8009fb0:	b29a      	uxth	r2, r3
 8009fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	029b      	lsls	r3, r3, #10
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	b29a      	uxth	r2, r3
 8009fc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009fc4:	801a      	strh	r2, [r3, #0]
 8009fc6:	e025      	b.n	800a014 <USB_EPStartXfer+0xd50>
 8009fc8:	463b      	mov	r3, r7
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	785b      	ldrb	r3, [r3, #1]
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d120      	bne.n	800a014 <USB_EPStartXfer+0xd50>
 8009fd2:	1d3b      	adds	r3, r7, #4
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009fda:	1d3b      	adds	r3, r7, #4
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fe2:	b29b      	uxth	r3, r3
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009fea:	4413      	add	r3, r2
 8009fec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009ff0:	463b      	mov	r3, r7
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	011a      	lsls	r2, r3, #4
 8009ff8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009ffc:	4413      	add	r3, r2
 8009ffe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a002:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a006:	463b      	mov	r3, r7
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	691b      	ldr	r3, [r3, #16]
 800a00c:	b29a      	uxth	r2, r3
 800a00e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a012:	801a      	strh	r2, [r3, #0]
 800a014:	1d3b      	adds	r3, r7, #4
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a01c:	463b      	mov	r3, r7
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	785b      	ldrb	r3, [r3, #1]
 800a022:	2b00      	cmp	r3, #0
 800a024:	f040 8082 	bne.w	800a12c <USB_EPStartXfer+0xe68>
 800a028:	1d3b      	adds	r3, r7, #4
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a030:	1d3b      	adds	r3, r7, #4
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a038:	b29b      	uxth	r3, r3
 800a03a:	461a      	mov	r2, r3
 800a03c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a040:	4413      	add	r3, r2
 800a042:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a046:	463b      	mov	r3, r7
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	011a      	lsls	r2, r3, #4
 800a04e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a052:	4413      	add	r3, r2
 800a054:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a058:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a05c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a060:	881b      	ldrh	r3, [r3, #0]
 800a062:	b29b      	uxth	r3, r3
 800a064:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a068:	b29a      	uxth	r2, r3
 800a06a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a06e:	801a      	strh	r2, [r3, #0]
 800a070:	463b      	mov	r3, r7
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	691b      	ldr	r3, [r3, #16]
 800a076:	2b3e      	cmp	r3, #62	; 0x3e
 800a078:	d925      	bls.n	800a0c6 <USB_EPStartXfer+0xe02>
 800a07a:	463b      	mov	r3, r7
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	691b      	ldr	r3, [r3, #16]
 800a080:	095b      	lsrs	r3, r3, #5
 800a082:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a086:	463b      	mov	r3, r7
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	691b      	ldr	r3, [r3, #16]
 800a08c:	f003 031f 	and.w	r3, r3, #31
 800a090:	2b00      	cmp	r3, #0
 800a092:	d104      	bne.n	800a09e <USB_EPStartXfer+0xdda>
 800a094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a098:	3b01      	subs	r3, #1
 800a09a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a09e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a0a2:	881b      	ldrh	r3, [r3, #0]
 800a0a4:	b29a      	uxth	r2, r3
 800a0a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	029b      	lsls	r3, r3, #10
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0bc:	b29a      	uxth	r2, r3
 800a0be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a0c2:	801a      	strh	r2, [r3, #0]
 800a0c4:	e054      	b.n	800a170 <USB_EPStartXfer+0xeac>
 800a0c6:	463b      	mov	r3, r7
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	691b      	ldr	r3, [r3, #16]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d10c      	bne.n	800a0ea <USB_EPStartXfer+0xe26>
 800a0d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a0d4:	881b      	ldrh	r3, [r3, #0]
 800a0d6:	b29b      	uxth	r3, r3
 800a0d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0e0:	b29a      	uxth	r2, r3
 800a0e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a0e6:	801a      	strh	r2, [r3, #0]
 800a0e8:	e042      	b.n	800a170 <USB_EPStartXfer+0xeac>
 800a0ea:	463b      	mov	r3, r7
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	691b      	ldr	r3, [r3, #16]
 800a0f0:	085b      	lsrs	r3, r3, #1
 800a0f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a0f6:	463b      	mov	r3, r7
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	691b      	ldr	r3, [r3, #16]
 800a0fc:	f003 0301 	and.w	r3, r3, #1
 800a100:	2b00      	cmp	r3, #0
 800a102:	d004      	beq.n	800a10e <USB_EPStartXfer+0xe4a>
 800a104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a108:	3301      	adds	r3, #1
 800a10a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a10e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a112:	881b      	ldrh	r3, [r3, #0]
 800a114:	b29a      	uxth	r2, r3
 800a116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	029b      	lsls	r3, r3, #10
 800a11e:	b29b      	uxth	r3, r3
 800a120:	4313      	orrs	r3, r2
 800a122:	b29a      	uxth	r2, r3
 800a124:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a128:	801a      	strh	r2, [r3, #0]
 800a12a:	e021      	b.n	800a170 <USB_EPStartXfer+0xeac>
 800a12c:	463b      	mov	r3, r7
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	785b      	ldrb	r3, [r3, #1]
 800a132:	2b01      	cmp	r3, #1
 800a134:	d11c      	bne.n	800a170 <USB_EPStartXfer+0xeac>
 800a136:	1d3b      	adds	r3, r7, #4
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a13e:	b29b      	uxth	r3, r3
 800a140:	461a      	mov	r2, r3
 800a142:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a146:	4413      	add	r3, r2
 800a148:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a14c:	463b      	mov	r3, r7
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	011a      	lsls	r2, r3, #4
 800a154:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a158:	4413      	add	r3, r2
 800a15a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a15e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a162:	463b      	mov	r3, r7
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	691b      	ldr	r3, [r3, #16]
 800a168:	b29a      	uxth	r2, r3
 800a16a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a16e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a170:	463b      	mov	r3, r7
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	69db      	ldr	r3, [r3, #28]
 800a176:	2b00      	cmp	r3, #0
 800a178:	f000 81bc 	beq.w	800a4f4 <USB_EPStartXfer+0x1230>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a17c:	1d3b      	adds	r3, r7, #4
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	463b      	mov	r3, r7
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	4413      	add	r3, r2
 800a18a:	881b      	ldrh	r3, [r3, #0]
 800a18c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a190:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a194:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d005      	beq.n	800a1a8 <USB_EPStartXfer+0xee4>
 800a19c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a1a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d10d      	bne.n	800a1c4 <USB_EPStartXfer+0xf00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a1a8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a1ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f040 819f 	bne.w	800a4f4 <USB_EPStartXfer+0x1230>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a1b6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a1ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	f040 8198 	bne.w	800a4f4 <USB_EPStartXfer+0x1230>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a1c4:	1d3b      	adds	r3, r7, #4
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	463b      	mov	r3, r7
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	4413      	add	r3, r2
 800a1d2:	881b      	ldrh	r3, [r3, #0]
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1de:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800a1e2:	1d3b      	adds	r3, r7, #4
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	463b      	mov	r3, r7
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	441a      	add	r2, r3
 800a1f0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800a1f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a200:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a204:	b29b      	uxth	r3, r3
 800a206:	8013      	strh	r3, [r2, #0]
 800a208:	e174      	b.n	800a4f4 <USB_EPStartXfer+0x1230>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a20a:	463b      	mov	r3, r7
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	78db      	ldrb	r3, [r3, #3]
 800a210:	2b01      	cmp	r3, #1
 800a212:	f040 816d 	bne.w	800a4f0 <USB_EPStartXfer+0x122c>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a216:	463b      	mov	r3, r7
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	699a      	ldr	r2, [r3, #24]
 800a21c:	463b      	mov	r3, r7
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	691b      	ldr	r3, [r3, #16]
 800a222:	429a      	cmp	r2, r3
 800a224:	d90e      	bls.n	800a244 <USB_EPStartXfer+0xf80>
        {
          len = ep->maxpacket;
 800a226:	463b      	mov	r3, r7
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	691b      	ldr	r3, [r3, #16]
 800a22c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800a230:	463b      	mov	r3, r7
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	699a      	ldr	r2, [r3, #24]
 800a236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a23a:	1ad2      	subs	r2, r2, r3
 800a23c:	463b      	mov	r3, r7
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	619a      	str	r2, [r3, #24]
 800a242:	e008      	b.n	800a256 <USB_EPStartXfer+0xf92>
        }
        else
        {
          len = ep->xfer_len;
 800a244:	463b      	mov	r3, r7
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	699b      	ldr	r3, [r3, #24]
 800a24a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800a24e:	463b      	mov	r3, r7
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	2200      	movs	r2, #0
 800a254:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a256:	463b      	mov	r3, r7
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	785b      	ldrb	r3, [r3, #1]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d17b      	bne.n	800a358 <USB_EPStartXfer+0x1094>
 800a260:	1d3b      	adds	r3, r7, #4
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a268:	1d3b      	adds	r3, r7, #4
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a270:	b29b      	uxth	r3, r3
 800a272:	461a      	mov	r2, r3
 800a274:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a278:	4413      	add	r3, r2
 800a27a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a27e:	463b      	mov	r3, r7
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	011a      	lsls	r2, r3, #4
 800a286:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a28a:	4413      	add	r3, r2
 800a28c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a290:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a294:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a298:	881b      	ldrh	r3, [r3, #0]
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a2a6:	801a      	strh	r2, [r3, #0]
 800a2a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2ac:	2b3e      	cmp	r3, #62	; 0x3e
 800a2ae:	d923      	bls.n	800a2f8 <USB_EPStartXfer+0x1034>
 800a2b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2b4:	095b      	lsrs	r3, r3, #5
 800a2b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a2ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2be:	f003 031f 	and.w	r3, r3, #31
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d104      	bne.n	800a2d0 <USB_EPStartXfer+0x100c>
 800a2c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2ca:	3b01      	subs	r3, #1
 800a2cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a2d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a2d4:	881b      	ldrh	r3, [r3, #0]
 800a2d6:	b29a      	uxth	r2, r3
 800a2d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	029b      	lsls	r3, r3, #10
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	b29b      	uxth	r3, r3
 800a2e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2ee:	b29a      	uxth	r2, r3
 800a2f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a2f4:	801a      	strh	r2, [r3, #0]
 800a2f6:	e054      	b.n	800a3a2 <USB_EPStartXfer+0x10de>
 800a2f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d10c      	bne.n	800a31a <USB_EPStartXfer+0x1056>
 800a300:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a304:	881b      	ldrh	r3, [r3, #0]
 800a306:	b29b      	uxth	r3, r3
 800a308:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a30c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a310:	b29a      	uxth	r2, r3
 800a312:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a316:	801a      	strh	r2, [r3, #0]
 800a318:	e043      	b.n	800a3a2 <USB_EPStartXfer+0x10de>
 800a31a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a31e:	085b      	lsrs	r3, r3, #1
 800a320:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a328:	f003 0301 	and.w	r3, r3, #1
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d004      	beq.n	800a33a <USB_EPStartXfer+0x1076>
 800a330:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a334:	3301      	adds	r3, #1
 800a336:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a33a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a33e:	881b      	ldrh	r3, [r3, #0]
 800a340:	b29a      	uxth	r2, r3
 800a342:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a346:	b29b      	uxth	r3, r3
 800a348:	029b      	lsls	r3, r3, #10
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	4313      	orrs	r3, r2
 800a34e:	b29a      	uxth	r2, r3
 800a350:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a354:	801a      	strh	r2, [r3, #0]
 800a356:	e024      	b.n	800a3a2 <USB_EPStartXfer+0x10de>
 800a358:	463b      	mov	r3, r7
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	785b      	ldrb	r3, [r3, #1]
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d11f      	bne.n	800a3a2 <USB_EPStartXfer+0x10de>
 800a362:	1d3b      	adds	r3, r7, #4
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a36a:	1d3b      	adds	r3, r7, #4
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a372:	b29b      	uxth	r3, r3
 800a374:	461a      	mov	r2, r3
 800a376:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a37a:	4413      	add	r3, r2
 800a37c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a380:	463b      	mov	r3, r7
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	781b      	ldrb	r3, [r3, #0]
 800a386:	011a      	lsls	r2, r3, #4
 800a388:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a38c:	4413      	add	r3, r2
 800a38e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a392:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a396:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a39a:	b29a      	uxth	r2, r3
 800a39c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a3a0:	801a      	strh	r2, [r3, #0]
 800a3a2:	1d3b      	adds	r3, r7, #4
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a3aa:	463b      	mov	r3, r7
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	785b      	ldrb	r3, [r3, #1]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d17b      	bne.n	800a4ac <USB_EPStartXfer+0x11e8>
 800a3b4:	1d3b      	adds	r3, r7, #4
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a3bc:	1d3b      	adds	r3, r7, #4
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3c4:	b29b      	uxth	r3, r3
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a3cc:	4413      	add	r3, r2
 800a3ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a3d2:	463b      	mov	r3, r7
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	011a      	lsls	r2, r3, #4
 800a3da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a3de:	4413      	add	r3, r2
 800a3e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a3e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a3e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a3ec:	881b      	ldrh	r3, [r3, #0]
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3f4:	b29a      	uxth	r2, r3
 800a3f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a3fa:	801a      	strh	r2, [r3, #0]
 800a3fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a400:	2b3e      	cmp	r3, #62	; 0x3e
 800a402:	d923      	bls.n	800a44c <USB_EPStartXfer+0x1188>
 800a404:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a408:	095b      	lsrs	r3, r3, #5
 800a40a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a40e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a412:	f003 031f 	and.w	r3, r3, #31
 800a416:	2b00      	cmp	r3, #0
 800a418:	d104      	bne.n	800a424 <USB_EPStartXfer+0x1160>
 800a41a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a41e:	3b01      	subs	r3, #1
 800a420:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a424:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a428:	881b      	ldrh	r3, [r3, #0]
 800a42a:	b29a      	uxth	r2, r3
 800a42c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a430:	b29b      	uxth	r3, r3
 800a432:	029b      	lsls	r3, r3, #10
 800a434:	b29b      	uxth	r3, r3
 800a436:	4313      	orrs	r3, r2
 800a438:	b29b      	uxth	r3, r3
 800a43a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a43e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a442:	b29a      	uxth	r2, r3
 800a444:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a448:	801a      	strh	r2, [r3, #0]
 800a44a:	e053      	b.n	800a4f4 <USB_EPStartXfer+0x1230>
 800a44c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a450:	2b00      	cmp	r3, #0
 800a452:	d10c      	bne.n	800a46e <USB_EPStartXfer+0x11aa>
 800a454:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a458:	881b      	ldrh	r3, [r3, #0]
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a460:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a464:	b29a      	uxth	r2, r3
 800a466:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a46a:	801a      	strh	r2, [r3, #0]
 800a46c:	e042      	b.n	800a4f4 <USB_EPStartXfer+0x1230>
 800a46e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a472:	085b      	lsrs	r3, r3, #1
 800a474:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a47c:	f003 0301 	and.w	r3, r3, #1
 800a480:	2b00      	cmp	r3, #0
 800a482:	d004      	beq.n	800a48e <USB_EPStartXfer+0x11ca>
 800a484:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a488:	3301      	adds	r3, #1
 800a48a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a48e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a492:	881b      	ldrh	r3, [r3, #0]
 800a494:	b29a      	uxth	r2, r3
 800a496:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	029b      	lsls	r3, r3, #10
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	b29a      	uxth	r2, r3
 800a4a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a4a8:	801a      	strh	r2, [r3, #0]
 800a4aa:	e023      	b.n	800a4f4 <USB_EPStartXfer+0x1230>
 800a4ac:	463b      	mov	r3, r7
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	785b      	ldrb	r3, [r3, #1]
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d11e      	bne.n	800a4f4 <USB_EPStartXfer+0x1230>
 800a4b6:	1d3b      	adds	r3, r7, #4
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a4c6:	4413      	add	r3, r2
 800a4c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a4cc:	463b      	mov	r3, r7
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	011a      	lsls	r2, r3, #4
 800a4d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a4d8:	4413      	add	r3, r2
 800a4da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a4de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a4e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4e6:	b29a      	uxth	r2, r3
 800a4e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a4ec:	801a      	strh	r2, [r3, #0]
 800a4ee:	e001      	b.n	800a4f4 <USB_EPStartXfer+0x1230>
      }
      else
      {
        return HAL_ERROR;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	e02e      	b.n	800a552 <USB_EPStartXfer+0x128e>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a4f4:	1d3b      	adds	r3, r7, #4
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	463b      	mov	r3, r7
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	009b      	lsls	r3, r3, #2
 800a500:	4413      	add	r3, r2
 800a502:	881b      	ldrh	r3, [r3, #0]
 800a504:	b29b      	uxth	r3, r3
 800a506:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a50a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a50e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a512:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a516:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a51a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a51e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a522:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a526:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a52a:	1d3b      	adds	r3, r7, #4
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	463b      	mov	r3, r7
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	441a      	add	r2, r3
 800a538:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a53c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a550:	2300      	movs	r3, #0
}
 800a552:	4618      	mov	r0, r3
 800a554:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b085      	sub	sp, #20
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	785b      	ldrb	r3, [r3, #1]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d020      	beq.n	800a5b0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	781b      	ldrb	r3, [r3, #0]
 800a574:	009b      	lsls	r3, r3, #2
 800a576:	4413      	add	r3, r2
 800a578:	881b      	ldrh	r3, [r3, #0]
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a580:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a584:	81bb      	strh	r3, [r7, #12]
 800a586:	89bb      	ldrh	r3, [r7, #12]
 800a588:	f083 0310 	eor.w	r3, r3, #16
 800a58c:	81bb      	strh	r3, [r7, #12]
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	441a      	add	r2, r3
 800a598:	89bb      	ldrh	r3, [r7, #12]
 800a59a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a59e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	8013      	strh	r3, [r2, #0]
 800a5ae:	e01f      	b.n	800a5f0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a5b0:	687a      	ldr	r2, [r7, #4]
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	4413      	add	r3, r2
 800a5ba:	881b      	ldrh	r3, [r3, #0]
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a5c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5c6:	81fb      	strh	r3, [r7, #14]
 800a5c8:	89fb      	ldrh	r3, [r7, #14]
 800a5ca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a5ce:	81fb      	strh	r3, [r7, #14]
 800a5d0:	687a      	ldr	r2, [r7, #4]
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	441a      	add	r2, r3
 800a5da:	89fb      	ldrh	r3, [r7, #14]
 800a5dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a5f0:	2300      	movs	r3, #0
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3714      	adds	r7, #20
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bc80      	pop	{r7}
 800a5fa:	4770      	bx	lr

0800a5fc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b087      	sub	sp, #28
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	7b1b      	ldrb	r3, [r3, #12]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	f040 809d 	bne.w	800a74a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	785b      	ldrb	r3, [r3, #1]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d04c      	beq.n	800a6b2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	4413      	add	r3, r2
 800a622:	881b      	ldrh	r3, [r3, #0]
 800a624:	823b      	strh	r3, [r7, #16]
 800a626:	8a3b      	ldrh	r3, [r7, #16]
 800a628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d01b      	beq.n	800a668 <USB_EPClearStall+0x6c>
 800a630:	687a      	ldr	r2, [r7, #4]
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	009b      	lsls	r3, r3, #2
 800a638:	4413      	add	r3, r2
 800a63a:	881b      	ldrh	r3, [r3, #0]
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a646:	81fb      	strh	r3, [r7, #14]
 800a648:	687a      	ldr	r2, [r7, #4]
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	441a      	add	r2, r3
 800a652:	89fb      	ldrh	r3, [r7, #14]
 800a654:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a658:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a65c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a660:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a664:	b29b      	uxth	r3, r3
 800a666:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	78db      	ldrb	r3, [r3, #3]
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	d06c      	beq.n	800a74a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	009b      	lsls	r3, r3, #2
 800a678:	4413      	add	r3, r2
 800a67a:	881b      	ldrh	r3, [r3, #0]
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a682:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a686:	81bb      	strh	r3, [r7, #12]
 800a688:	89bb      	ldrh	r3, [r7, #12]
 800a68a:	f083 0320 	eor.w	r3, r3, #32
 800a68e:	81bb      	strh	r3, [r7, #12]
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	009b      	lsls	r3, r3, #2
 800a698:	441a      	add	r2, r3
 800a69a:	89bb      	ldrh	r3, [r7, #12]
 800a69c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	8013      	strh	r3, [r2, #0]
 800a6b0:	e04b      	b.n	800a74a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	4413      	add	r3, r2
 800a6bc:	881b      	ldrh	r3, [r3, #0]
 800a6be:	82fb      	strh	r3, [r7, #22]
 800a6c0:	8afb      	ldrh	r3, [r7, #22]
 800a6c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d01b      	beq.n	800a702 <USB_EPClearStall+0x106>
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	009b      	lsls	r3, r3, #2
 800a6d2:	4413      	add	r3, r2
 800a6d4:	881b      	ldrh	r3, [r3, #0]
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6e0:	82bb      	strh	r3, [r7, #20]
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	009b      	lsls	r3, r3, #2
 800a6ea:	441a      	add	r2, r3
 800a6ec:	8abb      	ldrh	r3, [r7, #20]
 800a6ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a6fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	4413      	add	r3, r2
 800a70c:	881b      	ldrh	r3, [r3, #0]
 800a70e:	b29b      	uxth	r3, r3
 800a710:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a718:	827b      	strh	r3, [r7, #18]
 800a71a:	8a7b      	ldrh	r3, [r7, #18]
 800a71c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a720:	827b      	strh	r3, [r7, #18]
 800a722:	8a7b      	ldrh	r3, [r7, #18]
 800a724:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a728:	827b      	strh	r3, [r7, #18]
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	441a      	add	r2, r3
 800a734:	8a7b      	ldrh	r3, [r7, #18]
 800a736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a73a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a73e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a746:	b29b      	uxth	r3, r3
 800a748:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a74a:	2300      	movs	r3, #0
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	371c      	adds	r7, #28
 800a750:	46bd      	mov	sp, r7
 800a752:	bc80      	pop	{r7}
 800a754:	4770      	bx	lr

0800a756 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a756:	b480      	push	{r7}
 800a758:	b083      	sub	sp, #12
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
 800a75e:	460b      	mov	r3, r1
 800a760:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a762:	78fb      	ldrb	r3, [r7, #3]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d103      	bne.n	800a770 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2280      	movs	r2, #128	; 0x80
 800a76c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	370c      	adds	r7, #12
 800a776:	46bd      	mov	sp, r7
 800a778:	bc80      	pop	{r7}
 800a77a:	4770      	bx	lr

0800a77c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a784:	2300      	movs	r3, #0
}
 800a786:	4618      	mov	r0, r3
 800a788:	370c      	adds	r7, #12
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bc80      	pop	{r7}
 800a78e:	4770      	bx	lr

0800a790 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a790:	b480      	push	{r7}
 800a792:	b083      	sub	sp, #12
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a798:	2300      	movs	r3, #0
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	370c      	adds	r7, #12
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bc80      	pop	{r7}
 800a7a2:	4770      	bx	lr

0800a7a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b085      	sub	sp, #20
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3714      	adds	r7, #20
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bc80      	pop	{r7}
 800a7c0:	4770      	bx	lr

0800a7c2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a7c2:	b480      	push	{r7}
 800a7c4:	b083      	sub	sp, #12
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
 800a7ca:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a7cc:	2300      	movs	r3, #0
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	370c      	adds	r7, #12
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bc80      	pop	{r7}
 800a7d6:	4770      	bx	lr

0800a7d8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b08b      	sub	sp, #44	; 0x2c
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	60f8      	str	r0, [r7, #12]
 800a7e0:	60b9      	str	r1, [r7, #8]
 800a7e2:	4611      	mov	r1, r2
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	80fb      	strh	r3, [r7, #6]
 800a7ea:	4613      	mov	r3, r2
 800a7ec:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a7ee:	88bb      	ldrh	r3, [r7, #4]
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	085b      	lsrs	r3, r3, #1
 800a7f4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a7fe:	88fb      	ldrh	r3, [r7, #6]
 800a800:	005a      	lsls	r2, r3, #1
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	4413      	add	r3, r2
 800a806:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a80a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a80c:	69bb      	ldr	r3, [r7, #24]
 800a80e:	627b      	str	r3, [r7, #36]	; 0x24
 800a810:	e01e      	b.n	800a850 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800a812:	69fb      	ldr	r3, [r7, #28]
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a818:	69fb      	ldr	r3, [r7, #28]
 800a81a:	3301      	adds	r3, #1
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	021b      	lsls	r3, r3, #8
 800a820:	b21a      	sxth	r2, r3
 800a822:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a826:	4313      	orrs	r3, r2
 800a828:	b21b      	sxth	r3, r3
 800a82a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a82c:	6a3b      	ldr	r3, [r7, #32]
 800a82e:	8a7a      	ldrh	r2, [r7, #18]
 800a830:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a832:	6a3b      	ldr	r3, [r7, #32]
 800a834:	3302      	adds	r3, #2
 800a836:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a838:	6a3b      	ldr	r3, [r7, #32]
 800a83a:	3302      	adds	r3, #2
 800a83c:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800a83e:	69fb      	ldr	r3, [r7, #28]
 800a840:	3301      	adds	r3, #1
 800a842:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a844:	69fb      	ldr	r3, [r7, #28]
 800a846:	3301      	adds	r3, #1
 800a848:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a84c:	3b01      	subs	r3, #1
 800a84e:	627b      	str	r3, [r7, #36]	; 0x24
 800a850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a852:	2b00      	cmp	r3, #0
 800a854:	d1dd      	bne.n	800a812 <USB_WritePMA+0x3a>
  }
}
 800a856:	bf00      	nop
 800a858:	bf00      	nop
 800a85a:	372c      	adds	r7, #44	; 0x2c
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bc80      	pop	{r7}
 800a860:	4770      	bx	lr

0800a862 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a862:	b480      	push	{r7}
 800a864:	b08b      	sub	sp, #44	; 0x2c
 800a866:	af00      	add	r7, sp, #0
 800a868:	60f8      	str	r0, [r7, #12]
 800a86a:	60b9      	str	r1, [r7, #8]
 800a86c:	4611      	mov	r1, r2
 800a86e:	461a      	mov	r2, r3
 800a870:	460b      	mov	r3, r1
 800a872:	80fb      	strh	r3, [r7, #6]
 800a874:	4613      	mov	r3, r2
 800a876:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a878:	88bb      	ldrh	r3, [r7, #4]
 800a87a:	085b      	lsrs	r3, r3, #1
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a888:	88fb      	ldrh	r3, [r7, #6]
 800a88a:	005a      	lsls	r2, r3, #1
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	4413      	add	r3, r2
 800a890:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a894:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	627b      	str	r3, [r7, #36]	; 0x24
 800a89a:	e01b      	b.n	800a8d4 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a89c:	6a3b      	ldr	r3, [r7, #32]
 800a89e:	881b      	ldrh	r3, [r3, #0]
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a8a4:	6a3b      	ldr	r3, [r7, #32]
 800a8a6:	3302      	adds	r3, #2
 800a8a8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	b2da      	uxtb	r2, r3
 800a8ae:	69fb      	ldr	r3, [r7, #28]
 800a8b0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	0a1b      	lsrs	r3, r3, #8
 800a8bc:	b2da      	uxtb	r2, r3
 800a8be:	69fb      	ldr	r3, [r7, #28]
 800a8c0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a8c2:	69fb      	ldr	r3, [r7, #28]
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a8c8:	6a3b      	ldr	r3, [r7, #32]
 800a8ca:	3302      	adds	r3, #2
 800a8cc:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800a8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d0:	3b01      	subs	r3, #1
 800a8d2:	627b      	str	r3, [r7, #36]	; 0x24
 800a8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d1e0      	bne.n	800a89c <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a8da:	88bb      	ldrh	r3, [r7, #4]
 800a8dc:	f003 0301 	and.w	r3, r3, #1
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d007      	beq.n	800a8f6 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800a8e6:	6a3b      	ldr	r3, [r7, #32]
 800a8e8:	881b      	ldrh	r3, [r3, #0]
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	b2da      	uxtb	r2, r3
 800a8f2:	69fb      	ldr	r3, [r7, #28]
 800a8f4:	701a      	strb	r2, [r3, #0]
  }
}
 800a8f6:	bf00      	nop
 800a8f8:	372c      	adds	r7, #44	; 0x2c
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bc80      	pop	{r7}
 800a8fe:	4770      	bx	lr

0800a900 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	460b      	mov	r3, r1
 800a90a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a90c:	2300      	movs	r3, #0
 800a90e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	7c1b      	ldrb	r3, [r3, #16]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d115      	bne.n	800a944 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a918:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a91c:	2202      	movs	r2, #2
 800a91e:	2181      	movs	r1, #129	; 0x81
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f001 fe30 	bl	800c586 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2201      	movs	r2, #1
 800a92a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a92c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a930:	2202      	movs	r2, #2
 800a932:	2101      	movs	r1, #1
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f001 fe26 	bl	800c586 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2201      	movs	r2, #1
 800a93e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a942:	e012      	b.n	800a96a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a944:	2340      	movs	r3, #64	; 0x40
 800a946:	2202      	movs	r2, #2
 800a948:	2181      	movs	r1, #129	; 0x81
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f001 fe1b 	bl	800c586 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2201      	movs	r2, #1
 800a954:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a956:	2340      	movs	r3, #64	; 0x40
 800a958:	2202      	movs	r2, #2
 800a95a:	2101      	movs	r1, #1
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f001 fe12 	bl	800c586 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2201      	movs	r2, #1
 800a966:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a96a:	2308      	movs	r3, #8
 800a96c:	2203      	movs	r2, #3
 800a96e:	2182      	movs	r1, #130	; 0x82
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f001 fe08 	bl	800c586 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2201      	movs	r2, #1
 800a97a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a97c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a980:	f001 ff28 	bl	800c7d4 <USBD_static_malloc>
 800a984:	4602      	mov	r2, r0
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a992:	2b00      	cmp	r3, #0
 800a994:	d102      	bne.n	800a99c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a996:	2301      	movs	r3, #1
 800a998:	73fb      	strb	r3, [r7, #15]
 800a99a:	e026      	b.n	800a9ea <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9a2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	7c1b      	ldrb	r3, [r3, #16]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d109      	bne.n	800a9da <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a9cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9d0:	2101      	movs	r1, #1
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f001 fec7 	bl	800c766 <USBD_LL_PrepareReceive>
 800a9d8:	e007      	b.n	800a9ea <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a9e0:	2340      	movs	r3, #64	; 0x40
 800a9e2:	2101      	movs	r1, #1
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f001 febe 	bl	800c766 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a9ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3710      	adds	r7, #16
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b084      	sub	sp, #16
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800aa00:	2300      	movs	r3, #0
 800aa02:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800aa04:	2181      	movs	r1, #129	; 0x81
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f001 fde3 	bl	800c5d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800aa12:	2101      	movs	r1, #1
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f001 fddc 	bl	800c5d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800aa22:	2182      	movs	r1, #130	; 0x82
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f001 fdd4 	bl	800c5d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d00e      	beq.n	800aa58 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f001 fece 	bl	800c7ec <USBD_static_free>
    pdev->pClassData = NULL;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2200      	movs	r2, #0
 800aa54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800aa58:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3710      	adds	r7, #16
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}

0800aa62 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b086      	sub	sp, #24
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
 800aa6a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa72:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800aa74:	2300      	movs	r3, #0
 800aa76:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d039      	beq.n	800ab00 <USBD_CDC_Setup+0x9e>
 800aa8c:	2b20      	cmp	r3, #32
 800aa8e:	d17f      	bne.n	800ab90 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	88db      	ldrh	r3, [r3, #6]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d029      	beq.n	800aaec <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	b25b      	sxtb	r3, r3
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	da11      	bge.n	800aac6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aaa8:	689b      	ldr	r3, [r3, #8]
 800aaaa:	683a      	ldr	r2, [r7, #0]
 800aaac:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800aaae:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aab0:	683a      	ldr	r2, [r7, #0]
 800aab2:	88d2      	ldrh	r2, [r2, #6]
 800aab4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800aab6:	6939      	ldr	r1, [r7, #16]
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	88db      	ldrh	r3, [r3, #6]
 800aabc:	461a      	mov	r2, r3
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f001 f9d9 	bl	800be76 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800aac4:	e06b      	b.n	800ab9e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	785a      	ldrb	r2, [r3, #1]
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	88db      	ldrh	r3, [r3, #6]
 800aad4:	b2da      	uxtb	r2, r3
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800aadc:	6939      	ldr	r1, [r7, #16]
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	88db      	ldrh	r3, [r3, #6]
 800aae2:	461a      	mov	r2, r3
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f001 f9f4 	bl	800bed2 <USBD_CtlPrepareRx>
      break;
 800aaea:	e058      	b.n	800ab9e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aaf2:	689b      	ldr	r3, [r3, #8]
 800aaf4:	683a      	ldr	r2, [r7, #0]
 800aaf6:	7850      	ldrb	r0, [r2, #1]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	6839      	ldr	r1, [r7, #0]
 800aafc:	4798      	blx	r3
      break;
 800aafe:	e04e      	b.n	800ab9e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	785b      	ldrb	r3, [r3, #1]
 800ab04:	2b0b      	cmp	r3, #11
 800ab06:	d02e      	beq.n	800ab66 <USBD_CDC_Setup+0x104>
 800ab08:	2b0b      	cmp	r3, #11
 800ab0a:	dc38      	bgt.n	800ab7e <USBD_CDC_Setup+0x11c>
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d002      	beq.n	800ab16 <USBD_CDC_Setup+0xb4>
 800ab10:	2b0a      	cmp	r3, #10
 800ab12:	d014      	beq.n	800ab3e <USBD_CDC_Setup+0xdc>
 800ab14:	e033      	b.n	800ab7e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab1c:	2b03      	cmp	r3, #3
 800ab1e:	d107      	bne.n	800ab30 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800ab20:	f107 030c 	add.w	r3, r7, #12
 800ab24:	2202      	movs	r2, #2
 800ab26:	4619      	mov	r1, r3
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f001 f9a4 	bl	800be76 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ab2e:	e02e      	b.n	800ab8e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800ab30:	6839      	ldr	r1, [r7, #0]
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f001 f935 	bl	800bda2 <USBD_CtlError>
            ret = USBD_FAIL;
 800ab38:	2302      	movs	r3, #2
 800ab3a:	75fb      	strb	r3, [r7, #23]
          break;
 800ab3c:	e027      	b.n	800ab8e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab44:	2b03      	cmp	r3, #3
 800ab46:	d107      	bne.n	800ab58 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800ab48:	f107 030f 	add.w	r3, r7, #15
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	4619      	mov	r1, r3
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f001 f990 	bl	800be76 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ab56:	e01a      	b.n	800ab8e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800ab58:	6839      	ldr	r1, [r7, #0]
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f001 f921 	bl	800bda2 <USBD_CtlError>
            ret = USBD_FAIL;
 800ab60:	2302      	movs	r3, #2
 800ab62:	75fb      	strb	r3, [r7, #23]
          break;
 800ab64:	e013      	b.n	800ab8e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab6c:	2b03      	cmp	r3, #3
 800ab6e:	d00d      	beq.n	800ab8c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800ab70:	6839      	ldr	r1, [r7, #0]
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f001 f915 	bl	800bda2 <USBD_CtlError>
            ret = USBD_FAIL;
 800ab78:	2302      	movs	r3, #2
 800ab7a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ab7c:	e006      	b.n	800ab8c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800ab7e:	6839      	ldr	r1, [r7, #0]
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f001 f90e 	bl	800bda2 <USBD_CtlError>
          ret = USBD_FAIL;
 800ab86:	2302      	movs	r3, #2
 800ab88:	75fb      	strb	r3, [r7, #23]
          break;
 800ab8a:	e000      	b.n	800ab8e <USBD_CDC_Setup+0x12c>
          break;
 800ab8c:	bf00      	nop
      }
      break;
 800ab8e:	e006      	b.n	800ab9e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ab90:	6839      	ldr	r1, [r7, #0]
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f001 f905 	bl	800bda2 <USBD_CtlError>
      ret = USBD_FAIL;
 800ab98:	2302      	movs	r3, #2
 800ab9a:	75fb      	strb	r3, [r7, #23]
      break;
 800ab9c:	bf00      	nop
  }

  return ret;
 800ab9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3718      	adds	r7, #24
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	460b      	mov	r3, r1
 800abb2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abba:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abc2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d03a      	beq.n	800ac44 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800abce:	78fa      	ldrb	r2, [r7, #3]
 800abd0:	6879      	ldr	r1, [r7, #4]
 800abd2:	4613      	mov	r3, r2
 800abd4:	009b      	lsls	r3, r3, #2
 800abd6:	4413      	add	r3, r2
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	440b      	add	r3, r1
 800abdc:	331c      	adds	r3, #28
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d029      	beq.n	800ac38 <USBD_CDC_DataIn+0x90>
 800abe4:	78fa      	ldrb	r2, [r7, #3]
 800abe6:	6879      	ldr	r1, [r7, #4]
 800abe8:	4613      	mov	r3, r2
 800abea:	009b      	lsls	r3, r3, #2
 800abec:	4413      	add	r3, r2
 800abee:	009b      	lsls	r3, r3, #2
 800abf0:	440b      	add	r3, r1
 800abf2:	331c      	adds	r3, #28
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	78f9      	ldrb	r1, [r7, #3]
 800abf8:	68b8      	ldr	r0, [r7, #8]
 800abfa:	460b      	mov	r3, r1
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	440b      	add	r3, r1
 800ac00:	00db      	lsls	r3, r3, #3
 800ac02:	4403      	add	r3, r0
 800ac04:	3320      	adds	r3, #32
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	fbb2 f1f3 	udiv	r1, r2, r3
 800ac0c:	fb03 f301 	mul.w	r3, r3, r1
 800ac10:	1ad3      	subs	r3, r2, r3
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d110      	bne.n	800ac38 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800ac16:	78fa      	ldrb	r2, [r7, #3]
 800ac18:	6879      	ldr	r1, [r7, #4]
 800ac1a:	4613      	mov	r3, r2
 800ac1c:	009b      	lsls	r3, r3, #2
 800ac1e:	4413      	add	r3, r2
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	440b      	add	r3, r1
 800ac24:	331c      	adds	r3, #28
 800ac26:	2200      	movs	r2, #0
 800ac28:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ac2a:	78f9      	ldrb	r1, [r7, #3]
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	2200      	movs	r2, #0
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f001 fd75 	bl	800c720 <USBD_LL_Transmit>
 800ac36:	e003      	b.n	800ac40 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800ac40:	2300      	movs	r3, #0
 800ac42:	e000      	b.n	800ac46 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800ac44:	2302      	movs	r3, #2
  }
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3710      	adds	r7, #16
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}

0800ac4e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ac4e:	b580      	push	{r7, lr}
 800ac50:	b084      	sub	sp, #16
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]
 800ac56:	460b      	mov	r3, r1
 800ac58:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac60:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ac62:	78fb      	ldrb	r3, [r7, #3]
 800ac64:	4619      	mov	r1, r3
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f001 fda0 	bl	800c7ac <USBD_LL_GetRxDataSize>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d00d      	beq.n	800ac9a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac84:	68db      	ldr	r3, [r3, #12]
 800ac86:	68fa      	ldr	r2, [r7, #12]
 800ac88:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ac8c:	68fa      	ldr	r2, [r7, #12]
 800ac8e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ac92:	4611      	mov	r1, r2
 800ac94:	4798      	blx	r3

    return USBD_OK;
 800ac96:	2300      	movs	r3, #0
 800ac98:	e000      	b.n	800ac9c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800ac9a:	2302      	movs	r3, #2
  }
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3710      	adds	r7, #16
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acb2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d015      	beq.n	800acea <USBD_CDC_EP0_RxReady+0x46>
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800acc4:	2bff      	cmp	r3, #255	; 0xff
 800acc6:	d010      	beq.n	800acea <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	68fa      	ldr	r2, [r7, #12]
 800acd2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800acd6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800acde:	b292      	uxth	r2, r2
 800ace0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	22ff      	movs	r2, #255	; 0xff
 800ace6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800acea:	2300      	movs	r3, #0
}
 800acec:	4618      	mov	r0, r3
 800acee:	3710      	adds	r7, #16
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2243      	movs	r2, #67	; 0x43
 800ad00:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800ad02:	4b03      	ldr	r3, [pc, #12]	; (800ad10 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bc80      	pop	{r7}
 800ad0c:	4770      	bx	lr
 800ad0e:	bf00      	nop
 800ad10:	2000009c 	.word	0x2000009c

0800ad14 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b083      	sub	sp, #12
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2243      	movs	r2, #67	; 0x43
 800ad20:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800ad22:	4b03      	ldr	r3, [pc, #12]	; (800ad30 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	370c      	adds	r7, #12
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bc80      	pop	{r7}
 800ad2c:	4770      	bx	lr
 800ad2e:	bf00      	nop
 800ad30:	20000058 	.word	0x20000058

0800ad34 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b083      	sub	sp, #12
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2243      	movs	r2, #67	; 0x43
 800ad40:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800ad42:	4b03      	ldr	r3, [pc, #12]	; (800ad50 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	370c      	adds	r7, #12
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bc80      	pop	{r7}
 800ad4c:	4770      	bx	lr
 800ad4e:	bf00      	nop
 800ad50:	200000e0 	.word	0x200000e0

0800ad54 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b083      	sub	sp, #12
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	220a      	movs	r2, #10
 800ad60:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800ad62:	4b03      	ldr	r3, [pc, #12]	; (800ad70 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	370c      	adds	r7, #12
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bc80      	pop	{r7}
 800ad6c:	4770      	bx	lr
 800ad6e:	bf00      	nop
 800ad70:	20000014 	.word	0x20000014

0800ad74 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b085      	sub	sp, #20
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800ad7e:	2302      	movs	r3, #2
 800ad80:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d005      	beq.n	800ad94 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	683a      	ldr	r2, [r7, #0]
 800ad8c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800ad90:	2300      	movs	r3, #0
 800ad92:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ad94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3714      	adds	r7, #20
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bc80      	pop	{r7}
 800ad9e:	4770      	bx	lr

0800ada0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800ada0:	b480      	push	{r7}
 800ada2:	b087      	sub	sp, #28
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	60f8      	str	r0, [r7, #12]
 800ada8:	60b9      	str	r1, [r7, #8]
 800adaa:	4613      	mov	r3, r2
 800adac:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adb4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	68ba      	ldr	r2, [r7, #8]
 800adba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800adbe:	88fa      	ldrh	r2, [r7, #6]
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800adc6:	2300      	movs	r3, #0
}
 800adc8:	4618      	mov	r0, r3
 800adca:	371c      	adds	r7, #28
 800adcc:	46bd      	mov	sp, r7
 800adce:	bc80      	pop	{r7}
 800add0:	4770      	bx	lr

0800add2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800add2:	b480      	push	{r7}
 800add4:	b085      	sub	sp, #20
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
 800adda:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ade2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	683a      	ldr	r2, [r7, #0]
 800ade8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800adec:	2300      	movs	r3, #0
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3714      	adds	r7, #20
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bc80      	pop	{r7}
 800adf6:	4770      	bx	lr

0800adf8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae06:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d017      	beq.n	800ae42 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	7c1b      	ldrb	r3, [r3, #16]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d109      	bne.n	800ae2e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae20:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae24:	2101      	movs	r1, #1
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f001 fc9d 	bl	800c766 <USBD_LL_PrepareReceive>
 800ae2c:	e007      	b.n	800ae3e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae34:	2340      	movs	r3, #64	; 0x40
 800ae36:	2101      	movs	r1, #1
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f001 fc94 	bl	800c766 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	e000      	b.n	800ae44 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800ae42:	2302      	movs	r3, #2
  }
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3710      	adds	r7, #16
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	4613      	mov	r3, r2
 800ae58:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d101      	bne.n	800ae64 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ae60:	2302      	movs	r3, #2
 800ae62:	e01a      	b.n	800ae9a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d003      	beq.n	800ae76 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2200      	movs	r2, #0
 800ae72:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d003      	beq.n	800ae84 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	68ba      	ldr	r2, [r7, #8]
 800ae80:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2201      	movs	r2, #1
 800ae88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	79fa      	ldrb	r2, [r7, #7]
 800ae90:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800ae92:	68f8      	ldr	r0, [r7, #12]
 800ae94:	f001 fb02 	bl	800c49c <USBD_LL_Init>

  return USBD_OK;
 800ae98:	2300      	movs	r3, #0
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3710      	adds	r7, #16
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aea2:	b480      	push	{r7}
 800aea4:	b085      	sub	sp, #20
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
 800aeaa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800aeac:	2300      	movs	r3, #0
 800aeae:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d006      	beq.n	800aec4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	683a      	ldr	r2, [r7, #0]
 800aeba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800aebe:	2300      	movs	r3, #0
 800aec0:	73fb      	strb	r3, [r7, #15]
 800aec2:	e001      	b.n	800aec8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800aec4:	2302      	movs	r3, #2
 800aec6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aec8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3714      	adds	r7, #20
 800aece:	46bd      	mov	sp, r7
 800aed0:	bc80      	pop	{r7}
 800aed2:	4770      	bx	lr

0800aed4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f001 fb37 	bl	800c550 <USBD_LL_Start>

  return USBD_OK;
 800aee2:	2300      	movs	r3, #0
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3708      	adds	r7, #8
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b083      	sub	sp, #12
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aef4:	2300      	movs	r3, #0
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	370c      	adds	r7, #12
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bc80      	pop	{r7}
 800aefe:	4770      	bx	lr

0800af00 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	460b      	mov	r3, r1
 800af0a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800af0c:	2302      	movs	r3, #2
 800af0e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af16:	2b00      	cmp	r3, #0
 800af18:	d00c      	beq.n	800af34 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	78fa      	ldrb	r2, [r7, #3]
 800af24:	4611      	mov	r1, r2
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	4798      	blx	r3
 800af2a:	4603      	mov	r3, r0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d101      	bne.n	800af34 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800af30:	2300      	movs	r3, #0
 800af32:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800af34:	7bfb      	ldrb	r3, [r7, #15]
}
 800af36:	4618      	mov	r0, r3
 800af38:	3710      	adds	r7, #16
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}

0800af3e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800af3e:	b580      	push	{r7, lr}
 800af40:	b082      	sub	sp, #8
 800af42:	af00      	add	r7, sp, #0
 800af44:	6078      	str	r0, [r7, #4]
 800af46:	460b      	mov	r3, r1
 800af48:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	78fa      	ldrb	r2, [r7, #3]
 800af54:	4611      	mov	r1, r2
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	4798      	blx	r3

  return USBD_OK;
 800af5a:	2300      	movs	r3, #0
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3708      	adds	r7, #8
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800af74:	6839      	ldr	r1, [r7, #0]
 800af76:	4618      	mov	r0, r3
 800af78:	f000 fed7 	bl	800bd2a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2201      	movs	r2, #1
 800af80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800af8a:	461a      	mov	r2, r3
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800af98:	f003 031f 	and.w	r3, r3, #31
 800af9c:	2b02      	cmp	r3, #2
 800af9e:	d016      	beq.n	800afce <USBD_LL_SetupStage+0x6a>
 800afa0:	2b02      	cmp	r3, #2
 800afa2:	d81c      	bhi.n	800afde <USBD_LL_SetupStage+0x7a>
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d002      	beq.n	800afae <USBD_LL_SetupStage+0x4a>
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d008      	beq.n	800afbe <USBD_LL_SetupStage+0x5a>
 800afac:	e017      	b.n	800afde <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800afb4:	4619      	mov	r1, r3
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 f9ca 	bl	800b350 <USBD_StdDevReq>
      break;
 800afbc:	e01a      	b.n	800aff4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800afc4:	4619      	mov	r1, r3
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f000 fa2c 	bl	800b424 <USBD_StdItfReq>
      break;
 800afcc:	e012      	b.n	800aff4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800afd4:	4619      	mov	r1, r3
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 fa6c 	bl	800b4b4 <USBD_StdEPReq>
      break;
 800afdc:	e00a      	b.n	800aff4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800afe4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	4619      	mov	r1, r3
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f001 fb0f 	bl	800c610 <USBD_LL_StallEP>
      break;
 800aff2:	bf00      	nop
  }

  return USBD_OK;
 800aff4:	2300      	movs	r3, #0
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3708      	adds	r7, #8
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}

0800affe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800affe:	b580      	push	{r7, lr}
 800b000:	b086      	sub	sp, #24
 800b002:	af00      	add	r7, sp, #0
 800b004:	60f8      	str	r0, [r7, #12]
 800b006:	460b      	mov	r3, r1
 800b008:	607a      	str	r2, [r7, #4]
 800b00a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b00c:	7afb      	ldrb	r3, [r7, #11]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d14b      	bne.n	800b0aa <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b018:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b020:	2b03      	cmp	r3, #3
 800b022:	d134      	bne.n	800b08e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	68da      	ldr	r2, [r3, #12]
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	691b      	ldr	r3, [r3, #16]
 800b02c:	429a      	cmp	r2, r3
 800b02e:	d919      	bls.n	800b064 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	68da      	ldr	r2, [r3, #12]
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	691b      	ldr	r3, [r3, #16]
 800b038:	1ad2      	subs	r2, r2, r3
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	68da      	ldr	r2, [r3, #12]
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b046:	429a      	cmp	r2, r3
 800b048:	d203      	bcs.n	800b052 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b04e:	b29b      	uxth	r3, r3
 800b050:	e002      	b.n	800b058 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b056:	b29b      	uxth	r3, r3
 800b058:	461a      	mov	r2, r3
 800b05a:	6879      	ldr	r1, [r7, #4]
 800b05c:	68f8      	ldr	r0, [r7, #12]
 800b05e:	f000 ff56 	bl	800bf0e <USBD_CtlContinueRx>
 800b062:	e038      	b.n	800b0d6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b06a:	691b      	ldr	r3, [r3, #16]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d00a      	beq.n	800b086 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b076:	2b03      	cmp	r3, #3
 800b078:	d105      	bne.n	800b086 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b080:	691b      	ldr	r3, [r3, #16]
 800b082:	68f8      	ldr	r0, [r7, #12]
 800b084:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b086:	68f8      	ldr	r0, [r7, #12]
 800b088:	f000 ff53 	bl	800bf32 <USBD_CtlSendStatus>
 800b08c:	e023      	b.n	800b0d6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b094:	2b05      	cmp	r3, #5
 800b096:	d11e      	bne.n	800b0d6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2200      	movs	r2, #0
 800b09c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b0a0:	2100      	movs	r1, #0
 800b0a2:	68f8      	ldr	r0, [r7, #12]
 800b0a4:	f001 fab4 	bl	800c610 <USBD_LL_StallEP>
 800b0a8:	e015      	b.n	800b0d6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0b0:	699b      	ldr	r3, [r3, #24]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d00d      	beq.n	800b0d2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b0bc:	2b03      	cmp	r3, #3
 800b0be:	d108      	bne.n	800b0d2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0c6:	699b      	ldr	r3, [r3, #24]
 800b0c8:	7afa      	ldrb	r2, [r7, #11]
 800b0ca:	4611      	mov	r1, r2
 800b0cc:	68f8      	ldr	r0, [r7, #12]
 800b0ce:	4798      	blx	r3
 800b0d0:	e001      	b.n	800b0d6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b0d2:	2302      	movs	r3, #2
 800b0d4:	e000      	b.n	800b0d8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b0d6:	2300      	movs	r3, #0
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3718      	adds	r7, #24
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b086      	sub	sp, #24
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	60f8      	str	r0, [r7, #12]
 800b0e8:	460b      	mov	r3, r1
 800b0ea:	607a      	str	r2, [r7, #4]
 800b0ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b0ee:	7afb      	ldrb	r3, [r7, #11]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d17f      	bne.n	800b1f4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	3314      	adds	r3, #20
 800b0f8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b100:	2b02      	cmp	r3, #2
 800b102:	d15c      	bne.n	800b1be <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	68da      	ldr	r2, [r3, #12]
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	691b      	ldr	r3, [r3, #16]
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d915      	bls.n	800b13c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	68da      	ldr	r2, [r3, #12]
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	691b      	ldr	r3, [r3, #16]
 800b118:	1ad2      	subs	r2, r2, r3
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	68db      	ldr	r3, [r3, #12]
 800b122:	b29b      	uxth	r3, r3
 800b124:	461a      	mov	r2, r3
 800b126:	6879      	ldr	r1, [r7, #4]
 800b128:	68f8      	ldr	r0, [r7, #12]
 800b12a:	f000 fec0 	bl	800beae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b12e:	2300      	movs	r3, #0
 800b130:	2200      	movs	r2, #0
 800b132:	2100      	movs	r1, #0
 800b134:	68f8      	ldr	r0, [r7, #12]
 800b136:	f001 fb16 	bl	800c766 <USBD_LL_PrepareReceive>
 800b13a:	e04e      	b.n	800b1da <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	689b      	ldr	r3, [r3, #8]
 800b140:	697a      	ldr	r2, [r7, #20]
 800b142:	6912      	ldr	r2, [r2, #16]
 800b144:	fbb3 f1f2 	udiv	r1, r3, r2
 800b148:	fb02 f201 	mul.w	r2, r2, r1
 800b14c:	1a9b      	subs	r3, r3, r2
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d11c      	bne.n	800b18c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	689a      	ldr	r2, [r3, #8]
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d316      	bcc.n	800b18c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	689a      	ldr	r2, [r3, #8]
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b168:	429a      	cmp	r2, r3
 800b16a:	d20f      	bcs.n	800b18c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b16c:	2200      	movs	r2, #0
 800b16e:	2100      	movs	r1, #0
 800b170:	68f8      	ldr	r0, [r7, #12]
 800b172:	f000 fe9c 	bl	800beae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	2200      	movs	r2, #0
 800b17a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b17e:	2300      	movs	r3, #0
 800b180:	2200      	movs	r2, #0
 800b182:	2100      	movs	r1, #0
 800b184:	68f8      	ldr	r0, [r7, #12]
 800b186:	f001 faee 	bl	800c766 <USBD_LL_PrepareReceive>
 800b18a:	e026      	b.n	800b1da <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b192:	68db      	ldr	r3, [r3, #12]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d00a      	beq.n	800b1ae <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b19e:	2b03      	cmp	r3, #3
 800b1a0:	d105      	bne.n	800b1ae <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1a8:	68db      	ldr	r3, [r3, #12]
 800b1aa:	68f8      	ldr	r0, [r7, #12]
 800b1ac:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b1ae:	2180      	movs	r1, #128	; 0x80
 800b1b0:	68f8      	ldr	r0, [r7, #12]
 800b1b2:	f001 fa2d 	bl	800c610 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b1b6:	68f8      	ldr	r0, [r7, #12]
 800b1b8:	f000 fece 	bl	800bf58 <USBD_CtlReceiveStatus>
 800b1bc:	e00d      	b.n	800b1da <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b1c4:	2b04      	cmp	r3, #4
 800b1c6:	d004      	beq.n	800b1d2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d103      	bne.n	800b1da <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b1d2:	2180      	movs	r1, #128	; 0x80
 800b1d4:	68f8      	ldr	r0, [r7, #12]
 800b1d6:	f001 fa1b 	bl	800c610 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	d11d      	bne.n	800b220 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b1e4:	68f8      	ldr	r0, [r7, #12]
 800b1e6:	f7ff fe81 	bl	800aeec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b1f2:	e015      	b.n	800b220 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1fa:	695b      	ldr	r3, [r3, #20]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d00d      	beq.n	800b21c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b206:	2b03      	cmp	r3, #3
 800b208:	d108      	bne.n	800b21c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b210:	695b      	ldr	r3, [r3, #20]
 800b212:	7afa      	ldrb	r2, [r7, #11]
 800b214:	4611      	mov	r1, r2
 800b216:	68f8      	ldr	r0, [r7, #12]
 800b218:	4798      	blx	r3
 800b21a:	e001      	b.n	800b220 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b21c:	2302      	movs	r3, #2
 800b21e:	e000      	b.n	800b222 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b220:	2300      	movs	r3, #0
}
 800b222:	4618      	mov	r0, r3
 800b224:	3718      	adds	r7, #24
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}

0800b22a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b22a:	b580      	push	{r7, lr}
 800b22c:	b082      	sub	sp, #8
 800b22e:	af00      	add	r7, sp, #0
 800b230:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b232:	2340      	movs	r3, #64	; 0x40
 800b234:	2200      	movs	r2, #0
 800b236:	2100      	movs	r1, #0
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f001 f9a4 	bl	800c586 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2201      	movs	r2, #1
 800b242:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2240      	movs	r2, #64	; 0x40
 800b24a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b24e:	2340      	movs	r3, #64	; 0x40
 800b250:	2200      	movs	r2, #0
 800b252:	2180      	movs	r1, #128	; 0x80
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f001 f996 	bl	800c586 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2201      	movs	r2, #1
 800b25e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2240      	movs	r2, #64	; 0x40
 800b264:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2201      	movs	r2, #1
 800b26a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2200      	movs	r2, #0
 800b272:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2200      	movs	r2, #0
 800b27a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2200      	movs	r2, #0
 800b280:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d009      	beq.n	800b2a2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	687a      	ldr	r2, [r7, #4]
 800b298:	6852      	ldr	r2, [r2, #4]
 800b29a:	b2d2      	uxtb	r2, r2
 800b29c:	4611      	mov	r1, r2
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	4798      	blx	r3
  }

  return USBD_OK;
 800b2a2:	2300      	movs	r3, #0
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3708      	adds	r7, #8
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b083      	sub	sp, #12
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	460b      	mov	r3, r1
 800b2b6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	78fa      	ldrb	r2, [r7, #3]
 800b2bc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b2be:	2300      	movs	r3, #0
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	370c      	adds	r7, #12
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bc80      	pop	{r7}
 800b2c8:	4770      	bx	lr

0800b2ca <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b2ca:	b480      	push	{r7}
 800b2cc:	b083      	sub	sp, #12
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2204      	movs	r2, #4
 800b2e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b2e6:	2300      	movs	r3, #0
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	370c      	adds	r7, #12
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bc80      	pop	{r7}
 800b2f0:	4770      	bx	lr

0800b2f2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b2f2:	b480      	push	{r7}
 800b2f4:	b083      	sub	sp, #12
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b300:	2b04      	cmp	r3, #4
 800b302:	d105      	bne.n	800b310 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b310:	2300      	movs	r3, #0
}
 800b312:	4618      	mov	r0, r3
 800b314:	370c      	adds	r7, #12
 800b316:	46bd      	mov	sp, r7
 800b318:	bc80      	pop	{r7}
 800b31a:	4770      	bx	lr

0800b31c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b082      	sub	sp, #8
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b32a:	2b03      	cmp	r3, #3
 800b32c:	d10b      	bne.n	800b346 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b334:	69db      	ldr	r3, [r3, #28]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d005      	beq.n	800b346 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b340:	69db      	ldr	r3, [r3, #28]
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b346:	2300      	movs	r3, #0
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3708      	adds	r7, #8
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b35a:	2300      	movs	r3, #0
 800b35c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b366:	2b40      	cmp	r3, #64	; 0x40
 800b368:	d005      	beq.n	800b376 <USBD_StdDevReq+0x26>
 800b36a:	2b40      	cmp	r3, #64	; 0x40
 800b36c:	d84f      	bhi.n	800b40e <USBD_StdDevReq+0xbe>
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d009      	beq.n	800b386 <USBD_StdDevReq+0x36>
 800b372:	2b20      	cmp	r3, #32
 800b374:	d14b      	bne.n	800b40e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	6839      	ldr	r1, [r7, #0]
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	4798      	blx	r3
      break;
 800b384:	e048      	b.n	800b418 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	785b      	ldrb	r3, [r3, #1]
 800b38a:	2b09      	cmp	r3, #9
 800b38c:	d839      	bhi.n	800b402 <USBD_StdDevReq+0xb2>
 800b38e:	a201      	add	r2, pc, #4	; (adr r2, 800b394 <USBD_StdDevReq+0x44>)
 800b390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b394:	0800b3e5 	.word	0x0800b3e5
 800b398:	0800b3f9 	.word	0x0800b3f9
 800b39c:	0800b403 	.word	0x0800b403
 800b3a0:	0800b3ef 	.word	0x0800b3ef
 800b3a4:	0800b403 	.word	0x0800b403
 800b3a8:	0800b3c7 	.word	0x0800b3c7
 800b3ac:	0800b3bd 	.word	0x0800b3bd
 800b3b0:	0800b403 	.word	0x0800b403
 800b3b4:	0800b3db 	.word	0x0800b3db
 800b3b8:	0800b3d1 	.word	0x0800b3d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b3bc:	6839      	ldr	r1, [r7, #0]
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 f9dc 	bl	800b77c <USBD_GetDescriptor>
          break;
 800b3c4:	e022      	b.n	800b40c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b3c6:	6839      	ldr	r1, [r7, #0]
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f000 fb3f 	bl	800ba4c <USBD_SetAddress>
          break;
 800b3ce:	e01d      	b.n	800b40c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b3d0:	6839      	ldr	r1, [r7, #0]
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 fb7e 	bl	800bad4 <USBD_SetConfig>
          break;
 800b3d8:	e018      	b.n	800b40c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b3da:	6839      	ldr	r1, [r7, #0]
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f000 fc07 	bl	800bbf0 <USBD_GetConfig>
          break;
 800b3e2:	e013      	b.n	800b40c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b3e4:	6839      	ldr	r1, [r7, #0]
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 fc37 	bl	800bc5a <USBD_GetStatus>
          break;
 800b3ec:	e00e      	b.n	800b40c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b3ee:	6839      	ldr	r1, [r7, #0]
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 fc65 	bl	800bcc0 <USBD_SetFeature>
          break;
 800b3f6:	e009      	b.n	800b40c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b3f8:	6839      	ldr	r1, [r7, #0]
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f000 fc74 	bl	800bce8 <USBD_ClrFeature>
          break;
 800b400:	e004      	b.n	800b40c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b402:	6839      	ldr	r1, [r7, #0]
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f000 fccc 	bl	800bda2 <USBD_CtlError>
          break;
 800b40a:	bf00      	nop
      }
      break;
 800b40c:	e004      	b.n	800b418 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b40e:	6839      	ldr	r1, [r7, #0]
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 fcc6 	bl	800bda2 <USBD_CtlError>
      break;
 800b416:	bf00      	nop
  }

  return ret;
 800b418:	7bfb      	ldrb	r3, [r7, #15]
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3710      	adds	r7, #16
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop

0800b424 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b42e:	2300      	movs	r3, #0
 800b430:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b43a:	2b40      	cmp	r3, #64	; 0x40
 800b43c:	d005      	beq.n	800b44a <USBD_StdItfReq+0x26>
 800b43e:	2b40      	cmp	r3, #64	; 0x40
 800b440:	d82e      	bhi.n	800b4a0 <USBD_StdItfReq+0x7c>
 800b442:	2b00      	cmp	r3, #0
 800b444:	d001      	beq.n	800b44a <USBD_StdItfReq+0x26>
 800b446:	2b20      	cmp	r3, #32
 800b448:	d12a      	bne.n	800b4a0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b450:	3b01      	subs	r3, #1
 800b452:	2b02      	cmp	r3, #2
 800b454:	d81d      	bhi.n	800b492 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	889b      	ldrh	r3, [r3, #4]
 800b45a:	b2db      	uxtb	r3, r3
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d813      	bhi.n	800b488 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b466:	689b      	ldr	r3, [r3, #8]
 800b468:	6839      	ldr	r1, [r7, #0]
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	4798      	blx	r3
 800b46e:	4603      	mov	r3, r0
 800b470:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	88db      	ldrh	r3, [r3, #6]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d110      	bne.n	800b49c <USBD_StdItfReq+0x78>
 800b47a:	7bfb      	ldrb	r3, [r7, #15]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d10d      	bne.n	800b49c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f000 fd56 	bl	800bf32 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b486:	e009      	b.n	800b49c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b488:	6839      	ldr	r1, [r7, #0]
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 fc89 	bl	800bda2 <USBD_CtlError>
          break;
 800b490:	e004      	b.n	800b49c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b492:	6839      	ldr	r1, [r7, #0]
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 fc84 	bl	800bda2 <USBD_CtlError>
          break;
 800b49a:	e000      	b.n	800b49e <USBD_StdItfReq+0x7a>
          break;
 800b49c:	bf00      	nop
      }
      break;
 800b49e:	e004      	b.n	800b4aa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b4a0:	6839      	ldr	r1, [r7, #0]
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f000 fc7d 	bl	800bda2 <USBD_CtlError>
      break;
 800b4a8:	bf00      	nop
  }

  return USBD_OK;
 800b4aa:	2300      	movs	r3, #0
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3710      	adds	r7, #16
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	889b      	ldrh	r3, [r3, #4]
 800b4c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b4d0:	2b40      	cmp	r3, #64	; 0x40
 800b4d2:	d007      	beq.n	800b4e4 <USBD_StdEPReq+0x30>
 800b4d4:	2b40      	cmp	r3, #64	; 0x40
 800b4d6:	f200 8146 	bhi.w	800b766 <USBD_StdEPReq+0x2b2>
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d00a      	beq.n	800b4f4 <USBD_StdEPReq+0x40>
 800b4de:	2b20      	cmp	r3, #32
 800b4e0:	f040 8141 	bne.w	800b766 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4ea:	689b      	ldr	r3, [r3, #8]
 800b4ec:	6839      	ldr	r1, [r7, #0]
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	4798      	blx	r3
      break;
 800b4f2:	e13d      	b.n	800b770 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b4fc:	2b20      	cmp	r3, #32
 800b4fe:	d10a      	bne.n	800b516 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b506:	689b      	ldr	r3, [r3, #8]
 800b508:	6839      	ldr	r1, [r7, #0]
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	4798      	blx	r3
 800b50e:	4603      	mov	r3, r0
 800b510:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b512:	7bfb      	ldrb	r3, [r7, #15]
 800b514:	e12d      	b.n	800b772 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	785b      	ldrb	r3, [r3, #1]
 800b51a:	2b03      	cmp	r3, #3
 800b51c:	d007      	beq.n	800b52e <USBD_StdEPReq+0x7a>
 800b51e:	2b03      	cmp	r3, #3
 800b520:	f300 811b 	bgt.w	800b75a <USBD_StdEPReq+0x2a6>
 800b524:	2b00      	cmp	r3, #0
 800b526:	d072      	beq.n	800b60e <USBD_StdEPReq+0x15a>
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d03a      	beq.n	800b5a2 <USBD_StdEPReq+0xee>
 800b52c:	e115      	b.n	800b75a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b534:	2b02      	cmp	r3, #2
 800b536:	d002      	beq.n	800b53e <USBD_StdEPReq+0x8a>
 800b538:	2b03      	cmp	r3, #3
 800b53a:	d015      	beq.n	800b568 <USBD_StdEPReq+0xb4>
 800b53c:	e02b      	b.n	800b596 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b53e:	7bbb      	ldrb	r3, [r7, #14]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d00c      	beq.n	800b55e <USBD_StdEPReq+0xaa>
 800b544:	7bbb      	ldrb	r3, [r7, #14]
 800b546:	2b80      	cmp	r3, #128	; 0x80
 800b548:	d009      	beq.n	800b55e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b54a:	7bbb      	ldrb	r3, [r7, #14]
 800b54c:	4619      	mov	r1, r3
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f001 f85e 	bl	800c610 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b554:	2180      	movs	r1, #128	; 0x80
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f001 f85a 	bl	800c610 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b55c:	e020      	b.n	800b5a0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b55e:	6839      	ldr	r1, [r7, #0]
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f000 fc1e 	bl	800bda2 <USBD_CtlError>
              break;
 800b566:	e01b      	b.n	800b5a0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	885b      	ldrh	r3, [r3, #2]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d10e      	bne.n	800b58e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b570:	7bbb      	ldrb	r3, [r7, #14]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d00b      	beq.n	800b58e <USBD_StdEPReq+0xda>
 800b576:	7bbb      	ldrb	r3, [r7, #14]
 800b578:	2b80      	cmp	r3, #128	; 0x80
 800b57a:	d008      	beq.n	800b58e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	88db      	ldrh	r3, [r3, #6]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d104      	bne.n	800b58e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b584:	7bbb      	ldrb	r3, [r7, #14]
 800b586:	4619      	mov	r1, r3
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f001 f841 	bl	800c610 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f000 fccf 	bl	800bf32 <USBD_CtlSendStatus>

              break;
 800b594:	e004      	b.n	800b5a0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b596:	6839      	ldr	r1, [r7, #0]
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f000 fc02 	bl	800bda2 <USBD_CtlError>
              break;
 800b59e:	bf00      	nop
          }
          break;
 800b5a0:	e0e0      	b.n	800b764 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5a8:	2b02      	cmp	r3, #2
 800b5aa:	d002      	beq.n	800b5b2 <USBD_StdEPReq+0xfe>
 800b5ac:	2b03      	cmp	r3, #3
 800b5ae:	d015      	beq.n	800b5dc <USBD_StdEPReq+0x128>
 800b5b0:	e026      	b.n	800b600 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b5b2:	7bbb      	ldrb	r3, [r7, #14]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d00c      	beq.n	800b5d2 <USBD_StdEPReq+0x11e>
 800b5b8:	7bbb      	ldrb	r3, [r7, #14]
 800b5ba:	2b80      	cmp	r3, #128	; 0x80
 800b5bc:	d009      	beq.n	800b5d2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b5be:	7bbb      	ldrb	r3, [r7, #14]
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f001 f824 	bl	800c610 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b5c8:	2180      	movs	r1, #128	; 0x80
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f001 f820 	bl	800c610 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b5d0:	e01c      	b.n	800b60c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b5d2:	6839      	ldr	r1, [r7, #0]
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f000 fbe4 	bl	800bda2 <USBD_CtlError>
              break;
 800b5da:	e017      	b.n	800b60c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	885b      	ldrh	r3, [r3, #2]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d112      	bne.n	800b60a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b5e4:	7bbb      	ldrb	r3, [r7, #14]
 800b5e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d004      	beq.n	800b5f8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b5ee:	7bbb      	ldrb	r3, [r7, #14]
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f001 f82b 	bl	800c64e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 fc9a 	bl	800bf32 <USBD_CtlSendStatus>
              }
              break;
 800b5fe:	e004      	b.n	800b60a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b600:	6839      	ldr	r1, [r7, #0]
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 fbcd 	bl	800bda2 <USBD_CtlError>
              break;
 800b608:	e000      	b.n	800b60c <USBD_StdEPReq+0x158>
              break;
 800b60a:	bf00      	nop
          }
          break;
 800b60c:	e0aa      	b.n	800b764 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b614:	2b02      	cmp	r3, #2
 800b616:	d002      	beq.n	800b61e <USBD_StdEPReq+0x16a>
 800b618:	2b03      	cmp	r3, #3
 800b61a:	d032      	beq.n	800b682 <USBD_StdEPReq+0x1ce>
 800b61c:	e097      	b.n	800b74e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b61e:	7bbb      	ldrb	r3, [r7, #14]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d007      	beq.n	800b634 <USBD_StdEPReq+0x180>
 800b624:	7bbb      	ldrb	r3, [r7, #14]
 800b626:	2b80      	cmp	r3, #128	; 0x80
 800b628:	d004      	beq.n	800b634 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b62a:	6839      	ldr	r1, [r7, #0]
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 fbb8 	bl	800bda2 <USBD_CtlError>
                break;
 800b632:	e091      	b.n	800b758 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b634:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	da0b      	bge.n	800b654 <USBD_StdEPReq+0x1a0>
 800b63c:	7bbb      	ldrb	r3, [r7, #14]
 800b63e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b642:	4613      	mov	r3, r2
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	4413      	add	r3, r2
 800b648:	009b      	lsls	r3, r3, #2
 800b64a:	3310      	adds	r3, #16
 800b64c:	687a      	ldr	r2, [r7, #4]
 800b64e:	4413      	add	r3, r2
 800b650:	3304      	adds	r3, #4
 800b652:	e00b      	b.n	800b66c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b654:	7bbb      	ldrb	r3, [r7, #14]
 800b656:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b65a:	4613      	mov	r3, r2
 800b65c:	009b      	lsls	r3, r3, #2
 800b65e:	4413      	add	r3, r2
 800b660:	009b      	lsls	r3, r3, #2
 800b662:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b666:	687a      	ldr	r2, [r7, #4]
 800b668:	4413      	add	r3, r2
 800b66a:	3304      	adds	r3, #4
 800b66c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	2200      	movs	r2, #0
 800b672:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	2202      	movs	r2, #2
 800b678:	4619      	mov	r1, r3
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 fbfb 	bl	800be76 <USBD_CtlSendData>
              break;
 800b680:	e06a      	b.n	800b758 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b682:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b686:	2b00      	cmp	r3, #0
 800b688:	da11      	bge.n	800b6ae <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b68a:	7bbb      	ldrb	r3, [r7, #14]
 800b68c:	f003 020f 	and.w	r2, r3, #15
 800b690:	6879      	ldr	r1, [r7, #4]
 800b692:	4613      	mov	r3, r2
 800b694:	009b      	lsls	r3, r3, #2
 800b696:	4413      	add	r3, r2
 800b698:	009b      	lsls	r3, r3, #2
 800b69a:	440b      	add	r3, r1
 800b69c:	3318      	adds	r3, #24
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d117      	bne.n	800b6d4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b6a4:	6839      	ldr	r1, [r7, #0]
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 fb7b 	bl	800bda2 <USBD_CtlError>
                  break;
 800b6ac:	e054      	b.n	800b758 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b6ae:	7bbb      	ldrb	r3, [r7, #14]
 800b6b0:	f003 020f 	and.w	r2, r3, #15
 800b6b4:	6879      	ldr	r1, [r7, #4]
 800b6b6:	4613      	mov	r3, r2
 800b6b8:	009b      	lsls	r3, r3, #2
 800b6ba:	4413      	add	r3, r2
 800b6bc:	009b      	lsls	r3, r3, #2
 800b6be:	440b      	add	r3, r1
 800b6c0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d104      	bne.n	800b6d4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b6ca:	6839      	ldr	r1, [r7, #0]
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f000 fb68 	bl	800bda2 <USBD_CtlError>
                  break;
 800b6d2:	e041      	b.n	800b758 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	da0b      	bge.n	800b6f4 <USBD_StdEPReq+0x240>
 800b6dc:	7bbb      	ldrb	r3, [r7, #14]
 800b6de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b6e2:	4613      	mov	r3, r2
 800b6e4:	009b      	lsls	r3, r3, #2
 800b6e6:	4413      	add	r3, r2
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	3310      	adds	r3, #16
 800b6ec:	687a      	ldr	r2, [r7, #4]
 800b6ee:	4413      	add	r3, r2
 800b6f0:	3304      	adds	r3, #4
 800b6f2:	e00b      	b.n	800b70c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b6f4:	7bbb      	ldrb	r3, [r7, #14]
 800b6f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6fa:	4613      	mov	r3, r2
 800b6fc:	009b      	lsls	r3, r3, #2
 800b6fe:	4413      	add	r3, r2
 800b700:	009b      	lsls	r3, r3, #2
 800b702:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	4413      	add	r3, r2
 800b70a:	3304      	adds	r3, #4
 800b70c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b70e:	7bbb      	ldrb	r3, [r7, #14]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d002      	beq.n	800b71a <USBD_StdEPReq+0x266>
 800b714:	7bbb      	ldrb	r3, [r7, #14]
 800b716:	2b80      	cmp	r3, #128	; 0x80
 800b718:	d103      	bne.n	800b722 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	2200      	movs	r2, #0
 800b71e:	601a      	str	r2, [r3, #0]
 800b720:	e00e      	b.n	800b740 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b722:	7bbb      	ldrb	r3, [r7, #14]
 800b724:	4619      	mov	r1, r3
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f000 ffb0 	bl	800c68c <USBD_LL_IsStallEP>
 800b72c:	4603      	mov	r3, r0
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d003      	beq.n	800b73a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	2201      	movs	r2, #1
 800b736:	601a      	str	r2, [r3, #0]
 800b738:	e002      	b.n	800b740 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	2200      	movs	r2, #0
 800b73e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	2202      	movs	r2, #2
 800b744:	4619      	mov	r1, r3
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 fb95 	bl	800be76 <USBD_CtlSendData>
              break;
 800b74c:	e004      	b.n	800b758 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b74e:	6839      	ldr	r1, [r7, #0]
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f000 fb26 	bl	800bda2 <USBD_CtlError>
              break;
 800b756:	bf00      	nop
          }
          break;
 800b758:	e004      	b.n	800b764 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b75a:	6839      	ldr	r1, [r7, #0]
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f000 fb20 	bl	800bda2 <USBD_CtlError>
          break;
 800b762:	bf00      	nop
      }
      break;
 800b764:	e004      	b.n	800b770 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b766:	6839      	ldr	r1, [r7, #0]
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 fb1a 	bl	800bda2 <USBD_CtlError>
      break;
 800b76e:	bf00      	nop
  }

  return ret;
 800b770:	7bfb      	ldrb	r3, [r7, #15]
}
 800b772:	4618      	mov	r0, r3
 800b774:	3710      	adds	r7, #16
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
	...

0800b77c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b786:	2300      	movs	r3, #0
 800b788:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b78a:	2300      	movs	r3, #0
 800b78c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b78e:	2300      	movs	r3, #0
 800b790:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	885b      	ldrh	r3, [r3, #2]
 800b796:	0a1b      	lsrs	r3, r3, #8
 800b798:	b29b      	uxth	r3, r3
 800b79a:	3b01      	subs	r3, #1
 800b79c:	2b06      	cmp	r3, #6
 800b79e:	f200 8128 	bhi.w	800b9f2 <USBD_GetDescriptor+0x276>
 800b7a2:	a201      	add	r2, pc, #4	; (adr r2, 800b7a8 <USBD_GetDescriptor+0x2c>)
 800b7a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7a8:	0800b7c5 	.word	0x0800b7c5
 800b7ac:	0800b7dd 	.word	0x0800b7dd
 800b7b0:	0800b81d 	.word	0x0800b81d
 800b7b4:	0800b9f3 	.word	0x0800b9f3
 800b7b8:	0800b9f3 	.word	0x0800b9f3
 800b7bc:	0800b993 	.word	0x0800b993
 800b7c0:	0800b9bf 	.word	0x0800b9bf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	687a      	ldr	r2, [r7, #4]
 800b7ce:	7c12      	ldrb	r2, [r2, #16]
 800b7d0:	f107 0108 	add.w	r1, r7, #8
 800b7d4:	4610      	mov	r0, r2
 800b7d6:	4798      	blx	r3
 800b7d8:	60f8      	str	r0, [r7, #12]
      break;
 800b7da:	e112      	b.n	800ba02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	7c1b      	ldrb	r3, [r3, #16]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d10d      	bne.n	800b800 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7ec:	f107 0208 	add.w	r2, r7, #8
 800b7f0:	4610      	mov	r0, r2
 800b7f2:	4798      	blx	r3
 800b7f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	3301      	adds	r3, #1
 800b7fa:	2202      	movs	r2, #2
 800b7fc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b7fe:	e100      	b.n	800ba02 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b808:	f107 0208 	add.w	r2, r7, #8
 800b80c:	4610      	mov	r0, r2
 800b80e:	4798      	blx	r3
 800b810:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	3301      	adds	r3, #1
 800b816:	2202      	movs	r2, #2
 800b818:	701a      	strb	r2, [r3, #0]
      break;
 800b81a:	e0f2      	b.n	800ba02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	885b      	ldrh	r3, [r3, #2]
 800b820:	b2db      	uxtb	r3, r3
 800b822:	2b05      	cmp	r3, #5
 800b824:	f200 80ac 	bhi.w	800b980 <USBD_GetDescriptor+0x204>
 800b828:	a201      	add	r2, pc, #4	; (adr r2, 800b830 <USBD_GetDescriptor+0xb4>)
 800b82a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b82e:	bf00      	nop
 800b830:	0800b849 	.word	0x0800b849
 800b834:	0800b87d 	.word	0x0800b87d
 800b838:	0800b8b1 	.word	0x0800b8b1
 800b83c:	0800b8e5 	.word	0x0800b8e5
 800b840:	0800b919 	.word	0x0800b919
 800b844:	0800b94d 	.word	0x0800b94d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d00b      	beq.n	800b86c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	687a      	ldr	r2, [r7, #4]
 800b85e:	7c12      	ldrb	r2, [r2, #16]
 800b860:	f107 0108 	add.w	r1, r7, #8
 800b864:	4610      	mov	r0, r2
 800b866:	4798      	blx	r3
 800b868:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b86a:	e091      	b.n	800b990 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b86c:	6839      	ldr	r1, [r7, #0]
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f000 fa97 	bl	800bda2 <USBD_CtlError>
            err++;
 800b874:	7afb      	ldrb	r3, [r7, #11]
 800b876:	3301      	adds	r3, #1
 800b878:	72fb      	strb	r3, [r7, #11]
          break;
 800b87a:	e089      	b.n	800b990 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b882:	689b      	ldr	r3, [r3, #8]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d00b      	beq.n	800b8a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b88e:	689b      	ldr	r3, [r3, #8]
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	7c12      	ldrb	r2, [r2, #16]
 800b894:	f107 0108 	add.w	r1, r7, #8
 800b898:	4610      	mov	r0, r2
 800b89a:	4798      	blx	r3
 800b89c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b89e:	e077      	b.n	800b990 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8a0:	6839      	ldr	r1, [r7, #0]
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 fa7d 	bl	800bda2 <USBD_CtlError>
            err++;
 800b8a8:	7afb      	ldrb	r3, [r7, #11]
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	72fb      	strb	r3, [r7, #11]
          break;
 800b8ae:	e06f      	b.n	800b990 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b8b6:	68db      	ldr	r3, [r3, #12]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d00b      	beq.n	800b8d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b8c2:	68db      	ldr	r3, [r3, #12]
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	7c12      	ldrb	r2, [r2, #16]
 800b8c8:	f107 0108 	add.w	r1, r7, #8
 800b8cc:	4610      	mov	r0, r2
 800b8ce:	4798      	blx	r3
 800b8d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8d2:	e05d      	b.n	800b990 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8d4:	6839      	ldr	r1, [r7, #0]
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f000 fa63 	bl	800bda2 <USBD_CtlError>
            err++;
 800b8dc:	7afb      	ldrb	r3, [r7, #11]
 800b8de:	3301      	adds	r3, #1
 800b8e0:	72fb      	strb	r3, [r7, #11]
          break;
 800b8e2:	e055      	b.n	800b990 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b8ea:	691b      	ldr	r3, [r3, #16]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d00b      	beq.n	800b908 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b8f6:	691b      	ldr	r3, [r3, #16]
 800b8f8:	687a      	ldr	r2, [r7, #4]
 800b8fa:	7c12      	ldrb	r2, [r2, #16]
 800b8fc:	f107 0108 	add.w	r1, r7, #8
 800b900:	4610      	mov	r0, r2
 800b902:	4798      	blx	r3
 800b904:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b906:	e043      	b.n	800b990 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b908:	6839      	ldr	r1, [r7, #0]
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f000 fa49 	bl	800bda2 <USBD_CtlError>
            err++;
 800b910:	7afb      	ldrb	r3, [r7, #11]
 800b912:	3301      	adds	r3, #1
 800b914:	72fb      	strb	r3, [r7, #11]
          break;
 800b916:	e03b      	b.n	800b990 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b91e:	695b      	ldr	r3, [r3, #20]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d00b      	beq.n	800b93c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b92a:	695b      	ldr	r3, [r3, #20]
 800b92c:	687a      	ldr	r2, [r7, #4]
 800b92e:	7c12      	ldrb	r2, [r2, #16]
 800b930:	f107 0108 	add.w	r1, r7, #8
 800b934:	4610      	mov	r0, r2
 800b936:	4798      	blx	r3
 800b938:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b93a:	e029      	b.n	800b990 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b93c:	6839      	ldr	r1, [r7, #0]
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f000 fa2f 	bl	800bda2 <USBD_CtlError>
            err++;
 800b944:	7afb      	ldrb	r3, [r7, #11]
 800b946:	3301      	adds	r3, #1
 800b948:	72fb      	strb	r3, [r7, #11]
          break;
 800b94a:	e021      	b.n	800b990 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b952:	699b      	ldr	r3, [r3, #24]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d00b      	beq.n	800b970 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b95e:	699b      	ldr	r3, [r3, #24]
 800b960:	687a      	ldr	r2, [r7, #4]
 800b962:	7c12      	ldrb	r2, [r2, #16]
 800b964:	f107 0108 	add.w	r1, r7, #8
 800b968:	4610      	mov	r0, r2
 800b96a:	4798      	blx	r3
 800b96c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b96e:	e00f      	b.n	800b990 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b970:	6839      	ldr	r1, [r7, #0]
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f000 fa15 	bl	800bda2 <USBD_CtlError>
            err++;
 800b978:	7afb      	ldrb	r3, [r7, #11]
 800b97a:	3301      	adds	r3, #1
 800b97c:	72fb      	strb	r3, [r7, #11]
          break;
 800b97e:	e007      	b.n	800b990 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b980:	6839      	ldr	r1, [r7, #0]
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 fa0d 	bl	800bda2 <USBD_CtlError>
          err++;
 800b988:	7afb      	ldrb	r3, [r7, #11]
 800b98a:	3301      	adds	r3, #1
 800b98c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b98e:	e038      	b.n	800ba02 <USBD_GetDescriptor+0x286>
 800b990:	e037      	b.n	800ba02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	7c1b      	ldrb	r3, [r3, #16]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d109      	bne.n	800b9ae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9a2:	f107 0208 	add.w	r2, r7, #8
 800b9a6:	4610      	mov	r0, r2
 800b9a8:	4798      	blx	r3
 800b9aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b9ac:	e029      	b.n	800ba02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b9ae:	6839      	ldr	r1, [r7, #0]
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 f9f6 	bl	800bda2 <USBD_CtlError>
        err++;
 800b9b6:	7afb      	ldrb	r3, [r7, #11]
 800b9b8:	3301      	adds	r3, #1
 800b9ba:	72fb      	strb	r3, [r7, #11]
      break;
 800b9bc:	e021      	b.n	800ba02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	7c1b      	ldrb	r3, [r3, #16]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d10d      	bne.n	800b9e2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9ce:	f107 0208 	add.w	r2, r7, #8
 800b9d2:	4610      	mov	r0, r2
 800b9d4:	4798      	blx	r3
 800b9d6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	3301      	adds	r3, #1
 800b9dc:	2207      	movs	r2, #7
 800b9de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b9e0:	e00f      	b.n	800ba02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b9e2:	6839      	ldr	r1, [r7, #0]
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f000 f9dc 	bl	800bda2 <USBD_CtlError>
        err++;
 800b9ea:	7afb      	ldrb	r3, [r7, #11]
 800b9ec:	3301      	adds	r3, #1
 800b9ee:	72fb      	strb	r3, [r7, #11]
      break;
 800b9f0:	e007      	b.n	800ba02 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b9f2:	6839      	ldr	r1, [r7, #0]
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f000 f9d4 	bl	800bda2 <USBD_CtlError>
      err++;
 800b9fa:	7afb      	ldrb	r3, [r7, #11]
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	72fb      	strb	r3, [r7, #11]
      break;
 800ba00:	bf00      	nop
  }

  if (err != 0U)
 800ba02:	7afb      	ldrb	r3, [r7, #11]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d11c      	bne.n	800ba42 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800ba08:	893b      	ldrh	r3, [r7, #8]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d011      	beq.n	800ba32 <USBD_GetDescriptor+0x2b6>
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	88db      	ldrh	r3, [r3, #6]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d00d      	beq.n	800ba32 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	88da      	ldrh	r2, [r3, #6]
 800ba1a:	893b      	ldrh	r3, [r7, #8]
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	bf28      	it	cs
 800ba20:	4613      	movcs	r3, r2
 800ba22:	b29b      	uxth	r3, r3
 800ba24:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ba26:	893b      	ldrh	r3, [r7, #8]
 800ba28:	461a      	mov	r2, r3
 800ba2a:	68f9      	ldr	r1, [r7, #12]
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f000 fa22 	bl	800be76 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	88db      	ldrh	r3, [r3, #6]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d104      	bne.n	800ba44 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f000 fa79 	bl	800bf32 <USBD_CtlSendStatus>
 800ba40:	e000      	b.n	800ba44 <USBD_GetDescriptor+0x2c8>
    return;
 800ba42:	bf00      	nop
    }
  }
}
 800ba44:	3710      	adds	r7, #16
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	bf00      	nop

0800ba4c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	889b      	ldrh	r3, [r3, #4]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d130      	bne.n	800bac0 <USBD_SetAddress+0x74>
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	88db      	ldrh	r3, [r3, #6]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d12c      	bne.n	800bac0 <USBD_SetAddress+0x74>
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	885b      	ldrh	r3, [r3, #2]
 800ba6a:	2b7f      	cmp	r3, #127	; 0x7f
 800ba6c:	d828      	bhi.n	800bac0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	885b      	ldrh	r3, [r3, #2]
 800ba72:	b2db      	uxtb	r3, r3
 800ba74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba78:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba80:	2b03      	cmp	r3, #3
 800ba82:	d104      	bne.n	800ba8e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ba84:	6839      	ldr	r1, [r7, #0]
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f000 f98b 	bl	800bda2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba8c:	e01d      	b.n	800baca <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	7bfa      	ldrb	r2, [r7, #15]
 800ba92:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ba96:	7bfb      	ldrb	r3, [r7, #15]
 800ba98:	4619      	mov	r1, r3
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f000 fe21 	bl	800c6e2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f000 fa46 	bl	800bf32 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800baa6:	7bfb      	ldrb	r3, [r7, #15]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d004      	beq.n	800bab6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2202      	movs	r2, #2
 800bab0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bab4:	e009      	b.n	800baca <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2201      	movs	r2, #1
 800baba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800babe:	e004      	b.n	800baca <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bac0:	6839      	ldr	r1, [r7, #0]
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f000 f96d 	bl	800bda2 <USBD_CtlError>
  }
}
 800bac8:	bf00      	nop
 800baca:	bf00      	nop
 800bacc:	3710      	adds	r7, #16
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
	...

0800bad4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	885b      	ldrh	r3, [r3, #2]
 800bae2:	b2da      	uxtb	r2, r3
 800bae4:	4b41      	ldr	r3, [pc, #260]	; (800bbec <USBD_SetConfig+0x118>)
 800bae6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bae8:	4b40      	ldr	r3, [pc, #256]	; (800bbec <USBD_SetConfig+0x118>)
 800baea:	781b      	ldrb	r3, [r3, #0]
 800baec:	2b01      	cmp	r3, #1
 800baee:	d904      	bls.n	800bafa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800baf0:	6839      	ldr	r1, [r7, #0]
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 f955 	bl	800bda2 <USBD_CtlError>
 800baf8:	e075      	b.n	800bbe6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb00:	2b02      	cmp	r3, #2
 800bb02:	d002      	beq.n	800bb0a <USBD_SetConfig+0x36>
 800bb04:	2b03      	cmp	r3, #3
 800bb06:	d023      	beq.n	800bb50 <USBD_SetConfig+0x7c>
 800bb08:	e062      	b.n	800bbd0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800bb0a:	4b38      	ldr	r3, [pc, #224]	; (800bbec <USBD_SetConfig+0x118>)
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d01a      	beq.n	800bb48 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800bb12:	4b36      	ldr	r3, [pc, #216]	; (800bbec <USBD_SetConfig+0x118>)
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	461a      	mov	r2, r3
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2203      	movs	r2, #3
 800bb20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bb24:	4b31      	ldr	r3, [pc, #196]	; (800bbec <USBD_SetConfig+0x118>)
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	4619      	mov	r1, r3
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f7ff f9e8 	bl	800af00 <USBD_SetClassConfig>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b02      	cmp	r3, #2
 800bb34:	d104      	bne.n	800bb40 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800bb36:	6839      	ldr	r1, [r7, #0]
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f000 f932 	bl	800bda2 <USBD_CtlError>
            return;
 800bb3e:	e052      	b.n	800bbe6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f000 f9f6 	bl	800bf32 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bb46:	e04e      	b.n	800bbe6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f000 f9f2 	bl	800bf32 <USBD_CtlSendStatus>
        break;
 800bb4e:	e04a      	b.n	800bbe6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800bb50:	4b26      	ldr	r3, [pc, #152]	; (800bbec <USBD_SetConfig+0x118>)
 800bb52:	781b      	ldrb	r3, [r3, #0]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d112      	bne.n	800bb7e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2202      	movs	r2, #2
 800bb5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800bb60:	4b22      	ldr	r3, [pc, #136]	; (800bbec <USBD_SetConfig+0x118>)
 800bb62:	781b      	ldrb	r3, [r3, #0]
 800bb64:	461a      	mov	r2, r3
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800bb6a:	4b20      	ldr	r3, [pc, #128]	; (800bbec <USBD_SetConfig+0x118>)
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	4619      	mov	r1, r3
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f7ff f9e4 	bl	800af3e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f000 f9db 	bl	800bf32 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bb7c:	e033      	b.n	800bbe6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800bb7e:	4b1b      	ldr	r3, [pc, #108]	; (800bbec <USBD_SetConfig+0x118>)
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	461a      	mov	r2, r3
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d01d      	beq.n	800bbc8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	685b      	ldr	r3, [r3, #4]
 800bb90:	b2db      	uxtb	r3, r3
 800bb92:	4619      	mov	r1, r3
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f7ff f9d2 	bl	800af3e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800bb9a:	4b14      	ldr	r3, [pc, #80]	; (800bbec <USBD_SetConfig+0x118>)
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	461a      	mov	r2, r3
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bba4:	4b11      	ldr	r3, [pc, #68]	; (800bbec <USBD_SetConfig+0x118>)
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	4619      	mov	r1, r3
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f7ff f9a8 	bl	800af00 <USBD_SetClassConfig>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	2b02      	cmp	r3, #2
 800bbb4:	d104      	bne.n	800bbc0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800bbb6:	6839      	ldr	r1, [r7, #0]
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f000 f8f2 	bl	800bda2 <USBD_CtlError>
            return;
 800bbbe:	e012      	b.n	800bbe6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 f9b6 	bl	800bf32 <USBD_CtlSendStatus>
        break;
 800bbc6:	e00e      	b.n	800bbe6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f000 f9b2 	bl	800bf32 <USBD_CtlSendStatus>
        break;
 800bbce:	e00a      	b.n	800bbe6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800bbd0:	6839      	ldr	r1, [r7, #0]
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f000 f8e5 	bl	800bda2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800bbd8:	4b04      	ldr	r3, [pc, #16]	; (800bbec <USBD_SetConfig+0x118>)
 800bbda:	781b      	ldrb	r3, [r3, #0]
 800bbdc:	4619      	mov	r1, r3
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f7ff f9ad 	bl	800af3e <USBD_ClrClassConfig>
        break;
 800bbe4:	bf00      	nop
    }
  }
}
 800bbe6:	3708      	adds	r7, #8
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}
 800bbec:	20000624 	.word	0x20000624

0800bbf0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	88db      	ldrh	r3, [r3, #6]
 800bbfe:	2b01      	cmp	r3, #1
 800bc00:	d004      	beq.n	800bc0c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bc02:	6839      	ldr	r1, [r7, #0]
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f000 f8cc 	bl	800bda2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bc0a:	e022      	b.n	800bc52 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc12:	2b02      	cmp	r3, #2
 800bc14:	dc02      	bgt.n	800bc1c <USBD_GetConfig+0x2c>
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	dc03      	bgt.n	800bc22 <USBD_GetConfig+0x32>
 800bc1a:	e015      	b.n	800bc48 <USBD_GetConfig+0x58>
 800bc1c:	2b03      	cmp	r3, #3
 800bc1e:	d00b      	beq.n	800bc38 <USBD_GetConfig+0x48>
 800bc20:	e012      	b.n	800bc48 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2200      	movs	r2, #0
 800bc26:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	3308      	adds	r3, #8
 800bc2c:	2201      	movs	r2, #1
 800bc2e:	4619      	mov	r1, r3
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 f920 	bl	800be76 <USBD_CtlSendData>
        break;
 800bc36:	e00c      	b.n	800bc52 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	3304      	adds	r3, #4
 800bc3c:	2201      	movs	r2, #1
 800bc3e:	4619      	mov	r1, r3
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f000 f918 	bl	800be76 <USBD_CtlSendData>
        break;
 800bc46:	e004      	b.n	800bc52 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800bc48:	6839      	ldr	r1, [r7, #0]
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f000 f8a9 	bl	800bda2 <USBD_CtlError>
        break;
 800bc50:	bf00      	nop
}
 800bc52:	bf00      	nop
 800bc54:	3708      	adds	r7, #8
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}

0800bc5a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc5a:	b580      	push	{r7, lr}
 800bc5c:	b082      	sub	sp, #8
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	6078      	str	r0, [r7, #4]
 800bc62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc6a:	3b01      	subs	r3, #1
 800bc6c:	2b02      	cmp	r3, #2
 800bc6e:	d81e      	bhi.n	800bcae <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	88db      	ldrh	r3, [r3, #6]
 800bc74:	2b02      	cmp	r3, #2
 800bc76:	d004      	beq.n	800bc82 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800bc78:	6839      	ldr	r1, [r7, #0]
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f000 f891 	bl	800bda2 <USBD_CtlError>
        break;
 800bc80:	e01a      	b.n	800bcb8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2201      	movs	r2, #1
 800bc86:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d005      	beq.n	800bc9e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	68db      	ldr	r3, [r3, #12]
 800bc96:	f043 0202 	orr.w	r2, r3, #2
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	330c      	adds	r3, #12
 800bca2:	2202      	movs	r2, #2
 800bca4:	4619      	mov	r1, r3
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f000 f8e5 	bl	800be76 <USBD_CtlSendData>
      break;
 800bcac:	e004      	b.n	800bcb8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800bcae:	6839      	ldr	r1, [r7, #0]
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f000 f876 	bl	800bda2 <USBD_CtlError>
      break;
 800bcb6:	bf00      	nop
  }
}
 800bcb8:	bf00      	nop
 800bcba:	3708      	adds	r7, #8
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b082      	sub	sp, #8
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	885b      	ldrh	r3, [r3, #2]
 800bcce:	2b01      	cmp	r3, #1
 800bcd0:	d106      	bne.n	800bce0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 f929 	bl	800bf32 <USBD_CtlSendStatus>
  }
}
 800bce0:	bf00      	nop
 800bce2:	3708      	adds	r7, #8
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b082      	sub	sp, #8
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcf8:	3b01      	subs	r3, #1
 800bcfa:	2b02      	cmp	r3, #2
 800bcfc:	d80b      	bhi.n	800bd16 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	885b      	ldrh	r3, [r3, #2]
 800bd02:	2b01      	cmp	r3, #1
 800bd04:	d10c      	bne.n	800bd20 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f000 f90f 	bl	800bf32 <USBD_CtlSendStatus>
      }
      break;
 800bd14:	e004      	b.n	800bd20 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800bd16:	6839      	ldr	r1, [r7, #0]
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f000 f842 	bl	800bda2 <USBD_CtlError>
      break;
 800bd1e:	e000      	b.n	800bd22 <USBD_ClrFeature+0x3a>
      break;
 800bd20:	bf00      	nop
  }
}
 800bd22:	bf00      	nop
 800bd24:	3708      	adds	r7, #8
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}

0800bd2a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bd2a:	b480      	push	{r7}
 800bd2c:	b083      	sub	sp, #12
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	6078      	str	r0, [r7, #4]
 800bd32:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	781a      	ldrb	r2, [r3, #0]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	785a      	ldrb	r2, [r3, #1]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	3302      	adds	r3, #2
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	b29a      	uxth	r2, r3
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	3303      	adds	r3, #3
 800bd50:	781b      	ldrb	r3, [r3, #0]
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	021b      	lsls	r3, r3, #8
 800bd56:	b29b      	uxth	r3, r3
 800bd58:	4413      	add	r3, r2
 800bd5a:	b29a      	uxth	r2, r3
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	3304      	adds	r3, #4
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	b29a      	uxth	r2, r3
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	3305      	adds	r3, #5
 800bd6c:	781b      	ldrb	r3, [r3, #0]
 800bd6e:	b29b      	uxth	r3, r3
 800bd70:	021b      	lsls	r3, r3, #8
 800bd72:	b29b      	uxth	r3, r3
 800bd74:	4413      	add	r3, r2
 800bd76:	b29a      	uxth	r2, r3
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	3306      	adds	r3, #6
 800bd80:	781b      	ldrb	r3, [r3, #0]
 800bd82:	b29a      	uxth	r2, r3
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	3307      	adds	r3, #7
 800bd88:	781b      	ldrb	r3, [r3, #0]
 800bd8a:	b29b      	uxth	r3, r3
 800bd8c:	021b      	lsls	r3, r3, #8
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	4413      	add	r3, r2
 800bd92:	b29a      	uxth	r2, r3
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	80da      	strh	r2, [r3, #6]

}
 800bd98:	bf00      	nop
 800bd9a:	370c      	adds	r7, #12
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bc80      	pop	{r7}
 800bda0:	4770      	bx	lr

0800bda2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800bda2:	b580      	push	{r7, lr}
 800bda4:	b082      	sub	sp, #8
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	6078      	str	r0, [r7, #4]
 800bdaa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800bdac:	2180      	movs	r1, #128	; 0x80
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f000 fc2e 	bl	800c610 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800bdb4:	2100      	movs	r1, #0
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f000 fc2a 	bl	800c610 <USBD_LL_StallEP>
}
 800bdbc:	bf00      	nop
 800bdbe:	3708      	adds	r7, #8
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b086      	sub	sp, #24
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	60f8      	str	r0, [r7, #12]
 800bdcc:	60b9      	str	r1, [r7, #8]
 800bdce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d032      	beq.n	800be40 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	f000 f834 	bl	800be48 <USBD_GetLen>
 800bde0:	4603      	mov	r3, r0
 800bde2:	3301      	adds	r3, #1
 800bde4:	b29b      	uxth	r3, r3
 800bde6:	005b      	lsls	r3, r3, #1
 800bde8:	b29a      	uxth	r2, r3
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800bdee:	7dfb      	ldrb	r3, [r7, #23]
 800bdf0:	1c5a      	adds	r2, r3, #1
 800bdf2:	75fa      	strb	r2, [r7, #23]
 800bdf4:	461a      	mov	r2, r3
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	4413      	add	r3, r2
 800bdfa:	687a      	ldr	r2, [r7, #4]
 800bdfc:	7812      	ldrb	r2, [r2, #0]
 800bdfe:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800be00:	7dfb      	ldrb	r3, [r7, #23]
 800be02:	1c5a      	adds	r2, r3, #1
 800be04:	75fa      	strb	r2, [r7, #23]
 800be06:	461a      	mov	r2, r3
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	4413      	add	r3, r2
 800be0c:	2203      	movs	r2, #3
 800be0e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800be10:	e012      	b.n	800be38 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	1c5a      	adds	r2, r3, #1
 800be16:	60fa      	str	r2, [r7, #12]
 800be18:	7dfa      	ldrb	r2, [r7, #23]
 800be1a:	1c51      	adds	r1, r2, #1
 800be1c:	75f9      	strb	r1, [r7, #23]
 800be1e:	4611      	mov	r1, r2
 800be20:	68ba      	ldr	r2, [r7, #8]
 800be22:	440a      	add	r2, r1
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800be28:	7dfb      	ldrb	r3, [r7, #23]
 800be2a:	1c5a      	adds	r2, r3, #1
 800be2c:	75fa      	strb	r2, [r7, #23]
 800be2e:	461a      	mov	r2, r3
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	4413      	add	r3, r2
 800be34:	2200      	movs	r2, #0
 800be36:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d1e8      	bne.n	800be12 <USBD_GetString+0x4e>
    }
  }
}
 800be40:	bf00      	nop
 800be42:	3718      	adds	r7, #24
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}

0800be48 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800be48:	b480      	push	{r7}
 800be4a:	b085      	sub	sp, #20
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800be50:	2300      	movs	r3, #0
 800be52:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800be54:	e005      	b.n	800be62 <USBD_GetLen+0x1a>
  {
    len++;
 800be56:	7bfb      	ldrb	r3, [r7, #15]
 800be58:	3301      	adds	r3, #1
 800be5a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	3301      	adds	r3, #1
 800be60:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	781b      	ldrb	r3, [r3, #0]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d1f5      	bne.n	800be56 <USBD_GetLen+0xe>
  }

  return len;
 800be6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3714      	adds	r7, #20
 800be70:	46bd      	mov	sp, r7
 800be72:	bc80      	pop	{r7}
 800be74:	4770      	bx	lr

0800be76 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800be76:	b580      	push	{r7, lr}
 800be78:	b084      	sub	sp, #16
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	60f8      	str	r0, [r7, #12]
 800be7e:	60b9      	str	r1, [r7, #8]
 800be80:	4613      	mov	r3, r2
 800be82:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2202      	movs	r2, #2
 800be88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800be8c:	88fa      	ldrh	r2, [r7, #6]
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800be92:	88fa      	ldrh	r2, [r7, #6]
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800be98:	88fb      	ldrh	r3, [r7, #6]
 800be9a:	68ba      	ldr	r2, [r7, #8]
 800be9c:	2100      	movs	r1, #0
 800be9e:	68f8      	ldr	r0, [r7, #12]
 800bea0:	f000 fc3e 	bl	800c720 <USBD_LL_Transmit>

  return USBD_OK;
 800bea4:	2300      	movs	r3, #0
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3710      	adds	r7, #16
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}

0800beae <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800beae:	b580      	push	{r7, lr}
 800beb0:	b084      	sub	sp, #16
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	60f8      	str	r0, [r7, #12]
 800beb6:	60b9      	str	r1, [r7, #8]
 800beb8:	4613      	mov	r3, r2
 800beba:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bebc:	88fb      	ldrh	r3, [r7, #6]
 800bebe:	68ba      	ldr	r2, [r7, #8]
 800bec0:	2100      	movs	r1, #0
 800bec2:	68f8      	ldr	r0, [r7, #12]
 800bec4:	f000 fc2c 	bl	800c720 <USBD_LL_Transmit>

  return USBD_OK;
 800bec8:	2300      	movs	r3, #0
}
 800beca:	4618      	mov	r0, r3
 800becc:	3710      	adds	r7, #16
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}

0800bed2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800bed2:	b580      	push	{r7, lr}
 800bed4:	b084      	sub	sp, #16
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	60f8      	str	r0, [r7, #12]
 800beda:	60b9      	str	r1, [r7, #8]
 800bedc:	4613      	mov	r3, r2
 800bede:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2203      	movs	r2, #3
 800bee4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bee8:	88fa      	ldrh	r2, [r7, #6]
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800bef0:	88fa      	ldrh	r2, [r7, #6]
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bef8:	88fb      	ldrh	r3, [r7, #6]
 800befa:	68ba      	ldr	r2, [r7, #8]
 800befc:	2100      	movs	r1, #0
 800befe:	68f8      	ldr	r0, [r7, #12]
 800bf00:	f000 fc31 	bl	800c766 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf04:	2300      	movs	r3, #0
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3710      	adds	r7, #16
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}

0800bf0e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800bf0e:	b580      	push	{r7, lr}
 800bf10:	b084      	sub	sp, #16
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	60f8      	str	r0, [r7, #12]
 800bf16:	60b9      	str	r1, [r7, #8]
 800bf18:	4613      	mov	r3, r2
 800bf1a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bf1c:	88fb      	ldrh	r3, [r7, #6]
 800bf1e:	68ba      	ldr	r2, [r7, #8]
 800bf20:	2100      	movs	r1, #0
 800bf22:	68f8      	ldr	r0, [r7, #12]
 800bf24:	f000 fc1f 	bl	800c766 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf28:	2300      	movs	r3, #0
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3710      	adds	r7, #16
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}

0800bf32 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bf32:	b580      	push	{r7, lr}
 800bf34:	b082      	sub	sp, #8
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2204      	movs	r2, #4
 800bf3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bf42:	2300      	movs	r3, #0
 800bf44:	2200      	movs	r2, #0
 800bf46:	2100      	movs	r1, #0
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f000 fbe9 	bl	800c720 <USBD_LL_Transmit>

  return USBD_OK;
 800bf4e:	2300      	movs	r3, #0
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3708      	adds	r7, #8
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}

0800bf58 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2205      	movs	r2, #5
 800bf64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf68:	2300      	movs	r3, #0
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	2100      	movs	r1, #0
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 fbf9 	bl	800c766 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf74:	2300      	movs	r3, #0
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3708      	adds	r7, #8
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
	...

0800bf80 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bf84:	2200      	movs	r2, #0
 800bf86:	4912      	ldr	r1, [pc, #72]	; (800bfd0 <MX_USB_DEVICE_Init+0x50>)
 800bf88:	4812      	ldr	r0, [pc, #72]	; (800bfd4 <MX_USB_DEVICE_Init+0x54>)
 800bf8a:	f7fe ff5f 	bl	800ae4c <USBD_Init>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d001      	beq.n	800bf98 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bf94:	f7f7 fa66 	bl	8003464 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bf98:	490f      	ldr	r1, [pc, #60]	; (800bfd8 <MX_USB_DEVICE_Init+0x58>)
 800bf9a:	480e      	ldr	r0, [pc, #56]	; (800bfd4 <MX_USB_DEVICE_Init+0x54>)
 800bf9c:	f7fe ff81 	bl	800aea2 <USBD_RegisterClass>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d001      	beq.n	800bfaa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bfa6:	f7f7 fa5d 	bl	8003464 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bfaa:	490c      	ldr	r1, [pc, #48]	; (800bfdc <MX_USB_DEVICE_Init+0x5c>)
 800bfac:	4809      	ldr	r0, [pc, #36]	; (800bfd4 <MX_USB_DEVICE_Init+0x54>)
 800bfae:	f7fe fee1 	bl	800ad74 <USBD_CDC_RegisterInterface>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d001      	beq.n	800bfbc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bfb8:	f7f7 fa54 	bl	8003464 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bfbc:	4805      	ldr	r0, [pc, #20]	; (800bfd4 <MX_USB_DEVICE_Init+0x54>)
 800bfbe:	f7fe ff89 	bl	800aed4 <USBD_Start>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d001      	beq.n	800bfcc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bfc8:	f7f7 fa4c 	bl	8003464 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bfcc:	bf00      	nop
 800bfce:	bd80      	pop	{r7, pc}
 800bfd0:	20000134 	.word	0x20000134
 800bfd4:	20000854 	.word	0x20000854
 800bfd8:	20000020 	.word	0x20000020
 800bfdc:	20000124 	.word	0x20000124

0800bfe0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	4905      	ldr	r1, [pc, #20]	; (800bffc <CDC_Init_FS+0x1c>)
 800bfe8:	4805      	ldr	r0, [pc, #20]	; (800c000 <CDC_Init_FS+0x20>)
 800bfea:	f7fe fed9 	bl	800ada0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bfee:	4905      	ldr	r1, [pc, #20]	; (800c004 <CDC_Init_FS+0x24>)
 800bff0:	4803      	ldr	r0, [pc, #12]	; (800c000 <CDC_Init_FS+0x20>)
 800bff2:	f7fe feee 	bl	800add2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bff6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	bd80      	pop	{r7, pc}
 800bffc:	20000f00 	.word	0x20000f00
 800c000:	20000854 	.word	0x20000854
 800c004:	20000b18 	.word	0x20000b18

0800c008 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c008:	b480      	push	{r7}
 800c00a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c00c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c00e:	4618      	mov	r0, r3
 800c010:	46bd      	mov	sp, r7
 800c012:	bc80      	pop	{r7}
 800c014:	4770      	bx	lr
	...

0800c018 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c018:	b480      	push	{r7}
 800c01a:	b083      	sub	sp, #12
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	4603      	mov	r3, r0
 800c020:	6039      	str	r1, [r7, #0]
 800c022:	71fb      	strb	r3, [r7, #7]
 800c024:	4613      	mov	r3, r2
 800c026:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c028:	79fb      	ldrb	r3, [r7, #7]
 800c02a:	2b23      	cmp	r3, #35	; 0x23
 800c02c:	d84a      	bhi.n	800c0c4 <CDC_Control_FS+0xac>
 800c02e:	a201      	add	r2, pc, #4	; (adr r2, 800c034 <CDC_Control_FS+0x1c>)
 800c030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c034:	0800c0c5 	.word	0x0800c0c5
 800c038:	0800c0c5 	.word	0x0800c0c5
 800c03c:	0800c0c5 	.word	0x0800c0c5
 800c040:	0800c0c5 	.word	0x0800c0c5
 800c044:	0800c0c5 	.word	0x0800c0c5
 800c048:	0800c0c5 	.word	0x0800c0c5
 800c04c:	0800c0c5 	.word	0x0800c0c5
 800c050:	0800c0c5 	.word	0x0800c0c5
 800c054:	0800c0c5 	.word	0x0800c0c5
 800c058:	0800c0c5 	.word	0x0800c0c5
 800c05c:	0800c0c5 	.word	0x0800c0c5
 800c060:	0800c0c5 	.word	0x0800c0c5
 800c064:	0800c0c5 	.word	0x0800c0c5
 800c068:	0800c0c5 	.word	0x0800c0c5
 800c06c:	0800c0c5 	.word	0x0800c0c5
 800c070:	0800c0c5 	.word	0x0800c0c5
 800c074:	0800c0c5 	.word	0x0800c0c5
 800c078:	0800c0c5 	.word	0x0800c0c5
 800c07c:	0800c0c5 	.word	0x0800c0c5
 800c080:	0800c0c5 	.word	0x0800c0c5
 800c084:	0800c0c5 	.word	0x0800c0c5
 800c088:	0800c0c5 	.word	0x0800c0c5
 800c08c:	0800c0c5 	.word	0x0800c0c5
 800c090:	0800c0c5 	.word	0x0800c0c5
 800c094:	0800c0c5 	.word	0x0800c0c5
 800c098:	0800c0c5 	.word	0x0800c0c5
 800c09c:	0800c0c5 	.word	0x0800c0c5
 800c0a0:	0800c0c5 	.word	0x0800c0c5
 800c0a4:	0800c0c5 	.word	0x0800c0c5
 800c0a8:	0800c0c5 	.word	0x0800c0c5
 800c0ac:	0800c0c5 	.word	0x0800c0c5
 800c0b0:	0800c0c5 	.word	0x0800c0c5
 800c0b4:	0800c0c5 	.word	0x0800c0c5
 800c0b8:	0800c0c5 	.word	0x0800c0c5
 800c0bc:	0800c0c5 	.word	0x0800c0c5
 800c0c0:	0800c0c5 	.word	0x0800c0c5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c0c4:	bf00      	nop
  }

  return (USBD_OK);
 800c0c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	370c      	adds	r7, #12
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bc80      	pop	{r7}
 800c0d0:	4770      	bx	lr
 800c0d2:	bf00      	nop

0800c0d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c0de:	6879      	ldr	r1, [r7, #4]
 800c0e0:	4805      	ldr	r0, [pc, #20]	; (800c0f8 <CDC_Receive_FS+0x24>)
 800c0e2:	f7fe fe76 	bl	800add2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c0e6:	4804      	ldr	r0, [pc, #16]	; (800c0f8 <CDC_Receive_FS+0x24>)
 800c0e8:	f7fe fe86 	bl	800adf8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c0ec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3708      	adds	r7, #8
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	20000854 	.word	0x20000854

0800c0fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b083      	sub	sp, #12
 800c100:	af00      	add	r7, sp, #0
 800c102:	4603      	mov	r3, r0
 800c104:	6039      	str	r1, [r7, #0]
 800c106:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	2212      	movs	r2, #18
 800c10c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c10e:	4b03      	ldr	r3, [pc, #12]	; (800c11c <USBD_FS_DeviceDescriptor+0x20>)
}
 800c110:	4618      	mov	r0, r3
 800c112:	370c      	adds	r7, #12
 800c114:	46bd      	mov	sp, r7
 800c116:	bc80      	pop	{r7}
 800c118:	4770      	bx	lr
 800c11a:	bf00      	nop
 800c11c:	20000150 	.word	0x20000150

0800c120 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c120:	b480      	push	{r7}
 800c122:	b083      	sub	sp, #12
 800c124:	af00      	add	r7, sp, #0
 800c126:	4603      	mov	r3, r0
 800c128:	6039      	str	r1, [r7, #0]
 800c12a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	2204      	movs	r2, #4
 800c130:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c132:	4b03      	ldr	r3, [pc, #12]	; (800c140 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c134:	4618      	mov	r0, r3
 800c136:	370c      	adds	r7, #12
 800c138:	46bd      	mov	sp, r7
 800c13a:	bc80      	pop	{r7}
 800c13c:	4770      	bx	lr
 800c13e:	bf00      	nop
 800c140:	20000164 	.word	0x20000164

0800c144 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
 800c14a:	4603      	mov	r3, r0
 800c14c:	6039      	str	r1, [r7, #0]
 800c14e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c150:	79fb      	ldrb	r3, [r7, #7]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d105      	bne.n	800c162 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c156:	683a      	ldr	r2, [r7, #0]
 800c158:	4907      	ldr	r1, [pc, #28]	; (800c178 <USBD_FS_ProductStrDescriptor+0x34>)
 800c15a:	4808      	ldr	r0, [pc, #32]	; (800c17c <USBD_FS_ProductStrDescriptor+0x38>)
 800c15c:	f7ff fe32 	bl	800bdc4 <USBD_GetString>
 800c160:	e004      	b.n	800c16c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c162:	683a      	ldr	r2, [r7, #0]
 800c164:	4904      	ldr	r1, [pc, #16]	; (800c178 <USBD_FS_ProductStrDescriptor+0x34>)
 800c166:	4805      	ldr	r0, [pc, #20]	; (800c17c <USBD_FS_ProductStrDescriptor+0x38>)
 800c168:	f7ff fe2c 	bl	800bdc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c16c:	4b02      	ldr	r3, [pc, #8]	; (800c178 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3708      	adds	r7, #8
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}
 800c176:	bf00      	nop
 800c178:	200012e8 	.word	0x200012e8
 800c17c:	0800f0e8 	.word	0x0800f0e8

0800c180 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b082      	sub	sp, #8
 800c184:	af00      	add	r7, sp, #0
 800c186:	4603      	mov	r3, r0
 800c188:	6039      	str	r1, [r7, #0]
 800c18a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c18c:	683a      	ldr	r2, [r7, #0]
 800c18e:	4904      	ldr	r1, [pc, #16]	; (800c1a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c190:	4804      	ldr	r0, [pc, #16]	; (800c1a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c192:	f7ff fe17 	bl	800bdc4 <USBD_GetString>
  return USBD_StrDesc;
 800c196:	4b02      	ldr	r3, [pc, #8]	; (800c1a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3708      	adds	r7, #8
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}
 800c1a0:	200012e8 	.word	0x200012e8
 800c1a4:	0800f100 	.word	0x0800f100

0800c1a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b082      	sub	sp, #8
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	6039      	str	r1, [r7, #0]
 800c1b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	221a      	movs	r2, #26
 800c1b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c1ba:	f000 f843 	bl	800c244 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c1be:	4b02      	ldr	r3, [pc, #8]	; (800c1c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3708      	adds	r7, #8
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}
 800c1c8:	20000168 	.word	0x20000168

0800c1cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	6039      	str	r1, [r7, #0]
 800c1d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c1d8:	79fb      	ldrb	r3, [r7, #7]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d105      	bne.n	800c1ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c1de:	683a      	ldr	r2, [r7, #0]
 800c1e0:	4907      	ldr	r1, [pc, #28]	; (800c200 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c1e2:	4808      	ldr	r0, [pc, #32]	; (800c204 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c1e4:	f7ff fdee 	bl	800bdc4 <USBD_GetString>
 800c1e8:	e004      	b.n	800c1f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c1ea:	683a      	ldr	r2, [r7, #0]
 800c1ec:	4904      	ldr	r1, [pc, #16]	; (800c200 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c1ee:	4805      	ldr	r0, [pc, #20]	; (800c204 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c1f0:	f7ff fde8 	bl	800bdc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c1f4:	4b02      	ldr	r3, [pc, #8]	; (800c200 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3708      	adds	r7, #8
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
 800c1fe:	bf00      	nop
 800c200:	200012e8 	.word	0x200012e8
 800c204:	0800f114 	.word	0x0800f114

0800c208 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	4603      	mov	r3, r0
 800c210:	6039      	str	r1, [r7, #0]
 800c212:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c214:	79fb      	ldrb	r3, [r7, #7]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d105      	bne.n	800c226 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c21a:	683a      	ldr	r2, [r7, #0]
 800c21c:	4907      	ldr	r1, [pc, #28]	; (800c23c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c21e:	4808      	ldr	r0, [pc, #32]	; (800c240 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c220:	f7ff fdd0 	bl	800bdc4 <USBD_GetString>
 800c224:	e004      	b.n	800c230 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c226:	683a      	ldr	r2, [r7, #0]
 800c228:	4904      	ldr	r1, [pc, #16]	; (800c23c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c22a:	4805      	ldr	r0, [pc, #20]	; (800c240 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c22c:	f7ff fdca 	bl	800bdc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c230:	4b02      	ldr	r3, [pc, #8]	; (800c23c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c232:	4618      	mov	r0, r3
 800c234:	3708      	adds	r7, #8
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	bf00      	nop
 800c23c:	200012e8 	.word	0x200012e8
 800c240:	0800f120 	.word	0x0800f120

0800c244 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c24a:	4b0f      	ldr	r3, [pc, #60]	; (800c288 <Get_SerialNum+0x44>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c250:	4b0e      	ldr	r3, [pc, #56]	; (800c28c <Get_SerialNum+0x48>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c256:	4b0e      	ldr	r3, [pc, #56]	; (800c290 <Get_SerialNum+0x4c>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c25c:	68fa      	ldr	r2, [r7, #12]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	4413      	add	r3, r2
 800c262:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d009      	beq.n	800c27e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c26a:	2208      	movs	r2, #8
 800c26c:	4909      	ldr	r1, [pc, #36]	; (800c294 <Get_SerialNum+0x50>)
 800c26e:	68f8      	ldr	r0, [r7, #12]
 800c270:	f000 f814 	bl	800c29c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c274:	2204      	movs	r2, #4
 800c276:	4908      	ldr	r1, [pc, #32]	; (800c298 <Get_SerialNum+0x54>)
 800c278:	68b8      	ldr	r0, [r7, #8]
 800c27a:	f000 f80f 	bl	800c29c <IntToUnicode>
  }
}
 800c27e:	bf00      	nop
 800c280:	3710      	adds	r7, #16
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}
 800c286:	bf00      	nop
 800c288:	1ffff7e8 	.word	0x1ffff7e8
 800c28c:	1ffff7ec 	.word	0x1ffff7ec
 800c290:	1ffff7f0 	.word	0x1ffff7f0
 800c294:	2000016a 	.word	0x2000016a
 800c298:	2000017a 	.word	0x2000017a

0800c29c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c29c:	b480      	push	{r7}
 800c29e:	b087      	sub	sp, #28
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	60f8      	str	r0, [r7, #12]
 800c2a4:	60b9      	str	r1, [r7, #8]
 800c2a6:	4613      	mov	r3, r2
 800c2a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	75fb      	strb	r3, [r7, #23]
 800c2b2:	e027      	b.n	800c304 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	0f1b      	lsrs	r3, r3, #28
 800c2b8:	2b09      	cmp	r3, #9
 800c2ba:	d80b      	bhi.n	800c2d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	0f1b      	lsrs	r3, r3, #28
 800c2c0:	b2da      	uxtb	r2, r3
 800c2c2:	7dfb      	ldrb	r3, [r7, #23]
 800c2c4:	005b      	lsls	r3, r3, #1
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	440b      	add	r3, r1
 800c2cc:	3230      	adds	r2, #48	; 0x30
 800c2ce:	b2d2      	uxtb	r2, r2
 800c2d0:	701a      	strb	r2, [r3, #0]
 800c2d2:	e00a      	b.n	800c2ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	0f1b      	lsrs	r3, r3, #28
 800c2d8:	b2da      	uxtb	r2, r3
 800c2da:	7dfb      	ldrb	r3, [r7, #23]
 800c2dc:	005b      	lsls	r3, r3, #1
 800c2de:	4619      	mov	r1, r3
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	440b      	add	r3, r1
 800c2e4:	3237      	adds	r2, #55	; 0x37
 800c2e6:	b2d2      	uxtb	r2, r2
 800c2e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	011b      	lsls	r3, r3, #4
 800c2ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c2f0:	7dfb      	ldrb	r3, [r7, #23]
 800c2f2:	005b      	lsls	r3, r3, #1
 800c2f4:	3301      	adds	r3, #1
 800c2f6:	68ba      	ldr	r2, [r7, #8]
 800c2f8:	4413      	add	r3, r2
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c2fe:	7dfb      	ldrb	r3, [r7, #23]
 800c300:	3301      	adds	r3, #1
 800c302:	75fb      	strb	r3, [r7, #23]
 800c304:	7dfa      	ldrb	r2, [r7, #23]
 800c306:	79fb      	ldrb	r3, [r7, #7]
 800c308:	429a      	cmp	r2, r3
 800c30a:	d3d3      	bcc.n	800c2b4 <IntToUnicode+0x18>
  }
}
 800c30c:	bf00      	nop
 800c30e:	bf00      	nop
 800c310:	371c      	adds	r7, #28
 800c312:	46bd      	mov	sp, r7
 800c314:	bc80      	pop	{r7}
 800c316:	4770      	bx	lr

0800c318 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4a0d      	ldr	r2, [pc, #52]	; (800c35c <HAL_PCD_MspInit+0x44>)
 800c326:	4293      	cmp	r3, r2
 800c328:	d113      	bne.n	800c352 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c32a:	4b0d      	ldr	r3, [pc, #52]	; (800c360 <HAL_PCD_MspInit+0x48>)
 800c32c:	69db      	ldr	r3, [r3, #28]
 800c32e:	4a0c      	ldr	r2, [pc, #48]	; (800c360 <HAL_PCD_MspInit+0x48>)
 800c330:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c334:	61d3      	str	r3, [r2, #28]
 800c336:	4b0a      	ldr	r3, [pc, #40]	; (800c360 <HAL_PCD_MspInit+0x48>)
 800c338:	69db      	ldr	r3, [r3, #28]
 800c33a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c33e:	60fb      	str	r3, [r7, #12]
 800c340:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800c342:	2200      	movs	r2, #0
 800c344:	2100      	movs	r1, #0
 800c346:	2014      	movs	r0, #20
 800c348:	f7f7 fd11 	bl	8003d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c34c:	2014      	movs	r0, #20
 800c34e:	f7f7 fd2a 	bl	8003da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c352:	bf00      	nop
 800c354:	3710      	adds	r7, #16
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	40005c00 	.word	0x40005c00
 800c360:	40021000 	.word	0x40021000

0800c364 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b082      	sub	sp, #8
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800c378:	4619      	mov	r1, r3
 800c37a:	4610      	mov	r0, r2
 800c37c:	f7fe fdf2 	bl	800af64 <USBD_LL_SetupStage>
}
 800c380:	bf00      	nop
 800c382:	3708      	adds	r7, #8
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b082      	sub	sp, #8
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	460b      	mov	r3, r1
 800c392:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 800c39a:	78fa      	ldrb	r2, [r7, #3]
 800c39c:	6879      	ldr	r1, [r7, #4]
 800c39e:	4613      	mov	r3, r2
 800c3a0:	009b      	lsls	r3, r3, #2
 800c3a2:	4413      	add	r3, r2
 800c3a4:	00db      	lsls	r3, r3, #3
 800c3a6:	440b      	add	r3, r1
 800c3a8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c3ac:	681a      	ldr	r2, [r3, #0]
 800c3ae:	78fb      	ldrb	r3, [r7, #3]
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	f7fe fe24 	bl	800affe <USBD_LL_DataOutStage>
}
 800c3b6:	bf00      	nop
 800c3b8:	3708      	adds	r7, #8
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}

0800c3be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3be:	b580      	push	{r7, lr}
 800c3c0:	b082      	sub	sp, #8
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	6078      	str	r0, [r7, #4]
 800c3c6:	460b      	mov	r3, r1
 800c3c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 800c3d0:	78fa      	ldrb	r2, [r7, #3]
 800c3d2:	6879      	ldr	r1, [r7, #4]
 800c3d4:	4613      	mov	r3, r2
 800c3d6:	009b      	lsls	r3, r3, #2
 800c3d8:	4413      	add	r3, r2
 800c3da:	00db      	lsls	r3, r3, #3
 800c3dc:	440b      	add	r3, r1
 800c3de:	3324      	adds	r3, #36	; 0x24
 800c3e0:	681a      	ldr	r2, [r3, #0]
 800c3e2:	78fb      	ldrb	r3, [r7, #3]
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	f7fe fe7b 	bl	800b0e0 <USBD_LL_DataInStage>
}
 800c3ea:	bf00      	nop
 800c3ec:	3708      	adds	r7, #8
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}

0800c3f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3f2:	b580      	push	{r7, lr}
 800c3f4:	b082      	sub	sp, #8
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c400:	4618      	mov	r0, r3
 800c402:	f7fe ff8b 	bl	800b31c <USBD_LL_SOF>
}
 800c406:	bf00      	nop
 800c408:	3708      	adds	r7, #8
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}

0800c40e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c40e:	b580      	push	{r7, lr}
 800c410:	b084      	sub	sp, #16
 800c412:	af00      	add	r7, sp, #0
 800c414:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c416:	2301      	movs	r3, #1
 800c418:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	799b      	ldrb	r3, [r3, #6]
 800c41e:	2b02      	cmp	r3, #2
 800c420:	d001      	beq.n	800c426 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c422:	f7f7 f81f 	bl	8003464 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c42c:	7bfa      	ldrb	r2, [r7, #15]
 800c42e:	4611      	mov	r1, r2
 800c430:	4618      	mov	r0, r3
 800c432:	f7fe ff3b 	bl	800b2ac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c43c:	4618      	mov	r0, r3
 800c43e:	f7fe fef4 	bl	800b22a <USBD_LL_Reset>
}
 800c442:	bf00      	nop
 800c444:	3710      	adds	r7, #16
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
	...

0800c44c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b082      	sub	sp, #8
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c45a:	4618      	mov	r0, r3
 800c45c:	f7fe ff35 	bl	800b2ca <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	7a9b      	ldrb	r3, [r3, #10]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d005      	beq.n	800c474 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c468:	4b04      	ldr	r3, [pc, #16]	; (800c47c <HAL_PCD_SuspendCallback+0x30>)
 800c46a:	691b      	ldr	r3, [r3, #16]
 800c46c:	4a03      	ldr	r2, [pc, #12]	; (800c47c <HAL_PCD_SuspendCallback+0x30>)
 800c46e:	f043 0306 	orr.w	r3, r3, #6
 800c472:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c474:	bf00      	nop
 800c476:	3708      	adds	r7, #8
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}
 800c47c:	e000ed00 	.word	0xe000ed00

0800c480 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b082      	sub	sp, #8
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c48e:	4618      	mov	r0, r3
 800c490:	f7fe ff2f 	bl	800b2f2 <USBD_LL_Resume>
}
 800c494:	bf00      	nop
 800c496:	3708      	adds	r7, #8
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b082      	sub	sp, #8
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c4a4:	4a28      	ldr	r2, [pc, #160]	; (800c548 <USBD_LL_Init+0xac>)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	f8c2 32d4 	str.w	r3, [r2, #724]	; 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	4a26      	ldr	r2, [pc, #152]	; (800c548 <USBD_LL_Init+0xac>)
 800c4b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c4b4:	4b24      	ldr	r3, [pc, #144]	; (800c548 <USBD_LL_Init+0xac>)
 800c4b6:	4a25      	ldr	r2, [pc, #148]	; (800c54c <USBD_LL_Init+0xb0>)
 800c4b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c4ba:	4b23      	ldr	r3, [pc, #140]	; (800c548 <USBD_LL_Init+0xac>)
 800c4bc:	2208      	movs	r2, #8
 800c4be:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c4c0:	4b21      	ldr	r3, [pc, #132]	; (800c548 <USBD_LL_Init+0xac>)
 800c4c2:	2202      	movs	r2, #2
 800c4c4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c4c6:	4b20      	ldr	r3, [pc, #128]	; (800c548 <USBD_LL_Init+0xac>)
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c4cc:	4b1e      	ldr	r3, [pc, #120]	; (800c548 <USBD_LL_Init+0xac>)
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c4d2:	4b1d      	ldr	r3, [pc, #116]	; (800c548 <USBD_LL_Init+0xac>)
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c4d8:	481b      	ldr	r0, [pc, #108]	; (800c548 <USBD_LL_Init+0xac>)
 800c4da:	f7f9 f818 	bl	800550e <HAL_PCD_Init>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d001      	beq.n	800c4e8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c4e4:	f7f6 ffbe 	bl	8003464 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c4ee:	2318      	movs	r3, #24
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	2100      	movs	r1, #0
 800c4f4:	f7fa fd2c 	bl	8006f50 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c4fe:	2358      	movs	r3, #88	; 0x58
 800c500:	2200      	movs	r2, #0
 800c502:	2180      	movs	r1, #128	; 0x80
 800c504:	f7fa fd24 	bl	8006f50 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c50e:	23c0      	movs	r3, #192	; 0xc0
 800c510:	2200      	movs	r2, #0
 800c512:	2181      	movs	r1, #129	; 0x81
 800c514:	f7fa fd1c 	bl	8006f50 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c51e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c522:	2200      	movs	r2, #0
 800c524:	2101      	movs	r1, #1
 800c526:	f7fa fd13 	bl	8006f50 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c530:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c534:	2200      	movs	r2, #0
 800c536:	2182      	movs	r1, #130	; 0x82
 800c538:	f7fa fd0a 	bl	8006f50 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c53c:	2300      	movs	r3, #0
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3708      	adds	r7, #8
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	200014e8 	.word	0x200014e8
 800c54c:	40005c00 	.word	0x40005c00

0800c550 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c558:	2300      	movs	r3, #0
 800c55a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c55c:	2300      	movs	r3, #0
 800c55e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c566:	4618      	mov	r0, r3
 800c568:	f7f9 f8c7 	bl	80056fa <HAL_PCD_Start>
 800c56c:	4603      	mov	r3, r0
 800c56e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c570:	7bfb      	ldrb	r3, [r7, #15]
 800c572:	4618      	mov	r0, r3
 800c574:	f000 f94e 	bl	800c814 <USBD_Get_USB_Status>
 800c578:	4603      	mov	r3, r0
 800c57a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c57c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3710      	adds	r7, #16
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}

0800c586 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c586:	b580      	push	{r7, lr}
 800c588:	b084      	sub	sp, #16
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	6078      	str	r0, [r7, #4]
 800c58e:	4608      	mov	r0, r1
 800c590:	4611      	mov	r1, r2
 800c592:	461a      	mov	r2, r3
 800c594:	4603      	mov	r3, r0
 800c596:	70fb      	strb	r3, [r7, #3]
 800c598:	460b      	mov	r3, r1
 800c59a:	70bb      	strb	r3, [r7, #2]
 800c59c:	4613      	mov	r3, r2
 800c59e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c5ae:	78bb      	ldrb	r3, [r7, #2]
 800c5b0:	883a      	ldrh	r2, [r7, #0]
 800c5b2:	78f9      	ldrb	r1, [r7, #3]
 800c5b4:	f7f9 fa1d 	bl	80059f2 <HAL_PCD_EP_Open>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5bc:	7bfb      	ldrb	r3, [r7, #15]
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f000 f928 	bl	800c814 <USBD_Get_USB_Status>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3710      	adds	r7, #16
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}

0800c5d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5d2:	b580      	push	{r7, lr}
 800c5d4:	b084      	sub	sp, #16
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
 800c5da:	460b      	mov	r3, r1
 800c5dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c5ec:	78fa      	ldrb	r2, [r7, #3]
 800c5ee:	4611      	mov	r1, r2
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f7f9 fa5b 	bl	8005aac <HAL_PCD_EP_Close>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5fa:	7bfb      	ldrb	r3, [r7, #15]
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f000 f909 	bl	800c814 <USBD_Get_USB_Status>
 800c602:	4603      	mov	r3, r0
 800c604:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c606:	7bbb      	ldrb	r3, [r7, #14]
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3710      	adds	r7, #16
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b084      	sub	sp, #16
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	460b      	mov	r3, r1
 800c61a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c61c:	2300      	movs	r3, #0
 800c61e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c620:	2300      	movs	r3, #0
 800c622:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c62a:	78fa      	ldrb	r2, [r7, #3]
 800c62c:	4611      	mov	r1, r2
 800c62e:	4618      	mov	r0, r3
 800c630:	f7f9 fb03 	bl	8005c3a <HAL_PCD_EP_SetStall>
 800c634:	4603      	mov	r3, r0
 800c636:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c638:	7bfb      	ldrb	r3, [r7, #15]
 800c63a:	4618      	mov	r0, r3
 800c63c:	f000 f8ea 	bl	800c814 <USBD_Get_USB_Status>
 800c640:	4603      	mov	r3, r0
 800c642:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c644:	7bbb      	ldrb	r3, [r7, #14]
}
 800c646:	4618      	mov	r0, r3
 800c648:	3710      	adds	r7, #16
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}

0800c64e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c64e:	b580      	push	{r7, lr}
 800c650:	b084      	sub	sp, #16
 800c652:	af00      	add	r7, sp, #0
 800c654:	6078      	str	r0, [r7, #4]
 800c656:	460b      	mov	r3, r1
 800c658:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c65a:	2300      	movs	r3, #0
 800c65c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c65e:	2300      	movs	r3, #0
 800c660:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c668:	78fa      	ldrb	r2, [r7, #3]
 800c66a:	4611      	mov	r1, r2
 800c66c:	4618      	mov	r0, r3
 800c66e:	f7f9 fb44 	bl	8005cfa <HAL_PCD_EP_ClrStall>
 800c672:	4603      	mov	r3, r0
 800c674:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c676:	7bfb      	ldrb	r3, [r7, #15]
 800c678:	4618      	mov	r0, r3
 800c67a:	f000 f8cb 	bl	800c814 <USBD_Get_USB_Status>
 800c67e:	4603      	mov	r3, r0
 800c680:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c682:	7bbb      	ldrb	r3, [r7, #14]
}
 800c684:	4618      	mov	r0, r3
 800c686:	3710      	adds	r7, #16
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b085      	sub	sp, #20
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	460b      	mov	r3, r1
 800c696:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c69e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c6a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	da0b      	bge.n	800c6c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c6a8:	78fb      	ldrb	r3, [r7, #3]
 800c6aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c6ae:	68f9      	ldr	r1, [r7, #12]
 800c6b0:	4613      	mov	r3, r2
 800c6b2:	009b      	lsls	r3, r3, #2
 800c6b4:	4413      	add	r3, r2
 800c6b6:	00db      	lsls	r3, r3, #3
 800c6b8:	440b      	add	r3, r1
 800c6ba:	3312      	adds	r3, #18
 800c6bc:	781b      	ldrb	r3, [r3, #0]
 800c6be:	e00b      	b.n	800c6d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c6c0:	78fb      	ldrb	r3, [r7, #3]
 800c6c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c6c6:	68f9      	ldr	r1, [r7, #12]
 800c6c8:	4613      	mov	r3, r2
 800c6ca:	009b      	lsls	r3, r3, #2
 800c6cc:	4413      	add	r3, r2
 800c6ce:	00db      	lsls	r3, r3, #3
 800c6d0:	440b      	add	r3, r1
 800c6d2:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800c6d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3714      	adds	r7, #20
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bc80      	pop	{r7}
 800c6e0:	4770      	bx	lr

0800c6e2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c6e2:	b580      	push	{r7, lr}
 800c6e4:	b084      	sub	sp, #16
 800c6e6:	af00      	add	r7, sp, #0
 800c6e8:	6078      	str	r0, [r7, #4]
 800c6ea:	460b      	mov	r3, r1
 800c6ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c6fc:	78fa      	ldrb	r2, [r7, #3]
 800c6fe:	4611      	mov	r1, r2
 800c700:	4618      	mov	r0, r3
 800c702:	f7f9 f952 	bl	80059aa <HAL_PCD_SetAddress>
 800c706:	4603      	mov	r3, r0
 800c708:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c70a:	7bfb      	ldrb	r3, [r7, #15]
 800c70c:	4618      	mov	r0, r3
 800c70e:	f000 f881 	bl	800c814 <USBD_Get_USB_Status>
 800c712:	4603      	mov	r3, r0
 800c714:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c716:	7bbb      	ldrb	r3, [r7, #14]
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3710      	adds	r7, #16
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}

0800c720 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b086      	sub	sp, #24
 800c724:	af00      	add	r7, sp, #0
 800c726:	60f8      	str	r0, [r7, #12]
 800c728:	607a      	str	r2, [r7, #4]
 800c72a:	461a      	mov	r2, r3
 800c72c:	460b      	mov	r3, r1
 800c72e:	72fb      	strb	r3, [r7, #11]
 800c730:	4613      	mov	r3, r2
 800c732:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c734:	2300      	movs	r3, #0
 800c736:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c738:	2300      	movs	r3, #0
 800c73a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c742:	893b      	ldrh	r3, [r7, #8]
 800c744:	7af9      	ldrb	r1, [r7, #11]
 800c746:	687a      	ldr	r2, [r7, #4]
 800c748:	f7f9 fa40 	bl	8005bcc <HAL_PCD_EP_Transmit>
 800c74c:	4603      	mov	r3, r0
 800c74e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c750:	7dfb      	ldrb	r3, [r7, #23]
 800c752:	4618      	mov	r0, r3
 800c754:	f000 f85e 	bl	800c814 <USBD_Get_USB_Status>
 800c758:	4603      	mov	r3, r0
 800c75a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c75c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3718      	adds	r7, #24
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}

0800c766 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c766:	b580      	push	{r7, lr}
 800c768:	b086      	sub	sp, #24
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	60f8      	str	r0, [r7, #12]
 800c76e:	607a      	str	r2, [r7, #4]
 800c770:	461a      	mov	r2, r3
 800c772:	460b      	mov	r3, r1
 800c774:	72fb      	strb	r3, [r7, #11]
 800c776:	4613      	mov	r3, r2
 800c778:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c77a:	2300      	movs	r3, #0
 800c77c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c77e:	2300      	movs	r3, #0
 800c780:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c788:	893b      	ldrh	r3, [r7, #8]
 800c78a:	7af9      	ldrb	r1, [r7, #11]
 800c78c:	687a      	ldr	r2, [r7, #4]
 800c78e:	f7f9 f9d5 	bl	8005b3c <HAL_PCD_EP_Receive>
 800c792:	4603      	mov	r3, r0
 800c794:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c796:	7dfb      	ldrb	r3, [r7, #23]
 800c798:	4618      	mov	r0, r3
 800c79a:	f000 f83b 	bl	800c814 <USBD_Get_USB_Status>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c7a2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3718      	adds	r7, #24
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}

0800c7ac <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b082      	sub	sp, #8
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
 800c7b4:	460b      	mov	r3, r1
 800c7b6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c7be:	78fa      	ldrb	r2, [r7, #3]
 800c7c0:	4611      	mov	r1, r2
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f7f9 f9eb 	bl	8005b9e <HAL_PCD_EP_GetRxCount>
 800c7c8:	4603      	mov	r3, r0
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3708      	adds	r7, #8
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
	...

0800c7d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b083      	sub	sp, #12
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c7dc:	4b02      	ldr	r3, [pc, #8]	; (800c7e8 <USBD_static_malloc+0x14>)
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	370c      	adds	r7, #12
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bc80      	pop	{r7}
 800c7e6:	4770      	bx	lr
 800c7e8:	20000628 	.word	0x20000628

0800c7ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b083      	sub	sp, #12
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]

}
 800c7f4:	bf00      	nop
 800c7f6:	370c      	adds	r7, #12
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bc80      	pop	{r7}
 800c7fc:	4770      	bx	lr

0800c7fe <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7fe:	b480      	push	{r7}
 800c800:	b083      	sub	sp, #12
 800c802:	af00      	add	r7, sp, #0
 800c804:	6078      	str	r0, [r7, #4]
 800c806:	460b      	mov	r3, r1
 800c808:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c80a:	bf00      	nop
 800c80c:	370c      	adds	r7, #12
 800c80e:	46bd      	mov	sp, r7
 800c810:	bc80      	pop	{r7}
 800c812:	4770      	bx	lr

0800c814 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c814:	b480      	push	{r7}
 800c816:	b085      	sub	sp, #20
 800c818:	af00      	add	r7, sp, #0
 800c81a:	4603      	mov	r3, r0
 800c81c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c81e:	2300      	movs	r3, #0
 800c820:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c822:	79fb      	ldrb	r3, [r7, #7]
 800c824:	2b03      	cmp	r3, #3
 800c826:	d817      	bhi.n	800c858 <USBD_Get_USB_Status+0x44>
 800c828:	a201      	add	r2, pc, #4	; (adr r2, 800c830 <USBD_Get_USB_Status+0x1c>)
 800c82a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c82e:	bf00      	nop
 800c830:	0800c841 	.word	0x0800c841
 800c834:	0800c847 	.word	0x0800c847
 800c838:	0800c84d 	.word	0x0800c84d
 800c83c:	0800c853 	.word	0x0800c853
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c840:	2300      	movs	r3, #0
 800c842:	73fb      	strb	r3, [r7, #15]
    break;
 800c844:	e00b      	b.n	800c85e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c846:	2302      	movs	r3, #2
 800c848:	73fb      	strb	r3, [r7, #15]
    break;
 800c84a:	e008      	b.n	800c85e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c84c:	2301      	movs	r3, #1
 800c84e:	73fb      	strb	r3, [r7, #15]
    break;
 800c850:	e005      	b.n	800c85e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c852:	2302      	movs	r3, #2
 800c854:	73fb      	strb	r3, [r7, #15]
    break;
 800c856:	e002      	b.n	800c85e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c858:	2302      	movs	r3, #2
 800c85a:	73fb      	strb	r3, [r7, #15]
    break;
 800c85c:	bf00      	nop
  }
  return usb_status;
 800c85e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c860:	4618      	mov	r0, r3
 800c862:	3714      	adds	r7, #20
 800c864:	46bd      	mov	sp, r7
 800c866:	bc80      	pop	{r7}
 800c868:	4770      	bx	lr
 800c86a:	bf00      	nop

0800c86c <cos>:
 800c86c:	b530      	push	{r4, r5, lr}
 800c86e:	4a1e      	ldr	r2, [pc, #120]	; (800c8e8 <cos+0x7c>)
 800c870:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c874:	4293      	cmp	r3, r2
 800c876:	b087      	sub	sp, #28
 800c878:	dc04      	bgt.n	800c884 <cos+0x18>
 800c87a:	2200      	movs	r2, #0
 800c87c:	2300      	movs	r3, #0
 800c87e:	f000 fbb7 	bl	800cff0 <__kernel_cos>
 800c882:	e006      	b.n	800c892 <cos+0x26>
 800c884:	4a19      	ldr	r2, [pc, #100]	; (800c8ec <cos+0x80>)
 800c886:	4293      	cmp	r3, r2
 800c888:	dd05      	ble.n	800c896 <cos+0x2a>
 800c88a:	4602      	mov	r2, r0
 800c88c:	460b      	mov	r3, r1
 800c88e:	f7f3 fc6b 	bl	8000168 <__aeabi_dsub>
 800c892:	b007      	add	sp, #28
 800c894:	bd30      	pop	{r4, r5, pc}
 800c896:	aa02      	add	r2, sp, #8
 800c898:	f000 f9ba 	bl	800cc10 <__ieee754_rem_pio2>
 800c89c:	f000 0003 	and.w	r0, r0, #3
 800c8a0:	2801      	cmp	r0, #1
 800c8a2:	d007      	beq.n	800c8b4 <cos+0x48>
 800c8a4:	2802      	cmp	r0, #2
 800c8a6:	d00f      	beq.n	800c8c8 <cos+0x5c>
 800c8a8:	b9a8      	cbnz	r0, 800c8d6 <cos+0x6a>
 800c8aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8b2:	e7e4      	b.n	800c87e <cos+0x12>
 800c8b4:	9000      	str	r0, [sp, #0]
 800c8b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8be:	f000 ff9f 	bl	800d800 <__kernel_sin>
 800c8c2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c8c6:	e7e4      	b.n	800c892 <cos+0x26>
 800c8c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8d0:	f000 fb8e 	bl	800cff0 <__kernel_cos>
 800c8d4:	e7f5      	b.n	800c8c2 <cos+0x56>
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8dc:	9300      	str	r3, [sp, #0]
 800c8de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8e2:	f000 ff8d 	bl	800d800 <__kernel_sin>
 800c8e6:	e7d4      	b.n	800c892 <cos+0x26>
 800c8e8:	3fe921fb 	.word	0x3fe921fb
 800c8ec:	7fefffff 	.word	0x7fefffff

0800c8f0 <sin>:
 800c8f0:	b530      	push	{r4, r5, lr}
 800c8f2:	4a20      	ldr	r2, [pc, #128]	; (800c974 <sin+0x84>)
 800c8f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	b087      	sub	sp, #28
 800c8fc:	dc06      	bgt.n	800c90c <sin+0x1c>
 800c8fe:	2300      	movs	r3, #0
 800c900:	2200      	movs	r2, #0
 800c902:	9300      	str	r3, [sp, #0]
 800c904:	2300      	movs	r3, #0
 800c906:	f000 ff7b 	bl	800d800 <__kernel_sin>
 800c90a:	e006      	b.n	800c91a <sin+0x2a>
 800c90c:	4a1a      	ldr	r2, [pc, #104]	; (800c978 <sin+0x88>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	dd05      	ble.n	800c91e <sin+0x2e>
 800c912:	4602      	mov	r2, r0
 800c914:	460b      	mov	r3, r1
 800c916:	f7f3 fc27 	bl	8000168 <__aeabi_dsub>
 800c91a:	b007      	add	sp, #28
 800c91c:	bd30      	pop	{r4, r5, pc}
 800c91e:	aa02      	add	r2, sp, #8
 800c920:	f000 f976 	bl	800cc10 <__ieee754_rem_pio2>
 800c924:	f000 0003 	and.w	r0, r0, #3
 800c928:	2801      	cmp	r0, #1
 800c92a:	d009      	beq.n	800c940 <sin+0x50>
 800c92c:	2802      	cmp	r0, #2
 800c92e:	d00e      	beq.n	800c94e <sin+0x5e>
 800c930:	b9c0      	cbnz	r0, 800c964 <sin+0x74>
 800c932:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c936:	2301      	movs	r3, #1
 800c938:	9300      	str	r3, [sp, #0]
 800c93a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c93e:	e7e2      	b.n	800c906 <sin+0x16>
 800c940:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c944:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c948:	f000 fb52 	bl	800cff0 <__kernel_cos>
 800c94c:	e7e5      	b.n	800c91a <sin+0x2a>
 800c94e:	2301      	movs	r3, #1
 800c950:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c954:	9300      	str	r3, [sp, #0]
 800c956:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c95a:	f000 ff51 	bl	800d800 <__kernel_sin>
 800c95e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c962:	e7da      	b.n	800c91a <sin+0x2a>
 800c964:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c968:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c96c:	f000 fb40 	bl	800cff0 <__kernel_cos>
 800c970:	e7f5      	b.n	800c95e <sin+0x6e>
 800c972:	bf00      	nop
 800c974:	3fe921fb 	.word	0x3fe921fb
 800c978:	7fefffff 	.word	0x7fefffff

0800c97c <fmod>:
 800c97c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c980:	461f      	mov	r7, r3
 800c982:	4680      	mov	r8, r0
 800c984:	4689      	mov	r9, r1
 800c986:	4616      	mov	r6, r2
 800c988:	f000 f82e 	bl	800c9e8 <__ieee754_fmod>
 800c98c:	4b15      	ldr	r3, [pc, #84]	; (800c9e4 <fmod+0x68>)
 800c98e:	4604      	mov	r4, r0
 800c990:	f993 3000 	ldrsb.w	r3, [r3]
 800c994:	460d      	mov	r5, r1
 800c996:	3301      	adds	r3, #1
 800c998:	d020      	beq.n	800c9dc <fmod+0x60>
 800c99a:	4632      	mov	r2, r6
 800c99c:	463b      	mov	r3, r7
 800c99e:	4630      	mov	r0, r6
 800c9a0:	4639      	mov	r1, r7
 800c9a2:	f7f4 f833 	bl	8000a0c <__aeabi_dcmpun>
 800c9a6:	b9c8      	cbnz	r0, 800c9dc <fmod+0x60>
 800c9a8:	4642      	mov	r2, r8
 800c9aa:	464b      	mov	r3, r9
 800c9ac:	4640      	mov	r0, r8
 800c9ae:	4649      	mov	r1, r9
 800c9b0:	f7f4 f82c 	bl	8000a0c <__aeabi_dcmpun>
 800c9b4:	b990      	cbnz	r0, 800c9dc <fmod+0x60>
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	4630      	mov	r0, r6
 800c9bc:	4639      	mov	r1, r7
 800c9be:	f7f3 fff3 	bl	80009a8 <__aeabi_dcmpeq>
 800c9c2:	b158      	cbz	r0, 800c9dc <fmod+0x60>
 800c9c4:	f001 f8de 	bl	800db84 <__errno>
 800c9c8:	2321      	movs	r3, #33	; 0x21
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	6003      	str	r3, [r0, #0]
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	4610      	mov	r0, r2
 800c9d2:	4619      	mov	r1, r3
 800c9d4:	f7f3 feaa 	bl	800072c <__aeabi_ddiv>
 800c9d8:	4604      	mov	r4, r0
 800c9da:	460d      	mov	r5, r1
 800c9dc:	4620      	mov	r0, r4
 800c9de:	4629      	mov	r1, r5
 800c9e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9e4:	20000182 	.word	0x20000182

0800c9e8 <__ieee754_fmod>:
 800c9e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9ec:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
 800c9f0:	4607      	mov	r7, r0
 800c9f2:	461d      	mov	r5, r3
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	ea58 0302 	orrs.w	r3, r8, r2
 800c9fa:	460e      	mov	r6, r1
 800c9fc:	4614      	mov	r4, r2
 800c9fe:	4694      	mov	ip, r2
 800ca00:	4696      	mov	lr, r2
 800ca02:	d00d      	beq.n	800ca20 <__ieee754_fmod+0x38>
 800ca04:	4a7b      	ldr	r2, [pc, #492]	; (800cbf4 <__ieee754_fmod+0x20c>)
 800ca06:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	468a      	mov	sl, r1
 800ca0e:	dc07      	bgt.n	800ca20 <__ieee754_fmod+0x38>
 800ca10:	4262      	negs	r2, r4
 800ca12:	4979      	ldr	r1, [pc, #484]	; (800cbf8 <__ieee754_fmod+0x210>)
 800ca14:	4322      	orrs	r2, r4
 800ca16:	ea48 72d2 	orr.w	r2, r8, r2, lsr #31
 800ca1a:	428a      	cmp	r2, r1
 800ca1c:	460a      	mov	r2, r1
 800ca1e:	d90c      	bls.n	800ca3a <__ieee754_fmod+0x52>
 800ca20:	4603      	mov	r3, r0
 800ca22:	4622      	mov	r2, r4
 800ca24:	4638      	mov	r0, r7
 800ca26:	4631      	mov	r1, r6
 800ca28:	f7f3 fd56 	bl	80004d8 <__aeabi_dmul>
 800ca2c:	4602      	mov	r2, r0
 800ca2e:	460b      	mov	r3, r1
 800ca30:	f7f3 fe7c 	bl	800072c <__aeabi_ddiv>
 800ca34:	4607      	mov	r7, r0
 800ca36:	460e      	mov	r6, r1
 800ca38:	e00f      	b.n	800ca5a <__ieee754_fmod+0x72>
 800ca3a:	4543      	cmp	r3, r8
 800ca3c:	46b9      	mov	r9, r7
 800ca3e:	4639      	mov	r1, r7
 800ca40:	f006 4400 	and.w	r4, r6, #2147483648	; 0x80000000
 800ca44:	dc0d      	bgt.n	800ca62 <__ieee754_fmod+0x7a>
 800ca46:	db08      	blt.n	800ca5a <__ieee754_fmod+0x72>
 800ca48:	4567      	cmp	r7, ip
 800ca4a:	d306      	bcc.n	800ca5a <__ieee754_fmod+0x72>
 800ca4c:	d109      	bne.n	800ca62 <__ieee754_fmod+0x7a>
 800ca4e:	4a6b      	ldr	r2, [pc, #428]	; (800cbfc <__ieee754_fmod+0x214>)
 800ca50:	0fe4      	lsrs	r4, r4, #31
 800ca52:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 800ca56:	e9d4 7600 	ldrd	r7, r6, [r4]
 800ca5a:	4638      	mov	r0, r7
 800ca5c:	4631      	mov	r1, r6
 800ca5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca62:	ea1a 0f02 	tst.w	sl, r2
 800ca66:	d14a      	bne.n	800cafe <__ieee754_fmod+0x116>
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d141      	bne.n	800caf0 <__ieee754_fmod+0x108>
 800ca6c:	464a      	mov	r2, r9
 800ca6e:	4864      	ldr	r0, [pc, #400]	; (800cc00 <__ieee754_fmod+0x218>)
 800ca70:	2a00      	cmp	r2, #0
 800ca72:	dc3a      	bgt.n	800caea <__ieee754_fmod+0x102>
 800ca74:	4a60      	ldr	r2, [pc, #384]	; (800cbf8 <__ieee754_fmod+0x210>)
 800ca76:	402a      	ands	r2, r5
 800ca78:	2a00      	cmp	r2, #0
 800ca7a:	d14f      	bne.n	800cb1c <__ieee754_fmod+0x134>
 800ca7c:	f1b8 0f00 	cmp.w	r8, #0
 800ca80:	d144      	bne.n	800cb0c <__ieee754_fmod+0x124>
 800ca82:	4666      	mov	r6, ip
 800ca84:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800ca88:	2e00      	cmp	r6, #0
 800ca8a:	dc3c      	bgt.n	800cb06 <__ieee754_fmod+0x11e>
 800ca8c:	4e5d      	ldr	r6, [pc, #372]	; (800cc04 <__ieee754_fmod+0x21c>)
 800ca8e:	42b0      	cmp	r0, r6
 800ca90:	db49      	blt.n	800cb26 <__ieee754_fmod+0x13e>
 800ca92:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800ca96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca9a:	4e5a      	ldr	r6, [pc, #360]	; (800cc04 <__ieee754_fmod+0x21c>)
 800ca9c:	42b2      	cmp	r2, r6
 800ca9e:	db54      	blt.n	800cb4a <__ieee754_fmod+0x162>
 800caa0:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800caa4:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 800caa8:	1a80      	subs	r0, r0, r2
 800caaa:	1b5e      	subs	r6, r3, r5
 800caac:	eba1 070e 	sub.w	r7, r1, lr
 800cab0:	2800      	cmp	r0, #0
 800cab2:	d161      	bne.n	800cb78 <__ieee754_fmod+0x190>
 800cab4:	4571      	cmp	r1, lr
 800cab6:	bf38      	it	cc
 800cab8:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800cabc:	2e00      	cmp	r6, #0
 800cabe:	bfa4      	itt	ge
 800cac0:	4639      	movge	r1, r7
 800cac2:	4633      	movge	r3, r6
 800cac4:	ea53 0001 	orrs.w	r0, r3, r1
 800cac8:	d0c1      	beq.n	800ca4e <__ieee754_fmod+0x66>
 800caca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cace:	db68      	blt.n	800cba2 <__ieee754_fmod+0x1ba>
 800cad0:	484c      	ldr	r0, [pc, #304]	; (800cc04 <__ieee754_fmod+0x21c>)
 800cad2:	4282      	cmp	r2, r0
 800cad4:	db6b      	blt.n	800cbae <__ieee754_fmod+0x1c6>
 800cad6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cada:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800cade:	431c      	orrs	r4, r3
 800cae0:	ea44 5902 	orr.w	r9, r4, r2, lsl #20
 800cae4:	460f      	mov	r7, r1
 800cae6:	464e      	mov	r6, r9
 800cae8:	e7b7      	b.n	800ca5a <__ieee754_fmod+0x72>
 800caea:	3801      	subs	r0, #1
 800caec:	0052      	lsls	r2, r2, #1
 800caee:	e7bf      	b.n	800ca70 <__ieee754_fmod+0x88>
 800caf0:	4844      	ldr	r0, [pc, #272]	; (800cc04 <__ieee754_fmod+0x21c>)
 800caf2:	02da      	lsls	r2, r3, #11
 800caf4:	2a00      	cmp	r2, #0
 800caf6:	ddbd      	ble.n	800ca74 <__ieee754_fmod+0x8c>
 800caf8:	3801      	subs	r0, #1
 800cafa:	0052      	lsls	r2, r2, #1
 800cafc:	e7fa      	b.n	800caf4 <__ieee754_fmod+0x10c>
 800cafe:	1518      	asrs	r0, r3, #20
 800cb00:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800cb04:	e7b6      	b.n	800ca74 <__ieee754_fmod+0x8c>
 800cb06:	3a01      	subs	r2, #1
 800cb08:	0076      	lsls	r6, r6, #1
 800cb0a:	e7bd      	b.n	800ca88 <__ieee754_fmod+0xa0>
 800cb0c:	4a3d      	ldr	r2, [pc, #244]	; (800cc04 <__ieee754_fmod+0x21c>)
 800cb0e:	ea4f 26c8 	mov.w	r6, r8, lsl #11
 800cb12:	2e00      	cmp	r6, #0
 800cb14:	ddba      	ble.n	800ca8c <__ieee754_fmod+0xa4>
 800cb16:	3a01      	subs	r2, #1
 800cb18:	0076      	lsls	r6, r6, #1
 800cb1a:	e7fa      	b.n	800cb12 <__ieee754_fmod+0x12a>
 800cb1c:	ea4f 5228 	mov.w	r2, r8, asr #20
 800cb20:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800cb24:	e7b2      	b.n	800ca8c <__ieee754_fmod+0xa4>
 800cb26:	1a31      	subs	r1, r6, r0
 800cb28:	291f      	cmp	r1, #31
 800cb2a:	dc08      	bgt.n	800cb3e <__ieee754_fmod+0x156>
 800cb2c:	f200 461e 	addw	r6, r0, #1054	; 0x41e
 800cb30:	408b      	lsls	r3, r1
 800cb32:	fa29 f606 	lsr.w	r6, r9, r6
 800cb36:	4333      	orrs	r3, r6
 800cb38:	fa09 f101 	lsl.w	r1, r9, r1
 800cb3c:	e7ad      	b.n	800ca9a <__ieee754_fmod+0xb2>
 800cb3e:	4b32      	ldr	r3, [pc, #200]	; (800cc08 <__ieee754_fmod+0x220>)
 800cb40:	2100      	movs	r1, #0
 800cb42:	1a1b      	subs	r3, r3, r0
 800cb44:	fa09 f303 	lsl.w	r3, r9, r3
 800cb48:	e7a7      	b.n	800ca9a <__ieee754_fmod+0xb2>
 800cb4a:	eba6 0e02 	sub.w	lr, r6, r2
 800cb4e:	f1be 0f1f 	cmp.w	lr, #31
 800cb52:	dc0a      	bgt.n	800cb6a <__ieee754_fmod+0x182>
 800cb54:	f202 451e 	addw	r5, r2, #1054	; 0x41e
 800cb58:	fa08 f80e 	lsl.w	r8, r8, lr
 800cb5c:	fa2c f505 	lsr.w	r5, ip, r5
 800cb60:	ea45 0508 	orr.w	r5, r5, r8
 800cb64:	fa0c fe0e 	lsl.w	lr, ip, lr
 800cb68:	e79e      	b.n	800caa8 <__ieee754_fmod+0xc0>
 800cb6a:	4d27      	ldr	r5, [pc, #156]	; (800cc08 <__ieee754_fmod+0x220>)
 800cb6c:	f04f 0e00 	mov.w	lr, #0
 800cb70:	1aad      	subs	r5, r5, r2
 800cb72:	fa0c f505 	lsl.w	r5, ip, r5
 800cb76:	e797      	b.n	800caa8 <__ieee754_fmod+0xc0>
 800cb78:	4571      	cmp	r1, lr
 800cb7a:	bf38      	it	cc
 800cb7c:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800cb80:	2e00      	cmp	r6, #0
 800cb82:	da05      	bge.n	800cb90 <__ieee754_fmod+0x1a8>
 800cb84:	0fce      	lsrs	r6, r1, #31
 800cb86:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800cb8a:	0049      	lsls	r1, r1, #1
 800cb8c:	3801      	subs	r0, #1
 800cb8e:	e78c      	b.n	800caaa <__ieee754_fmod+0xc2>
 800cb90:	ea56 0307 	orrs.w	r3, r6, r7
 800cb94:	f43f af5b 	beq.w	800ca4e <__ieee754_fmod+0x66>
 800cb98:	0ffb      	lsrs	r3, r7, #31
 800cb9a:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800cb9e:	0079      	lsls	r1, r7, #1
 800cba0:	e7f4      	b.n	800cb8c <__ieee754_fmod+0x1a4>
 800cba2:	0fc8      	lsrs	r0, r1, #31
 800cba4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800cba8:	0049      	lsls	r1, r1, #1
 800cbaa:	3a01      	subs	r2, #1
 800cbac:	e78d      	b.n	800caca <__ieee754_fmod+0xe2>
 800cbae:	1a80      	subs	r0, r0, r2
 800cbb0:	2814      	cmp	r0, #20
 800cbb2:	dc0a      	bgt.n	800cbca <__ieee754_fmod+0x1e2>
 800cbb4:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800cbb8:	fa03 f202 	lsl.w	r2, r3, r2
 800cbbc:	40c1      	lsrs	r1, r0
 800cbbe:	430a      	orrs	r2, r1
 800cbc0:	4103      	asrs	r3, r0
 800cbc2:	4610      	mov	r0, r2
 800cbc4:	ea43 0104 	orr.w	r1, r3, r4
 800cbc8:	e734      	b.n	800ca34 <__ieee754_fmod+0x4c>
 800cbca:	281f      	cmp	r0, #31
 800cbcc:	dc07      	bgt.n	800cbde <__ieee754_fmod+0x1f6>
 800cbce:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800cbd2:	40c1      	lsrs	r1, r0
 800cbd4:	fa03 f202 	lsl.w	r2, r3, r2
 800cbd8:	430a      	orrs	r2, r1
 800cbda:	4623      	mov	r3, r4
 800cbdc:	e7f1      	b.n	800cbc2 <__ieee754_fmod+0x1da>
 800cbde:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800cbe2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cbe6:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800cbea:	32e2      	adds	r2, #226	; 0xe2
 800cbec:	fa43 f202 	asr.w	r2, r3, r2
 800cbf0:	e7f3      	b.n	800cbda <__ieee754_fmod+0x1f2>
 800cbf2:	bf00      	nop
 800cbf4:	7fefffff 	.word	0x7fefffff
 800cbf8:	7ff00000 	.word	0x7ff00000
 800cbfc:	0800f1a8 	.word	0x0800f1a8
 800cc00:	fffffbed 	.word	0xfffffbed
 800cc04:	fffffc02 	.word	0xfffffc02
 800cc08:	fffffbe2 	.word	0xfffffbe2
 800cc0c:	00000000 	.word	0x00000000

0800cc10 <__ieee754_rem_pio2>:
 800cc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc14:	4614      	mov	r4, r2
 800cc16:	4ac4      	ldr	r2, [pc, #784]	; (800cf28 <__ieee754_rem_pio2+0x318>)
 800cc18:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800cc1c:	b08d      	sub	sp, #52	; 0x34
 800cc1e:	4592      	cmp	sl, r2
 800cc20:	9104      	str	r1, [sp, #16]
 800cc22:	dc07      	bgt.n	800cc34 <__ieee754_rem_pio2+0x24>
 800cc24:	2200      	movs	r2, #0
 800cc26:	2300      	movs	r3, #0
 800cc28:	e9c4 0100 	strd	r0, r1, [r4]
 800cc2c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800cc30:	2500      	movs	r5, #0
 800cc32:	e024      	b.n	800cc7e <__ieee754_rem_pio2+0x6e>
 800cc34:	4abd      	ldr	r2, [pc, #756]	; (800cf2c <__ieee754_rem_pio2+0x31c>)
 800cc36:	4592      	cmp	sl, r2
 800cc38:	dc72      	bgt.n	800cd20 <__ieee754_rem_pio2+0x110>
 800cc3a:	9b04      	ldr	r3, [sp, #16]
 800cc3c:	4dbc      	ldr	r5, [pc, #752]	; (800cf30 <__ieee754_rem_pio2+0x320>)
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	a3ab      	add	r3, pc, #684	; (adr r3, 800cef0 <__ieee754_rem_pio2+0x2e0>)
 800cc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc46:	dd36      	ble.n	800ccb6 <__ieee754_rem_pio2+0xa6>
 800cc48:	f7f3 fa8e 	bl	8000168 <__aeabi_dsub>
 800cc4c:	45aa      	cmp	sl, r5
 800cc4e:	4606      	mov	r6, r0
 800cc50:	460f      	mov	r7, r1
 800cc52:	d018      	beq.n	800cc86 <__ieee754_rem_pio2+0x76>
 800cc54:	a3a8      	add	r3, pc, #672	; (adr r3, 800cef8 <__ieee754_rem_pio2+0x2e8>)
 800cc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5a:	f7f3 fa85 	bl	8000168 <__aeabi_dsub>
 800cc5e:	4602      	mov	r2, r0
 800cc60:	460b      	mov	r3, r1
 800cc62:	4630      	mov	r0, r6
 800cc64:	e9c4 2300 	strd	r2, r3, [r4]
 800cc68:	4639      	mov	r1, r7
 800cc6a:	f7f3 fa7d 	bl	8000168 <__aeabi_dsub>
 800cc6e:	a3a2      	add	r3, pc, #648	; (adr r3, 800cef8 <__ieee754_rem_pio2+0x2e8>)
 800cc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc74:	f7f3 fa78 	bl	8000168 <__aeabi_dsub>
 800cc78:	2501      	movs	r5, #1
 800cc7a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cc7e:	4628      	mov	r0, r5
 800cc80:	b00d      	add	sp, #52	; 0x34
 800cc82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc86:	a39e      	add	r3, pc, #632	; (adr r3, 800cf00 <__ieee754_rem_pio2+0x2f0>)
 800cc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc8c:	f7f3 fa6c 	bl	8000168 <__aeabi_dsub>
 800cc90:	a39d      	add	r3, pc, #628	; (adr r3, 800cf08 <__ieee754_rem_pio2+0x2f8>)
 800cc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc96:	4606      	mov	r6, r0
 800cc98:	460f      	mov	r7, r1
 800cc9a:	f7f3 fa65 	bl	8000168 <__aeabi_dsub>
 800cc9e:	4602      	mov	r2, r0
 800cca0:	460b      	mov	r3, r1
 800cca2:	4630      	mov	r0, r6
 800cca4:	e9c4 2300 	strd	r2, r3, [r4]
 800cca8:	4639      	mov	r1, r7
 800ccaa:	f7f3 fa5d 	bl	8000168 <__aeabi_dsub>
 800ccae:	a396      	add	r3, pc, #600	; (adr r3, 800cf08 <__ieee754_rem_pio2+0x2f8>)
 800ccb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb4:	e7de      	b.n	800cc74 <__ieee754_rem_pio2+0x64>
 800ccb6:	f7f3 fa59 	bl	800016c <__adddf3>
 800ccba:	45aa      	cmp	sl, r5
 800ccbc:	4606      	mov	r6, r0
 800ccbe:	460f      	mov	r7, r1
 800ccc0:	d016      	beq.n	800ccf0 <__ieee754_rem_pio2+0xe0>
 800ccc2:	a38d      	add	r3, pc, #564	; (adr r3, 800cef8 <__ieee754_rem_pio2+0x2e8>)
 800ccc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc8:	f7f3 fa50 	bl	800016c <__adddf3>
 800cccc:	4602      	mov	r2, r0
 800ccce:	460b      	mov	r3, r1
 800ccd0:	4630      	mov	r0, r6
 800ccd2:	e9c4 2300 	strd	r2, r3, [r4]
 800ccd6:	4639      	mov	r1, r7
 800ccd8:	f7f3 fa46 	bl	8000168 <__aeabi_dsub>
 800ccdc:	a386      	add	r3, pc, #536	; (adr r3, 800cef8 <__ieee754_rem_pio2+0x2e8>)
 800ccde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce2:	f7f3 fa43 	bl	800016c <__adddf3>
 800cce6:	f04f 35ff 	mov.w	r5, #4294967295
 800ccea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ccee:	e7c6      	b.n	800cc7e <__ieee754_rem_pio2+0x6e>
 800ccf0:	a383      	add	r3, pc, #524	; (adr r3, 800cf00 <__ieee754_rem_pio2+0x2f0>)
 800ccf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf6:	f7f3 fa39 	bl	800016c <__adddf3>
 800ccfa:	a383      	add	r3, pc, #524	; (adr r3, 800cf08 <__ieee754_rem_pio2+0x2f8>)
 800ccfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd00:	4606      	mov	r6, r0
 800cd02:	460f      	mov	r7, r1
 800cd04:	f7f3 fa32 	bl	800016c <__adddf3>
 800cd08:	4602      	mov	r2, r0
 800cd0a:	460b      	mov	r3, r1
 800cd0c:	4630      	mov	r0, r6
 800cd0e:	e9c4 2300 	strd	r2, r3, [r4]
 800cd12:	4639      	mov	r1, r7
 800cd14:	f7f3 fa28 	bl	8000168 <__aeabi_dsub>
 800cd18:	a37b      	add	r3, pc, #492	; (adr r3, 800cf08 <__ieee754_rem_pio2+0x2f8>)
 800cd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd1e:	e7e0      	b.n	800cce2 <__ieee754_rem_pio2+0xd2>
 800cd20:	4a84      	ldr	r2, [pc, #528]	; (800cf34 <__ieee754_rem_pio2+0x324>)
 800cd22:	4592      	cmp	sl, r2
 800cd24:	f300 80d5 	bgt.w	800ced2 <__ieee754_rem_pio2+0x2c2>
 800cd28:	f000 fe20 	bl	800d96c <fabs>
 800cd2c:	a378      	add	r3, pc, #480	; (adr r3, 800cf10 <__ieee754_rem_pio2+0x300>)
 800cd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd32:	4606      	mov	r6, r0
 800cd34:	460f      	mov	r7, r1
 800cd36:	f7f3 fbcf 	bl	80004d8 <__aeabi_dmul>
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	4b7e      	ldr	r3, [pc, #504]	; (800cf38 <__ieee754_rem_pio2+0x328>)
 800cd3e:	f7f3 fa15 	bl	800016c <__adddf3>
 800cd42:	f7f3 fe79 	bl	8000a38 <__aeabi_d2iz>
 800cd46:	4605      	mov	r5, r0
 800cd48:	f7f3 fb5c 	bl	8000404 <__aeabi_i2d>
 800cd4c:	4602      	mov	r2, r0
 800cd4e:	460b      	mov	r3, r1
 800cd50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cd54:	a366      	add	r3, pc, #408	; (adr r3, 800cef0 <__ieee754_rem_pio2+0x2e0>)
 800cd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd5a:	f7f3 fbbd 	bl	80004d8 <__aeabi_dmul>
 800cd5e:	4602      	mov	r2, r0
 800cd60:	460b      	mov	r3, r1
 800cd62:	4630      	mov	r0, r6
 800cd64:	4639      	mov	r1, r7
 800cd66:	f7f3 f9ff 	bl	8000168 <__aeabi_dsub>
 800cd6a:	a363      	add	r3, pc, #396	; (adr r3, 800cef8 <__ieee754_rem_pio2+0x2e8>)
 800cd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd70:	4680      	mov	r8, r0
 800cd72:	4689      	mov	r9, r1
 800cd74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd78:	f7f3 fbae 	bl	80004d8 <__aeabi_dmul>
 800cd7c:	2d1f      	cmp	r5, #31
 800cd7e:	4606      	mov	r6, r0
 800cd80:	460f      	mov	r7, r1
 800cd82:	dc0e      	bgt.n	800cda2 <__ieee754_rem_pio2+0x192>
 800cd84:	4b6d      	ldr	r3, [pc, #436]	; (800cf3c <__ieee754_rem_pio2+0x32c>)
 800cd86:	1e6a      	subs	r2, r5, #1
 800cd88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd8c:	4553      	cmp	r3, sl
 800cd8e:	d008      	beq.n	800cda2 <__ieee754_rem_pio2+0x192>
 800cd90:	4632      	mov	r2, r6
 800cd92:	463b      	mov	r3, r7
 800cd94:	4640      	mov	r0, r8
 800cd96:	4649      	mov	r1, r9
 800cd98:	f7f3 f9e6 	bl	8000168 <__aeabi_dsub>
 800cd9c:	e9c4 0100 	strd	r0, r1, [r4]
 800cda0:	e013      	b.n	800cdca <__ieee754_rem_pio2+0x1ba>
 800cda2:	463b      	mov	r3, r7
 800cda4:	4632      	mov	r2, r6
 800cda6:	4640      	mov	r0, r8
 800cda8:	4649      	mov	r1, r9
 800cdaa:	f7f3 f9dd 	bl	8000168 <__aeabi_dsub>
 800cdae:	ea4f 532a 	mov.w	r3, sl, asr #20
 800cdb2:	9305      	str	r3, [sp, #20]
 800cdb4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cdb8:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800cdbc:	f1ba 0f10 	cmp.w	sl, #16
 800cdc0:	dc1f      	bgt.n	800ce02 <__ieee754_rem_pio2+0x1f2>
 800cdc2:	4602      	mov	r2, r0
 800cdc4:	460b      	mov	r3, r1
 800cdc6:	e9c4 2300 	strd	r2, r3, [r4]
 800cdca:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800cdce:	4640      	mov	r0, r8
 800cdd0:	4653      	mov	r3, sl
 800cdd2:	4649      	mov	r1, r9
 800cdd4:	f7f3 f9c8 	bl	8000168 <__aeabi_dsub>
 800cdd8:	4632      	mov	r2, r6
 800cdda:	463b      	mov	r3, r7
 800cddc:	f7f3 f9c4 	bl	8000168 <__aeabi_dsub>
 800cde0:	460b      	mov	r3, r1
 800cde2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cde6:	9904      	ldr	r1, [sp, #16]
 800cde8:	4602      	mov	r2, r0
 800cdea:	2900      	cmp	r1, #0
 800cdec:	f6bf af47 	bge.w	800cc7e <__ieee754_rem_pio2+0x6e>
 800cdf0:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800cdf4:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800cdf8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cdfc:	60e3      	str	r3, [r4, #12]
 800cdfe:	426d      	negs	r5, r5
 800ce00:	e73d      	b.n	800cc7e <__ieee754_rem_pio2+0x6e>
 800ce02:	a33f      	add	r3, pc, #252	; (adr r3, 800cf00 <__ieee754_rem_pio2+0x2f0>)
 800ce04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce0c:	f7f3 fb64 	bl	80004d8 <__aeabi_dmul>
 800ce10:	4606      	mov	r6, r0
 800ce12:	460f      	mov	r7, r1
 800ce14:	4602      	mov	r2, r0
 800ce16:	460b      	mov	r3, r1
 800ce18:	4640      	mov	r0, r8
 800ce1a:	4649      	mov	r1, r9
 800ce1c:	f7f3 f9a4 	bl	8000168 <__aeabi_dsub>
 800ce20:	4602      	mov	r2, r0
 800ce22:	460b      	mov	r3, r1
 800ce24:	4682      	mov	sl, r0
 800ce26:	468b      	mov	fp, r1
 800ce28:	4640      	mov	r0, r8
 800ce2a:	4649      	mov	r1, r9
 800ce2c:	f7f3 f99c 	bl	8000168 <__aeabi_dsub>
 800ce30:	4632      	mov	r2, r6
 800ce32:	463b      	mov	r3, r7
 800ce34:	f7f3 f998 	bl	8000168 <__aeabi_dsub>
 800ce38:	a333      	add	r3, pc, #204	; (adr r3, 800cf08 <__ieee754_rem_pio2+0x2f8>)
 800ce3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce3e:	4606      	mov	r6, r0
 800ce40:	460f      	mov	r7, r1
 800ce42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce46:	f7f3 fb47 	bl	80004d8 <__aeabi_dmul>
 800ce4a:	4632      	mov	r2, r6
 800ce4c:	463b      	mov	r3, r7
 800ce4e:	f7f3 f98b 	bl	8000168 <__aeabi_dsub>
 800ce52:	4602      	mov	r2, r0
 800ce54:	460b      	mov	r3, r1
 800ce56:	4606      	mov	r6, r0
 800ce58:	460f      	mov	r7, r1
 800ce5a:	4650      	mov	r0, sl
 800ce5c:	4659      	mov	r1, fp
 800ce5e:	f7f3 f983 	bl	8000168 <__aeabi_dsub>
 800ce62:	9a05      	ldr	r2, [sp, #20]
 800ce64:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ce68:	1ad3      	subs	r3, r2, r3
 800ce6a:	2b31      	cmp	r3, #49	; 0x31
 800ce6c:	dc06      	bgt.n	800ce7c <__ieee754_rem_pio2+0x26c>
 800ce6e:	4602      	mov	r2, r0
 800ce70:	460b      	mov	r3, r1
 800ce72:	46d0      	mov	r8, sl
 800ce74:	46d9      	mov	r9, fp
 800ce76:	e9c4 2300 	strd	r2, r3, [r4]
 800ce7a:	e7a6      	b.n	800cdca <__ieee754_rem_pio2+0x1ba>
 800ce7c:	a326      	add	r3, pc, #152	; (adr r3, 800cf18 <__ieee754_rem_pio2+0x308>)
 800ce7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce86:	f7f3 fb27 	bl	80004d8 <__aeabi_dmul>
 800ce8a:	4606      	mov	r6, r0
 800ce8c:	460f      	mov	r7, r1
 800ce8e:	4602      	mov	r2, r0
 800ce90:	460b      	mov	r3, r1
 800ce92:	4650      	mov	r0, sl
 800ce94:	4659      	mov	r1, fp
 800ce96:	f7f3 f967 	bl	8000168 <__aeabi_dsub>
 800ce9a:	4602      	mov	r2, r0
 800ce9c:	460b      	mov	r3, r1
 800ce9e:	4680      	mov	r8, r0
 800cea0:	4689      	mov	r9, r1
 800cea2:	4650      	mov	r0, sl
 800cea4:	4659      	mov	r1, fp
 800cea6:	f7f3 f95f 	bl	8000168 <__aeabi_dsub>
 800ceaa:	4632      	mov	r2, r6
 800ceac:	463b      	mov	r3, r7
 800ceae:	f7f3 f95b 	bl	8000168 <__aeabi_dsub>
 800ceb2:	a31b      	add	r3, pc, #108	; (adr r3, 800cf20 <__ieee754_rem_pio2+0x310>)
 800ceb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb8:	4606      	mov	r6, r0
 800ceba:	460f      	mov	r7, r1
 800cebc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cec0:	f7f3 fb0a 	bl	80004d8 <__aeabi_dmul>
 800cec4:	4632      	mov	r2, r6
 800cec6:	463b      	mov	r3, r7
 800cec8:	f7f3 f94e 	bl	8000168 <__aeabi_dsub>
 800cecc:	4606      	mov	r6, r0
 800cece:	460f      	mov	r7, r1
 800ced0:	e75e      	b.n	800cd90 <__ieee754_rem_pio2+0x180>
 800ced2:	4a1b      	ldr	r2, [pc, #108]	; (800cf40 <__ieee754_rem_pio2+0x330>)
 800ced4:	4592      	cmp	sl, r2
 800ced6:	dd35      	ble.n	800cf44 <__ieee754_rem_pio2+0x334>
 800ced8:	4602      	mov	r2, r0
 800ceda:	460b      	mov	r3, r1
 800cedc:	f7f3 f944 	bl	8000168 <__aeabi_dsub>
 800cee0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cee4:	e9c4 0100 	strd	r0, r1, [r4]
 800cee8:	e6a2      	b.n	800cc30 <__ieee754_rem_pio2+0x20>
 800ceea:	bf00      	nop
 800ceec:	f3af 8000 	nop.w
 800cef0:	54400000 	.word	0x54400000
 800cef4:	3ff921fb 	.word	0x3ff921fb
 800cef8:	1a626331 	.word	0x1a626331
 800cefc:	3dd0b461 	.word	0x3dd0b461
 800cf00:	1a600000 	.word	0x1a600000
 800cf04:	3dd0b461 	.word	0x3dd0b461
 800cf08:	2e037073 	.word	0x2e037073
 800cf0c:	3ba3198a 	.word	0x3ba3198a
 800cf10:	6dc9c883 	.word	0x6dc9c883
 800cf14:	3fe45f30 	.word	0x3fe45f30
 800cf18:	2e000000 	.word	0x2e000000
 800cf1c:	3ba3198a 	.word	0x3ba3198a
 800cf20:	252049c1 	.word	0x252049c1
 800cf24:	397b839a 	.word	0x397b839a
 800cf28:	3fe921fb 	.word	0x3fe921fb
 800cf2c:	4002d97b 	.word	0x4002d97b
 800cf30:	3ff921fb 	.word	0x3ff921fb
 800cf34:	413921fb 	.word	0x413921fb
 800cf38:	3fe00000 	.word	0x3fe00000
 800cf3c:	0800f1b8 	.word	0x0800f1b8
 800cf40:	7fefffff 	.word	0x7fefffff
 800cf44:	ea4f 552a 	mov.w	r5, sl, asr #20
 800cf48:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800cf4c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800cf50:	460f      	mov	r7, r1
 800cf52:	4606      	mov	r6, r0
 800cf54:	f7f3 fd70 	bl	8000a38 <__aeabi_d2iz>
 800cf58:	f7f3 fa54 	bl	8000404 <__aeabi_i2d>
 800cf5c:	4602      	mov	r2, r0
 800cf5e:	460b      	mov	r3, r1
 800cf60:	4630      	mov	r0, r6
 800cf62:	4639      	mov	r1, r7
 800cf64:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cf68:	f7f3 f8fe 	bl	8000168 <__aeabi_dsub>
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	4b1e      	ldr	r3, [pc, #120]	; (800cfe8 <__ieee754_rem_pio2+0x3d8>)
 800cf70:	f7f3 fab2 	bl	80004d8 <__aeabi_dmul>
 800cf74:	460f      	mov	r7, r1
 800cf76:	4606      	mov	r6, r0
 800cf78:	f7f3 fd5e 	bl	8000a38 <__aeabi_d2iz>
 800cf7c:	f7f3 fa42 	bl	8000404 <__aeabi_i2d>
 800cf80:	4602      	mov	r2, r0
 800cf82:	460b      	mov	r3, r1
 800cf84:	4630      	mov	r0, r6
 800cf86:	4639      	mov	r1, r7
 800cf88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cf8c:	f7f3 f8ec 	bl	8000168 <__aeabi_dsub>
 800cf90:	2200      	movs	r2, #0
 800cf92:	4b15      	ldr	r3, [pc, #84]	; (800cfe8 <__ieee754_rem_pio2+0x3d8>)
 800cf94:	f7f3 faa0 	bl	80004d8 <__aeabi_dmul>
 800cf98:	f04f 0803 	mov.w	r8, #3
 800cf9c:	2600      	movs	r6, #0
 800cf9e:	2700      	movs	r7, #0
 800cfa0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800cfa4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800cfa8:	4632      	mov	r2, r6
 800cfaa:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800cfae:	463b      	mov	r3, r7
 800cfb0:	46c2      	mov	sl, r8
 800cfb2:	f108 38ff 	add.w	r8, r8, #4294967295
 800cfb6:	f7f3 fcf7 	bl	80009a8 <__aeabi_dcmpeq>
 800cfba:	2800      	cmp	r0, #0
 800cfbc:	d1f4      	bne.n	800cfa8 <__ieee754_rem_pio2+0x398>
 800cfbe:	4b0b      	ldr	r3, [pc, #44]	; (800cfec <__ieee754_rem_pio2+0x3dc>)
 800cfc0:	462a      	mov	r2, r5
 800cfc2:	9301      	str	r3, [sp, #4]
 800cfc4:	2302      	movs	r3, #2
 800cfc6:	4621      	mov	r1, r4
 800cfc8:	9300      	str	r3, [sp, #0]
 800cfca:	a806      	add	r0, sp, #24
 800cfcc:	4653      	mov	r3, sl
 800cfce:	f000 f8cd 	bl	800d16c <__kernel_rem_pio2>
 800cfd2:	9b04      	ldr	r3, [sp, #16]
 800cfd4:	4605      	mov	r5, r0
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	f6bf ae51 	bge.w	800cc7e <__ieee754_rem_pio2+0x6e>
 800cfdc:	6863      	ldr	r3, [r4, #4]
 800cfde:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cfe2:	6063      	str	r3, [r4, #4]
 800cfe4:	68e3      	ldr	r3, [r4, #12]
 800cfe6:	e707      	b.n	800cdf8 <__ieee754_rem_pio2+0x1e8>
 800cfe8:	41700000 	.word	0x41700000
 800cfec:	0800f238 	.word	0x0800f238

0800cff0 <__kernel_cos>:
 800cff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cff4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cff8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800cffc:	4680      	mov	r8, r0
 800cffe:	460f      	mov	r7, r1
 800d000:	e9cd 2300 	strd	r2, r3, [sp]
 800d004:	da04      	bge.n	800d010 <__kernel_cos+0x20>
 800d006:	f7f3 fd17 	bl	8000a38 <__aeabi_d2iz>
 800d00a:	2800      	cmp	r0, #0
 800d00c:	f000 8086 	beq.w	800d11c <__kernel_cos+0x12c>
 800d010:	4642      	mov	r2, r8
 800d012:	463b      	mov	r3, r7
 800d014:	4640      	mov	r0, r8
 800d016:	4639      	mov	r1, r7
 800d018:	f7f3 fa5e 	bl	80004d8 <__aeabi_dmul>
 800d01c:	2200      	movs	r2, #0
 800d01e:	4b4e      	ldr	r3, [pc, #312]	; (800d158 <__kernel_cos+0x168>)
 800d020:	4604      	mov	r4, r0
 800d022:	460d      	mov	r5, r1
 800d024:	f7f3 fa58 	bl	80004d8 <__aeabi_dmul>
 800d028:	a33f      	add	r3, pc, #252	; (adr r3, 800d128 <__kernel_cos+0x138>)
 800d02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d02e:	4682      	mov	sl, r0
 800d030:	468b      	mov	fp, r1
 800d032:	4620      	mov	r0, r4
 800d034:	4629      	mov	r1, r5
 800d036:	f7f3 fa4f 	bl	80004d8 <__aeabi_dmul>
 800d03a:	a33d      	add	r3, pc, #244	; (adr r3, 800d130 <__kernel_cos+0x140>)
 800d03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d040:	f7f3 f894 	bl	800016c <__adddf3>
 800d044:	4622      	mov	r2, r4
 800d046:	462b      	mov	r3, r5
 800d048:	f7f3 fa46 	bl	80004d8 <__aeabi_dmul>
 800d04c:	a33a      	add	r3, pc, #232	; (adr r3, 800d138 <__kernel_cos+0x148>)
 800d04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d052:	f7f3 f889 	bl	8000168 <__aeabi_dsub>
 800d056:	4622      	mov	r2, r4
 800d058:	462b      	mov	r3, r5
 800d05a:	f7f3 fa3d 	bl	80004d8 <__aeabi_dmul>
 800d05e:	a338      	add	r3, pc, #224	; (adr r3, 800d140 <__kernel_cos+0x150>)
 800d060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d064:	f7f3 f882 	bl	800016c <__adddf3>
 800d068:	4622      	mov	r2, r4
 800d06a:	462b      	mov	r3, r5
 800d06c:	f7f3 fa34 	bl	80004d8 <__aeabi_dmul>
 800d070:	a335      	add	r3, pc, #212	; (adr r3, 800d148 <__kernel_cos+0x158>)
 800d072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d076:	f7f3 f877 	bl	8000168 <__aeabi_dsub>
 800d07a:	4622      	mov	r2, r4
 800d07c:	462b      	mov	r3, r5
 800d07e:	f7f3 fa2b 	bl	80004d8 <__aeabi_dmul>
 800d082:	a333      	add	r3, pc, #204	; (adr r3, 800d150 <__kernel_cos+0x160>)
 800d084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d088:	f7f3 f870 	bl	800016c <__adddf3>
 800d08c:	4622      	mov	r2, r4
 800d08e:	462b      	mov	r3, r5
 800d090:	f7f3 fa22 	bl	80004d8 <__aeabi_dmul>
 800d094:	4622      	mov	r2, r4
 800d096:	462b      	mov	r3, r5
 800d098:	f7f3 fa1e 	bl	80004d8 <__aeabi_dmul>
 800d09c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0a0:	4604      	mov	r4, r0
 800d0a2:	460d      	mov	r5, r1
 800d0a4:	4640      	mov	r0, r8
 800d0a6:	4639      	mov	r1, r7
 800d0a8:	f7f3 fa16 	bl	80004d8 <__aeabi_dmul>
 800d0ac:	460b      	mov	r3, r1
 800d0ae:	4602      	mov	r2, r0
 800d0b0:	4629      	mov	r1, r5
 800d0b2:	4620      	mov	r0, r4
 800d0b4:	f7f3 f858 	bl	8000168 <__aeabi_dsub>
 800d0b8:	4b28      	ldr	r3, [pc, #160]	; (800d15c <__kernel_cos+0x16c>)
 800d0ba:	4680      	mov	r8, r0
 800d0bc:	429e      	cmp	r6, r3
 800d0be:	4689      	mov	r9, r1
 800d0c0:	dc0e      	bgt.n	800d0e0 <__kernel_cos+0xf0>
 800d0c2:	4602      	mov	r2, r0
 800d0c4:	460b      	mov	r3, r1
 800d0c6:	4650      	mov	r0, sl
 800d0c8:	4659      	mov	r1, fp
 800d0ca:	f7f3 f84d 	bl	8000168 <__aeabi_dsub>
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	2000      	movs	r0, #0
 800d0d2:	460b      	mov	r3, r1
 800d0d4:	4922      	ldr	r1, [pc, #136]	; (800d160 <__kernel_cos+0x170>)
 800d0d6:	f7f3 f847 	bl	8000168 <__aeabi_dsub>
 800d0da:	b003      	add	sp, #12
 800d0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0e0:	2400      	movs	r4, #0
 800d0e2:	4b20      	ldr	r3, [pc, #128]	; (800d164 <__kernel_cos+0x174>)
 800d0e4:	4622      	mov	r2, r4
 800d0e6:	429e      	cmp	r6, r3
 800d0e8:	bfcc      	ite	gt
 800d0ea:	4d1f      	ldrgt	r5, [pc, #124]	; (800d168 <__kernel_cos+0x178>)
 800d0ec:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800d0f0:	462b      	mov	r3, r5
 800d0f2:	2000      	movs	r0, #0
 800d0f4:	491a      	ldr	r1, [pc, #104]	; (800d160 <__kernel_cos+0x170>)
 800d0f6:	f7f3 f837 	bl	8000168 <__aeabi_dsub>
 800d0fa:	4622      	mov	r2, r4
 800d0fc:	4606      	mov	r6, r0
 800d0fe:	460f      	mov	r7, r1
 800d100:	462b      	mov	r3, r5
 800d102:	4650      	mov	r0, sl
 800d104:	4659      	mov	r1, fp
 800d106:	f7f3 f82f 	bl	8000168 <__aeabi_dsub>
 800d10a:	4642      	mov	r2, r8
 800d10c:	464b      	mov	r3, r9
 800d10e:	f7f3 f82b 	bl	8000168 <__aeabi_dsub>
 800d112:	4602      	mov	r2, r0
 800d114:	460b      	mov	r3, r1
 800d116:	4630      	mov	r0, r6
 800d118:	4639      	mov	r1, r7
 800d11a:	e7dc      	b.n	800d0d6 <__kernel_cos+0xe6>
 800d11c:	2000      	movs	r0, #0
 800d11e:	4910      	ldr	r1, [pc, #64]	; (800d160 <__kernel_cos+0x170>)
 800d120:	e7db      	b.n	800d0da <__kernel_cos+0xea>
 800d122:	bf00      	nop
 800d124:	f3af 8000 	nop.w
 800d128:	be8838d4 	.word	0xbe8838d4
 800d12c:	bda8fae9 	.word	0xbda8fae9
 800d130:	bdb4b1c4 	.word	0xbdb4b1c4
 800d134:	3e21ee9e 	.word	0x3e21ee9e
 800d138:	809c52ad 	.word	0x809c52ad
 800d13c:	3e927e4f 	.word	0x3e927e4f
 800d140:	19cb1590 	.word	0x19cb1590
 800d144:	3efa01a0 	.word	0x3efa01a0
 800d148:	16c15177 	.word	0x16c15177
 800d14c:	3f56c16c 	.word	0x3f56c16c
 800d150:	5555554c 	.word	0x5555554c
 800d154:	3fa55555 	.word	0x3fa55555
 800d158:	3fe00000 	.word	0x3fe00000
 800d15c:	3fd33332 	.word	0x3fd33332
 800d160:	3ff00000 	.word	0x3ff00000
 800d164:	3fe90000 	.word	0x3fe90000
 800d168:	3fd20000 	.word	0x3fd20000

0800d16c <__kernel_rem_pio2>:
 800d16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d170:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800d174:	9308      	str	r3, [sp, #32]
 800d176:	9101      	str	r1, [sp, #4]
 800d178:	4bc0      	ldr	r3, [pc, #768]	; (800d47c <__kernel_rem_pio2+0x310>)
 800d17a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800d17c:	f112 0f14 	cmn.w	r2, #20
 800d180:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d184:	bfa8      	it	ge
 800d186:	1ed4      	subge	r4, r2, #3
 800d188:	9304      	str	r3, [sp, #16]
 800d18a:	9b08      	ldr	r3, [sp, #32]
 800d18c:	bfb8      	it	lt
 800d18e:	2400      	movlt	r4, #0
 800d190:	f103 33ff 	add.w	r3, r3, #4294967295
 800d194:	9306      	str	r3, [sp, #24]
 800d196:	bfa4      	itt	ge
 800d198:	2318      	movge	r3, #24
 800d19a:	fb94 f4f3 	sdivge	r4, r4, r3
 800d19e:	f06f 0317 	mvn.w	r3, #23
 800d1a2:	fb04 3303 	mla	r3, r4, r3, r3
 800d1a6:	eb03 0a02 	add.w	sl, r3, r2
 800d1aa:	9a06      	ldr	r2, [sp, #24]
 800d1ac:	9b04      	ldr	r3, [sp, #16]
 800d1ae:	1aa7      	subs	r7, r4, r2
 800d1b0:	eb03 0802 	add.w	r8, r3, r2
 800d1b4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800d1b6:	2500      	movs	r5, #0
 800d1b8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d1bc:	2200      	movs	r2, #0
 800d1be:	2300      	movs	r3, #0
 800d1c0:	9009      	str	r0, [sp, #36]	; 0x24
 800d1c2:	ae20      	add	r6, sp, #128	; 0x80
 800d1c4:	4545      	cmp	r5, r8
 800d1c6:	dd19      	ble.n	800d1fc <__kernel_rem_pio2+0x90>
 800d1c8:	9b08      	ldr	r3, [sp, #32]
 800d1ca:	aa20      	add	r2, sp, #128	; 0x80
 800d1cc:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d1d0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800d1d4:	f1c3 0301 	rsb	r3, r3, #1
 800d1d8:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800d1dc:	9307      	str	r3, [sp, #28]
 800d1de:	9b07      	ldr	r3, [sp, #28]
 800d1e0:	9a04      	ldr	r2, [sp, #16]
 800d1e2:	4443      	add	r3, r8
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	db35      	blt.n	800d254 <__kernel_rem_pio2+0xe8>
 800d1e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	f1a3 0908 	sub.w	r9, r3, #8
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	462f      	mov	r7, r5
 800d1f4:	2600      	movs	r6, #0
 800d1f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d1fa:	e01f      	b.n	800d23c <__kernel_rem_pio2+0xd0>
 800d1fc:	42ef      	cmn	r7, r5
 800d1fe:	d40b      	bmi.n	800d218 <__kernel_rem_pio2+0xac>
 800d200:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d204:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d208:	f7f3 f8fc 	bl	8000404 <__aeabi_i2d>
 800d20c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d210:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d214:	3501      	adds	r5, #1
 800d216:	e7d5      	b.n	800d1c4 <__kernel_rem_pio2+0x58>
 800d218:	4610      	mov	r0, r2
 800d21a:	4619      	mov	r1, r3
 800d21c:	e7f8      	b.n	800d210 <__kernel_rem_pio2+0xa4>
 800d21e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d222:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800d226:	f7f3 f957 	bl	80004d8 <__aeabi_dmul>
 800d22a:	4602      	mov	r2, r0
 800d22c:	460b      	mov	r3, r1
 800d22e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d232:	f7f2 ff9b 	bl	800016c <__adddf3>
 800d236:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d23a:	3601      	adds	r6, #1
 800d23c:	9b06      	ldr	r3, [sp, #24]
 800d23e:	3f08      	subs	r7, #8
 800d240:	429e      	cmp	r6, r3
 800d242:	ddec      	ble.n	800d21e <__kernel_rem_pio2+0xb2>
 800d244:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d248:	3508      	adds	r5, #8
 800d24a:	e8eb 2302 	strd	r2, r3, [fp], #8
 800d24e:	f108 0801 	add.w	r8, r8, #1
 800d252:	e7c4      	b.n	800d1de <__kernel_rem_pio2+0x72>
 800d254:	9b04      	ldr	r3, [sp, #16]
 800d256:	aa0c      	add	r2, sp, #48	; 0x30
 800d258:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d25c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d25e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800d260:	9f04      	ldr	r7, [sp, #16]
 800d262:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d266:	930a      	str	r3, [sp, #40]	; 0x28
 800d268:	463e      	mov	r6, r7
 800d26a:	ab98      	add	r3, sp, #608	; 0x260
 800d26c:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800d270:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d274:	f8cd b008 	str.w	fp, [sp, #8]
 800d278:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800d27c:	2e00      	cmp	r6, #0
 800d27e:	dc71      	bgt.n	800d364 <__kernel_rem_pio2+0x1f8>
 800d280:	4652      	mov	r2, sl
 800d282:	4620      	mov	r0, r4
 800d284:	4629      	mov	r1, r5
 800d286:	f000 fbf7 	bl	800da78 <scalbn>
 800d28a:	2200      	movs	r2, #0
 800d28c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d290:	4604      	mov	r4, r0
 800d292:	460d      	mov	r5, r1
 800d294:	f7f3 f920 	bl	80004d8 <__aeabi_dmul>
 800d298:	f000 fb6e 	bl	800d978 <floor>
 800d29c:	2200      	movs	r2, #0
 800d29e:	4b78      	ldr	r3, [pc, #480]	; (800d480 <__kernel_rem_pio2+0x314>)
 800d2a0:	f7f3 f91a 	bl	80004d8 <__aeabi_dmul>
 800d2a4:	4602      	mov	r2, r0
 800d2a6:	460b      	mov	r3, r1
 800d2a8:	4620      	mov	r0, r4
 800d2aa:	4629      	mov	r1, r5
 800d2ac:	f7f2 ff5c 	bl	8000168 <__aeabi_dsub>
 800d2b0:	460d      	mov	r5, r1
 800d2b2:	4604      	mov	r4, r0
 800d2b4:	f7f3 fbc0 	bl	8000a38 <__aeabi_d2iz>
 800d2b8:	9007      	str	r0, [sp, #28]
 800d2ba:	f7f3 f8a3 	bl	8000404 <__aeabi_i2d>
 800d2be:	4602      	mov	r2, r0
 800d2c0:	460b      	mov	r3, r1
 800d2c2:	4620      	mov	r0, r4
 800d2c4:	4629      	mov	r1, r5
 800d2c6:	f7f2 ff4f 	bl	8000168 <__aeabi_dsub>
 800d2ca:	f1ba 0f00 	cmp.w	sl, #0
 800d2ce:	4680      	mov	r8, r0
 800d2d0:	4689      	mov	r9, r1
 800d2d2:	dd70      	ble.n	800d3b6 <__kernel_rem_pio2+0x24a>
 800d2d4:	1e7a      	subs	r2, r7, #1
 800d2d6:	ab0c      	add	r3, sp, #48	; 0x30
 800d2d8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d2dc:	9c07      	ldr	r4, [sp, #28]
 800d2de:	f1ca 0118 	rsb	r1, sl, #24
 800d2e2:	fa40 f301 	asr.w	r3, r0, r1
 800d2e6:	441c      	add	r4, r3
 800d2e8:	408b      	lsls	r3, r1
 800d2ea:	1ac0      	subs	r0, r0, r3
 800d2ec:	ab0c      	add	r3, sp, #48	; 0x30
 800d2ee:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d2f2:	f1ca 0317 	rsb	r3, sl, #23
 800d2f6:	9407      	str	r4, [sp, #28]
 800d2f8:	fa40 f303 	asr.w	r3, r0, r3
 800d2fc:	9302      	str	r3, [sp, #8]
 800d2fe:	9b02      	ldr	r3, [sp, #8]
 800d300:	2b00      	cmp	r3, #0
 800d302:	dd66      	ble.n	800d3d2 <__kernel_rem_pio2+0x266>
 800d304:	2200      	movs	r2, #0
 800d306:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d30a:	4614      	mov	r4, r2
 800d30c:	9b07      	ldr	r3, [sp, #28]
 800d30e:	3301      	adds	r3, #1
 800d310:	9307      	str	r3, [sp, #28]
 800d312:	4297      	cmp	r7, r2
 800d314:	f300 809f 	bgt.w	800d456 <__kernel_rem_pio2+0x2ea>
 800d318:	f1ba 0f00 	cmp.w	sl, #0
 800d31c:	dd07      	ble.n	800d32e <__kernel_rem_pio2+0x1c2>
 800d31e:	f1ba 0f01 	cmp.w	sl, #1
 800d322:	f000 80b9 	beq.w	800d498 <__kernel_rem_pio2+0x32c>
 800d326:	f1ba 0f02 	cmp.w	sl, #2
 800d32a:	f000 80bf 	beq.w	800d4ac <__kernel_rem_pio2+0x340>
 800d32e:	9b02      	ldr	r3, [sp, #8]
 800d330:	2b02      	cmp	r3, #2
 800d332:	d14e      	bne.n	800d3d2 <__kernel_rem_pio2+0x266>
 800d334:	4642      	mov	r2, r8
 800d336:	464b      	mov	r3, r9
 800d338:	2000      	movs	r0, #0
 800d33a:	4952      	ldr	r1, [pc, #328]	; (800d484 <__kernel_rem_pio2+0x318>)
 800d33c:	f7f2 ff14 	bl	8000168 <__aeabi_dsub>
 800d340:	4680      	mov	r8, r0
 800d342:	4689      	mov	r9, r1
 800d344:	2c00      	cmp	r4, #0
 800d346:	d044      	beq.n	800d3d2 <__kernel_rem_pio2+0x266>
 800d348:	4652      	mov	r2, sl
 800d34a:	2000      	movs	r0, #0
 800d34c:	494d      	ldr	r1, [pc, #308]	; (800d484 <__kernel_rem_pio2+0x318>)
 800d34e:	f000 fb93 	bl	800da78 <scalbn>
 800d352:	4602      	mov	r2, r0
 800d354:	460b      	mov	r3, r1
 800d356:	4640      	mov	r0, r8
 800d358:	4649      	mov	r1, r9
 800d35a:	f7f2 ff05 	bl	8000168 <__aeabi_dsub>
 800d35e:	4680      	mov	r8, r0
 800d360:	4689      	mov	r9, r1
 800d362:	e036      	b.n	800d3d2 <__kernel_rem_pio2+0x266>
 800d364:	2200      	movs	r2, #0
 800d366:	4b48      	ldr	r3, [pc, #288]	; (800d488 <__kernel_rem_pio2+0x31c>)
 800d368:	4620      	mov	r0, r4
 800d36a:	4629      	mov	r1, r5
 800d36c:	f7f3 f8b4 	bl	80004d8 <__aeabi_dmul>
 800d370:	f7f3 fb62 	bl	8000a38 <__aeabi_d2iz>
 800d374:	f7f3 f846 	bl	8000404 <__aeabi_i2d>
 800d378:	2200      	movs	r2, #0
 800d37a:	4b44      	ldr	r3, [pc, #272]	; (800d48c <__kernel_rem_pio2+0x320>)
 800d37c:	4680      	mov	r8, r0
 800d37e:	4689      	mov	r9, r1
 800d380:	f7f3 f8aa 	bl	80004d8 <__aeabi_dmul>
 800d384:	4602      	mov	r2, r0
 800d386:	460b      	mov	r3, r1
 800d388:	4620      	mov	r0, r4
 800d38a:	4629      	mov	r1, r5
 800d38c:	f7f2 feec 	bl	8000168 <__aeabi_dsub>
 800d390:	f7f3 fb52 	bl	8000a38 <__aeabi_d2iz>
 800d394:	9b02      	ldr	r3, [sp, #8]
 800d396:	3e01      	subs	r6, #1
 800d398:	f843 0b04 	str.w	r0, [r3], #4
 800d39c:	9302      	str	r3, [sp, #8]
 800d39e:	ab70      	add	r3, sp, #448	; 0x1c0
 800d3a0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d3a4:	4640      	mov	r0, r8
 800d3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3aa:	4649      	mov	r1, r9
 800d3ac:	f7f2 fede 	bl	800016c <__adddf3>
 800d3b0:	4604      	mov	r4, r0
 800d3b2:	460d      	mov	r5, r1
 800d3b4:	e762      	b.n	800d27c <__kernel_rem_pio2+0x110>
 800d3b6:	d105      	bne.n	800d3c4 <__kernel_rem_pio2+0x258>
 800d3b8:	1e7b      	subs	r3, r7, #1
 800d3ba:	aa0c      	add	r2, sp, #48	; 0x30
 800d3bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d3c0:	15c3      	asrs	r3, r0, #23
 800d3c2:	e79b      	b.n	800d2fc <__kernel_rem_pio2+0x190>
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	4b32      	ldr	r3, [pc, #200]	; (800d490 <__kernel_rem_pio2+0x324>)
 800d3c8:	f7f3 fb0c 	bl	80009e4 <__aeabi_dcmpge>
 800d3cc:	2800      	cmp	r0, #0
 800d3ce:	d13f      	bne.n	800d450 <__kernel_rem_pio2+0x2e4>
 800d3d0:	9002      	str	r0, [sp, #8]
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	4640      	mov	r0, r8
 800d3d8:	4649      	mov	r1, r9
 800d3da:	f7f3 fae5 	bl	80009a8 <__aeabi_dcmpeq>
 800d3de:	2800      	cmp	r0, #0
 800d3e0:	f000 80b5 	beq.w	800d54e <__kernel_rem_pio2+0x3e2>
 800d3e4:	1e7c      	subs	r4, r7, #1
 800d3e6:	4623      	mov	r3, r4
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	9904      	ldr	r1, [sp, #16]
 800d3ec:	428b      	cmp	r3, r1
 800d3ee:	da64      	bge.n	800d4ba <__kernel_rem_pio2+0x34e>
 800d3f0:	2a00      	cmp	r2, #0
 800d3f2:	d078      	beq.n	800d4e6 <__kernel_rem_pio2+0x37a>
 800d3f4:	ab0c      	add	r3, sp, #48	; 0x30
 800d3f6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d3fa:	f1aa 0a18 	sub.w	sl, sl, #24
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	f000 80a3 	beq.w	800d54a <__kernel_rem_pio2+0x3de>
 800d404:	4652      	mov	r2, sl
 800d406:	2000      	movs	r0, #0
 800d408:	491e      	ldr	r1, [pc, #120]	; (800d484 <__kernel_rem_pio2+0x318>)
 800d40a:	f000 fb35 	bl	800da78 <scalbn>
 800d40e:	46a2      	mov	sl, r4
 800d410:	4606      	mov	r6, r0
 800d412:	460f      	mov	r7, r1
 800d414:	f04f 0800 	mov.w	r8, #0
 800d418:	00e3      	lsls	r3, r4, #3
 800d41a:	9306      	str	r3, [sp, #24]
 800d41c:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800d488 <__kernel_rem_pio2+0x31c>
 800d420:	ab70      	add	r3, sp, #448	; 0x1c0
 800d422:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800d426:	f1ba 0f00 	cmp.w	sl, #0
 800d42a:	f280 80c6 	bge.w	800d5ba <__kernel_rem_pio2+0x44e>
 800d42e:	4627      	mov	r7, r4
 800d430:	f04f 0800 	mov.w	r8, #0
 800d434:	2f00      	cmp	r7, #0
 800d436:	f2c0 80f3 	blt.w	800d620 <__kernel_rem_pio2+0x4b4>
 800d43a:	4b16      	ldr	r3, [pc, #88]	; (800d494 <__kernel_rem_pio2+0x328>)
 800d43c:	f04f 0a00 	mov.w	sl, #0
 800d440:	461d      	mov	r5, r3
 800d442:	ab70      	add	r3, sp, #448	; 0x1c0
 800d444:	f04f 0b00 	mov.w	fp, #0
 800d448:	2600      	movs	r6, #0
 800d44a:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800d44e:	e0d9      	b.n	800d604 <__kernel_rem_pio2+0x498>
 800d450:	2302      	movs	r3, #2
 800d452:	9302      	str	r3, [sp, #8]
 800d454:	e756      	b.n	800d304 <__kernel_rem_pio2+0x198>
 800d456:	f8db 3000 	ldr.w	r3, [fp]
 800d45a:	b954      	cbnz	r4, 800d472 <__kernel_rem_pio2+0x306>
 800d45c:	b123      	cbz	r3, 800d468 <__kernel_rem_pio2+0x2fc>
 800d45e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d462:	f8cb 3000 	str.w	r3, [fp]
 800d466:	2301      	movs	r3, #1
 800d468:	461c      	mov	r4, r3
 800d46a:	3201      	adds	r2, #1
 800d46c:	f10b 0b04 	add.w	fp, fp, #4
 800d470:	e74f      	b.n	800d312 <__kernel_rem_pio2+0x1a6>
 800d472:	1acb      	subs	r3, r1, r3
 800d474:	f8cb 3000 	str.w	r3, [fp]
 800d478:	4623      	mov	r3, r4
 800d47a:	e7f5      	b.n	800d468 <__kernel_rem_pio2+0x2fc>
 800d47c:	0800f380 	.word	0x0800f380
 800d480:	40200000 	.word	0x40200000
 800d484:	3ff00000 	.word	0x3ff00000
 800d488:	3e700000 	.word	0x3e700000
 800d48c:	41700000 	.word	0x41700000
 800d490:	3fe00000 	.word	0x3fe00000
 800d494:	0800f340 	.word	0x0800f340
 800d498:	1e7a      	subs	r2, r7, #1
 800d49a:	ab0c      	add	r3, sp, #48	; 0x30
 800d49c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4a0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d4a4:	a90c      	add	r1, sp, #48	; 0x30
 800d4a6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d4aa:	e740      	b.n	800d32e <__kernel_rem_pio2+0x1c2>
 800d4ac:	1e7a      	subs	r2, r7, #1
 800d4ae:	ab0c      	add	r3, sp, #48	; 0x30
 800d4b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4b4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d4b8:	e7f4      	b.n	800d4a4 <__kernel_rem_pio2+0x338>
 800d4ba:	a90c      	add	r1, sp, #48	; 0x30
 800d4bc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d4c0:	3b01      	subs	r3, #1
 800d4c2:	430a      	orrs	r2, r1
 800d4c4:	e791      	b.n	800d3ea <__kernel_rem_pio2+0x27e>
 800d4c6:	3401      	adds	r4, #1
 800d4c8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d4cc:	2a00      	cmp	r2, #0
 800d4ce:	d0fa      	beq.n	800d4c6 <__kernel_rem_pio2+0x35a>
 800d4d0:	9b08      	ldr	r3, [sp, #32]
 800d4d2:	1c7e      	adds	r6, r7, #1
 800d4d4:	18fd      	adds	r5, r7, r3
 800d4d6:	ab20      	add	r3, sp, #128	; 0x80
 800d4d8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d4dc:	443c      	add	r4, r7
 800d4de:	42b4      	cmp	r4, r6
 800d4e0:	da04      	bge.n	800d4ec <__kernel_rem_pio2+0x380>
 800d4e2:	4627      	mov	r7, r4
 800d4e4:	e6c0      	b.n	800d268 <__kernel_rem_pio2+0xfc>
 800d4e6:	2401      	movs	r4, #1
 800d4e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4ea:	e7ed      	b.n	800d4c8 <__kernel_rem_pio2+0x35c>
 800d4ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4ee:	462f      	mov	r7, r5
 800d4f0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d4f4:	f7f2 ff86 	bl	8000404 <__aeabi_i2d>
 800d4f8:	f04f 0b00 	mov.w	fp, #0
 800d4fc:	f04f 0800 	mov.w	r8, #0
 800d500:	f04f 0900 	mov.w	r9, #0
 800d504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d506:	e8e7 0102 	strd	r0, r1, [r7], #8
 800d50a:	3b08      	subs	r3, #8
 800d50c:	9302      	str	r3, [sp, #8]
 800d50e:	9b06      	ldr	r3, [sp, #24]
 800d510:	459b      	cmp	fp, r3
 800d512:	dd07      	ble.n	800d524 <__kernel_rem_pio2+0x3b8>
 800d514:	ab70      	add	r3, sp, #448	; 0x1c0
 800d516:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d51a:	463d      	mov	r5, r7
 800d51c:	e9c3 8900 	strd	r8, r9, [r3]
 800d520:	3601      	adds	r6, #1
 800d522:	e7dc      	b.n	800d4de <__kernel_rem_pio2+0x372>
 800d524:	9902      	ldr	r1, [sp, #8]
 800d526:	f10b 0b01 	add.w	fp, fp, #1
 800d52a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800d52e:	9102      	str	r1, [sp, #8]
 800d530:	e875 0102 	ldrd	r0, r1, [r5], #-8
 800d534:	f7f2 ffd0 	bl	80004d8 <__aeabi_dmul>
 800d538:	4602      	mov	r2, r0
 800d53a:	460b      	mov	r3, r1
 800d53c:	4640      	mov	r0, r8
 800d53e:	4649      	mov	r1, r9
 800d540:	f7f2 fe14 	bl	800016c <__adddf3>
 800d544:	4680      	mov	r8, r0
 800d546:	4689      	mov	r9, r1
 800d548:	e7e1      	b.n	800d50e <__kernel_rem_pio2+0x3a2>
 800d54a:	3c01      	subs	r4, #1
 800d54c:	e752      	b.n	800d3f4 <__kernel_rem_pio2+0x288>
 800d54e:	f1ca 0200 	rsb	r2, sl, #0
 800d552:	4640      	mov	r0, r8
 800d554:	4649      	mov	r1, r9
 800d556:	f000 fa8f 	bl	800da78 <scalbn>
 800d55a:	2200      	movs	r2, #0
 800d55c:	4ba5      	ldr	r3, [pc, #660]	; (800d7f4 <__kernel_rem_pio2+0x688>)
 800d55e:	4604      	mov	r4, r0
 800d560:	460d      	mov	r5, r1
 800d562:	f7f3 fa3f 	bl	80009e4 <__aeabi_dcmpge>
 800d566:	b1f8      	cbz	r0, 800d5a8 <__kernel_rem_pio2+0x43c>
 800d568:	2200      	movs	r2, #0
 800d56a:	4ba3      	ldr	r3, [pc, #652]	; (800d7f8 <__kernel_rem_pio2+0x68c>)
 800d56c:	4620      	mov	r0, r4
 800d56e:	4629      	mov	r1, r5
 800d570:	f7f2 ffb2 	bl	80004d8 <__aeabi_dmul>
 800d574:	f7f3 fa60 	bl	8000a38 <__aeabi_d2iz>
 800d578:	4606      	mov	r6, r0
 800d57a:	f7f2 ff43 	bl	8000404 <__aeabi_i2d>
 800d57e:	2200      	movs	r2, #0
 800d580:	4b9c      	ldr	r3, [pc, #624]	; (800d7f4 <__kernel_rem_pio2+0x688>)
 800d582:	f7f2 ffa9 	bl	80004d8 <__aeabi_dmul>
 800d586:	460b      	mov	r3, r1
 800d588:	4602      	mov	r2, r0
 800d58a:	4629      	mov	r1, r5
 800d58c:	4620      	mov	r0, r4
 800d58e:	f7f2 fdeb 	bl	8000168 <__aeabi_dsub>
 800d592:	f7f3 fa51 	bl	8000a38 <__aeabi_d2iz>
 800d596:	1c7c      	adds	r4, r7, #1
 800d598:	ab0c      	add	r3, sp, #48	; 0x30
 800d59a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800d59e:	f10a 0a18 	add.w	sl, sl, #24
 800d5a2:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800d5a6:	e72d      	b.n	800d404 <__kernel_rem_pio2+0x298>
 800d5a8:	4620      	mov	r0, r4
 800d5aa:	4629      	mov	r1, r5
 800d5ac:	f7f3 fa44 	bl	8000a38 <__aeabi_d2iz>
 800d5b0:	ab0c      	add	r3, sp, #48	; 0x30
 800d5b2:	463c      	mov	r4, r7
 800d5b4:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800d5b8:	e724      	b.n	800d404 <__kernel_rem_pio2+0x298>
 800d5ba:	ab0c      	add	r3, sp, #48	; 0x30
 800d5bc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800d5c0:	f7f2 ff20 	bl	8000404 <__aeabi_i2d>
 800d5c4:	4632      	mov	r2, r6
 800d5c6:	463b      	mov	r3, r7
 800d5c8:	f7f2 ff86 	bl	80004d8 <__aeabi_dmul>
 800d5cc:	4642      	mov	r2, r8
 800d5ce:	e86b 0102 	strd	r0, r1, [fp], #-8
 800d5d2:	464b      	mov	r3, r9
 800d5d4:	4630      	mov	r0, r6
 800d5d6:	4639      	mov	r1, r7
 800d5d8:	f7f2 ff7e 	bl	80004d8 <__aeabi_dmul>
 800d5dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d5e0:	4606      	mov	r6, r0
 800d5e2:	460f      	mov	r7, r1
 800d5e4:	e71f      	b.n	800d426 <__kernel_rem_pio2+0x2ba>
 800d5e6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800d5ea:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800d5ee:	f7f2 ff73 	bl	80004d8 <__aeabi_dmul>
 800d5f2:	4602      	mov	r2, r0
 800d5f4:	460b      	mov	r3, r1
 800d5f6:	4650      	mov	r0, sl
 800d5f8:	4659      	mov	r1, fp
 800d5fa:	f7f2 fdb7 	bl	800016c <__adddf3>
 800d5fe:	4682      	mov	sl, r0
 800d600:	468b      	mov	fp, r1
 800d602:	3601      	adds	r6, #1
 800d604:	9b04      	ldr	r3, [sp, #16]
 800d606:	429e      	cmp	r6, r3
 800d608:	dc01      	bgt.n	800d60e <__kernel_rem_pio2+0x4a2>
 800d60a:	45b0      	cmp	r8, r6
 800d60c:	daeb      	bge.n	800d5e6 <__kernel_rem_pio2+0x47a>
 800d60e:	ab48      	add	r3, sp, #288	; 0x120
 800d610:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d614:	e9c3 ab00 	strd	sl, fp, [r3]
 800d618:	3f01      	subs	r7, #1
 800d61a:	f108 0801 	add.w	r8, r8, #1
 800d61e:	e709      	b.n	800d434 <__kernel_rem_pio2+0x2c8>
 800d620:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800d622:	2b02      	cmp	r3, #2
 800d624:	dc09      	bgt.n	800d63a <__kernel_rem_pio2+0x4ce>
 800d626:	2b00      	cmp	r3, #0
 800d628:	dc34      	bgt.n	800d694 <__kernel_rem_pio2+0x528>
 800d62a:	d05e      	beq.n	800d6ea <__kernel_rem_pio2+0x57e>
 800d62c:	9b07      	ldr	r3, [sp, #28]
 800d62e:	f003 0007 	and.w	r0, r3, #7
 800d632:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800d636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d63a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800d63c:	2b03      	cmp	r3, #3
 800d63e:	d1f5      	bne.n	800d62c <__kernel_rem_pio2+0x4c0>
 800d640:	9a06      	ldr	r2, [sp, #24]
 800d642:	ab48      	add	r3, sp, #288	; 0x120
 800d644:	441a      	add	r2, r3
 800d646:	4615      	mov	r5, r2
 800d648:	4692      	mov	sl, r2
 800d64a:	46a3      	mov	fp, r4
 800d64c:	f1bb 0f00 	cmp.w	fp, #0
 800d650:	dc7a      	bgt.n	800d748 <__kernel_rem_pio2+0x5dc>
 800d652:	46aa      	mov	sl, r5
 800d654:	46a3      	mov	fp, r4
 800d656:	f1bb 0f01 	cmp.w	fp, #1
 800d65a:	f300 8094 	bgt.w	800d786 <__kernel_rem_pio2+0x61a>
 800d65e:	2700      	movs	r7, #0
 800d660:	463e      	mov	r6, r7
 800d662:	2c01      	cmp	r4, #1
 800d664:	f300 80ae 	bgt.w	800d7c4 <__kernel_rem_pio2+0x658>
 800d668:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800d66c:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800d670:	9b02      	ldr	r3, [sp, #8]
 800d672:	2b00      	cmp	r3, #0
 800d674:	f040 80b0 	bne.w	800d7d8 <__kernel_rem_pio2+0x66c>
 800d678:	4603      	mov	r3, r0
 800d67a:	462a      	mov	r2, r5
 800d67c:	9801      	ldr	r0, [sp, #4]
 800d67e:	e9c0 2300 	strd	r2, r3, [r0]
 800d682:	4622      	mov	r2, r4
 800d684:	460b      	mov	r3, r1
 800d686:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d68a:	463a      	mov	r2, r7
 800d68c:	4633      	mov	r3, r6
 800d68e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800d692:	e7cb      	b.n	800d62c <__kernel_rem_pio2+0x4c0>
 800d694:	2000      	movs	r0, #0
 800d696:	9a06      	ldr	r2, [sp, #24]
 800d698:	ab48      	add	r3, sp, #288	; 0x120
 800d69a:	441a      	add	r2, r3
 800d69c:	4615      	mov	r5, r2
 800d69e:	46a0      	mov	r8, r4
 800d6a0:	4601      	mov	r1, r0
 800d6a2:	f1b8 0f00 	cmp.w	r8, #0
 800d6a6:	da3c      	bge.n	800d722 <__kernel_rem_pio2+0x5b6>
 800d6a8:	9b02      	ldr	r3, [sp, #8]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d040      	beq.n	800d730 <__kernel_rem_pio2+0x5c4>
 800d6ae:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800d6b2:	4602      	mov	r2, r0
 800d6b4:	462b      	mov	r3, r5
 800d6b6:	9d01      	ldr	r5, [sp, #4]
 800d6b8:	2601      	movs	r6, #1
 800d6ba:	e9c5 2300 	strd	r2, r3, [r5]
 800d6be:	460b      	mov	r3, r1
 800d6c0:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800d6c4:	f7f2 fd50 	bl	8000168 <__aeabi_dsub>
 800d6c8:	4684      	mov	ip, r0
 800d6ca:	460f      	mov	r7, r1
 800d6cc:	ad48      	add	r5, sp, #288	; 0x120
 800d6ce:	42b4      	cmp	r4, r6
 800d6d0:	f105 0508 	add.w	r5, r5, #8
 800d6d4:	da2e      	bge.n	800d734 <__kernel_rem_pio2+0x5c8>
 800d6d6:	9b02      	ldr	r3, [sp, #8]
 800d6d8:	b10b      	cbz	r3, 800d6de <__kernel_rem_pio2+0x572>
 800d6da:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800d6de:	4662      	mov	r2, ip
 800d6e0:	463b      	mov	r3, r7
 800d6e2:	9901      	ldr	r1, [sp, #4]
 800d6e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800d6e8:	e7a0      	b.n	800d62c <__kernel_rem_pio2+0x4c0>
 800d6ea:	9a06      	ldr	r2, [sp, #24]
 800d6ec:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800d6ee:	ab48      	add	r3, sp, #288	; 0x120
 800d6f0:	441a      	add	r2, r3
 800d6f2:	4615      	mov	r5, r2
 800d6f4:	4637      	mov	r7, r6
 800d6f6:	2c00      	cmp	r4, #0
 800d6f8:	da09      	bge.n	800d70e <__kernel_rem_pio2+0x5a2>
 800d6fa:	9b02      	ldr	r3, [sp, #8]
 800d6fc:	b10b      	cbz	r3, 800d702 <__kernel_rem_pio2+0x596>
 800d6fe:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800d702:	4632      	mov	r2, r6
 800d704:	463b      	mov	r3, r7
 800d706:	9901      	ldr	r1, [sp, #4]
 800d708:	e9c1 2300 	strd	r2, r3, [r1]
 800d70c:	e78e      	b.n	800d62c <__kernel_rem_pio2+0x4c0>
 800d70e:	4630      	mov	r0, r6
 800d710:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800d714:	4639      	mov	r1, r7
 800d716:	f7f2 fd29 	bl	800016c <__adddf3>
 800d71a:	3c01      	subs	r4, #1
 800d71c:	4606      	mov	r6, r0
 800d71e:	460f      	mov	r7, r1
 800d720:	e7e9      	b.n	800d6f6 <__kernel_rem_pio2+0x58a>
 800d722:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800d726:	f7f2 fd21 	bl	800016c <__adddf3>
 800d72a:	f108 38ff 	add.w	r8, r8, #4294967295
 800d72e:	e7b8      	b.n	800d6a2 <__kernel_rem_pio2+0x536>
 800d730:	460d      	mov	r5, r1
 800d732:	e7be      	b.n	800d6b2 <__kernel_rem_pio2+0x546>
 800d734:	4660      	mov	r0, ip
 800d736:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d73a:	4639      	mov	r1, r7
 800d73c:	f7f2 fd16 	bl	800016c <__adddf3>
 800d740:	3601      	adds	r6, #1
 800d742:	4684      	mov	ip, r0
 800d744:	460f      	mov	r7, r1
 800d746:	e7c2      	b.n	800d6ce <__kernel_rem_pio2+0x562>
 800d748:	e9da 6700 	ldrd	r6, r7, [sl]
 800d74c:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800d750:	4632      	mov	r2, r6
 800d752:	463b      	mov	r3, r7
 800d754:	4640      	mov	r0, r8
 800d756:	4649      	mov	r1, r9
 800d758:	f7f2 fd08 	bl	800016c <__adddf3>
 800d75c:	4602      	mov	r2, r0
 800d75e:	460b      	mov	r3, r1
 800d760:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d764:	4640      	mov	r0, r8
 800d766:	4649      	mov	r1, r9
 800d768:	f7f2 fcfe 	bl	8000168 <__aeabi_dsub>
 800d76c:	4632      	mov	r2, r6
 800d76e:	463b      	mov	r3, r7
 800d770:	f7f2 fcfc 	bl	800016c <__adddf3>
 800d774:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d778:	e86a 0102 	strd	r0, r1, [sl], #-8
 800d77c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d780:	e9ca 2300 	strd	r2, r3, [sl]
 800d784:	e762      	b.n	800d64c <__kernel_rem_pio2+0x4e0>
 800d786:	e9da 8900 	ldrd	r8, r9, [sl]
 800d78a:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800d78e:	4642      	mov	r2, r8
 800d790:	464b      	mov	r3, r9
 800d792:	4630      	mov	r0, r6
 800d794:	4639      	mov	r1, r7
 800d796:	f7f2 fce9 	bl	800016c <__adddf3>
 800d79a:	4602      	mov	r2, r0
 800d79c:	460b      	mov	r3, r1
 800d79e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d7a2:	4630      	mov	r0, r6
 800d7a4:	4639      	mov	r1, r7
 800d7a6:	f7f2 fcdf 	bl	8000168 <__aeabi_dsub>
 800d7aa:	4642      	mov	r2, r8
 800d7ac:	464b      	mov	r3, r9
 800d7ae:	f7f2 fcdd 	bl	800016c <__adddf3>
 800d7b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7b6:	e86a 0102 	strd	r0, r1, [sl], #-8
 800d7ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d7be:	e9ca 2300 	strd	r2, r3, [sl]
 800d7c2:	e748      	b.n	800d656 <__kernel_rem_pio2+0x4ea>
 800d7c4:	4638      	mov	r0, r7
 800d7c6:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800d7ca:	4631      	mov	r1, r6
 800d7cc:	f7f2 fcce 	bl	800016c <__adddf3>
 800d7d0:	3c01      	subs	r4, #1
 800d7d2:	4607      	mov	r7, r0
 800d7d4:	460e      	mov	r6, r1
 800d7d6:	e744      	b.n	800d662 <__kernel_rem_pio2+0x4f6>
 800d7d8:	9b01      	ldr	r3, [sp, #4]
 800d7da:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d7de:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800d7e2:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800d7e6:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800d7ea:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800d7ee:	601d      	str	r5, [r3, #0]
 800d7f0:	615e      	str	r6, [r3, #20]
 800d7f2:	e71b      	b.n	800d62c <__kernel_rem_pio2+0x4c0>
 800d7f4:	41700000 	.word	0x41700000
 800d7f8:	3e700000 	.word	0x3e700000
 800d7fc:	00000000 	.word	0x00000000

0800d800 <__kernel_sin>:
 800d800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d804:	b086      	sub	sp, #24
 800d806:	e9cd 2300 	strd	r2, r3, [sp]
 800d80a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d80e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d812:	4682      	mov	sl, r0
 800d814:	460c      	mov	r4, r1
 800d816:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800d818:	da03      	bge.n	800d822 <__kernel_sin+0x22>
 800d81a:	f7f3 f90d 	bl	8000a38 <__aeabi_d2iz>
 800d81e:	2800      	cmp	r0, #0
 800d820:	d050      	beq.n	800d8c4 <__kernel_sin+0xc4>
 800d822:	4652      	mov	r2, sl
 800d824:	4623      	mov	r3, r4
 800d826:	4650      	mov	r0, sl
 800d828:	4621      	mov	r1, r4
 800d82a:	f7f2 fe55 	bl	80004d8 <__aeabi_dmul>
 800d82e:	4606      	mov	r6, r0
 800d830:	460f      	mov	r7, r1
 800d832:	4602      	mov	r2, r0
 800d834:	460b      	mov	r3, r1
 800d836:	4650      	mov	r0, sl
 800d838:	4621      	mov	r1, r4
 800d83a:	f7f2 fe4d 	bl	80004d8 <__aeabi_dmul>
 800d83e:	a33e      	add	r3, pc, #248	; (adr r3, 800d938 <__kernel_sin+0x138>)
 800d840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d844:	4680      	mov	r8, r0
 800d846:	4689      	mov	r9, r1
 800d848:	4630      	mov	r0, r6
 800d84a:	4639      	mov	r1, r7
 800d84c:	f7f2 fe44 	bl	80004d8 <__aeabi_dmul>
 800d850:	a33b      	add	r3, pc, #236	; (adr r3, 800d940 <__kernel_sin+0x140>)
 800d852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d856:	f7f2 fc87 	bl	8000168 <__aeabi_dsub>
 800d85a:	4632      	mov	r2, r6
 800d85c:	463b      	mov	r3, r7
 800d85e:	f7f2 fe3b 	bl	80004d8 <__aeabi_dmul>
 800d862:	a339      	add	r3, pc, #228	; (adr r3, 800d948 <__kernel_sin+0x148>)
 800d864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d868:	f7f2 fc80 	bl	800016c <__adddf3>
 800d86c:	4632      	mov	r2, r6
 800d86e:	463b      	mov	r3, r7
 800d870:	f7f2 fe32 	bl	80004d8 <__aeabi_dmul>
 800d874:	a336      	add	r3, pc, #216	; (adr r3, 800d950 <__kernel_sin+0x150>)
 800d876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d87a:	f7f2 fc75 	bl	8000168 <__aeabi_dsub>
 800d87e:	4632      	mov	r2, r6
 800d880:	463b      	mov	r3, r7
 800d882:	f7f2 fe29 	bl	80004d8 <__aeabi_dmul>
 800d886:	a334      	add	r3, pc, #208	; (adr r3, 800d958 <__kernel_sin+0x158>)
 800d888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d88c:	f7f2 fc6e 	bl	800016c <__adddf3>
 800d890:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d894:	b9dd      	cbnz	r5, 800d8ce <__kernel_sin+0xce>
 800d896:	4602      	mov	r2, r0
 800d898:	460b      	mov	r3, r1
 800d89a:	4630      	mov	r0, r6
 800d89c:	4639      	mov	r1, r7
 800d89e:	f7f2 fe1b 	bl	80004d8 <__aeabi_dmul>
 800d8a2:	a32f      	add	r3, pc, #188	; (adr r3, 800d960 <__kernel_sin+0x160>)
 800d8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a8:	f7f2 fc5e 	bl	8000168 <__aeabi_dsub>
 800d8ac:	4642      	mov	r2, r8
 800d8ae:	464b      	mov	r3, r9
 800d8b0:	f7f2 fe12 	bl	80004d8 <__aeabi_dmul>
 800d8b4:	4602      	mov	r2, r0
 800d8b6:	460b      	mov	r3, r1
 800d8b8:	4650      	mov	r0, sl
 800d8ba:	4621      	mov	r1, r4
 800d8bc:	f7f2 fc56 	bl	800016c <__adddf3>
 800d8c0:	4682      	mov	sl, r0
 800d8c2:	460c      	mov	r4, r1
 800d8c4:	4650      	mov	r0, sl
 800d8c6:	4621      	mov	r1, r4
 800d8c8:	b006      	add	sp, #24
 800d8ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d8d4:	4b24      	ldr	r3, [pc, #144]	; (800d968 <__kernel_sin+0x168>)
 800d8d6:	f7f2 fdff 	bl	80004d8 <__aeabi_dmul>
 800d8da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d8de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d8e2:	4640      	mov	r0, r8
 800d8e4:	4649      	mov	r1, r9
 800d8e6:	f7f2 fdf7 	bl	80004d8 <__aeabi_dmul>
 800d8ea:	4602      	mov	r2, r0
 800d8ec:	460b      	mov	r3, r1
 800d8ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d8f2:	f7f2 fc39 	bl	8000168 <__aeabi_dsub>
 800d8f6:	4632      	mov	r2, r6
 800d8f8:	463b      	mov	r3, r7
 800d8fa:	f7f2 fded 	bl	80004d8 <__aeabi_dmul>
 800d8fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d902:	f7f2 fc31 	bl	8000168 <__aeabi_dsub>
 800d906:	a316      	add	r3, pc, #88	; (adr r3, 800d960 <__kernel_sin+0x160>)
 800d908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d90c:	4606      	mov	r6, r0
 800d90e:	460f      	mov	r7, r1
 800d910:	4640      	mov	r0, r8
 800d912:	4649      	mov	r1, r9
 800d914:	f7f2 fde0 	bl	80004d8 <__aeabi_dmul>
 800d918:	4602      	mov	r2, r0
 800d91a:	460b      	mov	r3, r1
 800d91c:	4630      	mov	r0, r6
 800d91e:	4639      	mov	r1, r7
 800d920:	f7f2 fc24 	bl	800016c <__adddf3>
 800d924:	4602      	mov	r2, r0
 800d926:	460b      	mov	r3, r1
 800d928:	4650      	mov	r0, sl
 800d92a:	4621      	mov	r1, r4
 800d92c:	f7f2 fc1c 	bl	8000168 <__aeabi_dsub>
 800d930:	e7c6      	b.n	800d8c0 <__kernel_sin+0xc0>
 800d932:	bf00      	nop
 800d934:	f3af 8000 	nop.w
 800d938:	5acfd57c 	.word	0x5acfd57c
 800d93c:	3de5d93a 	.word	0x3de5d93a
 800d940:	8a2b9ceb 	.word	0x8a2b9ceb
 800d944:	3e5ae5e6 	.word	0x3e5ae5e6
 800d948:	57b1fe7d 	.word	0x57b1fe7d
 800d94c:	3ec71de3 	.word	0x3ec71de3
 800d950:	19c161d5 	.word	0x19c161d5
 800d954:	3f2a01a0 	.word	0x3f2a01a0
 800d958:	1110f8a6 	.word	0x1110f8a6
 800d95c:	3f811111 	.word	0x3f811111
 800d960:	55555549 	.word	0x55555549
 800d964:	3fc55555 	.word	0x3fc55555
 800d968:	3fe00000 	.word	0x3fe00000

0800d96c <fabs>:
 800d96c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d970:	4770      	bx	lr
 800d972:	0000      	movs	r0, r0
 800d974:	0000      	movs	r0, r0
	...

0800d978 <floor>:
 800d978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d97c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800d980:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800d984:	2e13      	cmp	r6, #19
 800d986:	4602      	mov	r2, r0
 800d988:	460b      	mov	r3, r1
 800d98a:	4607      	mov	r7, r0
 800d98c:	460c      	mov	r4, r1
 800d98e:	4605      	mov	r5, r0
 800d990:	dc34      	bgt.n	800d9fc <floor+0x84>
 800d992:	2e00      	cmp	r6, #0
 800d994:	da15      	bge.n	800d9c2 <floor+0x4a>
 800d996:	a334      	add	r3, pc, #208	; (adr r3, 800da68 <floor+0xf0>)
 800d998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d99c:	f7f2 fbe6 	bl	800016c <__adddf3>
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	f7f3 f828 	bl	80009f8 <__aeabi_dcmpgt>
 800d9a8:	b140      	cbz	r0, 800d9bc <floor+0x44>
 800d9aa:	2c00      	cmp	r4, #0
 800d9ac:	da59      	bge.n	800da62 <floor+0xea>
 800d9ae:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d9b2:	ea57 0503 	orrs.w	r5, r7, r3
 800d9b6:	d001      	beq.n	800d9bc <floor+0x44>
 800d9b8:	2500      	movs	r5, #0
 800d9ba:	4c2d      	ldr	r4, [pc, #180]	; (800da70 <floor+0xf8>)
 800d9bc:	4623      	mov	r3, r4
 800d9be:	462f      	mov	r7, r5
 800d9c0:	e025      	b.n	800da0e <floor+0x96>
 800d9c2:	4a2c      	ldr	r2, [pc, #176]	; (800da74 <floor+0xfc>)
 800d9c4:	fa42 f806 	asr.w	r8, r2, r6
 800d9c8:	ea01 0208 	and.w	r2, r1, r8
 800d9cc:	4302      	orrs	r2, r0
 800d9ce:	d01e      	beq.n	800da0e <floor+0x96>
 800d9d0:	a325      	add	r3, pc, #148	; (adr r3, 800da68 <floor+0xf0>)
 800d9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d6:	f7f2 fbc9 	bl	800016c <__adddf3>
 800d9da:	2200      	movs	r2, #0
 800d9dc:	2300      	movs	r3, #0
 800d9de:	f7f3 f80b 	bl	80009f8 <__aeabi_dcmpgt>
 800d9e2:	2800      	cmp	r0, #0
 800d9e4:	d0ea      	beq.n	800d9bc <floor+0x44>
 800d9e6:	2c00      	cmp	r4, #0
 800d9e8:	bfbe      	ittt	lt
 800d9ea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d9ee:	fa43 f606 	asrlt.w	r6, r3, r6
 800d9f2:	19a4      	addlt	r4, r4, r6
 800d9f4:	2500      	movs	r5, #0
 800d9f6:	ea24 0408 	bic.w	r4, r4, r8
 800d9fa:	e7df      	b.n	800d9bc <floor+0x44>
 800d9fc:	2e33      	cmp	r6, #51	; 0x33
 800d9fe:	dd0a      	ble.n	800da16 <floor+0x9e>
 800da00:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800da04:	d103      	bne.n	800da0e <floor+0x96>
 800da06:	f7f2 fbb1 	bl	800016c <__adddf3>
 800da0a:	4607      	mov	r7, r0
 800da0c:	460b      	mov	r3, r1
 800da0e:	4638      	mov	r0, r7
 800da10:	4619      	mov	r1, r3
 800da12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da16:	f04f 32ff 	mov.w	r2, #4294967295
 800da1a:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800da1e:	fa22 f808 	lsr.w	r8, r2, r8
 800da22:	ea18 0f00 	tst.w	r8, r0
 800da26:	d0f2      	beq.n	800da0e <floor+0x96>
 800da28:	a30f      	add	r3, pc, #60	; (adr r3, 800da68 <floor+0xf0>)
 800da2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da2e:	f7f2 fb9d 	bl	800016c <__adddf3>
 800da32:	2200      	movs	r2, #0
 800da34:	2300      	movs	r3, #0
 800da36:	f7f2 ffdf 	bl	80009f8 <__aeabi_dcmpgt>
 800da3a:	2800      	cmp	r0, #0
 800da3c:	d0be      	beq.n	800d9bc <floor+0x44>
 800da3e:	2c00      	cmp	r4, #0
 800da40:	da02      	bge.n	800da48 <floor+0xd0>
 800da42:	2e14      	cmp	r6, #20
 800da44:	d103      	bne.n	800da4e <floor+0xd6>
 800da46:	3401      	adds	r4, #1
 800da48:	ea25 0508 	bic.w	r5, r5, r8
 800da4c:	e7b6      	b.n	800d9bc <floor+0x44>
 800da4e:	2301      	movs	r3, #1
 800da50:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800da54:	fa03 f606 	lsl.w	r6, r3, r6
 800da58:	4435      	add	r5, r6
 800da5a:	42bd      	cmp	r5, r7
 800da5c:	bf38      	it	cc
 800da5e:	18e4      	addcc	r4, r4, r3
 800da60:	e7f2      	b.n	800da48 <floor+0xd0>
 800da62:	2500      	movs	r5, #0
 800da64:	462c      	mov	r4, r5
 800da66:	e7a9      	b.n	800d9bc <floor+0x44>
 800da68:	8800759c 	.word	0x8800759c
 800da6c:	7e37e43c 	.word	0x7e37e43c
 800da70:	bff00000 	.word	0xbff00000
 800da74:	000fffff 	.word	0x000fffff

0800da78 <scalbn>:
 800da78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da7a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800da7e:	4604      	mov	r4, r0
 800da80:	460d      	mov	r5, r1
 800da82:	4617      	mov	r7, r2
 800da84:	460b      	mov	r3, r1
 800da86:	b996      	cbnz	r6, 800daae <scalbn+0x36>
 800da88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800da8c:	4303      	orrs	r3, r0
 800da8e:	d039      	beq.n	800db04 <scalbn+0x8c>
 800da90:	4b35      	ldr	r3, [pc, #212]	; (800db68 <scalbn+0xf0>)
 800da92:	2200      	movs	r2, #0
 800da94:	f7f2 fd20 	bl	80004d8 <__aeabi_dmul>
 800da98:	4b34      	ldr	r3, [pc, #208]	; (800db6c <scalbn+0xf4>)
 800da9a:	4604      	mov	r4, r0
 800da9c:	429f      	cmp	r7, r3
 800da9e:	460d      	mov	r5, r1
 800daa0:	da0f      	bge.n	800dac2 <scalbn+0x4a>
 800daa2:	a32d      	add	r3, pc, #180	; (adr r3, 800db58 <scalbn+0xe0>)
 800daa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa8:	f7f2 fd16 	bl	80004d8 <__aeabi_dmul>
 800daac:	e006      	b.n	800dabc <scalbn+0x44>
 800daae:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800dab2:	4296      	cmp	r6, r2
 800dab4:	d10a      	bne.n	800dacc <scalbn+0x54>
 800dab6:	4602      	mov	r2, r0
 800dab8:	f7f2 fb58 	bl	800016c <__adddf3>
 800dabc:	4604      	mov	r4, r0
 800dabe:	460d      	mov	r5, r1
 800dac0:	e020      	b.n	800db04 <scalbn+0x8c>
 800dac2:	460b      	mov	r3, r1
 800dac4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800dac8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800dacc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800dad0:	19b9      	adds	r1, r7, r6
 800dad2:	4291      	cmp	r1, r2
 800dad4:	dd0e      	ble.n	800daf4 <scalbn+0x7c>
 800dad6:	a322      	add	r3, pc, #136	; (adr r3, 800db60 <scalbn+0xe8>)
 800dad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dadc:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800dae0:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800dae4:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800dae8:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800daec:	4820      	ldr	r0, [pc, #128]	; (800db70 <scalbn+0xf8>)
 800daee:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800daf2:	e7d9      	b.n	800daa8 <scalbn+0x30>
 800daf4:	2900      	cmp	r1, #0
 800daf6:	dd08      	ble.n	800db0a <scalbn+0x92>
 800daf8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dafc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800db00:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800db04:	4620      	mov	r0, r4
 800db06:	4629      	mov	r1, r5
 800db08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db0a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800db0e:	da16      	bge.n	800db3e <scalbn+0xc6>
 800db10:	f24c 3350 	movw	r3, #50000	; 0xc350
 800db14:	429f      	cmp	r7, r3
 800db16:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800db1a:	dd08      	ble.n	800db2e <scalbn+0xb6>
 800db1c:	4c15      	ldr	r4, [pc, #84]	; (800db74 <scalbn+0xfc>)
 800db1e:	4814      	ldr	r0, [pc, #80]	; (800db70 <scalbn+0xf8>)
 800db20:	f363 74df 	bfi	r4, r3, #31, #1
 800db24:	a30e      	add	r3, pc, #56	; (adr r3, 800db60 <scalbn+0xe8>)
 800db26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db2a:	4621      	mov	r1, r4
 800db2c:	e7bc      	b.n	800daa8 <scalbn+0x30>
 800db2e:	4c12      	ldr	r4, [pc, #72]	; (800db78 <scalbn+0x100>)
 800db30:	4812      	ldr	r0, [pc, #72]	; (800db7c <scalbn+0x104>)
 800db32:	f363 74df 	bfi	r4, r3, #31, #1
 800db36:	a308      	add	r3, pc, #32	; (adr r3, 800db58 <scalbn+0xe0>)
 800db38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db3c:	e7f5      	b.n	800db2a <scalbn+0xb2>
 800db3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800db42:	3136      	adds	r1, #54	; 0x36
 800db44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800db48:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800db4c:	4620      	mov	r0, r4
 800db4e:	4629      	mov	r1, r5
 800db50:	2200      	movs	r2, #0
 800db52:	4b0b      	ldr	r3, [pc, #44]	; (800db80 <scalbn+0x108>)
 800db54:	e7a8      	b.n	800daa8 <scalbn+0x30>
 800db56:	bf00      	nop
 800db58:	c2f8f359 	.word	0xc2f8f359
 800db5c:	01a56e1f 	.word	0x01a56e1f
 800db60:	8800759c 	.word	0x8800759c
 800db64:	7e37e43c 	.word	0x7e37e43c
 800db68:	43500000 	.word	0x43500000
 800db6c:	ffff3cb0 	.word	0xffff3cb0
 800db70:	8800759c 	.word	0x8800759c
 800db74:	7e37e43c 	.word	0x7e37e43c
 800db78:	01a56e1f 	.word	0x01a56e1f
 800db7c:	c2f8f359 	.word	0xc2f8f359
 800db80:	3c900000 	.word	0x3c900000

0800db84 <__errno>:
 800db84:	4b01      	ldr	r3, [pc, #4]	; (800db8c <__errno+0x8>)
 800db86:	6818      	ldr	r0, [r3, #0]
 800db88:	4770      	bx	lr
 800db8a:	bf00      	nop
 800db8c:	20000184 	.word	0x20000184

0800db90 <__libc_init_array>:
 800db90:	b570      	push	{r4, r5, r6, lr}
 800db92:	2600      	movs	r6, #0
 800db94:	4d0c      	ldr	r5, [pc, #48]	; (800dbc8 <__libc_init_array+0x38>)
 800db96:	4c0d      	ldr	r4, [pc, #52]	; (800dbcc <__libc_init_array+0x3c>)
 800db98:	1b64      	subs	r4, r4, r5
 800db9a:	10a4      	asrs	r4, r4, #2
 800db9c:	42a6      	cmp	r6, r4
 800db9e:	d109      	bne.n	800dbb4 <__libc_init_array+0x24>
 800dba0:	f001 f85a 	bl	800ec58 <_init>
 800dba4:	2600      	movs	r6, #0
 800dba6:	4d0a      	ldr	r5, [pc, #40]	; (800dbd0 <__libc_init_array+0x40>)
 800dba8:	4c0a      	ldr	r4, [pc, #40]	; (800dbd4 <__libc_init_array+0x44>)
 800dbaa:	1b64      	subs	r4, r4, r5
 800dbac:	10a4      	asrs	r4, r4, #2
 800dbae:	42a6      	cmp	r6, r4
 800dbb0:	d105      	bne.n	800dbbe <__libc_init_array+0x2e>
 800dbb2:	bd70      	pop	{r4, r5, r6, pc}
 800dbb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbb8:	4798      	blx	r3
 800dbba:	3601      	adds	r6, #1
 800dbbc:	e7ee      	b.n	800db9c <__libc_init_array+0xc>
 800dbbe:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbc2:	4798      	blx	r3
 800dbc4:	3601      	adds	r6, #1
 800dbc6:	e7f2      	b.n	800dbae <__libc_init_array+0x1e>
 800dbc8:	0800f428 	.word	0x0800f428
 800dbcc:	0800f428 	.word	0x0800f428
 800dbd0:	0800f428 	.word	0x0800f428
 800dbd4:	0800f438 	.word	0x0800f438

0800dbd8 <memset>:
 800dbd8:	4603      	mov	r3, r0
 800dbda:	4402      	add	r2, r0
 800dbdc:	4293      	cmp	r3, r2
 800dbde:	d100      	bne.n	800dbe2 <memset+0xa>
 800dbe0:	4770      	bx	lr
 800dbe2:	f803 1b01 	strb.w	r1, [r3], #1
 800dbe6:	e7f9      	b.n	800dbdc <memset+0x4>

0800dbe8 <_puts_r>:
 800dbe8:	b570      	push	{r4, r5, r6, lr}
 800dbea:	460e      	mov	r6, r1
 800dbec:	4605      	mov	r5, r0
 800dbee:	b118      	cbz	r0, 800dbf8 <_puts_r+0x10>
 800dbf0:	6983      	ldr	r3, [r0, #24]
 800dbf2:	b90b      	cbnz	r3, 800dbf8 <_puts_r+0x10>
 800dbf4:	f000 fa68 	bl	800e0c8 <__sinit>
 800dbf8:	69ab      	ldr	r3, [r5, #24]
 800dbfa:	68ac      	ldr	r4, [r5, #8]
 800dbfc:	b913      	cbnz	r3, 800dc04 <_puts_r+0x1c>
 800dbfe:	4628      	mov	r0, r5
 800dc00:	f000 fa62 	bl	800e0c8 <__sinit>
 800dc04:	4b2c      	ldr	r3, [pc, #176]	; (800dcb8 <_puts_r+0xd0>)
 800dc06:	429c      	cmp	r4, r3
 800dc08:	d120      	bne.n	800dc4c <_puts_r+0x64>
 800dc0a:	686c      	ldr	r4, [r5, #4]
 800dc0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc0e:	07db      	lsls	r3, r3, #31
 800dc10:	d405      	bmi.n	800dc1e <_puts_r+0x36>
 800dc12:	89a3      	ldrh	r3, [r4, #12]
 800dc14:	0598      	lsls	r0, r3, #22
 800dc16:	d402      	bmi.n	800dc1e <_puts_r+0x36>
 800dc18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc1a:	f000 faf3 	bl	800e204 <__retarget_lock_acquire_recursive>
 800dc1e:	89a3      	ldrh	r3, [r4, #12]
 800dc20:	0719      	lsls	r1, r3, #28
 800dc22:	d51d      	bpl.n	800dc60 <_puts_r+0x78>
 800dc24:	6923      	ldr	r3, [r4, #16]
 800dc26:	b1db      	cbz	r3, 800dc60 <_puts_r+0x78>
 800dc28:	3e01      	subs	r6, #1
 800dc2a:	68a3      	ldr	r3, [r4, #8]
 800dc2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800dc30:	3b01      	subs	r3, #1
 800dc32:	60a3      	str	r3, [r4, #8]
 800dc34:	bb39      	cbnz	r1, 800dc86 <_puts_r+0x9e>
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	da38      	bge.n	800dcac <_puts_r+0xc4>
 800dc3a:	4622      	mov	r2, r4
 800dc3c:	210a      	movs	r1, #10
 800dc3e:	4628      	mov	r0, r5
 800dc40:	f000 f868 	bl	800dd14 <__swbuf_r>
 800dc44:	3001      	adds	r0, #1
 800dc46:	d011      	beq.n	800dc6c <_puts_r+0x84>
 800dc48:	250a      	movs	r5, #10
 800dc4a:	e011      	b.n	800dc70 <_puts_r+0x88>
 800dc4c:	4b1b      	ldr	r3, [pc, #108]	; (800dcbc <_puts_r+0xd4>)
 800dc4e:	429c      	cmp	r4, r3
 800dc50:	d101      	bne.n	800dc56 <_puts_r+0x6e>
 800dc52:	68ac      	ldr	r4, [r5, #8]
 800dc54:	e7da      	b.n	800dc0c <_puts_r+0x24>
 800dc56:	4b1a      	ldr	r3, [pc, #104]	; (800dcc0 <_puts_r+0xd8>)
 800dc58:	429c      	cmp	r4, r3
 800dc5a:	bf08      	it	eq
 800dc5c:	68ec      	ldreq	r4, [r5, #12]
 800dc5e:	e7d5      	b.n	800dc0c <_puts_r+0x24>
 800dc60:	4621      	mov	r1, r4
 800dc62:	4628      	mov	r0, r5
 800dc64:	f000 f8a8 	bl	800ddb8 <__swsetup_r>
 800dc68:	2800      	cmp	r0, #0
 800dc6a:	d0dd      	beq.n	800dc28 <_puts_r+0x40>
 800dc6c:	f04f 35ff 	mov.w	r5, #4294967295
 800dc70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc72:	07da      	lsls	r2, r3, #31
 800dc74:	d405      	bmi.n	800dc82 <_puts_r+0x9a>
 800dc76:	89a3      	ldrh	r3, [r4, #12]
 800dc78:	059b      	lsls	r3, r3, #22
 800dc7a:	d402      	bmi.n	800dc82 <_puts_r+0x9a>
 800dc7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc7e:	f000 fac2 	bl	800e206 <__retarget_lock_release_recursive>
 800dc82:	4628      	mov	r0, r5
 800dc84:	bd70      	pop	{r4, r5, r6, pc}
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	da04      	bge.n	800dc94 <_puts_r+0xac>
 800dc8a:	69a2      	ldr	r2, [r4, #24]
 800dc8c:	429a      	cmp	r2, r3
 800dc8e:	dc06      	bgt.n	800dc9e <_puts_r+0xb6>
 800dc90:	290a      	cmp	r1, #10
 800dc92:	d004      	beq.n	800dc9e <_puts_r+0xb6>
 800dc94:	6823      	ldr	r3, [r4, #0]
 800dc96:	1c5a      	adds	r2, r3, #1
 800dc98:	6022      	str	r2, [r4, #0]
 800dc9a:	7019      	strb	r1, [r3, #0]
 800dc9c:	e7c5      	b.n	800dc2a <_puts_r+0x42>
 800dc9e:	4622      	mov	r2, r4
 800dca0:	4628      	mov	r0, r5
 800dca2:	f000 f837 	bl	800dd14 <__swbuf_r>
 800dca6:	3001      	adds	r0, #1
 800dca8:	d1bf      	bne.n	800dc2a <_puts_r+0x42>
 800dcaa:	e7df      	b.n	800dc6c <_puts_r+0x84>
 800dcac:	250a      	movs	r5, #10
 800dcae:	6823      	ldr	r3, [r4, #0]
 800dcb0:	1c5a      	adds	r2, r3, #1
 800dcb2:	6022      	str	r2, [r4, #0]
 800dcb4:	701d      	strb	r5, [r3, #0]
 800dcb6:	e7db      	b.n	800dc70 <_puts_r+0x88>
 800dcb8:	0800f3b4 	.word	0x0800f3b4
 800dcbc:	0800f3d4 	.word	0x0800f3d4
 800dcc0:	0800f394 	.word	0x0800f394

0800dcc4 <puts>:
 800dcc4:	4b02      	ldr	r3, [pc, #8]	; (800dcd0 <puts+0xc>)
 800dcc6:	4601      	mov	r1, r0
 800dcc8:	6818      	ldr	r0, [r3, #0]
 800dcca:	f7ff bf8d 	b.w	800dbe8 <_puts_r>
 800dcce:	bf00      	nop
 800dcd0:	20000184 	.word	0x20000184

0800dcd4 <siprintf>:
 800dcd4:	b40e      	push	{r1, r2, r3}
 800dcd6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dcda:	b500      	push	{lr}
 800dcdc:	b09c      	sub	sp, #112	; 0x70
 800dcde:	ab1d      	add	r3, sp, #116	; 0x74
 800dce0:	9002      	str	r0, [sp, #8]
 800dce2:	9006      	str	r0, [sp, #24]
 800dce4:	9107      	str	r1, [sp, #28]
 800dce6:	9104      	str	r1, [sp, #16]
 800dce8:	4808      	ldr	r0, [pc, #32]	; (800dd0c <siprintf+0x38>)
 800dcea:	4909      	ldr	r1, [pc, #36]	; (800dd10 <siprintf+0x3c>)
 800dcec:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcf0:	9105      	str	r1, [sp, #20]
 800dcf2:	6800      	ldr	r0, [r0, #0]
 800dcf4:	a902      	add	r1, sp, #8
 800dcf6:	9301      	str	r3, [sp, #4]
 800dcf8:	f000 fbec 	bl	800e4d4 <_svfiprintf_r>
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	9b02      	ldr	r3, [sp, #8]
 800dd00:	701a      	strb	r2, [r3, #0]
 800dd02:	b01c      	add	sp, #112	; 0x70
 800dd04:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd08:	b003      	add	sp, #12
 800dd0a:	4770      	bx	lr
 800dd0c:	20000184 	.word	0x20000184
 800dd10:	ffff0208 	.word	0xffff0208

0800dd14 <__swbuf_r>:
 800dd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd16:	460e      	mov	r6, r1
 800dd18:	4614      	mov	r4, r2
 800dd1a:	4605      	mov	r5, r0
 800dd1c:	b118      	cbz	r0, 800dd26 <__swbuf_r+0x12>
 800dd1e:	6983      	ldr	r3, [r0, #24]
 800dd20:	b90b      	cbnz	r3, 800dd26 <__swbuf_r+0x12>
 800dd22:	f000 f9d1 	bl	800e0c8 <__sinit>
 800dd26:	4b21      	ldr	r3, [pc, #132]	; (800ddac <__swbuf_r+0x98>)
 800dd28:	429c      	cmp	r4, r3
 800dd2a:	d12b      	bne.n	800dd84 <__swbuf_r+0x70>
 800dd2c:	686c      	ldr	r4, [r5, #4]
 800dd2e:	69a3      	ldr	r3, [r4, #24]
 800dd30:	60a3      	str	r3, [r4, #8]
 800dd32:	89a3      	ldrh	r3, [r4, #12]
 800dd34:	071a      	lsls	r2, r3, #28
 800dd36:	d52f      	bpl.n	800dd98 <__swbuf_r+0x84>
 800dd38:	6923      	ldr	r3, [r4, #16]
 800dd3a:	b36b      	cbz	r3, 800dd98 <__swbuf_r+0x84>
 800dd3c:	6923      	ldr	r3, [r4, #16]
 800dd3e:	6820      	ldr	r0, [r4, #0]
 800dd40:	b2f6      	uxtb	r6, r6
 800dd42:	1ac0      	subs	r0, r0, r3
 800dd44:	6963      	ldr	r3, [r4, #20]
 800dd46:	4637      	mov	r7, r6
 800dd48:	4283      	cmp	r3, r0
 800dd4a:	dc04      	bgt.n	800dd56 <__swbuf_r+0x42>
 800dd4c:	4621      	mov	r1, r4
 800dd4e:	4628      	mov	r0, r5
 800dd50:	f000 f926 	bl	800dfa0 <_fflush_r>
 800dd54:	bb30      	cbnz	r0, 800dda4 <__swbuf_r+0x90>
 800dd56:	68a3      	ldr	r3, [r4, #8]
 800dd58:	3001      	adds	r0, #1
 800dd5a:	3b01      	subs	r3, #1
 800dd5c:	60a3      	str	r3, [r4, #8]
 800dd5e:	6823      	ldr	r3, [r4, #0]
 800dd60:	1c5a      	adds	r2, r3, #1
 800dd62:	6022      	str	r2, [r4, #0]
 800dd64:	701e      	strb	r6, [r3, #0]
 800dd66:	6963      	ldr	r3, [r4, #20]
 800dd68:	4283      	cmp	r3, r0
 800dd6a:	d004      	beq.n	800dd76 <__swbuf_r+0x62>
 800dd6c:	89a3      	ldrh	r3, [r4, #12]
 800dd6e:	07db      	lsls	r3, r3, #31
 800dd70:	d506      	bpl.n	800dd80 <__swbuf_r+0x6c>
 800dd72:	2e0a      	cmp	r6, #10
 800dd74:	d104      	bne.n	800dd80 <__swbuf_r+0x6c>
 800dd76:	4621      	mov	r1, r4
 800dd78:	4628      	mov	r0, r5
 800dd7a:	f000 f911 	bl	800dfa0 <_fflush_r>
 800dd7e:	b988      	cbnz	r0, 800dda4 <__swbuf_r+0x90>
 800dd80:	4638      	mov	r0, r7
 800dd82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd84:	4b0a      	ldr	r3, [pc, #40]	; (800ddb0 <__swbuf_r+0x9c>)
 800dd86:	429c      	cmp	r4, r3
 800dd88:	d101      	bne.n	800dd8e <__swbuf_r+0x7a>
 800dd8a:	68ac      	ldr	r4, [r5, #8]
 800dd8c:	e7cf      	b.n	800dd2e <__swbuf_r+0x1a>
 800dd8e:	4b09      	ldr	r3, [pc, #36]	; (800ddb4 <__swbuf_r+0xa0>)
 800dd90:	429c      	cmp	r4, r3
 800dd92:	bf08      	it	eq
 800dd94:	68ec      	ldreq	r4, [r5, #12]
 800dd96:	e7ca      	b.n	800dd2e <__swbuf_r+0x1a>
 800dd98:	4621      	mov	r1, r4
 800dd9a:	4628      	mov	r0, r5
 800dd9c:	f000 f80c 	bl	800ddb8 <__swsetup_r>
 800dda0:	2800      	cmp	r0, #0
 800dda2:	d0cb      	beq.n	800dd3c <__swbuf_r+0x28>
 800dda4:	f04f 37ff 	mov.w	r7, #4294967295
 800dda8:	e7ea      	b.n	800dd80 <__swbuf_r+0x6c>
 800ddaa:	bf00      	nop
 800ddac:	0800f3b4 	.word	0x0800f3b4
 800ddb0:	0800f3d4 	.word	0x0800f3d4
 800ddb4:	0800f394 	.word	0x0800f394

0800ddb8 <__swsetup_r>:
 800ddb8:	4b32      	ldr	r3, [pc, #200]	; (800de84 <__swsetup_r+0xcc>)
 800ddba:	b570      	push	{r4, r5, r6, lr}
 800ddbc:	681d      	ldr	r5, [r3, #0]
 800ddbe:	4606      	mov	r6, r0
 800ddc0:	460c      	mov	r4, r1
 800ddc2:	b125      	cbz	r5, 800ddce <__swsetup_r+0x16>
 800ddc4:	69ab      	ldr	r3, [r5, #24]
 800ddc6:	b913      	cbnz	r3, 800ddce <__swsetup_r+0x16>
 800ddc8:	4628      	mov	r0, r5
 800ddca:	f000 f97d 	bl	800e0c8 <__sinit>
 800ddce:	4b2e      	ldr	r3, [pc, #184]	; (800de88 <__swsetup_r+0xd0>)
 800ddd0:	429c      	cmp	r4, r3
 800ddd2:	d10f      	bne.n	800ddf4 <__swsetup_r+0x3c>
 800ddd4:	686c      	ldr	r4, [r5, #4]
 800ddd6:	89a3      	ldrh	r3, [r4, #12]
 800ddd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dddc:	0719      	lsls	r1, r3, #28
 800ddde:	d42c      	bmi.n	800de3a <__swsetup_r+0x82>
 800dde0:	06dd      	lsls	r5, r3, #27
 800dde2:	d411      	bmi.n	800de08 <__swsetup_r+0x50>
 800dde4:	2309      	movs	r3, #9
 800dde6:	6033      	str	r3, [r6, #0]
 800dde8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ddec:	f04f 30ff 	mov.w	r0, #4294967295
 800ddf0:	81a3      	strh	r3, [r4, #12]
 800ddf2:	e03e      	b.n	800de72 <__swsetup_r+0xba>
 800ddf4:	4b25      	ldr	r3, [pc, #148]	; (800de8c <__swsetup_r+0xd4>)
 800ddf6:	429c      	cmp	r4, r3
 800ddf8:	d101      	bne.n	800ddfe <__swsetup_r+0x46>
 800ddfa:	68ac      	ldr	r4, [r5, #8]
 800ddfc:	e7eb      	b.n	800ddd6 <__swsetup_r+0x1e>
 800ddfe:	4b24      	ldr	r3, [pc, #144]	; (800de90 <__swsetup_r+0xd8>)
 800de00:	429c      	cmp	r4, r3
 800de02:	bf08      	it	eq
 800de04:	68ec      	ldreq	r4, [r5, #12]
 800de06:	e7e6      	b.n	800ddd6 <__swsetup_r+0x1e>
 800de08:	0758      	lsls	r0, r3, #29
 800de0a:	d512      	bpl.n	800de32 <__swsetup_r+0x7a>
 800de0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de0e:	b141      	cbz	r1, 800de22 <__swsetup_r+0x6a>
 800de10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de14:	4299      	cmp	r1, r3
 800de16:	d002      	beq.n	800de1e <__swsetup_r+0x66>
 800de18:	4630      	mov	r0, r6
 800de1a:	f000 fa59 	bl	800e2d0 <_free_r>
 800de1e:	2300      	movs	r3, #0
 800de20:	6363      	str	r3, [r4, #52]	; 0x34
 800de22:	89a3      	ldrh	r3, [r4, #12]
 800de24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800de28:	81a3      	strh	r3, [r4, #12]
 800de2a:	2300      	movs	r3, #0
 800de2c:	6063      	str	r3, [r4, #4]
 800de2e:	6923      	ldr	r3, [r4, #16]
 800de30:	6023      	str	r3, [r4, #0]
 800de32:	89a3      	ldrh	r3, [r4, #12]
 800de34:	f043 0308 	orr.w	r3, r3, #8
 800de38:	81a3      	strh	r3, [r4, #12]
 800de3a:	6923      	ldr	r3, [r4, #16]
 800de3c:	b94b      	cbnz	r3, 800de52 <__swsetup_r+0x9a>
 800de3e:	89a3      	ldrh	r3, [r4, #12]
 800de40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800de44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de48:	d003      	beq.n	800de52 <__swsetup_r+0x9a>
 800de4a:	4621      	mov	r1, r4
 800de4c:	4630      	mov	r0, r6
 800de4e:	f000 f9ff 	bl	800e250 <__smakebuf_r>
 800de52:	89a0      	ldrh	r0, [r4, #12]
 800de54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de58:	f010 0301 	ands.w	r3, r0, #1
 800de5c:	d00a      	beq.n	800de74 <__swsetup_r+0xbc>
 800de5e:	2300      	movs	r3, #0
 800de60:	60a3      	str	r3, [r4, #8]
 800de62:	6963      	ldr	r3, [r4, #20]
 800de64:	425b      	negs	r3, r3
 800de66:	61a3      	str	r3, [r4, #24]
 800de68:	6923      	ldr	r3, [r4, #16]
 800de6a:	b943      	cbnz	r3, 800de7e <__swsetup_r+0xc6>
 800de6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800de70:	d1ba      	bne.n	800dde8 <__swsetup_r+0x30>
 800de72:	bd70      	pop	{r4, r5, r6, pc}
 800de74:	0781      	lsls	r1, r0, #30
 800de76:	bf58      	it	pl
 800de78:	6963      	ldrpl	r3, [r4, #20]
 800de7a:	60a3      	str	r3, [r4, #8]
 800de7c:	e7f4      	b.n	800de68 <__swsetup_r+0xb0>
 800de7e:	2000      	movs	r0, #0
 800de80:	e7f7      	b.n	800de72 <__swsetup_r+0xba>
 800de82:	bf00      	nop
 800de84:	20000184 	.word	0x20000184
 800de88:	0800f3b4 	.word	0x0800f3b4
 800de8c:	0800f3d4 	.word	0x0800f3d4
 800de90:	0800f394 	.word	0x0800f394

0800de94 <__sflush_r>:
 800de94:	898a      	ldrh	r2, [r1, #12]
 800de96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de9a:	4605      	mov	r5, r0
 800de9c:	0710      	lsls	r0, r2, #28
 800de9e:	460c      	mov	r4, r1
 800dea0:	d458      	bmi.n	800df54 <__sflush_r+0xc0>
 800dea2:	684b      	ldr	r3, [r1, #4]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	dc05      	bgt.n	800deb4 <__sflush_r+0x20>
 800dea8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800deaa:	2b00      	cmp	r3, #0
 800deac:	dc02      	bgt.n	800deb4 <__sflush_r+0x20>
 800deae:	2000      	movs	r0, #0
 800deb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800deb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800deb6:	2e00      	cmp	r6, #0
 800deb8:	d0f9      	beq.n	800deae <__sflush_r+0x1a>
 800deba:	2300      	movs	r3, #0
 800debc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dec0:	682f      	ldr	r7, [r5, #0]
 800dec2:	602b      	str	r3, [r5, #0]
 800dec4:	d032      	beq.n	800df2c <__sflush_r+0x98>
 800dec6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dec8:	89a3      	ldrh	r3, [r4, #12]
 800deca:	075a      	lsls	r2, r3, #29
 800decc:	d505      	bpl.n	800deda <__sflush_r+0x46>
 800dece:	6863      	ldr	r3, [r4, #4]
 800ded0:	1ac0      	subs	r0, r0, r3
 800ded2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ded4:	b10b      	cbz	r3, 800deda <__sflush_r+0x46>
 800ded6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ded8:	1ac0      	subs	r0, r0, r3
 800deda:	2300      	movs	r3, #0
 800dedc:	4602      	mov	r2, r0
 800dede:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dee0:	4628      	mov	r0, r5
 800dee2:	6a21      	ldr	r1, [r4, #32]
 800dee4:	47b0      	blx	r6
 800dee6:	1c43      	adds	r3, r0, #1
 800dee8:	89a3      	ldrh	r3, [r4, #12]
 800deea:	d106      	bne.n	800defa <__sflush_r+0x66>
 800deec:	6829      	ldr	r1, [r5, #0]
 800deee:	291d      	cmp	r1, #29
 800def0:	d82c      	bhi.n	800df4c <__sflush_r+0xb8>
 800def2:	4a2a      	ldr	r2, [pc, #168]	; (800df9c <__sflush_r+0x108>)
 800def4:	40ca      	lsrs	r2, r1
 800def6:	07d6      	lsls	r6, r2, #31
 800def8:	d528      	bpl.n	800df4c <__sflush_r+0xb8>
 800defa:	2200      	movs	r2, #0
 800defc:	6062      	str	r2, [r4, #4]
 800defe:	6922      	ldr	r2, [r4, #16]
 800df00:	04d9      	lsls	r1, r3, #19
 800df02:	6022      	str	r2, [r4, #0]
 800df04:	d504      	bpl.n	800df10 <__sflush_r+0x7c>
 800df06:	1c42      	adds	r2, r0, #1
 800df08:	d101      	bne.n	800df0e <__sflush_r+0x7a>
 800df0a:	682b      	ldr	r3, [r5, #0]
 800df0c:	b903      	cbnz	r3, 800df10 <__sflush_r+0x7c>
 800df0e:	6560      	str	r0, [r4, #84]	; 0x54
 800df10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df12:	602f      	str	r7, [r5, #0]
 800df14:	2900      	cmp	r1, #0
 800df16:	d0ca      	beq.n	800deae <__sflush_r+0x1a>
 800df18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df1c:	4299      	cmp	r1, r3
 800df1e:	d002      	beq.n	800df26 <__sflush_r+0x92>
 800df20:	4628      	mov	r0, r5
 800df22:	f000 f9d5 	bl	800e2d0 <_free_r>
 800df26:	2000      	movs	r0, #0
 800df28:	6360      	str	r0, [r4, #52]	; 0x34
 800df2a:	e7c1      	b.n	800deb0 <__sflush_r+0x1c>
 800df2c:	6a21      	ldr	r1, [r4, #32]
 800df2e:	2301      	movs	r3, #1
 800df30:	4628      	mov	r0, r5
 800df32:	47b0      	blx	r6
 800df34:	1c41      	adds	r1, r0, #1
 800df36:	d1c7      	bne.n	800dec8 <__sflush_r+0x34>
 800df38:	682b      	ldr	r3, [r5, #0]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d0c4      	beq.n	800dec8 <__sflush_r+0x34>
 800df3e:	2b1d      	cmp	r3, #29
 800df40:	d001      	beq.n	800df46 <__sflush_r+0xb2>
 800df42:	2b16      	cmp	r3, #22
 800df44:	d101      	bne.n	800df4a <__sflush_r+0xb6>
 800df46:	602f      	str	r7, [r5, #0]
 800df48:	e7b1      	b.n	800deae <__sflush_r+0x1a>
 800df4a:	89a3      	ldrh	r3, [r4, #12]
 800df4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df50:	81a3      	strh	r3, [r4, #12]
 800df52:	e7ad      	b.n	800deb0 <__sflush_r+0x1c>
 800df54:	690f      	ldr	r7, [r1, #16]
 800df56:	2f00      	cmp	r7, #0
 800df58:	d0a9      	beq.n	800deae <__sflush_r+0x1a>
 800df5a:	0793      	lsls	r3, r2, #30
 800df5c:	bf18      	it	ne
 800df5e:	2300      	movne	r3, #0
 800df60:	680e      	ldr	r6, [r1, #0]
 800df62:	bf08      	it	eq
 800df64:	694b      	ldreq	r3, [r1, #20]
 800df66:	eba6 0807 	sub.w	r8, r6, r7
 800df6a:	600f      	str	r7, [r1, #0]
 800df6c:	608b      	str	r3, [r1, #8]
 800df6e:	f1b8 0f00 	cmp.w	r8, #0
 800df72:	dd9c      	ble.n	800deae <__sflush_r+0x1a>
 800df74:	4643      	mov	r3, r8
 800df76:	463a      	mov	r2, r7
 800df78:	4628      	mov	r0, r5
 800df7a:	6a21      	ldr	r1, [r4, #32]
 800df7c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800df7e:	47b0      	blx	r6
 800df80:	2800      	cmp	r0, #0
 800df82:	dc06      	bgt.n	800df92 <__sflush_r+0xfe>
 800df84:	89a3      	ldrh	r3, [r4, #12]
 800df86:	f04f 30ff 	mov.w	r0, #4294967295
 800df8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df8e:	81a3      	strh	r3, [r4, #12]
 800df90:	e78e      	b.n	800deb0 <__sflush_r+0x1c>
 800df92:	4407      	add	r7, r0
 800df94:	eba8 0800 	sub.w	r8, r8, r0
 800df98:	e7e9      	b.n	800df6e <__sflush_r+0xda>
 800df9a:	bf00      	nop
 800df9c:	20400001 	.word	0x20400001

0800dfa0 <_fflush_r>:
 800dfa0:	b538      	push	{r3, r4, r5, lr}
 800dfa2:	690b      	ldr	r3, [r1, #16]
 800dfa4:	4605      	mov	r5, r0
 800dfa6:	460c      	mov	r4, r1
 800dfa8:	b913      	cbnz	r3, 800dfb0 <_fflush_r+0x10>
 800dfaa:	2500      	movs	r5, #0
 800dfac:	4628      	mov	r0, r5
 800dfae:	bd38      	pop	{r3, r4, r5, pc}
 800dfb0:	b118      	cbz	r0, 800dfba <_fflush_r+0x1a>
 800dfb2:	6983      	ldr	r3, [r0, #24]
 800dfb4:	b90b      	cbnz	r3, 800dfba <_fflush_r+0x1a>
 800dfb6:	f000 f887 	bl	800e0c8 <__sinit>
 800dfba:	4b14      	ldr	r3, [pc, #80]	; (800e00c <_fflush_r+0x6c>)
 800dfbc:	429c      	cmp	r4, r3
 800dfbe:	d11b      	bne.n	800dff8 <_fflush_r+0x58>
 800dfc0:	686c      	ldr	r4, [r5, #4]
 800dfc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d0ef      	beq.n	800dfaa <_fflush_r+0xa>
 800dfca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dfcc:	07d0      	lsls	r0, r2, #31
 800dfce:	d404      	bmi.n	800dfda <_fflush_r+0x3a>
 800dfd0:	0599      	lsls	r1, r3, #22
 800dfd2:	d402      	bmi.n	800dfda <_fflush_r+0x3a>
 800dfd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfd6:	f000 f915 	bl	800e204 <__retarget_lock_acquire_recursive>
 800dfda:	4628      	mov	r0, r5
 800dfdc:	4621      	mov	r1, r4
 800dfde:	f7ff ff59 	bl	800de94 <__sflush_r>
 800dfe2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dfe4:	4605      	mov	r5, r0
 800dfe6:	07da      	lsls	r2, r3, #31
 800dfe8:	d4e0      	bmi.n	800dfac <_fflush_r+0xc>
 800dfea:	89a3      	ldrh	r3, [r4, #12]
 800dfec:	059b      	lsls	r3, r3, #22
 800dfee:	d4dd      	bmi.n	800dfac <_fflush_r+0xc>
 800dff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dff2:	f000 f908 	bl	800e206 <__retarget_lock_release_recursive>
 800dff6:	e7d9      	b.n	800dfac <_fflush_r+0xc>
 800dff8:	4b05      	ldr	r3, [pc, #20]	; (800e010 <_fflush_r+0x70>)
 800dffa:	429c      	cmp	r4, r3
 800dffc:	d101      	bne.n	800e002 <_fflush_r+0x62>
 800dffe:	68ac      	ldr	r4, [r5, #8]
 800e000:	e7df      	b.n	800dfc2 <_fflush_r+0x22>
 800e002:	4b04      	ldr	r3, [pc, #16]	; (800e014 <_fflush_r+0x74>)
 800e004:	429c      	cmp	r4, r3
 800e006:	bf08      	it	eq
 800e008:	68ec      	ldreq	r4, [r5, #12]
 800e00a:	e7da      	b.n	800dfc2 <_fflush_r+0x22>
 800e00c:	0800f3b4 	.word	0x0800f3b4
 800e010:	0800f3d4 	.word	0x0800f3d4
 800e014:	0800f394 	.word	0x0800f394

0800e018 <std>:
 800e018:	2300      	movs	r3, #0
 800e01a:	b510      	push	{r4, lr}
 800e01c:	4604      	mov	r4, r0
 800e01e:	e9c0 3300 	strd	r3, r3, [r0]
 800e022:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e026:	6083      	str	r3, [r0, #8]
 800e028:	8181      	strh	r1, [r0, #12]
 800e02a:	6643      	str	r3, [r0, #100]	; 0x64
 800e02c:	81c2      	strh	r2, [r0, #14]
 800e02e:	6183      	str	r3, [r0, #24]
 800e030:	4619      	mov	r1, r3
 800e032:	2208      	movs	r2, #8
 800e034:	305c      	adds	r0, #92	; 0x5c
 800e036:	f7ff fdcf 	bl	800dbd8 <memset>
 800e03a:	4b05      	ldr	r3, [pc, #20]	; (800e050 <std+0x38>)
 800e03c:	6224      	str	r4, [r4, #32]
 800e03e:	6263      	str	r3, [r4, #36]	; 0x24
 800e040:	4b04      	ldr	r3, [pc, #16]	; (800e054 <std+0x3c>)
 800e042:	62a3      	str	r3, [r4, #40]	; 0x28
 800e044:	4b04      	ldr	r3, [pc, #16]	; (800e058 <std+0x40>)
 800e046:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e048:	4b04      	ldr	r3, [pc, #16]	; (800e05c <std+0x44>)
 800e04a:	6323      	str	r3, [r4, #48]	; 0x30
 800e04c:	bd10      	pop	{r4, pc}
 800e04e:	bf00      	nop
 800e050:	0800ea21 	.word	0x0800ea21
 800e054:	0800ea43 	.word	0x0800ea43
 800e058:	0800ea7b 	.word	0x0800ea7b
 800e05c:	0800ea9f 	.word	0x0800ea9f

0800e060 <_cleanup_r>:
 800e060:	4901      	ldr	r1, [pc, #4]	; (800e068 <_cleanup_r+0x8>)
 800e062:	f000 b8af 	b.w	800e1c4 <_fwalk_reent>
 800e066:	bf00      	nop
 800e068:	0800dfa1 	.word	0x0800dfa1

0800e06c <__sfmoreglue>:
 800e06c:	b570      	push	{r4, r5, r6, lr}
 800e06e:	2568      	movs	r5, #104	; 0x68
 800e070:	1e4a      	subs	r2, r1, #1
 800e072:	4355      	muls	r5, r2
 800e074:	460e      	mov	r6, r1
 800e076:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e07a:	f000 f975 	bl	800e368 <_malloc_r>
 800e07e:	4604      	mov	r4, r0
 800e080:	b140      	cbz	r0, 800e094 <__sfmoreglue+0x28>
 800e082:	2100      	movs	r1, #0
 800e084:	e9c0 1600 	strd	r1, r6, [r0]
 800e088:	300c      	adds	r0, #12
 800e08a:	60a0      	str	r0, [r4, #8]
 800e08c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e090:	f7ff fda2 	bl	800dbd8 <memset>
 800e094:	4620      	mov	r0, r4
 800e096:	bd70      	pop	{r4, r5, r6, pc}

0800e098 <__sfp_lock_acquire>:
 800e098:	4801      	ldr	r0, [pc, #4]	; (800e0a0 <__sfp_lock_acquire+0x8>)
 800e09a:	f000 b8b3 	b.w	800e204 <__retarget_lock_acquire_recursive>
 800e09e:	bf00      	nop
 800e0a0:	200017c8 	.word	0x200017c8

0800e0a4 <__sfp_lock_release>:
 800e0a4:	4801      	ldr	r0, [pc, #4]	; (800e0ac <__sfp_lock_release+0x8>)
 800e0a6:	f000 b8ae 	b.w	800e206 <__retarget_lock_release_recursive>
 800e0aa:	bf00      	nop
 800e0ac:	200017c8 	.word	0x200017c8

0800e0b0 <__sinit_lock_acquire>:
 800e0b0:	4801      	ldr	r0, [pc, #4]	; (800e0b8 <__sinit_lock_acquire+0x8>)
 800e0b2:	f000 b8a7 	b.w	800e204 <__retarget_lock_acquire_recursive>
 800e0b6:	bf00      	nop
 800e0b8:	200017c3 	.word	0x200017c3

0800e0bc <__sinit_lock_release>:
 800e0bc:	4801      	ldr	r0, [pc, #4]	; (800e0c4 <__sinit_lock_release+0x8>)
 800e0be:	f000 b8a2 	b.w	800e206 <__retarget_lock_release_recursive>
 800e0c2:	bf00      	nop
 800e0c4:	200017c3 	.word	0x200017c3

0800e0c8 <__sinit>:
 800e0c8:	b510      	push	{r4, lr}
 800e0ca:	4604      	mov	r4, r0
 800e0cc:	f7ff fff0 	bl	800e0b0 <__sinit_lock_acquire>
 800e0d0:	69a3      	ldr	r3, [r4, #24]
 800e0d2:	b11b      	cbz	r3, 800e0dc <__sinit+0x14>
 800e0d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0d8:	f7ff bff0 	b.w	800e0bc <__sinit_lock_release>
 800e0dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e0e0:	6523      	str	r3, [r4, #80]	; 0x50
 800e0e2:	4b13      	ldr	r3, [pc, #76]	; (800e130 <__sinit+0x68>)
 800e0e4:	4a13      	ldr	r2, [pc, #76]	; (800e134 <__sinit+0x6c>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	62a2      	str	r2, [r4, #40]	; 0x28
 800e0ea:	42a3      	cmp	r3, r4
 800e0ec:	bf08      	it	eq
 800e0ee:	2301      	moveq	r3, #1
 800e0f0:	4620      	mov	r0, r4
 800e0f2:	bf08      	it	eq
 800e0f4:	61a3      	streq	r3, [r4, #24]
 800e0f6:	f000 f81f 	bl	800e138 <__sfp>
 800e0fa:	6060      	str	r0, [r4, #4]
 800e0fc:	4620      	mov	r0, r4
 800e0fe:	f000 f81b 	bl	800e138 <__sfp>
 800e102:	60a0      	str	r0, [r4, #8]
 800e104:	4620      	mov	r0, r4
 800e106:	f000 f817 	bl	800e138 <__sfp>
 800e10a:	2200      	movs	r2, #0
 800e10c:	2104      	movs	r1, #4
 800e10e:	60e0      	str	r0, [r4, #12]
 800e110:	6860      	ldr	r0, [r4, #4]
 800e112:	f7ff ff81 	bl	800e018 <std>
 800e116:	2201      	movs	r2, #1
 800e118:	2109      	movs	r1, #9
 800e11a:	68a0      	ldr	r0, [r4, #8]
 800e11c:	f7ff ff7c 	bl	800e018 <std>
 800e120:	2202      	movs	r2, #2
 800e122:	2112      	movs	r1, #18
 800e124:	68e0      	ldr	r0, [r4, #12]
 800e126:	f7ff ff77 	bl	800e018 <std>
 800e12a:	2301      	movs	r3, #1
 800e12c:	61a3      	str	r3, [r4, #24]
 800e12e:	e7d1      	b.n	800e0d4 <__sinit+0xc>
 800e130:	0800f390 	.word	0x0800f390
 800e134:	0800e061 	.word	0x0800e061

0800e138 <__sfp>:
 800e138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e13a:	4607      	mov	r7, r0
 800e13c:	f7ff ffac 	bl	800e098 <__sfp_lock_acquire>
 800e140:	4b1e      	ldr	r3, [pc, #120]	; (800e1bc <__sfp+0x84>)
 800e142:	681e      	ldr	r6, [r3, #0]
 800e144:	69b3      	ldr	r3, [r6, #24]
 800e146:	b913      	cbnz	r3, 800e14e <__sfp+0x16>
 800e148:	4630      	mov	r0, r6
 800e14a:	f7ff ffbd 	bl	800e0c8 <__sinit>
 800e14e:	3648      	adds	r6, #72	; 0x48
 800e150:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e154:	3b01      	subs	r3, #1
 800e156:	d503      	bpl.n	800e160 <__sfp+0x28>
 800e158:	6833      	ldr	r3, [r6, #0]
 800e15a:	b30b      	cbz	r3, 800e1a0 <__sfp+0x68>
 800e15c:	6836      	ldr	r6, [r6, #0]
 800e15e:	e7f7      	b.n	800e150 <__sfp+0x18>
 800e160:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e164:	b9d5      	cbnz	r5, 800e19c <__sfp+0x64>
 800e166:	4b16      	ldr	r3, [pc, #88]	; (800e1c0 <__sfp+0x88>)
 800e168:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e16c:	60e3      	str	r3, [r4, #12]
 800e16e:	6665      	str	r5, [r4, #100]	; 0x64
 800e170:	f000 f847 	bl	800e202 <__retarget_lock_init_recursive>
 800e174:	f7ff ff96 	bl	800e0a4 <__sfp_lock_release>
 800e178:	2208      	movs	r2, #8
 800e17a:	4629      	mov	r1, r5
 800e17c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e180:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e184:	6025      	str	r5, [r4, #0]
 800e186:	61a5      	str	r5, [r4, #24]
 800e188:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e18c:	f7ff fd24 	bl	800dbd8 <memset>
 800e190:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e194:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e198:	4620      	mov	r0, r4
 800e19a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e19c:	3468      	adds	r4, #104	; 0x68
 800e19e:	e7d9      	b.n	800e154 <__sfp+0x1c>
 800e1a0:	2104      	movs	r1, #4
 800e1a2:	4638      	mov	r0, r7
 800e1a4:	f7ff ff62 	bl	800e06c <__sfmoreglue>
 800e1a8:	4604      	mov	r4, r0
 800e1aa:	6030      	str	r0, [r6, #0]
 800e1ac:	2800      	cmp	r0, #0
 800e1ae:	d1d5      	bne.n	800e15c <__sfp+0x24>
 800e1b0:	f7ff ff78 	bl	800e0a4 <__sfp_lock_release>
 800e1b4:	230c      	movs	r3, #12
 800e1b6:	603b      	str	r3, [r7, #0]
 800e1b8:	e7ee      	b.n	800e198 <__sfp+0x60>
 800e1ba:	bf00      	nop
 800e1bc:	0800f390 	.word	0x0800f390
 800e1c0:	ffff0001 	.word	0xffff0001

0800e1c4 <_fwalk_reent>:
 800e1c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1c8:	4606      	mov	r6, r0
 800e1ca:	4688      	mov	r8, r1
 800e1cc:	2700      	movs	r7, #0
 800e1ce:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e1d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e1d6:	f1b9 0901 	subs.w	r9, r9, #1
 800e1da:	d505      	bpl.n	800e1e8 <_fwalk_reent+0x24>
 800e1dc:	6824      	ldr	r4, [r4, #0]
 800e1de:	2c00      	cmp	r4, #0
 800e1e0:	d1f7      	bne.n	800e1d2 <_fwalk_reent+0xe>
 800e1e2:	4638      	mov	r0, r7
 800e1e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1e8:	89ab      	ldrh	r3, [r5, #12]
 800e1ea:	2b01      	cmp	r3, #1
 800e1ec:	d907      	bls.n	800e1fe <_fwalk_reent+0x3a>
 800e1ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e1f2:	3301      	adds	r3, #1
 800e1f4:	d003      	beq.n	800e1fe <_fwalk_reent+0x3a>
 800e1f6:	4629      	mov	r1, r5
 800e1f8:	4630      	mov	r0, r6
 800e1fa:	47c0      	blx	r8
 800e1fc:	4307      	orrs	r7, r0
 800e1fe:	3568      	adds	r5, #104	; 0x68
 800e200:	e7e9      	b.n	800e1d6 <_fwalk_reent+0x12>

0800e202 <__retarget_lock_init_recursive>:
 800e202:	4770      	bx	lr

0800e204 <__retarget_lock_acquire_recursive>:
 800e204:	4770      	bx	lr

0800e206 <__retarget_lock_release_recursive>:
 800e206:	4770      	bx	lr

0800e208 <__swhatbuf_r>:
 800e208:	b570      	push	{r4, r5, r6, lr}
 800e20a:	460e      	mov	r6, r1
 800e20c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e210:	4614      	mov	r4, r2
 800e212:	2900      	cmp	r1, #0
 800e214:	461d      	mov	r5, r3
 800e216:	b096      	sub	sp, #88	; 0x58
 800e218:	da07      	bge.n	800e22a <__swhatbuf_r+0x22>
 800e21a:	2300      	movs	r3, #0
 800e21c:	602b      	str	r3, [r5, #0]
 800e21e:	89b3      	ldrh	r3, [r6, #12]
 800e220:	061a      	lsls	r2, r3, #24
 800e222:	d410      	bmi.n	800e246 <__swhatbuf_r+0x3e>
 800e224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e228:	e00e      	b.n	800e248 <__swhatbuf_r+0x40>
 800e22a:	466a      	mov	r2, sp
 800e22c:	f000 fc5e 	bl	800eaec <_fstat_r>
 800e230:	2800      	cmp	r0, #0
 800e232:	dbf2      	blt.n	800e21a <__swhatbuf_r+0x12>
 800e234:	9a01      	ldr	r2, [sp, #4]
 800e236:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e23a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e23e:	425a      	negs	r2, r3
 800e240:	415a      	adcs	r2, r3
 800e242:	602a      	str	r2, [r5, #0]
 800e244:	e7ee      	b.n	800e224 <__swhatbuf_r+0x1c>
 800e246:	2340      	movs	r3, #64	; 0x40
 800e248:	2000      	movs	r0, #0
 800e24a:	6023      	str	r3, [r4, #0]
 800e24c:	b016      	add	sp, #88	; 0x58
 800e24e:	bd70      	pop	{r4, r5, r6, pc}

0800e250 <__smakebuf_r>:
 800e250:	898b      	ldrh	r3, [r1, #12]
 800e252:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e254:	079d      	lsls	r5, r3, #30
 800e256:	4606      	mov	r6, r0
 800e258:	460c      	mov	r4, r1
 800e25a:	d507      	bpl.n	800e26c <__smakebuf_r+0x1c>
 800e25c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e260:	6023      	str	r3, [r4, #0]
 800e262:	6123      	str	r3, [r4, #16]
 800e264:	2301      	movs	r3, #1
 800e266:	6163      	str	r3, [r4, #20]
 800e268:	b002      	add	sp, #8
 800e26a:	bd70      	pop	{r4, r5, r6, pc}
 800e26c:	466a      	mov	r2, sp
 800e26e:	ab01      	add	r3, sp, #4
 800e270:	f7ff ffca 	bl	800e208 <__swhatbuf_r>
 800e274:	9900      	ldr	r1, [sp, #0]
 800e276:	4605      	mov	r5, r0
 800e278:	4630      	mov	r0, r6
 800e27a:	f000 f875 	bl	800e368 <_malloc_r>
 800e27e:	b948      	cbnz	r0, 800e294 <__smakebuf_r+0x44>
 800e280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e284:	059a      	lsls	r2, r3, #22
 800e286:	d4ef      	bmi.n	800e268 <__smakebuf_r+0x18>
 800e288:	f023 0303 	bic.w	r3, r3, #3
 800e28c:	f043 0302 	orr.w	r3, r3, #2
 800e290:	81a3      	strh	r3, [r4, #12]
 800e292:	e7e3      	b.n	800e25c <__smakebuf_r+0xc>
 800e294:	4b0d      	ldr	r3, [pc, #52]	; (800e2cc <__smakebuf_r+0x7c>)
 800e296:	62b3      	str	r3, [r6, #40]	; 0x28
 800e298:	89a3      	ldrh	r3, [r4, #12]
 800e29a:	6020      	str	r0, [r4, #0]
 800e29c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2a0:	81a3      	strh	r3, [r4, #12]
 800e2a2:	9b00      	ldr	r3, [sp, #0]
 800e2a4:	6120      	str	r0, [r4, #16]
 800e2a6:	6163      	str	r3, [r4, #20]
 800e2a8:	9b01      	ldr	r3, [sp, #4]
 800e2aa:	b15b      	cbz	r3, 800e2c4 <__smakebuf_r+0x74>
 800e2ac:	4630      	mov	r0, r6
 800e2ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2b2:	f000 fc2d 	bl	800eb10 <_isatty_r>
 800e2b6:	b128      	cbz	r0, 800e2c4 <__smakebuf_r+0x74>
 800e2b8:	89a3      	ldrh	r3, [r4, #12]
 800e2ba:	f023 0303 	bic.w	r3, r3, #3
 800e2be:	f043 0301 	orr.w	r3, r3, #1
 800e2c2:	81a3      	strh	r3, [r4, #12]
 800e2c4:	89a0      	ldrh	r0, [r4, #12]
 800e2c6:	4305      	orrs	r5, r0
 800e2c8:	81a5      	strh	r5, [r4, #12]
 800e2ca:	e7cd      	b.n	800e268 <__smakebuf_r+0x18>
 800e2cc:	0800e061 	.word	0x0800e061

0800e2d0 <_free_r>:
 800e2d0:	b538      	push	{r3, r4, r5, lr}
 800e2d2:	4605      	mov	r5, r0
 800e2d4:	2900      	cmp	r1, #0
 800e2d6:	d043      	beq.n	800e360 <_free_r+0x90>
 800e2d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2dc:	1f0c      	subs	r4, r1, #4
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	bfb8      	it	lt
 800e2e2:	18e4      	addlt	r4, r4, r3
 800e2e4:	f000 fc6c 	bl	800ebc0 <__malloc_lock>
 800e2e8:	4a1e      	ldr	r2, [pc, #120]	; (800e364 <_free_r+0x94>)
 800e2ea:	6813      	ldr	r3, [r2, #0]
 800e2ec:	4610      	mov	r0, r2
 800e2ee:	b933      	cbnz	r3, 800e2fe <_free_r+0x2e>
 800e2f0:	6063      	str	r3, [r4, #4]
 800e2f2:	6014      	str	r4, [r2, #0]
 800e2f4:	4628      	mov	r0, r5
 800e2f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2fa:	f000 bc67 	b.w	800ebcc <__malloc_unlock>
 800e2fe:	42a3      	cmp	r3, r4
 800e300:	d90a      	bls.n	800e318 <_free_r+0x48>
 800e302:	6821      	ldr	r1, [r4, #0]
 800e304:	1862      	adds	r2, r4, r1
 800e306:	4293      	cmp	r3, r2
 800e308:	bf01      	itttt	eq
 800e30a:	681a      	ldreq	r2, [r3, #0]
 800e30c:	685b      	ldreq	r3, [r3, #4]
 800e30e:	1852      	addeq	r2, r2, r1
 800e310:	6022      	streq	r2, [r4, #0]
 800e312:	6063      	str	r3, [r4, #4]
 800e314:	6004      	str	r4, [r0, #0]
 800e316:	e7ed      	b.n	800e2f4 <_free_r+0x24>
 800e318:	461a      	mov	r2, r3
 800e31a:	685b      	ldr	r3, [r3, #4]
 800e31c:	b10b      	cbz	r3, 800e322 <_free_r+0x52>
 800e31e:	42a3      	cmp	r3, r4
 800e320:	d9fa      	bls.n	800e318 <_free_r+0x48>
 800e322:	6811      	ldr	r1, [r2, #0]
 800e324:	1850      	adds	r0, r2, r1
 800e326:	42a0      	cmp	r0, r4
 800e328:	d10b      	bne.n	800e342 <_free_r+0x72>
 800e32a:	6820      	ldr	r0, [r4, #0]
 800e32c:	4401      	add	r1, r0
 800e32e:	1850      	adds	r0, r2, r1
 800e330:	4283      	cmp	r3, r0
 800e332:	6011      	str	r1, [r2, #0]
 800e334:	d1de      	bne.n	800e2f4 <_free_r+0x24>
 800e336:	6818      	ldr	r0, [r3, #0]
 800e338:	685b      	ldr	r3, [r3, #4]
 800e33a:	4401      	add	r1, r0
 800e33c:	6011      	str	r1, [r2, #0]
 800e33e:	6053      	str	r3, [r2, #4]
 800e340:	e7d8      	b.n	800e2f4 <_free_r+0x24>
 800e342:	d902      	bls.n	800e34a <_free_r+0x7a>
 800e344:	230c      	movs	r3, #12
 800e346:	602b      	str	r3, [r5, #0]
 800e348:	e7d4      	b.n	800e2f4 <_free_r+0x24>
 800e34a:	6820      	ldr	r0, [r4, #0]
 800e34c:	1821      	adds	r1, r4, r0
 800e34e:	428b      	cmp	r3, r1
 800e350:	bf01      	itttt	eq
 800e352:	6819      	ldreq	r1, [r3, #0]
 800e354:	685b      	ldreq	r3, [r3, #4]
 800e356:	1809      	addeq	r1, r1, r0
 800e358:	6021      	streq	r1, [r4, #0]
 800e35a:	6063      	str	r3, [r4, #4]
 800e35c:	6054      	str	r4, [r2, #4]
 800e35e:	e7c9      	b.n	800e2f4 <_free_r+0x24>
 800e360:	bd38      	pop	{r3, r4, r5, pc}
 800e362:	bf00      	nop
 800e364:	20000848 	.word	0x20000848

0800e368 <_malloc_r>:
 800e368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e36a:	1ccd      	adds	r5, r1, #3
 800e36c:	f025 0503 	bic.w	r5, r5, #3
 800e370:	3508      	adds	r5, #8
 800e372:	2d0c      	cmp	r5, #12
 800e374:	bf38      	it	cc
 800e376:	250c      	movcc	r5, #12
 800e378:	2d00      	cmp	r5, #0
 800e37a:	4606      	mov	r6, r0
 800e37c:	db01      	blt.n	800e382 <_malloc_r+0x1a>
 800e37e:	42a9      	cmp	r1, r5
 800e380:	d903      	bls.n	800e38a <_malloc_r+0x22>
 800e382:	230c      	movs	r3, #12
 800e384:	6033      	str	r3, [r6, #0]
 800e386:	2000      	movs	r0, #0
 800e388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e38a:	f000 fc19 	bl	800ebc0 <__malloc_lock>
 800e38e:	4921      	ldr	r1, [pc, #132]	; (800e414 <_malloc_r+0xac>)
 800e390:	680a      	ldr	r2, [r1, #0]
 800e392:	4614      	mov	r4, r2
 800e394:	b99c      	cbnz	r4, 800e3be <_malloc_r+0x56>
 800e396:	4f20      	ldr	r7, [pc, #128]	; (800e418 <_malloc_r+0xb0>)
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	b923      	cbnz	r3, 800e3a6 <_malloc_r+0x3e>
 800e39c:	4621      	mov	r1, r4
 800e39e:	4630      	mov	r0, r6
 800e3a0:	f000 fb2e 	bl	800ea00 <_sbrk_r>
 800e3a4:	6038      	str	r0, [r7, #0]
 800e3a6:	4629      	mov	r1, r5
 800e3a8:	4630      	mov	r0, r6
 800e3aa:	f000 fb29 	bl	800ea00 <_sbrk_r>
 800e3ae:	1c43      	adds	r3, r0, #1
 800e3b0:	d123      	bne.n	800e3fa <_malloc_r+0x92>
 800e3b2:	230c      	movs	r3, #12
 800e3b4:	4630      	mov	r0, r6
 800e3b6:	6033      	str	r3, [r6, #0]
 800e3b8:	f000 fc08 	bl	800ebcc <__malloc_unlock>
 800e3bc:	e7e3      	b.n	800e386 <_malloc_r+0x1e>
 800e3be:	6823      	ldr	r3, [r4, #0]
 800e3c0:	1b5b      	subs	r3, r3, r5
 800e3c2:	d417      	bmi.n	800e3f4 <_malloc_r+0x8c>
 800e3c4:	2b0b      	cmp	r3, #11
 800e3c6:	d903      	bls.n	800e3d0 <_malloc_r+0x68>
 800e3c8:	6023      	str	r3, [r4, #0]
 800e3ca:	441c      	add	r4, r3
 800e3cc:	6025      	str	r5, [r4, #0]
 800e3ce:	e004      	b.n	800e3da <_malloc_r+0x72>
 800e3d0:	6863      	ldr	r3, [r4, #4]
 800e3d2:	42a2      	cmp	r2, r4
 800e3d4:	bf0c      	ite	eq
 800e3d6:	600b      	streq	r3, [r1, #0]
 800e3d8:	6053      	strne	r3, [r2, #4]
 800e3da:	4630      	mov	r0, r6
 800e3dc:	f000 fbf6 	bl	800ebcc <__malloc_unlock>
 800e3e0:	f104 000b 	add.w	r0, r4, #11
 800e3e4:	1d23      	adds	r3, r4, #4
 800e3e6:	f020 0007 	bic.w	r0, r0, #7
 800e3ea:	1ac2      	subs	r2, r0, r3
 800e3ec:	d0cc      	beq.n	800e388 <_malloc_r+0x20>
 800e3ee:	1a1b      	subs	r3, r3, r0
 800e3f0:	50a3      	str	r3, [r4, r2]
 800e3f2:	e7c9      	b.n	800e388 <_malloc_r+0x20>
 800e3f4:	4622      	mov	r2, r4
 800e3f6:	6864      	ldr	r4, [r4, #4]
 800e3f8:	e7cc      	b.n	800e394 <_malloc_r+0x2c>
 800e3fa:	1cc4      	adds	r4, r0, #3
 800e3fc:	f024 0403 	bic.w	r4, r4, #3
 800e400:	42a0      	cmp	r0, r4
 800e402:	d0e3      	beq.n	800e3cc <_malloc_r+0x64>
 800e404:	1a21      	subs	r1, r4, r0
 800e406:	4630      	mov	r0, r6
 800e408:	f000 fafa 	bl	800ea00 <_sbrk_r>
 800e40c:	3001      	adds	r0, #1
 800e40e:	d1dd      	bne.n	800e3cc <_malloc_r+0x64>
 800e410:	e7cf      	b.n	800e3b2 <_malloc_r+0x4a>
 800e412:	bf00      	nop
 800e414:	20000848 	.word	0x20000848
 800e418:	2000084c 	.word	0x2000084c

0800e41c <__ssputs_r>:
 800e41c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e420:	688e      	ldr	r6, [r1, #8]
 800e422:	4682      	mov	sl, r0
 800e424:	429e      	cmp	r6, r3
 800e426:	460c      	mov	r4, r1
 800e428:	4690      	mov	r8, r2
 800e42a:	461f      	mov	r7, r3
 800e42c:	d838      	bhi.n	800e4a0 <__ssputs_r+0x84>
 800e42e:	898a      	ldrh	r2, [r1, #12]
 800e430:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e434:	d032      	beq.n	800e49c <__ssputs_r+0x80>
 800e436:	6825      	ldr	r5, [r4, #0]
 800e438:	6909      	ldr	r1, [r1, #16]
 800e43a:	3301      	adds	r3, #1
 800e43c:	eba5 0901 	sub.w	r9, r5, r1
 800e440:	6965      	ldr	r5, [r4, #20]
 800e442:	444b      	add	r3, r9
 800e444:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e448:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e44c:	106d      	asrs	r5, r5, #1
 800e44e:	429d      	cmp	r5, r3
 800e450:	bf38      	it	cc
 800e452:	461d      	movcc	r5, r3
 800e454:	0553      	lsls	r3, r2, #21
 800e456:	d531      	bpl.n	800e4bc <__ssputs_r+0xa0>
 800e458:	4629      	mov	r1, r5
 800e45a:	f7ff ff85 	bl	800e368 <_malloc_r>
 800e45e:	4606      	mov	r6, r0
 800e460:	b950      	cbnz	r0, 800e478 <__ssputs_r+0x5c>
 800e462:	230c      	movs	r3, #12
 800e464:	f04f 30ff 	mov.w	r0, #4294967295
 800e468:	f8ca 3000 	str.w	r3, [sl]
 800e46c:	89a3      	ldrh	r3, [r4, #12]
 800e46e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e472:	81a3      	strh	r3, [r4, #12]
 800e474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e478:	464a      	mov	r2, r9
 800e47a:	6921      	ldr	r1, [r4, #16]
 800e47c:	f000 fb78 	bl	800eb70 <memcpy>
 800e480:	89a3      	ldrh	r3, [r4, #12]
 800e482:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e48a:	81a3      	strh	r3, [r4, #12]
 800e48c:	6126      	str	r6, [r4, #16]
 800e48e:	444e      	add	r6, r9
 800e490:	6026      	str	r6, [r4, #0]
 800e492:	463e      	mov	r6, r7
 800e494:	6165      	str	r5, [r4, #20]
 800e496:	eba5 0509 	sub.w	r5, r5, r9
 800e49a:	60a5      	str	r5, [r4, #8]
 800e49c:	42be      	cmp	r6, r7
 800e49e:	d900      	bls.n	800e4a2 <__ssputs_r+0x86>
 800e4a0:	463e      	mov	r6, r7
 800e4a2:	4632      	mov	r2, r6
 800e4a4:	4641      	mov	r1, r8
 800e4a6:	6820      	ldr	r0, [r4, #0]
 800e4a8:	f000 fb70 	bl	800eb8c <memmove>
 800e4ac:	68a3      	ldr	r3, [r4, #8]
 800e4ae:	6822      	ldr	r2, [r4, #0]
 800e4b0:	1b9b      	subs	r3, r3, r6
 800e4b2:	4432      	add	r2, r6
 800e4b4:	2000      	movs	r0, #0
 800e4b6:	60a3      	str	r3, [r4, #8]
 800e4b8:	6022      	str	r2, [r4, #0]
 800e4ba:	e7db      	b.n	800e474 <__ssputs_r+0x58>
 800e4bc:	462a      	mov	r2, r5
 800e4be:	f000 fb8b 	bl	800ebd8 <_realloc_r>
 800e4c2:	4606      	mov	r6, r0
 800e4c4:	2800      	cmp	r0, #0
 800e4c6:	d1e1      	bne.n	800e48c <__ssputs_r+0x70>
 800e4c8:	4650      	mov	r0, sl
 800e4ca:	6921      	ldr	r1, [r4, #16]
 800e4cc:	f7ff ff00 	bl	800e2d0 <_free_r>
 800e4d0:	e7c7      	b.n	800e462 <__ssputs_r+0x46>
	...

0800e4d4 <_svfiprintf_r>:
 800e4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4d8:	4698      	mov	r8, r3
 800e4da:	898b      	ldrh	r3, [r1, #12]
 800e4dc:	4607      	mov	r7, r0
 800e4de:	061b      	lsls	r3, r3, #24
 800e4e0:	460d      	mov	r5, r1
 800e4e2:	4614      	mov	r4, r2
 800e4e4:	b09d      	sub	sp, #116	; 0x74
 800e4e6:	d50e      	bpl.n	800e506 <_svfiprintf_r+0x32>
 800e4e8:	690b      	ldr	r3, [r1, #16]
 800e4ea:	b963      	cbnz	r3, 800e506 <_svfiprintf_r+0x32>
 800e4ec:	2140      	movs	r1, #64	; 0x40
 800e4ee:	f7ff ff3b 	bl	800e368 <_malloc_r>
 800e4f2:	6028      	str	r0, [r5, #0]
 800e4f4:	6128      	str	r0, [r5, #16]
 800e4f6:	b920      	cbnz	r0, 800e502 <_svfiprintf_r+0x2e>
 800e4f8:	230c      	movs	r3, #12
 800e4fa:	603b      	str	r3, [r7, #0]
 800e4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e500:	e0d1      	b.n	800e6a6 <_svfiprintf_r+0x1d2>
 800e502:	2340      	movs	r3, #64	; 0x40
 800e504:	616b      	str	r3, [r5, #20]
 800e506:	2300      	movs	r3, #0
 800e508:	9309      	str	r3, [sp, #36]	; 0x24
 800e50a:	2320      	movs	r3, #32
 800e50c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e510:	2330      	movs	r3, #48	; 0x30
 800e512:	f04f 0901 	mov.w	r9, #1
 800e516:	f8cd 800c 	str.w	r8, [sp, #12]
 800e51a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e6c0 <_svfiprintf_r+0x1ec>
 800e51e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e522:	4623      	mov	r3, r4
 800e524:	469a      	mov	sl, r3
 800e526:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e52a:	b10a      	cbz	r2, 800e530 <_svfiprintf_r+0x5c>
 800e52c:	2a25      	cmp	r2, #37	; 0x25
 800e52e:	d1f9      	bne.n	800e524 <_svfiprintf_r+0x50>
 800e530:	ebba 0b04 	subs.w	fp, sl, r4
 800e534:	d00b      	beq.n	800e54e <_svfiprintf_r+0x7a>
 800e536:	465b      	mov	r3, fp
 800e538:	4622      	mov	r2, r4
 800e53a:	4629      	mov	r1, r5
 800e53c:	4638      	mov	r0, r7
 800e53e:	f7ff ff6d 	bl	800e41c <__ssputs_r>
 800e542:	3001      	adds	r0, #1
 800e544:	f000 80aa 	beq.w	800e69c <_svfiprintf_r+0x1c8>
 800e548:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e54a:	445a      	add	r2, fp
 800e54c:	9209      	str	r2, [sp, #36]	; 0x24
 800e54e:	f89a 3000 	ldrb.w	r3, [sl]
 800e552:	2b00      	cmp	r3, #0
 800e554:	f000 80a2 	beq.w	800e69c <_svfiprintf_r+0x1c8>
 800e558:	2300      	movs	r3, #0
 800e55a:	f04f 32ff 	mov.w	r2, #4294967295
 800e55e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e562:	f10a 0a01 	add.w	sl, sl, #1
 800e566:	9304      	str	r3, [sp, #16]
 800e568:	9307      	str	r3, [sp, #28]
 800e56a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e56e:	931a      	str	r3, [sp, #104]	; 0x68
 800e570:	4654      	mov	r4, sl
 800e572:	2205      	movs	r2, #5
 800e574:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e578:	4851      	ldr	r0, [pc, #324]	; (800e6c0 <_svfiprintf_r+0x1ec>)
 800e57a:	f000 faeb 	bl	800eb54 <memchr>
 800e57e:	9a04      	ldr	r2, [sp, #16]
 800e580:	b9d8      	cbnz	r0, 800e5ba <_svfiprintf_r+0xe6>
 800e582:	06d0      	lsls	r0, r2, #27
 800e584:	bf44      	itt	mi
 800e586:	2320      	movmi	r3, #32
 800e588:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e58c:	0711      	lsls	r1, r2, #28
 800e58e:	bf44      	itt	mi
 800e590:	232b      	movmi	r3, #43	; 0x2b
 800e592:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e596:	f89a 3000 	ldrb.w	r3, [sl]
 800e59a:	2b2a      	cmp	r3, #42	; 0x2a
 800e59c:	d015      	beq.n	800e5ca <_svfiprintf_r+0xf6>
 800e59e:	4654      	mov	r4, sl
 800e5a0:	2000      	movs	r0, #0
 800e5a2:	f04f 0c0a 	mov.w	ip, #10
 800e5a6:	9a07      	ldr	r2, [sp, #28]
 800e5a8:	4621      	mov	r1, r4
 800e5aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e5ae:	3b30      	subs	r3, #48	; 0x30
 800e5b0:	2b09      	cmp	r3, #9
 800e5b2:	d94e      	bls.n	800e652 <_svfiprintf_r+0x17e>
 800e5b4:	b1b0      	cbz	r0, 800e5e4 <_svfiprintf_r+0x110>
 800e5b6:	9207      	str	r2, [sp, #28]
 800e5b8:	e014      	b.n	800e5e4 <_svfiprintf_r+0x110>
 800e5ba:	eba0 0308 	sub.w	r3, r0, r8
 800e5be:	fa09 f303 	lsl.w	r3, r9, r3
 800e5c2:	4313      	orrs	r3, r2
 800e5c4:	46a2      	mov	sl, r4
 800e5c6:	9304      	str	r3, [sp, #16]
 800e5c8:	e7d2      	b.n	800e570 <_svfiprintf_r+0x9c>
 800e5ca:	9b03      	ldr	r3, [sp, #12]
 800e5cc:	1d19      	adds	r1, r3, #4
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	9103      	str	r1, [sp, #12]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	bfbb      	ittet	lt
 800e5d6:	425b      	neglt	r3, r3
 800e5d8:	f042 0202 	orrlt.w	r2, r2, #2
 800e5dc:	9307      	strge	r3, [sp, #28]
 800e5de:	9307      	strlt	r3, [sp, #28]
 800e5e0:	bfb8      	it	lt
 800e5e2:	9204      	strlt	r2, [sp, #16]
 800e5e4:	7823      	ldrb	r3, [r4, #0]
 800e5e6:	2b2e      	cmp	r3, #46	; 0x2e
 800e5e8:	d10c      	bne.n	800e604 <_svfiprintf_r+0x130>
 800e5ea:	7863      	ldrb	r3, [r4, #1]
 800e5ec:	2b2a      	cmp	r3, #42	; 0x2a
 800e5ee:	d135      	bne.n	800e65c <_svfiprintf_r+0x188>
 800e5f0:	9b03      	ldr	r3, [sp, #12]
 800e5f2:	3402      	adds	r4, #2
 800e5f4:	1d1a      	adds	r2, r3, #4
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	9203      	str	r2, [sp, #12]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	bfb8      	it	lt
 800e5fe:	f04f 33ff 	movlt.w	r3, #4294967295
 800e602:	9305      	str	r3, [sp, #20]
 800e604:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e6d0 <_svfiprintf_r+0x1fc>
 800e608:	2203      	movs	r2, #3
 800e60a:	4650      	mov	r0, sl
 800e60c:	7821      	ldrb	r1, [r4, #0]
 800e60e:	f000 faa1 	bl	800eb54 <memchr>
 800e612:	b140      	cbz	r0, 800e626 <_svfiprintf_r+0x152>
 800e614:	2340      	movs	r3, #64	; 0x40
 800e616:	eba0 000a 	sub.w	r0, r0, sl
 800e61a:	fa03 f000 	lsl.w	r0, r3, r0
 800e61e:	9b04      	ldr	r3, [sp, #16]
 800e620:	3401      	adds	r4, #1
 800e622:	4303      	orrs	r3, r0
 800e624:	9304      	str	r3, [sp, #16]
 800e626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e62a:	2206      	movs	r2, #6
 800e62c:	4825      	ldr	r0, [pc, #148]	; (800e6c4 <_svfiprintf_r+0x1f0>)
 800e62e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e632:	f000 fa8f 	bl	800eb54 <memchr>
 800e636:	2800      	cmp	r0, #0
 800e638:	d038      	beq.n	800e6ac <_svfiprintf_r+0x1d8>
 800e63a:	4b23      	ldr	r3, [pc, #140]	; (800e6c8 <_svfiprintf_r+0x1f4>)
 800e63c:	bb1b      	cbnz	r3, 800e686 <_svfiprintf_r+0x1b2>
 800e63e:	9b03      	ldr	r3, [sp, #12]
 800e640:	3307      	adds	r3, #7
 800e642:	f023 0307 	bic.w	r3, r3, #7
 800e646:	3308      	adds	r3, #8
 800e648:	9303      	str	r3, [sp, #12]
 800e64a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e64c:	4433      	add	r3, r6
 800e64e:	9309      	str	r3, [sp, #36]	; 0x24
 800e650:	e767      	b.n	800e522 <_svfiprintf_r+0x4e>
 800e652:	460c      	mov	r4, r1
 800e654:	2001      	movs	r0, #1
 800e656:	fb0c 3202 	mla	r2, ip, r2, r3
 800e65a:	e7a5      	b.n	800e5a8 <_svfiprintf_r+0xd4>
 800e65c:	2300      	movs	r3, #0
 800e65e:	f04f 0c0a 	mov.w	ip, #10
 800e662:	4619      	mov	r1, r3
 800e664:	3401      	adds	r4, #1
 800e666:	9305      	str	r3, [sp, #20]
 800e668:	4620      	mov	r0, r4
 800e66a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e66e:	3a30      	subs	r2, #48	; 0x30
 800e670:	2a09      	cmp	r2, #9
 800e672:	d903      	bls.n	800e67c <_svfiprintf_r+0x1a8>
 800e674:	2b00      	cmp	r3, #0
 800e676:	d0c5      	beq.n	800e604 <_svfiprintf_r+0x130>
 800e678:	9105      	str	r1, [sp, #20]
 800e67a:	e7c3      	b.n	800e604 <_svfiprintf_r+0x130>
 800e67c:	4604      	mov	r4, r0
 800e67e:	2301      	movs	r3, #1
 800e680:	fb0c 2101 	mla	r1, ip, r1, r2
 800e684:	e7f0      	b.n	800e668 <_svfiprintf_r+0x194>
 800e686:	ab03      	add	r3, sp, #12
 800e688:	9300      	str	r3, [sp, #0]
 800e68a:	462a      	mov	r2, r5
 800e68c:	4638      	mov	r0, r7
 800e68e:	4b0f      	ldr	r3, [pc, #60]	; (800e6cc <_svfiprintf_r+0x1f8>)
 800e690:	a904      	add	r1, sp, #16
 800e692:	f3af 8000 	nop.w
 800e696:	1c42      	adds	r2, r0, #1
 800e698:	4606      	mov	r6, r0
 800e69a:	d1d6      	bne.n	800e64a <_svfiprintf_r+0x176>
 800e69c:	89ab      	ldrh	r3, [r5, #12]
 800e69e:	065b      	lsls	r3, r3, #25
 800e6a0:	f53f af2c 	bmi.w	800e4fc <_svfiprintf_r+0x28>
 800e6a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e6a6:	b01d      	add	sp, #116	; 0x74
 800e6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6ac:	ab03      	add	r3, sp, #12
 800e6ae:	9300      	str	r3, [sp, #0]
 800e6b0:	462a      	mov	r2, r5
 800e6b2:	4638      	mov	r0, r7
 800e6b4:	4b05      	ldr	r3, [pc, #20]	; (800e6cc <_svfiprintf_r+0x1f8>)
 800e6b6:	a904      	add	r1, sp, #16
 800e6b8:	f000 f87c 	bl	800e7b4 <_printf_i>
 800e6bc:	e7eb      	b.n	800e696 <_svfiprintf_r+0x1c2>
 800e6be:	bf00      	nop
 800e6c0:	0800f3f4 	.word	0x0800f3f4
 800e6c4:	0800f3fe 	.word	0x0800f3fe
 800e6c8:	00000000 	.word	0x00000000
 800e6cc:	0800e41d 	.word	0x0800e41d
 800e6d0:	0800f3fa 	.word	0x0800f3fa

0800e6d4 <_printf_common>:
 800e6d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6d8:	4616      	mov	r6, r2
 800e6da:	4699      	mov	r9, r3
 800e6dc:	688a      	ldr	r2, [r1, #8]
 800e6de:	690b      	ldr	r3, [r1, #16]
 800e6e0:	4607      	mov	r7, r0
 800e6e2:	4293      	cmp	r3, r2
 800e6e4:	bfb8      	it	lt
 800e6e6:	4613      	movlt	r3, r2
 800e6e8:	6033      	str	r3, [r6, #0]
 800e6ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e6ee:	460c      	mov	r4, r1
 800e6f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e6f4:	b10a      	cbz	r2, 800e6fa <_printf_common+0x26>
 800e6f6:	3301      	adds	r3, #1
 800e6f8:	6033      	str	r3, [r6, #0]
 800e6fa:	6823      	ldr	r3, [r4, #0]
 800e6fc:	0699      	lsls	r1, r3, #26
 800e6fe:	bf42      	ittt	mi
 800e700:	6833      	ldrmi	r3, [r6, #0]
 800e702:	3302      	addmi	r3, #2
 800e704:	6033      	strmi	r3, [r6, #0]
 800e706:	6825      	ldr	r5, [r4, #0]
 800e708:	f015 0506 	ands.w	r5, r5, #6
 800e70c:	d106      	bne.n	800e71c <_printf_common+0x48>
 800e70e:	f104 0a19 	add.w	sl, r4, #25
 800e712:	68e3      	ldr	r3, [r4, #12]
 800e714:	6832      	ldr	r2, [r6, #0]
 800e716:	1a9b      	subs	r3, r3, r2
 800e718:	42ab      	cmp	r3, r5
 800e71a:	dc28      	bgt.n	800e76e <_printf_common+0x9a>
 800e71c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e720:	1e13      	subs	r3, r2, #0
 800e722:	6822      	ldr	r2, [r4, #0]
 800e724:	bf18      	it	ne
 800e726:	2301      	movne	r3, #1
 800e728:	0692      	lsls	r2, r2, #26
 800e72a:	d42d      	bmi.n	800e788 <_printf_common+0xb4>
 800e72c:	4649      	mov	r1, r9
 800e72e:	4638      	mov	r0, r7
 800e730:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e734:	47c0      	blx	r8
 800e736:	3001      	adds	r0, #1
 800e738:	d020      	beq.n	800e77c <_printf_common+0xa8>
 800e73a:	6823      	ldr	r3, [r4, #0]
 800e73c:	68e5      	ldr	r5, [r4, #12]
 800e73e:	f003 0306 	and.w	r3, r3, #6
 800e742:	2b04      	cmp	r3, #4
 800e744:	bf18      	it	ne
 800e746:	2500      	movne	r5, #0
 800e748:	6832      	ldr	r2, [r6, #0]
 800e74a:	f04f 0600 	mov.w	r6, #0
 800e74e:	68a3      	ldr	r3, [r4, #8]
 800e750:	bf08      	it	eq
 800e752:	1aad      	subeq	r5, r5, r2
 800e754:	6922      	ldr	r2, [r4, #16]
 800e756:	bf08      	it	eq
 800e758:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e75c:	4293      	cmp	r3, r2
 800e75e:	bfc4      	itt	gt
 800e760:	1a9b      	subgt	r3, r3, r2
 800e762:	18ed      	addgt	r5, r5, r3
 800e764:	341a      	adds	r4, #26
 800e766:	42b5      	cmp	r5, r6
 800e768:	d11a      	bne.n	800e7a0 <_printf_common+0xcc>
 800e76a:	2000      	movs	r0, #0
 800e76c:	e008      	b.n	800e780 <_printf_common+0xac>
 800e76e:	2301      	movs	r3, #1
 800e770:	4652      	mov	r2, sl
 800e772:	4649      	mov	r1, r9
 800e774:	4638      	mov	r0, r7
 800e776:	47c0      	blx	r8
 800e778:	3001      	adds	r0, #1
 800e77a:	d103      	bne.n	800e784 <_printf_common+0xb0>
 800e77c:	f04f 30ff 	mov.w	r0, #4294967295
 800e780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e784:	3501      	adds	r5, #1
 800e786:	e7c4      	b.n	800e712 <_printf_common+0x3e>
 800e788:	2030      	movs	r0, #48	; 0x30
 800e78a:	18e1      	adds	r1, r4, r3
 800e78c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e790:	1c5a      	adds	r2, r3, #1
 800e792:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e796:	4422      	add	r2, r4
 800e798:	3302      	adds	r3, #2
 800e79a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e79e:	e7c5      	b.n	800e72c <_printf_common+0x58>
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	4622      	mov	r2, r4
 800e7a4:	4649      	mov	r1, r9
 800e7a6:	4638      	mov	r0, r7
 800e7a8:	47c0      	blx	r8
 800e7aa:	3001      	adds	r0, #1
 800e7ac:	d0e6      	beq.n	800e77c <_printf_common+0xa8>
 800e7ae:	3601      	adds	r6, #1
 800e7b0:	e7d9      	b.n	800e766 <_printf_common+0x92>
	...

0800e7b4 <_printf_i>:
 800e7b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e7b8:	460c      	mov	r4, r1
 800e7ba:	7e27      	ldrb	r7, [r4, #24]
 800e7bc:	4691      	mov	r9, r2
 800e7be:	2f78      	cmp	r7, #120	; 0x78
 800e7c0:	4680      	mov	r8, r0
 800e7c2:	469a      	mov	sl, r3
 800e7c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e7c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e7ca:	d807      	bhi.n	800e7dc <_printf_i+0x28>
 800e7cc:	2f62      	cmp	r7, #98	; 0x62
 800e7ce:	d80a      	bhi.n	800e7e6 <_printf_i+0x32>
 800e7d0:	2f00      	cmp	r7, #0
 800e7d2:	f000 80d9 	beq.w	800e988 <_printf_i+0x1d4>
 800e7d6:	2f58      	cmp	r7, #88	; 0x58
 800e7d8:	f000 80a4 	beq.w	800e924 <_printf_i+0x170>
 800e7dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e7e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e7e4:	e03a      	b.n	800e85c <_printf_i+0xa8>
 800e7e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e7ea:	2b15      	cmp	r3, #21
 800e7ec:	d8f6      	bhi.n	800e7dc <_printf_i+0x28>
 800e7ee:	a001      	add	r0, pc, #4	; (adr r0, 800e7f4 <_printf_i+0x40>)
 800e7f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e7f4:	0800e84d 	.word	0x0800e84d
 800e7f8:	0800e861 	.word	0x0800e861
 800e7fc:	0800e7dd 	.word	0x0800e7dd
 800e800:	0800e7dd 	.word	0x0800e7dd
 800e804:	0800e7dd 	.word	0x0800e7dd
 800e808:	0800e7dd 	.word	0x0800e7dd
 800e80c:	0800e861 	.word	0x0800e861
 800e810:	0800e7dd 	.word	0x0800e7dd
 800e814:	0800e7dd 	.word	0x0800e7dd
 800e818:	0800e7dd 	.word	0x0800e7dd
 800e81c:	0800e7dd 	.word	0x0800e7dd
 800e820:	0800e96f 	.word	0x0800e96f
 800e824:	0800e891 	.word	0x0800e891
 800e828:	0800e951 	.word	0x0800e951
 800e82c:	0800e7dd 	.word	0x0800e7dd
 800e830:	0800e7dd 	.word	0x0800e7dd
 800e834:	0800e991 	.word	0x0800e991
 800e838:	0800e7dd 	.word	0x0800e7dd
 800e83c:	0800e891 	.word	0x0800e891
 800e840:	0800e7dd 	.word	0x0800e7dd
 800e844:	0800e7dd 	.word	0x0800e7dd
 800e848:	0800e959 	.word	0x0800e959
 800e84c:	680b      	ldr	r3, [r1, #0]
 800e84e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e852:	1d1a      	adds	r2, r3, #4
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	600a      	str	r2, [r1, #0]
 800e858:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e85c:	2301      	movs	r3, #1
 800e85e:	e0a4      	b.n	800e9aa <_printf_i+0x1f6>
 800e860:	6825      	ldr	r5, [r4, #0]
 800e862:	6808      	ldr	r0, [r1, #0]
 800e864:	062e      	lsls	r6, r5, #24
 800e866:	f100 0304 	add.w	r3, r0, #4
 800e86a:	d50a      	bpl.n	800e882 <_printf_i+0xce>
 800e86c:	6805      	ldr	r5, [r0, #0]
 800e86e:	600b      	str	r3, [r1, #0]
 800e870:	2d00      	cmp	r5, #0
 800e872:	da03      	bge.n	800e87c <_printf_i+0xc8>
 800e874:	232d      	movs	r3, #45	; 0x2d
 800e876:	426d      	negs	r5, r5
 800e878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e87c:	230a      	movs	r3, #10
 800e87e:	485e      	ldr	r0, [pc, #376]	; (800e9f8 <_printf_i+0x244>)
 800e880:	e019      	b.n	800e8b6 <_printf_i+0x102>
 800e882:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e886:	6805      	ldr	r5, [r0, #0]
 800e888:	600b      	str	r3, [r1, #0]
 800e88a:	bf18      	it	ne
 800e88c:	b22d      	sxthne	r5, r5
 800e88e:	e7ef      	b.n	800e870 <_printf_i+0xbc>
 800e890:	680b      	ldr	r3, [r1, #0]
 800e892:	6825      	ldr	r5, [r4, #0]
 800e894:	1d18      	adds	r0, r3, #4
 800e896:	6008      	str	r0, [r1, #0]
 800e898:	0628      	lsls	r0, r5, #24
 800e89a:	d501      	bpl.n	800e8a0 <_printf_i+0xec>
 800e89c:	681d      	ldr	r5, [r3, #0]
 800e89e:	e002      	b.n	800e8a6 <_printf_i+0xf2>
 800e8a0:	0669      	lsls	r1, r5, #25
 800e8a2:	d5fb      	bpl.n	800e89c <_printf_i+0xe8>
 800e8a4:	881d      	ldrh	r5, [r3, #0]
 800e8a6:	2f6f      	cmp	r7, #111	; 0x6f
 800e8a8:	bf0c      	ite	eq
 800e8aa:	2308      	moveq	r3, #8
 800e8ac:	230a      	movne	r3, #10
 800e8ae:	4852      	ldr	r0, [pc, #328]	; (800e9f8 <_printf_i+0x244>)
 800e8b0:	2100      	movs	r1, #0
 800e8b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e8b6:	6866      	ldr	r6, [r4, #4]
 800e8b8:	2e00      	cmp	r6, #0
 800e8ba:	bfa8      	it	ge
 800e8bc:	6821      	ldrge	r1, [r4, #0]
 800e8be:	60a6      	str	r6, [r4, #8]
 800e8c0:	bfa4      	itt	ge
 800e8c2:	f021 0104 	bicge.w	r1, r1, #4
 800e8c6:	6021      	strge	r1, [r4, #0]
 800e8c8:	b90d      	cbnz	r5, 800e8ce <_printf_i+0x11a>
 800e8ca:	2e00      	cmp	r6, #0
 800e8cc:	d04d      	beq.n	800e96a <_printf_i+0x1b6>
 800e8ce:	4616      	mov	r6, r2
 800e8d0:	fbb5 f1f3 	udiv	r1, r5, r3
 800e8d4:	fb03 5711 	mls	r7, r3, r1, r5
 800e8d8:	5dc7      	ldrb	r7, [r0, r7]
 800e8da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e8de:	462f      	mov	r7, r5
 800e8e0:	42bb      	cmp	r3, r7
 800e8e2:	460d      	mov	r5, r1
 800e8e4:	d9f4      	bls.n	800e8d0 <_printf_i+0x11c>
 800e8e6:	2b08      	cmp	r3, #8
 800e8e8:	d10b      	bne.n	800e902 <_printf_i+0x14e>
 800e8ea:	6823      	ldr	r3, [r4, #0]
 800e8ec:	07df      	lsls	r7, r3, #31
 800e8ee:	d508      	bpl.n	800e902 <_printf_i+0x14e>
 800e8f0:	6923      	ldr	r3, [r4, #16]
 800e8f2:	6861      	ldr	r1, [r4, #4]
 800e8f4:	4299      	cmp	r1, r3
 800e8f6:	bfde      	ittt	le
 800e8f8:	2330      	movle	r3, #48	; 0x30
 800e8fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e8fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e902:	1b92      	subs	r2, r2, r6
 800e904:	6122      	str	r2, [r4, #16]
 800e906:	464b      	mov	r3, r9
 800e908:	4621      	mov	r1, r4
 800e90a:	4640      	mov	r0, r8
 800e90c:	f8cd a000 	str.w	sl, [sp]
 800e910:	aa03      	add	r2, sp, #12
 800e912:	f7ff fedf 	bl	800e6d4 <_printf_common>
 800e916:	3001      	adds	r0, #1
 800e918:	d14c      	bne.n	800e9b4 <_printf_i+0x200>
 800e91a:	f04f 30ff 	mov.w	r0, #4294967295
 800e91e:	b004      	add	sp, #16
 800e920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e924:	4834      	ldr	r0, [pc, #208]	; (800e9f8 <_printf_i+0x244>)
 800e926:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e92a:	680e      	ldr	r6, [r1, #0]
 800e92c:	6823      	ldr	r3, [r4, #0]
 800e92e:	f856 5b04 	ldr.w	r5, [r6], #4
 800e932:	061f      	lsls	r7, r3, #24
 800e934:	600e      	str	r6, [r1, #0]
 800e936:	d514      	bpl.n	800e962 <_printf_i+0x1ae>
 800e938:	07d9      	lsls	r1, r3, #31
 800e93a:	bf44      	itt	mi
 800e93c:	f043 0320 	orrmi.w	r3, r3, #32
 800e940:	6023      	strmi	r3, [r4, #0]
 800e942:	b91d      	cbnz	r5, 800e94c <_printf_i+0x198>
 800e944:	6823      	ldr	r3, [r4, #0]
 800e946:	f023 0320 	bic.w	r3, r3, #32
 800e94a:	6023      	str	r3, [r4, #0]
 800e94c:	2310      	movs	r3, #16
 800e94e:	e7af      	b.n	800e8b0 <_printf_i+0xfc>
 800e950:	6823      	ldr	r3, [r4, #0]
 800e952:	f043 0320 	orr.w	r3, r3, #32
 800e956:	6023      	str	r3, [r4, #0]
 800e958:	2378      	movs	r3, #120	; 0x78
 800e95a:	4828      	ldr	r0, [pc, #160]	; (800e9fc <_printf_i+0x248>)
 800e95c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e960:	e7e3      	b.n	800e92a <_printf_i+0x176>
 800e962:	065e      	lsls	r6, r3, #25
 800e964:	bf48      	it	mi
 800e966:	b2ad      	uxthmi	r5, r5
 800e968:	e7e6      	b.n	800e938 <_printf_i+0x184>
 800e96a:	4616      	mov	r6, r2
 800e96c:	e7bb      	b.n	800e8e6 <_printf_i+0x132>
 800e96e:	680b      	ldr	r3, [r1, #0]
 800e970:	6826      	ldr	r6, [r4, #0]
 800e972:	1d1d      	adds	r5, r3, #4
 800e974:	6960      	ldr	r0, [r4, #20]
 800e976:	600d      	str	r5, [r1, #0]
 800e978:	0635      	lsls	r5, r6, #24
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	d501      	bpl.n	800e982 <_printf_i+0x1ce>
 800e97e:	6018      	str	r0, [r3, #0]
 800e980:	e002      	b.n	800e988 <_printf_i+0x1d4>
 800e982:	0671      	lsls	r1, r6, #25
 800e984:	d5fb      	bpl.n	800e97e <_printf_i+0x1ca>
 800e986:	8018      	strh	r0, [r3, #0]
 800e988:	2300      	movs	r3, #0
 800e98a:	4616      	mov	r6, r2
 800e98c:	6123      	str	r3, [r4, #16]
 800e98e:	e7ba      	b.n	800e906 <_printf_i+0x152>
 800e990:	680b      	ldr	r3, [r1, #0]
 800e992:	1d1a      	adds	r2, r3, #4
 800e994:	600a      	str	r2, [r1, #0]
 800e996:	681e      	ldr	r6, [r3, #0]
 800e998:	2100      	movs	r1, #0
 800e99a:	4630      	mov	r0, r6
 800e99c:	6862      	ldr	r2, [r4, #4]
 800e99e:	f000 f8d9 	bl	800eb54 <memchr>
 800e9a2:	b108      	cbz	r0, 800e9a8 <_printf_i+0x1f4>
 800e9a4:	1b80      	subs	r0, r0, r6
 800e9a6:	6060      	str	r0, [r4, #4]
 800e9a8:	6863      	ldr	r3, [r4, #4]
 800e9aa:	6123      	str	r3, [r4, #16]
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e9b2:	e7a8      	b.n	800e906 <_printf_i+0x152>
 800e9b4:	4632      	mov	r2, r6
 800e9b6:	4649      	mov	r1, r9
 800e9b8:	4640      	mov	r0, r8
 800e9ba:	6923      	ldr	r3, [r4, #16]
 800e9bc:	47d0      	blx	sl
 800e9be:	3001      	adds	r0, #1
 800e9c0:	d0ab      	beq.n	800e91a <_printf_i+0x166>
 800e9c2:	6823      	ldr	r3, [r4, #0]
 800e9c4:	079b      	lsls	r3, r3, #30
 800e9c6:	d413      	bmi.n	800e9f0 <_printf_i+0x23c>
 800e9c8:	68e0      	ldr	r0, [r4, #12]
 800e9ca:	9b03      	ldr	r3, [sp, #12]
 800e9cc:	4298      	cmp	r0, r3
 800e9ce:	bfb8      	it	lt
 800e9d0:	4618      	movlt	r0, r3
 800e9d2:	e7a4      	b.n	800e91e <_printf_i+0x16a>
 800e9d4:	2301      	movs	r3, #1
 800e9d6:	4632      	mov	r2, r6
 800e9d8:	4649      	mov	r1, r9
 800e9da:	4640      	mov	r0, r8
 800e9dc:	47d0      	blx	sl
 800e9de:	3001      	adds	r0, #1
 800e9e0:	d09b      	beq.n	800e91a <_printf_i+0x166>
 800e9e2:	3501      	adds	r5, #1
 800e9e4:	68e3      	ldr	r3, [r4, #12]
 800e9e6:	9903      	ldr	r1, [sp, #12]
 800e9e8:	1a5b      	subs	r3, r3, r1
 800e9ea:	42ab      	cmp	r3, r5
 800e9ec:	dcf2      	bgt.n	800e9d4 <_printf_i+0x220>
 800e9ee:	e7eb      	b.n	800e9c8 <_printf_i+0x214>
 800e9f0:	2500      	movs	r5, #0
 800e9f2:	f104 0619 	add.w	r6, r4, #25
 800e9f6:	e7f5      	b.n	800e9e4 <_printf_i+0x230>
 800e9f8:	0800f405 	.word	0x0800f405
 800e9fc:	0800f416 	.word	0x0800f416

0800ea00 <_sbrk_r>:
 800ea00:	b538      	push	{r3, r4, r5, lr}
 800ea02:	2300      	movs	r3, #0
 800ea04:	4d05      	ldr	r5, [pc, #20]	; (800ea1c <_sbrk_r+0x1c>)
 800ea06:	4604      	mov	r4, r0
 800ea08:	4608      	mov	r0, r1
 800ea0a:	602b      	str	r3, [r5, #0]
 800ea0c:	f7f4 fff0 	bl	80039f0 <_sbrk>
 800ea10:	1c43      	adds	r3, r0, #1
 800ea12:	d102      	bne.n	800ea1a <_sbrk_r+0x1a>
 800ea14:	682b      	ldr	r3, [r5, #0]
 800ea16:	b103      	cbz	r3, 800ea1a <_sbrk_r+0x1a>
 800ea18:	6023      	str	r3, [r4, #0]
 800ea1a:	bd38      	pop	{r3, r4, r5, pc}
 800ea1c:	200017cc 	.word	0x200017cc

0800ea20 <__sread>:
 800ea20:	b510      	push	{r4, lr}
 800ea22:	460c      	mov	r4, r1
 800ea24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea28:	f000 f8fc 	bl	800ec24 <_read_r>
 800ea2c:	2800      	cmp	r0, #0
 800ea2e:	bfab      	itete	ge
 800ea30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ea32:	89a3      	ldrhlt	r3, [r4, #12]
 800ea34:	181b      	addge	r3, r3, r0
 800ea36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ea3a:	bfac      	ite	ge
 800ea3c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ea3e:	81a3      	strhlt	r3, [r4, #12]
 800ea40:	bd10      	pop	{r4, pc}

0800ea42 <__swrite>:
 800ea42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea46:	461f      	mov	r7, r3
 800ea48:	898b      	ldrh	r3, [r1, #12]
 800ea4a:	4605      	mov	r5, r0
 800ea4c:	05db      	lsls	r3, r3, #23
 800ea4e:	460c      	mov	r4, r1
 800ea50:	4616      	mov	r6, r2
 800ea52:	d505      	bpl.n	800ea60 <__swrite+0x1e>
 800ea54:	2302      	movs	r3, #2
 800ea56:	2200      	movs	r2, #0
 800ea58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea5c:	f000 f868 	bl	800eb30 <_lseek_r>
 800ea60:	89a3      	ldrh	r3, [r4, #12]
 800ea62:	4632      	mov	r2, r6
 800ea64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ea68:	81a3      	strh	r3, [r4, #12]
 800ea6a:	4628      	mov	r0, r5
 800ea6c:	463b      	mov	r3, r7
 800ea6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea76:	f000 b817 	b.w	800eaa8 <_write_r>

0800ea7a <__sseek>:
 800ea7a:	b510      	push	{r4, lr}
 800ea7c:	460c      	mov	r4, r1
 800ea7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea82:	f000 f855 	bl	800eb30 <_lseek_r>
 800ea86:	1c43      	adds	r3, r0, #1
 800ea88:	89a3      	ldrh	r3, [r4, #12]
 800ea8a:	bf15      	itete	ne
 800ea8c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ea8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ea92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ea96:	81a3      	strheq	r3, [r4, #12]
 800ea98:	bf18      	it	ne
 800ea9a:	81a3      	strhne	r3, [r4, #12]
 800ea9c:	bd10      	pop	{r4, pc}

0800ea9e <__sclose>:
 800ea9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eaa2:	f000 b813 	b.w	800eacc <_close_r>
	...

0800eaa8 <_write_r>:
 800eaa8:	b538      	push	{r3, r4, r5, lr}
 800eaaa:	4604      	mov	r4, r0
 800eaac:	4608      	mov	r0, r1
 800eaae:	4611      	mov	r1, r2
 800eab0:	2200      	movs	r2, #0
 800eab2:	4d05      	ldr	r5, [pc, #20]	; (800eac8 <_write_r+0x20>)
 800eab4:	602a      	str	r2, [r5, #0]
 800eab6:	461a      	mov	r2, r3
 800eab8:	f7f4 ff4d 	bl	8003956 <_write>
 800eabc:	1c43      	adds	r3, r0, #1
 800eabe:	d102      	bne.n	800eac6 <_write_r+0x1e>
 800eac0:	682b      	ldr	r3, [r5, #0]
 800eac2:	b103      	cbz	r3, 800eac6 <_write_r+0x1e>
 800eac4:	6023      	str	r3, [r4, #0]
 800eac6:	bd38      	pop	{r3, r4, r5, pc}
 800eac8:	200017cc 	.word	0x200017cc

0800eacc <_close_r>:
 800eacc:	b538      	push	{r3, r4, r5, lr}
 800eace:	2300      	movs	r3, #0
 800ead0:	4d05      	ldr	r5, [pc, #20]	; (800eae8 <_close_r+0x1c>)
 800ead2:	4604      	mov	r4, r0
 800ead4:	4608      	mov	r0, r1
 800ead6:	602b      	str	r3, [r5, #0]
 800ead8:	f7f4 ff59 	bl	800398e <_close>
 800eadc:	1c43      	adds	r3, r0, #1
 800eade:	d102      	bne.n	800eae6 <_close_r+0x1a>
 800eae0:	682b      	ldr	r3, [r5, #0]
 800eae2:	b103      	cbz	r3, 800eae6 <_close_r+0x1a>
 800eae4:	6023      	str	r3, [r4, #0]
 800eae6:	bd38      	pop	{r3, r4, r5, pc}
 800eae8:	200017cc 	.word	0x200017cc

0800eaec <_fstat_r>:
 800eaec:	b538      	push	{r3, r4, r5, lr}
 800eaee:	2300      	movs	r3, #0
 800eaf0:	4d06      	ldr	r5, [pc, #24]	; (800eb0c <_fstat_r+0x20>)
 800eaf2:	4604      	mov	r4, r0
 800eaf4:	4608      	mov	r0, r1
 800eaf6:	4611      	mov	r1, r2
 800eaf8:	602b      	str	r3, [r5, #0]
 800eafa:	f7f4 ff53 	bl	80039a4 <_fstat>
 800eafe:	1c43      	adds	r3, r0, #1
 800eb00:	d102      	bne.n	800eb08 <_fstat_r+0x1c>
 800eb02:	682b      	ldr	r3, [r5, #0]
 800eb04:	b103      	cbz	r3, 800eb08 <_fstat_r+0x1c>
 800eb06:	6023      	str	r3, [r4, #0]
 800eb08:	bd38      	pop	{r3, r4, r5, pc}
 800eb0a:	bf00      	nop
 800eb0c:	200017cc 	.word	0x200017cc

0800eb10 <_isatty_r>:
 800eb10:	b538      	push	{r3, r4, r5, lr}
 800eb12:	2300      	movs	r3, #0
 800eb14:	4d05      	ldr	r5, [pc, #20]	; (800eb2c <_isatty_r+0x1c>)
 800eb16:	4604      	mov	r4, r0
 800eb18:	4608      	mov	r0, r1
 800eb1a:	602b      	str	r3, [r5, #0]
 800eb1c:	f7f4 ff51 	bl	80039c2 <_isatty>
 800eb20:	1c43      	adds	r3, r0, #1
 800eb22:	d102      	bne.n	800eb2a <_isatty_r+0x1a>
 800eb24:	682b      	ldr	r3, [r5, #0]
 800eb26:	b103      	cbz	r3, 800eb2a <_isatty_r+0x1a>
 800eb28:	6023      	str	r3, [r4, #0]
 800eb2a:	bd38      	pop	{r3, r4, r5, pc}
 800eb2c:	200017cc 	.word	0x200017cc

0800eb30 <_lseek_r>:
 800eb30:	b538      	push	{r3, r4, r5, lr}
 800eb32:	4604      	mov	r4, r0
 800eb34:	4608      	mov	r0, r1
 800eb36:	4611      	mov	r1, r2
 800eb38:	2200      	movs	r2, #0
 800eb3a:	4d05      	ldr	r5, [pc, #20]	; (800eb50 <_lseek_r+0x20>)
 800eb3c:	602a      	str	r2, [r5, #0]
 800eb3e:	461a      	mov	r2, r3
 800eb40:	f7f4 ff49 	bl	80039d6 <_lseek>
 800eb44:	1c43      	adds	r3, r0, #1
 800eb46:	d102      	bne.n	800eb4e <_lseek_r+0x1e>
 800eb48:	682b      	ldr	r3, [r5, #0]
 800eb4a:	b103      	cbz	r3, 800eb4e <_lseek_r+0x1e>
 800eb4c:	6023      	str	r3, [r4, #0]
 800eb4e:	bd38      	pop	{r3, r4, r5, pc}
 800eb50:	200017cc 	.word	0x200017cc

0800eb54 <memchr>:
 800eb54:	4603      	mov	r3, r0
 800eb56:	b510      	push	{r4, lr}
 800eb58:	b2c9      	uxtb	r1, r1
 800eb5a:	4402      	add	r2, r0
 800eb5c:	4293      	cmp	r3, r2
 800eb5e:	4618      	mov	r0, r3
 800eb60:	d101      	bne.n	800eb66 <memchr+0x12>
 800eb62:	2000      	movs	r0, #0
 800eb64:	e003      	b.n	800eb6e <memchr+0x1a>
 800eb66:	7804      	ldrb	r4, [r0, #0]
 800eb68:	3301      	adds	r3, #1
 800eb6a:	428c      	cmp	r4, r1
 800eb6c:	d1f6      	bne.n	800eb5c <memchr+0x8>
 800eb6e:	bd10      	pop	{r4, pc}

0800eb70 <memcpy>:
 800eb70:	440a      	add	r2, r1
 800eb72:	4291      	cmp	r1, r2
 800eb74:	f100 33ff 	add.w	r3, r0, #4294967295
 800eb78:	d100      	bne.n	800eb7c <memcpy+0xc>
 800eb7a:	4770      	bx	lr
 800eb7c:	b510      	push	{r4, lr}
 800eb7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb82:	4291      	cmp	r1, r2
 800eb84:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb88:	d1f9      	bne.n	800eb7e <memcpy+0xe>
 800eb8a:	bd10      	pop	{r4, pc}

0800eb8c <memmove>:
 800eb8c:	4288      	cmp	r0, r1
 800eb8e:	b510      	push	{r4, lr}
 800eb90:	eb01 0402 	add.w	r4, r1, r2
 800eb94:	d902      	bls.n	800eb9c <memmove+0x10>
 800eb96:	4284      	cmp	r4, r0
 800eb98:	4623      	mov	r3, r4
 800eb9a:	d807      	bhi.n	800ebac <memmove+0x20>
 800eb9c:	1e43      	subs	r3, r0, #1
 800eb9e:	42a1      	cmp	r1, r4
 800eba0:	d008      	beq.n	800ebb4 <memmove+0x28>
 800eba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eba6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ebaa:	e7f8      	b.n	800eb9e <memmove+0x12>
 800ebac:	4601      	mov	r1, r0
 800ebae:	4402      	add	r2, r0
 800ebb0:	428a      	cmp	r2, r1
 800ebb2:	d100      	bne.n	800ebb6 <memmove+0x2a>
 800ebb4:	bd10      	pop	{r4, pc}
 800ebb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ebba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ebbe:	e7f7      	b.n	800ebb0 <memmove+0x24>

0800ebc0 <__malloc_lock>:
 800ebc0:	4801      	ldr	r0, [pc, #4]	; (800ebc8 <__malloc_lock+0x8>)
 800ebc2:	f7ff bb1f 	b.w	800e204 <__retarget_lock_acquire_recursive>
 800ebc6:	bf00      	nop
 800ebc8:	200017c4 	.word	0x200017c4

0800ebcc <__malloc_unlock>:
 800ebcc:	4801      	ldr	r0, [pc, #4]	; (800ebd4 <__malloc_unlock+0x8>)
 800ebce:	f7ff bb1a 	b.w	800e206 <__retarget_lock_release_recursive>
 800ebd2:	bf00      	nop
 800ebd4:	200017c4 	.word	0x200017c4

0800ebd8 <_realloc_r>:
 800ebd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebda:	4607      	mov	r7, r0
 800ebdc:	4614      	mov	r4, r2
 800ebde:	460e      	mov	r6, r1
 800ebe0:	b921      	cbnz	r1, 800ebec <_realloc_r+0x14>
 800ebe2:	4611      	mov	r1, r2
 800ebe4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ebe8:	f7ff bbbe 	b.w	800e368 <_malloc_r>
 800ebec:	b922      	cbnz	r2, 800ebf8 <_realloc_r+0x20>
 800ebee:	f7ff fb6f 	bl	800e2d0 <_free_r>
 800ebf2:	4625      	mov	r5, r4
 800ebf4:	4628      	mov	r0, r5
 800ebf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebf8:	f000 f826 	bl	800ec48 <_malloc_usable_size_r>
 800ebfc:	42a0      	cmp	r0, r4
 800ebfe:	d20f      	bcs.n	800ec20 <_realloc_r+0x48>
 800ec00:	4621      	mov	r1, r4
 800ec02:	4638      	mov	r0, r7
 800ec04:	f7ff fbb0 	bl	800e368 <_malloc_r>
 800ec08:	4605      	mov	r5, r0
 800ec0a:	2800      	cmp	r0, #0
 800ec0c:	d0f2      	beq.n	800ebf4 <_realloc_r+0x1c>
 800ec0e:	4631      	mov	r1, r6
 800ec10:	4622      	mov	r2, r4
 800ec12:	f7ff ffad 	bl	800eb70 <memcpy>
 800ec16:	4631      	mov	r1, r6
 800ec18:	4638      	mov	r0, r7
 800ec1a:	f7ff fb59 	bl	800e2d0 <_free_r>
 800ec1e:	e7e9      	b.n	800ebf4 <_realloc_r+0x1c>
 800ec20:	4635      	mov	r5, r6
 800ec22:	e7e7      	b.n	800ebf4 <_realloc_r+0x1c>

0800ec24 <_read_r>:
 800ec24:	b538      	push	{r3, r4, r5, lr}
 800ec26:	4604      	mov	r4, r0
 800ec28:	4608      	mov	r0, r1
 800ec2a:	4611      	mov	r1, r2
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	4d05      	ldr	r5, [pc, #20]	; (800ec44 <_read_r+0x20>)
 800ec30:	602a      	str	r2, [r5, #0]
 800ec32:	461a      	mov	r2, r3
 800ec34:	f7f4 fe72 	bl	800391c <_read>
 800ec38:	1c43      	adds	r3, r0, #1
 800ec3a:	d102      	bne.n	800ec42 <_read_r+0x1e>
 800ec3c:	682b      	ldr	r3, [r5, #0]
 800ec3e:	b103      	cbz	r3, 800ec42 <_read_r+0x1e>
 800ec40:	6023      	str	r3, [r4, #0]
 800ec42:	bd38      	pop	{r3, r4, r5, pc}
 800ec44:	200017cc 	.word	0x200017cc

0800ec48 <_malloc_usable_size_r>:
 800ec48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec4c:	1f18      	subs	r0, r3, #4
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	bfbc      	itt	lt
 800ec52:	580b      	ldrlt	r3, [r1, r0]
 800ec54:	18c0      	addlt	r0, r0, r3
 800ec56:	4770      	bx	lr

0800ec58 <_init>:
 800ec58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec5a:	bf00      	nop
 800ec5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec5e:	bc08      	pop	{r3}
 800ec60:	469e      	mov	lr, r3
 800ec62:	4770      	bx	lr

0800ec64 <_fini>:
 800ec64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec66:	bf00      	nop
 800ec68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec6a:	bc08      	pop	{r3}
 800ec6c:	469e      	mov	lr, r3
 800ec6e:	4770      	bx	lr
